// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  asmConsts: [],
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) return 0; }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;








//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module['AsciiToString'] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module['stringToAscii'] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the a given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module['UTF8ArrayToString'] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8, ptr);
}
Module['UTF8ToString'] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module['stringToUTF8Array'] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
Module['stringToUTF8'] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module['lengthBytesUTF8'] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF16'] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module['lengthBytesUTF16'] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF32'] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module['lengthBytesUTF32'] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 67108864;


var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}



// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);

HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===

Runtime.asmConsts = [];





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 107904;
  /* global initializers */ __ATINIT__.push();
  

var memoryInitializer = "drystal.js.mem";




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(lookup.node.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};
  
  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;
  
  function _free() {
  }
  Module["_free"] = _free;
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }
  
  function _putenv(string) {
      // int putenv(char *string);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/putenv.html
      // WARNING: According to the standard (and the glibc implementation), the
      //          string is taken by reference so future changes are reflected.
      //          We copy it instead, possibly breaking some uses.
      if (string === 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      string = Pointer_stringify(string);
      var splitPoint = string.indexOf('=')
      if (string === '' || string.indexOf('=') === -1) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      var name = string.slice(0, splitPoint);
      var value = string.slice(splitPoint + 1);
      if (!(name in ENV) || ENV[name] !== value) {
        ENV[name] = value;
        ___buildEnvironment(ENV);
      }
      return 0;
    }
  
  function _SDL_RWFromConstMem(mem, size) {
      var id = SDL.rwops.length; // TODO: recycle ids when they are null
      SDL.rwops.push({ bytes: mem, count: size });
      return id;
    }function _TTF_FontHeight(font) {
      var fontData = SDL.fonts[font];
      return fontData.size;
    }function _TTF_SizeText(font, text, w, h) {
      var fontData = SDL.fonts[font];
      if (w) {
        HEAP32[((w)>>2)]=SDL.estimateTextWidth(fontData, Pointer_stringify(text));
      }
      if (h) {
        HEAP32[((h)>>2)]=fontData.size;
      }
      return 0;
    }function _TTF_RenderText_Solid(font, text, color) {
      // XXX the font and color are ignored
      text = Pointer_stringify(text) || ' '; // if given an empty string, still return a valid surface
      var fontData = SDL.fonts[font];
      var w = SDL.estimateTextWidth(fontData, text);
      var h = fontData.size;
      var color = SDL.loadColorToCSSRGB(color); // XXX alpha breaks fonts?
      var fontString = h + 'px ' + fontData.name;
      var surf = SDL.makeSurface(w, h, 0, false, 'text:' + text); // bogus numbers..
      var surfData = SDL.surfaces[surf];
      surfData.ctx.save();
      surfData.ctx.fillStyle = color;
      surfData.ctx.font = fontString;
      surfData.ctx.textBaseline = 'top';
      surfData.ctx.fillText(text, 0, 0);
      surfData.ctx.restore();
      return surf;
    }function _Mix_HaltMusic() {
      var audio = SDL.music.audio;
      if (audio) {
        audio.src = audio.src; // rewind <media> element
        audio.currentPosition = 0; // rewind Web Audio graph playback.
        audio.pause();
      }
      SDL.music.audio = null;
      if (SDL.hookMusicFinished) {
        Runtime.dynCall('v', SDL.hookMusicFinished);
      }
      return 0;
    }function _Mix_PlayMusic(id, loops) {
      // Pause old music if it exists.
      if (SDL.music.audio) {
        if (!SDL.music.audio.paused) Module.printErr('Music is already playing. ' + SDL.music.source);
        SDL.music.audio.pause();
      }
      var info = SDL.audios[id];
      var audio;
      if (info.webAudio) { // Play via Web Audio API
        // Create an instance of the WebAudio object.
        audio = {};
        audio.resource = info; // This new webAudio object is an instance that refers to this existing resource.
        audio.paused = false;
        audio.currentPosition = 0;
        audio.play = function() { SDL.playWebAudio(this); }
        audio.pause = function() { SDL.pauseWebAudio(this); }
      } else if (info.audio) { // Play via the <audio> element
        audio = info.audio;
      }
      audio['onended'] = function() { if (SDL.music.audio == this) _Mix_HaltMusic(); } // will send callback
      audio.loop = loops != 0; // TODO: handle N loops for finite N
      audio.volume = SDL.music.volume;
      SDL.music.audio = audio;
      audio.play();
      return 0;
    }function _Mix_FreeChunk(id) {
      SDL.audios[id] = null;
    }function _Mix_LoadWAV_RW(rwopsID, freesrc) {
      var rwops = SDL.rwops[rwopsID];
  
      if (rwops === undefined)
        return 0;
  
      var filename = '';
      var audio;
      var webAudio;
      var bytes;
  
      if (rwops.filename !== undefined) {
        filename = PATH.resolve(rwops.filename);
        var raw = Module["preloadedAudios"][filename];
        if (!raw) {
          if (raw === null) Module.printErr('Trying to reuse preloaded audio, but freePreloadedMediaOnUse is set!');
          if (!Module.noAudioDecoding) Runtime.warnOnce('Cannot find preloaded audio ' + filename);
  
          // see if we can read the file-contents from the in-memory FS
          try {
            bytes = FS.readFile(filename);
          } catch (e) {
            Module.printErr('Couldn\'t find file for: ' + filename);
            return 0;
          }
        }
        if (Module['freePreloadedMediaOnUse']) {
          Module["preloadedAudios"][filename] = null;
        }
        audio = raw;
      }
      else if (rwops.bytes !== undefined) {
        // For Web Audio context buffer decoding, we must make a clone of the audio data, but for <media> element,
        // a view to existing data is sufficient.
        if (SDL.webAudioAvailable()) bytes = HEAPU8.buffer.slice(rwops.bytes, rwops.bytes + rwops.count);
        else bytes = HEAPU8.subarray(rwops.bytes, rwops.bytes + rwops.count);
      }
      else {
        return 0;
      }
  
      var arrayBuffer = bytes ? bytes.buffer || bytes : bytes;
  
      // To allow user code to work around browser bugs with audio playback on <audio> elements an Web Audio, enable
      // the user code to hook in a callback to decide on a file basis whether each file should use Web Audio or <audio> for decoding and playback.
      // In particular, see https://bugzilla.mozilla.org/show_bug.cgi?id=654787 and ?id=1012801 for tradeoffs.
      var canPlayWithWebAudio = Module['SDL_canPlayWithWebAudio'] === undefined || Module['SDL_canPlayWithWebAudio'](filename, arrayBuffer);
  
      if (bytes !== undefined && SDL.webAudioAvailable() && canPlayWithWebAudio) {
        audio = undefined;
        webAudio = {};
        // The audio decoding process is asynchronous, which gives trouble if user code plays the audio data back immediately
        // after loading. Therefore prepare an array of callback handlers to run when this audio decoding is complete, which
        // will then start the playback (with some delay).
        webAudio.onDecodeComplete = []; // While this member array exists, decoding hasn't finished yet.
        function onDecodeComplete(data) {
          webAudio.decodedBuffer = data;
          // Call all handlers that were waiting for this decode to finish, and clear the handler list.
          webAudio.onDecodeComplete.forEach(function(e) { e(); });
          webAudio.onDecodeComplete = undefined; // Don't allow more callback handlers since audio has finished decoding.
        }
  
        SDL.audioContext['decodeAudioData'](arrayBuffer, onDecodeComplete);
      } else if (audio === undefined && bytes) {
        // Here, we didn't find a preloaded audio but we either were passed a filepath for
        // which we loaded bytes, or we were passed some bytes
        var blob = new Blob([bytes], {type: rwops.mimetype});
        var url = URL.createObjectURL(blob);
        audio = new Audio();
        audio.src = url;
        audio.mozAudioChannelType = 'content'; // bugzilla 910340
      }
  
      var id = SDL.audios.length;
      // Keep the loaded audio in the audio arrays, ready for playback
      SDL.audios.push({
        source: filename,
        audio: audio, // Points to the <audio> element, if loaded
        webAudio: webAudio // Points to a Web Audio -specific resource object, if loaded
      });
      return id;
    }function _Mix_PlayChannel(channel, id, loops) {
      // TODO: handle fixed amount of N loops. Currently loops either 0 or infinite times.
  
      // Get the audio element associated with the ID
      var info = SDL.audios[id];
      if (!info) return -1;
      if (!info.audio && !info.webAudio) return -1;
  
      // If the user asks us to allocate a channel automatically, get the first
      // free one.
      if (channel == -1) {
        for (var i = SDL.channelMinimumNumber; i < SDL.numChannels; i++) {
          if (!SDL.channels[i].audio) {
            channel = i;
            break;
          }
        }
        if (channel == -1) {
          Module.printErr('All ' + SDL.numChannels + ' channels in use!');
          return -1;
        }
      }
      var channelInfo = SDL.channels[channel];
      var audio;
      if (info.webAudio) {
        // Create an instance of the WebAudio object.
        audio = {};
        audio.resource = info; // This new object is an instance that refers to this existing resource.
        audio.paused = false;
        audio.currentPosition = 0;
        // Make our instance look similar to the instance of a <media> to make api simple.
        audio.play = function() { SDL.playWebAudio(this); }
        audio.pause = function() { SDL.pauseWebAudio(this); }
      } else {
        // We clone the audio node to utilize the preloaded audio buffer, since
        // the browser has already preloaded the audio file.
        audio = info.audio.cloneNode(true);
        audio.numChannels = info.audio.numChannels;
        audio.frequency = info.audio.frequency;
      }
      audio['onended'] = function SDL_audio_onended() { // TODO: cache these
        if (channelInfo.audio == this) { channelInfo.audio.paused = true; channelInfo.audio = null; }
        if (SDL.channelFinished) Runtime.getFuncWrapper(SDL.channelFinished, 'vi')(channel);
      }
      channelInfo.audio = audio;
      // TODO: handle N loops. Behavior matches Mix_PlayMusic
      audio.loop = loops != 0;
      audio.volume = channelInfo.volume;
      audio.play();
      return channel;
    }function _SDL_PauseAudio(pauseOn) {
      if (!SDL.audio) {
        return;
      }
      if (pauseOn) {
        if (SDL.audio.timer !== undefined) {
          clearTimeout(SDL.audio.timer);
          SDL.audio.numAudioTimersPending = 0;
          SDL.audio.timer = undefined;
        }
      } else if (!SDL.audio.timer) {
        // Start the audio playback timer callback loop.
        SDL.audio.numAudioTimersPending = 1;
        SDL.audio.timer = Browser.safeSetTimeout(SDL.audio.caller, 1);
      }
      SDL.audio.paused = pauseOn;
    }function _SDL_CloseAudio() {
      if (SDL.audio) {
        _SDL_PauseAudio(1);
        _free(SDL.audio.buffer);
        SDL.audio = null;
        SDL.allocateChannels(0);
      }
    }function _SDL_LockSurface(surf) {
      var surfData = SDL.surfaces[surf];
  
      surfData.locked++;
      if (surfData.locked > 1) return 0;
  
      if (!surfData.buffer) {
        surfData.buffer = _malloc(surfData.width * surfData.height * 4);
        HEAP32[(((surf)+(20))>>2)]=surfData.buffer;
      }
  
      // Mark in C/C++-accessible SDL structure
      // SDL_Surface has the following fields: Uint32 flags, SDL_PixelFormat *format; int w, h; Uint16 pitch; void *pixels; ...
      // So we have fields all of the same size, and 5 of them before us.
      // TODO: Use macros like in library.js
      HEAP32[(((surf)+(20))>>2)]=surfData.buffer;
  
      if (surf == SDL.screen && Module.screenIsReadOnly && surfData.image) return 0;
  
      if (SDL.defaults.discardOnLock) {
        if (!surfData.image) {
          surfData.image = surfData.ctx.createImageData(surfData.width, surfData.height);
        }
        if (!SDL.defaults.opaqueFrontBuffer) return;
      } else {
        surfData.image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
      }
  
      // Emulate desktop behavior and kill alpha values on the locked surface. (very costly!) Set SDL.defaults.opaqueFrontBuffer = false
      // if you don't want this.
      if (surf == SDL.screen && SDL.defaults.opaqueFrontBuffer) {
        var data = surfData.image.data;
        var num = data.length;
        for (var i = 0; i < num/4; i++) {
          data[i*4+3] = 255; // opacity, as canvases blend alpha
        }
      }
  
      if (SDL.defaults.copyOnLock && !SDL.defaults.discardOnLock) {
        // Copy pixel data to somewhere accessible to 'C/C++'
        if (surfData.isFlagSet(0x00200000 /* SDL_HWPALETTE */)) {
          // If this is neaded then
          // we should compact the data from 32bpp to 8bpp index.
          // I think best way to implement this is use
          // additional colorMap hash (color->index).
          // Something like this:
          //
          // var size = surfData.width * surfData.height;
          // var data = '';
          // for (var i = 0; i<size; i++) {
          //   var color = SDL.translateRGBAToColor(
          //     surfData.image.data[i*4   ], 
          //     surfData.image.data[i*4 +1], 
          //     surfData.image.data[i*4 +2], 
          //     255);
          //   var index = surfData.colorMap[color];
          //   HEAP8[(((surfData.buffer)+(i))>>0)]=index;
          // }
          throw 'CopyOnLock is not supported for SDL_LockSurface with SDL_HWPALETTE flag set' + new Error().stack;
        } else {
          HEAPU8.set(surfData.image.data, surfData.buffer);
        }
      }
  
      return 0;
    }
  
  function _SDL_FreeRW(rwopsID) {
      SDL.rwops[rwopsID] = null;
      while (SDL.rwops.length > 0 && SDL.rwops[SDL.rwops.length-1] === null) {
        SDL.rwops.pop();
      }
    }function _IMG_Load_RW(rwopsID, freeSrc) {
      try {
        // stb_image integration support
        function cleanup() {
          if (rwops && freeSrc) _SDL_FreeRW(rwopsID);
        };
        function addCleanup(func) {
          var old = cleanup;
          cleanup = function added_cleanup() {
            old();
            func();
          }
        }
        function callStbImage(func, params) {
          var x = Module['_malloc'](4);
          var y = Module['_malloc'](4);
          var comp = Module['_malloc'](4);
          addCleanup(function() {
            Module['_free'](x);
            Module['_free'](y);
            Module['_free'](comp);
            if (data) Module['_stbi_image_free'](data);
          });
          var data = Module['_' + func].apply(null, params.concat([x, y, comp, 0]));
          if (!data) return null;
          return {
            rawData: true,
            data: data,
            width: HEAP32[((x)>>2)],
            height: HEAP32[((y)>>2)],
            size: HEAP32[((x)>>2)] * HEAP32[((y)>>2)] * HEAP32[((comp)>>2)],
            bpp: HEAP32[((comp)>>2)]
          };
        }
  
        var rwops = SDL.rwops[rwopsID];
        if (rwops === undefined) {
          return 0;
        }
  
        var filename = rwops.filename;
        if (filename === undefined) {
          Runtime.warnOnce('Only file names that have been preloaded are supported for IMG_Load_RW. Consider using STB_IMAGE=1 if you want synchronous image decoding (see settings.js)');
          return 0;
        }
  
        if (!raw) {
          filename = PATH.resolve(filename);
          var raw = Module["preloadedImages"][filename];
          if (!raw) {
            if (raw === null) Module.printErr('Trying to reuse preloaded image, but freePreloadedMediaOnUse is set!');
            Runtime.warnOnce('Cannot find preloaded image ' + filename);
            Runtime.warnOnce('Cannot find preloaded image ' + filename + '. Consider using STB_IMAGE=1 if you want synchronous image decoding (see settings.js)');
            return 0;
          } else if (Module['freePreloadedMediaOnUse']) {
            Module["preloadedImages"][filename] = null;
          }
        }
  
        var surf = SDL.makeSurface(raw.width, raw.height, 0, false, 'load:' + filename);
        var surfData = SDL.surfaces[surf];
        surfData.ctx.globalCompositeOperation = "copy";
        if (!raw.rawData) {
          surfData.ctx.drawImage(raw, 0, 0, raw.width, raw.height, 0, 0, raw.width, raw.height);
        } else {
          var imageData = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
          if (raw.bpp == 4) {
            // rgba
            imageData.data.set(HEAPU8.subarray((raw.data),(raw.data+raw.size)));
          } else if (raw.bpp == 3) {
            // rgb
            var pixels = raw.size/3;
            var data = imageData.data;
            var sourcePtr = raw.data;
            var destPtr = 0;
            for (var i = 0; i < pixels; i++) {
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = 255;
            }
          } else if (raw.bpp == 1) {
            // grayscale
            var pixels = raw.size;
            var data = imageData.data;
            var sourcePtr = raw.data;
            var destPtr = 0;
            for (var i = 0; i < pixels; i++) {
              var value = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = value;
              data[destPtr++] = value;
              data[destPtr++] = value;
              data[destPtr++] = 255;
            }
          } else {
            Module.printErr('cannot handle bpp ' + raw.bpp);
            return 0;
          }
          surfData.ctx.putImageData(imageData, 0, 0);
        }
        surfData.ctx.globalCompositeOperation = "source-over";
        // XXX SDL does not specify that loaded images must have available pixel data, in fact
        //     there are cases where you just want to blit them, so you just need the hardware
        //     accelerated version. However, code everywhere seems to assume that the pixels
        //     are in fact available, so we retrieve it here. This does add overhead though.
        _SDL_LockSurface(surf);
        surfData.locked--; // The surface is not actually locked in this hack
        if (SDL.GL) {
          // After getting the pixel data, we can free the canvas and context if we do not need to do 2D canvas blitting
          surfData.canvas = surfData.ctx = null;
        }
        return surf;
      } finally {
        cleanup();
      }
    }
  
  function _SDL_RWFromFile(_name, mode) {
      var id = SDL.rwops.length; // TODO: recycle ids when they are null
      var name = Pointer_stringify(_name)
      SDL.rwops.push({ filename: name, mimetype: Browser.getMimetype(name) });
      return id;
    }function _IMG_Load(filename){
      var rwops = _SDL_RWFromFile(filename);
      var result = _IMG_Load_RW(rwops, 1);
      return result;
    }function _SDL_UpperBlitScaled(src, srcrect, dst, dstrect) {
      return SDL.blitSurface(src, srcrect, dst, dstrect, true);
    }function _SDL_UpperBlit(src, srcrect, dst, dstrect) {
      return SDL.blitSurface(src, srcrect, dst, dstrect, false);
    }function _SDL_GetTicks() {
      return (Date.now() - SDL.startTime)|0;
    }var SDL={defaults:{width:320,height:200,copyOnLock:true,discardOnLock:false,opaqueFrontBuffer:true},version:null,surfaces:{},canvasPool:[],events:[],fonts:[null],audios:[null],rwops:[null],music:{audio:null,volume:1},mixerFrequency:22050,mixerFormat:32784,mixerNumChannels:2,mixerChunkSize:1024,channelMinimumNumber:0,GL:false,glAttributes:{0:3,1:3,2:2,3:0,4:0,5:1,6:16,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:1,16:0,17:0,18:0},keyboardState:null,keyboardMap:{},canRequestFullscreen:false,isRequestingFullscreen:false,textInput:false,startTime:null,initFlags:0,buttonState:0,modState:0,DOMButtons:[0,0,0],DOMEventToSDLEvent:{},TOUCH_DEFAULT_ID:0,eventHandler:null,eventHandlerContext:null,eventHandlerTemp:0,keyCodes:{16:1249,17:1248,18:1250,20:1081,33:1099,34:1102,35:1101,36:1098,37:1104,38:1106,39:1103,40:1105,44:316,45:1097,46:127,91:1251,93:1125,96:1122,97:1113,98:1114,99:1115,100:1116,101:1117,102:1118,103:1119,104:1120,105:1121,106:1109,107:1111,109:1110,110:1123,111:1108,112:1082,113:1083,114:1084,115:1085,116:1086,117:1087,118:1088,119:1089,120:1090,121:1091,122:1092,123:1093,124:1128,125:1129,126:1130,127:1131,128:1132,129:1133,130:1134,131:1135,132:1136,133:1137,134:1138,135:1139,144:1107,160:94,161:33,162:34,163:35,164:36,165:37,166:38,167:95,168:40,169:41,170:42,171:43,172:124,173:45,174:123,175:125,176:126,181:127,182:129,183:128,188:44,190:46,191:47,192:96,219:91,220:92,221:93,222:39,224:1251},scanCodes:{8:42,9:43,13:40,27:41,32:44,35:204,39:53,44:54,46:55,47:56,48:39,49:30,50:31,51:32,52:33,53:34,54:35,55:36,56:37,57:38,58:203,59:51,61:46,91:47,92:49,93:48,96:52,97:4,98:5,99:6,100:7,101:8,102:9,103:10,104:11,105:12,106:13,107:14,108:15,109:16,110:17,111:18,112:19,113:20,114:21,115:22,116:23,117:24,118:25,119:26,120:27,121:28,122:29,127:76,305:224,308:226,316:70},loadRect:function (rect) {
        return {
          x: HEAP32[((rect + 0)>>2)],
          y: HEAP32[((rect + 4)>>2)],
          w: HEAP32[((rect + 8)>>2)],
          h: HEAP32[((rect + 12)>>2)]
        };
      },updateRect:function (rect, r) {
        HEAP32[((rect)>>2)]=r.x;
        HEAP32[(((rect)+(4))>>2)]=r.y;
        HEAP32[(((rect)+(8))>>2)]=r.w;
        HEAP32[(((rect)+(12))>>2)]=r.h;
      },intersectionOfRects:function (first, second) {
        var leftX = Math.max(first.x, second.x);
        var leftY = Math.max(first.y, second.y);
        var rightX = Math.min(first.x + first.w, second.x + second.w);
        var rightY = Math.min(first.y + first.h, second.y + second.h);
  
        return {
          x: leftX,
          y: leftY,
          w: Math.max(leftX, rightX) - leftX,
          h: Math.max(leftY, rightY) - leftY
        }
      },checkPixelFormat:function (fmt) {
      },loadColorToCSSRGB:function (color) {
        var rgba = HEAP32[((color)>>2)];
        return 'rgb(' + (rgba&255) + ',' + ((rgba >> 8)&255) + ',' + ((rgba >> 16)&255) + ')';
      },loadColorToCSSRGBA:function (color) {
        var rgba = HEAP32[((color)>>2)];
        return 'rgba(' + (rgba&255) + ',' + ((rgba >> 8)&255) + ',' + ((rgba >> 16)&255) + ',' + (((rgba >> 24)&255)/255) + ')';
      },translateColorToCSSRGBA:function (rgba) {
        return 'rgba(' + (rgba&0xff) + ',' + (rgba>>8 & 0xff) + ',' + (rgba>>16 & 0xff) + ',' + (rgba>>>24)/0xff + ')';
      },translateRGBAToCSSRGBA:function (r, g, b, a) {
        return 'rgba(' + (r&0xff) + ',' + (g&0xff) + ',' + (b&0xff) + ',' + (a&0xff)/255 + ')';
      },translateRGBAToColor:function (r, g, b, a) {
        return r | g << 8 | b << 16 | a << 24;
      },makeSurface:function (width, height, flags, usePageCanvas, source, rmask, gmask, bmask, amask) {
        flags = flags || 0;
        var is_SDL_HWSURFACE = flags & 0x00000001;
        var is_SDL_HWPALETTE = flags & 0x00200000;
        var is_SDL_OPENGL = flags & 0x04000000;
  
        var surf = _malloc(60);
        var pixelFormat = _malloc(44);
        //surface with SDL_HWPALETTE flag is 8bpp surface (1 byte)
        var bpp = is_SDL_HWPALETTE ? 1 : 4;
        var buffer = 0;
  
        // preemptively initialize this for software surfaces,
        // otherwise it will be lazily initialized inside of SDL_LockSurface
        if (!is_SDL_HWSURFACE && !is_SDL_OPENGL) {
          buffer = _malloc(width * height * 4);
        }
  
        HEAP32[((surf)>>2)]=flags;
        HEAP32[(((surf)+(4))>>2)]=pixelFormat;
        HEAP32[(((surf)+(8))>>2)]=width;
        HEAP32[(((surf)+(12))>>2)]=height;
        HEAP32[(((surf)+(16))>>2)]=width * bpp;  // assuming RGBA or indexed for now,
                                                                                          // since that is what ImageData gives us in browsers
        HEAP32[(((surf)+(20))>>2)]=buffer;
  
        HEAP32[(((surf)+(36))>>2)]=0;
        HEAP32[(((surf)+(40))>>2)]=0;
        HEAP32[(((surf)+(44))>>2)]=Module["canvas"].width;
        HEAP32[(((surf)+(48))>>2)]=Module["canvas"].height;
  
        HEAP32[(((surf)+(56))>>2)]=1;
  
        HEAP32[((pixelFormat)>>2)]=-2042224636;
        HEAP32[(((pixelFormat)+(4))>>2)]=0;// TODO
        HEAP8[(((pixelFormat)+(8))>>0)]=bpp * 8;
        HEAP8[(((pixelFormat)+(9))>>0)]=bpp;
  
        HEAP32[(((pixelFormat)+(12))>>2)]=rmask || 0x000000ff;
        HEAP32[(((pixelFormat)+(16))>>2)]=gmask || 0x0000ff00;
        HEAP32[(((pixelFormat)+(20))>>2)]=bmask || 0x00ff0000;
        HEAP32[(((pixelFormat)+(24))>>2)]=amask || 0xff000000;
  
        // Decide if we want to use WebGL or not
        SDL.GL = SDL.GL || is_SDL_OPENGL;
        var canvas;
        if (!usePageCanvas) {
          if (SDL.canvasPool.length > 0) {
            canvas = SDL.canvasPool.pop();
          } else {
            canvas = document.createElement('canvas');
          }
          canvas.width = width;
          canvas.height = height;
        } else {
          canvas = Module['canvas'];
        }
  
        var webGLContextAttributes = {
          antialias: ((SDL.glAttributes[13 /*SDL_GL_MULTISAMPLEBUFFERS*/] != 0) && (SDL.glAttributes[14 /*SDL_GL_MULTISAMPLESAMPLES*/] > 1)),
          depth: (SDL.glAttributes[6 /*SDL_GL_DEPTH_SIZE*/] > 0),
          stencil: (SDL.glAttributes[7 /*SDL_GL_STENCIL_SIZE*/] > 0)
        };
        
        var ctx = Browser.createContext(canvas, is_SDL_OPENGL, usePageCanvas, webGLContextAttributes);
              
        SDL.surfaces[surf] = {
          width: width,
          height: height,
          canvas: canvas,
          ctx: ctx,
          surf: surf,
          buffer: buffer,
          pixelFormat: pixelFormat,
          alpha: 255,
          flags: flags,
          locked: 0,
          usePageCanvas: usePageCanvas,
          source: source,
  
          isFlagSet: function(flag) {
            return flags & flag;
          }
        };
  
        return surf;
      },copyIndexedColorData:function (surfData, rX, rY, rW, rH) {
        // HWPALETTE works with palette
        // setted by SDL_SetColors
        if (!surfData.colors) {
          return;
        }
        
        var fullWidth  = Module['canvas'].width;
        var fullHeight = Module['canvas'].height;
  
        var startX  = rX || 0;
        var startY  = rY || 0;
        var endX    = (rW || (fullWidth - startX)) + startX;
        var endY    = (rH || (fullHeight - startY)) + startY;
        
        var buffer  = surfData.buffer;
  
        if (!surfData.image.data32) {
          surfData.image.data32 = new Uint32Array(surfData.image.data.buffer);
        }
        var data32   = surfData.image.data32;
  
        var colors32 = surfData.colors32;
  
        for (var y = startY; y < endY; ++y) {
          var base = y * fullWidth;
          for (var x = startX; x < endX; ++x) {
            data32[base + x] = colors32[HEAPU8[((buffer + base + x)>>0)]];
          }
        }
      },freeSurface:function (surf) {
        var refcountPointer = surf + 56;
        var refcount = HEAP32[((refcountPointer)>>2)];
        if (refcount > 1) {
          HEAP32[((refcountPointer)>>2)]=refcount - 1;
          return;
        }
  
        var info = SDL.surfaces[surf];
        if (!info.usePageCanvas && info.canvas) SDL.canvasPool.push(info.canvas);
        if (info.buffer) _free(info.buffer);
        _free(info.pixelFormat);
        _free(surf);
        SDL.surfaces[surf] = null;
  
        if (surf === SDL.screen) {
          SDL.screen = null;
        }
      },blitSurface__deps:["SDL_LockSurface"],blitSurface:function (src, srcrect, dst, dstrect, scale) {
        var srcData = SDL.surfaces[src];
        var dstData = SDL.surfaces[dst];
        var sr, dr;
        if (srcrect) {
          sr = SDL.loadRect(srcrect);
        } else {
          sr = { x: 0, y: 0, w: srcData.width, h: srcData.height };
        }
        if (dstrect) {
          dr = SDL.loadRect(dstrect);
        } else {
          dr = { x: 0, y: 0, w: srcData.width, h: srcData.height };
        }
        if (dstData.clipRect) {
          var widthScale = (!scale || sr.w === 0) ? 1 : sr.w / dr.w;
          var heightScale = (!scale || sr.h === 0) ? 1 : sr.h / dr.h;
          
          dr = SDL.intersectionOfRects(dstData.clipRect, dr);
          
          sr.w = dr.w * widthScale;
          sr.h = dr.h * heightScale;
          
          if (dstrect) {
            SDL.updateRect(dstrect, dr);
          }
        }
        var blitw, blith;
        if (scale) {
          blitw = dr.w; blith = dr.h;
        } else {
          blitw = sr.w; blith = sr.h;
        }
        if (sr.w === 0 || sr.h === 0 || blitw === 0 || blith === 0) {
          return 0;
        }
        var oldAlpha = dstData.ctx.globalAlpha;
        dstData.ctx.globalAlpha = srcData.alpha/255;
        dstData.ctx.drawImage(srcData.canvas, sr.x, sr.y, sr.w, sr.h, dr.x, dr.y, blitw, blith);
        dstData.ctx.globalAlpha = oldAlpha;
        if (dst != SDL.screen) {
          // XXX As in IMG_Load, for compatibility we write out |pixels|
          Runtime.warnOnce('WARNING: copying canvas data to memory for compatibility');
          _SDL_LockSurface(dst);
          dstData.locked--; // The surface is not actually locked in this hack
        }
        return 0;
      },downFingers:{},savedKeydown:null,receiveEvent:function (event) {
        function unpressAllPressedKeys() {
          // Un-press all pressed keys: TODO
          for (var code in SDL.keyboardMap) {
            SDL.events.push({
              type: 'keyup',
              keyCode: SDL.keyboardMap[code]
            });
          }
        };
        switch(event.type) {
          case 'touchstart': case 'touchmove': {
            event.preventDefault();
  
            var touches = [];
            
            // Clear out any touchstart events that we've already processed
            if (event.type === 'touchstart') {
              for (var i = 0; i < event.touches.length; i++) {
                var touch = event.touches[i];
                if (SDL.downFingers[touch.identifier] != true) {
                  SDL.downFingers[touch.identifier] = true;
                  touches.push(touch);
                }
              }
            } else {
              touches = event.touches;
            }
            
            var firstTouch = touches[0];
            if (event.type == 'touchstart') {
              SDL.DOMButtons[0] = 1;
            }
            var mouseEventType;
            switch(event.type) {
              case 'touchstart': mouseEventType = 'mousedown'; break;
              case 'touchmove': mouseEventType = 'mousemove'; break;
            }
            var mouseEvent = {
              type: mouseEventType,
              button: 0,
              pageX: firstTouch.clientX,
              pageY: firstTouch.clientY
            };
            SDL.events.push(mouseEvent);
  
            for (var i = 0; i < touches.length; i++) {
              var touch = touches[i];
              SDL.events.push({
                type: event.type,
                touch: touch
              });
            };
            break;
          }
          case 'touchend': {
            event.preventDefault();
            
            // Remove the entry in the SDL.downFingers hash
            // because the finger is no longer down.
            for(var i = 0; i < event.changedTouches.length; i++) {
              var touch = event.changedTouches[i];
              if (SDL.downFingers[touch.identifier] === true) {
                delete SDL.downFingers[touch.identifier];
              }
            }
  
            var mouseEvent = {
              type: 'mouseup',
              button: 0,
              pageX: event.changedTouches[0].clientX,
              pageY: event.changedTouches[0].clientY
            };
            SDL.DOMButtons[0] = 0;
            SDL.events.push(mouseEvent);
            
            for (var i = 0; i < event.changedTouches.length; i++) {
              var touch = event.changedTouches[i];
              SDL.events.push({
                type: 'touchend',
                touch: touch
              });
            };
            break;
          }
          case 'DOMMouseScroll': case 'mousewheel': case 'wheel':
            var delta = -Browser.getMouseWheelDelta(event); // Flip the wheel direction to translate from browser wheel direction (+:down) to SDL direction (+:up)
            delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
  
            // Simulate old-style SDL events representing mouse wheel input as buttons
            var button = delta > 0 ? 3 /*SDL_BUTTON_WHEELUP-1*/ : 4 /*SDL_BUTTON_WHEELDOWN-1*/; // Subtract one since JS->C marshalling is defined to add one back.
            SDL.events.push({ type: 'mousedown', button: button, pageX: event.pageX, pageY: event.pageY });
            SDL.events.push({ type: 'mouseup', button: button, pageX: event.pageX, pageY: event.pageY });
  
            // Pass a delta motion event.
            SDL.events.push({ type: 'wheel', deltaX: 0, deltaY: delta });
            event.preventDefault(); // If we don't prevent this, then 'wheel' event will be sent again by the browser as 'DOMMouseScroll' and we will receive this same event the second time.
            break;
          case 'mousemove':
            if (SDL.DOMButtons[0] === 1) {
              SDL.events.push({
                type: 'touchmove',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
            }
            if (Browser.pointerLock) {
              // workaround for firefox bug 750111
              if ('mozMovementX' in event) {
                event['movementX'] = event['mozMovementX'];
                event['movementY'] = event['mozMovementY'];
              }
              // workaround for Firefox bug 782777
              if (event['movementX'] == 0 && event['movementY'] == 0) {
                // ignore a mousemove event if it doesn't contain any movement info
                // (without pointer lock, we infer movement from pageX/pageY, so this check is unnecessary)
                event.preventDefault();
                return;
              }
            }
            // fall through
          case 'keydown': case 'keyup': case 'keypress': case 'mousedown': case 'mouseup':
            // If we preventDefault on keydown events, the subsequent keypress events
            // won't fire. However, it's fine (and in some cases necessary) to
            // preventDefault for keys that don't generate a character. Otherwise,
            // preventDefault is the right thing to do in general.
            if (event.type !== 'keydown' || (!SDL.unicode && !SDL.textInput) || (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */)) {
              event.preventDefault();
            }
  
            if (event.type == 'mousedown') {
              SDL.DOMButtons[event.button] = 1;
              SDL.events.push({
                type: 'touchstart',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
            } else if (event.type == 'mouseup') {
              // ignore extra ups, can happen if we leave the canvas while pressing down, then return,
              // since we add a mouseup in that case
              if (!SDL.DOMButtons[event.button]) {
                return;
              }
  
              SDL.events.push({
                type: 'touchend',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
              SDL.DOMButtons[event.button] = 0;
            }
  
            // We can only request fullscreen as the result of user input.
            // Due to this limitation, we toggle a boolean on keydown which
            // SDL_WM_ToggleFullScreen will check and subsequently set another
            // flag indicating for us to request fullscreen on the following
            // keyup. This isn't perfect, but it enables SDL_WM_ToggleFullScreen
            // to work as the result of a keypress (which is an extremely
            // common use case).
            if (event.type === 'keydown' || event.type === 'mousedown') {
              SDL.canRequestFullscreen = true;
            } else if (event.type === 'keyup' || event.type === 'mouseup') {
              if (SDL.isRequestingFullscreen) {
                Module['requestFullScreen'](true, true);
                SDL.isRequestingFullscreen = false;
              }
              SDL.canRequestFullscreen = false;
            }
  
            // SDL expects a unicode character to be passed to its keydown events.
            // Unfortunately, the browser APIs only provide a charCode property on
            // keypress events, so we must backfill in keydown events with their
            // subsequent keypress event's charCode.
            if (event.type === 'keypress' && SDL.savedKeydown) {
              // charCode is read-only
              SDL.savedKeydown.keypressCharCode = event.charCode;
              SDL.savedKeydown = null;
            } else if (event.type === 'keydown') {
              SDL.savedKeydown = event;
            }
  
            // Don't push keypress events unless SDL_StartTextInput has been called.
            if (event.type !== 'keypress' || SDL.textInput) {
              SDL.events.push(event);
            }
            break;
          case 'mouseout':
            // Un-press all pressed mouse buttons, because we might miss the release outside of the canvas
            for (var i = 0; i < 3; i++) {
              if (SDL.DOMButtons[i]) {
                SDL.events.push({
                  type: 'mouseup',
                  button: i,
                  pageX: event.pageX,
                  pageY: event.pageY
                });
                SDL.DOMButtons[i] = 0;
              }
            }
            event.preventDefault();
            break;
          case 'focus':
            SDL.events.push(event);
            event.preventDefault();
            break;
          case 'blur':
            SDL.events.push(event);
            unpressAllPressedKeys();
            event.preventDefault();
            break;
          case 'visibilitychange':
            SDL.events.push({
              type: 'visibilitychange',
              visible: !document.hidden
            });
            unpressAllPressedKeys();
            event.preventDefault();
            break;
          case 'unload':
            if (Browser.mainLoop.runner) {
              SDL.events.push(event);
              // Force-run a main event loop, since otherwise this event will never be caught!
              Browser.mainLoop.runner();
            }
            return;
          case 'resize':
            SDL.events.push(event);
            // manually triggered resize event doesn't have a preventDefault member
            if (event.preventDefault) {
              event.preventDefault();
            }
            break;
        }
        if (SDL.events.length >= 10000) {
          Module.printErr('SDL event queue full, dropping events');
          SDL.events = SDL.events.slice(0, 10000);
        }
        // If we have a handler installed, this will push the events to the app
        // instead of the app polling for them.
        SDL.flushEventsToHandler();
        return;
      },lookupKeyCodeForEvent:function (event) {
          var code = event.keyCode;
          if (code >= 65 && code <= 90) {
            code += 32; // make lowercase for SDL
          } else {
            code = SDL.keyCodes[event.keyCode] || event.keyCode;
            // If this is one of the modifier keys (224 | 1<<10 - 227 | 1<<10), and the event specifies that it is
            // a right key, add 4 to get the right key SDL key code.
            if (event.location === KeyboardEvent.DOM_KEY_LOCATION_RIGHT && code >= (224 | 1<<10) && code <= (227 | 1<<10)) {
              code += 4;
            }
          }
          return code;
      },handleEvent:function (event) {
        if (event.handled) return;
        event.handled = true;
  
        switch (event.type) {
          case 'touchstart': case 'touchend': case 'touchmove': {
            Browser.calculateMouseEvent(event);
            break;
          }
          case 'keydown': case 'keyup': {
            var down = event.type === 'keydown';
            var code = SDL.lookupKeyCodeForEvent(event);
            HEAP8[(((SDL.keyboardState)+(code))>>0)]=down;
            // TODO: lmeta, rmeta, numlock, capslock, KMOD_MODE, KMOD_RESERVED
            SDL.modState = (HEAP8[(((SDL.keyboardState)+(1248))>>0)] ? 0x0040 : 0) | // KMOD_LCTRL
              (HEAP8[(((SDL.keyboardState)+(1249))>>0)] ? 0x0001 : 0) | // KMOD_LSHIFT
              (HEAP8[(((SDL.keyboardState)+(1250))>>0)] ? 0x0100 : 0) | // KMOD_LALT
              (HEAP8[(((SDL.keyboardState)+(1252))>>0)] ? 0x0080 : 0) | // KMOD_RCTRL
              (HEAP8[(((SDL.keyboardState)+(1253))>>0)] ? 0x0002 : 0) | // KMOD_RSHIFT
              (HEAP8[(((SDL.keyboardState)+(1254))>>0)] ? 0x0200 : 0); //  KMOD_RALT
            if (down) {
              SDL.keyboardMap[code] = event.keyCode; // save the DOM input, which we can use to unpress it during blur
            } else {
              delete SDL.keyboardMap[code];
            }
  
            break;
          }
          case 'mousedown': case 'mouseup':
            if (event.type == 'mousedown') {
              // SDL_BUTTON(x) is defined as (1 << ((x)-1)).  SDL buttons are 1-3,
              // and DOM buttons are 0-2, so this means that the below formula is
              // correct.
              SDL.buttonState |= 1 << event.button;
            } else if (event.type == 'mouseup') {
              SDL.buttonState &= ~(1 << event.button);
            }
            // fall through
          case 'mousemove': {
            Browser.calculateMouseEvent(event);
            break;
          }
        }
      },flushEventsToHandler:function () {
        if (!SDL.eventHandler) return;
  
        while (SDL.pollEvent(SDL.eventHandlerTemp)) {
          Runtime.dynCall('iii', SDL.eventHandler, [SDL.eventHandlerContext, SDL.eventHandlerTemp]);
        }
      },pollEvent:function (ptr) {
        if (SDL.initFlags & 0x200 && SDL.joystickEventState) {
          // If SDL_INIT_JOYSTICK was supplied AND the joystick system is configured
          // to automatically query for events, query for joystick events.
          SDL.queryJoysticks();
        }
        if (ptr) {
          while (SDL.events.length > 0) {
            if (SDL.makeCEvent(SDL.events.shift(), ptr) !== false) return 1;
          }
          return 0;
        } else {
          // XXX: somewhat risky in that we do not check if the event is real or not (makeCEvent returns false) if no pointer supplied
          return SDL.events.length > 0;
        }
      },makeCEvent:function (event, ptr) {
        if (typeof event === 'number') {
          // This is a pointer to a copy of a native C event that was SDL_PushEvent'ed
          _memcpy(ptr, event, 28);
          _free(event); // the copy is no longer needed
          return;
        }
  
        SDL.handleEvent(event);
  
        switch (event.type) {
          case 'keydown': case 'keyup': {
            var down = event.type === 'keydown';
            //Module.print('Received key event: ' + event.keyCode);
            var key = SDL.lookupKeyCodeForEvent(event);
            var scan;
            if (key >= 1024) {
              scan = key - 1024;
            } else {
              scan = SDL.scanCodes[key] || key;
            }
  
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(8))>>0)]=down ? 1 : 0;
            HEAP8[(((ptr)+(9))>>0)]=0; // TODO
            HEAP32[(((ptr)+(12))>>2)]=scan;
            HEAP32[(((ptr)+(16))>>2)]=key;
            HEAP16[(((ptr)+(20))>>1)]=SDL.modState;
            // some non-character keys (e.g. backspace and tab) won't have keypressCharCode set, fill in with the keyCode.
            HEAP32[(((ptr)+(24))>>2)]=event.keypressCharCode || key;
  
            break;
          }
          case 'keypress': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            // Not filling in windowID for now
            var cStr = intArrayFromString(String.fromCharCode(event.charCode));
            for (var i = 0; i < cStr.length; ++i) {
              HEAP8[(((ptr)+(8 + i))>>0)]=cStr[i];
            }
            break;
          }
          case 'mousedown': case 'mouseup': case 'mousemove': {
            if (event.type != 'mousemove') {
              var down = event.type === 'mousedown';
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP32[(((ptr)+(4))>>2)]=0;
              HEAP32[(((ptr)+(8))>>2)]=0;
              HEAP32[(((ptr)+(12))>>2)]=0;
              HEAP8[(((ptr)+(16))>>0)]=event.button+1; // DOM buttons are 0-2, SDL 1-3
              HEAP8[(((ptr)+(17))>>0)]=down ? 1 : 0;
              HEAP32[(((ptr)+(20))>>2)]=Browser.mouseX;
              HEAP32[(((ptr)+(24))>>2)]=Browser.mouseY;
            } else {
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP32[(((ptr)+(4))>>2)]=0;
              HEAP32[(((ptr)+(8))>>2)]=0;
              HEAP32[(((ptr)+(12))>>2)]=0;
              HEAP32[(((ptr)+(16))>>2)]=SDL.buttonState;
              HEAP32[(((ptr)+(20))>>2)]=Browser.mouseX;
              HEAP32[(((ptr)+(24))>>2)]=Browser.mouseY;
              HEAP32[(((ptr)+(28))>>2)]=Browser.mouseMovementX;
              HEAP32[(((ptr)+(32))>>2)]=Browser.mouseMovementY;
            }
            break;
          }
          case 'wheel': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(16))>>2)]=event.deltaX;
            HEAP32[(((ptr)+(20))>>2)]=event.deltaY; 
            break;       
          }
          case 'touchstart': case 'touchend': case 'touchmove': {
            var touch = event.touch;
            if (!Browser.touches[touch.identifier]) break;
            var w = Module['canvas'].width;
            var h = Module['canvas'].height;
            var x = Browser.touches[touch.identifier].x / w;
            var y = Browser.touches[touch.identifier].y / h;
            var lx = Browser.lastTouches[touch.identifier].x / w;
            var ly = Browser.lastTouches[touch.identifier].y / h;
            var dx = x - lx;
            var dy = y - ly;
            if (touch['deviceID'] === undefined) touch.deviceID = SDL.TOUCH_DEFAULT_ID;
            if (dx === 0 && dy === 0 && event.type === 'touchmove') return false; // don't send these if nothing happened
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=_SDL_GetTicks();
            (tempI64 = [touch.deviceID>>>0,(tempDouble=touch.deviceID,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[(((ptr)+(8))>>2)]=tempI64[0],HEAP32[(((ptr)+(12))>>2)]=tempI64[1]);
            (tempI64 = [touch.identifier>>>0,(tempDouble=touch.identifier,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[(((ptr)+(16))>>2)]=tempI64[0],HEAP32[(((ptr)+(20))>>2)]=tempI64[1]);
            HEAPF32[(((ptr)+(24))>>2)]=x;
            HEAPF32[(((ptr)+(28))>>2)]=y;
            HEAPF32[(((ptr)+(32))>>2)]=dx;
            HEAPF32[(((ptr)+(36))>>2)]=dy;
            if (touch.force !== undefined) {
              HEAPF32[(((ptr)+(40))>>2)]=touch.force;
            } else { // No pressure data, send a digital 0/1 pressure.
              HEAPF32[(((ptr)+(40))>>2)]=event.type == "touchend" ? 0 : 1;
            }
            break;
          }
          case 'unload': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            break;
          }
          case 'resize': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=event.w;
            HEAP32[(((ptr)+(8))>>2)]=event.h;
            break;
          }
          case 'joystick_button_up': case 'joystick_button_down': {
            var state = event.type === 'joystick_button_up' ? 0 : 1;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(4))>>0)]=event.index;
            HEAP8[(((ptr)+(5))>>0)]=event.button;
            HEAP8[(((ptr)+(6))>>0)]=state;
            break;
          }
          case 'joystick_axis_motion': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(4))>>0)]=event.index;
            HEAP8[(((ptr)+(5))>>0)]=event.axis;
            HEAP32[(((ptr)+(8))>>2)]=SDL.joystickAxisValueConversion(event.value);
            break;
          }
          case 'focus': {
            var SDL_WINDOWEVENT_FOCUS_GAINED = 12 /* SDL_WINDOWEVENT_FOCUS_GAINED */;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=SDL_WINDOWEVENT_FOCUS_GAINED;
            break;
          }
          case 'blur': {
            var SDL_WINDOWEVENT_FOCUS_LOST = 13 /* SDL_WINDOWEVENT_FOCUS_LOST */;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=SDL_WINDOWEVENT_FOCUS_LOST;
            break;
          }
          case 'visibilitychange': {
            var SDL_WINDOWEVENT_SHOWN  = 1 /* SDL_WINDOWEVENT_SHOWN */;
            var SDL_WINDOWEVENT_HIDDEN = 2 /* SDL_WINDOWEVENT_HIDDEN */;
            var visibilityEventID = event.visible ? SDL_WINDOWEVENT_SHOWN : SDL_WINDOWEVENT_HIDDEN;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=visibilityEventID;
            break;
          }
          default: throw 'Unhandled SDL event: ' + event.type;
        }
      },estimateTextWidth:function (fontData, text) {
        var h = fontData.size;
        var fontString = h + 'px ' + fontData.name;
        var tempCtx = SDL.ttfContext;
        tempCtx.save();
        tempCtx.font = fontString;
        var ret = tempCtx.measureText(text).width | 0;
        tempCtx.restore();
        return ret;
      },allocateChannels:function (num) { // called from Mix_AllocateChannels and init
        if (SDL.numChannels && SDL.numChannels >= num && num != 0) return;
        SDL.numChannels = num;
        SDL.channels = [];
        for (var i = 0; i < num; i++) {
          SDL.channels[i] = {
            audio: null,
            volume: 1.0
          };
        }
      },setGetVolume:function (info, volume) {
        if (!info) return 0;
        var ret = info.volume * 128; // MIX_MAX_VOLUME
        if (volume != -1) {
          info.volume = Math.min(Math.max(volume, 0), 128) / 128;
          if (info.audio) {
            try {
              info.audio.volume = info.volume; // For <audio> element
              if (info.audio.webAudioGainNode) info.audio.webAudioGainNode['gain']['value'] = info.volume; // For WebAudio playback
            } catch(e) {
              Module.printErr('setGetVolume failed to set audio volume: ' + e);
            }
          }
        }
        return ret;
      },setPannerPosition:function (info, x, y, z) {
        if (!info) return;
        if (info.audio) {
          if (info.audio.webAudioPannerNode) {
            info.audio.webAudioPannerNode['setPosition'](x, y, z);
          }
        }
      },playWebAudio:function (audio) {
        if (!audio) return;
        if (audio.webAudioNode) return; // This instance is already playing, don't start again.
        if (!SDL.webAudioAvailable()) return;
        try {
          var webAudio = audio.resource.webAudio;
          audio.paused = false;
          if (!webAudio.decodedBuffer) {
            if (webAudio.onDecodeComplete === undefined) abort("Cannot play back audio object that was not loaded");
            webAudio.onDecodeComplete.push(function() { if (!audio.paused) SDL.playWebAudio(audio); });
            return;
          }
          audio.webAudioNode = SDL.audioContext['createBufferSource']();
          audio.webAudioNode['buffer'] = webAudio.decodedBuffer;
          audio.webAudioNode['loop'] = audio.loop;
          audio.webAudioNode['onended'] = function() { audio['onended'](); } // For <media> element compatibility, route the onended signal to the instance.
  
          audio.webAudioPannerNode = SDL.audioContext['createPanner']();
          audio.webAudioPannerNode['panningModel'] = 'equalpower';
  
          // Add an intermediate gain node to control volume.
          audio.webAudioGainNode = SDL.audioContext['createGain']();
          audio.webAudioGainNode['gain']['value'] = audio.volume;
  
          audio.webAudioNode['connect'](audio.webAudioPannerNode);
          audio.webAudioPannerNode['connect'](audio.webAudioGainNode);
          audio.webAudioGainNode['connect'](SDL.audioContext['destination']);
  
          audio.webAudioNode['start'](0, audio.currentPosition);
          audio.startTime = SDL.audioContext['currentTime'] - audio.currentPosition;
        } catch(e) {
          Module.printErr('playWebAudio failed: ' + e);
        }
      },pauseWebAudio:function (audio) {
        if (!audio) return;
        if (audio.webAudioNode) {
          try {
            // Remember where we left off, so that if/when we resume, we can restart the playback at a proper place.
            audio.currentPosition = (SDL.audioContext['currentTime'] - audio.startTime) % audio.resource.webAudio.decodedBuffer.duration;
            // Important: When we reach here, the audio playback is stopped by the user. But when calling .stop() below, the Web Audio
            // graph will send the onended signal, but we don't want to process that, since pausing should not clear/destroy the audio
            // channel.
            audio.webAudioNode['onended'] = undefined;
            audio.webAudioNode.stop();
            audio.webAudioNode = undefined;
          } catch(e) {
            Module.printErr('pauseWebAudio failed: ' + e);
          }
        }
        audio.paused = true;
      },openAudioContext:function () {
        // Initialize Web Audio API if we haven't done so yet. Note: Only initialize Web Audio context ever once on the web page,
        // since initializing multiple times fails on Chrome saying 'audio resources have been exhausted'.
        if (!SDL.audioContext) {
          if (typeof(AudioContext) !== 'undefined') SDL.audioContext = new AudioContext();
          else if (typeof(webkitAudioContext) !== 'undefined') SDL.audioContext = new webkitAudioContext();
        }
      },webAudioAvailable:function () { return !!SDL.audioContext; },fillWebAudioBufferFromHeap:function (heapPtr, sizeSamplesPerChannel, dstAudioBuffer) {
        // The input audio data is interleaved across the channels, i.e. [L, R, L, R, L, R, ...] and is either 8-bit or 16-bit as
        // supported by the SDL API. The output audio wave data for Web Audio API must be in planar buffers of [-1,1]-normalized Float32 data,
        // so perform a buffer conversion for the data.
        var numChannels = SDL.audio.channels;
        for(var c = 0; c < numChannels; ++c) {
          var channelData = dstAudioBuffer['getChannelData'](c);
          if (channelData.length != sizeSamplesPerChannel) {
            throw 'Web Audio output buffer length mismatch! Destination size: ' + channelData.length + ' samples vs expected ' + sizeSamplesPerChannel + ' samples!';
          }
          if (SDL.audio.format == 0x8010 /*AUDIO_S16LSB*/) {
            for(var j = 0; j < sizeSamplesPerChannel; ++j) {
              channelData[j] = (HEAP16[(((heapPtr)+((j*numChannels + c)*2))>>1)]) / 0x8000;
            }
          } else if (SDL.audio.format == 0x0008 /*AUDIO_U8*/) {
            for(var j = 0; j < sizeSamplesPerChannel; ++j) {
              var v = (HEAP8[(((heapPtr)+(j*numChannels + c))>>0)]);
              channelData[j] = ((v >= 0) ? v-128 : v+128) /128;
            }
          }
        }
      },debugSurface:function (surfData) {
        console.log('dumping surface ' + [surfData.surf, surfData.source, surfData.width, surfData.height]);
        var image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
        var data = image.data;
        var num = Math.min(surfData.width, surfData.height);
        for (var i = 0; i < num; i++) {
          console.log('   diagonal ' + i + ':' + [data[i*surfData.width*4 + i*4 + 0], data[i*surfData.width*4 + i*4 + 1], data[i*surfData.width*4 + i*4 + 2], data[i*surfData.width*4 + i*4 + 3]]);
        }
      },joystickEventState:1,lastJoystickState:{},joystickNamePool:{},recordJoystickState:function (joystick, state) {
        // Standardize button state.
        var buttons = new Array(state.buttons.length);
        for (var i = 0; i < state.buttons.length; i++) {
          buttons[i] = SDL.getJoystickButtonState(state.buttons[i]);
        }
  
        SDL.lastJoystickState[joystick] = {
          buttons: buttons,
          axes: state.axes.slice(0),
          timestamp: state.timestamp,
          index: state.index,
          id: state.id
        };
      },getJoystickButtonState:function (button) {
        if (typeof button === 'object') {
          // Current gamepad API editor's draft (Firefox Nightly)
          // https://dvcs.w3.org/hg/gamepad/raw-file/default/gamepad.html#idl-def-GamepadButton
          return button.pressed;
        } else {
          // Current gamepad API working draft (Firefox / Chrome Stable)
          // http://www.w3.org/TR/2012/WD-gamepad-20120529/#gamepad-interface
          return button > 0;
        }
      },queryJoysticks:function () {
        for (var joystick in SDL.lastJoystickState) {
          var state = SDL.getGamepad(joystick - 1);
          var prevState = SDL.lastJoystickState[joystick];
          // Check only if the timestamp has differed.
          // NOTE: Timestamp is not available in Firefox.
          if (typeof state.timestamp !== 'number' || state.timestamp !== prevState.timestamp) {
            var i;
            for (i = 0; i < state.buttons.length; i++) {
              var buttonState = SDL.getJoystickButtonState(state.buttons[i]);
              // NOTE: The previous state already has a boolean representation of
              //       its button, so no need to standardize its button state here.
              if (buttonState !== prevState.buttons[i]) {
                // Insert button-press event.
                SDL.events.push({
                  type: buttonState ? 'joystick_button_down' : 'joystick_button_up',
                  joystick: joystick,
                  index: joystick - 1,
                  button: i
                });
              }
            }
            for (i = 0; i < state.axes.length; i++) {
              if (state.axes[i] !== prevState.axes[i]) {
                // Insert axes-change event.
                SDL.events.push({
                  type: 'joystick_axis_motion',
                  joystick: joystick,
                  index: joystick - 1,
                  axis: i,
                  value: state.axes[i]
                });
              }
            }
  
            SDL.recordJoystickState(joystick, state);
          }
        }
      },joystickAxisValueConversion:function (value) {
        // Ensures that 0 is 0, 1 is 32767, and -1 is 32768.
        return Math.ceil(((value+1) * 32767.5) - 32768);
      },getGamepads:function () {
        var fcn = navigator.getGamepads || navigator.webkitGamepads || navigator.mozGamepads || navigator.gamepads || navigator.webkitGetGamepads;
        if (fcn !== undefined) {
          // The function must be applied on the navigator object.
          return fcn.apply(navigator);
        } else {
          return [];
        }
      },getGamepad:function (deviceIndex) {
        var gamepads = SDL.getGamepads();
        if (gamepads.length > deviceIndex && deviceIndex >= 0) {
          return gamepads[deviceIndex];
        }
        return null;
      }};function _SDL_SetWindowTitle(window, title) {
      if (title) document.title = Pointer_stringify(title);
    }

  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var fd = _fileno(stream);
      var ret = _lseek(fd, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStreamFromPtr(stream);
      stream.eof = false;
      return 0;
    }

  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:[],currentContext:null,byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},packAlignment:4,unpackAlignment:4,init:function () {
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:16,miniTempBuffer:null,miniTempBufferViews:[0],getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        return source;
      },computeImageSize:function (width, height, sizePerPixel, alignment) {
        function roundedToNextMultipleOf(x, y) {
          return Math.floor((x + y - 1) / y) * y
        }
        var plainRowSize = width * sizePerPixel;
        var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
        return (height <= 0) ? 0 :
                 ((height - 1) * alignedRowSize + plainRowSize);
      },get:function (name_, p, type) {
        // Guard against user passing a null pointer.
        // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
        // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
        // better to report an error instead of doing anything random.
        if (!p) {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
          return;
        }
        var ret = undefined;
        switch(name_) { // Handle a few trivial GLES values
          case 0x8DFA: // GL_SHADER_COMPILER
            ret = 1;
            break;
          case 0x8DF8: // GL_SHADER_BINARY_FORMATS
            if (type !== 'Integer') {
              GL.recordError(0x0500); // GL_INVALID_ENUM
            }
            return; // Do not write anything to the out pointer, since no binary formats are supported.
          case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
            ret = 0;
            break;
          case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
            // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
            // so implement it ourselves to allow C++ GLES2 code get the length.
            var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
            ret = formats.length;
            break;
          case 0x8B9A: // GL_IMPLEMENTATION_COLOR_READ_TYPE
            ret = 0x1401; // GL_UNSIGNED_BYTE
            break;
          case 0x8B9B: // GL_IMPLEMENTATION_COLOR_READ_FORMAT
            ret = 0x1908; // GL_RGBA
            break;
        }
  
        if (ret === undefined) {
          var result = GLctx.getParameter(name_);
          switch (typeof(result)) {
            case "number":
              ret = result;
              break;
            case "boolean":
              ret = result ? 1 : 0;
              break;
            case "string":
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
            case "object":
              if (result === null) {
                // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
                // can mean an invalid name_, which we need to report as an error
                switch(name_) {
                  case 0x8894: // ARRAY_BUFFER_BINDING
                  case 0x8B8D: // CURRENT_PROGRAM
                  case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                  case 0x8CA6: // FRAMEBUFFER_BINDING
                  case 0x8CA7: // RENDERBUFFER_BINDING
                  case 0x8069: // TEXTURE_BINDING_2D
                  case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                    ret = 0;
                    break;
                  }
                  default: {
                    GL.recordError(0x0500); // GL_INVALID_ENUM
                    return;
                  }
                }
              } else if (result instanceof Float32Array ||
                         result instanceof Uint32Array ||
                         result instanceof Int32Array ||
                         result instanceof Array) {
                for (var i = 0; i < result.length; ++i) {
                  switch (type) {
                    case 'Integer': HEAP32[(((p)+(i*4))>>2)]=result[i];   break;
                    case 'Float':   HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                    case 'Boolean': HEAP8[(((p)+(i))>>0)]=result[i] ? 1 : 0;    break;
                    default: throw 'internal glGet error, bad type: ' + type;
                  }
                }
                return;
              } else if (result instanceof WebGLBuffer ||
                         result instanceof WebGLProgram ||
                         result instanceof WebGLFramebuffer ||
                         result instanceof WebGLRenderbuffer ||
                         result instanceof WebGLTexture) {
                ret = result.name | 0;
              } else {
                GL.recordError(0x0500); // GL_INVALID_ENUM
                return;
              }
              break;
            default:
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
          }
        }
  
        switch (type) {
          case 'Integer': HEAP32[((p)>>2)]=ret;    break;
          case 'Float':   HEAPF32[((p)>>2)]=ret;  break;
          case 'Boolean': HEAP8[((p)>>0)]=ret ? 1 : 0; break;
          default: throw 'internal glGet error, bad type: ' + type;
        }
      },getTexPixelData:function (type, format, width, height, pixels, internalFormat) {
        var sizePerPixel;
        var numChannels;
        switch(format) {
          case 0x1906 /* GL_ALPHA */:
          case 0x1909 /* GL_LUMINANCE */:
          case 0x1902 /* GL_DEPTH_COMPONENT */:
          case 0x1903 /* GL_RED */:
            numChannels = 1;
            break;
          case 0x190A /* GL_LUMINANCE_ALPHA */:
          case 0x8227 /* GL_RG */:
            numChannels = 2;
            break;
          case 0x1907 /* GL_RGB */:
            numChannels = 3;
            break;
          case 0x1908 /* GL_RGBA */:
            numChannels = 4;
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return {
              pixels: null,
              internalFormat: 0x0
            };
        }
        switch (type) {
          case 0x1401 /* GL_UNSIGNED_BYTE */:
            sizePerPixel = numChannels*1;
            break;
          case 0x1403 /* GL_UNSIGNED_SHORT */:
          case 0x8D61 /* GL_HALF_FLOAT_OES */:
            sizePerPixel = numChannels*2;
            break;
          case 0x1405 /* GL_UNSIGNED_INT */:
          case 0x1406 /* GL_FLOAT */:
            sizePerPixel = numChannels*4;
            break;
          case 0x84FA /* UNSIGNED_INT_24_8_WEBGL */:
            sizePerPixel = 4;
            break;
          case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
          case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
          case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
            sizePerPixel = 2;
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return {
              pixels: null,
              internalFormat: 0x0
            };
        }
        var bytes = GL.computeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
        if (type == 0x1401 /* GL_UNSIGNED_BYTE */) {
          pixels = HEAPU8.subarray((pixels),(pixels+bytes));
        } else if (type == 0x1406 /* GL_FLOAT */) {
          pixels = HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else if (type == 0x1405 /* GL_UNSIGNED_INT */ || type == 0x84FA /* UNSIGNED_INT_24_8_WEBGL */) {
          pixels = HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else {
          pixels = HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
        }
        return {
          pixels: pixels,
          internalFormat: internalFormat
        };
      },validateBufferTarget:function (target) {
        switch (target) {
          case 0x8892: // GL_ARRAY_BUFFER
          case 0x8893: // GL_ELEMENT_ARRAY_BUFFER
          case 0x8F36: // GL_COPY_READ_BUFFER
          case 0x8F37: // GL_COPY_WRITE_BUFFER
          case 0x88EB: // GL_PIXEL_PACK_BUFFER
          case 0x88EC: // GL_PIXEL_UNPACK_BUFFER
          case 0x8C2A: // GL_TEXTURE_BUFFER
          case 0x8C8E: // GL_TRANSFORM_FEEDBACK_BUFFER
          case 0x8A11: // GL_UNIFORM_BUFFER
            return true;
          default:
            return false;
        }
      },createContext:function (canvas, webGLContextAttributes) {
        if (typeof webGLContextAttributes.majorVersion === 'undefined' && typeof webGLContextAttributes.minorVersion === 'undefined') {
          webGLContextAttributes.majorVersion = 1;
          webGLContextAttributes.minorVersion = 0;
        }
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
          try {
            if (webGLContextAttributes.majorVersion == 1 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes);
            } else if (webGLContextAttributes.majorVersion == 2 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl2", webGLContextAttributes) || canvas.getContext("experimental-webgl2", webGLContextAttributes);
            } else {
              throw 'Unsupported WebGL context version ' + majorVersion + '.' + minorVersion + '!'
            }
          } finally {
            canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e, JSON.stringify(webGLContextAttributes)]);
          return 0;
        }
        // possible GL_DEBUG entry point: ctx = wrapDebugGL(ctx);
  
        if (!ctx) return 0;
        return GL.registerContext(ctx, webGLContextAttributes);
      },registerContext:function (ctx, webGLContextAttributes) {
        var handle = GL.getNewId(GL.contexts);
        var context = {
          handle: handle,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes['enableExtensionsByDefault'] === 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
        return handle;
      },makeContextCurrent:function (contextHandle) {
        var context = GL.contexts[contextHandle];
        if (!context) return false;
        GLctx = Module.ctx = context.GLctx; // Active WebGL context object.
        GL.currentContext = context; // Active Emscripten GL layer context object.
        return true;
      },getContext:function (contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function (contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        GL.contexts[contextHandle] = null;
      },initExtensions:function (context) {
  
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        context.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist. 
        context.compressionExt = GLctx.getExtension('WEBGL_compressed_texture_s3tc');
        context.anisotropicExt = GLctx.getExtension('EXT_texture_filter_anisotropic');
        context.floatExt = GLctx.getExtension('OES_texture_float');
  
        // Extension available from Firefox 26 and Google Chrome 30
        context.instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
        
        // Extension available from Firefox 25 and WebKit
        context.vaoExt = GLctx.getExtension('OES_vertex_array_object');
  
        if (context.version === 2) {
          // drawBuffers is available in WebGL2 by default.
          context.drawBuffersExt = function(n, bufs) {
            GLctx.drawBuffers(n, bufs);
          };
        } else {
          var ext = GLctx.getExtension('WEBGL_draw_buffers');
          if (ext) {
            context.drawBuffersExt = function(n, bufs) {
              ext.drawBuffersWEBGL(n, bufs);
            };
          }
        }
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources",
                                               "EXT_shader_texture_lod" ];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (ext.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions();
        if (exts && exts.length > 0) {
          GLctx.getSupportedExtensions().forEach(function(ext) {
            if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
              GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
            }
          });
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1 // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then 
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          var id = GL.getNewId(GL.uniforms);
          utable[name] = [u.size, id];
          GL.uniforms[id] = loc;
  
          for (var j = 1; j < u.size; ++j) {
            var n = name + '['+j+']';
            loc = GLctx.getUniformLocation(p, n);
            id = GL.getNewId(GL.uniforms);
  
            GL.uniforms[id] = loc;
          }
        }
      }};function _glClearColor(x0, x1, x2, x3) { GLctx.clearColor(x0, x1, x2, x3) }

  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      _fsync(fd);
      return _close(fd);
    }

  function _emscripten_run_script_string(ptr) {
      var s = eval(Pointer_stringify(ptr)) + '';
      var me = _emscripten_run_script_string;
      if (!me.bufferSize || me.bufferSize < s.length+1) {
        if (me.bufferSize) _free(me.buffer);
        me.bufferSize = s.length+1;
        me.buffer = _malloc(me.bufferSize);
      }
      writeStringToMemory(s, me.buffer);
      return me.buffer;
    }

  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }

  var _acosf=Math_acos;


  function _SDL_GetMouseState(x, y) {
      if (x) HEAP32[((x)>>2)]=Browser.mouseX;
      if (y) HEAP32[((y)>>2)]=Browser.mouseY;
      return SDL.buttonState;
    }

  var _emscripten_check_longjmp=true;

  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      Runtime.stackRestore(ret);
    }

  function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }

  
  
  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;function _realloc(ptr, size) {
      // Very simple, inefficient implementation - if you use a real malloc, best to use
      // a real realloc with it
      if (!size) {
        if (ptr) _free(ptr);
        return 0;
      }
      var ret = _malloc(size);
      if (ptr) {
        _memcpy(ret, ptr, size); // might be some invalid reads
        _free(ptr);
      }
      return ret;
    } 
  Module["_saveSetjmp"] = _saveSetjmp;

  
  
  var _tzname=allocate(8, "i32*", ALLOC_STATIC);
  
  var _daylight=allocate(1, "i32*", ALLOC_STATIC);
  
  var _timezone=allocate(1, "i32*", ALLOC_STATIC);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      HEAP32[((_timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60;
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((_daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT";
      };
      var winterName = extractZone(winter);
      var summerName = extractZone(summer);
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
        // Northern hemisphere
        HEAP32[((_tzname)>>2)]=winterNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=summerNamePtr;
      } else {
        HEAP32[((_tzname)>>2)]=summerNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=winterNamePtr;
      }
    }function _mktime(tmPtr) {
      _tzset();
      var date = new Date(HEAP32[(((tmPtr)+(20))>>2)] + 1900,
                          HEAP32[(((tmPtr)+(16))>>2)],
                          HEAP32[(((tmPtr)+(12))>>2)],
                          HEAP32[(((tmPtr)+(8))>>2)],
                          HEAP32[(((tmPtr)+(4))>>2)],
                          HEAP32[((tmPtr)>>2)],
                          0);
  
      // There's an ambiguous hour when the time goes back; the tm_isdst field is
      // used to disambiguate it.  Date() basically guesses, so we fix it up if it
      // guessed wrong, or fill in tm_isdst with the guess if it's -1.
      var dst = HEAP32[(((tmPtr)+(32))>>2)];
      var guessedOffset = date.getTimezoneOffset();
      var start = new Date(date.getFullYear(), 0, 1);
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dstOffset = Math.min(winterOffset, summerOffset); // DST is in December in South
      if (dst < 0) {
        HEAP32[(((tmPtr)+(32))>>2)]=Number(winterOffset != guessedOffset);
      } else if ((dst > 0) != (winterOffset != guessedOffset)) {
        var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();
        var trueOffset = dst > 0 ? summerOffset : winterOffset;
        // Don't try setMinutes(date.getMinutes() + ...) -- it's messed up.
        date.setTime(date.getTime() + (trueOffset - guessedOffset)*60000);
      }
  
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
  
      return (date.getTime() / 1000)|0;
    }

  function _glLineWidth(x0) { GLctx.lineWidth(x0) }

  function _tmpnam(s, dir, prefix) {
      // char *tmpnam(char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/tmpnam.html
      // NOTE: The dir and prefix arguments are for internal use only.
      dir = dir || '/tmp';
      var folder = FS.findObject(dir);
      if (!folder || !folder.isFolder) {
        dir = '/tmp';
        folder = FS.findObject(dir);
        if (!folder || !folder.isFolder) return 0;
      }
      var name = prefix || 'file';
      do {
        name += String.fromCharCode(65 + (Math.random() * 25)|0);
      } while (name in folder.contents);
      var result = dir + '/' + name;
      if (!_tmpnam.buffer) _tmpnam.buffer = _malloc(256);
      if (!s) s = _tmpnam.buffer;
      assert(result.length <= 255);
      writeAsciiToMemory(result, s);
      return s;
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  
  var AL={contexts:[],currentContext:null,alcErr:0,stringCache:{},alcStringCache:{},QUEUE_INTERVAL:25,QUEUE_LOOKAHEAD:100,newSrcId:1,updateSources:function updateSources(context) {
        // If we are animating using the requestAnimationFrame method, then the main loop does not run when in the background.
        // To give a perfect glitch-free audio stop when switching from foreground to background, we need to avoid updating
        // audio altogether when in the background, so detect that case and kill audio buffer streaming if so.
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && document['visibilityState'] != 'visible') return;
  
        for (var srcId in context.src) {
          AL.updateSource(context.src[srcId]);
        }
      },updateSource:function updateSource(src) {
        if (src.state !== 0x1012 /* AL_PLAYING */) {
          return;
        }
  
        var currentTime = AL.currentContext.ctx.currentTime;
        var startTime = src.bufferPosition;
  
        for (var i = src.buffersPlayed; i < src.queue.length; i++) {
          var entry = src.queue[i];
  
          var startOffset = startTime - currentTime;
          var endTime = startTime + entry.buffer.duration;
  
          // Clean up old buffers.
          if (currentTime >= endTime) {
            // Update our location in the queue.
            src.bufferPosition = endTime;
            src.buffersPlayed = i + 1;
  
            // Stop / restart the source when we hit the end.
            if (src.buffersPlayed >= src.queue.length) {
              if (src.loop) {
                AL.setSourceState(src, 0x1012 /* AL_PLAYING */);
              } else {
                AL.setSourceState(src, 0x1014 /* AL_STOPPED */);
              }
            }
          }
          // Process all buffers that'll be played before the next tick.
          else if (startOffset < (AL.QUEUE_LOOKAHEAD / 1000) && !entry.src) {
            // If the start offset is negative, we need to offset the actual buffer.
            var offset = Math.abs(Math.min(startOffset, 0));
  
            entry.src = AL.currentContext.ctx.createBufferSource();
            entry.src.buffer = entry.buffer;
            entry.src.connect(src.gain);
            if (typeof(entry.src.start) !== 'undefined') {
              entry.src.start(startTime, offset);
            } else if (typeof(entry.src.noteOn) !== 'undefined') {
              entry.src.noteOn(startTime);
            }
          }
  
          startTime = endTime;
        }
      },setSourceState:function setSourceState(src, state) {
        if (state === 0x1012 /* AL_PLAYING */) {
          if (src.state !== 0x1013 /* AL_PAUSED */) {
            src.state = 0x1012 /* AL_PLAYING */;
            // Reset our position.
            src.bufferPosition = AL.currentContext.ctx.currentTime;
            src.buffersPlayed = 0;
          } else {
            src.state = 0x1012 /* AL_PLAYING */;
            // Use the current offset from src.bufferPosition to resume at the correct point.
            src.bufferPosition = AL.currentContext.ctx.currentTime - src.bufferPosition;
          }
          AL.stopSourceQueue(src);
          AL.updateSource(src);
        } else if (state === 0x1013 /* AL_PAUSED */) {
          if (src.state === 0x1012 /* AL_PLAYING */) {
            src.state = 0x1013 /* AL_PAUSED */;
            // Store off the current offset to restore with on resume.
            src.bufferPosition = AL.currentContext.ctx.currentTime - src.bufferPosition;
            AL.stopSourceQueue(src);
          }
        } else if (state === 0x1014 /* AL_STOPPED */) {
          if (src.state !== 0x1011 /* AL_INITIAL */) {
            src.state = 0x1014 /* AL_STOPPED */;
            src.buffersPlayed = src.queue.length;
            AL.stopSourceQueue(src);
          }
        } else if (state == 0x1011 /* AL_INITIAL */) {
          if (src.state !== 0x1011 /* AL_INITIAL */) {
            src.state = 0x1011 /* AL_INITIAL */;
            src.bufferPosition = 0;
            src.buffersPlayed = 0;
          }
        }
      },stopSourceQueue:function stopSourceQueue(src) {
        for (var i = 0; i < src.queue.length; i++) {
          var entry = src.queue[i];
          if (entry.src) {
            entry.src.stop(0);
            entry.src = null;
          }
        }
      }};function _alSourcef(source, param, value) {
      if (!AL.currentContext) {
        return;
      }
      var src = AL.currentContext.src[source];
      if (!src) {
        AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
      switch (param) {
      case 0x1003 /* AL_PITCH */:
        break;
      case 0x100A /* AL_GAIN */:
        src.gain.gain.value = value;
        break;
      // case 0x100D /* AL_MIN_GAIN */:
      //   break;
      // case 0x100E /* AL_MAX_GAIN */:
      //   break;
      case 0x1023 /* AL_MAX_DISTANCE */:
        src.maxDistance = value;
        break;
      case 0x1021 /* AL_ROLLOFF_FACTOR */:
        src.rolloffFactor = value;
        break;
      case 0x1022 /* AL_CONE_OUTER_GAIN */:
        src.coneOuterGain = value;
        break;
      case 0x1001 /* AL_CONE_INNER_ANGLE */:
        src.coneInnerAngle = value;
        break;
      case 0x1002 /* AL_CONE_OUTER_ANGLE */:
        src.coneOuterAngle = value;
        break;
      case 0x1020 /* AL_REFERENCE_DISTANCE */:
        src.refDistance = value;
        break;
      default:
        AL.currentContext.err = 0xA002 /* AL_INVALID_ENUM */;
        break;
      }
    }

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _emscripten_cancel_main_loop() {
      Browser.mainLoop.pause();
      Browser.mainLoop.func = null;
    }

  
  var ___tm_current=allocate(44, "i8", ALLOC_STATIC);
  
  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=-(date.getTimezoneOffset() * 60);
  
      // DST is in December in South
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      var zonePtr = HEAP32[(((_tzname)+(dst ? Runtime.QUANTUM_SIZE : 0))>>2)];
      HEAP32[(((tmPtr)+(40))>>2)]=zonePtr;
  
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }

  function _glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  
  var PTHREAD_SPECIFIC={};function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  var _ceil=Math_ceil;

  function _alSourcei(source, param, value) {
      if (!AL.currentContext) {
        return;
      }
      var src = AL.currentContext.src[source];
      if (!src) {
        AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
      switch (param) {
      case 0x1001 /* AL_CONE_INNER_ANGLE */:
        src.coneInnerAngle = value;
        break;
      case 0x1002 /* AL_CONE_OUTER_ANGLE */:
        src.coneOuterAngle = value;
        break;
      case 0x1007 /* AL_LOOPING */:
        src.loop = (value === 1 /* AL_TRUE */);
        break;
      case 0x1009 /* AL_BUFFER */:
        var buffer = AL.currentContext.buf[value - 1];
        if (value == 0) {
          src.queue = [];
        } else {
          src.queue = [{ buffer: buffer }];
        }
        AL.updateSource(src);
        break;
      case 0x202 /* AL_SOURCE_RELATIVE */:
        if (value === 1 /* AL_TRUE */) {
          if (src.panner) {
            src.panner = null;
  
            // Disconnect from the panner.
            src.gain.disconnect();
  
            src.gain.connect(AL.currentContext.ctx.destination);
          }
        } else if (value === 0 /* AL_FALSE */) {
          if (!src.panner) {
            var panner = src.panner = AL.currentContext.ctx.createPanner();
            panner.panningModel = "equalpower";
            panner.distanceModel = "linear";
            panner.refDistance = src.refDistance;
            panner.maxDistance = src.maxDistance;
            panner.rolloffFactor = src.rolloffFactor;
            panner.setPosition(src.position[0], src.position[1], src.position[2]);
            panner.setVelocity(src.velocity[0], src.velocity[1], src.velocity[2]);
            panner.connect(AL.currentContext.ctx.destination);
  
            // Disconnect from the default source.
            src.gain.disconnect();
  
            src.gain.connect(panner);
          }
        } else {
          AL.currentContext.err = 0xA003 /* AL_INVALID_VALUE */;
        }
        break;
      default:
        AL.currentContext.err = 0xA002 /* AL_INVALID_ENUM */;
        break;
      }
    }

  function _alSourceQueueBuffers(source, count, buffers) {
      if (!AL.currentContext) {
        return;
      }
      var src = AL.currentContext.src[source];
      if (!src) {
        AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
      for (var i = 0; i < count; ++i) {
        var bufferIdx = HEAP32[(((buffers)+(i*4))>>2)];
        if (bufferIdx > AL.currentContext.buf.length) {
          AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
          return;
        }
      }
  
      for (var i = 0; i < count; ++i) {
        var bufferIdx = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = AL.currentContext.buf[bufferIdx - 1];
        src.queue.push({ buffer: buffer, src: null });
      }
  
      AL.updateSource(src);
    }


  function _utime(path, times) {
      // int utime(const char *path, const struct utimbuf *times);
      // http://pubs.opengroup.org/onlinepubs/009695399/basedefs/utime.h.html
      var time;
      if (times) {
        // NOTE: We don't keep track of access timestamps.
        var offset = 4;
        time = HEAP32[(((times)+(offset))>>2)];
        time *= 1000;
      } else {
        time = Date.now();
      }
      path = Pointer_stringify(path);
      try {
        FS.utime(path, time, time);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }


  function _glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var texture = GLctx.createTexture();
        if (!texture) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */); // GLES + EGL specs don't specify what should happen here, so best to issue an error and create IDs with 0.
          while(i < n) HEAP32[(((textures)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.textures);
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }

  
  function _msync(addr, len, flags) {
      // int msync(void *addr, size_t len, int flags);
      // http://pubs.opengroup.org/onlinepubs/009696799/functions/msync.html
      // TODO: support sync'ing parts of allocations
      var info = _mmap.mappings[addr];
      if (!info) return 0;
      if (len == info.num) {
        var buffer = new Uint8Array(HEAPU8.buffer, addr, len);
        return FS.msync(FS.getStream(info.fd), buffer, 0, len, info.flags);
      }
  
      return 0;
    }function _munmap(start, num) {
      if (!_mmap.mappings) _mmap.mappings = {};
      // TODO: support unmmap'ing parts of allocations
      var info = _mmap.mappings[start];
      if (!info) return 0;
      if (num == info.num) {
        // At the Linux man page, it says:
        // "The file may not actually be updated until msync(2) or munmap(2) are called."
        // I guess that means we need to call msync when doing munmap
        _msync(start, num); // todo: which flags?
  
        FS.munmap(FS.getStream(info.fd));
  
        _mmap.mappings[start] = null;
        if (info.allocated) {
          _free(info.malloc);
        }
      }
      return 0;
    }

  var _emscripten_preinvoke=true;

  
  function _unlink(path) {
      // int unlink(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/unlink.html
      path = Pointer_stringify(path);
      try {
        FS.unlink(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _rmdir(path) {
      // int rmdir(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/rmdir.html
      path = Pointer_stringify(path);
      try {
        FS.rmdir(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _remove(path) {
      // int remove(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/remove.html
      var ret = _unlink(path);
      if (ret == -1) ret = _rmdir(path);
      return ret;
    }

  function _glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _glUniform1f(location, v0) {
      location = GL.uniforms[location];
      GLctx.uniform1f(location, v0);
    }

  
  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }function _freopen(filename, mode, stream) {
      // FILE *freopen(const char *restrict filename, const char *restrict mode, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/freopen.html
      if (!filename) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (!streamObj) {
          ___setErrNo(ERRNO_CODES.EBADF);
          return 0;
        }
        if (_freopen.buffer) _free(_freopen.buffer);
        filename = intArrayFromString(streamObj.path);
        filename = allocate(filename, 'i8', ALLOC_NORMAL);
      }
      _fclose(stream);
      return _fopen(filename, mode);
    }

  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _alGetError() {
      if (!AL.currentContext) {
        return 0xA004 /* AL_INVALID_OPERATION */;
      } else {
        // Reset error on get.
        var err = AL.currentContext.err;
        AL.currentContext.err = 0 /* AL_NO_ERROR */;
        return err;
      }
    }

  
  function _emscripten_get_now() {
      if (!_emscripten_get_now.actual) {
        if (ENVIRONMENT_IS_NODE) {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() {
            var t = process['hrtime']();
            return t[0] * 1e3 + t[1] / 1e6;
          }
        } else if (typeof dateNow !== 'undefined') {
          _emscripten_get_now.actual = dateNow;
        } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() { return self['performance']['now'](); };
        } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() { return performance['now'](); };
        } else {
          _emscripten_get_now.actual = Date.now;
        }
      }
      return _emscripten_get_now.actual();
    }
  
  function _emscripten_get_now_is_monotonic() {
      // return whether emscripten_get_now is guaranteed monotonic; the Date.now
      // implementation is not :(
      return ENVIRONMENT_IS_NODE || (typeof dateNow !== 'undefined') ||
          ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']);
    }function _clock_gettime(clk_id, tp) {
      // int clock_gettime(clockid_t clk_id, struct timespec *tp);
      var now;
      if (clk_id === 0) {
        now = Date.now();
      } else if (clk_id === 1 && _emscripten_get_now_is_monotonic()) {
        now = _emscripten_get_now();
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      HEAP32[((tp)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((tp)+(4))>>2)]=((now % 1000)*1000*1000)|0; // nanoseconds
      return 0;
    }

  function _tmpfile() {
      // FILE *tmpfile(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/tmpfile.html
      // TODO: Delete the created file on closing.
      if (!_tmpfile.mode) {
        _tmpfile.mode = allocate(intArrayFromString('w+'), 'i8', ALLOC_NORMAL);
      }
      return _fopen(_tmpnam(0), _tmpfile.mode);
    }

  function _glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) {
      if (pixels) {
        var data = GL.getTexPixelData(type, format, width, height, pixels, -1);
        pixels = data.pixels;
      } else {
        pixels = null;
      }
      GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
    }

  var _emscripten_cleanup_setjmp=true;

  function _glUniform2f(location, v0, v1) {
      location = GL.uniforms[location];
      GLctx.uniform2f(location, v0, v1);
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  function _stat(path, buf, dontResolveLastLink) {
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/stat.html
      // int stat(const char *path, struct stat *buf);
      // NOTE: dontResolveLastLink is a shortcut for lstat(). It should never be
      //       used in client code.
      path = typeof path !== 'string' ? Pointer_stringify(path) : path;
      try {
        var stat = dontResolveLastLink ? FS.lstat(path) : FS.stat(path);
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      } catch (e) {
        if (e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
          // an error occurred while trying to look up the path; we should just report ENOTDIR
          e.setErrno(ERRNO_CODES.ENOTDIR);
        }
        FS.handleFSError(e);
        return -1;
      }
    }

  function _glGetProgramiv(program, pname, p) {
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        HEAP32[((p)>>2)]=GLctx.getProgramInfoLog(GL.programs[program]).length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        var ptable = GL.programInfos[program];
        if (ptable) {
          HEAP32[((p)>>2)]=ptable.maxUniformLength;
          return;
        } else if (program < GL.counter) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        } else {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        }
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        var ptable = GL.programInfos[program];
        if (ptable) {
          if (ptable.maxAttributeLength == -1) {
            var program = GL.programs[program];
            var numAttribs = GLctx.getProgramParameter(program, GLctx.ACTIVE_ATTRIBUTES);
            ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
            for(var i = 0; i < numAttribs; ++i) {
              var activeAttrib = GLctx.getActiveAttrib(program, i);
              ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
            }
          }
          HEAP32[((p)>>2)]=ptable.maxAttributeLength;
          return;
        } else if (program < GL.counter) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        } else {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        }
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, normalized, stride, ptr);
    }

  function _alDeleteBuffers(count, buffers)
    {
      if (!AL.currentContext) {
        return;
      }
      if (count > AL.currentContext.buf.length) {
        AL.currentContext.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
  
      for (var i = 0; i < count; ++i) {
        var bufferIdx = HEAP32[(((buffers)+(i*4))>>2)] - 1;
  
        // Make sure the buffer index is valid.
        if (bufferIdx >= AL.currentContext.buf.length || !AL.currentContext.buf[bufferIdx]) {
          AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
          return;
        }
  
        // Make sure the buffer is no longer in use.
        var buffer = AL.currentContext.buf[bufferIdx];
        for (var srcId in AL.currentContext.src) {
          var src = AL.currentContext.src[srcId];
          if (!src) {
            continue;
          }
          for (var k = 0; k < src.queue.length; k++) {
            if (buffer === src.queue[k].buffer) {
              AL.currentContext.err = 0xA004 /* AL_INVALID_OPERATION */;
              return;
            }
          }
        }
      }
  
      for (var i = 0; i < count; ++i) {
        var bufferIdx = HEAP32[(((buffers)+(i*4))>>2)] - 1;
        delete AL.currentContext.buf[bufferIdx];
      }
    }

  function _alcMakeContextCurrent(context) {
      if (context == 0) {
        AL.currentContext = null;
        return 0;
      } else {
        AL.currentContext = AL.contexts[context - 1];
        return 1;
      }
    }

  var _cosf=Math_cos;

  function _emscripten_async_wget_data(url, arg, onload, onerror) {
      Browser.asyncLoad(Pointer_stringify(url), function(byteArray) {
        var buffer = _malloc(byteArray.length);
        HEAPU8.set(byteArray, buffer);
        Runtime.dynCall('viii', onload, [arg, buffer, byteArray.length]);
        _free(buffer);
      }, function() {
        if (onerror) Runtime.dynCall('vi', onerror, [arg]);
      }, true /* no need for run dependency, this is async but will not do any prepare etc. step */ );
    }

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  function _glBlendEquation(x0) { GLctx.blendEquation(x0) }

  function _glGetUniformLocation(program, name) {
      name = Pointer_stringify(name);
  
      var arrayOffset = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name.indexOf(']', name.length-1) !== -1) {
        var ls = name.lastIndexOf('[');
        var arrayIndex = name.slice(ls+1, -1);
        if (arrayIndex.length > 0) {
          arrayOffset = parseInt(arrayIndex);
          if (arrayOffset < 0) {
            return -1;
          }
        }
        name = name.slice(0, ls);
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        return -1;
      }
      var utable = ptable.uniforms;
      var uniformInfo = utable[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayOffset < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1]+arrayOffset;
      } else {
        return -1;
      }
    }

  function _glBindFramebuffer(target, framebuffer) {
      GLctx.bindFramebuffer(target, framebuffer ? GL.framebuffers[framebuffer] : null);
    }

  function _alSource3f(source, param, v1, v2, v3) {
      if (!AL.currentContext) {
        return;
      }
      var src = AL.currentContext.src[source];
      if (!src) {
        AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
      switch (param) {
      case 0x1004 /* AL_POSITION */:
        src.position = [v1, v2, v3];
        break;
      case 0x1005 /* AL_DIRECTION */:
        src.direction = [v1, v2, v3];
        break;
      case 0x1006 /* AL_VELOCITY */:
        src.velocity = [v1, v2, v3];
        break;
      default:
        AL.currentContext.err = 0xA002 /* AL_INVALID_ENUM */;
        break;
      }
    }

  function _clock() {
      if (_clock.start === undefined) _clock.start = Date.now();
      return ((Date.now() - _clock.start) * (1000000 / 1000))|0;
    }

  var _sqrtf=Math_sqrt;

  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }

  function _glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }


  var _emscripten_get_longjmp_result=true;

  
  var _setSourceState=undefined;function _alSourcePlay(source) {
      if (!AL.currentContext) {
        return;
      }
      var src = AL.currentContext.src[source];
      if (!src) {
        AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
      AL.setSourceState(src, 0x1012 /* AL_PLAYING */);
    }

  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  var _atan2f=Math_atan2;

  function _glCheckFramebufferStatus(x0) { return GLctx.checkFramebufferStatus(x0) }

  function _alcOpenDevice(deviceName) {
      if (typeof(AudioContext) !== "undefined" ||
          typeof(webkitAudioContext) !== "undefined") {
        return 1; // non-null pointer -- we just simulate one device
      } else {
        return 0;
      }
    }

  function _ferror(stream) {
      // int ferror(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ferror.html
      stream = FS.getStreamFromPtr(stream);
      return Number(stream && stream.error);
    }

  
  function _gmtime_r(time, tmPtr) {
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getUTCSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getUTCMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getUTCHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getUTCDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getUTCMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getUTCFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getUTCDay();
      HEAP32[(((tmPtr)+(36))>>2)]=0;
      HEAP32[(((tmPtr)+(32))>>2)]=0;
      var start = Date.UTC(date.getUTCFullYear(), 0, 1, 0, 0, 0, 0);
      var yday = ((date.getTime() - start) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(40))>>2)]=___tm_timezone;
  
      return tmPtr;
    }function _gmtime(time) {
      return _gmtime_r(time, ___tm_current);
    }

  function _glBindAttribLocation(program, index, name) {
      name = Pointer_stringify(name);
      GLctx.bindAttribLocation(GL.programs[program], index, name);
    }

  var _floorf=Math_floor;

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  var _sinf=Math_sin;

   
  Module["_strlen"] = _strlen;

  var _log=Math_log;

  var _cos=Math_cos;

  function _SDL_PollEvent(ptr) {
      return SDL.pollEvent(ptr);
    }

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(Runtime.stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  function _SDL_Init(initFlags) {
      SDL.startTime = Date.now();
      SDL.initFlags = initFlags;
  
      // capture all key events. we just keep down and up, but also capture press to prevent default actions
      if (!Module['doNotCaptureKeyboard']) {
        var keyboardListeningElement = Module['keyboardListeningElement'] || document;
        keyboardListeningElement.addEventListener("keydown", SDL.receiveEvent);
        keyboardListeningElement.addEventListener("keyup", SDL.receiveEvent);
        keyboardListeningElement.addEventListener("keypress", SDL.receiveEvent);
        window.addEventListener("focus", SDL.receiveEvent);
        window.addEventListener("blur", SDL.receiveEvent);
        document.addEventListener("visibilitychange", SDL.receiveEvent);
      }
  
      if (initFlags & 0x200) {
        // SDL_INIT_JOYSTICK
        // Firefox will not give us Joystick data unless we register this NOP
        // callback.
        // https://bugzilla.mozilla.org/show_bug.cgi?id=936104
        addEventListener("gamepadconnected", function() {});
      }
  
      window.addEventListener("unload", SDL.receiveEvent);
      SDL.keyboardState = _malloc(0x10000); // Our SDL needs 512, but 64K is safe for older SDLs
      _memset(SDL.keyboardState, 0, 0x10000);
      // Initialize this structure carefully for closure
      SDL.DOMEventToSDLEvent['keydown']    = 0x300  /* SDL_KEYDOWN */;
      SDL.DOMEventToSDLEvent['keyup']      = 0x301  /* SDL_KEYUP */;
      SDL.DOMEventToSDLEvent['keypress']   = 0x303  /* SDL_TEXTINPUT */;
      SDL.DOMEventToSDLEvent['mousedown']  = 0x401  /* SDL_MOUSEBUTTONDOWN */;
      SDL.DOMEventToSDLEvent['mouseup']    = 0x402  /* SDL_MOUSEBUTTONUP */;
      SDL.DOMEventToSDLEvent['mousemove']  = 0x400  /* SDL_MOUSEMOTION */;
      SDL.DOMEventToSDLEvent['wheel']      = 0x403  /* SDL_MOUSEWHEEL */; 
      SDL.DOMEventToSDLEvent['touchstart'] = 0x700  /* SDL_FINGERDOWN */;
      SDL.DOMEventToSDLEvent['touchend']   = 0x701  /* SDL_FINGERUP */;
      SDL.DOMEventToSDLEvent['touchmove']  = 0x702  /* SDL_FINGERMOTION */;
      SDL.DOMEventToSDLEvent['unload']     = 0x100  /* SDL_QUIT */;
      SDL.DOMEventToSDLEvent['resize']     = 0x7001 /* SDL_VIDEORESIZE/SDL_EVENT_COMPAT2 */;
      SDL.DOMEventToSDLEvent['visibilitychange'] = 0x200 /* SDL_WINDOWEVENT */;
      SDL.DOMEventToSDLEvent['focus']      = 0x200 /* SDL_WINDOWEVENT */;
      SDL.DOMEventToSDLEvent['blur']       = 0x200 /* SDL_WINDOWEVENT */;
  
      // These are not technically DOM events; the HTML gamepad API is poll-based.
      // However, we define them here, as the rest of the SDL code assumes that
      // all SDL events originate as DOM events.
      SDL.DOMEventToSDLEvent['joystick_axis_motion'] = 0x600 /* SDL_JOYAXISMOTION */;
      SDL.DOMEventToSDLEvent['joystick_button_down'] = 0x603 /* SDL_JOYBUTTONDOWN */;
      SDL.DOMEventToSDLEvent['joystick_button_up'] = 0x604 /* SDL_JOYBUTTONUP */;
      return 0; // success
    }

   
  Module["_strcpy"] = _strcpy;

  function _glGenerateMipmap(x0) { GLctx.generateMipmap(x0) }

  function _SDL_GL_SwapWindow(window) {}

  function _mmap(start, num, prot, flags, fd, offset) {
      /* FIXME: Since mmap is normally implemented at the kernel level,
       * this implementation simply uses malloc underneath the call to
       * mmap.
       */
      var MAP_PRIVATE = 2;
      var ptr;
      var allocated = false;
  
      if (!_mmap.mappings) _mmap.mappings = {};
  
      if (fd == -1) {
        ptr = _malloc(num);
        if (!ptr) return -1;
        _memset(ptr, 0, num);
        allocated = true;
      } else {
        var info = FS.getStream(fd);
        if (!info) return -1;
        try {
          var res = FS.mmap(info, HEAPU8, start, num, offset, prot, flags);
          ptr = res.ptr;
          allocated = res.allocated;
        } catch (e) {
          FS.handleFSError(e);
          return -1;
        }
      }
  
      _mmap.mappings[ptr] = { malloc: ptr, num: num, allocated: allocated, fd: fd, flags: flags };
      return ptr;
    }

  function _glGetShaderiv(shader, pname, p) {
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        // Work around a bug in Chromium which causes getShaderInfoLog to return null: https://code.google.com/p/chromium/issues/detail?id=111337
        if (!log) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  function _emscripten_async_wget(url, file, onload, onerror) {
      var _url = Pointer_stringify(url);
      var _file = Pointer_stringify(file);
      function doCallback(callback) {
        if (callback) {
          var stack = Runtime.stackSave();
          Runtime.dynCall('vi', callback, [allocate(intArrayFromString(_file), 'i8', ALLOC_STACK)]);
          Runtime.stackRestore(stack);
        }
      }
      FS.createPreloadedFile(
        PATH.dirname(_file),
        PATH.basename(_file),
        _url, true, true,
        function() {
          doCallback(onload);
        },
        function() {
          doCallback(onerror);
        }
      );
    }

   
  Module["_i64Subtract"] = _i64Subtract;

  var _fabsf=Math_abs;

   
  Module["_i64Add"] = _i64Add;

  
  var LOCALE={curr:0,check:function (locale) {
        if (locale) locale = Pointer_stringify(locale);
        return locale === 'C' || locale === 'POSIX' || !locale;
      }};function _setlocale(category, locale) {
      if (LOCALE.check(locale)) {
        if (!_setlocale.ret) _setlocale.ret = allocate(intArrayFromString('C'), 'i8', ALLOC_NORMAL);
        return _setlocale.ret;
      }
      return 0;
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

  function _glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }

  function _alcCreateContext(device, attrList) {
      if (device != 1) {
        return 0;
      }
  
      if (attrList) {
        return 0;
      }
  
      var ctx;
      try {
        ctx = new AudioContext();
      } catch (e) {
        try {
          ctx = new webkitAudioContext();
        } catch (e) {}
      }
  
      if (ctx) {
        // Old Web Audio API (e.g. Safari 6.0.5) had an inconsistently named createGainNode function.
        if (typeof(ctx.createGain) === 'undefined') ctx.createGain = ctx.createGainNode;
  
        var gain = ctx.createGain();
        gain.connect(ctx.destination);
        var context = {
          ctx: ctx,
          err: 0,
          src: {},
          buf: [],
          interval: setInterval(function() { AL.updateSources(context); }, AL.QUEUE_INTERVAL),
          gain: gain
        };
        AL.contexts.push(context);
        return AL.contexts.length;
      } else {
        return 0;
      }
    }

  function _alSourceStop(source) {
      if (!AL.currentContext) {
        return;
      }
      var src = AL.currentContext.src[source];
      if (!src) {
        AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
      AL.setSourceState(src, 0x1014 /* AL_STOPPED */);
    }

  function _SDL_StartTextInput() {
      SDL.textInput = true;
    }

  function _SDL_SetVideoMode(width, height, depth, flags) {
      ['touchstart', 'touchend', 'touchmove', 'mousedown', 'mouseup', 'mousemove', 'DOMMouseScroll', 'mousewheel', 'wheel', 'mouseout'].forEach(function(event) {
        Module['canvas'].addEventListener(event, SDL.receiveEvent, true);
      });
  
      var canvas = Module['canvas'];
  
      // (0,0) means 'use fullscreen' in native; in Emscripten, use the current canvas size.
      if (width == 0 && height == 0) {
        width = canvas.width;
        height = canvas.height;
      }
  
      if (!SDL.addedResizeListener) {
        SDL.addedResizeListener = true;
        Browser.resizeListeners.push(function(w, h) {
          if (!SDL.settingVideoMode) {
            SDL.receiveEvent({
              type: 'resize',
              w: w,
              h: h
            });
          }
        });
      }
  
      if (width !== canvas.width || height !== canvas.height) {
        SDL.settingVideoMode = true; // SetVideoMode itself should not trigger resize events
        Browser.setCanvasSize(width, height);
        SDL.settingVideoMode = false;
      }
  
      // Free the old surface first if there is one
      if (SDL.screen) {
        SDL.freeSurface(SDL.screen);
        assert(!SDL.screen);
      }
  
      if (SDL.GL) flags = flags | 0x04000000; // SDL_OPENGL - if we are using GL, then later calls to SetVideoMode may not mention GL, but we do need it. Once in GL mode, we never leave it.
  
      SDL.screen = SDL.makeSurface(width, height, flags, true, 'screen');
  
      return SDL.screen;
    }


  function _glDeleteFramebuffers(n, framebuffers) {
      for (var i = 0; i < n; ++i) {
        var id = HEAP32[(((framebuffers)+(i*4))>>2)];
        var framebuffer = GL.framebuffers[id];
        if (!framebuffer) continue; // GL spec: "glDeleteFramebuffers silently ignores 0s and names that do not correspond to existing framebuffer objects".
        GLctx.deleteFramebuffer(framebuffer);
        framebuffer.name = 0;
        GL.framebuffers[id] = null;
      }
    }

  function _glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  var _llvm_pow_f32=Math_pow;

  function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      // Work around a bug in Chromium which causes getProgramInfoLog to return null: https://code.google.com/p/chromium/issues/detail?id=111337
      // Note that this makes glGetProgramInfoLog behavior to be inconsistent. If an error occurs, GL functions should not write anything
      // to the output parameters, however with this workaround in place, we will always write an empty string out to 'infoLog', even if an
      // error did occur.
      if (!log) log = "";
  
      log = log.substr(0, maxLength - 1);
      if (maxLength > 0 && infoLog) {
        writeStringToMemory(log, infoLog);
        if (length) HEAP32[((length)>>2)]=log.length;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  var _emscripten_postinvoke=true;

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _glClear(x0) { GLctx.clear(x0) }

  
  function _mknod(path, mode, dev) {
      // int mknod(const char *path, mode_t mode, dev_t dev);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/mknod.html
      path = Pointer_stringify(path);
      // we don't want this in the JS API as the JS API
      // uses mknod to create all nodes.
      switch (mode & 61440) {
        case 32768:
        case 8192:
        case 24576:
        case 4096:
        case 49152:
          break;
        default:
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
      }
      try {
        FS.mknod(path, mode, dev);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _mkdir(path, mode) {
      // int mkdir(const char *path, mode_t mode);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/mkdir.html
      path = Pointer_stringify(path);
      // remove a trailing slash, if one - /a/b/ has basename of '', but
      // we want to create b in the context of this function
      path = PATH.normalize(path);
      if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
      try {
        FS.mkdir(path, mode, 0);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  function _system(command) {
      // int system(const char *command);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/system.html
      // Can't call external programs.
      ___setErrNo(ERRNO_CODES.EAGAIN);
      return -1;
    }

  
  var JSEvents={keyEvent:0,mouseEvent:0,wheelEvent:0,uiEvent:0,focusEvent:0,deviceOrientationEvent:0,deviceMotionEvent:0,fullscreenChangeEvent:0,pointerlockChangeEvent:0,visibilityChangeEvent:0,touchEvent:0,previousFullscreenElement:null,previousScreenX:null,previousScreenY:null,removeEventListenersRegistered:false,registerRemoveEventListeners:function () {
        if (!JSEvents.removeEventListenersRegistered) {
        __ATEXIT__.push({ func: function() {
            for(var i = JSEvents.eventHandlers.length-1; i >= 0; --i) {
              JSEvents._removeHandler(i);
            }
           } });
          JSEvents.removeEventListenersRegistered = true;
        }
      },findEventTarget:function (target) {
        if (target) {
          if (typeof target == "number") {
            target = Pointer_stringify(target);
          }
          if (target == '#window') return window;
          else if (target == '#document') return document;
          else if (target == '#screen') return window.screen;
          else if (target == '#canvas') return Module['canvas'];
  
          if (typeof target == 'string') return document.getElementById(target);
          else return target;
        } else {
          // The sensible target varies between events, but use window as the default
          // since DOM events mostly can default to that. Specific callback registrations
          // override their own defaults.
          return window;
        }
      },deferredCalls:[],deferCall:function (targetFunction, precedence, argsList) {
        function arraysHaveEqualContent(arrA, arrB) {
          if (arrA.length != arrB.length) return false;
  
          for(var i in arrA) {
            if (arrA[i] != arrB[i]) return false;
          }
          return true;
        }
        // Test if the given call was already queued, and if so, don't add it again.
        for(var i in JSEvents.deferredCalls) {
          var call = JSEvents.deferredCalls[i];
          if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
            return;
          }
        }
        JSEvents.deferredCalls.push({
          targetFunction: targetFunction,
          precedence: precedence,
          argsList: argsList
        });
  
        JSEvents.deferredCalls.sort(function(x,y) { return x.precedence < y.precedence; });
      },removeDeferredCalls:function (targetFunction) {
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          if (JSEvents.deferredCalls[i].targetFunction == targetFunction) {
            JSEvents.deferredCalls.splice(i, 1);
            --i;
          }
        }
      },canPerformEventHandlerRequests:function () {
        return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls;
      },runDeferredCalls:function () {
        if (!JSEvents.canPerformEventHandlerRequests()) {
          return;
        }
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          var call = JSEvents.deferredCalls[i];
          JSEvents.deferredCalls.splice(i, 1);
          --i;
          call.targetFunction.apply(this, call.argsList);
        }
      },inEventHandler:0,currentEventHandler:null,eventHandlers:[],isInternetExplorer:function () { return navigator.userAgent.indexOf('MSIE') !== -1 || navigator.appVersion.indexOf('Trident/') > 0; },removeAllHandlersOnTarget:function (target, eventTypeString) {
        for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
          if (JSEvents.eventHandlers[i].target == target && 
            (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
             JSEvents._removeHandler(i--);
           }
        }
      },_removeHandler:function (i) {
        var h = JSEvents.eventHandlers[i];
        h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
        JSEvents.eventHandlers.splice(i, 1);
      },registerOrRemoveHandler:function (eventHandler) {
        var jsEventHandler = function jsEventHandler(event) {
          // Increment nesting count for the event handler.
          ++JSEvents.inEventHandler;
          JSEvents.currentEventHandler = eventHandler;
          // Process any old deferred calls the user has placed.
          JSEvents.runDeferredCalls();
          // Process the actual event, calls back to user C code handler.
          eventHandler.handlerFunc(event);
          // Process any new deferred calls that were placed right now from this event handler.
          JSEvents.runDeferredCalls();
          // Out of event handler - restore nesting count.
          --JSEvents.inEventHandler;
        }
        
        if (eventHandler.callbackfunc) {
          eventHandler.eventListenerFunc = jsEventHandler;
          eventHandler.target.addEventListener(eventHandler.eventTypeString, jsEventHandler, eventHandler.useCapture);
          JSEvents.eventHandlers.push(eventHandler);
          JSEvents.registerRemoveEventListeners();
        } else {
          for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
            if (JSEvents.eventHandlers[i].target == eventHandler.target
             && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
               JSEvents._removeHandler(i--);
             }
          }
        }
      },registerKeyEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.keyEvent) {
          JSEvents.keyEvent = _malloc( 164 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
          writeStringToMemory(e.key ? e.key : "", JSEvents.keyEvent + 0 );
          writeStringToMemory(e.code ? e.code : "", JSEvents.keyEvent + 32 );
          HEAP32[(((JSEvents.keyEvent)+(64))>>2)]=e.location;
          HEAP32[(((JSEvents.keyEvent)+(68))>>2)]=e.ctrlKey;
          HEAP32[(((JSEvents.keyEvent)+(72))>>2)]=e.shiftKey;
          HEAP32[(((JSEvents.keyEvent)+(76))>>2)]=e.altKey;
          HEAP32[(((JSEvents.keyEvent)+(80))>>2)]=e.metaKey;
          HEAP32[(((JSEvents.keyEvent)+(84))>>2)]=e.repeat;
          writeStringToMemory(e.locale ? e.locale : "", JSEvents.keyEvent + 88 );
          writeStringToMemory(e.char ? e.char : "", JSEvents.keyEvent + 120 );
          HEAP32[(((JSEvents.keyEvent)+(152))>>2)]=e.charCode;
          HEAP32[(((JSEvents.keyEvent)+(156))>>2)]=e.keyCode;
          HEAP32[(((JSEvents.keyEvent)+(160))>>2)]=e.which;
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.keyEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: JSEvents.isInternetExplorer() ? false : true, // MSIE doesn't allow fullscreen and pointerlock requests from key handlers, others do.
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },getBoundingClientRectOrZeros:function (target) {
        return target.getBoundingClientRect ? target.getBoundingClientRect() : { left: 0, top: 0 };
      },fillMouseEventData:function (eventStruct, e, target) {
        HEAPF64[((eventStruct)>>3)]=JSEvents.tick();
        HEAP32[(((eventStruct)+(8))>>2)]=e.screenX;
        HEAP32[(((eventStruct)+(12))>>2)]=e.screenY;
        HEAP32[(((eventStruct)+(16))>>2)]=e.clientX;
        HEAP32[(((eventStruct)+(20))>>2)]=e.clientY;
        HEAP32[(((eventStruct)+(24))>>2)]=e.ctrlKey;
        HEAP32[(((eventStruct)+(28))>>2)]=e.shiftKey;
        HEAP32[(((eventStruct)+(32))>>2)]=e.altKey;
        HEAP32[(((eventStruct)+(36))>>2)]=e.metaKey;
        HEAP16[(((eventStruct)+(40))>>1)]=e.button;
        HEAP16[(((eventStruct)+(42))>>1)]=e.buttons;
        HEAP32[(((eventStruct)+(44))>>2)]=e["movementX"] || e["mozMovementX"] || e["webkitMovementX"] || (e.screenX-JSEvents.previousScreenX);
        HEAP32[(((eventStruct)+(48))>>2)]=e["movementY"] || e["mozMovementY"] || e["webkitMovementY"] || (e.screenY-JSEvents.previousScreenY);
  
        if (Module['canvas']) {
          var rect = Module['canvas'].getBoundingClientRect();
          HEAP32[(((eventStruct)+(60))>>2)]=e.clientX - rect.left;
          HEAP32[(((eventStruct)+(64))>>2)]=e.clientY - rect.top;
        } else { // Canvas is not initialized, return 0.
          HEAP32[(((eventStruct)+(60))>>2)]=0;
          HEAP32[(((eventStruct)+(64))>>2)]=0;
        }
        if (target) {
          var rect = JSEvents.getBoundingClientRectOrZeros(target);
          HEAP32[(((eventStruct)+(52))>>2)]=e.clientX - rect.left;
          HEAP32[(((eventStruct)+(56))>>2)]=e.clientY - rect.top;        
        } else { // No specific target passed, return 0.
          HEAP32[(((eventStruct)+(52))>>2)]=0;
          HEAP32[(((eventStruct)+(56))>>2)]=0;
        }
        JSEvents.previousScreenX = e.screenX;
        JSEvents.previousScreenY = e.screenY;
      },registerMouseEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.mouseEvent) {
          JSEvents.mouseEvent = _malloc( 72 );
        }
        target = JSEvents.findEventTarget(target);
        var handlerFunc = function(event) {
          var e = event || window.event;
          JSEvents.fillMouseEventData(JSEvents.mouseEvent, e, target);
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.mouseEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: eventTypeString != 'mousemove' && eventTypeString != 'mouseenter' && eventTypeString != 'mouseleave', // Mouse move events do not allow fullscreen/pointer lock requests to be handled in them!
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        // In IE, mousedown events don't either allow deferred calls to be run!
        if (JSEvents.isInternetExplorer() && eventTypeString == 'mousedown') eventHandler.allowsDeferredCalls = false;
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerWheelEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.wheelEvent) {
          JSEvents.wheelEvent = _malloc( 104 );
        }
        target = JSEvents.findEventTarget(target);
        // The DOM Level 3 events spec event 'wheel'
        var wheelHandlerFunc = function(event) {
          var e = event || window.event;
          JSEvents.fillMouseEventData(JSEvents.wheelEvent, e, target);
          HEAPF64[(((JSEvents.wheelEvent)+(72))>>3)]=e["deltaX"];
          HEAPF64[(((JSEvents.wheelEvent)+(80))>>3)]=e["deltaY"];
          HEAPF64[(((JSEvents.wheelEvent)+(88))>>3)]=e["deltaZ"];
          HEAP32[(((JSEvents.wheelEvent)+(96))>>2)]=e["deltaMode"];
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.wheelEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
        // The 'mousewheel' event as implemented in Safari 6.0.5
        var mouseWheelHandlerFunc = function(event) {
          var e = event || window.event;
          JSEvents.fillMouseEventData(JSEvents.wheelEvent, e, target);
          HEAPF64[(((JSEvents.wheelEvent)+(72))>>3)]=e["wheelDeltaX"];
          HEAPF64[(((JSEvents.wheelEvent)+(80))>>3)]=-e["wheelDeltaY"] /* Invert to unify direction with the DOM Level 3 wheel event. */;
          HEAPF64[(((JSEvents.wheelEvent)+(88))>>3)]=0 /* Not available */;
          HEAP32[(((JSEvents.wheelEvent)+(96))>>2)]=0 /* DOM_DELTA_PIXEL */;
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.wheelEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: true,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: (eventTypeString == 'wheel') ? wheelHandlerFunc : mouseWheelHandlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },pageScrollPos:function () {
        if (window.pageXOffset > 0 || window.pageYOffset > 0) {
          return [window.pageXOffset, window.pageYOffset];
        }
        if (typeof document.documentElement.scrollLeft !== 'undefined' || typeof document.documentElement.scrollTop !== 'undefined') {
          return [document.documentElement.scrollLeft, document.documentElement.scrollTop];
        }
        return [document.body.scrollLeft|0, document.body.scrollTop|0];
      },registerUiEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.uiEvent) {
          JSEvents.uiEvent = _malloc( 36 );
        }
  
        if (eventTypeString == "scroll" && !target) {
          target = document; // By default read scroll events on document rather than window.
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
          if (e.target != target) {
            // Never take ui events such as scroll via a 'bubbled' route, but always from the direct element that
            // was targeted. Otherwise e.g. if app logs a message in response to a page scroll, the Emscripten log
            // message box could cause to scroll, generating a new (bubbled) scroll message, causing a new log print,
            // causing a new scroll, etc..
            return;
          }
          var scrollPos = JSEvents.pageScrollPos();
          HEAP32[((JSEvents.uiEvent)>>2)]=e.detail;
          HEAP32[(((JSEvents.uiEvent)+(4))>>2)]=document.body.clientWidth;
          HEAP32[(((JSEvents.uiEvent)+(8))>>2)]=document.body.clientHeight;
          HEAP32[(((JSEvents.uiEvent)+(12))>>2)]=window.innerWidth;
          HEAP32[(((JSEvents.uiEvent)+(16))>>2)]=window.innerHeight;
          HEAP32[(((JSEvents.uiEvent)+(20))>>2)]=window.outerWidth;
          HEAP32[(((JSEvents.uiEvent)+(24))>>2)]=window.outerHeight;
          HEAP32[(((JSEvents.uiEvent)+(28))>>2)]=scrollPos[0];
          HEAP32[(((JSEvents.uiEvent)+(32))>>2)]=scrollPos[1];
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.uiEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false, // Neither scroll or resize events allow running requests inside them.
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },getNodeNameForTarget:function (target) {
        if (!target) return '';
        if (target == window) return '#window';
        if (target == window.screen) return '#screen';
        return (target && target.nodeName) ? target.nodeName : '';
      },registerFocusEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.focusEvent) {
          JSEvents.focusEvent = _malloc( 256 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var nodeName = JSEvents.getNodeNameForTarget(e.target);
          var id = e.target.id ? e.target.id : '';
          writeStringToMemory(nodeName, JSEvents.focusEvent + 0 );
          writeStringToMemory(id, JSEvents.focusEvent + 128 );
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.focusEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },tick:function () {
        if (window['performance'] && window['performance']['now']) return window['performance']['now']();
        else return Date.now();
      },registerDeviceOrientationEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.deviceOrientationEvent) {
          JSEvents.deviceOrientationEvent = _malloc( 40 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          HEAPF64[((JSEvents.deviceOrientationEvent)>>3)]=JSEvents.tick();
          HEAPF64[(((JSEvents.deviceOrientationEvent)+(8))>>3)]=e.alpha;
          HEAPF64[(((JSEvents.deviceOrientationEvent)+(16))>>3)]=e.beta;
          HEAPF64[(((JSEvents.deviceOrientationEvent)+(24))>>3)]=e.gamma;
          HEAP32[(((JSEvents.deviceOrientationEvent)+(32))>>2)]=e.absolute;
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.deviceOrientationEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerDeviceMotionEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.deviceMotionEvent) {
          JSEvents.deviceMotionEvent = _malloc( 80 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          HEAPF64[((JSEvents.deviceOrientationEvent)>>3)]=JSEvents.tick();
          HEAPF64[(((JSEvents.deviceMotionEvent)+(8))>>3)]=e.acceleration.x;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(16))>>3)]=e.acceleration.y;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(24))>>3)]=e.acceleration.z;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(32))>>3)]=e.accelerationIncludingGravity.x;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(40))>>3)]=e.accelerationIncludingGravity.y;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(48))>>3)]=e.accelerationIncludingGravity.z;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(56))>>3)]=e.rotationRate.alpha;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(64))>>3)]=e.rotationRate.beta;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(72))>>3)]=e.rotationRate.gamma;
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.deviceMotionEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },screenOrientation:function () {
        if (!window.screen) return undefined;
        return window.screen.orientation || window.screen.mozOrientation || window.screen.webkitOrientation || window.screen.msOrientation;
      },fillOrientationChangeEventData:function (eventStruct, e) {
        var orientations  = ["portrait-primary", "portrait-secondary", "landscape-primary", "landscape-secondary"];
        var orientations2 = ["portrait",         "portrait",           "landscape",         "landscape"];
  
        var orientationString = JSEvents.screenOrientation();
        var orientation = orientations.indexOf(orientationString);
        if (orientation == -1) {
          orientation = orientations2.indexOf(orientationString);
        }
  
        HEAP32[((eventStruct)>>2)]=1 << orientation;
        HEAP32[(((eventStruct)+(4))>>2)]=window.orientation;
      },registerOrientationChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.orientationChangeEvent) {
          JSEvents.orientationChangeEvent = _malloc( 8 );
        }
  
        if (!target) {
          target = window.screen; // Orientation events need to be captured from 'window.screen' instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillOrientationChangeEventData(JSEvents.orientationChangeEvent, e);
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.orientationChangeEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        if (eventTypeString == "orientationchange" && window.screen.mozOrientation !== undefined) {
          eventTypeString = "mozorientationchange";
        }
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },fullscreenEnabled:function () {
        return document.fullscreenEnabled || document.mozFullscreenEnabled || document.mozFullScreenEnabled || document.webkitFullscreenEnabled || document.msFullscreenEnabled;
      },fillFullscreenChangeEventData:function (eventStruct, e) {
        var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
        var isFullscreen = !!fullscreenElement;
        HEAP32[((eventStruct)>>2)]=isFullscreen;
        HEAP32[(((eventStruct)+(4))>>2)]=JSEvents.fullscreenEnabled();
        // If transitioning to fullscreen, report info about the element that is now fullscreen.
        // If transitioning to windowed mode, report info about the element that just was fullscreen.
        var reportedElement = isFullscreen ? fullscreenElement : JSEvents.previousFullscreenElement;
        var nodeName = JSEvents.getNodeNameForTarget(reportedElement);
        var id = (reportedElement && reportedElement.id) ? reportedElement.id : '';
        writeStringToMemory(nodeName, eventStruct + 8 );
        writeStringToMemory(id, eventStruct + 136 );
        HEAP32[(((eventStruct)+(264))>>2)]=reportedElement ? reportedElement.clientWidth : 0;
        HEAP32[(((eventStruct)+(268))>>2)]=reportedElement ? reportedElement.clientHeight : 0;
        HEAP32[(((eventStruct)+(272))>>2)]=screen.width;
        HEAP32[(((eventStruct)+(276))>>2)]=screen.height;
        if (isFullscreen) {
          JSEvents.previousFullscreenElement = fullscreenElement;
        }
      },registerFullscreenChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.fullscreenChangeEvent) {
          JSEvents.fullscreenChangeEvent = _malloc( 280 );
        }
  
        if (!target) {
          target = document; // Fullscreen change events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillFullscreenChangeEventData(JSEvents.fullscreenChangeEvent, e);
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.fullscreenChangeEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },resizeCanvasForFullscreen:function (target, strategy) {
        var restoreOldStyle = __registerRestoreOldStyle(target);
        var cssWidth = strategy.softFullscreen ? window.innerWidth : screen.width;
        var cssHeight = strategy.softFullscreen ? window.innerHeight : screen.height;
        var rect = target.getBoundingClientRect();
        var windowedCssWidth = rect.right - rect.left;
        var windowedCssHeight = rect.bottom - rect.top;
        var windowedRttWidth = target.width;
        var windowedRttHeight = target.height;
  
        if (strategy.scaleMode == 3) {
          __setLetterbox(target, (cssHeight - windowedCssHeight) / 2, (cssWidth - windowedCssWidth) / 2);
          cssWidth = windowedCssWidth;
          cssHeight = windowedCssHeight;
        } else if (strategy.scaleMode == 2) {
          if (cssWidth*windowedRttHeight < windowedRttWidth*cssHeight) {
            var desiredCssHeight = windowedRttHeight * cssWidth / windowedRttWidth;
            __setLetterbox(target, (cssHeight - desiredCssHeight) / 2, 0);
            cssHeight = desiredCssHeight;
          } else {
            var desiredCssWidth = windowedRttWidth * cssHeight / windowedRttHeight;
            __setLetterbox(target, 0, (cssWidth - desiredCssWidth) / 2);
            cssWidth = desiredCssWidth;
          }
        }
  
        // If we are adding padding, must choose a background color or otherwise Chrome will give the
        // padding a default white color. Do it only if user has not customized their own background color.
        if (!target.style.backgroundColor) target.style.backgroundColor = 'black';
        // IE11 does the same, but requires the color to be set in the document body.
        if (!document.body.style.backgroundColor) document.body.style.backgroundColor = 'black'; // IE11
        // Firefox always shows black letterboxes independent of style color.
  
        target.style.width = cssWidth + 'px';
        target.style.height = cssHeight + 'px';
  
        if (strategy.filteringMode == 1) {
          target.style.imageRendering = 'optimizeSpeed';
          target.style.imageRendering = '-moz-crisp-edges';
          target.style.imageRendering = '-o-crisp-edges';
          target.style.imageRendering = '-webkit-optimize-contrast';
          target.style.imageRendering = 'optimize-contrast';
          target.style.imageRendering = 'crisp-edges';
          target.style.imageRendering = 'pixelated';
        }
  
        var dpiScale = (strategy.canvasResolutionScaleMode == 2) ? window.devicePixelRatio : 1;
        if (strategy.canvasResolutionScaleMode != 0) {
          target.width = cssWidth * dpiScale;
          target.height = cssHeight * dpiScale;
          if (target.GLctxObject) target.GLctxObject.GLctx.viewport(0, 0, target.width, target.height);
        }
        return restoreOldStyle;
      },requestFullscreen:function (target, strategy) {
        // EMSCRIPTEN_FULLSCREEN_SCALE_DEFAULT + EMSCRIPTEN_FULLSCREEN_CANVAS_SCALE_NONE is a mode where no extra logic is performed to the DOM elements.
        if (strategy.scaleMode != 0 || strategy.canvasResolutionScaleMode != 0) {
          JSEvents.resizeCanvasForFullscreen(target, strategy);
        }
  
        if (target.requestFullscreen) {
          target.requestFullscreen();
        } else if (target.msRequestFullscreen) {
          target.msRequestFullscreen();
        } else if (target.mozRequestFullScreen) {
          target.mozRequestFullScreen();
        } else if (target.mozRequestFullscreen) {
          target.mozRequestFullscreen();
        } else if (target.webkitRequestFullscreen) {
          target.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
        } else {
          if (typeof JSEvents.fullscreenEnabled() === 'undefined') {
            return -1;
          } else {
            return -3;
          }
        }
  
        if (strategy.canvasResizedCallback) {
          Runtime.dynCall('iiii', strategy.canvasResizedCallback, [37, 0, strategy.canvasResizedCallbackUserData]);
        }
  
        return 0;
      },fillPointerlockChangeEventData:function (eventStruct, e) {
        var pointerLockElement = document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement || document.msPointerLockElement;
        var isPointerlocked = !!pointerLockElement;
        HEAP32[((eventStruct)>>2)]=isPointerlocked;
        var nodeName = JSEvents.getNodeNameForTarget(pointerLockElement);
        var id = (pointerLockElement && pointerLockElement.id) ? pointerLockElement.id : '';
        writeStringToMemory(nodeName, eventStruct + 4 );
        writeStringToMemory(id, eventStruct + 132);
      },registerPointerlockChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.pointerlockChangeEvent) {
          JSEvents.pointerlockChangeEvent = _malloc( 260 );
        }
  
        if (!target) {
          target = document; // Pointer lock change events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillPointerlockChangeEventData(JSEvents.pointerlockChangeEvent, e);
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.pointerlockChangeEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },requestPointerLock:function (target) {
        if (target.requestPointerLock) {
          target.requestPointerLock();
        } else if (target.mozRequestPointerLock) {
          target.mozRequestPointerLock();
        } else if (target.webkitRequestPointerLock) {
          target.webkitRequestPointerLock();
        } else if (target.msRequestPointerLock) {
          target.msRequestPointerLock();
        } else {
          // document.body is known to accept pointer lock, so use that to differentiate if the user passed a bad element,
          // or if the whole browser just doesn't support the feature.
          if (document.body.requestPointerLock || document.body.mozRequestPointerLock || document.body.webkitRequestPointerLock || document.body.msRequestPointerLock) {
            return -3;
          } else {
            return -1;
          }
        }
        return 0;
      },fillVisibilityChangeEventData:function (eventStruct, e) {
        var visibilityStates = [ "hidden", "visible", "prerender", "unloaded" ];
        var visibilityState = visibilityStates.indexOf(document.visibilityState);
  
        HEAP32[((eventStruct)>>2)]=document.hidden;
        HEAP32[(((eventStruct)+(4))>>2)]=visibilityState;
      },registerVisibilityChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.visibilityChangeEvent) {
          JSEvents.visibilityChangeEvent = _malloc( 8 );
        }
  
        if (!target) {
          target = document; // Visibility change events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillVisibilityChangeEventData(JSEvents.visibilityChangeEvent, e);
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.visibilityChangeEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerTouchEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.touchEvent) {
          JSEvents.touchEvent = _malloc( 1684 );
        }
  
        target = JSEvents.findEventTarget(target);
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var touches = {};
          for(var i = 0; i < e.touches.length; ++i) {
            var touch = e.touches[i];
            touches[touch.identifier] = touch;
          }
          for(var i = 0; i < e.changedTouches.length; ++i) {
            var touch = e.changedTouches[i];
            touches[touch.identifier] = touch;
            touch.changed = true;
          }
          for(var i = 0; i < e.targetTouches.length; ++i) {
            var touch = e.targetTouches[i];
            touches[touch.identifier].onTarget = true;
          }
          
          var ptr = JSEvents.touchEvent;
          HEAP32[(((ptr)+(4))>>2)]=e.ctrlKey;
          HEAP32[(((ptr)+(8))>>2)]=e.shiftKey;
          HEAP32[(((ptr)+(12))>>2)]=e.altKey;
          HEAP32[(((ptr)+(16))>>2)]=e.metaKey;
          ptr += 20; // Advance to the start of the touch array.
          var canvasRect = Module['canvas'] ? Module['canvas'].getBoundingClientRect() : undefined;
          var targetRect = JSEvents.getBoundingClientRectOrZeros(target);
          var numTouches = 0;
          for(var i in touches) {
            var t = touches[i];
            HEAP32[((ptr)>>2)]=t.identifier;
            HEAP32[(((ptr)+(4))>>2)]=t.screenX;
            HEAP32[(((ptr)+(8))>>2)]=t.screenY;
            HEAP32[(((ptr)+(12))>>2)]=t.clientX;
            HEAP32[(((ptr)+(16))>>2)]=t.clientY;
            HEAP32[(((ptr)+(20))>>2)]=t.pageX;
            HEAP32[(((ptr)+(24))>>2)]=t.pageY;
            HEAP32[(((ptr)+(28))>>2)]=t.changed;
            HEAP32[(((ptr)+(32))>>2)]=t.onTarget;
            if (canvasRect) {
              HEAP32[(((ptr)+(44))>>2)]=t.clientX - canvasRect.left;
              HEAP32[(((ptr)+(48))>>2)]=t.clientY - canvasRect.top;
            } else {
              HEAP32[(((ptr)+(44))>>2)]=0;
              HEAP32[(((ptr)+(48))>>2)]=0;            
            }
            HEAP32[(((ptr)+(36))>>2)]=t.clientX - targetRect.left;
            HEAP32[(((ptr)+(40))>>2)]=t.clientY - targetRect.top;
            
            ptr += 52;
  
            if (++numTouches >= 32) {
              break;
            }
          }
          HEAP32[((JSEvents.touchEvent)>>2)]=numTouches;
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.touchEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false, // XXX Currently disabled, see bug https://bugzilla.mozilla.org/show_bug.cgi?id=966493
          // Once the above bug is resolved, enable the following condition if possible:
          // allowsDeferredCalls: eventTypeString == 'touchstart',
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },fillGamepadEventData:function (eventStruct, e) {
        HEAPF64[((eventStruct)>>3)]=e.timestamp;
        for(var i = 0; i < e.axes.length; ++i) {
          HEAPF64[(((eventStruct+i*8)+(16))>>3)]=e.axes[i];
        }
        for(var i = 0; i < e.buttons.length; ++i) {
          if (typeof(e.buttons[i]) === 'object') {
            HEAPF64[(((eventStruct+i*8)+(528))>>3)]=e.buttons[i].value;
          } else {
            HEAPF64[(((eventStruct+i*8)+(528))>>3)]=e.buttons[i];
          }
        }
        for(var i = 0; i < e.buttons.length; ++i) {
          if (typeof(e.buttons[i]) === 'object') {
            HEAP32[(((eventStruct+i*4)+(1040))>>2)]=e.buttons[i].pressed;
          } else {
            HEAP32[(((eventStruct+i*4)+(1040))>>2)]=e.buttons[i] == 1.0;
          }
        }
        HEAP32[(((eventStruct)+(1296))>>2)]=e.connected;
        HEAP32[(((eventStruct)+(1300))>>2)]=e.index;
        HEAP32[(((eventStruct)+(8))>>2)]=e.axes.length;
        HEAP32[(((eventStruct)+(12))>>2)]=e.buttons.length;
        writeStringToMemory(e.id, eventStruct + 1304 );
        writeStringToMemory(e.mapping, eventStruct + 1368 );
      },registerGamepadEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.gamepadEvent) {
          JSEvents.gamepadEvent = _malloc( 1432 );
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillGamepadEventData(JSEvents.gamepadEvent, e.gamepad);
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.gamepadEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: true,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerBeforeUnloadEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var confirmationMessage = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, 0, userData]);
          
          if (confirmationMessage) {
            confirmationMessage = Pointer_stringify(confirmationMessage);
          }
          if (confirmationMessage) {
            e.preventDefault();
            e.returnValue = confirmationMessage;
            return confirmationMessage;
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },battery:function () { return navigator.battery || navigator.mozBattery || navigator.webkitBattery; },fillBatteryEventData:function (eventStruct, e) {
        HEAPF64[((eventStruct)>>3)]=e.chargingTime;
        HEAPF64[(((eventStruct)+(8))>>3)]=e.dischargingTime;
        HEAPF64[(((eventStruct)+(16))>>3)]=e.level;
        HEAP32[(((eventStruct)+(24))>>2)]=e.charging;
      },registerBatteryEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.batteryEvent) {
          JSEvents.batteryEvent = _malloc( 32 );
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillBatteryEventData(JSEvents.batteryEvent, JSEvents.battery());
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.batteryEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerWebGlEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!target) {
          target = Module['canvas'];
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, 0, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      }};function _emscripten_set_resize_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerUiEventCallback(target, userData, useCapture, callbackfunc, 10, "resize");
      return 0;
    }

  
  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }

  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  function _glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
  
      GLctx.bindBuffer(target, bufferObj);
    }

  function _SDL_InitSubSystem(flags) { return 0 }

  function _alSourceUnqueueBuffers(source, count, buffers) {
      if (!AL.currentContext) {
        return;
      }
      var src = AL.currentContext.src[source];
      if (!src) {
        AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
  
      if (count > src.buffersPlayed) {
        AL.currentContext.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
  
      for (var i = 0; i < count; i++) {
        var entry = src.queue.shift();
        // Write the buffers index out to the return list.
        for (var j = 0; j < AL.currentContext.buf.length; j++) {
          var b = AL.currentContext.buf[j];
          if (b && b == entry.buffer) {
            HEAP32[(((buffers)+(i*4))>>2)]=j+1;
            break;
          }
        }
        src.buffersPlayed--;
      }
  
      AL.updateSource(src);
    }

  function _glReadPixels(x, y, width, height, format, type, pixels) {
      var data = GL.getTexPixelData(type, format, width, height, pixels, format);
      if (!data.pixels) {
        GL.recordError(0x0500/*GL_INVALID_ENUM*/);
        return;
      }
      GLctx.readPixels(x, y, width, height, format, type, data.pixels);
    }

  function _SDL_GetError() {
      if (!SDL.errorMessage) {
        SDL.errorMessage = allocate(intArrayFromString("unknown SDL-emscripten error"), 'i8', ALLOC_NORMAL);
      }
      return SDL.errorMessage;
    }

  function _glFramebufferTexture2D(target, attachment, textarget, texture, level) {
      GLctx.framebufferTexture2D(target, attachment, textarget,
                                      GL.textures[texture], level);
    }

  function _SDL_GetWindowSize(window, width, height){
      var w = Module['canvas'].width;
      var h = Module['canvas'].height;
      if (width) HEAP32[((width)>>2)]=w;
      if (height) HEAP32[((height)>>2)]=h;
    }

  function _emscripten_request_pointerlock(target, deferUntilInEventHandler) {
      if (!target) target = '#canvas';
      target = JSEvents.findEventTarget(target);
      if (!target) return -4;
      if (!target.requestPointerLock && !target.mozRequestPointerLock && !target.webkitRequestPointerLock && !target.msRequestPointerLock) {
        return -1;
      }
  
      var canPerformRequests = JSEvents.canPerformEventHandlerRequests();
  
      // Queue this function call if we're not currently in an event handler and the user saw it appropriate to do so.
      if (!canPerformRequests) {
        if (deferUntilInEventHandler) {
          JSEvents.deferCall(JSEvents.requestPointerLock, 2 /* priority below fullscreen */, [target]);
          return 1;
        } else {
          return -2;
        }
      }
  
      return JSEvents.requestPointerLock(target);
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  
  
  
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      assert((varargs & 7) === 0);
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        argIndex = Runtime.prepVararg(argIndex, type);
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
          argIndex += 8;
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
          argIndex += 8;
        } else {
          assert((argIndex & 3) === 0);
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += 4;
        }
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }function _vprintf(format, va_arg) {
      return _printf(format, HEAP32[((va_arg)>>2)]);
    }

  function _glBufferData(target, size, data, usage) {
      switch (usage) { // fix usages, WebGL only has *_DRAW
        case 0x88E1: // GL_STREAM_READ
        case 0x88E2: // GL_STREAM_COPY
          usage = 0x88E0; // GL_STREAM_DRAW
          break;
        case 0x88E5: // GL_STATIC_READ
        case 0x88E6: // GL_STATIC_COPY
          usage = 0x88E4; // GL_STATIC_DRAW
          break;
        case 0x88E9: // GL_DYNAMIC_READ
        case 0x88EA: // GL_DYNAMIC_COPY
          usage = 0x88E8; // GL_DYNAMIC_DRAW
          break;
      }
      if (!data) {
        GLctx.bufferData(target, size, usage);
      } else {
        GLctx.bufferData(target, HEAPU8.subarray(data, data+size), usage);
      }
    }

  var _BDtoIHigh=true;

  var _asinf=Math_asin;

  
  
   
  Module["_testSetjmp"] = _testSetjmp;function _longjmp(env, value) {
      asm['setThrew'](env, value || 1);
      throw 'longjmp';
    }function _emscripten_longjmp(env, value) {
      _longjmp(env, value);
    }

  function _alGetSourcei(source, param, value) {
      if (!AL.currentContext) {
        return;
      }
      var src = AL.currentContext.src[source];
      if (!src) {
        AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
  
      // Being that we have no way to receive end events from buffer nodes,
      // we currently proccess and update a source's buffer queue every
      // ~QUEUE_INTERVAL milliseconds. However, this interval is not precise,
      // so we also forcefully update the source when alGetSourcei is queried
      // to aid in the common scenario of application calling alGetSourcei(AL_BUFFERS_PROCESSED)
      // to recycle buffers.
      AL.updateSource(src);
  
      switch (param) {
      case 0x202 /* AL_SOURCE_RELATIVE */:
        HEAP32[((value)>>2)]=src.panner ? 1 : 0;
        break;
      case 0x1001 /* AL_CONE_INNER_ANGLE */:
        HEAP32[((value)>>2)]=src.coneInnerAngle;
        break;
      case 0x1002 /* AL_CONE_OUTER_ANGLE */:
        HEAP32[((value)>>2)]=src.coneOuterAngle;
        break;
      case 0x1009 /* AL_BUFFER */:
        if (!src.queue.length) {
          HEAP32[((value)>>2)]=0;
        } else {
          // Find the first unprocessed buffer.
          var buffer = src.queue[src.buffersPlayed].buffer;
          // Return its index.
          for (var i = 0; i < AL.currentContext.buf.length; ++i) {
            if (buffer == AL.currentContext.buf[i]) {
              HEAP32[((value)>>2)]=i+1;
              return;
            }
          }
          HEAP32[((value)>>2)]=0;
        }
        break;
      case 0x1010 /* AL_SOURCE_STATE */:
        HEAP32[((value)>>2)]=src.state;
        break;
      case 0x1015 /* AL_BUFFERS_QUEUED */:
        HEAP32[((value)>>2)]=src.queue.length
        break;
      case 0x1016 /* AL_BUFFERS_PROCESSED */:
        if (src.loop) {
          HEAP32[((value)>>2)]=0
        } else {
          HEAP32[((value)>>2)]=src.buffersPlayed
        }
        break;
      default:
        AL.currentContext.err = 0xA002 /* AL_INVALID_ENUM */;
        break;
      }
    }

  function _glGetError() {
      // First return any GL error generated by the emscripten library_gl.js interop layer.
      if (GL.lastError) {
        var error = GL.lastError;
        GL.lastError = 0/*GL_NO_ERROR*/;
        return error;
      } else { // If there were none, return the GL error from the browser GL context.
        return GLctx.getError();
      }
    }

  function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }

  function _SDL_GL_SetSwapInterval(state) {
      _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, state);
    }

  function _alGenSources(count, sources) {
      if (!AL.currentContext) {
        return;
      }
      for (var i = 0; i < count; ++i) {
        var gain = AL.currentContext.ctx.createGain();
        gain.connect(AL.currentContext.gain);
        AL.currentContext.src[AL.newSrcId] = {
          state: 0x1011 /* AL_INITIAL */,
          queue: [],
          loop: false,
          get refDistance() {
            return this._refDistance || 1;
          },
          set refDistance(val) {
            this._refDistance = val;
            if (this.panner) this.panner.refDistance = val;
          },
          get maxDistance() {
            return this._maxDistance || 10000;
          },
          set maxDistance(val) {
            this._maxDistance = val;
            if (this.panner) this.panner.maxDistance = val;
          },
          get rolloffFactor() {
            return this._rolloffFactor || 1;
          },
          set rolloffFactor(val) {
            this._rolloffFactor = val;
            if (this.panner) this.panner.rolloffFactor = val;
          },
          get position() {
            return this._position || [0, 0, 0];
          },
          set position(val) {
            this._position = val;
            if (this.panner) this.panner.setPosition(val[0], val[1], val[2]);
          },
          get velocity() {
            return this._velocity || [0, 0, 0];
          },
          set velocity(val) {
            this._velocity = val;
            if (this.panner) this.panner.setVelocity(val[0], val[1], val[2]);
          },
          get direction() {
            return this._direction || [0, 0, 0];
          },
          set direction(val) {
            this._direction = val;
            if (this.panner) this.panner.setOrientation(val[0], val[1], val[2]);
          },
          get coneOuterGain() {
            return this._coneOuterGain || 0.0;
          },
          set coneOuterGain(val) {
            this._coneOuterGain = val;
            if (this.panner) this.panner.coneOuterGain = val;
          },
          get coneInnerAngle() {
            return this._coneInnerAngle || 360.0;
          },
          set coneInnerAngle(val) {
            this._coneInnerAngle = val;
            if (this.panner) this.panner.coneInnerAngle = val;
          },
          get coneOuterAngle() {
            return this._coneOuterAngle || 360.0;
          },
          set coneOuterAngle(val) {
            this._coneOuterAngle = val;
            if (this.panner) this.panner.coneOuterAngle = val;
          },
          gain: gain,
          panner: null,
          buffersPlayed: 0,
          bufferPosition: 0
        };
        HEAP32[(((sources)+(i*4))>>2)]=AL.newSrcId;
        AL.newSrcId++;
      }
    }

  var _logf=Math_log;

  function _glGenFramebuffers(n, ids) {
      for (var i = 0; i < n; ++i) {
        var framebuffer = GLctx.createFramebuffer();
        if (!framebuffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((ids)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.framebuffers);
        framebuffer.name = id;
        GL.framebuffers[id] = framebuffer;
        HEAP32[(((ids)+(i*4))>>2)]=id;
      }
    }

  var _llvm_pow_f64=Math_pow;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

  function _emscripten_exit_pointerlock() {
      // Make sure no queued up calls will fire after this.
      JSEvents.removeDeferredCalls(JSEvents.requestPointerLock);
  
      if (document.exitPointerLock) {
        document.exitPointerLock();
      } else if (document.msExitPointerLock) {
        document.msExitPointerLock();
      } else if (document.mozExitPointerLock) {
        document.mozExitPointerLock();
      } else if (document.webkitExitPointerLock) {
        document.webkitExitPointerLock();
      } else {
        return -1;
      }
      return 0;
    }

  var _tanf=Math_tan;

  function _localeconv() {
      // %struct.timeval = type { char* decimal point, other stuff... }
      // var indexes = Runtime.calculateStructAlignment({ fields: ['i32', 'i32'] });
      var me = _localeconv;
      if (!me.ret) {
      // These are defaults from the "C" locale
        me.ret = allocate([
          allocate(intArrayFromString('.'), 'i8', ALLOC_NORMAL),0,0,0, // decimal_point
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // thousands_sep
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // grouping
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // int_curr_symbol
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // currency_symbol
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // mon_decimal_point
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // mon_thousands_sep
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // mon_grouping
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // positive_sign
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0 // negative_sign
        ], 'i8*', ALLOC_NORMAL); // Allocate strings in lconv, still don't allocate chars
      }
      return me.ret;
    }

  function ___errno_location() {
      return ___errno_state;
    }

  var _BItoD=true;

  function _glGetIntegerv(name_, p) {
      return GL.get(name_, p, 'Integer');
    }

   
  Module["_llvm_bswap_i32"] = _llvm_bswap_i32;

  function _glTexParameteri(x0, x1, x2) { GLctx.texParameteri(x0, x1, x2) }

  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }


  function _emscripten_run_script(ptr) {
      eval(Pointer_stringify(ptr));
    }

  var _expf=Math_exp;

  function _rename(old_path, new_path) {
      // int rename(const char *old, const char *new);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/rename.html
      old_path = Pointer_stringify(old_path);
      new_path = Pointer_stringify(new_path);
      try {
        FS.rename(old_path, new_path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  function _glUniformMatrix2fv(location, count, transpose, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform matrix
        view = GL.miniTempBufferViews[3];
        for (var i = 0; i < 4; i++) {
          view[i] = HEAPF32[(((value)+(i*4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniformMatrix2fv(location, transpose, view);
    }

  function _glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }

  function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      if (pixels) {
        var data = GL.getTexPixelData(type, format, width, height, pixels, internalFormat);
        pixels = data.pixels;
        internalFormat = data.internalFormat;
      } else {
        pixels = null;
      }
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels);
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }


  function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      // Work around a bug in Chromium which causes getShaderInfoLog to return null
      if (!log) log = '(unknown error)';
      log = log.substr(0, maxLength - 1);
      if (maxLength > 0 && infoLog) {
        writeStringToMemory(log, infoLog);
        if (length) HEAP32[((length)>>2)]=log.length;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _fgets(s, n, stream) {
      // char *fgets(char *restrict s, int n, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgets.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return 0;
      if (streamObj.error || streamObj.eof) return 0;
      var byte_;
      for (var i = 0; i < n - 1 && byte_ != 10; i++) {
        byte_ = _fgetc(stream);
        if (byte_ == -1) {
          if (streamObj.error || (streamObj.eof && i == 0)) return 0;
          else if (streamObj.eof) break;
        }
        HEAP8[(((s)+(i))>>0)]=byte_;
      }
      HEAP8[(((s)+(i))>>0)]=0;
      return s;
    }

  function _abort() {
      Module['abort']();
    }

  function _glIsShader(shader) {
      var s = GL.shaders[shader];
      if (!s) return 0;
      return GLctx.isShader(s);
    }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }

  var _emscripten_prep_setjmp=true;

  function _alSourcePause(source) {
      if (!AL.currentContext) {
        return;
      }
      var src = AL.currentContext.src[source];
      if (!src) {
        AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
      AL.setSourceState(src, 0x1013 /* AL_PAUSED */);
    }

  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      stream = FS.getStreamFromPtr(stream);
      return Number(stream && stream.eof);
    }

  function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  function _glEnable(x0) { GLctx.enable(x0) }

  function _alBufferData(buffer, format, data, size, freq) {
      if (!AL.currentContext) {
        return;
      }
      if (buffer > AL.currentContext.buf.length) {
        return;
      }
      var channels, bytes;
      switch (format) {
      case 0x1100 /* AL_FORMAT_MONO8 */:
        bytes = 1;
        channels = 1;
        break;
      case 0x1101 /* AL_FORMAT_MONO16 */:
        bytes = 2;
        channels = 1;
        break;
      case 0x1102 /* AL_FORMAT_STEREO8 */:
        bytes = 1;
        channels = 2;
        break;
      case 0x1103 /* AL_FORMAT_STEREO16 */:
        bytes = 2;
        channels = 2;
        break;
      default:
        return;
      }
      try {
        AL.currentContext.buf[buffer - 1] = AL.currentContext.ctx.createBuffer(channels, size / (bytes * channels), freq);
        AL.currentContext.buf[buffer - 1].bytesPerSample =  bytes;
      } catch (e) {
        AL.currentContext.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
      var buf = new Array(channels);
      for (var i = 0; i < channels; ++i) {
        buf[i] = AL.currentContext.buf[buffer - 1].getChannelData(i);
      }
      for (var i = 0; i < size / (bytes * channels); ++i) {
        for (var j = 0; j < channels; ++j) {
          switch (bytes) {
          case 1:
            var val = HEAP8[(((data)+(i*channels+j))>>0)] & 0xff;  // unsigned
            buf[j][i] = -1.0 + val * (2/256);
            break;
          case 2:
            var val = HEAP16[(((data)+(2*(i*channels+j)))>>1)];
            buf[j][i] = val/32768;
            break;
          }
        }
      }
    }

  var _fabs=Math_abs;

  var _floor=Math_floor;

  function _alGenBuffers(count, buffers) {
      if (!AL.currentContext) {
        return;
      }
      for (var i = 0; i < count; ++i) {
        AL.currentContext.buf.push(null);
        HEAP32[(((buffers)+(i*4))>>2)]=AL.currentContext.buf.length;
      }
    }

  function _getc() {
  return _fgetc.apply(null, arguments)
  }

  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _glGenBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx.createBuffer();
        if (!buffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((buffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.buffers);
        buffer.name = id;
        GL.buffers[id] = buffer;
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }

  function _glHint(x0, x1) { GLctx.hint(x0, x1) }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  var _sin=Math_sin;

  function _glBlendFunc(x0, x1) { GLctx.blendFunc(x0, x1) }

  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  var _ceilf=Math_ceil;

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }


  function _glViewport(x0, x1, x2, x3) { GLctx.viewport(x0, x1, x2, x3) }


  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  function _clearerr(stream) {
      // void clearerr(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/clearerr.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return;
      }
      stream.eof = false;
      stream.error = false;
    }


  var _emscripten_setjmp=true;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _emscripten_set_click_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 4, "click");
      return 0;
    }

  function _difftime(time1, time0) {
      return time1 - time0;
    }

  function _glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
      }
    }

  function _emscripten_set_canvas_size(width, height) {
      Browser.setCanvasSize(width, height);
    }

  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }

  var _exp=Math_exp;

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _setvbuf(stream, buf, type, size) {
      // int setvbuf(FILE *restrict stream, char *restrict buf, int type, size_t size);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/setvbuf.html
      // TODO: Implement custom buffering.
      return 0;
    }

  function _alGetString(param) {
      if (AL.stringCache[param]) return AL.stringCache[param];
      var ret;
      switch (param) {
      case 0 /* AL_NO_ERROR */:
        ret = 'No Error';
        break;
      case 0xA001 /* AL_INVALID_NAME */:
        ret = 'Invalid Name';
        break;
      case 0xA002 /* AL_INVALID_ENUM */:
        ret = 'Invalid Enum';
        break;
      case 0xA003 /* AL_INVALID_VALUE */:
        ret = 'Invalid Value';
        break;
      case 0xA004 /* AL_INVALID_OPERATION */:
        ret = 'Invalid Operation';
        break;
      case 0xA005 /* AL_OUT_OF_MEMORY */:
        ret = 'Out of Memory';
        break;
      case 0xB001 /* AL_VENDOR */:
        ret = 'Emscripten';
        break;
      case 0xB002 /* AL_VERSION */:
        ret = '1.1';
        break;
      case 0xB003 /* AL_RENDERER */:
        ret = 'WebAudio';
        break;
      case 0xB004 /* AL_EXTENSIONS */:
        ret = '';
        break;
      default:
        AL.currentContext.err = 0xA002 /* AL_INVALID_ENUM */;
        return 0;
      }
  
      ret = allocate(intArrayFromString(ret), 'i8', ALLOC_NORMAL);
  
      AL.stringCache[param] = ret;
  
      return ret;
    }



FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
___buildEnvironment(ENV);
var GLctx; GL.init()
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_did(index,a1,a2) {
  try {
    return Module["dynCall_did"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    return Module["dynCall_iiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_diiiid(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_diiiid"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viid(index,a1,a2,a3) {
  try {
    Module["dynCall_viid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "invoke_vi": invoke_vi, "invoke_iiii": invoke_iiii, "invoke_viiiii": invoke_viiiii, "invoke_did": invoke_did, "invoke_iiiiiiiiii": invoke_iiiiiiiiii, "invoke_diiiid": invoke_diiiid, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_viid": invoke_viid, "invoke_iiiii": invoke_iiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_viiii": invoke_viiii, "_glUseProgram": _glUseProgram, "_fabs": _fabs, "_exp": _exp, "_glUniformMatrix2fv": _glUniformMatrix2fv, "_asinf": _asinf, "_sqrtf": _sqrtf, "_SDL_StartTextInput": _SDL_StartTextInput, "_mknod": _mknod, "_glLineWidth": _glLineWidth, "_SDL_RWFromFile": _SDL_RWFromFile, "_putenv": _putenv, "_alBufferData": _alBufferData, "___assert_fail": ___assert_fail, "_glDeleteProgram": _glDeleteProgram, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_glBlendEquation": _glBlendEquation, "_longjmp": _longjmp, "_glBindBuffer": _glBindBuffer, "_glGetShaderInfoLog": _glGetShaderInfoLog, "_clock_gettime": _clock_gettime, "_ftell": _ftell, "_SDL_GetError": _SDL_GetError, "_llvm_pow_f32": _llvm_pow_f32, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_sbrk": _sbrk, "_glBlendFunc": _glBlendFunc, "_glDisableVertexAttribArray": _glDisableVertexAttribArray, "_Mix_PlayChannel": _Mix_PlayChannel, "_TTF_RenderText_Solid": _TTF_RenderText_Solid, "_glIsShader": _glIsShader, "_sysconf": _sysconf, "_utime": _utime, "_close": _close, "_ferror": _ferror, "_clock": _clock, "_SDL_InitSubSystem": _SDL_InitSubSystem, "_Mix_PlayMusic": _Mix_PlayMusic, "_cos": _cos, "_llvm_stacksave": _llvm_stacksave, "_fread": _fread, "_SDL_GetWindowSize": _SDL_GetWindowSize, "_unlink": _unlink, "_write": _write, "__isLeapYear": __isLeapYear, "_fsync": _fsync, "_glGenBuffers": _glGenBuffers, "_glShaderSource": _glShaderSource, "_expf": _expf, "_gmtime_r": _gmtime_r, "_msync": _msync, "_emscripten_cancel_main_loop": _emscripten_cancel_main_loop, "_tmpnam": _tmpnam, "_Mix_HaltMusic": _Mix_HaltMusic, "_TTF_FontHeight": _TTF_FontHeight, "_alSourcePlay": _alSourcePlay, "_mkdir": _mkdir, "_tmpfile": _tmpfile, "_alSourcePause": _alSourcePause, "_alGetString": _alGetString, "_glGenerateMipmap": _glGenerateMipmap, "_emscripten_set_click_callback": _emscripten_set_click_callback, "_emscripten_run_script_string": _emscripten_run_script_string, "_emscripten_get_now_is_monotonic": _emscripten_get_now_is_monotonic, "_glHint": _glHint, "_send": _send, "_alcCreateContext": _alcCreateContext, "_setvbuf": _setvbuf, "_glGetProgramInfoLog": _glGetProgramInfoLog, "_setlocale": _setlocale, "_SDL_GetTicks": _SDL_GetTicks, "_emscripten_async_wget": _emscripten_async_wget, "_llvm_stackrestore": _llvm_stackrestore, "_glDeleteShader": _glDeleteShader, "_atan2f": _atan2f, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_Mix_LoadWAV_RW": _Mix_LoadWAV_RW, "_alGetSourcei": _alGetSourcei, "_alcMakeContextCurrent": _alcMakeContextCurrent, "_SDL_LockSurface": _SDL_LockSurface, "_strerror_r": _strerror_r, "_glViewport": _glViewport, "_alSourceQueueBuffers": _alSourceQueueBuffers, "___setErrNo": ___setErrNo, "_alSourcef": _alSourcef, "_glDeleteTextures": _glDeleteTextures, "_emscripten_set_canvas_size": _emscripten_set_canvas_size, "___resumeException": ___resumeException, "_SDL_PauseAudio": _SDL_PauseAudio, "_alSourcei": _alSourcei, "_mktime": _mktime, "_alGenBuffers": _alGenBuffers, "_gmtime": _gmtime, "_pthread_once": _pthread_once, "_localeconv": _localeconv, "_printf": _printf, "_glGenTextures": _glGenTextures, "_SDL_GL_SetSwapInterval": _SDL_GL_SetSwapInterval, "_glEnable": _glEnable, "_localtime": _localtime, "_logf": _logf, "_alGetError": _alGetError, "_emscripten_get_now": _emscripten_get_now, "_stat": _stat, "_glAttachShader": _glAttachShader, "_glCreateProgram": _glCreateProgram, "_TTF_SizeText": _TTF_SizeText, "_read": _read, "__addDays": __addDays, "_SDL_SetVideoMode": _SDL_SetVideoMode, "_fwrite": _fwrite, "_time": _time, "_glBindFramebuffer": _glBindFramebuffer, "_munmap": _munmap, "_mmap": _mmap, "_SDL_UpperBlitScaled": _SDL_UpperBlitScaled, "_glGetIntegerv": _glGetIntegerv, "_exit": _exit, "_emscripten_set_resize_callback": _emscripten_set_resize_callback, "_glFramebufferTexture2D": _glFramebufferTexture2D, "_freopen": _freopen, "_emscripten_run_script": _emscripten_run_script, "_llvm_pow_f64": _llvm_pow_f64, "_glDeleteFramebuffers": _glDeleteFramebuffers, "_IMG_Load": _IMG_Load, "_lseek": _lseek, "_glCheckFramebufferStatus": _glCheckFramebufferStatus, "_rename": _rename, "_vfprintf": _vfprintf, "_rmdir": _rmdir, "___cxa_allocate_exception": ___cxa_allocate_exception, "_glVertexAttribPointer": _glVertexAttribPointer, "_ceilf": _ceilf, "_sinf": _sinf, "_pwrite": _pwrite, "_acosf": _acosf, "_localtime_r": _localtime_r, "_tzset": _tzset, "_open": _open, "_fabsf": _fabsf, "_remove": _remove, "_SDL_Init": _SDL_Init, "_glUniform1f": _glUniform1f, "_alSourceStop": _alSourceStop, "___cxa_begin_catch": ___cxa_begin_catch, "_pthread_getspecific": _pthread_getspecific, "_glDrawArrays": _glDrawArrays, "_glReadPixels": _glReadPixels, "_glCreateShader": _glCreateShader, "_glGetError": _glGetError, "_fseek": _fseek, "_SDL_GetMouseState": _SDL_GetMouseState, "_getenv": _getenv, "_fclose": _fclose, "_floorf": _floorf, "_log": _log, "_recv": _recv, "_fgetc": _fgetc, "_glCompileShader": _glCompileShader, "_emscripten_exit_pointerlock": _emscripten_exit_pointerlock, "_glEnableVertexAttribArray": _glEnableVertexAttribArray, "_fputc": _fputc, "_abort": _abort, "_SDL_SetWindowTitle": _SDL_SetWindowTitle, "_glDeleteBuffers": _glDeleteBuffers, "_glBufferData": _glBufferData, "_emscripten_async_wget_data": _emscripten_async_wget_data, "_glTexImage2D": _glTexImage2D, "_fopen": _fopen, "_floor": _floor, "_strftime": _strftime, "_sin": _sin, "_cosf": _cosf, "_glGetProgramiv": _glGetProgramiv, "___buildEnvironment": ___buildEnvironment, "_emscripten_request_pointerlock": _emscripten_request_pointerlock, "___cxa_pure_virtual": ___cxa_pure_virtual, "_pthread_key_create": _pthread_key_create, "_tanf": _tanf, "_SDL_CloseAudio": _SDL_CloseAudio, "_ceil": _ceil, "_difftime": _difftime, "_ungetc": _ungetc, "_system": _system, "_glLinkProgram": _glLinkProgram, "_alSource3f": _alSource3f, "__formatString": __formatString, "_fprintf": _fprintf, "__reallyNegative": __reallyNegative, "_SDL_PollEvent": _SDL_PollEvent, "_glGetUniformLocation": _glGetUniformLocation, "_glTexParameteri": _glTexParameteri, "_glClear": _glClear, "_fileno": _fileno, "_SDL_GL_SwapWindow": _SDL_GL_SwapWindow, "_Mix_FreeChunk": _Mix_FreeChunk, "_glBindTexture": _glBindTexture, "__exit": __exit, "_IMG_Load_RW": _IMG_Load_RW, "_vprintf": _vprintf, "_glBindAttribLocation": _glBindAttribLocation, "__arraySum": __arraySum, "_glGenFramebuffers": _glGenFramebuffers, "_glGetShaderiv": _glGetShaderiv, "_alDeleteBuffers": _alDeleteBuffers, "_pread": _pread, "_mkport": _mkport, "_getc": _getc, "_feof": _feof, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fflush": _fflush, "_glUniform2f": _glUniform2f, "___errno_location": ___errno_location, "_alGenSources": _alGenSources, "_pthread_setspecific": _pthread_setspecific, "_clearerr": _clearerr, "_alcOpenDevice": _alcOpenDevice, "___cxa_throw": ___cxa_throw, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_strerror": _strerror, "_emscripten_longjmp": _emscripten_longjmp, "_fgets": _fgets, "_SDL_FreeRW": _SDL_FreeRW, "_SDL_UpperBlit": _SDL_UpperBlit, "_glClearColor": _glClearColor, "_SDL_RWFromConstMem": _SDL_RWFromConstMem, "_glTexSubImage2D": _glTexSubImage2D, "_alSourceUnqueueBuffers": _alSourceUnqueueBuffers, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "_stderr": _stderr, "_stdin": _stdin, "_stdout": _stdout };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var _stderr=env._stderr|0;
  var _stdin=env._stdin|0;
  var _stdout=env._stdout|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var invoke_vi=env.invoke_vi;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_did=env.invoke_did;
  var invoke_iiiiiiiiii=env.invoke_iiiiiiiiii;
  var invoke_diiiid=env.invoke_diiiid;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_viid=env.invoke_viid;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _glUseProgram=env._glUseProgram;
  var _fabs=env._fabs;
  var _exp=env._exp;
  var _glUniformMatrix2fv=env._glUniformMatrix2fv;
  var _asinf=env._asinf;
  var _sqrtf=env._sqrtf;
  var _SDL_StartTextInput=env._SDL_StartTextInput;
  var _mknod=env._mknod;
  var _glLineWidth=env._glLineWidth;
  var _SDL_RWFromFile=env._SDL_RWFromFile;
  var _putenv=env._putenv;
  var _alBufferData=env._alBufferData;
  var ___assert_fail=env.___assert_fail;
  var _glDeleteProgram=env._glDeleteProgram;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _glBlendEquation=env._glBlendEquation;
  var _longjmp=env._longjmp;
  var _glBindBuffer=env._glBindBuffer;
  var _glGetShaderInfoLog=env._glGetShaderInfoLog;
  var _clock_gettime=env._clock_gettime;
  var _ftell=env._ftell;
  var _SDL_GetError=env._SDL_GetError;
  var _llvm_pow_f32=env._llvm_pow_f32;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var _glBlendFunc=env._glBlendFunc;
  var _glDisableVertexAttribArray=env._glDisableVertexAttribArray;
  var _Mix_PlayChannel=env._Mix_PlayChannel;
  var _TTF_RenderText_Solid=env._TTF_RenderText_Solid;
  var _glIsShader=env._glIsShader;
  var _sysconf=env._sysconf;
  var _utime=env._utime;
  var _close=env._close;
  var _ferror=env._ferror;
  var _clock=env._clock;
  var _SDL_InitSubSystem=env._SDL_InitSubSystem;
  var _Mix_PlayMusic=env._Mix_PlayMusic;
  var _cos=env._cos;
  var _llvm_stacksave=env._llvm_stacksave;
  var _fread=env._fread;
  var _SDL_GetWindowSize=env._SDL_GetWindowSize;
  var _unlink=env._unlink;
  var _write=env._write;
  var __isLeapYear=env.__isLeapYear;
  var _fsync=env._fsync;
  var _glGenBuffers=env._glGenBuffers;
  var _glShaderSource=env._glShaderSource;
  var _expf=env._expf;
  var _gmtime_r=env._gmtime_r;
  var _msync=env._msync;
  var _emscripten_cancel_main_loop=env._emscripten_cancel_main_loop;
  var _tmpnam=env._tmpnam;
  var _Mix_HaltMusic=env._Mix_HaltMusic;
  var _TTF_FontHeight=env._TTF_FontHeight;
  var _alSourcePlay=env._alSourcePlay;
  var _mkdir=env._mkdir;
  var _tmpfile=env._tmpfile;
  var _alSourcePause=env._alSourcePause;
  var _alGetString=env._alGetString;
  var _glGenerateMipmap=env._glGenerateMipmap;
  var _emscripten_set_click_callback=env._emscripten_set_click_callback;
  var _emscripten_run_script_string=env._emscripten_run_script_string;
  var _emscripten_get_now_is_monotonic=env._emscripten_get_now_is_monotonic;
  var _glHint=env._glHint;
  var _send=env._send;
  var _alcCreateContext=env._alcCreateContext;
  var _setvbuf=env._setvbuf;
  var _glGetProgramInfoLog=env._glGetProgramInfoLog;
  var _setlocale=env._setlocale;
  var _SDL_GetTicks=env._SDL_GetTicks;
  var _emscripten_async_wget=env._emscripten_async_wget;
  var _llvm_stackrestore=env._llvm_stackrestore;
  var _glDeleteShader=env._glDeleteShader;
  var _atan2f=env._atan2f;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _Mix_LoadWAV_RW=env._Mix_LoadWAV_RW;
  var _alGetSourcei=env._alGetSourcei;
  var _alcMakeContextCurrent=env._alcMakeContextCurrent;
  var _SDL_LockSurface=env._SDL_LockSurface;
  var _strerror_r=env._strerror_r;
  var _glViewport=env._glViewport;
  var _alSourceQueueBuffers=env._alSourceQueueBuffers;
  var ___setErrNo=env.___setErrNo;
  var _alSourcef=env._alSourcef;
  var _glDeleteTextures=env._glDeleteTextures;
  var _emscripten_set_canvas_size=env._emscripten_set_canvas_size;
  var ___resumeException=env.___resumeException;
  var _SDL_PauseAudio=env._SDL_PauseAudio;
  var _alSourcei=env._alSourcei;
  var _mktime=env._mktime;
  var _alGenBuffers=env._alGenBuffers;
  var _gmtime=env._gmtime;
  var _pthread_once=env._pthread_once;
  var _localeconv=env._localeconv;
  var _printf=env._printf;
  var _glGenTextures=env._glGenTextures;
  var _SDL_GL_SetSwapInterval=env._SDL_GL_SetSwapInterval;
  var _glEnable=env._glEnable;
  var _localtime=env._localtime;
  var _logf=env._logf;
  var _alGetError=env._alGetError;
  var _emscripten_get_now=env._emscripten_get_now;
  var _stat=env._stat;
  var _glAttachShader=env._glAttachShader;
  var _glCreateProgram=env._glCreateProgram;
  var _TTF_SizeText=env._TTF_SizeText;
  var _read=env._read;
  var __addDays=env.__addDays;
  var _SDL_SetVideoMode=env._SDL_SetVideoMode;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _glBindFramebuffer=env._glBindFramebuffer;
  var _munmap=env._munmap;
  var _mmap=env._mmap;
  var _SDL_UpperBlitScaled=env._SDL_UpperBlitScaled;
  var _glGetIntegerv=env._glGetIntegerv;
  var _exit=env._exit;
  var _emscripten_set_resize_callback=env._emscripten_set_resize_callback;
  var _glFramebufferTexture2D=env._glFramebufferTexture2D;
  var _freopen=env._freopen;
  var _emscripten_run_script=env._emscripten_run_script;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _glDeleteFramebuffers=env._glDeleteFramebuffers;
  var _IMG_Load=env._IMG_Load;
  var _lseek=env._lseek;
  var _glCheckFramebufferStatus=env._glCheckFramebufferStatus;
  var _rename=env._rename;
  var _vfprintf=env._vfprintf;
  var _rmdir=env._rmdir;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var _glVertexAttribPointer=env._glVertexAttribPointer;
  var _ceilf=env._ceilf;
  var _sinf=env._sinf;
  var _pwrite=env._pwrite;
  var _acosf=env._acosf;
  var _localtime_r=env._localtime_r;
  var _tzset=env._tzset;
  var _open=env._open;
  var _fabsf=env._fabsf;
  var _remove=env._remove;
  var _SDL_Init=env._SDL_Init;
  var _glUniform1f=env._glUniform1f;
  var _alSourceStop=env._alSourceStop;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _pthread_getspecific=env._pthread_getspecific;
  var _glDrawArrays=env._glDrawArrays;
  var _glReadPixels=env._glReadPixels;
  var _glCreateShader=env._glCreateShader;
  var _glGetError=env._glGetError;
  var _fseek=env._fseek;
  var _SDL_GetMouseState=env._SDL_GetMouseState;
  var _getenv=env._getenv;
  var _fclose=env._fclose;
  var _floorf=env._floorf;
  var _log=env._log;
  var _recv=env._recv;
  var _fgetc=env._fgetc;
  var _glCompileShader=env._glCompileShader;
  var _emscripten_exit_pointerlock=env._emscripten_exit_pointerlock;
  var _glEnableVertexAttribArray=env._glEnableVertexAttribArray;
  var _fputc=env._fputc;
  var _abort=env._abort;
  var _SDL_SetWindowTitle=env._SDL_SetWindowTitle;
  var _glDeleteBuffers=env._glDeleteBuffers;
  var _glBufferData=env._glBufferData;
  var _emscripten_async_wget_data=env._emscripten_async_wget_data;
  var _glTexImage2D=env._glTexImage2D;
  var _fopen=env._fopen;
  var _floor=env._floor;
  var _strftime=env._strftime;
  var _sin=env._sin;
  var _cosf=env._cosf;
  var _glGetProgramiv=env._glGetProgramiv;
  var ___buildEnvironment=env.___buildEnvironment;
  var _emscripten_request_pointerlock=env._emscripten_request_pointerlock;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var _pthread_key_create=env._pthread_key_create;
  var _tanf=env._tanf;
  var _SDL_CloseAudio=env._SDL_CloseAudio;
  var _ceil=env._ceil;
  var _difftime=env._difftime;
  var _ungetc=env._ungetc;
  var _system=env._system;
  var _glLinkProgram=env._glLinkProgram;
  var _alSource3f=env._alSource3f;
  var __formatString=env.__formatString;
  var _fprintf=env._fprintf;
  var __reallyNegative=env.__reallyNegative;
  var _SDL_PollEvent=env._SDL_PollEvent;
  var _glGetUniformLocation=env._glGetUniformLocation;
  var _glTexParameteri=env._glTexParameteri;
  var _glClear=env._glClear;
  var _fileno=env._fileno;
  var _SDL_GL_SwapWindow=env._SDL_GL_SwapWindow;
  var _Mix_FreeChunk=env._Mix_FreeChunk;
  var _glBindTexture=env._glBindTexture;
  var __exit=env.__exit;
  var _IMG_Load_RW=env._IMG_Load_RW;
  var _vprintf=env._vprintf;
  var _glBindAttribLocation=env._glBindAttribLocation;
  var __arraySum=env.__arraySum;
  var _glGenFramebuffers=env._glGenFramebuffers;
  var _glGetShaderiv=env._glGetShaderiv;
  var _alDeleteBuffers=env._alDeleteBuffers;
  var _pread=env._pread;
  var _mkport=env._mkport;
  var _getc=env._getc;
  var _feof=env._feof;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fflush=env._fflush;
  var _glUniform2f=env._glUniform2f;
  var ___errno_location=env.___errno_location;
  var _alGenSources=env._alGenSources;
  var _pthread_setspecific=env._pthread_setspecific;
  var _clearerr=env._clearerr;
  var _alcOpenDevice=env._alcOpenDevice;
  var ___cxa_throw=env.___cxa_throw;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _strerror=env._strerror;
  var _emscripten_longjmp=env._emscripten_longjmp;
  var _fgets=env._fgets;
  var _SDL_FreeRW=env._SDL_FreeRW;
  var _SDL_UpperBlit=env._SDL_UpperBlit;
  var _glClearColor=env._glClearColor;
  var _SDL_RWFromConstMem=env._SDL_RWFromConstMem;
  var _glTexSubImage2D=env._glTexSubImage2D;
  var _alSourceUnqueueBuffers=env._alSourceUnqueueBuffers;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function _tinfl_decompress($r, $pIn_buf_next, $pIn_buf_size, $pOut_buf_start, $pOut_buf_next, $pOut_buf_size, $decomp_flags) {
 $r = $r | 0;
 $pIn_buf_next = $pIn_buf_next | 0;
 $pIn_buf_size = $pIn_buf_size | 0;
 $pOut_buf_start = $pOut_buf_start | 0;
 $pOut_buf_next = $pOut_buf_next | 0;
 $pOut_buf_size = $pOut_buf_size | 0;
 $decomp_flags = $decomp_flags | 0;
 var $$0 = 0, $$8 = 0, $$8$counter$29 = 0, $$lcssa118 = 0, $$lcssa53 = 0, $$lcssa66 = 0, $$pre$phi280Z2D = 0, $$pre$phi282Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $100 = 0, $1002 = 0, $1003 = 0, $1007 = 0, $101 = 0, $1014 = 0, $11 = 0, $115 = 0, $116 = 0, $119 = 0, $12 = 0, $136 = 0, $137 = 0, $16 = 0, $162 = 0, $17 = 0, $18 = 0, $187 = 0, $188 = 0, $19 = 0, $2 = 0, $20 = 0, $204 = 0, $207 = 0, $21 = 0, $215 = 0, $22 = 0, $229 = 0, $23 = 0, $230 = 0, $232 = 0, $235 = 0, $236 = 0, $24 = 0, $248 = 0, $25 = 0, $26 = 0, $263 = 0, $264 = 0, $27 = 0, $278 = 0, $279 = 0, $281 = 0, $282 = 0, $287 = 0, $292 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $302 = 0, $304 = 0, $307 = 0, $309 = 0, $312 = 0, $314 = 0, $317 = 0, $319 = 0, $322 = 0, $324 = 0, $327 = 0, $329 = 0, $332 = 0, $334 = 0, $337 = 0, $339 = 0, $342 = 0, $344 = 0, $347 = 0, $349 = 0, $352 = 0, $354 = 0, $357 = 0, $359 = 0, $362 = 0, $364 = 0, $367 = 0, $370 = 0, $374 = 0, $379 = 0, $380 = 0, $382 = 0, $383 = 0, $387 = 0, $394 = 0, $396 = 0, $401 = 0, $402 = 0, $407 = 0, $411 = 0, $413 = 0, $414 = 0, $415 = 0, $423 = 0, $425 = 0, $430 = 0, $436 = 0, $438 = 0, $439 = 0, $448 = 0, $449 = 0, $451 = 0, $460 = 0, $478 = 0, $479 = 0, $495 = 0, $496 = 0, $5 = 0, $501 = 0, $506 = 0, $507 = 0, $509 = 0, $510 = 0, $520 = 0, $53 = 0, $533 = 0, $534 = 0, $545 = 0, $551 = 0, $558 = 0, $560 = 0, $563 = 0, $569 = 0, $570 = 0, $572 = 0, $58 = 0, $581 = 0, $599 = 0, $600 = 0, $61 = 0, $616 = 0, $617 = 0, $622 = 0, $627 = 0, $628 = 0, $630 = 0, $631 = 0, $636 = 0, $638 = 0, $64 = 0, $654 = 0, $655 = 0, $659 = 0, $664 = 0, $665 = 0, $667 = 0, $668 = 0, $685 = 0, $686 = 0, $690 = 0, $695 = 0, $696 = 0, $698 = 0, $699 = 0, $706 = 0, $708 = 0, $710 = 0, $712 = 0, $714 = 0, $716 = 0, $72 = 0, $731 = 0, $732 = 0, $747 = 0, $748 = 0, $75 = 0, $750 = 0, $759 = 0, $777 = 0, $778 = 0, $794 = 0, $795 = 0, $800 = 0, $805 = 0, $806 = 0, $808 = 0, $809 = 0, $811 = 0, $813 = 0, $828 = 0, $829 = 0, $839 = 0, $842 = 0, $847 = 0, $863 = 0, $864 = 0, $865 = 0, $893 = 0, $894 = 0, $897 = 0, $914 = 0, $915 = 0, $93 = 0, $930 = 0, $94 = 0, $940 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $953 = 0, $958 = 0, $96 = 0, $963 = 0, $968 = 0, $973 = 0, $978 = 0, $98 = 0, $983 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $995 = 0, $bit_buf$0 = 0, $bit_buf$1 = 0, $bit_buf$10 = 0, $bit_buf$11 = 0, $bit_buf$12 = 0, $bit_buf$13 = 0, $bit_buf$14 = 0, $bit_buf$15 = 0, $bit_buf$16 = 0, $bit_buf$17 = 0, $bit_buf$18 = 0, $bit_buf$19 = 0, $bit_buf$2 = 0, $bit_buf$20 = 0, $bit_buf$21 = 0, $bit_buf$22 = 0, $bit_buf$23 = 0, $bit_buf$24 = 0, $bit_buf$25 = 0, $bit_buf$26 = 0, $bit_buf$27 = 0, $bit_buf$28 = 0, $bit_buf$29 = 0, $bit_buf$3 = 0, $bit_buf$30 = 0, $bit_buf$31 = 0, $bit_buf$32 = 0, $bit_buf$33 = 0, $bit_buf$34 = 0, $bit_buf$35 = 0, $bit_buf$36 = 0, $bit_buf$37 = 0, $bit_buf$38 = 0, $bit_buf$39 = 0, $bit_buf$4 = 0, $bit_buf$40 = 0, $bit_buf$41 = 0, $bit_buf$42 = 0, $bit_buf$43 = 0, $bit_buf$44 = 0, $bit_buf$45 = 0, $bit_buf$46 = 0, $bit_buf$47 = 0, $bit_buf$48 = 0, $bit_buf$49 = 0, $bit_buf$5 = 0, $bit_buf$50 = 0, $bit_buf$51 = 0, $bit_buf$52 = 0, $bit_buf$53 = 0, $bit_buf$54 = 0, $bit_buf$55 = 0, $bit_buf$57 = 0, $bit_buf$57$ph = 0, $bit_buf$58$lcssa = 0, $bit_buf$58$ph = 0, $bit_buf$58131 = 0, $bit_buf$59 = 0, $bit_buf$6 = 0, $bit_buf$60 = 0, $bit_buf$61 = 0, $bit_buf$62 = 0, $bit_buf$63 = 0, $bit_buf$64 = 0, $bit_buf$65 = 0, $bit_buf$66 = 0, $bit_buf$67 = 0, $bit_buf$68 = 0, $bit_buf$69 = 0, $bit_buf$7 = 0, $bit_buf$70 = 0, $bit_buf$71 = 0, $bit_buf$72 = 0, $bit_buf$73 = 0, $bit_buf$74 = 0, $bit_buf$75 = 0, $bit_buf$76 = 0, $bit_buf$77 = 0, $bit_buf$78 = 0, $bit_buf$79 = 0, $bit_buf$8 = 0, $bit_buf$80 = 0, $bit_buf$81 = 0, $bit_buf$82 = 0, $bit_buf$83 = 0, $bit_buf$84 = 0, $bit_buf$85 = 0, $bit_buf$86 = 0, $bit_buf$87 = 0, $bit_buf$88 = 0, $bit_buf$89 = 0, $bit_buf$9 = 0, $bit_buf$90 = 0, $bit_buf$91 = 0, $bit_buf$92 = 0, $bit_buf$93 = 0, $bit_buf$94 = 0, $bit_buf$95 = 0, $bit_buf$96 = 0, $bit_buf$97 = 0, $block_len$036 = 0, $buf_len$033 = 0, $c$0 = 0, $c1$0 = 0, $c12$0 = 0, $c14$0 = 0, $c17$0 = 0, $c19$0 = 0, $c2$0 = 0, $c20$0 = 0, $c22$0 = 0, $c3$0 = 0, $c4$0 = 0, $c5$0 = 0, $c8$0 = 0, $c9$0 = 0, $code_len$0 = 0, $code_len$1 = 0, $code_len$2 = 0, $code_len11$0 = 0, $code_len11$1 = 0, $code_len11$2 = 0, $code_len13$0 = 0, $code_len13$1 = 0, $code_len13$2 = 0, $code_len13$3 = 0, $code_len16$0 = 0, $code_len16$1 = 0, $code_len16$2 = 0, $counter$0 = 0, $counter$1 = 0, $counter$10 = 0, $counter$11 = 0, $counter$12 = 0, $counter$13 = 0, $counter$14 = 0, $counter$15 = 0, $counter$16 = 0, $counter$17 = 0, $counter$18 = 0, $counter$19 = 0, $counter$2 = 0, $counter$20 = 0, $counter$21 = 0, $counter$22 = 0, $counter$23 = 0, $counter$24 = 0, $counter$25 = 0, $counter$26 = 0, $counter$27 = 0, $counter$28 = 0, $counter$29 = 0, $counter$3 = 0, $counter$30 = 0, $counter$31 = 0, $counter$32 = 0, $counter$33 = 0, $counter$34 = 0, $counter$35 = 0, $counter$36 = 0, $counter$37 = 0, $counter$38 = 0, $counter$39 = 0, $counter$4 = 0, $counter$40 = 0, $counter$41 = 0, $counter$42 = 0, $counter$43 = 0, $counter$44 = 0, $counter$45 = 0, $counter$46 = 0, $counter$47 = 0, $counter$48 = 0, $counter$49 = 0, $counter$5 = 0, $counter$50 = 0, $counter$51 = 0, $counter$52 = 0, $counter$53 = 0, $counter$54 = 0, $counter$56 = 0, $counter$56$ph = 0, $counter$57$lcssa = 0, $counter$57$ph = 0, $counter$57132 = 0, $counter$58 = 0, $counter$59 = 0, $counter$6 = 0, $counter$60 = 0, $counter$61 = 0, $counter$62 = 0, $counter$63 = 0, $counter$64 = 0, $counter$65 = 0, $counter$66 = 0, $counter$67 = 0, $counter$68 = 0, $counter$69 = 0, $counter$7 = 0, $counter$70 = 0, $counter$71 = 0, $counter$72 = 0, $counter$73 = 0, $counter$74 = 0, $counter$75 = 0, $counter$76 = 0, $counter$77 = 0, $counter$78 = 0, $counter$79 = 0, $counter$8 = 0, $counter$80 = 0, $counter$81 = 0, $counter$82 = 0, $counter$83 = 0, $counter$84 = 0, $counter$85 = 0, $counter$86 = 0, $counter$87 = 0, $counter$88 = 0, $counter$89 = 0, $counter$9 = 0, $counter$90 = 0, $counter$91 = 0, $counter$92 = 0, $counter$93 = 0, $cur_code$048 = 0, $dist$0 = 0, $dist$1 = 0, $dist$10 = 0, $dist$11 = 0, $dist$12 = 0, $dist$13 = 0, $dist$14 = 0, $dist$15 = 0, $dist$16 = 0, $dist$17 = 0, $dist$18 = 0, $dist$19 = 0, $dist$2 = 0, $dist$20 = 0, $dist$21 = 0, $dist$22 = 0, $dist$23 = 0, $dist$24 = 0, $dist$25 = 0, $dist$26 = 0, $dist$27 = 0, $dist$28 = 0, $dist$29 = 0, $dist$3 = 0, $dist$30 = 0, $dist$31 = 0, $dist$32 = 0, $dist$33 = 0, $dist$34 = 0, $dist$35 = 0, $dist$36 = 0, $dist$37 = 0, $dist$38 = 0, $dist$39 = 0, $dist$4 = 0, $dist$40 = 0, $dist$41 = 0, $dist$42 = 0, $dist$43 = 0, $dist$44 = 0, $dist$45 = 0, $dist$46 = 0, $dist$47 = 0, $dist$48 = 0, $dist$49 = 0, $dist$5 = 0, $dist$50 = 0, $dist$51 = 0, $dist$52 = 0, $dist$53 = 0, $dist$55 = 0, $dist$55$ph = 0, $dist$56$ph = 0, $dist$57 = 0, $dist$58 = 0, $dist$59 = 0, $dist$6 = 0, $dist$60 = 0, $dist$61 = 0, $dist$62 = 0, $dist$63 = 0, $dist$64 = 0, $dist$65 = 0, $dist$66 = 0, $dist$67 = 0, $dist$68 = 0, $dist$69 = 0, $dist$7 = 0, $dist$70 = 0, $dist$71 = 0, $dist$72 = 0, $dist$73 = 0, $dist$74 = 0, $dist$75 = 0, $dist$76 = 0, $dist$77 = 0, $dist$78 = 0, $dist$79 = 0, $dist$8 = 0, $dist$80 = 0, $dist$81 = 0, $dist$82 = 0, $dist$83 = 0, $dist$84 = 0, $dist$85 = 0, $dist$86 = 0, $dist$87 = 0, $dist$88 = 0, $dist$89 = 0, $dist$9 = 0, $dist$90 = 0, $dist$91 = 0, $dist$92 = 0, $dist_from_out_buf_start$0 = 0, $dist_from_out_buf_start$1 = 0, $dist_from_out_buf_start$10 = 0, $dist_from_out_buf_start$11 = 0, $dist_from_out_buf_start$12 = 0, $dist_from_out_buf_start$13 = 0, $dist_from_out_buf_start$14 = 0, $dist_from_out_buf_start$15 = 0, $dist_from_out_buf_start$16 = 0, $dist_from_out_buf_start$17 = 0, $dist_from_out_buf_start$18 = 0, $dist_from_out_buf_start$19 = 0, $dist_from_out_buf_start$2 = 0, $dist_from_out_buf_start$20 = 0, $dist_from_out_buf_start$21 = 0, $dist_from_out_buf_start$22 = 0, $dist_from_out_buf_start$23 = 0, $dist_from_out_buf_start$24 = 0, $dist_from_out_buf_start$25 = 0, $dist_from_out_buf_start$26 = 0, $dist_from_out_buf_start$27 = 0, $dist_from_out_buf_start$28 = 0, $dist_from_out_buf_start$29 = 0, $dist_from_out_buf_start$3 = 0, $dist_from_out_buf_start$30 = 0, $dist_from_out_buf_start$31 = 0, $dist_from_out_buf_start$32 = 0, $dist_from_out_buf_start$33 = 0, $dist_from_out_buf_start$34 = 0, $dist_from_out_buf_start$35 = 0, $dist_from_out_buf_start$36 = 0, $dist_from_out_buf_start$37 = 0, $dist_from_out_buf_start$38 = 0, $dist_from_out_buf_start$39 = 0, $dist_from_out_buf_start$4 = 0, $dist_from_out_buf_start$40 = 0, $dist_from_out_buf_start$41 = 0, $dist_from_out_buf_start$42 = 0, $dist_from_out_buf_start$43 = 0, $dist_from_out_buf_start$44 = 0, $dist_from_out_buf_start$45 = 0, $dist_from_out_buf_start$46 = 0, $dist_from_out_buf_start$47 = 0, $dist_from_out_buf_start$48 = 0, $dist_from_out_buf_start$49 = 0, $dist_from_out_buf_start$5 = 0, $dist_from_out_buf_start$50 = 0, $dist_from_out_buf_start$52 = 0, $dist_from_out_buf_start$52$ph = 0, $dist_from_out_buf_start$53$ph = 0, $dist_from_out_buf_start$54 = 0, $dist_from_out_buf_start$55 = 0, $dist_from_out_buf_start$56 = 0, $dist_from_out_buf_start$57 = 0, $dist_from_out_buf_start$58 = 0, $dist_from_out_buf_start$59 = 0, $dist_from_out_buf_start$6 = 0, $dist_from_out_buf_start$60 = 0, $dist_from_out_buf_start$61 = 0, $dist_from_out_buf_start$62 = 0, $dist_from_out_buf_start$63 = 0, $dist_from_out_buf_start$64 = 0, $dist_from_out_buf_start$65 = 0, $dist_from_out_buf_start$66 = 0, $dist_from_out_buf_start$67 = 0, $dist_from_out_buf_start$68 = 0, $dist_from_out_buf_start$69 = 0, $dist_from_out_buf_start$7 = 0, $dist_from_out_buf_start$70 = 0, $dist_from_out_buf_start$71 = 0, $dist_from_out_buf_start$72 = 0, $dist_from_out_buf_start$73 = 0, $dist_from_out_buf_start$74 = 0, $dist_from_out_buf_start$75 = 0, $dist_from_out_buf_start$76 = 0, $dist_from_out_buf_start$77 = 0, $dist_from_out_buf_start$78 = 0, $dist_from_out_buf_start$79 = 0, $dist_from_out_buf_start$8 = 0, $dist_from_out_buf_start$80 = 0, $dist_from_out_buf_start$81 = 0, $dist_from_out_buf_start$82 = 0, $dist_from_out_buf_start$83 = 0, $dist_from_out_buf_start$84 = 0, $dist_from_out_buf_start$85 = 0, $dist_from_out_buf_start$86 = 0, $dist_from_out_buf_start$87 = 0, $dist_from_out_buf_start$88 = 0, $dist_from_out_buf_start$9 = 0, $i23$0$lcssa = 0, $i23$018 = 0, $i23$125 = 0, $i6$076 = 0, $j$055 = 0, $l$047 = 0, $next_code = 0, $num_bits$0 = 0, $num_bits$1 = 0, $num_bits$10 = 0, $num_bits$11 = 0, $num_bits$12 = 0, $num_bits$13 = 0, $num_bits$14 = 0, $num_bits$15 = 0, $num_bits$16 = 0, $num_bits$17 = 0, $num_bits$18 = 0, $num_bits$19 = 0, $num_bits$2 = 0, $num_bits$20 = 0, $num_bits$21 = 0, $num_bits$22 = 0, $num_bits$23 = 0, $num_bits$24 = 0, $num_bits$25 = 0, $num_bits$26 = 0, $num_bits$27 = 0, $num_bits$28 = 0, $num_bits$29 = 0, $num_bits$3 = 0, $num_bits$30 = 0, $num_bits$31 = 0, $num_bits$32 = 0, $num_bits$33 = 0, $num_bits$34 = 0, $num_bits$35 = 0, $num_bits$36 = 0, $num_bits$37 = 0, $num_bits$38 = 0, $num_bits$39 = 0, $num_bits$4 = 0, $num_bits$40 = 0, $num_bits$41 = 0, $num_bits$42 = 0, $num_bits$43 = 0, $num_bits$44 = 0, $num_bits$45 = 0, $num_bits$46 = 0, $num_bits$47 = 0, $num_bits$48 = 0, $num_bits$49 = 0, $num_bits$5 = 0, $num_bits$50 = 0, $num_bits$51 = 0, $num_bits$52 = 0, $num_bits$53 = 0, $num_bits$54 = 0, $num_bits$55 = 0, $num_bits$57 = 0, $num_bits$57$ph = 0, $num_bits$58$lcssa = 0, $num_bits$58$ph = 0, $num_bits$58133 = 0, $num_bits$59 = 0, $num_bits$6 = 0, $num_bits$60 = 0, $num_bits$61 = 0, $num_bits$62 = 0, $num_bits$63 = 0, $num_bits$64 = 0, $num_bits$65 = 0, $num_bits$66 = 0, $num_bits$67 = 0, $num_bits$68 = 0, $num_bits$69 = 0, $num_bits$7 = 0, $num_bits$70 = 0, $num_bits$71 = 0, $num_bits$72 = 0, $num_bits$73 = 0, $num_bits$74 = 0, $num_bits$75 = 0, $num_bits$76 = 0, $num_bits$77 = 0, $num_bits$78 = 0, $num_bits$79 = 0, $num_bits$8 = 0, $num_bits$80 = 0, $num_bits$81 = 0, $num_bits$82 = 0, $num_bits$83 = 0, $num_bits$84 = 0, $num_bits$85 = 0, $num_bits$86 = 0, $num_bits$87 = 0, $num_bits$88 = 0, $num_bits$89 = 0, $num_bits$9 = 0, $num_bits$90 = 0, $num_bits$91 = 0, $num_bits$92 = 0, $num_bits$93 = 0, $num_bits$94 = 0, $num_bits$95 = 0, $num_bits$96 = 0, $num_bits$97 = 0, $num_extra$0 = 0, $num_extra$1 = 0, $num_extra$10 = 0, $num_extra$11 = 0, $num_extra$12 = 0, $num_extra$13 = 0, $num_extra$14 = 0, $num_extra$15 = 0, $num_extra$16 = 0, $num_extra$17 = 0, $num_extra$18 = 0, $num_extra$19 = 0, $num_extra$2 = 0, $num_extra$20 = 0, $num_extra$21 = 0, $num_extra$22 = 0, $num_extra$23 = 0, $num_extra$24 = 0, $num_extra$25 = 0, $num_extra$26 = 0, $num_extra$27 = 0, $num_extra$28 = 0, $num_extra$29 = 0, $num_extra$3 = 0, $num_extra$30 = 0, $num_extra$31 = 0, $num_extra$32 = 0, $num_extra$33 = 0, $num_extra$34 = 0, $num_extra$35 = 0, $num_extra$36 = 0, $num_extra$37 = 0, $num_extra$38 = 0, $num_extra$39 = 0, $num_extra$4 = 0, $num_extra$40 = 0, $num_extra$41 = 0, $num_extra$42 = 0, $num_extra$43 = 0, $num_extra$44 = 0, $num_extra$45 = 0, $num_extra$46 = 0, $num_extra$47 = 0, $num_extra$48 = 0, $num_extra$49 = 0, $num_extra$5 = 0, $num_extra$50 = 0, $num_extra$51 = 0, $num_extra$52 = 0, $num_extra$53 = 0, $num_extra$54 = 0, $num_extra$55 = 0, $num_extra$57 = 0, $num_extra$57$ph = 0, $num_extra$58$ph = 0, $num_extra$59 = 0, $num_extra$6 = 0, $num_extra$60 = 0, $num_extra$61 = 0, $num_extra$62 = 0, $num_extra$63 = 0, $num_extra$64 = 0, $num_extra$65 = 0, $num_extra$66 = 0, $num_extra$67 = 0, $num_extra$68 = 0, $num_extra$69 = 0, $num_extra$7 = 0, $num_extra$70 = 0, $num_extra$71 = 0, $num_extra$72 = 0, $num_extra$73 = 0, $num_extra$74 = 0, $num_extra$75 = 0, $num_extra$76 = 0, $num_extra$77 = 0, $num_extra$78 = 0, $num_extra$79 = 0, $num_extra$8 = 0, $num_extra$80 = 0, $num_extra$81 = 0, $num_extra$82 = 0, $num_extra$83 = 0, $num_extra$84 = 0, $num_extra$85 = 0, $num_extra$86 = 0, $num_extra$87 = 0, $num_extra$88 = 0, $num_extra$89 = 0, $num_extra$9 = 0, $num_extra$90 = 0, $num_extra$91 = 0, $num_extra$92 = 0, $num_extra$93 = 0, $num_extra$94 = 0, $pIn_buf_cur$0 = 0, $pIn_buf_cur$1 = 0, $pIn_buf_cur$10 = 0, $pIn_buf_cur$11 = 0, $pIn_buf_cur$12 = 0, $pIn_buf_cur$13 = 0, $pIn_buf_cur$14 = 0, $pIn_buf_cur$15 = 0, $pIn_buf_cur$16 = 0, $pIn_buf_cur$17 = 0, $pIn_buf_cur$18 = 0, $pIn_buf_cur$19 = 0, $pIn_buf_cur$2 = 0, $pIn_buf_cur$20 = 0, $pIn_buf_cur$21 = 0, $pIn_buf_cur$22 = 0, $pIn_buf_cur$23 = 0, $pIn_buf_cur$24 = 0, $pIn_buf_cur$25 = 0, $pIn_buf_cur$26 = 0, $pIn_buf_cur$27 = 0, $pIn_buf_cur$28 = 0, $pIn_buf_cur$29 = 0, $pIn_buf_cur$3 = 0, $pIn_buf_cur$30 = 0, $pIn_buf_cur$31 = 0, $pIn_buf_cur$32 = 0, $pIn_buf_cur$33 = 0, $pIn_buf_cur$34 = 0, $pIn_buf_cur$35 = 0, $pIn_buf_cur$36 = 0, $pIn_buf_cur$37 = 0, $pIn_buf_cur$38 = 0, $pIn_buf_cur$39 = 0, $pIn_buf_cur$4 = 0, $pIn_buf_cur$40 = 0, $pIn_buf_cur$41 = 0, $pIn_buf_cur$42 = 0, $pIn_buf_cur$43 = 0, $pIn_buf_cur$44 = 0, $pIn_buf_cur$45 = 0, $pIn_buf_cur$46 = 0, $pIn_buf_cur$47 = 0, $pIn_buf_cur$48 = 0, $pIn_buf_cur$49 = 0, $pIn_buf_cur$5 = 0, $pIn_buf_cur$50 = 0, $pIn_buf_cur$51 = 0, $pIn_buf_cur$52 = 0, $pIn_buf_cur$53 = 0, $pIn_buf_cur$54 = 0, $pIn_buf_cur$56 = 0, $pIn_buf_cur$56$ph = 0, $pIn_buf_cur$57$lcssa = 0, $pIn_buf_cur$57$ph = 0, $pIn_buf_cur$57130 = 0, $pIn_buf_cur$58 = 0, $pIn_buf_cur$59 = 0, $pIn_buf_cur$6 = 0, $pIn_buf_cur$60 = 0, $pIn_buf_cur$61 = 0, $pIn_buf_cur$62 = 0, $pIn_buf_cur$63 = 0, $pIn_buf_cur$64 = 0, $pIn_buf_cur$65 = 0, $pIn_buf_cur$66 = 0, $pIn_buf_cur$67 = 0, $pIn_buf_cur$68 = 0, $pIn_buf_cur$69 = 0, $pIn_buf_cur$7 = 0, $pIn_buf_cur$70 = 0, $pIn_buf_cur$71 = 0, $pIn_buf_cur$72 = 0, $pIn_buf_cur$73 = 0, $pIn_buf_cur$74 = 0, $pIn_buf_cur$75 = 0, $pIn_buf_cur$76 = 0, $pIn_buf_cur$77 = 0, $pIn_buf_cur$78 = 0, $pIn_buf_cur$79 = 0, $pIn_buf_cur$8 = 0, $pIn_buf_cur$80 = 0, $pIn_buf_cur$81 = 0, $pIn_buf_cur$82 = 0, $pIn_buf_cur$83 = 0, $pIn_buf_cur$84 = 0, $pIn_buf_cur$85 = 0, $pIn_buf_cur$86 = 0, $pIn_buf_cur$87 = 0, $pIn_buf_cur$88 = 0, $pIn_buf_cur$89 = 0, $pIn_buf_cur$9 = 0, $pIn_buf_cur$90 = 0, $pIn_buf_cur$91 = 0, $pIn_buf_cur$92 = 0, $pIn_buf_cur$93 = 0, $pIn_buf_cur$94 = 0, $pIn_buf_cur$95 = 0, $pIn_buf_cur$96 = 0, $pOut_buf_cur$0 = 0, $pOut_buf_cur$1 = 0, $pOut_buf_cur$10 = 0, $pOut_buf_cur$11 = 0, $pOut_buf_cur$12 = 0, $pOut_buf_cur$13 = 0, $pOut_buf_cur$14 = 0, $pOut_buf_cur$15 = 0, $pOut_buf_cur$16 = 0, $pOut_buf_cur$17 = 0, $pOut_buf_cur$18 = 0, $pOut_buf_cur$19 = 0, $pOut_buf_cur$2 = 0, $pOut_buf_cur$20 = 0, $pOut_buf_cur$21 = 0, $pOut_buf_cur$22 = 0, $pOut_buf_cur$23 = 0, $pOut_buf_cur$24 = 0, $pOut_buf_cur$25 = 0, $pOut_buf_cur$26 = 0, $pOut_buf_cur$27 = 0, $pOut_buf_cur$28 = 0, $pOut_buf_cur$29 = 0, $pOut_buf_cur$3 = 0, $pOut_buf_cur$30 = 0, $pOut_buf_cur$31 = 0, $pOut_buf_cur$32 = 0, $pOut_buf_cur$33 = 0, $pOut_buf_cur$34 = 0, $pOut_buf_cur$35 = 0, $pOut_buf_cur$36 = 0, $pOut_buf_cur$37 = 0, $pOut_buf_cur$38 = 0, $pOut_buf_cur$39 = 0, $pOut_buf_cur$4 = 0, $pOut_buf_cur$40 = 0, $pOut_buf_cur$41 = 0, $pOut_buf_cur$42 = 0, $pOut_buf_cur$43 = 0, $pOut_buf_cur$44 = 0, $pOut_buf_cur$45 = 0, $pOut_buf_cur$46 = 0, $pOut_buf_cur$47 = 0, $pOut_buf_cur$48 = 0, $pOut_buf_cur$49 = 0, $pOut_buf_cur$5 = 0, $pOut_buf_cur$50 = 0, $pOut_buf_cur$52 = 0, $pOut_buf_cur$52$ph = 0, $pOut_buf_cur$53$lcssa = 0, $pOut_buf_cur$53$ph = 0, $pOut_buf_cur$53129 = 0, $pOut_buf_cur$54 = 0, $pOut_buf_cur$55 = 0, $pOut_buf_cur$56 = 0, $pOut_buf_cur$57 = 0, $pOut_buf_cur$58 = 0, $pOut_buf_cur$59 = 0, $pOut_buf_cur$6 = 0, $pOut_buf_cur$60 = 0, $pOut_buf_cur$61 = 0, $pOut_buf_cur$62 = 0, $pOut_buf_cur$63 = 0, $pOut_buf_cur$64 = 0, $pOut_buf_cur$65 = 0, $pOut_buf_cur$66 = 0, $pOut_buf_cur$67 = 0, $pOut_buf_cur$68 = 0, $pOut_buf_cur$69 = 0, $pOut_buf_cur$7 = 0, $pOut_buf_cur$70 = 0, $pOut_buf_cur$71 = 0, $pOut_buf_cur$72 = 0, $pOut_buf_cur$73 = 0, $pOut_buf_cur$74 = 0, $pOut_buf_cur$75 = 0, $pOut_buf_cur$76 = 0, $pOut_buf_cur$77 = 0, $pOut_buf_cur$78 = 0, $pOut_buf_cur$79 = 0, $pOut_buf_cur$8 = 0, $pOut_buf_cur$80 = 0, $pOut_buf_cur$81 = 0, $pOut_buf_cur$82 = 0, $pOut_buf_cur$83 = 0, $pOut_buf_cur$84 = 0, $pOut_buf_cur$85 = 0, $pOut_buf_cur$86 = 0, $pOut_buf_cur$87 = 0, $pOut_buf_cur$88 = 0, $pOut_buf_cur$89 = 0, $pOut_buf_cur$9 = 0, $pOut_buf_cur$90 = 0, $pOut_buf_cur$91 = 0, $pSrc$0 = 0, $ptr$032 = 0, $ptr$1$lcssa = 0, $ptr$117 = 0, $ptr$2$lcssa = 0, $ptr$224 = 0, $rev_code$046 = 0, $rev_code$162 = 0, $s1$0$lcssa = 0, $s1$034 = 0, $s1$1$lcssa = 0, $s1$119 = 0, $s1$2$lcssa = 0, $s1$226 = 0, $s2$0$lcssa = 0, $s2$035 = 0, $s2$1$lcssa = 0, $s2$120 = 0, $s2$2$lcssa = 0, $s2$227 = 0, $s21$0 = 0, $status$46$ph = 0, $status$71 = 0, $sym2$0 = 0, $sym2$1 = 0, $sym2$2 = 0, $sym2$3 = 0, $sym_index$068 = 0, $temp$0 = 0, $temp$1 = 0, $temp$2 = 0, $temp10$0 = 0, $temp10$1 = 0, $temp10$2 = 0, $temp15$0 = 0, $temp15$1 = 0, $temp15$2 = 0, $total_syms = 0, $tree_cur$0 = 0, $tree_cur$2 = 0, $tree_next$067 = 0, $tree_next$1 = 0, $tree_next$2$lcssa = 0, $tree_next$254 = 0, $tree_next$3 = 0, $tree_next$4 = 0, dest = 0, label = 0, sp = 0, stop = 0, $buf_len$033$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $next_code = sp + 64 | 0;
 $total_syms = sp;
 $0 = HEAP32[$pIn_buf_size >> 2] | 0;
 $1 = $pIn_buf_next + $0 | 0;
 $2 = HEAP32[$pOut_buf_size >> 2] | 0;
 $3 = $pOut_buf_next + $2 | 0;
 $5 = ($decomp_flags & 4 | 0) != 0;
 if ($5) $12 = -1; else $12 = $pOut_buf_next + ~$pOut_buf_start + $2 | 0;
 $11 = $12 + 1 | 0;
 if (($11 & $12 | 0) != 0 | $pOut_buf_next >>> 0 < $pOut_buf_start >>> 0) {
  HEAP32[$pOut_buf_size >> 2] = 0;
  HEAP32[$pIn_buf_size >> 2] = 0;
  $$0 = -3;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $16 = $r + 4 | 0;
 $17 = HEAP32[$16 >> 2] | 0;
 $18 = $r + 56 | 0;
 $19 = HEAP32[$18 >> 2] | 0;
 $20 = $r + 32 | 0;
 $21 = HEAP32[$20 >> 2] | 0;
 $22 = $r + 36 | 0;
 $23 = HEAP32[$22 >> 2] | 0;
 $24 = $r + 40 | 0;
 $25 = HEAP32[$24 >> 2] | 0;
 $26 = $r + 60 | 0;
 $27 = HEAP32[$26 >> 2] | 0;
 do switch (HEAP32[$r >> 2] | 0) {
 case 1:
  {
   if (($0 | 0) > 0) {
    HEAP32[$r + 8 >> 2] = HEAPU8[$pIn_buf_next >> 0];
    $bit_buf$1 = $19;
    $counter$1 = $23;
    $dist$1 = $21;
    $num_bits$1 = $17;
    $num_extra$1 = $25;
    $pIn_buf_cur$0 = $pIn_buf_next + 1 | 0;
    label = 14;
   } else {
    $bit_buf$0 = $19;
    $counter$0 = $23;
    $dist$0 = $21;
    $num_bits$0 = $17;
    $num_extra$0 = $25;
    label = 8;
   }
   break;
  }
 case 36:
  {
   $bit_buf$4 = $19;
   $counter$4 = $23;
   $dist$4 = $21;
   $num_bits$4 = $17;
   $num_extra$4 = $25;
   $pIn_buf_cur$3 = $pIn_buf_next;
   label = 26;
   break;
  }
 case 18:
  {
   if (($0 | 0) > 0) {
    $bit_buf$53 = $19;
    $c9$0 = HEAPU8[$pIn_buf_next >> 0] | 0;
    $counter$52 = $23;
    $dist$51 = $21;
    $dist_from_out_buf_start$48 = $27;
    $num_bits$53 = $17;
    $num_extra$53 = $25;
    $pIn_buf_cur$52 = $pIn_buf_next + 1 | 0;
    $pOut_buf_cur$48 = $pOut_buf_next;
    label = 166;
   } else {
    $bit_buf$52 = $19;
    $counter$51 = $23;
    $dist$50 = $21;
    $dist_from_out_buf_start$47 = $27;
    $num_bits$52 = $17;
    $num_extra$52 = $25;
    $pIn_buf_cur$51 = $pIn_buf_next;
    $pOut_buf_cur$47 = $pOut_buf_next;
    label = 161;
   }
   break;
  }
 case 14:
  {
   if (($0 | 0) > 0) {
    $bit_buf$41 = $19;
    $c5$0 = HEAPU8[$pIn_buf_next >> 0] | 0;
    $counter$40 = $23;
    $dist$40 = $21;
    $dist_from_out_buf_start$36 = $27;
    $num_bits$41 = $17;
    $num_extra$41 = $25;
    $pIn_buf_cur$40 = $pIn_buf_next + 1 | 0;
    $pOut_buf_cur$36 = $pOut_buf_next;
    label = 107;
   } else {
    $bit_buf$40 = $19;
    $counter$39 = $23;
    $dist$39 = $21;
    $dist_from_out_buf_start$35 = $27;
    $num_bits$40 = $17;
    $num_extra$40 = $25;
    $pIn_buf_cur$39 = $pIn_buf_next;
    $pOut_buf_cur$35 = $pOut_buf_next;
    label = 102;
   }
   break;
  }
 case 17:
  {
   $bit_buf$50 = $19;
   $counter$49 = $23;
   $dist$48 = $21;
   $dist_from_out_buf_start$45 = $27;
   $num_bits$50 = $17;
   $num_extra$50 = $25;
   $pIn_buf_cur$49 = $pIn_buf_next;
   $pOut_buf_cur$45 = $pOut_buf_next;
   label = 158;
   break;
  }
 case 37:
  {
   $bit_buf$81 = $19;
   $counter$77 = $23;
   $dist$76 = $21;
   $dist_from_out_buf_start$72 = $27;
   $num_bits$81 = $17;
   $num_extra$78 = $25;
   $pIn_buf_cur$80 = $pIn_buf_next;
   $pOut_buf_cur$74 = $pOut_buf_next;
   label = 256;
   break;
  }
 case 3:
  {
   if (($0 | 0) > 0) {
    $bit_buf$8 = $19;
    $c$0 = HEAPU8[$pIn_buf_next >> 0] | 0;
    $counter$8 = $23;
    $dist$8 = $21;
    $dist_from_out_buf_start$3 = $27;
    $num_bits$8 = $17;
    $num_extra$8 = $25;
    $pIn_buf_cur$7 = $pIn_buf_next + 1 | 0;
    $pOut_buf_cur$3 = $pOut_buf_next;
    label = 34;
   } else {
    $bit_buf$7 = $19;
    $counter$7 = $23;
    $dist$7 = $21;
    $dist_from_out_buf_start$2 = $27;
    $num_bits$7 = $17;
    $num_extra$7 = $25;
    $pIn_buf_cur$6 = $pIn_buf_next;
    $pOut_buf_cur$2 = $pOut_buf_next;
    label = 29;
   }
   break;
  }
 case 39:
  {
   $bit_buf$21 = $19;
   $counter$20 = $23;
   $dist$21 = $21;
   $dist_from_out_buf_start$16 = $27;
   $num_bits$21 = $17;
   $num_extra$21 = $25;
   $pIn_buf_cur$20 = $pIn_buf_next;
   $pOut_buf_cur$16 = $pOut_buf_next;
   label = 65;
   break;
  }
 case 24:
  {
   $bit_buf$63 = $19;
   $counter$61 = $23;
   $dist$61 = $21;
   $dist_from_out_buf_start$58 = $27;
   $num_bits$63 = $17;
   $num_extra$63 = $25;
   $pIn_buf_cur$62 = $pIn_buf_next;
   $pOut_buf_cur$58 = $pOut_buf_next;
   label = 196;
   break;
  }
 case 0:
  {
   HEAP32[$r + 12 >> 2] = 0;
   $30 = $r + 8 | 0;
   HEAP32[$30 >> 2] = 0;
   HEAP32[$r + 28 >> 2] = 1;
   HEAP32[$r + 16 >> 2] = 1;
   if (!($decomp_flags & 1)) {
    $bit_buf$5 = 0;
    $counter$5 = 0;
    $dist$5 = 0;
    $dist_from_out_buf_start$0 = $27;
    $num_bits$5 = 0;
    $num_extra$5 = 0;
    $pIn_buf_cur$4 = $pIn_buf_next;
    $pOut_buf_cur$0 = $pOut_buf_next;
    label = 27;
   } else if (($0 | 0) < 1) {
    $bit_buf$0 = 0;
    $counter$0 = 0;
    $dist$0 = 0;
    $num_bits$0 = 0;
    $num_extra$0 = 0;
    label = 8;
   } else {
    HEAP32[$30 >> 2] = HEAPU8[$pIn_buf_next >> 0];
    $bit_buf$1 = 0;
    $counter$1 = 0;
    $dist$1 = 0;
    $num_bits$1 = 0;
    $num_extra$1 = 0;
    $pIn_buf_cur$0 = $pIn_buf_next + 1 | 0;
    label = 14;
   }
   break;
  }
 case 34:
  {
   $bit_buf$96 = $19;
   $counter$92 = $23;
   $dist$91 = $21;
   $dist_from_out_buf_start$87 = $27;
   $num_bits$96 = $17;
   $num_extra$93 = $25;
   $pIn_buf_cur$95 = $pIn_buf_next;
   $pOut_buf_cur$90 = $pOut_buf_next;
   label = 296;
   break;
  }
 case 32:
  {
   if (($0 | 0) > 0) {
    $bit_buf$87 = $19;
    $c20$0 = HEAPU8[$pIn_buf_next >> 0] | 0;
    $counter$84 = $23;
    $dist$82 = $21;
    $dist_from_out_buf_start$78 = $27;
    $num_bits$87 = $17;
    $num_extra$84 = $25;
    $pIn_buf_cur$86 = $pIn_buf_next + 1 | 0;
    $pOut_buf_cur$81 = $pOut_buf_next;
    label = 276;
   } else {
    $bit_buf$86 = $19;
    $counter$83 = $23;
    $dist$81 = $21;
    $dist_from_out_buf_start$77 = $27;
    $num_bits$86 = $17;
    $num_extra$83 = $25;
    $pIn_buf_cur$85 = $pIn_buf_next;
    $pOut_buf_cur$80 = $pOut_buf_next;
    label = 271;
   }
   break;
  }
 case 23:
  {
   if (($0 | 0) > 0) {
    $bit_buf$61 = $19;
    $c12$0 = HEAPU8[$pIn_buf_next >> 0] | 0;
    $counter$60 = $23;
    $dist$59 = $21;
    $dist_from_out_buf_start$56 = $27;
    $num_bits$61 = $17;
    $num_extra$61 = $25;
    $pIn_buf_cur$60 = $pIn_buf_next + 1 | 0;
    $pOut_buf_cur$56 = $pOut_buf_next;
    label = 190;
   } else {
    $bit_buf$60 = $19;
    $counter$59 = $23;
    $dist$58 = $21;
    $dist_from_out_buf_start$55 = $27;
    $num_bits$60 = $17;
    $num_extra$60 = $25;
    $pIn_buf_cur$59 = $pIn_buf_next;
    $pOut_buf_cur$55 = $pOut_buf_next;
    label = 185;
   }
   break;
  }
 case 21:
  {
   $bit_buf$55 = $19;
   $counter$54 = $23;
   $dist$53 = $21;
   $dist_from_out_buf_start$50 = $27;
   $num_bits$55 = $17;
   $num_extra$55 = $25;
   $pIn_buf_cur$54 = $pIn_buf_next;
   $pOut_buf_cur$50 = $pOut_buf_next;
   label = 171;
   break;
  }
 case 42:
  {
   if (($0 | 0) > 0) {
    $bit_buf$95 = $19;
    $counter$91 = $23;
    $dist$90 = $21;
    $dist_from_out_buf_start$86 = $27;
    $num_bits$95 = $17;
    $num_extra$92 = $25;
    $pIn_buf_cur$94 = $pIn_buf_next + 1 | 0;
    $pOut_buf_cur$89 = $pOut_buf_next;
    $s21$0 = HEAPU8[$pIn_buf_next >> 0] | 0;
    label = 295;
   } else {
    $bit_buf$94 = $19;
    $counter$90 = $23;
    $dist$89 = $21;
    $dist_from_out_buf_start$85 = $27;
    $num_bits$94 = $17;
    $num_extra$91 = $25;
    $pIn_buf_cur$93 = $pIn_buf_next;
    $pOut_buf_cur$88 = $pOut_buf_next;
    label = 290;
   }
   break;
  }
 case 51:
  {
   if (($0 | 0) > 0) {
    $bit_buf$25 = $19;
    $c3$0 = HEAPU8[$pIn_buf_next >> 0] | 0;
    $counter$24 = $23;
    $dist$25 = $21;
    $dist_from_out_buf_start$20 = $27;
    $num_bits$25 = $17;
    $num_extra$25 = $25;
    $pIn_buf_cur$24 = $pIn_buf_next + 1 | 0;
    $pOut_buf_cur$20 = $pOut_buf_next;
    label = 74;
   } else {
    $bit_buf$24 = $19;
    $counter$23 = $23;
    $dist$24 = $21;
    $dist_from_out_buf_start$19 = $27;
    $num_bits$24 = $17;
    $num_extra$24 = $25;
    $pIn_buf_cur$23 = $pIn_buf_next;
    $pOut_buf_cur$19 = $pOut_buf_next;
    label = 69;
   }
   break;
  }
 case 10:
  {
   $bit_buf$32 = $19;
   $counter$31 = $23;
   $dist$31 = $21;
   $dist_from_out_buf_start$27 = $27;
   $num_bits$32 = $17;
   $num_extra$32 = $25;
   $pIn_buf_cur$31 = $pIn_buf_next;
   $pOut_buf_cur$27 = $pOut_buf_next;
   label = 87;
   break;
  }
 case 9:
  {
   $bit_buf$29 = $19;
   $counter$28 = $23;
   $dist$28 = $21;
   $dist_from_out_buf_start$24 = $27;
   $num_bits$29 = $17;
   $num_extra$29 = $25;
   $pIn_buf_cur$28 = $pIn_buf_next;
   $pOut_buf_cur$24 = $pOut_buf_next;
   label = 80;
   break;
  }
 case 11:
  {
   if (($0 | 0) > 0) {
    $bit_buf$36 = $19;
    $c4$0 = HEAPU8[$pIn_buf_next >> 0] | 0;
    $counter$35 = $23;
    $dist$35 = $21;
    $dist_from_out_buf_start$31 = $27;
    $num_bits$36 = $17;
    $num_extra$36 = $25;
    $pIn_buf_cur$35 = $pIn_buf_next + 1 | 0;
    $pOut_buf_cur$31 = $pOut_buf_next;
    label = 96;
   } else {
    $bit_buf$35 = $19;
    $counter$34 = $23;
    $dist$34 = $21;
    $dist_from_out_buf_start$30 = $27;
    $num_bits$35 = $17;
    $num_extra$35 = $25;
    $pIn_buf_cur$34 = $pIn_buf_next;
    $pOut_buf_cur$30 = $pOut_buf_next;
    label = 91;
   }
   break;
  }
 case 16:
  {
   if (($0 | 0) > 0) {
    $bit_buf$48 = $19;
    $c8$0 = HEAPU8[$pIn_buf_next >> 0] | 0;
    $counter$47 = $23;
    $dist$47 = $21;
    $dist_from_out_buf_start$43 = $27;
    $num_bits$48 = $17;
    $num_extra$48 = $25;
    $pIn_buf_cur$47 = $pIn_buf_next + 1 | 0;
    $pOut_buf_cur$43 = $pOut_buf_next;
    label = 150;
   } else {
    $bit_buf$47 = $19;
    $counter$46 = $23;
    $dist$46 = $21;
    $dist_from_out_buf_start$42 = $27;
    $num_bits$47 = $17;
    $num_extra$47 = $25;
    $pIn_buf_cur$46 = $pIn_buf_next;
    $pOut_buf_cur$42 = $pOut_buf_next;
    label = 145;
   }
   break;
  }
 case 7:
  {
   if (($0 | 0) > 0) {
    HEAP8[$r + $23 + 10528 >> 0] = HEAP8[$pIn_buf_next >> 0] | 0;
    $bit_buf$20 = $19;
    $counter$19 = $23;
    $dist$20 = $21;
    $dist_from_out_buf_start$15 = $27;
    $num_bits$20 = $17;
    $num_extra$20 = $25;
    $pIn_buf_cur$19 = $pIn_buf_next + 1 | 0;
    $pOut_buf_cur$15 = $pOut_buf_next;
    label = 63;
   } else {
    $bit_buf$19 = $19;
    $counter$18 = $23;
    $dist$19 = $21;
    $dist_from_out_buf_start$14 = $27;
    $num_bits$19 = $17;
    $num_extra$19 = $25;
    $pIn_buf_cur$18 = $pIn_buf_next;
    $pOut_buf_cur$14 = $pOut_buf_next;
    label = 57;
   }
   break;
  }
 case 26:
  {
   if (($0 | 0) > 0) {
    $bit_buf$74 = $19;
    $c17$0 = HEAPU8[$pIn_buf_next >> 0] | 0;
    $counter$70 = $23;
    $dist$70 = $21;
    $dist_from_out_buf_start$67 = $27;
    $num_bits$74 = $17;
    $num_extra$72 = $25;
    $pIn_buf_cur$73 = $pIn_buf_next + 1 | 0;
    $pOut_buf_cur$67 = $pOut_buf_next;
    label = 240;
   } else {
    $bit_buf$73 = $19;
    $counter$69 = $23;
    $dist$69 = $21;
    $dist_from_out_buf_start$66 = $27;
    $num_bits$73 = $17;
    $num_extra$71 = $25;
    $pIn_buf_cur$72 = $pIn_buf_next;
    $pOut_buf_cur$66 = $pOut_buf_next;
    label = 235;
   }
   break;
  }
 case 52:
  {
   $bit_buf$27 = $19;
   $counter$26 = $23;
   $dist$26 = $21;
   $dist_from_out_buf_start$22 = $27;
   $num_bits$27 = $17;
   $num_extra$27 = $25;
   $pIn_buf_cur$26 = $pIn_buf_next;
   $pOut_buf_cur$22 = $pOut_buf_next;
   label = 76;
   break;
  }
 case 5:
  {
   if (($0 | 0) > 0) {
    $bit_buf$12 = $19;
    $c1$0 = HEAPU8[$pIn_buf_next >> 0] | 0;
    $counter$12 = $23;
    $dist$12 = $21;
    $dist_from_out_buf_start$7 = $27;
    $num_bits$12 = $17;
    $num_extra$12 = $25;
    $pIn_buf_cur$11 = $pIn_buf_next + 1 | 0;
    $pOut_buf_cur$7 = $pOut_buf_next;
    label = 43;
   } else {
    $bit_buf$11 = $19;
    $counter$11 = $23;
    $dist$11 = $21;
    $dist_from_out_buf_start$6 = $27;
    $num_bits$11 = $17;
    $num_extra$11 = $25;
    $pIn_buf_cur$10 = $pIn_buf_next;
    $pOut_buf_cur$6 = $pOut_buf_next;
    label = 38;
   }
   break;
  }
 case 35:
  {
   $bit_buf$44 = $19;
   $counter$43 = $23;
   $dist$43 = $21;
   $dist_from_out_buf_start$39 = $27;
   $num_bits$44 = $17;
   $num_extra$44 = $25;
   $pIn_buf_cur$43 = $pIn_buf_next;
   $pOut_buf_cur$39 = $pOut_buf_next;
   label = 117;
   break;
  }
 case 2:
  {
   if (($0 | 0) > 0) {
    $53 = HEAPU8[$pIn_buf_next >> 0] | 0;
    HEAP32[$r + 12 >> 2] = $53;
    $64 = $53;
    $bit_buf$3 = $19;
    $dist$3 = $21;
    $num_bits$3 = $17;
    $num_extra$3 = $25;
    $pIn_buf_cur$2 = $pIn_buf_next + 1 | 0;
    label = 21;
   } else {
    $bit_buf$2 = $19;
    $counter$2 = $23;
    $dist$2 = $21;
    $num_bits$2 = $17;
    $num_extra$2 = $25;
    $pIn_buf_cur$1 = $pIn_buf_next;
    label = 15;
   }
   break;
  }
 case 38:
  {
   $bit_buf$30 = $19;
   $counter$29 = $23;
   $dist$29 = $21;
   $dist_from_out_buf_start$25 = $27;
   $num_bits$30 = $17;
   $num_extra$30 = $25;
   $pIn_buf_cur$29 = $pIn_buf_next;
   $pOut_buf_cur$25 = $pOut_buf_next;
   label = 82;
   break;
  }
 case 6:
  {
   if (($0 | 0) > 0) {
    $bit_buf$17 = $19;
    $c2$0 = HEAPU8[$pIn_buf_next >> 0] | 0;
    $counter$16 = $23;
    $dist$17 = $21;
    $dist_from_out_buf_start$12 = $27;
    $num_bits$17 = $17;
    $num_extra$17 = $25;
    $pIn_buf_cur$16 = $pIn_buf_next + 1 | 0;
    $pOut_buf_cur$12 = $pOut_buf_next;
    label = 54;
   } else {
    $bit_buf$16 = $19;
    $counter$15 = $23;
    $dist$16 = $21;
    $dist_from_out_buf_start$11 = $27;
    $num_bits$16 = $17;
    $num_extra$16 = $25;
    $pIn_buf_cur$15 = $pIn_buf_next;
    $pOut_buf_cur$11 = $pOut_buf_next;
    label = 49;
   }
   break;
  }
 case 27:
  {
   if (($0 | 0) > 0) {
    $bit_buf$78 = $19;
    $c19$0 = HEAPU8[$pIn_buf_next >> 0] | 0;
    $counter$74 = $23;
    $dist$73 = $21;
    $dist_from_out_buf_start$71 = $27;
    $num_bits$78 = $17;
    $num_extra$75 = $25;
    $pIn_buf_cur$77 = $pIn_buf_next + 1 | 0;
    $pOut_buf_cur$71 = $pOut_buf_next;
    label = 253;
   } else {
    $bit_buf$77 = $19;
    $counter$73 = $23;
    $dist$72 = $21;
    $dist_from_out_buf_start$70 = $27;
    $num_bits$77 = $17;
    $num_extra$74 = $25;
    $pIn_buf_cur$76 = $pIn_buf_next;
    $pOut_buf_cur$70 = $pOut_buf_next;
    label = 248;
   }
   break;
  }
 case 25:
  {
   if (($0 | 0) > 0) {
    $bit_buf$69 = $19;
    $c14$0 = HEAPU8[$pIn_buf_next >> 0] | 0;
    $counter$65 = $23;
    $dist$65 = $21;
    $dist_from_out_buf_start$62 = $27;
    $num_bits$69 = $17;
    $num_extra$67 = $25;
    $pIn_buf_cur$68 = $pIn_buf_next + 1 | 0;
    $pOut_buf_cur$62 = $pOut_buf_next;
    label = 224;
   } else {
    $bit_buf$68 = $19;
    $counter$64 = $23;
    $dist$64 = $21;
    $dist_from_out_buf_start$61 = $27;
    $num_bits$68 = $17;
    $num_extra$66 = $25;
    $pIn_buf_cur$67 = $pIn_buf_next;
    $pOut_buf_cur$61 = $pOut_buf_next;
    label = 219;
   }
   break;
  }
 case 40:
  {
   $bit_buf$31 = $19;
   $counter$30 = $23;
   $dist$30 = $21;
   $dist_from_out_buf_start$26 = $27;
   $num_bits$31 = $17;
   $num_extra$31 = $25;
   $pIn_buf_cur$30 = $pIn_buf_next;
   $pOut_buf_cur$26 = $pOut_buf_next;
   label = 85;
   break;
  }
 case 41:
  {
   if (($0 | 0) > 0) {
    $bit_buf$92 = $19;
    $c22$0 = HEAPU8[$pIn_buf_next >> 0] | 0;
    $counter$88 = $23;
    $dist$87 = $21;
    $dist_from_out_buf_start$83 = $27;
    $num_bits$92 = $17;
    $num_extra$89 = $25;
    $pIn_buf_cur$91 = $pIn_buf_next + 1 | 0;
    $pOut_buf_cur$86 = $pOut_buf_next;
    label = 287;
   } else {
    $bit_buf$91 = $19;
    $counter$87 = $23;
    $dist$86 = $21;
    $dist_from_out_buf_start$82 = $27;
    $num_bits$91 = $17;
    $num_extra$88 = $25;
    $pIn_buf_cur$90 = $pIn_buf_next;
    $pOut_buf_cur$85 = $pOut_buf_next;
    label = 282;
   }
   break;
  }
 case 53:
  {
   $bit_buf$83 = $19;
   $counter$79 = $23;
   $dist$78 = $21;
   $dist_from_out_buf_start$74 = $27;
   $num_bits$83 = $17;
   $num_extra$80 = $25;
   $pIn_buf_cur$82 = $pIn_buf_next;
   $pOut_buf_cur$76 = $pOut_buf_next;
   label = 259;
   break;
  }
 default:
  {
   $bit_buf$97 = $19;
   $counter$93 = $23;
   $dist$92 = $21;
   $dist_from_out_buf_start$88 = $27;
   $num_bits$97 = $17;
   $num_extra$94 = $25;
   $pIn_buf_cur$96 = $pIn_buf_next;
   $pOut_buf_cur$91 = $pOut_buf_next;
   $status$71 = -1;
   label = 297;
  }
 } while (0);
 do if ((label | 0) == 8) if (!($decomp_flags & 2)) {
  HEAP32[$r + 8 >> 2] = 0;
  $bit_buf$1 = $bit_buf$0;
  $counter$1 = $counter$0;
  $dist$1 = $dist$0;
  $num_bits$1 = $num_bits$0;
  $num_extra$1 = $num_extra$0;
  $pIn_buf_cur$0 = $pIn_buf_next;
  label = 14;
  break;
 } else {
  HEAP32[$r >> 2] = 1;
  $bit_buf$97 = $bit_buf$0;
  $counter$93 = $counter$0;
  $dist$92 = $dist$0;
  $dist_from_out_buf_start$88 = $27;
  $num_bits$97 = $num_bits$0;
  $num_extra$94 = $num_extra$0;
  $pIn_buf_cur$96 = $pIn_buf_next;
  $pOut_buf_cur$91 = $pOut_buf_next;
  $status$71 = 1;
  label = 297;
  break;
 } while (0);
 if ((label | 0) == 14) if ($pIn_buf_cur$0 >>> 0 < $1 >>> 0) {
  $58 = HEAPU8[$pIn_buf_cur$0 >> 0] | 0;
  HEAP32[$r + 12 >> 2] = $58;
  $64 = $58;
  $bit_buf$3 = $bit_buf$1;
  $dist$3 = $dist$1;
  $num_bits$3 = $num_bits$1;
  $num_extra$3 = $num_extra$1;
  $pIn_buf_cur$2 = $pIn_buf_cur$0 + 1 | 0;
  label = 21;
 } else {
  $bit_buf$2 = $bit_buf$1;
  $counter$2 = $counter$1;
  $dist$2 = $dist$1;
  $num_bits$2 = $num_bits$1;
  $num_extra$2 = $num_extra$1;
  $pIn_buf_cur$1 = $pIn_buf_cur$0;
  label = 15;
 }
 do if ((label | 0) == 15) if (!($decomp_flags & 2)) {
  HEAP32[$r + 12 >> 2] = 0;
  $64 = 0;
  $bit_buf$3 = $bit_buf$2;
  $dist$3 = $dist$2;
  $num_bits$3 = $num_bits$2;
  $num_extra$3 = $num_extra$2;
  $pIn_buf_cur$2 = $pIn_buf_cur$1;
  label = 21;
  break;
 } else {
  HEAP32[$r >> 2] = 2;
  $bit_buf$97 = $bit_buf$2;
  $counter$93 = $counter$2;
  $dist$92 = $dist$2;
  $dist_from_out_buf_start$88 = $27;
  $num_bits$97 = $num_bits$2;
  $num_extra$94 = $num_extra$2;
  $pIn_buf_cur$96 = $pIn_buf_cur$1;
  $pOut_buf_cur$91 = $pOut_buf_next;
  $status$71 = 1;
  label = 297;
  break;
 } while (0);
 if ((label | 0) == 21) {
  $61 = HEAP32[$r + 8 >> 2] | 0;
  if (!((($61 << 8 | $64) >>> 0) % 31 | 0 | $64 & 32)) $72 = ($61 & 15 | 0) != 8; else $72 = 1;
  if ($5) $counter$3 = $72 & 1; else {
   $75 = 1 << ($61 >>> 4) + 8;
   $counter$3 = ($72 | ($75 >>> 0 > 32768 | $11 >>> 0 < $75 >>> 0)) & 1;
  }
  if (!$counter$3) {
   $bit_buf$5 = $bit_buf$3;
   $counter$5 = 0;
   $dist$5 = $dist$3;
   $dist_from_out_buf_start$0 = $27;
   $num_bits$5 = $num_bits$3;
   $num_extra$5 = $num_extra$3;
   $pIn_buf_cur$4 = $pIn_buf_cur$2;
   $pOut_buf_cur$0 = $pOut_buf_next;
   label = 27;
  } else {
   $bit_buf$4 = $bit_buf$3;
   $counter$4 = $counter$3;
   $dist$4 = $dist$3;
   $num_bits$4 = $num_bits$3;
   $num_extra$4 = $num_extra$3;
   $pIn_buf_cur$3 = $pIn_buf_cur$2;
   label = 26;
  }
 }
 if ((label | 0) == 26) {
  HEAP32[$r >> 2] = 36;
  $bit_buf$97 = $bit_buf$4;
  $counter$93 = $counter$4;
  $dist$92 = $dist$4;
  $dist_from_out_buf_start$88 = $27;
  $num_bits$97 = $num_bits$4;
  $num_extra$94 = $num_extra$4;
  $pIn_buf_cur$96 = $pIn_buf_cur$3;
  $pOut_buf_cur$91 = $pOut_buf_next;
  $status$71 = -1;
  label = 297;
 }
 L71 : while (1) {
  switch (label | 0) {
  case 27:
   {
    label = 0;
    if ($num_bits$5 >>> 0 < 3) {
     $bit_buf$6 = $bit_buf$5;
     $counter$6 = $counter$5;
     $dist$6 = $dist$5;
     $dist_from_out_buf_start$1 = $dist_from_out_buf_start$0;
     $num_bits$6 = $num_bits$5;
     $num_extra$6 = $num_extra$5;
     $pIn_buf_cur$5 = $pIn_buf_cur$4;
     $pOut_buf_cur$1 = $pOut_buf_cur$0;
     label = 28;
    } else {
     $bit_buf$9 = $bit_buf$5;
     $counter$9 = $counter$5;
     $dist$9 = $dist$5;
     $dist_from_out_buf_start$4 = $dist_from_out_buf_start$0;
     $num_bits$9 = $num_bits$5;
     $num_extra$9 = $num_extra$5;
     $pIn_buf_cur$8 = $pIn_buf_cur$4;
     $pOut_buf_cur$4 = $pOut_buf_cur$0;
     label = 35;
    }
    break;
   }
  case 29:
   {
    label = 0;
    if (!($decomp_flags & 2)) {
     $bit_buf$8 = $bit_buf$7;
     $c$0 = 0;
     $counter$8 = $counter$7;
     $dist$8 = $dist$7;
     $dist_from_out_buf_start$3 = $dist_from_out_buf_start$2;
     $num_bits$8 = $num_bits$7;
     $num_extra$8 = $num_extra$7;
     $pIn_buf_cur$7 = $pIn_buf_cur$6;
     $pOut_buf_cur$3 = $pOut_buf_cur$2;
     label = 34;
     continue L71;
    }
    HEAP32[$r >> 2] = 3;
    $bit_buf$97 = $bit_buf$7;
    $counter$93 = $counter$7;
    $dist$92 = $dist$7;
    $dist_from_out_buf_start$88 = $dist_from_out_buf_start$2;
    $num_bits$97 = $num_bits$7;
    $num_extra$94 = $num_extra$7;
    $pIn_buf_cur$96 = $pIn_buf_cur$6;
    $pOut_buf_cur$91 = $pOut_buf_cur$2;
    $status$71 = 1;
    label = 297;
    continue L71;
    break;
   }
  case 34:
   {
    label = 0;
    $93 = $c$0 << $num_bits$8 | $bit_buf$8;
    $94 = $num_bits$8 + 8 | 0;
    if ($94 >>> 0 < 3) {
     $bit_buf$6 = $93;
     $counter$6 = $counter$8;
     $dist$6 = $dist$8;
     $dist_from_out_buf_start$1 = $dist_from_out_buf_start$3;
     $num_bits$6 = $94;
     $num_extra$6 = $num_extra$8;
     $pIn_buf_cur$5 = $pIn_buf_cur$7;
     $pOut_buf_cur$1 = $pOut_buf_cur$3;
     label = 28;
    } else {
     $bit_buf$9 = $93;
     $counter$9 = $counter$8;
     $dist$9 = $dist$8;
     $dist_from_out_buf_start$4 = $dist_from_out_buf_start$3;
     $num_bits$9 = $94;
     $num_extra$9 = $num_extra$8;
     $pIn_buf_cur$8 = $pIn_buf_cur$7;
     $pOut_buf_cur$4 = $pOut_buf_cur$3;
     label = 35;
    }
    break;
   }
  case 38:
   {
    label = 0;
    if (!($decomp_flags & 2)) {
     $bit_buf$12 = $bit_buf$11;
     $c1$0 = 0;
     $counter$12 = $counter$11;
     $dist$12 = $dist$11;
     $dist_from_out_buf_start$7 = $dist_from_out_buf_start$6;
     $num_bits$12 = $num_bits$11;
     $num_extra$12 = $num_extra$11;
     $pIn_buf_cur$11 = $pIn_buf_cur$10;
     $pOut_buf_cur$7 = $pOut_buf_cur$6;
     label = 43;
     continue L71;
    }
    HEAP32[$r >> 2] = 5;
    $bit_buf$97 = $bit_buf$11;
    $counter$93 = $counter$11;
    $dist$92 = $dist$11;
    $dist_from_out_buf_start$88 = $dist_from_out_buf_start$6;
    $num_bits$97 = $num_bits$11;
    $num_extra$94 = $num_extra$11;
    $pIn_buf_cur$96 = $pIn_buf_cur$10;
    $pOut_buf_cur$91 = $pOut_buf_cur$6;
    $status$71 = 1;
    label = 297;
    continue L71;
    break;
   }
  case 43:
   {
    label = 0;
    $115 = $c1$0 << $num_bits$12 | $bit_buf$12;
    $116 = $num_bits$12 + 8 | 0;
    if ($116 >>> 0 < ($116 & 7) >>> 0) {
     $bit_buf$10 = $115;
     $counter$10 = $counter$12;
     $dist$10 = $dist$12;
     $dist_from_out_buf_start$5 = $dist_from_out_buf_start$7;
     $num_bits$10 = $116;
     $num_extra$10 = $num_extra$12;
     $pIn_buf_cur$9 = $pIn_buf_cur$11;
     $pOut_buf_cur$5 = $pOut_buf_cur$7;
     label = 37;
    } else {
     $bit_buf$13 = $115;
     $dist$13 = $dist$12;
     $dist_from_out_buf_start$8 = $dist_from_out_buf_start$7;
     $num_bits$13 = $116;
     $num_extra$13 = $num_extra$12;
     $pIn_buf_cur$12 = $pIn_buf_cur$11;
     $pOut_buf_cur$8 = $pOut_buf_cur$7;
     label = 44;
    }
    break;
   }
  case 49:
   {
    label = 0;
    if (!($decomp_flags & 2)) {
     $bit_buf$17 = $bit_buf$16;
     $c2$0 = 0;
     $counter$16 = $counter$15;
     $dist$17 = $dist$16;
     $dist_from_out_buf_start$12 = $dist_from_out_buf_start$11;
     $num_bits$17 = $num_bits$16;
     $num_extra$17 = $num_extra$16;
     $pIn_buf_cur$16 = $pIn_buf_cur$15;
     $pOut_buf_cur$12 = $pOut_buf_cur$11;
     label = 54;
     continue L71;
    }
    HEAP32[$r >> 2] = 6;
    $bit_buf$97 = $bit_buf$16;
    $counter$93 = $counter$15;
    $dist$92 = $dist$16;
    $dist_from_out_buf_start$88 = $dist_from_out_buf_start$11;
    $num_bits$97 = $num_bits$16;
    $num_extra$94 = $num_extra$16;
    $pIn_buf_cur$96 = $pIn_buf_cur$15;
    $pOut_buf_cur$91 = $pOut_buf_cur$11;
    $status$71 = 1;
    label = 297;
    continue L71;
    break;
   }
  case 54:
   {
    label = 0;
    $136 = $c2$0 << $num_bits$17 | $bit_buf$17;
    $137 = $num_bits$17 + 8 | 0;
    if ($num_bits$17 >>> 0 > 4294967287) {
     $bit_buf$15 = $136;
     $counter$14 = $counter$16;
     $dist$15 = $dist$17;
     $dist_from_out_buf_start$10 = $dist_from_out_buf_start$12;
     $num_bits$15 = $137;
     $num_extra$15 = $num_extra$17;
     $pIn_buf_cur$14 = $pIn_buf_cur$16;
     $pOut_buf_cur$10 = $pOut_buf_cur$12;
     label = 48;
    } else {
     $bit_buf$18 = $136;
     $counter$17 = $counter$16;
     $dist$18 = $dist$17;
     $dist_from_out_buf_start$13 = $dist_from_out_buf_start$12;
     $num_bits$18 = $137;
     $num_extra$18 = $num_extra$17;
     $pIn_buf_cur$17 = $pIn_buf_cur$16;
     $pOut_buf_cur$13 = $pOut_buf_cur$12;
     label = 55;
    }
    break;
   }
  case 57:
   {
    label = 0;
    if (!($decomp_flags & 2)) {
     HEAP8[$r + $counter$18 + 10528 >> 0] = 0;
     $bit_buf$20 = $bit_buf$19;
     $counter$19 = $counter$18;
     $dist$20 = $dist$19;
     $dist_from_out_buf_start$15 = $dist_from_out_buf_start$14;
     $num_bits$20 = $num_bits$19;
     $num_extra$20 = $num_extra$19;
     $pIn_buf_cur$19 = $pIn_buf_cur$18;
     $pOut_buf_cur$15 = $pOut_buf_cur$14;
     label = 63;
     continue L71;
    } else {
     HEAP32[$r >> 2] = 7;
     $bit_buf$97 = $bit_buf$19;
     $counter$93 = $counter$18;
     $dist$92 = $dist$19;
     $dist_from_out_buf_start$88 = $dist_from_out_buf_start$14;
     $num_bits$97 = $num_bits$19;
     $num_extra$94 = $num_extra$19;
     $pIn_buf_cur$96 = $pIn_buf_cur$18;
     $pOut_buf_cur$91 = $pOut_buf_cur$14;
     $status$71 = 1;
     label = 297;
     continue L71;
    }
    break;
   }
  case 63:
   {
    label = 0;
    $bit_buf$14 = $bit_buf$20;
    $counter$13 = $counter$19 + 1 | 0;
    $dist$14 = $dist$20;
    $dist_from_out_buf_start$9 = $dist_from_out_buf_start$15;
    $num_bits$14 = $num_bits$20;
    $num_extra$14 = $num_extra$20;
    $pIn_buf_cur$13 = $pIn_buf_cur$19;
    $pOut_buf_cur$9 = $pOut_buf_cur$15;
    label = 45;
    break;
   }
  case 65:
   {
    label = 0;
    HEAP32[$r >> 2] = 39;
    $bit_buf$97 = $bit_buf$21;
    $counter$93 = $counter$20;
    $dist$92 = $dist$21;
    $dist_from_out_buf_start$88 = $dist_from_out_buf_start$16;
    $num_bits$97 = $num_bits$21;
    $num_extra$94 = $num_extra$21;
    $pIn_buf_cur$96 = $pIn_buf_cur$20;
    $pOut_buf_cur$91 = $pOut_buf_cur$16;
    $status$71 = -1;
    label = 297;
    continue L71;
    break;
   }
  case 69:
   {
    label = 0;
    if (!($decomp_flags & 2)) {
     $bit_buf$25 = $bit_buf$24;
     $c3$0 = 0;
     $counter$24 = $counter$23;
     $dist$25 = $dist$24;
     $dist_from_out_buf_start$20 = $dist_from_out_buf_start$19;
     $num_bits$25 = $num_bits$24;
     $num_extra$25 = $num_extra$24;
     $pIn_buf_cur$24 = $pIn_buf_cur$23;
     $pOut_buf_cur$20 = $pOut_buf_cur$19;
     label = 74;
     continue L71;
    }
    HEAP32[$r >> 2] = 51;
    $bit_buf$97 = $bit_buf$24;
    $counter$93 = $counter$23;
    $dist$92 = $dist$24;
    $dist_from_out_buf_start$88 = $dist_from_out_buf_start$19;
    $num_bits$97 = $num_bits$24;
    $num_extra$94 = $num_extra$24;
    $pIn_buf_cur$96 = $pIn_buf_cur$23;
    $pOut_buf_cur$91 = $pOut_buf_cur$19;
    $status$71 = 1;
    label = 297;
    continue L71;
    break;
   }
  case 74:
   {
    label = 0;
    $187 = $c3$0 << $num_bits$25 | $bit_buf$25;
    $188 = $num_bits$25 + 8 | 0;
    if ($num_bits$25 >>> 0 > 4294967287) {
     $bit_buf$23 = $187;
     $counter$22 = $counter$24;
     $dist$23 = $dist$25;
     $dist_from_out_buf_start$18 = $dist_from_out_buf_start$20;
     $num_bits$23 = $188;
     $num_extra$23 = $num_extra$25;
     $pIn_buf_cur$22 = $pIn_buf_cur$24;
     $pOut_buf_cur$18 = $pOut_buf_cur$20;
     label = 68;
    } else {
     $bit_buf$26 = $187;
     $counter$25 = $counter$24;
     $dist_from_out_buf_start$21 = $dist_from_out_buf_start$20;
     $num_bits$26 = $188;
     $num_extra$26 = $num_extra$25;
     $pIn_buf_cur$25 = $pIn_buf_cur$24;
     $pOut_buf_cur$21 = $pOut_buf_cur$20;
     label = 75;
    }
    break;
   }
  case 76:
   {
    label = 0;
    if ($pOut_buf_cur$22 >>> 0 < $3 >>> 0) {
     HEAP8[$pOut_buf_cur$22 >> 0] = $dist$26;
     $bit_buf$22 = $bit_buf$27;
     $counter$21 = $counter$26 + -1 | 0;
     $dist$22 = $dist$26;
     $dist_from_out_buf_start$17 = $dist_from_out_buf_start$22;
     $num_bits$22 = $num_bits$27;
     $num_extra$22 = $num_extra$27;
     $pIn_buf_cur$21 = $pIn_buf_cur$26;
     $pOut_buf_cur$17 = $pOut_buf_cur$22 + 1 | 0;
     label = 66;
     break;
    } else {
     HEAP32[$r >> 2] = 52;
     $bit_buf$97 = $bit_buf$27;
     $counter$93 = $counter$26;
     $dist$92 = $dist$26;
     $dist_from_out_buf_start$88 = $dist_from_out_buf_start$22;
     $num_bits$97 = $num_bits$27;
     $num_extra$94 = $num_extra$27;
     $pIn_buf_cur$96 = $pIn_buf_cur$26;
     $pOut_buf_cur$91 = $pOut_buf_cur$22;
     $status$71 = 2;
     label = 297;
     continue L71;
    }
    break;
   }
  case 80:
   {
    label = 0;
    if ($pOut_buf_cur$24 >>> 0 < $3 >>> 0) {
     $bit_buf$30 = $bit_buf$29;
     $counter$29 = $counter$28;
     $dist$29 = $dist$28;
     $dist_from_out_buf_start$25 = $dist_from_out_buf_start$24;
     $num_bits$30 = $num_bits$29;
     $num_extra$30 = $num_extra$29;
     $pIn_buf_cur$29 = $pIn_buf_cur$28;
     $pOut_buf_cur$25 = $pOut_buf_cur$24;
     label = 82;
     continue L71;
    }
    HEAP32[$r >> 2] = 9;
    $bit_buf$97 = $bit_buf$29;
    $counter$93 = $counter$28;
    $dist$92 = $dist$28;
    $dist_from_out_buf_start$88 = $dist_from_out_buf_start$24;
    $num_bits$97 = $num_bits$29;
    $num_extra$94 = $num_extra$29;
    $pIn_buf_cur$96 = $pIn_buf_cur$28;
    $pOut_buf_cur$91 = $pOut_buf_cur$24;
    $status$71 = 2;
    label = 297;
    continue L71;
    break;
   }
  case 82:
   {
    label = 0;
    if ($pIn_buf_cur$29 >>> 0 < $1 >>> 0) {
     $204 = $3 - $pOut_buf_cur$25 | 0;
     $207 = $1 - $pIn_buf_cur$29 | 0;
     $$8 = $204 >>> 0 < $207 >>> 0 ? $204 : $207;
     $$8$counter$29 = $$8 >>> 0 < $counter$29 >>> 0 ? $$8 : $counter$29;
     _memcpy($pOut_buf_cur$25 | 0, $pIn_buf_cur$29 | 0, $$8$counter$29 | 0) | 0;
     $bit_buf$28 = $bit_buf$30;
     $counter$27 = $counter$29 - $$8$counter$29 | 0;
     $dist$27 = $dist$29;
     $dist_from_out_buf_start$23 = $dist_from_out_buf_start$25;
     $num_bits$28 = $num_bits$30;
     $num_extra$28 = $num_extra$30;
     $pIn_buf_cur$27 = $pIn_buf_cur$29 + $$8$counter$29 | 0;
     $pOut_buf_cur$23 = $pOut_buf_cur$25 + $$8$counter$29 | 0;
     label = 79;
     break;
    }
    if (!($decomp_flags & 2)) {
     $bit_buf$31 = $bit_buf$30;
     $counter$30 = $counter$29;
     $dist$30 = $dist$29;
     $dist_from_out_buf_start$26 = $dist_from_out_buf_start$25;
     $num_bits$31 = $num_bits$30;
     $num_extra$31 = $num_extra$30;
     $pIn_buf_cur$30 = $pIn_buf_cur$29;
     $pOut_buf_cur$26 = $pOut_buf_cur$25;
     label = 85;
     continue L71;
    }
    HEAP32[$r >> 2] = 38;
    $bit_buf$97 = $bit_buf$30;
    $counter$93 = $counter$29;
    $dist$92 = $dist$29;
    $dist_from_out_buf_start$88 = $dist_from_out_buf_start$25;
    $num_bits$97 = $num_bits$30;
    $num_extra$94 = $num_extra$30;
    $pIn_buf_cur$96 = $pIn_buf_cur$29;
    $pOut_buf_cur$91 = $pOut_buf_cur$25;
    $status$71 = 1;
    label = 297;
    continue L71;
    break;
   }
  case 85:
   {
    label = 0;
    HEAP32[$r >> 2] = 40;
    $bit_buf$97 = $bit_buf$31;
    $counter$93 = $counter$30;
    $dist$92 = $dist$30;
    $dist_from_out_buf_start$88 = $dist_from_out_buf_start$26;
    $num_bits$97 = $num_bits$31;
    $num_extra$94 = $num_extra$31;
    $pIn_buf_cur$96 = $pIn_buf_cur$30;
    $pOut_buf_cur$91 = $pOut_buf_cur$26;
    $status$71 = -1;
    label = 297;
    continue L71;
    break;
   }
  case 87:
   {
    label = 0;
    HEAP32[$r >> 2] = 10;
    $bit_buf$97 = $bit_buf$32;
    $counter$93 = $counter$31;
    $dist$92 = $dist$31;
    $dist_from_out_buf_start$88 = $dist_from_out_buf_start$27;
    $num_bits$97 = $num_bits$32;
    $num_extra$94 = $num_extra$32;
    $pIn_buf_cur$96 = $pIn_buf_cur$31;
    $pOut_buf_cur$91 = $pOut_buf_cur$27;
    $status$71 = -1;
    label = 297;
    continue L71;
    break;
   }
  case 91:
   {
    label = 0;
    if (!($decomp_flags & 2)) {
     $bit_buf$36 = $bit_buf$35;
     $c4$0 = 0;
     $counter$35 = $counter$34;
     $dist$35 = $dist$34;
     $dist_from_out_buf_start$31 = $dist_from_out_buf_start$30;
     $num_bits$36 = $num_bits$35;
     $num_extra$36 = $num_extra$35;
     $pIn_buf_cur$35 = $pIn_buf_cur$34;
     $pOut_buf_cur$31 = $pOut_buf_cur$30;
     label = 96;
     continue L71;
    }
    HEAP32[$r >> 2] = 11;
    $bit_buf$97 = $bit_buf$35;
    $counter$93 = $counter$34;
    $dist$92 = $dist$34;
    $dist_from_out_buf_start$88 = $dist_from_out_buf_start$30;
    $num_bits$97 = $num_bits$35;
    $num_extra$94 = $num_extra$35;
    $pIn_buf_cur$96 = $pIn_buf_cur$34;
    $pOut_buf_cur$91 = $pOut_buf_cur$30;
    $status$71 = 1;
    label = 297;
    continue L71;
    break;
   }
  case 96:
   {
    label = 0;
    $229 = $c4$0 << $num_bits$36 | $bit_buf$36;
    $230 = $num_bits$36 + 8 | 0;
    $232 = HEAP8[94448 + $counter$35 >> 0] | 0;
    if ($230 >>> 0 < $232 << 24 >> 24 >>> 0) {
     $bit_buf$34 = $229;
     $counter$33 = $counter$35;
     $dist$33 = $dist$35;
     $dist_from_out_buf_start$29 = $dist_from_out_buf_start$31;
     $num_bits$34 = $230;
     $num_extra$34 = $num_extra$36;
     $pIn_buf_cur$33 = $pIn_buf_cur$35;
     $pOut_buf_cur$29 = $pOut_buf_cur$31;
     label = 90;
    } else {
     $236 = $232;
     $bit_buf$37 = $229;
     $counter$36 = $counter$35;
     $dist$36 = $dist$35;
     $dist_from_out_buf_start$32 = $dist_from_out_buf_start$31;
     $num_bits$37 = $230;
     $num_extra$37 = $num_extra$36;
     $pIn_buf_cur$36 = $pIn_buf_cur$35;
     $pOut_buf_cur$32 = $pOut_buf_cur$31;
     label = 97;
    }
    break;
   }
  case 102:
   {
    label = 0;
    if (!($decomp_flags & 2)) {
     $bit_buf$41 = $bit_buf$40;
     $c5$0 = 0;
     $counter$40 = $counter$39;
     $dist$40 = $dist$39;
     $dist_from_out_buf_start$36 = $dist_from_out_buf_start$35;
     $num_bits$41 = $num_bits$40;
     $num_extra$41 = $num_extra$40;
     $pIn_buf_cur$40 = $pIn_buf_cur$39;
     $pOut_buf_cur$36 = $pOut_buf_cur$35;
     label = 107;
     continue L71;
    }
    HEAP32[$r >> 2] = 14;
    $bit_buf$97 = $bit_buf$40;
    $counter$93 = $counter$39;
    $dist$92 = $dist$39;
    $dist_from_out_buf_start$88 = $dist_from_out_buf_start$35;
    $num_bits$97 = $num_bits$40;
    $num_extra$94 = $num_extra$40;
    $pIn_buf_cur$96 = $pIn_buf_cur$39;
    $pOut_buf_cur$91 = $pOut_buf_cur$35;
    $status$71 = 1;
    label = 297;
    continue L71;
    break;
   }
  case 107:
   {
    label = 0;
    $263 = $c5$0 << $num_bits$41 | $bit_buf$41;
    $264 = $num_bits$41 + 8 | 0;
    if ($264 >>> 0 < 3) {
     $bit_buf$39 = $263;
     $counter$38 = $counter$40;
     $dist$38 = $dist$40;
     $dist_from_out_buf_start$34 = $dist_from_out_buf_start$36;
     $num_bits$39 = $264;
     $num_extra$39 = $num_extra$41;
     $pIn_buf_cur$38 = $pIn_buf_cur$40;
     $pOut_buf_cur$34 = $pOut_buf_cur$36;
     label = 101;
    } else {
     $bit_buf$42 = $263;
     $counter$41 = $counter$40;
     $dist$41 = $dist$40;
     $dist_from_out_buf_start$37 = $dist_from_out_buf_start$36;
     $num_bits$42 = $264;
     $num_extra$42 = $num_extra$41;
     $pIn_buf_cur$41 = $pIn_buf_cur$40;
     $pOut_buf_cur$37 = $pOut_buf_cur$36;
     label = 108;
    }
    break;
   }
  case 117:
   {
    label = 0;
    HEAP32[$r >> 2] = 35;
    $bit_buf$57$ph = $bit_buf$44;
    $counter$56$ph = $counter$43;
    $dist$55$ph = $dist$43;
    $dist_from_out_buf_start$52$ph = $dist_from_out_buf_start$39;
    $num_bits$57$ph = $num_bits$44;
    $num_extra$57$ph = $num_extra$44;
    $pIn_buf_cur$56$ph = $pIn_buf_cur$43;
    $pOut_buf_cur$52$ph = $pOut_buf_cur$39;
    $status$46$ph = -1;
    label = 173;
    break;
   }
  case 145:
   {
    label = 0;
    if (!($decomp_flags & 2)) {
     $bit_buf$48 = $bit_buf$47;
     $c8$0 = 0;
     $counter$47 = $counter$46;
     $dist$47 = $dist$46;
     $dist_from_out_buf_start$43 = $dist_from_out_buf_start$42;
     $num_bits$48 = $num_bits$47;
     $num_extra$48 = $num_extra$47;
     $pIn_buf_cur$47 = $pIn_buf_cur$46;
     $pOut_buf_cur$43 = $pOut_buf_cur$42;
     label = 150;
     continue L71;
    }
    HEAP32[$r >> 2] = 16;
    $bit_buf$57$ph = $bit_buf$47;
    $counter$56$ph = $counter$46;
    $dist$55$ph = $dist$46;
    $dist_from_out_buf_start$52$ph = $dist_from_out_buf_start$42;
    $num_bits$57$ph = $num_bits$47;
    $num_extra$57$ph = $num_extra$47;
    $pIn_buf_cur$56$ph = $pIn_buf_cur$46;
    $pOut_buf_cur$52$ph = $pOut_buf_cur$42;
    $status$46$ph = 1;
    label = 173;
    break;
   }
  case 150:
   {
    label = 0;
    $478 = $c8$0 << $num_bits$48 | $bit_buf$48;
    $479 = $num_bits$48 + 8 | 0;
    if ($479 >>> 0 < 15) {
     $bit_buf$46 = $478;
     $counter$45 = $counter$47;
     $dist$45 = $dist$47;
     $dist_from_out_buf_start$41 = $dist_from_out_buf_start$43;
     $num_bits$46 = $479;
     $num_extra$46 = $num_extra$48;
     $pIn_buf_cur$45 = $pIn_buf_cur$47;
     $pOut_buf_cur$41 = $pOut_buf_cur$43;
     label = 138;
    } else {
     $bit_buf$49 = $478;
     $counter$48 = $counter$47;
     $dist_from_out_buf_start$44 = $dist_from_out_buf_start$43;
     $num_bits$49 = $479;
     $num_extra$49 = $num_extra$48;
     $pIn_buf_cur$48 = $pIn_buf_cur$47;
     $pOut_buf_cur$44 = $pOut_buf_cur$43;
     label = 152;
    }
    break;
   }
  case 158:
   {
    label = 0;
    HEAP32[$r >> 2] = 17;
    $bit_buf$57$ph = $bit_buf$50;
    $counter$56$ph = $counter$49;
    $dist$55$ph = $dist$48;
    $dist_from_out_buf_start$52$ph = $dist_from_out_buf_start$45;
    $num_bits$57$ph = $num_bits$50;
    $num_extra$57$ph = $num_extra$50;
    $pIn_buf_cur$56$ph = $pIn_buf_cur$49;
    $pOut_buf_cur$52$ph = $pOut_buf_cur$45;
    $status$46$ph = -1;
    label = 173;
    break;
   }
  case 161:
   {
    label = 0;
    if (!($decomp_flags & 2)) {
     $bit_buf$53 = $bit_buf$52;
     $c9$0 = 0;
     $counter$52 = $counter$51;
     $dist$51 = $dist$50;
     $dist_from_out_buf_start$48 = $dist_from_out_buf_start$47;
     $num_bits$53 = $num_bits$52;
     $num_extra$53 = $num_extra$52;
     $pIn_buf_cur$52 = $pIn_buf_cur$51;
     $pOut_buf_cur$48 = $pOut_buf_cur$47;
     label = 166;
     continue L71;
    }
    HEAP32[$r >> 2] = 18;
    $bit_buf$57$ph = $bit_buf$52;
    $counter$56$ph = $counter$51;
    $dist$55$ph = $dist$50;
    $dist_from_out_buf_start$52$ph = $dist_from_out_buf_start$47;
    $num_bits$57$ph = $num_bits$52;
    $num_extra$57$ph = $num_extra$52;
    $pIn_buf_cur$56$ph = $pIn_buf_cur$51;
    $pOut_buf_cur$52$ph = $pOut_buf_cur$47;
    $status$46$ph = 1;
    label = 173;
    break;
   }
  case 166:
   {
    label = 0;
    $533 = $c9$0 << $num_bits$53 | $bit_buf$53;
    $534 = $num_bits$53 + 8 | 0;
    if ($534 >>> 0 < $num_extra$53 >>> 0) {
     $bit_buf$51 = $533;
     $counter$50 = $counter$52;
     $dist$49 = $dist$51;
     $dist_from_out_buf_start$46 = $dist_from_out_buf_start$48;
     $num_bits$51 = $534;
     $num_extra$51 = $num_extra$53;
     $pIn_buf_cur$50 = $pIn_buf_cur$52;
     $pOut_buf_cur$46 = $pOut_buf_cur$48;
     label = 160;
    } else {
     $bit_buf$54 = $533;
     $counter$53 = $counter$52;
     $dist$52 = $dist$51;
     $dist_from_out_buf_start$49 = $dist_from_out_buf_start$48;
     $num_bits$54 = $534;
     $num_extra$54 = $num_extra$53;
     $pIn_buf_cur$53 = $pIn_buf_cur$52;
     $pOut_buf_cur$49 = $pOut_buf_cur$48;
     label = 167;
    }
    break;
   }
  case 171:
   {
    label = 0;
    HEAP32[$r >> 2] = 21;
    $bit_buf$57$ph = $bit_buf$55;
    $counter$56$ph = $counter$54;
    $dist$55$ph = $dist$53;
    $dist_from_out_buf_start$52$ph = $dist_from_out_buf_start$50;
    $num_bits$57$ph = $num_bits$55;
    $num_extra$57$ph = $num_extra$55;
    $pIn_buf_cur$56$ph = $pIn_buf_cur$54;
    $pOut_buf_cur$52$ph = $pOut_buf_cur$50;
    $status$46$ph = -1;
    label = 173;
    break;
   }
  case 185:
   {
    label = 0;
    if (!($decomp_flags & 2)) {
     $bit_buf$61 = $bit_buf$60;
     $c12$0 = 0;
     $counter$60 = $counter$59;
     $dist$59 = $dist$58;
     $dist_from_out_buf_start$56 = $dist_from_out_buf_start$55;
     $num_bits$61 = $num_bits$60;
     $num_extra$61 = $num_extra$60;
     $pIn_buf_cur$60 = $pIn_buf_cur$59;
     $pOut_buf_cur$56 = $pOut_buf_cur$55;
     label = 190;
     continue L71;
    }
    HEAP32[$r >> 2] = 23;
    $bit_buf$97 = $bit_buf$60;
    $counter$93 = $counter$59;
    $dist$92 = $dist$58;
    $dist_from_out_buf_start$88 = $dist_from_out_buf_start$55;
    $num_bits$97 = $num_bits$60;
    $num_extra$94 = $num_extra$60;
    $pIn_buf_cur$96 = $pIn_buf_cur$59;
    $pOut_buf_cur$91 = $pOut_buf_cur$55;
    $status$71 = 1;
    label = 297;
    continue L71;
    break;
   }
  case 190:
   {
    label = 0;
    $599 = $c12$0 << $num_bits$61 | $bit_buf$61;
    $600 = $num_bits$61 + 8 | 0;
    if ($600 >>> 0 < 15) {
     $bit_buf$59 = $599;
     $counter$58 = $counter$60;
     $dist$57 = $dist$59;
     $dist_from_out_buf_start$54 = $dist_from_out_buf_start$56;
     $num_bits$59 = $600;
     $num_extra$59 = $num_extra$61;
     $pIn_buf_cur$58 = $pIn_buf_cur$60;
     $pOut_buf_cur$54 = $pOut_buf_cur$56;
     label = 178;
    } else {
     $bit_buf$62 = $599;
     $dist$60 = $dist$59;
     $dist_from_out_buf_start$57 = $dist_from_out_buf_start$56;
     $num_bits$62 = $600;
     $num_extra$62 = $num_extra$61;
     $pIn_buf_cur$61 = $pIn_buf_cur$60;
     $pOut_buf_cur$57 = $pOut_buf_cur$56;
     label = 192;
    }
    break;
   }
  case 196:
   {
    label = 0;
    if ($pOut_buf_cur$58 >>> 0 < $3 >>> 0) {
     HEAP8[$pOut_buf_cur$58 >> 0] = $counter$61;
     $bit_buf$58$ph = $bit_buf$63;
     $counter$57$ph = $counter$61;
     $dist$56$ph = $dist$61;
     $dist_from_out_buf_start$53$ph = $dist_from_out_buf_start$58;
     $num_bits$58$ph = $num_bits$63;
     $num_extra$58$ph = $num_extra$63;
     $pIn_buf_cur$57$ph = $pIn_buf_cur$62;
     $pOut_buf_cur$53$ph = $pOut_buf_cur$58 + 1 | 0;
     label = 199;
     break;
    } else {
     HEAP32[$r >> 2] = 24;
     $bit_buf$97 = $bit_buf$63;
     $counter$93 = $counter$61;
     $dist$92 = $dist$61;
     $dist_from_out_buf_start$88 = $dist_from_out_buf_start$58;
     $num_bits$97 = $num_bits$63;
     $num_extra$94 = $num_extra$63;
     $pIn_buf_cur$96 = $pIn_buf_cur$62;
     $pOut_buf_cur$91 = $pOut_buf_cur$58;
     $status$71 = 2;
     label = 297;
     continue L71;
    }
    break;
   }
  case 219:
   {
    label = 0;
    if (!($decomp_flags & 2)) {
     $bit_buf$69 = $bit_buf$68;
     $c14$0 = 0;
     $counter$65 = $counter$64;
     $dist$65 = $dist$64;
     $dist_from_out_buf_start$62 = $dist_from_out_buf_start$61;
     $num_bits$69 = $num_bits$68;
     $num_extra$67 = $num_extra$66;
     $pIn_buf_cur$68 = $pIn_buf_cur$67;
     $pOut_buf_cur$62 = $pOut_buf_cur$61;
     label = 224;
     continue L71;
    }
    HEAP32[$r >> 2] = 25;
    $bit_buf$97 = $bit_buf$68;
    $counter$93 = $counter$64;
    $dist$92 = $dist$64;
    $dist_from_out_buf_start$88 = $dist_from_out_buf_start$61;
    $num_bits$97 = $num_bits$68;
    $num_extra$94 = $num_extra$66;
    $pIn_buf_cur$96 = $pIn_buf_cur$67;
    $pOut_buf_cur$91 = $pOut_buf_cur$61;
    $status$71 = 1;
    label = 297;
    continue L71;
    break;
   }
  case 224:
   {
    label = 0;
    $731 = $c14$0 << $num_bits$69 | $bit_buf$69;
    $732 = $num_bits$69 + 8 | 0;
    if ($732 >>> 0 < $num_extra$67 >>> 0) {
     $bit_buf$67 = $731;
     $counter$63 = $counter$65;
     $dist$63 = $dist$65;
     $dist_from_out_buf_start$60 = $dist_from_out_buf_start$62;
     $num_bits$67 = $732;
     $num_extra$65 = $num_extra$67;
     $pIn_buf_cur$66 = $pIn_buf_cur$68;
     $pOut_buf_cur$60 = $pOut_buf_cur$62;
     label = 218;
    } else {
     $bit_buf$70 = $731;
     $counter$66 = $counter$65;
     $dist$66 = $dist$65;
     $dist_from_out_buf_start$63 = $dist_from_out_buf_start$62;
     $num_bits$70 = $732;
     $num_extra$68 = $num_extra$67;
     $pIn_buf_cur$69 = $pIn_buf_cur$68;
     $pOut_buf_cur$63 = $pOut_buf_cur$62;
     label = 225;
    }
    break;
   }
  case 235:
   {
    label = 0;
    if (!($decomp_flags & 2)) {
     $bit_buf$74 = $bit_buf$73;
     $c17$0 = 0;
     $counter$70 = $counter$69;
     $dist$70 = $dist$69;
     $dist_from_out_buf_start$67 = $dist_from_out_buf_start$66;
     $num_bits$74 = $num_bits$73;
     $num_extra$72 = $num_extra$71;
     $pIn_buf_cur$73 = $pIn_buf_cur$72;
     $pOut_buf_cur$67 = $pOut_buf_cur$66;
     label = 240;
     continue L71;
    }
    HEAP32[$r >> 2] = 26;
    $bit_buf$97 = $bit_buf$73;
    $counter$93 = $counter$69;
    $dist$92 = $dist$69;
    $dist_from_out_buf_start$88 = $dist_from_out_buf_start$66;
    $num_bits$97 = $num_bits$73;
    $num_extra$94 = $num_extra$71;
    $pIn_buf_cur$96 = $pIn_buf_cur$72;
    $pOut_buf_cur$91 = $pOut_buf_cur$66;
    $status$71 = 1;
    label = 297;
    continue L71;
    break;
   }
  case 240:
   {
    label = 0;
    $777 = $c17$0 << $num_bits$74 | $bit_buf$74;
    $778 = $num_bits$74 + 8 | 0;
    if ($778 >>> 0 < 15) {
     $bit_buf$72 = $777;
     $counter$68 = $counter$70;
     $dist$68 = $dist$70;
     $dist_from_out_buf_start$65 = $dist_from_out_buf_start$67;
     $num_bits$72 = $778;
     $num_extra$70 = $num_extra$72;
     $pIn_buf_cur$71 = $pIn_buf_cur$73;
     $pOut_buf_cur$65 = $pOut_buf_cur$67;
     label = 228;
    } else {
     $bit_buf$75 = $777;
     $counter$71 = $counter$70;
     $dist_from_out_buf_start$68 = $dist_from_out_buf_start$67;
     $num_bits$75 = $778;
     $pIn_buf_cur$74 = $pIn_buf_cur$73;
     $pOut_buf_cur$68 = $pOut_buf_cur$67;
     label = 242;
    }
    break;
   }
  case 248:
   {
    label = 0;
    if (!($decomp_flags & 2)) {
     $bit_buf$78 = $bit_buf$77;
     $c19$0 = 0;
     $counter$74 = $counter$73;
     $dist$73 = $dist$72;
     $dist_from_out_buf_start$71 = $dist_from_out_buf_start$70;
     $num_bits$78 = $num_bits$77;
     $num_extra$75 = $num_extra$74;
     $pIn_buf_cur$77 = $pIn_buf_cur$76;
     $pOut_buf_cur$71 = $pOut_buf_cur$70;
     label = 253;
     continue L71;
    }
    HEAP32[$r >> 2] = 27;
    $bit_buf$97 = $bit_buf$77;
    $counter$93 = $counter$73;
    $dist$92 = $dist$72;
    $dist_from_out_buf_start$88 = $dist_from_out_buf_start$70;
    $num_bits$97 = $num_bits$77;
    $num_extra$94 = $num_extra$74;
    $pIn_buf_cur$96 = $pIn_buf_cur$76;
    $pOut_buf_cur$91 = $pOut_buf_cur$70;
    $status$71 = 1;
    label = 297;
    continue L71;
    break;
   }
  case 253:
   {
    label = 0;
    $828 = $c19$0 << $num_bits$78 | $bit_buf$78;
    $829 = $num_bits$78 + 8 | 0;
    if ($829 >>> 0 < $num_extra$75 >>> 0) {
     $bit_buf$76 = $828;
     $counter$72 = $counter$74;
     $dist$71 = $dist$73;
     $dist_from_out_buf_start$69 = $dist_from_out_buf_start$71;
     $num_bits$76 = $829;
     $num_extra$73 = $num_extra$75;
     $pIn_buf_cur$75 = $pIn_buf_cur$77;
     $pOut_buf_cur$69 = $pOut_buf_cur$71;
     label = 247;
    } else {
     $bit_buf$79 = $828;
     $counter$75 = $counter$74;
     $dist$74 = $dist$73;
     $num_bits$79 = $829;
     $num_extra$76 = $num_extra$75;
     $pIn_buf_cur$78 = $pIn_buf_cur$77;
     $pOut_buf_cur$72 = $pOut_buf_cur$71;
     label = 254;
    }
    break;
   }
  case 256:
   {
    label = 0;
    HEAP32[$r >> 2] = 37;
    $bit_buf$97 = $bit_buf$81;
    $counter$93 = $counter$77;
    $dist$92 = $dist$76;
    $dist_from_out_buf_start$88 = $dist_from_out_buf_start$72;
    $num_bits$97 = $num_bits$81;
    $num_extra$94 = $num_extra$78;
    $pIn_buf_cur$96 = $pIn_buf_cur$80;
    $pOut_buf_cur$91 = $pOut_buf_cur$74;
    $status$71 = -1;
    label = 297;
    continue L71;
    break;
   }
  case 259:
   {
    label = 0;
    if ($pOut_buf_cur$76 >>> 0 < $3 >>> 0) {
     HEAP8[$pOut_buf_cur$76 >> 0] = HEAP8[$pOut_buf_start + ($dist_from_out_buf_start$74 - $dist$78 & $12) >> 0] | 0;
     $bit_buf$82 = $bit_buf$83;
     $counter$78 = $counter$79;
     $dist$77 = $dist$78;
     $dist_from_out_buf_start$73 = $dist_from_out_buf_start$74 + 1 | 0;
     $num_bits$82 = $num_bits$83;
     $num_extra$79 = $num_extra$80;
     $pIn_buf_cur$81 = $pIn_buf_cur$82;
     $pOut_buf_cur$75 = $pOut_buf_cur$76 + 1 | 0;
     label = 258;
     break;
    } else {
     HEAP32[$r >> 2] = 53;
     $bit_buf$97 = $bit_buf$83;
     $counter$93 = $counter$79;
     $dist$92 = $dist$78;
     $dist_from_out_buf_start$88 = $dist_from_out_buf_start$74;
     $num_bits$97 = $num_bits$83;
     $num_extra$94 = $num_extra$80;
     $pIn_buf_cur$96 = $pIn_buf_cur$82;
     $pOut_buf_cur$91 = $pOut_buf_cur$76;
     $status$71 = 2;
     label = 297;
     continue L71;
    }
    break;
   }
  case 271:
   {
    label = 0;
    if (!($decomp_flags & 2)) {
     $bit_buf$87 = $bit_buf$86;
     $c20$0 = 0;
     $counter$84 = $counter$83;
     $dist$82 = $dist$81;
     $dist_from_out_buf_start$78 = $dist_from_out_buf_start$77;
     $num_bits$87 = $num_bits$86;
     $num_extra$84 = $num_extra$83;
     $pIn_buf_cur$86 = $pIn_buf_cur$85;
     $pOut_buf_cur$81 = $pOut_buf_cur$80;
     label = 276;
     continue L71;
    }
    HEAP32[$r >> 2] = 32;
    $bit_buf$97 = $bit_buf$86;
    $counter$93 = $counter$83;
    $dist$92 = $dist$81;
    $dist_from_out_buf_start$88 = $dist_from_out_buf_start$77;
    $num_bits$97 = $num_bits$86;
    $num_extra$94 = $num_extra$83;
    $pIn_buf_cur$96 = $pIn_buf_cur$85;
    $pOut_buf_cur$91 = $pOut_buf_cur$80;
    $status$71 = 1;
    label = 297;
    continue L71;
    break;
   }
  case 276:
   {
    label = 0;
    $893 = $c20$0 << $num_bits$87 | $bit_buf$87;
    $894 = $num_bits$87 + 8 | 0;
    if ($894 >>> 0 < ($894 & 7) >>> 0) {
     $bit_buf$85 = $893;
     $counter$82 = $counter$84;
     $dist$80 = $dist$82;
     $dist_from_out_buf_start$76 = $dist_from_out_buf_start$78;
     $num_bits$85 = $894;
     $num_extra$82 = $num_extra$84;
     $pIn_buf_cur$84 = $pIn_buf_cur$86;
     $pOut_buf_cur$79 = $pOut_buf_cur$81;
     label = 270;
    } else {
     $bit_buf$88 = $893;
     $dist$83 = $dist$82;
     $dist_from_out_buf_start$79 = $dist_from_out_buf_start$78;
     $num_bits$88 = $894;
     $num_extra$85 = $num_extra$84;
     $pIn_buf_cur$87 = $pIn_buf_cur$86;
     $pOut_buf_cur$82 = $pOut_buf_cur$81;
     label = 277;
    }
    break;
   }
  case 282:
   {
    label = 0;
    if (!($decomp_flags & 2)) {
     $bit_buf$92 = $bit_buf$91;
     $c22$0 = 0;
     $counter$88 = $counter$87;
     $dist$87 = $dist$86;
     $dist_from_out_buf_start$83 = $dist_from_out_buf_start$82;
     $num_bits$92 = $num_bits$91;
     $num_extra$89 = $num_extra$88;
     $pIn_buf_cur$91 = $pIn_buf_cur$90;
     $pOut_buf_cur$86 = $pOut_buf_cur$85;
     label = 287;
     continue L71;
    }
    HEAP32[$r >> 2] = 41;
    $bit_buf$97 = $bit_buf$91;
    $counter$93 = $counter$87;
    $dist$92 = $dist$86;
    $dist_from_out_buf_start$88 = $dist_from_out_buf_start$82;
    $num_bits$97 = $num_bits$91;
    $num_extra$94 = $num_extra$88;
    $pIn_buf_cur$96 = $pIn_buf_cur$90;
    $pOut_buf_cur$91 = $pOut_buf_cur$85;
    $status$71 = 1;
    label = 297;
    continue L71;
    break;
   }
  case 287:
   {
    label = 0;
    $914 = $c22$0 << $num_bits$92 | $bit_buf$92;
    $915 = $num_bits$92 + 8 | 0;
    if ($num_bits$92 >>> 0 > 4294967287) {
     $bit_buf$90 = $914;
     $counter$86 = $counter$88;
     $dist$85 = $dist$87;
     $dist_from_out_buf_start$81 = $dist_from_out_buf_start$83;
     $num_bits$90 = $915;
     $num_extra$87 = $num_extra$89;
     $pIn_buf_cur$89 = $pIn_buf_cur$91;
     $pOut_buf_cur$84 = $pOut_buf_cur$86;
     label = 281;
    } else {
     $bit_buf$93 = $914;
     $counter$89 = $counter$88;
     $dist$88 = $dist$87;
     $dist_from_out_buf_start$84 = $dist_from_out_buf_start$83;
     $num_bits$93 = $915;
     $num_extra$90 = $num_extra$89;
     $pIn_buf_cur$92 = $pIn_buf_cur$91;
     $pOut_buf_cur$87 = $pOut_buf_cur$86;
     label = 288;
    }
    break;
   }
  case 290:
   {
    label = 0;
    if (!($decomp_flags & 2)) {
     $bit_buf$95 = $bit_buf$94;
     $counter$91 = $counter$90;
     $dist$90 = $dist$89;
     $dist_from_out_buf_start$86 = $dist_from_out_buf_start$85;
     $num_bits$95 = $num_bits$94;
     $num_extra$92 = $num_extra$91;
     $pIn_buf_cur$94 = $pIn_buf_cur$93;
     $pOut_buf_cur$89 = $pOut_buf_cur$88;
     $s21$0 = 0;
     label = 295;
     continue L71;
    }
    HEAP32[$r >> 2] = 42;
    $bit_buf$97 = $bit_buf$94;
    $counter$93 = $counter$90;
    $dist$92 = $dist$89;
    $dist_from_out_buf_start$88 = $dist_from_out_buf_start$85;
    $num_bits$97 = $num_bits$94;
    $num_extra$94 = $num_extra$91;
    $pIn_buf_cur$96 = $pIn_buf_cur$93;
    $pOut_buf_cur$91 = $pOut_buf_cur$88;
    $status$71 = 1;
    label = 297;
    continue L71;
    break;
   }
  case 295:
   {
    label = 0;
    $930 = $r + 16 | 0;
    HEAP32[$930 >> 2] = HEAP32[$930 >> 2] << 8 | $s21$0;
    $bit_buf$89 = $bit_buf$95;
    $counter$85 = $counter$91 + 1 | 0;
    $dist$84 = $dist$90;
    $dist_from_out_buf_start$80 = $dist_from_out_buf_start$86;
    $num_bits$89 = $num_bits$95;
    $num_extra$86 = $num_extra$92;
    $pIn_buf_cur$88 = $pIn_buf_cur$94;
    $pOut_buf_cur$83 = $pOut_buf_cur$89;
    label = 278;
    break;
   }
  case 296:
   {
    label = 0;
    HEAP32[$r >> 2] = 34;
    $bit_buf$97 = $bit_buf$96;
    $counter$93 = $counter$92;
    $dist$92 = $dist$91;
    $dist_from_out_buf_start$88 = $dist_from_out_buf_start$87;
    $num_bits$97 = $num_bits$96;
    $num_extra$94 = $num_extra$93;
    $pIn_buf_cur$96 = $pIn_buf_cur$95;
    $pOut_buf_cur$91 = $pOut_buf_cur$90;
    $status$71 = 0;
    label = 297;
    continue L71;
    break;
   }
  case 297:
   {
    label = 0;
    HEAP32[$16 >> 2] = $num_bits$97;
    HEAP32[$18 >> 2] = $bit_buf$97;
    HEAP32[$20 >> 2] = $dist$92;
    HEAP32[$22 >> 2] = $counter$93;
    HEAP32[$24 >> 2] = $num_extra$94;
    HEAP32[$26 >> 2] = $dist_from_out_buf_start$88;
    HEAP32[$pIn_buf_size >> 2] = $pIn_buf_cur$96 - $pIn_buf_next;
    $940 = $pOut_buf_cur$91 - $pOut_buf_next | 0;
    HEAP32[$pOut_buf_size >> 2] = $940;
    if (($decomp_flags & 9 | 0) != 0 & ($status$71 | 0) > -1) break L71; else {
     $$0 = $status$71;
     label = 310;
     break L71;
    }
    break;
   }
  }
  do if ((label | 0) == 28) {
   label = 0;
   if ($pIn_buf_cur$5 >>> 0 >= $1 >>> 0) {
    $bit_buf$7 = $bit_buf$6;
    $counter$7 = $counter$6;
    $dist$7 = $dist$6;
    $dist_from_out_buf_start$2 = $dist_from_out_buf_start$1;
    $num_bits$7 = $num_bits$6;
    $num_extra$7 = $num_extra$6;
    $pIn_buf_cur$6 = $pIn_buf_cur$5;
    $pOut_buf_cur$2 = $pOut_buf_cur$1;
    label = 29;
    continue L71;
   }
   $bit_buf$8 = $bit_buf$6;
   $c$0 = HEAPU8[$pIn_buf_cur$5 >> 0] | 0;
   $counter$8 = $counter$6;
   $dist$8 = $dist$6;
   $dist_from_out_buf_start$3 = $dist_from_out_buf_start$1;
   $num_bits$8 = $num_bits$6;
   $num_extra$8 = $num_extra$6;
   $pIn_buf_cur$7 = $pIn_buf_cur$5 + 1 | 0;
   $pOut_buf_cur$3 = $pOut_buf_cur$1;
   label = 34;
   continue L71;
  } else if ((label | 0) == 35) {
   label = 0;
   $96 = $bit_buf$9 & 7;
   HEAP32[$r + 20 >> 2] = $96;
   $98 = $bit_buf$9 >>> 3;
   $99 = $num_bits$9 + -3 | 0;
   $100 = $96 >>> 1;
   $101 = $r + 24 | 0;
   HEAP32[$101 >> 2] = $100;
   if (($100 | 0) == 1) {
    HEAP32[$r + 44 >> 2] = 288;
    HEAP32[$r + 48 >> 2] = 32;
    dest = $r + 3552 | 0;
    stop = dest + 32 | 0;
    do {
     HEAP8[dest >> 0] = 5;
     dest = dest + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    _memset($r + 64 | 0, 8, 144) | 0;
    dest = $r + 208 | 0;
    stop = dest + 112 | 0;
    do {
     HEAP8[dest >> 0] = 9;
     dest = dest + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    dest = $r + 320 | 0;
    stop = dest + 24 | 0;
    do {
     HEAP8[dest >> 0] = 7;
     dest = dest + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    $278 = $r + 344 | 0;
    $279 = $278;
    HEAP8[$279 >> 0] = 8;
    HEAP8[$279 + 1 >> 0] = 8;
    HEAP8[$279 + 2 >> 0] = 8;
    HEAP8[$279 + 3 >> 0] = 8;
    $281 = $278 + 4 | 0;
    HEAP8[$281 >> 0] = 8;
    HEAP8[$281 + 1 >> 0] = 8;
    HEAP8[$281 + 2 >> 0] = 8;
    HEAP8[$281 + 3 >> 0] = 8;
    $$pre$phiZ2D = $101;
    $bit_buf$43 = $98;
    $counter$42 = $counter$9;
    $dist$42 = $dist$9;
    $dist_from_out_buf_start$38 = $dist_from_out_buf_start$4;
    $num_bits$43 = $99;
    $num_extra$43 = $num_extra$9;
    $pIn_buf_cur$42 = $pIn_buf_cur$8;
    $pOut_buf_cur$38 = $pOut_buf_cur$4;
    label = 111;
    break;
   } else if (($100 | 0) == 3) {
    $bit_buf$32 = $98;
    $counter$31 = $counter$9;
    $dist$31 = $dist$9;
    $dist_from_out_buf_start$27 = $dist_from_out_buf_start$4;
    $num_bits$32 = $99;
    $num_extra$32 = $num_extra$9;
    $pIn_buf_cur$31 = $pIn_buf_cur$8;
    $pOut_buf_cur$27 = $pOut_buf_cur$4;
    label = 87;
    continue L71;
   } else if (!$100) if ($99 >>> 0 < ($99 & 7) >>> 0) {
    $bit_buf$10 = $98;
    $counter$10 = $counter$9;
    $dist$10 = $dist$9;
    $dist_from_out_buf_start$5 = $dist_from_out_buf_start$4;
    $num_bits$10 = $99;
    $num_extra$10 = $num_extra$9;
    $pIn_buf_cur$9 = $pIn_buf_cur$8;
    $pOut_buf_cur$5 = $pOut_buf_cur$4;
    label = 37;
    break;
   } else {
    $bit_buf$13 = $98;
    $dist$13 = $dist$9;
    $dist_from_out_buf_start$8 = $dist_from_out_buf_start$4;
    $num_bits$13 = $99;
    $num_extra$13 = $num_extra$9;
    $pIn_buf_cur$12 = $pIn_buf_cur$8;
    $pOut_buf_cur$8 = $pOut_buf_cur$4;
    label = 44;
    break;
   } else {
    $bit_buf$33 = $98;
    $counter$32 = 0;
    $dist$32 = $dist$9;
    $dist_from_out_buf_start$28 = $dist_from_out_buf_start$4;
    $num_bits$33 = $99;
    $num_extra$33 = $num_extra$9;
    $pIn_buf_cur$32 = $pIn_buf_cur$8;
    $pOut_buf_cur$28 = $pOut_buf_cur$4;
    label = 88;
    break;
   }
  } else if ((label | 0) == 173) {
   label = 0;
   $bit_buf$97 = $bit_buf$57$ph;
   $counter$93 = $counter$56$ph;
   $dist$92 = $dist$55$ph;
   $dist_from_out_buf_start$88 = $dist_from_out_buf_start$52$ph;
   $num_bits$97 = $num_bits$57$ph;
   $num_extra$94 = $num_extra$57$ph;
   $pIn_buf_cur$96 = $pIn_buf_cur$56$ph;
   $pOut_buf_cur$91 = $pOut_buf_cur$52$ph;
   $status$71 = $status$46$ph;
   label = 297;
   continue L71;
  } while (0);
  if ((label | 0) == 37) {
   label = 0;
   if ($pIn_buf_cur$9 >>> 0 >= $1 >>> 0) {
    $bit_buf$11 = $bit_buf$10;
    $counter$11 = $counter$10;
    $dist$11 = $dist$10;
    $dist_from_out_buf_start$6 = $dist_from_out_buf_start$5;
    $num_bits$11 = $num_bits$10;
    $num_extra$11 = $num_extra$10;
    $pIn_buf_cur$10 = $pIn_buf_cur$9;
    $pOut_buf_cur$6 = $pOut_buf_cur$5;
    label = 38;
    continue;
   }
   $bit_buf$12 = $bit_buf$10;
   $c1$0 = HEAPU8[$pIn_buf_cur$9 >> 0] | 0;
   $counter$12 = $counter$10;
   $dist$12 = $dist$10;
   $dist_from_out_buf_start$7 = $dist_from_out_buf_start$5;
   $num_bits$12 = $num_bits$10;
   $num_extra$12 = $num_extra$10;
   $pIn_buf_cur$11 = $pIn_buf_cur$9 + 1 | 0;
   $pOut_buf_cur$7 = $pOut_buf_cur$5;
   label = 43;
   continue;
  } else if ((label | 0) == 44) {
   label = 0;
   $119 = $num_bits$13 & 7;
   $bit_buf$14 = $bit_buf$13 >>> $119;
   $counter$13 = 0;
   $dist$14 = $dist$13;
   $dist_from_out_buf_start$9 = $dist_from_out_buf_start$8;
   $num_bits$14 = $num_bits$13 - $119 | 0;
   $num_extra$14 = $num_extra$13;
   $pIn_buf_cur$13 = $pIn_buf_cur$12;
   $pOut_buf_cur$9 = $pOut_buf_cur$8;
   label = 45;
  }
  do if ((label | 0) == 45) {
   label = 0;
   if ($counter$13 >>> 0 >= 4) {
    $162 = HEAPU8[$r + 10529 >> 0] << 8 | HEAPU8[$r + 10528 >> 0];
    if (($162 | 0) == ((HEAPU8[$r + 10531 >> 0] << 8 | HEAPU8[$r + 10530 >> 0]) ^ 65535 | 0)) {
     $bit_buf$22 = $bit_buf$14;
     $counter$21 = $162;
     $dist$22 = $dist$14;
     $dist_from_out_buf_start$17 = $dist_from_out_buf_start$9;
     $num_bits$22 = $num_bits$14;
     $num_extra$22 = $num_extra$14;
     $pIn_buf_cur$21 = $pIn_buf_cur$13;
     $pOut_buf_cur$17 = $pOut_buf_cur$9;
     label = 66;
     break;
    } else {
     $bit_buf$21 = $bit_buf$14;
     $counter$20 = $162;
     $dist$21 = $dist$14;
     $dist_from_out_buf_start$16 = $dist_from_out_buf_start$9;
     $num_bits$21 = $num_bits$14;
     $num_extra$21 = $num_extra$14;
     $pIn_buf_cur$20 = $pIn_buf_cur$13;
     $pOut_buf_cur$16 = $pOut_buf_cur$9;
     label = 65;
     continue L71;
    }
   }
   if ($num_bits$14) if ($num_bits$14 >>> 0 < 8) {
    $bit_buf$15 = $bit_buf$14;
    $counter$14 = $counter$13;
    $dist$15 = $dist$14;
    $dist_from_out_buf_start$10 = $dist_from_out_buf_start$9;
    $num_bits$15 = $num_bits$14;
    $num_extra$15 = $num_extra$14;
    $pIn_buf_cur$14 = $pIn_buf_cur$13;
    $pOut_buf_cur$10 = $pOut_buf_cur$9;
    label = 48;
    break;
   } else {
    $bit_buf$18 = $bit_buf$14;
    $counter$17 = $counter$13;
    $dist$18 = $dist$14;
    $dist_from_out_buf_start$13 = $dist_from_out_buf_start$9;
    $num_bits$18 = $num_bits$14;
    $num_extra$18 = $num_extra$14;
    $pIn_buf_cur$17 = $pIn_buf_cur$13;
    $pOut_buf_cur$13 = $pOut_buf_cur$9;
    label = 55;
    break;
   }
   if ($pIn_buf_cur$13 >>> 0 >= $1 >>> 0) {
    $bit_buf$19 = $bit_buf$14;
    $counter$18 = $counter$13;
    $dist$19 = $dist$14;
    $dist_from_out_buf_start$14 = $dist_from_out_buf_start$9;
    $num_bits$19 = 0;
    $num_extra$19 = $num_extra$14;
    $pIn_buf_cur$18 = $pIn_buf_cur$13;
    $pOut_buf_cur$14 = $pOut_buf_cur$9;
    label = 57;
    continue L71;
   }
   HEAP8[$r + $counter$13 + 10528 >> 0] = HEAP8[$pIn_buf_cur$13 >> 0] | 0;
   $bit_buf$20 = $bit_buf$14;
   $counter$19 = $counter$13;
   $dist$20 = $dist$14;
   $dist_from_out_buf_start$15 = $dist_from_out_buf_start$9;
   $num_bits$20 = 0;
   $num_extra$20 = $num_extra$14;
   $pIn_buf_cur$19 = $pIn_buf_cur$13 + 1 | 0;
   $pOut_buf_cur$15 = $pOut_buf_cur$9;
   label = 63;
   continue L71;
  } while (0);
  if ((label | 0) == 48) {
   label = 0;
   if ($pIn_buf_cur$14 >>> 0 >= $1 >>> 0) {
    $bit_buf$16 = $bit_buf$15;
    $counter$15 = $counter$14;
    $dist$16 = $dist$15;
    $dist_from_out_buf_start$11 = $dist_from_out_buf_start$10;
    $num_bits$16 = $num_bits$15;
    $num_extra$16 = $num_extra$15;
    $pIn_buf_cur$15 = $pIn_buf_cur$14;
    $pOut_buf_cur$11 = $pOut_buf_cur$10;
    label = 49;
    continue;
   }
   $bit_buf$17 = $bit_buf$15;
   $c2$0 = HEAPU8[$pIn_buf_cur$14 >> 0] | 0;
   $counter$16 = $counter$14;
   $dist$17 = $dist$15;
   $dist_from_out_buf_start$12 = $dist_from_out_buf_start$10;
   $num_bits$17 = $num_bits$15;
   $num_extra$17 = $num_extra$15;
   $pIn_buf_cur$16 = $pIn_buf_cur$14 + 1 | 0;
   $pOut_buf_cur$12 = $pOut_buf_cur$10;
   label = 54;
   continue;
  } else if ((label | 0) == 55) {
   label = 0;
   HEAP8[$r + $counter$17 + 10528 >> 0] = $bit_buf$18;
   $bit_buf$20 = $bit_buf$18 >>> 8;
   $counter$19 = $counter$17;
   $dist$20 = $dist$18;
   $dist_from_out_buf_start$15 = $dist_from_out_buf_start$13;
   $num_bits$20 = $num_bits$18 + -8 | 0;
   $num_extra$20 = $num_extra$18;
   $pIn_buf_cur$19 = $pIn_buf_cur$17;
   $pOut_buf_cur$15 = $pOut_buf_cur$13;
   label = 63;
   continue;
  } else if ((label | 0) == 66) {
   label = 0;
   if (($counter$21 | 0) == 0 | ($num_bits$22 | 0) == 0) {
    $bit_buf$28 = $bit_buf$22;
    $counter$27 = $counter$21;
    $dist$27 = $dist$22;
    $dist_from_out_buf_start$23 = $dist_from_out_buf_start$17;
    $num_bits$28 = $num_bits$22;
    $num_extra$28 = $num_extra$22;
    $pIn_buf_cur$27 = $pIn_buf_cur$21;
    $pOut_buf_cur$23 = $pOut_buf_cur$17;
    label = 79;
   } else if ($num_bits$22 >>> 0 < 8) {
    $bit_buf$23 = $bit_buf$22;
    $counter$22 = $counter$21;
    $dist$23 = $dist$22;
    $dist_from_out_buf_start$18 = $dist_from_out_buf_start$17;
    $num_bits$23 = $num_bits$22;
    $num_extra$23 = $num_extra$22;
    $pIn_buf_cur$22 = $pIn_buf_cur$21;
    $pOut_buf_cur$18 = $pOut_buf_cur$17;
    label = 68;
   } else {
    $bit_buf$26 = $bit_buf$22;
    $counter$25 = $counter$21;
    $dist_from_out_buf_start$21 = $dist_from_out_buf_start$17;
    $num_bits$26 = $num_bits$22;
    $num_extra$26 = $num_extra$22;
    $pIn_buf_cur$25 = $pIn_buf_cur$21;
    $pOut_buf_cur$21 = $pOut_buf_cur$17;
    label = 75;
   }
  }
  if ((label | 0) == 68) {
   label = 0;
   if ($pIn_buf_cur$22 >>> 0 >= $1 >>> 0) {
    $bit_buf$24 = $bit_buf$23;
    $counter$23 = $counter$22;
    $dist$24 = $dist$23;
    $dist_from_out_buf_start$19 = $dist_from_out_buf_start$18;
    $num_bits$24 = $num_bits$23;
    $num_extra$24 = $num_extra$23;
    $pIn_buf_cur$23 = $pIn_buf_cur$22;
    $pOut_buf_cur$19 = $pOut_buf_cur$18;
    label = 69;
    continue;
   }
   $bit_buf$25 = $bit_buf$23;
   $c3$0 = HEAPU8[$pIn_buf_cur$22 >> 0] | 0;
   $counter$24 = $counter$22;
   $dist$25 = $dist$23;
   $dist_from_out_buf_start$20 = $dist_from_out_buf_start$18;
   $num_bits$25 = $num_bits$23;
   $num_extra$25 = $num_extra$23;
   $pIn_buf_cur$24 = $pIn_buf_cur$22 + 1 | 0;
   $pOut_buf_cur$20 = $pOut_buf_cur$18;
   label = 74;
   continue;
  } else if ((label | 0) == 75) {
   label = 0;
   $bit_buf$27 = $bit_buf$26 >>> 8;
   $counter$26 = $counter$25;
   $dist$26 = $bit_buf$26 & 255;
   $dist_from_out_buf_start$22 = $dist_from_out_buf_start$21;
   $num_bits$27 = $num_bits$26 + -8 | 0;
   $num_extra$27 = $num_extra$26;
   $pIn_buf_cur$26 = $pIn_buf_cur$25;
   $pOut_buf_cur$22 = $pOut_buf_cur$21;
   label = 76;
   continue;
  } else if ((label | 0) == 79) {
   label = 0;
   if (!$counter$27) {
    $bit_buf$84 = $bit_buf$28;
    $counter$81 = 0;
    $dist$79 = $dist$27;
    $dist_from_out_buf_start$75 = $dist_from_out_buf_start$23;
    $num_bits$84 = $num_bits$28;
    $num_extra$81 = $num_extra$28;
    $pIn_buf_cur$83 = $pIn_buf_cur$27;
    $pOut_buf_cur$78 = $pOut_buf_cur$23;
    label = 267;
   } else {
    $bit_buf$29 = $bit_buf$28;
    $counter$28 = $counter$27;
    $dist$28 = $dist$27;
    $dist_from_out_buf_start$24 = $dist_from_out_buf_start$23;
    $num_bits$29 = $num_bits$28;
    $num_extra$29 = $num_extra$28;
    $pIn_buf_cur$28 = $pIn_buf_cur$27;
    $pOut_buf_cur$24 = $pOut_buf_cur$23;
    label = 80;
    continue;
   }
  }
  L184 : while (1) {
   L185 : switch (label | 0) {
   case 88:
    {
     label = 0;
     if ($counter$32 >>> 0 < 3) {
      $215 = HEAP8[94448 + $counter$32 >> 0] | 0;
      if ($num_bits$33 >>> 0 < $215 << 24 >> 24 >>> 0) {
       $bit_buf$34 = $bit_buf$33;
       $counter$33 = $counter$32;
       $dist$33 = $dist$32;
       $dist_from_out_buf_start$29 = $dist_from_out_buf_start$28;
       $num_bits$34 = $num_bits$33;
       $num_extra$34 = $num_extra$33;
       $pIn_buf_cur$33 = $pIn_buf_cur$32;
       $pOut_buf_cur$29 = $pOut_buf_cur$28;
       label = 90;
       continue L184;
      } else {
       $236 = $215;
       $bit_buf$37 = $bit_buf$33;
       $counter$36 = $counter$32;
       $dist$36 = $dist$32;
       $dist_from_out_buf_start$32 = $dist_from_out_buf_start$28;
       $num_bits$37 = $num_bits$33;
       $num_extra$37 = $num_extra$33;
       $pIn_buf_cur$36 = $pIn_buf_cur$32;
       $pOut_buf_cur$32 = $pOut_buf_cur$28;
       label = 97;
       continue L184;
      }
     } else {
      _memset($r + 7040 | 0, 0, 288) | 0;
      $bit_buf$38 = $bit_buf$33;
      $counter$37 = 0;
      $dist$37 = $dist$32;
      $dist_from_out_buf_start$33 = $dist_from_out_buf_start$28;
      $num_bits$38 = $num_bits$33;
      $num_extra$38 = $num_extra$33;
      $pIn_buf_cur$37 = $pIn_buf_cur$32;
      $pOut_buf_cur$33 = $pOut_buf_cur$28;
      label = 99;
      break;
     }
     break;
    }
   case 90:
    {
     label = 0;
     if ($pIn_buf_cur$33 >>> 0 < $1 >>> 0) {
      label = 95;
      break L184;
     } else {
      $bit_buf$35 = $bit_buf$34;
      $counter$34 = $counter$33;
      $dist$34 = $dist$33;
      $dist_from_out_buf_start$30 = $dist_from_out_buf_start$29;
      $num_bits$35 = $num_bits$34;
      $num_extra$35 = $num_extra$34;
      $pIn_buf_cur$34 = $pIn_buf_cur$33;
      $pOut_buf_cur$30 = $pOut_buf_cur$29;
      label = 91;
      continue L71;
     }
     break;
    }
   case 97:
    {
     label = 0;
     $235 = $236 << 24 >> 24;
     HEAP32[$r + ($counter$36 << 2) + 44 >> 2] = ((1 << $235) + -1 & $bit_buf$37) + (HEAP32[94432 + ($counter$36 << 2) >> 2] | 0);
     $bit_buf$33 = $bit_buf$37 >>> $235;
     $counter$32 = $counter$36 + 1 | 0;
     $dist$32 = $dist$36;
     $dist_from_out_buf_start$28 = $dist_from_out_buf_start$32;
     $num_bits$33 = $num_bits$37 - $235 | 0;
     $num_extra$33 = $num_extra$37;
     $pIn_buf_cur$32 = $pIn_buf_cur$36;
     $pOut_buf_cur$28 = $pOut_buf_cur$32;
     label = 88;
     continue L184;
     break;
    }
   case 101:
    {
     label = 0;
     if ($pIn_buf_cur$38 >>> 0 < $1 >>> 0) {
      label = 106;
      break L184;
     } else {
      $bit_buf$40 = $bit_buf$39;
      $counter$39 = $counter$38;
      $dist$39 = $dist$38;
      $dist_from_out_buf_start$35 = $dist_from_out_buf_start$34;
      $num_bits$40 = $num_bits$39;
      $num_extra$40 = $num_extra$39;
      $pIn_buf_cur$39 = $pIn_buf_cur$38;
      $pOut_buf_cur$35 = $pOut_buf_cur$34;
      label = 102;
      continue L71;
     }
     break;
    }
   case 108:
    {
     label = 0;
     HEAP8[$r + (HEAPU8[94560 + $counter$41 >> 0] | 0) + 7040 >> 0] = $bit_buf$42 & 7;
     $bit_buf$38 = $bit_buf$42 >>> 3;
     $counter$37 = $counter$41 + 1 | 0;
     $dist$37 = $dist$41;
     $dist_from_out_buf_start$33 = $dist_from_out_buf_start$37;
     $num_bits$38 = $num_bits$42 + -3 | 0;
     $num_extra$38 = $num_extra$42;
     $pIn_buf_cur$37 = $pIn_buf_cur$41;
     $pOut_buf_cur$33 = $pOut_buf_cur$37;
     label = 99;
     break;
    }
   case 111:
    {
     label = 0;
     $282 = HEAP32[$$pre$phiZ2D >> 2] | 0;
     if (($282 | 0) <= -1) {
      $bit_buf$58$ph = $bit_buf$43;
      $counter$57$ph = $counter$42;
      $dist$56$ph = $dist$42;
      $dist_from_out_buf_start$53$ph = $dist_from_out_buf_start$38;
      $num_bits$58$ph = $num_bits$43;
      $num_extra$58$ph = $num_extra$43;
      $pIn_buf_cur$57$ph = $pIn_buf_cur$42;
      $pOut_buf_cur$53$ph = $pOut_buf_cur$38;
      label = 199;
      continue L184;
     }
     dest = $total_syms + 0 | 0;
     stop = dest + 64 | 0;
     do {
      HEAP32[dest >> 2] = 0;
      dest = dest + 4 | 0;
     } while ((dest | 0) < (stop | 0));
     _memset($r + ($282 * 3488 | 0) + 352 | 0, 0, 3200) | 0;
     $287 = HEAP32[$r + (HEAP32[$$pre$phiZ2D >> 2] << 2) + 44 >> 2] | 0;
     if (!$287) {
      $299 = 0;
      $302 = 0;
      $307 = 0;
      $312 = 0;
      $317 = 0;
      $322 = 0;
      $327 = 0;
      $332 = 0;
      $337 = 0;
      $342 = 0;
      $347 = 0;
      $352 = 0;
      $357 = 0;
      $362 = 0;
     } else {
      $i6$076 = 0;
      do {
       $292 = $total_syms + (HEAPU8[$r + ($282 * 3488 | 0) + $i6$076 + 64 >> 0] << 2) | 0;
       HEAP32[$292 >> 2] = (HEAP32[$292 >> 2] | 0) + 1;
       $i6$076 = $i6$076 + 1 | 0;
      } while ($i6$076 >>> 0 < $287 >>> 0);
      $299 = HEAP32[$total_syms + 4 >> 2] | 0;
      $302 = HEAP32[$total_syms + 8 >> 2] | 0;
      $307 = HEAP32[$total_syms + 12 >> 2] | 0;
      $312 = HEAP32[$total_syms + 16 >> 2] | 0;
      $317 = HEAP32[$total_syms + 20 >> 2] | 0;
      $322 = HEAP32[$total_syms + 24 >> 2] | 0;
      $327 = HEAP32[$total_syms + 28 >> 2] | 0;
      $332 = HEAP32[$total_syms + 32 >> 2] | 0;
      $337 = HEAP32[$total_syms + 36 >> 2] | 0;
      $342 = HEAP32[$total_syms + 40 >> 2] | 0;
      $347 = HEAP32[$total_syms + 44 >> 2] | 0;
      $352 = HEAP32[$total_syms + 48 >> 2] | 0;
      $357 = HEAP32[$total_syms + 52 >> 2] | 0;
      $362 = HEAP32[$total_syms + 56 >> 2] | 0;
     }
     HEAP32[$next_code + 4 >> 2] = 0;
     HEAP32[$next_code >> 2] = 0;
     $298 = $299 << 1;
     HEAP32[$next_code + 8 >> 2] = $298;
     $304 = $302 + $298 << 1;
     HEAP32[$next_code + 12 >> 2] = $304;
     $309 = $307 + $304 << 1;
     HEAP32[$next_code + 16 >> 2] = $309;
     $314 = $312 + $309 << 1;
     HEAP32[$next_code + 20 >> 2] = $314;
     $319 = $317 + $314 << 1;
     HEAP32[$next_code + 24 >> 2] = $319;
     $324 = $322 + $319 << 1;
     HEAP32[$next_code + 28 >> 2] = $324;
     $329 = $327 + $324 << 1;
     HEAP32[$next_code + 32 >> 2] = $329;
     $334 = $332 + $329 << 1;
     HEAP32[$next_code + 36 >> 2] = $334;
     $339 = $337 + $334 << 1;
     HEAP32[$next_code + 40 >> 2] = $339;
     $344 = $342 + $339 << 1;
     HEAP32[$next_code + 44 >> 2] = $344;
     $349 = $347 + $344 << 1;
     HEAP32[$next_code + 48 >> 2] = $349;
     $354 = $352 + $349 << 1;
     HEAP32[$next_code + 52 >> 2] = $354;
     $359 = $357 + $354 << 1;
     HEAP32[$next_code + 56 >> 2] = $359;
     $364 = $362 + $359 << 1;
     HEAP32[$next_code + 60 >> 2] = $364;
     $367 = HEAP32[$total_syms + 60 >> 2] | 0;
     $370 = $367 + $364 << 1;
     HEAP32[$next_code + 64 >> 2] = $370;
     if (($370 | 0) != 65536 ? ($367 + ($362 + ($357 + ($352 + ($347 + ($342 + ($337 + ($332 + ($327 + ($322 + ($317 + ($312 + ($307 + ($302 + $299))))))))))))) | 0) >>> 0 > 1 : 0) {
      $bit_buf$44 = $bit_buf$43;
      $counter$43 = $counter$42;
      $dist$43 = $dist$42;
      $dist_from_out_buf_start$39 = $dist_from_out_buf_start$38;
      $num_bits$44 = $num_bits$43;
      $num_extra$44 = $num_extra$43;
      $pIn_buf_cur$43 = $pIn_buf_cur$42;
      $pOut_buf_cur$39 = $pOut_buf_cur$38;
      label = 117;
      continue L71;
     }
     $374 = HEAP32[$$pre$phiZ2D >> 2] | 0;
     if (!(HEAP32[$r + ($374 << 2) + 44 >> 2] | 0)) $$lcssa66 = $374; else {
      $sym_index$068 = 0;
      $tree_next$067 = -1;
      while (1) {
       $379 = HEAP8[$r + ($282 * 3488 | 0) + $sym_index$068 + 64 >> 0] | 0;
       $380 = $379 & 255;
       L199 : do if (!($379 << 24 >> 24)) $tree_next$4 = $tree_next$067; else {
        $382 = $next_code + ($380 << 2) | 0;
        $383 = HEAP32[$382 >> 2] | 0;
        HEAP32[$382 >> 2] = $383 + 1;
        $cur_code$048 = $383;
        $l$047 = $380;
        $rev_code$046 = 0;
        while (1) {
         $387 = $cur_code$048 & 1 | $rev_code$046 << 1;
         $l$047 = $l$047 + -1 | 0;
         if (!$l$047) break; else {
          $cur_code$048 = $cur_code$048 >>> 1;
          $rev_code$046 = $387;
         }
        }
        if (($379 & 255) < 11) {
         $394 = ($380 << 9 | $sym_index$068) & 65535;
         if ($387 >>> 0 >= 1024) {
          $tree_next$4 = $tree_next$067;
          break;
         }
         $396 = 1 << $380;
         $rev_code$162 = $387;
         while (1) {
          HEAP16[$r + ($282 * 3488 | 0) + ($rev_code$162 << 1) + 352 >> 1] = $394;
          $rev_code$162 = $rev_code$162 + $396 | 0;
          if ($rev_code$162 >>> 0 >= 1024) {
           $tree_next$4 = $tree_next$067;
           break L199;
          }
         }
        }
        $401 = $r + ($282 * 3488 | 0) + (($387 & 1023) << 1) + 352 | 0;
        $402 = HEAP16[$401 >> 1] | 0;
        if (!($402 << 16 >> 16)) {
         HEAP16[$401 >> 1] = $tree_next$067;
         $tree_cur$0 = $tree_next$067;
         $tree_next$1 = $tree_next$067 + -2 | 0;
        } else {
         $tree_cur$0 = $402 << 16 >> 16;
         $tree_next$1 = $tree_next$067;
        }
        $407 = $rev_code$046 >>> 9;
        $411 = $tree_cur$0 - ($407 & 1) | 0;
        if (($379 & 255) > 11) {
         $413 = $411;
         $423 = $407 & 4194303;
         $j$055 = $380;
         $tree_next$254 = $tree_next$1;
         while (1) {
          $414 = $r + ($282 * 3488 | 0) + (~$413 << 1) + 2400 | 0;
          $415 = HEAP16[$414 >> 1] | 0;
          if (!($415 << 16 >> 16)) {
           HEAP16[$414 >> 1] = $tree_next$254;
           $tree_cur$2 = $tree_next$254;
           $tree_next$3 = $tree_next$254 + -2 | 0;
          } else {
           $tree_cur$2 = $415 << 16 >> 16;
           $tree_next$3 = $tree_next$254;
          }
          $j$055 = $j$055 + -1 | 0;
          $423 = $423 >>> 1;
          $425 = $tree_cur$2 - ($423 & 1) | 0;
          if ($j$055 >>> 0 <= 11) {
           $$lcssa53 = $425;
           $tree_next$2$lcssa = $tree_next$3;
           break;
          } else {
           $413 = $425;
           $tree_next$254 = $tree_next$3;
          }
         }
        } else {
         $$lcssa53 = $411;
         $tree_next$2$lcssa = $tree_next$1;
        }
        HEAP16[$r + ($282 * 3488 | 0) + (~$$lcssa53 << 1) + 2400 >> 1] = $sym_index$068;
        $tree_next$4 = $tree_next$2$lcssa;
       } while (0);
       $sym_index$068 = $sym_index$068 + 1 | 0;
       $430 = HEAP32[$$pre$phiZ2D >> 2] | 0;
       if ($sym_index$068 >>> 0 >= (HEAP32[$r + ($430 << 2) + 44 >> 2] | 0) >>> 0) {
        $$lcssa66 = $430;
        break;
       } else $tree_next$067 = $tree_next$4;
      }
     }
     if (($$lcssa66 | 0) == 2) {
      $bit_buf$45 = $bit_buf$43;
      $counter$44 = 0;
      $dist$44 = $dist$42;
      $dist_from_out_buf_start$40 = $dist_from_out_buf_start$38;
      $num_bits$45 = $num_bits$43;
      $num_extra$45 = $num_extra$43;
      $pIn_buf_cur$44 = $pIn_buf_cur$42;
      $pOut_buf_cur$40 = $pOut_buf_cur$38;
      label = 135;
     } else {
      $$pre$phi280Z2D = $total_syms;
      $$pre$phi282Z2D = $next_code;
      $560 = $$lcssa66;
      $bit_buf$57 = $bit_buf$43;
      $counter$56 = $counter$42;
      $dist$55 = $dist$42;
      $dist_from_out_buf_start$52 = $dist_from_out_buf_start$38;
      $num_bits$57 = $num_bits$43;
      $num_extra$57 = $num_extra$43;
      $pIn_buf_cur$56 = $pIn_buf_cur$42;
      $pOut_buf_cur$52 = $pOut_buf_cur$38;
      label = 174;
     }
     break;
    }
   case 138:
    {
     label = 0;
     $448 = HEAP16[$r + (($bit_buf$46 & 1023) << 1) + 7328 >> 1] | 0;
     $449 = $448 << 16 >> 16;
     if ($448 << 16 >> 16 > -1) {
      $451 = $449 >> 9;
      if (($451 | 0) == 0 | $num_bits$46 >>> 0 < $451 >>> 0) {
       label = 144;
       break L184;
      } else {
       $bit_buf$49 = $bit_buf$46;
       $counter$48 = $counter$45;
       $dist_from_out_buf_start$44 = $dist_from_out_buf_start$41;
       $num_bits$49 = $num_bits$46;
       $num_extra$49 = $num_extra$46;
       $pIn_buf_cur$48 = $pIn_buf_cur$45;
       $pOut_buf_cur$44 = $pOut_buf_cur$41;
       label = 152;
       continue L184;
      }
     }
     if ($num_bits$46 >>> 0 > 10) {
      $code_len$0 = 10;
      $temp$0 = $449;
     } else {
      label = 144;
      break L184;
     }
     while (1) {
      $460 = HEAP16[$r + (($bit_buf$46 >>> $code_len$0 & 1) + ~$temp$0 << 1) + 9376 >> 1] | 0;
      if ($460 << 16 >> 16 >= 0) {
       $bit_buf$49 = $bit_buf$46;
       $counter$48 = $counter$45;
       $dist_from_out_buf_start$44 = $dist_from_out_buf_start$41;
       $num_bits$49 = $num_bits$46;
       $num_extra$49 = $num_extra$46;
       $pIn_buf_cur$48 = $pIn_buf_cur$45;
       $pOut_buf_cur$44 = $pOut_buf_cur$41;
       label = 152;
       continue L184;
      }
      if ($num_bits$46 >>> 0 < ($code_len$0 + 2 | 0) >>> 0) break; else {
       $code_len$0 = $code_len$0 + 1 | 0;
       $temp$0 = $460 << 16 >> 16;
      }
     }
     if ($460 << 16 >> 16 > -1) {
      $bit_buf$49 = $bit_buf$46;
      $counter$48 = $counter$45;
      $dist_from_out_buf_start$44 = $dist_from_out_buf_start$41;
      $num_bits$49 = $num_bits$46;
      $num_extra$49 = $num_extra$46;
      $pIn_buf_cur$48 = $pIn_buf_cur$45;
      $pOut_buf_cur$44 = $pOut_buf_cur$41;
      label = 152;
      continue L184;
     } else {
      label = 144;
      break L184;
     }
     break;
    }
   case 152:
    {
     label = 0;
     $495 = HEAP16[$r + (($bit_buf$49 & 1023) << 1) + 7328 >> 1] | 0;
     $496 = $495 << 16 >> 16;
     if ($495 << 16 >> 16 > -1) {
      $code_len$2 = $496 >> 9;
      $temp$2 = $496 & 511;
     } else {
      $code_len$1 = 10;
      $temp$1 = $496;
      while (1) {
       $501 = $code_len$1 + 1 | 0;
       $506 = HEAP16[$r + (($bit_buf$49 >>> $code_len$1 & 1) + ~$temp$1 << 1) + 9376 >> 1] | 0;
       $507 = $506 << 16 >> 16;
       if ($506 << 16 >> 16 < 0) {
        $code_len$1 = $501;
        $temp$1 = $507;
       } else {
        $code_len$2 = $501;
        $temp$2 = $507;
        break;
       }
      }
     }
     $509 = $bit_buf$49 >>> $code_len$2;
     $510 = $num_bits$49 - $code_len$2 | 0;
     if ($temp$2 >>> 0 < 16) {
      HEAP8[$r + $counter$48 + 10532 >> 0] = $temp$2;
      $bit_buf$45 = $509;
      $counter$44 = $counter$48 + 1 | 0;
      $dist$44 = $temp$2;
      $dist_from_out_buf_start$40 = $dist_from_out_buf_start$44;
      $num_bits$45 = $510;
      $num_extra$45 = $num_extra$49;
      $pIn_buf_cur$44 = $pIn_buf_cur$48;
      $pOut_buf_cur$40 = $pOut_buf_cur$44;
      label = 135;
      break;
     }
     if (($temp$2 | 0) == 16 & ($counter$48 | 0) == 0) {
      $bit_buf$50 = $509;
      $counter$49 = 0;
      $dist$48 = 16;
      $dist_from_out_buf_start$45 = $dist_from_out_buf_start$44;
      $num_bits$50 = $510;
      $num_extra$50 = $num_extra$49;
      $pIn_buf_cur$49 = $pIn_buf_cur$48;
      $pOut_buf_cur$45 = $pOut_buf_cur$44;
      label = 158;
      continue L71;
     }
     $520 = HEAP8[94456 + ($temp$2 + -16) >> 0] | 0;
     if ($510 >>> 0 < $520 >>> 0) {
      $bit_buf$51 = $509;
      $counter$50 = $counter$48;
      $dist$49 = $temp$2;
      $dist_from_out_buf_start$46 = $dist_from_out_buf_start$44;
      $num_bits$51 = $510;
      $num_extra$51 = $520;
      $pIn_buf_cur$50 = $pIn_buf_cur$48;
      $pOut_buf_cur$46 = $pOut_buf_cur$44;
      label = 160;
      continue L184;
     } else {
      $bit_buf$54 = $509;
      $counter$53 = $counter$48;
      $dist$52 = $temp$2;
      $dist_from_out_buf_start$49 = $dist_from_out_buf_start$44;
      $num_bits$54 = $510;
      $num_extra$54 = $520;
      $pIn_buf_cur$53 = $pIn_buf_cur$48;
      $pOut_buf_cur$49 = $pOut_buf_cur$44;
      label = 167;
      continue L184;
     }
     break;
    }
   case 160:
    {
     label = 0;
     if ($pIn_buf_cur$50 >>> 0 < $1 >>> 0) {
      label = 165;
      break L184;
     } else {
      $bit_buf$52 = $bit_buf$51;
      $counter$51 = $counter$50;
      $dist$50 = $dist$49;
      $dist_from_out_buf_start$47 = $dist_from_out_buf_start$46;
      $num_bits$52 = $num_bits$51;
      $num_extra$52 = $num_extra$51;
      $pIn_buf_cur$51 = $pIn_buf_cur$50;
      $pOut_buf_cur$47 = $pOut_buf_cur$46;
      label = 161;
      continue L71;
     }
     break;
    }
   case 167:
    {
     label = 0;
     $545 = (HEAP8[94464 + ($dist$52 + -16) >> 0] | 0) + ((1 << $num_extra$54) + -1 & $bit_buf$54) | 0;
     if (($dist$52 | 0) == 16) $551 = HEAP8[$r + ($counter$53 + -1) + 10532 >> 0] | 0; else $551 = 0;
     _memset($r + $counter$53 + 10532 | 0, $551 | 0, $545 | 0) | 0;
     $bit_buf$45 = $bit_buf$54 >>> $num_extra$54;
     $counter$44 = $545 + $counter$53 | 0;
     $dist$44 = $dist$52;
     $dist_from_out_buf_start$40 = $dist_from_out_buf_start$49;
     $num_bits$45 = $num_bits$54 - $num_extra$54 | 0;
     $num_extra$45 = $num_extra$54;
     $pIn_buf_cur$44 = $pIn_buf_cur$53;
     $pOut_buf_cur$40 = $pOut_buf_cur$49;
     label = 135;
     break;
    }
   case 178:
    {
     label = 0;
     $569 = HEAP16[$r + (($bit_buf$59 & 1023) << 1) + 352 >> 1] | 0;
     $570 = $569 << 16 >> 16;
     if ($569 << 16 >> 16 > -1) {
      $572 = $570 >> 9;
      if (($572 | 0) == 0 | $num_bits$59 >>> 0 < $572 >>> 0) {
       label = 184;
       break L184;
      } else {
       $bit_buf$62 = $bit_buf$59;
       $dist$60 = $dist$57;
       $dist_from_out_buf_start$57 = $dist_from_out_buf_start$54;
       $num_bits$62 = $num_bits$59;
       $num_extra$62 = $num_extra$59;
       $pIn_buf_cur$61 = $pIn_buf_cur$58;
       $pOut_buf_cur$57 = $pOut_buf_cur$54;
       label = 192;
       continue L184;
      }
     }
     if ($num_bits$59 >>> 0 > 10) {
      $code_len11$0 = 10;
      $temp10$0 = $570;
     } else {
      label = 184;
      break L184;
     }
     while (1) {
      $581 = HEAP16[$r + (($bit_buf$59 >>> $code_len11$0 & 1) + ~$temp10$0 << 1) + 2400 >> 1] | 0;
      if ($581 << 16 >> 16 >= 0) {
       $bit_buf$62 = $bit_buf$59;
       $dist$60 = $dist$57;
       $dist_from_out_buf_start$57 = $dist_from_out_buf_start$54;
       $num_bits$62 = $num_bits$59;
       $num_extra$62 = $num_extra$59;
       $pIn_buf_cur$61 = $pIn_buf_cur$58;
       $pOut_buf_cur$57 = $pOut_buf_cur$54;
       label = 192;
       continue L184;
      }
      if ($num_bits$59 >>> 0 < ($code_len11$0 + 2 | 0) >>> 0) break; else {
       $code_len11$0 = $code_len11$0 + 1 | 0;
       $temp10$0 = $581 << 16 >> 16;
      }
     }
     if ($581 << 16 >> 16 > -1) {
      $bit_buf$62 = $bit_buf$59;
      $dist$60 = $dist$57;
      $dist_from_out_buf_start$57 = $dist_from_out_buf_start$54;
      $num_bits$62 = $num_bits$59;
      $num_extra$62 = $num_extra$59;
      $pIn_buf_cur$61 = $pIn_buf_cur$58;
      $pOut_buf_cur$57 = $pOut_buf_cur$54;
      label = 192;
      continue L184;
     } else {
      label = 184;
      break L184;
     }
     break;
    }
   case 192:
    {
     label = 0;
     $616 = HEAP16[$r + (($bit_buf$62 & 1023) << 1) + 352 >> 1] | 0;
     $617 = $616 << 16 >> 16;
     if ($616 << 16 >> 16 > -1) {
      $code_len11$2 = $617 >> 9;
      $temp10$2 = $617 & 511;
     } else {
      $code_len11$1 = 10;
      $temp10$1 = $617;
      while (1) {
       $622 = $code_len11$1 + 1 | 0;
       $627 = HEAP16[$r + (($bit_buf$62 >>> $code_len11$1 & 1) + ~$temp10$1 << 1) + 2400 >> 1] | 0;
       $628 = $627 << 16 >> 16;
       if ($627 << 16 >> 16 < 0) {
        $code_len11$1 = $622;
        $temp10$1 = $628;
       } else {
        $code_len11$2 = $622;
        $temp10$2 = $628;
        break;
       }
      }
     }
     $630 = $bit_buf$62 >>> $code_len11$2;
     $631 = $num_bits$62 - $code_len11$2 | 0;
     if ($temp10$2 >>> 0 > 255) {
      $bit_buf$66 = $630;
      $counter$62 = $temp10$2;
      $dist$62 = $dist$60;
      $dist_from_out_buf_start$59 = $dist_from_out_buf_start$57;
      $num_bits$66 = $631;
      $num_extra$64 = $num_extra$62;
      $pIn_buf_cur$65 = $pIn_buf_cur$61;
      $pOut_buf_cur$59 = $pOut_buf_cur$57;
      label = 215;
     } else {
      $bit_buf$63 = $630;
      $counter$61 = $temp10$2;
      $dist$61 = $dist$60;
      $dist_from_out_buf_start$58 = $dist_from_out_buf_start$57;
      $num_bits$63 = $631;
      $num_extra$63 = $num_extra$62;
      $pIn_buf_cur$62 = $pIn_buf_cur$61;
      $pOut_buf_cur$58 = $pOut_buf_cur$57;
      label = 196;
      continue L71;
     }
     break;
    }
   case 199:
    {
     label = 0;
     $636 = $1;
     $638 = $636 - $pIn_buf_cur$57$ph | 0;
     L236 : do if (($638 | 0) < 4) {
      $$lcssa118 = $638;
      $bit_buf$58$lcssa = $bit_buf$58$ph;
      $counter$57$lcssa = $counter$57$ph;
      $num_bits$58$lcssa = $num_bits$58$ph;
      $pIn_buf_cur$57$lcssa = $pIn_buf_cur$57$ph;
      $pOut_buf_cur$53$lcssa = $pOut_buf_cur$53$ph;
     } else {
      $563 = $3;
      $1014 = $638;
      $bit_buf$58131 = $bit_buf$58$ph;
      $counter$57132 = $counter$57$ph;
      $num_bits$58133 = $num_bits$58$ph;
      $pIn_buf_cur$57130 = $pIn_buf_cur$57$ph;
      $pOut_buf_cur$53129 = $pOut_buf_cur$53$ph;
      while (1) {
       if (($563 - $pOut_buf_cur$53129 | 0) < 2) {
        $$lcssa118 = $1014;
        $bit_buf$58$lcssa = $bit_buf$58131;
        $counter$57$lcssa = $counter$57132;
        $num_bits$58$lcssa = $num_bits$58133;
        $pIn_buf_cur$57$lcssa = $pIn_buf_cur$57130;
        $pOut_buf_cur$53$lcssa = $pOut_buf_cur$53129;
        break L236;
       }
       if ($num_bits$58133 >>> 0 < 15) {
        $bit_buf$64 = (HEAPU8[$pIn_buf_cur$57130 + 1 >> 0] << 8 | HEAPU8[$pIn_buf_cur$57130 >> 0]) << $num_bits$58133 | $bit_buf$58131;
        $num_bits$64 = $num_bits$58133 + 16 | 0;
        $pIn_buf_cur$63 = $pIn_buf_cur$57130 + 2 | 0;
       } else {
        $bit_buf$64 = $bit_buf$58131;
        $num_bits$64 = $num_bits$58133;
        $pIn_buf_cur$63 = $pIn_buf_cur$57130;
       }
       $654 = HEAP16[$r + (($bit_buf$64 & 1023) << 1) + 352 >> 1] | 0;
       $655 = $654 << 16 >> 16;
       if ($654 << 16 >> 16 > -1) {
        $code_len13$1 = $655 >> 9;
        $sym2$1 = $655;
       } else {
        $code_len13$0 = 10;
        $sym2$0 = $655;
        while (1) {
         $659 = $code_len13$0 + 1 | 0;
         $664 = HEAP16[$r + (($bit_buf$64 >>> $code_len13$0 & 1) + ~$sym2$0 << 1) + 2400 >> 1] | 0;
         $665 = $664 << 16 >> 16;
         if ($664 << 16 >> 16 < 0) {
          $code_len13$0 = $659;
          $sym2$0 = $665;
         } else {
          $code_len13$1 = $659;
          $sym2$1 = $665;
          break;
         }
        }
       }
       $667 = $bit_buf$64 >>> $code_len13$1;
       $668 = $num_bits$64 - $code_len13$1 | 0;
       if ($sym2$1 & 256) {
        $bit_buf$66 = $667;
        $counter$62 = $sym2$1;
        $dist$62 = $dist$56$ph;
        $dist_from_out_buf_start$59 = $dist_from_out_buf_start$53$ph;
        $num_bits$66 = $668;
        $num_extra$64 = $num_extra$58$ph;
        $pIn_buf_cur$65 = $pIn_buf_cur$63;
        $pOut_buf_cur$59 = $pOut_buf_cur$53129;
        label = 215;
        break L185;
       }
       if ($668 >>> 0 < 15) {
        $bit_buf$65 = (HEAPU8[$pIn_buf_cur$63 + 1 >> 0] << 8 | HEAPU8[$pIn_buf_cur$63 >> 0]) << $668 | $667;
        $num_bits$65 = $668 + 16 | 0;
        $pIn_buf_cur$64 = $pIn_buf_cur$63 + 2 | 0;
       } else {
        $bit_buf$65 = $667;
        $num_bits$65 = $668;
        $pIn_buf_cur$64 = $pIn_buf_cur$63;
       }
       $685 = HEAP16[$r + (($bit_buf$65 & 1023) << 1) + 352 >> 1] | 0;
       $686 = $685 << 16 >> 16;
       if ($685 << 16 >> 16 > -1) {
        $code_len13$3 = $686 >> 9;
        $sym2$3 = $686;
       } else {
        $code_len13$2 = 10;
        $sym2$2 = $686;
        while (1) {
         $690 = $code_len13$2 + 1 | 0;
         $695 = HEAP16[$r + (($bit_buf$65 >>> $code_len13$2 & 1) + ~$sym2$2 << 1) + 2400 >> 1] | 0;
         $696 = $695 << 16 >> 16;
         if ($695 << 16 >> 16 < 0) {
          $code_len13$2 = $690;
          $sym2$2 = $696;
         } else {
          $code_len13$3 = $690;
          $sym2$3 = $696;
          break;
         }
        }
       }
       $698 = $bit_buf$65 >>> $code_len13$3;
       $699 = $num_bits$65 - $code_len13$3 | 0;
       HEAP8[$pOut_buf_cur$53129 >> 0] = $sym2$1;
       if ($sym2$3 & 256) break;
       HEAP8[$pOut_buf_cur$53129 + 1 >> 0] = $sym2$3;
       $706 = $pOut_buf_cur$53129 + 2 | 0;
       $708 = $636 - $pIn_buf_cur$64 | 0;
       if (($708 | 0) < 4) {
        $$lcssa118 = $708;
        $bit_buf$58$lcssa = $698;
        $counter$57$lcssa = $sym2$1;
        $num_bits$58$lcssa = $699;
        $pIn_buf_cur$57$lcssa = $pIn_buf_cur$64;
        $pOut_buf_cur$53$lcssa = $706;
        break L236;
       } else {
        $1014 = $708;
        $bit_buf$58131 = $698;
        $counter$57132 = $sym2$1;
        $num_bits$58133 = $699;
        $pIn_buf_cur$57130 = $pIn_buf_cur$64;
        $pOut_buf_cur$53129 = $706;
       }
      }
      $bit_buf$66 = $698;
      $counter$62 = $sym2$3;
      $dist$62 = $dist$56$ph;
      $dist_from_out_buf_start$59 = $dist_from_out_buf_start$53$ph;
      $num_bits$66 = $699;
      $num_extra$64 = $num_extra$58$ph;
      $pIn_buf_cur$65 = $pIn_buf_cur$64;
      $pOut_buf_cur$59 = $pOut_buf_cur$53129 + 1 | 0;
      label = 215;
      break L185;
     } while (0);
     if ($num_bits$58$lcssa >>> 0 >= 15) {
      $bit_buf$62 = $bit_buf$58$lcssa;
      $dist$60 = $dist$56$ph;
      $dist_from_out_buf_start$57 = $dist_from_out_buf_start$53$ph;
      $num_bits$62 = $num_bits$58$lcssa;
      $num_extra$62 = $num_extra$58$ph;
      $pIn_buf_cur$61 = $pIn_buf_cur$57$lcssa;
      $pOut_buf_cur$57 = $pOut_buf_cur$53$lcssa;
      label = 192;
      continue L184;
     }
     if (($$lcssa118 | 0) < 2) {
      $bit_buf$59 = $bit_buf$58$lcssa;
      $counter$58 = $counter$57$lcssa;
      $dist$57 = $dist$56$ph;
      $dist_from_out_buf_start$54 = $dist_from_out_buf_start$53$ph;
      $num_bits$59 = $num_bits$58$lcssa;
      $num_extra$59 = $num_extra$58$ph;
      $pIn_buf_cur$58 = $pIn_buf_cur$57$lcssa;
      $pOut_buf_cur$54 = $pOut_buf_cur$53$lcssa;
      label = 178;
      continue L184;
     }
     $bit_buf$62 = HEAPU8[$pIn_buf_cur$57$lcssa >> 0] << $num_bits$58$lcssa | $bit_buf$58$lcssa | HEAPU8[$pIn_buf_cur$57$lcssa + 1 >> 0] << $num_bits$58$lcssa + 8;
     $dist$60 = $dist$56$ph;
     $dist_from_out_buf_start$57 = $dist_from_out_buf_start$53$ph;
     $num_bits$62 = $num_bits$58$lcssa + 16 | 0;
     $num_extra$62 = $num_extra$58$ph;
     $pIn_buf_cur$61 = $pIn_buf_cur$57$lcssa + 2 | 0;
     $pOut_buf_cur$57 = $pOut_buf_cur$53$lcssa;
     label = 192;
     continue L184;
     break;
    }
   case 218:
    {
     label = 0;
     if ($pIn_buf_cur$66 >>> 0 < $1 >>> 0) {
      label = 223;
      break L184;
     } else {
      $bit_buf$68 = $bit_buf$67;
      $counter$64 = $counter$63;
      $dist$64 = $dist$63;
      $dist_from_out_buf_start$61 = $dist_from_out_buf_start$60;
      $num_bits$68 = $num_bits$67;
      $num_extra$66 = $num_extra$65;
      $pIn_buf_cur$67 = $pIn_buf_cur$66;
      $pOut_buf_cur$61 = $pOut_buf_cur$60;
      label = 219;
      continue L71;
     }
     break;
    }
   case 225:
    {
     label = 0;
     $bit_buf$71 = $bit_buf$70 >>> $num_extra$68;
     $counter$67 = ((1 << $num_extra$68) + -1 & $bit_buf$70) + $counter$66 | 0;
     $dist$67 = $dist$66;
     $dist_from_out_buf_start$64 = $dist_from_out_buf_start$63;
     $num_bits$71 = $num_bits$70 - $num_extra$68 | 0;
     $num_extra$69 = $num_extra$68;
     $pIn_buf_cur$70 = $pIn_buf_cur$69;
     $pOut_buf_cur$64 = $pOut_buf_cur$63;
     break;
    }
   case 228:
    {
     label = 0;
     $747 = HEAP16[$r + (($bit_buf$72 & 1023) << 1) + 3840 >> 1] | 0;
     $748 = $747 << 16 >> 16;
     if ($747 << 16 >> 16 > -1) {
      $750 = $748 >> 9;
      if (($750 | 0) == 0 | $num_bits$72 >>> 0 < $750 >>> 0) {
       label = 234;
       break L184;
      } else {
       $bit_buf$75 = $bit_buf$72;
       $counter$71 = $counter$68;
       $dist_from_out_buf_start$68 = $dist_from_out_buf_start$65;
       $num_bits$75 = $num_bits$72;
       $pIn_buf_cur$74 = $pIn_buf_cur$71;
       $pOut_buf_cur$68 = $pOut_buf_cur$65;
       label = 242;
       continue L184;
      }
     }
     if ($num_bits$72 >>> 0 > 10) {
      $code_len16$0 = 10;
      $temp15$0 = $748;
     } else {
      label = 234;
      break L184;
     }
     while (1) {
      $759 = HEAP16[$r + (($bit_buf$72 >>> $code_len16$0 & 1) + ~$temp15$0 << 1) + 5888 >> 1] | 0;
      if ($759 << 16 >> 16 >= 0) {
       $bit_buf$75 = $bit_buf$72;
       $counter$71 = $counter$68;
       $dist_from_out_buf_start$68 = $dist_from_out_buf_start$65;
       $num_bits$75 = $num_bits$72;
       $pIn_buf_cur$74 = $pIn_buf_cur$71;
       $pOut_buf_cur$68 = $pOut_buf_cur$65;
       label = 242;
       continue L184;
      }
      if ($num_bits$72 >>> 0 < ($code_len16$0 + 2 | 0) >>> 0) break; else {
       $code_len16$0 = $code_len16$0 + 1 | 0;
       $temp15$0 = $759 << 16 >> 16;
      }
     }
     if ($759 << 16 >> 16 > -1) {
      $bit_buf$75 = $bit_buf$72;
      $counter$71 = $counter$68;
      $dist_from_out_buf_start$68 = $dist_from_out_buf_start$65;
      $num_bits$75 = $num_bits$72;
      $pIn_buf_cur$74 = $pIn_buf_cur$71;
      $pOut_buf_cur$68 = $pOut_buf_cur$65;
      label = 242;
      continue L184;
     } else {
      label = 234;
      break L184;
     }
     break;
    }
   case 242:
    {
     label = 0;
     $794 = HEAP16[$r + (($bit_buf$75 & 1023) << 1) + 3840 >> 1] | 0;
     $795 = $794 << 16 >> 16;
     if ($794 << 16 >> 16 > -1) {
      $code_len16$2 = $795 >> 9;
      $temp15$2 = $795 & 511;
     } else {
      $code_len16$1 = 10;
      $temp15$1 = $795;
      while (1) {
       $800 = $code_len16$1 + 1 | 0;
       $805 = HEAP16[$r + (($bit_buf$75 >>> $code_len16$1 & 1) + ~$temp15$1 << 1) + 5888 >> 1] | 0;
       $806 = $805 << 16 >> 16;
       if ($805 << 16 >> 16 < 0) {
        $code_len16$1 = $800;
        $temp15$1 = $806;
       } else {
        $code_len16$2 = $800;
        $temp15$2 = $806;
        break;
       }
      }
     }
     $808 = $bit_buf$75 >>> $code_len16$2;
     $809 = $num_bits$75 - $code_len16$2 | 0;
     $811 = HEAP32[94304 + ($temp15$2 << 2) >> 2] | 0;
     $813 = HEAP32[94176 + ($temp15$2 << 2) >> 2] | 0;
     if (($temp15$2 + -4 | 0) >>> 0 < 26) if ($809 >>> 0 < $811 >>> 0) {
      $bit_buf$76 = $808;
      $counter$72 = $counter$71;
      $dist$71 = $813;
      $dist_from_out_buf_start$69 = $dist_from_out_buf_start$68;
      $num_bits$76 = $809;
      $num_extra$73 = $811;
      $pIn_buf_cur$75 = $pIn_buf_cur$74;
      $pOut_buf_cur$69 = $pOut_buf_cur$68;
      label = 247;
      continue L184;
     } else {
      $bit_buf$79 = $808;
      $counter$75 = $counter$71;
      $dist$74 = $813;
      $num_bits$79 = $809;
      $num_extra$76 = $811;
      $pIn_buf_cur$78 = $pIn_buf_cur$74;
      $pOut_buf_cur$72 = $pOut_buf_cur$68;
      label = 254;
      continue L184;
     } else {
      $bit_buf$80 = $808;
      $counter$76 = $counter$71;
      $dist$75 = $813;
      $num_bits$80 = $809;
      $num_extra$77 = $811;
      $pIn_buf_cur$79 = $pIn_buf_cur$74;
      $pOut_buf_cur$73 = $pOut_buf_cur$68;
      label = 255;
     }
     break;
    }
   case 247:
    {
     label = 0;
     if ($pIn_buf_cur$75 >>> 0 < $1 >>> 0) {
      label = 252;
      break L184;
     } else {
      $bit_buf$77 = $bit_buf$76;
      $counter$73 = $counter$72;
      $dist$72 = $dist$71;
      $dist_from_out_buf_start$70 = $dist_from_out_buf_start$69;
      $num_bits$77 = $num_bits$76;
      $num_extra$74 = $num_extra$73;
      $pIn_buf_cur$76 = $pIn_buf_cur$75;
      $pOut_buf_cur$70 = $pOut_buf_cur$69;
      label = 248;
      continue L71;
     }
     break;
    }
   case 254:
    {
     label = 0;
     $bit_buf$80 = $bit_buf$79 >>> $num_extra$76;
     $counter$76 = $counter$75;
     $dist$75 = ((1 << $num_extra$76) + -1 & $bit_buf$79) + $dist$74 | 0;
     $num_bits$80 = $num_bits$79 - $num_extra$76 | 0;
     $num_extra$77 = $num_extra$76;
     $pIn_buf_cur$79 = $pIn_buf_cur$78;
     $pOut_buf_cur$73 = $pOut_buf_cur$72;
     label = 255;
     break;
    }
   case 258:
    {
     label = 0;
     $847 = $counter$78 + -1 | 0;
     if (!$counter$78) {
      $bit_buf$58$ph = $bit_buf$82;
      $counter$57$ph = $847;
      $dist$56$ph = $dist$77;
      $dist_from_out_buf_start$53$ph = $dist_from_out_buf_start$73;
      $num_bits$58$ph = $num_bits$82;
      $num_extra$58$ph = $num_extra$79;
      $pIn_buf_cur$57$ph = $pIn_buf_cur$81;
      $pOut_buf_cur$53$ph = $pOut_buf_cur$75;
      label = 199;
      continue L184;
     } else {
      $bit_buf$83 = $bit_buf$82;
      $counter$79 = $847;
      $dist$78 = $dist$77;
      $dist_from_out_buf_start$74 = $dist_from_out_buf_start$73;
      $num_bits$83 = $num_bits$82;
      $num_extra$80 = $num_extra$79;
      $pIn_buf_cur$82 = $pIn_buf_cur$81;
      $pOut_buf_cur$76 = $pOut_buf_cur$75;
      label = 259;
      continue L71;
     }
     break;
    }
   case 267:
    {
     label = 0;
     if (!(HEAP32[$r + 20 >> 2] & 1)) {
      $bit_buf$5 = $bit_buf$84;
      $counter$5 = $counter$81;
      $dist$5 = $dist$79;
      $dist_from_out_buf_start$0 = $dist_from_out_buf_start$75;
      $num_bits$5 = $num_bits$84;
      $num_extra$5 = $num_extra$81;
      $pIn_buf_cur$4 = $pIn_buf_cur$83;
      $pOut_buf_cur$0 = $pOut_buf_cur$78;
      label = 27;
      continue L71;
     }
     if (!($decomp_flags & 1)) {
      $bit_buf$96 = $bit_buf$84;
      $counter$92 = $counter$81;
      $dist$91 = $dist$79;
      $dist_from_out_buf_start$87 = $dist_from_out_buf_start$75;
      $num_bits$96 = $num_bits$84;
      $num_extra$93 = $num_extra$81;
      $pIn_buf_cur$95 = $pIn_buf_cur$83;
      $pOut_buf_cur$90 = $pOut_buf_cur$78;
      label = 296;
      continue L71;
     }
     if ($num_bits$84 >>> 0 < ($num_bits$84 & 7) >>> 0) {
      $bit_buf$85 = $bit_buf$84;
      $counter$82 = $counter$81;
      $dist$80 = $dist$79;
      $dist_from_out_buf_start$76 = $dist_from_out_buf_start$75;
      $num_bits$85 = $num_bits$84;
      $num_extra$82 = $num_extra$81;
      $pIn_buf_cur$84 = $pIn_buf_cur$83;
      $pOut_buf_cur$79 = $pOut_buf_cur$78;
      label = 270;
      continue L184;
     } else {
      $bit_buf$88 = $bit_buf$84;
      $dist$83 = $dist$79;
      $dist_from_out_buf_start$79 = $dist_from_out_buf_start$75;
      $num_bits$88 = $num_bits$84;
      $num_extra$85 = $num_extra$81;
      $pIn_buf_cur$87 = $pIn_buf_cur$83;
      $pOut_buf_cur$82 = $pOut_buf_cur$78;
      label = 277;
      continue L184;
     }
     break;
    }
   case 270:
    {
     label = 0;
     if ($pIn_buf_cur$84 >>> 0 < $1 >>> 0) {
      label = 275;
      break L184;
     } else {
      $bit_buf$86 = $bit_buf$85;
      $counter$83 = $counter$82;
      $dist$81 = $dist$80;
      $dist_from_out_buf_start$77 = $dist_from_out_buf_start$76;
      $num_bits$86 = $num_bits$85;
      $num_extra$83 = $num_extra$82;
      $pIn_buf_cur$85 = $pIn_buf_cur$84;
      $pOut_buf_cur$80 = $pOut_buf_cur$79;
      label = 271;
      continue L71;
     }
     break;
    }
   case 277:
    {
     label = 0;
     $897 = $num_bits$88 & 7;
     $bit_buf$89 = $bit_buf$88 >>> $897;
     $counter$85 = 0;
     $dist$84 = $dist$83;
     $dist_from_out_buf_start$80 = $dist_from_out_buf_start$79;
     $num_bits$89 = $num_bits$88 - $897 | 0;
     $num_extra$86 = $num_extra$85;
     $pIn_buf_cur$88 = $pIn_buf_cur$87;
     $pOut_buf_cur$83 = $pOut_buf_cur$82;
     label = 278;
     continue L184;
     break;
    }
   case 278:
    {
     label = 0;
     if ($counter$85 >>> 0 >= 4) {
      $bit_buf$96 = $bit_buf$89;
      $counter$92 = $counter$85;
      $dist$91 = $dist$84;
      $dist_from_out_buf_start$87 = $dist_from_out_buf_start$80;
      $num_bits$96 = $num_bits$89;
      $num_extra$93 = $num_extra$86;
      $pIn_buf_cur$95 = $pIn_buf_cur$88;
      $pOut_buf_cur$90 = $pOut_buf_cur$83;
      label = 296;
      continue L71;
     }
     if (!$num_bits$89) {
      label = 289;
      break L184;
     }
     if ($num_bits$89 >>> 0 < 8) {
      $bit_buf$90 = $bit_buf$89;
      $counter$86 = $counter$85;
      $dist$85 = $dist$84;
      $dist_from_out_buf_start$81 = $dist_from_out_buf_start$80;
      $num_bits$90 = $num_bits$89;
      $num_extra$87 = $num_extra$86;
      $pIn_buf_cur$89 = $pIn_buf_cur$88;
      $pOut_buf_cur$84 = $pOut_buf_cur$83;
      label = 281;
      continue L184;
     } else {
      $bit_buf$93 = $bit_buf$89;
      $counter$89 = $counter$85;
      $dist$88 = $dist$84;
      $dist_from_out_buf_start$84 = $dist_from_out_buf_start$80;
      $num_bits$93 = $num_bits$89;
      $num_extra$90 = $num_extra$86;
      $pIn_buf_cur$92 = $pIn_buf_cur$88;
      $pOut_buf_cur$87 = $pOut_buf_cur$83;
      label = 288;
      continue L184;
     }
     break;
    }
   case 281:
    {
     label = 0;
     if ($pIn_buf_cur$89 >>> 0 < $1 >>> 0) {
      label = 286;
      break L184;
     } else {
      $bit_buf$91 = $bit_buf$90;
      $counter$87 = $counter$86;
      $dist$86 = $dist$85;
      $dist_from_out_buf_start$82 = $dist_from_out_buf_start$81;
      $num_bits$91 = $num_bits$90;
      $num_extra$88 = $num_extra$87;
      $pIn_buf_cur$90 = $pIn_buf_cur$89;
      $pOut_buf_cur$85 = $pOut_buf_cur$84;
      label = 282;
      continue L71;
     }
     break;
    }
   case 288:
    {
     label = 0;
     $bit_buf$95 = $bit_buf$93 >>> 8;
     $counter$91 = $counter$89;
     $dist$90 = $dist$88;
     $dist_from_out_buf_start$86 = $dist_from_out_buf_start$84;
     $num_bits$95 = $num_bits$93 + -8 | 0;
     $num_extra$92 = $num_extra$90;
     $pIn_buf_cur$94 = $pIn_buf_cur$92;
     $pOut_buf_cur$89 = $pOut_buf_cur$87;
     $s21$0 = $bit_buf$93 & 255;
     label = 295;
     continue L71;
     break;
    }
   }
   do if ((label | 0) == 99) {
    label = 0;
    $248 = $r + 52 | 0;
    if ($counter$37 >>> 0 < (HEAP32[$248 >> 2] | 0) >>> 0) if ($num_bits$38 >>> 0 < 3) {
     $bit_buf$39 = $bit_buf$38;
     $counter$38 = $counter$37;
     $dist$38 = $dist$37;
     $dist_from_out_buf_start$34 = $dist_from_out_buf_start$33;
     $num_bits$39 = $num_bits$38;
     $num_extra$39 = $num_extra$38;
     $pIn_buf_cur$38 = $pIn_buf_cur$37;
     $pOut_buf_cur$34 = $pOut_buf_cur$33;
     label = 101;
     continue L184;
    } else {
     $bit_buf$42 = $bit_buf$38;
     $counter$41 = $counter$37;
     $dist$41 = $dist$37;
     $dist_from_out_buf_start$37 = $dist_from_out_buf_start$33;
     $num_bits$42 = $num_bits$38;
     $num_extra$42 = $num_extra$38;
     $pIn_buf_cur$41 = $pIn_buf_cur$37;
     $pOut_buf_cur$37 = $pOut_buf_cur$33;
     label = 108;
     continue L184;
    } else {
     HEAP32[$248 >> 2] = 19;
     $$pre$phiZ2D = $r + 24 | 0;
     $bit_buf$43 = $bit_buf$38;
     $counter$42 = $counter$37;
     $dist$42 = $dist$37;
     $dist_from_out_buf_start$38 = $dist_from_out_buf_start$33;
     $num_bits$43 = $num_bits$38;
     $num_extra$43 = $num_extra$38;
     $pIn_buf_cur$42 = $pIn_buf_cur$37;
     $pOut_buf_cur$38 = $pOut_buf_cur$33;
     label = 111;
     continue L184;
    }
   } else if ((label | 0) == 135) {
    label = 0;
    $436 = HEAP32[$r + 44 >> 2] | 0;
    $438 = HEAP32[$r + 48 >> 2] | 0;
    $439 = $438 + $436 | 0;
    if ($counter$44 >>> 0 >= $439 >>> 0) {
     if (($439 | 0) != ($counter$44 | 0)) {
      $bit_buf$55 = $bit_buf$45;
      $counter$54 = $counter$44;
      $dist$53 = $dist$44;
      $dist_from_out_buf_start$50 = $dist_from_out_buf_start$40;
      $num_bits$55 = $num_bits$45;
      $num_extra$55 = $num_extra$45;
      $pIn_buf_cur$54 = $pIn_buf_cur$44;
      $pOut_buf_cur$50 = $pOut_buf_cur$40;
      label = 171;
      continue L71;
     }
     _memcpy($r + 64 | 0, $r + 10532 | 0, $436 | 0) | 0;
     _memcpy($r + 3552 | 0, $r + $436 + 10532 | 0, $438 | 0) | 0;
     $$pre$phi280Z2D = $total_syms;
     $$pre$phi282Z2D = $next_code;
     $560 = HEAP32[$r + 24 >> 2] | 0;
     $bit_buf$57 = $bit_buf$45;
     $counter$56 = $counter$44;
     $dist$55 = $dist$44;
     $dist_from_out_buf_start$52 = $dist_from_out_buf_start$40;
     $num_bits$57 = $num_bits$45;
     $num_extra$57 = $num_extra$45;
     $pIn_buf_cur$56 = $pIn_buf_cur$44;
     $pOut_buf_cur$52 = $pOut_buf_cur$40;
     label = 174;
     break;
    }
    if ($num_bits$45 >>> 0 >= 15) {
     $bit_buf$49 = $bit_buf$45;
     $counter$48 = $counter$44;
     $dist_from_out_buf_start$44 = $dist_from_out_buf_start$40;
     $num_bits$49 = $num_bits$45;
     $num_extra$49 = $num_extra$45;
     $pIn_buf_cur$48 = $pIn_buf_cur$44;
     $pOut_buf_cur$44 = $pOut_buf_cur$40;
     label = 152;
     continue L184;
    }
    if (($1 - $pIn_buf_cur$44 | 0) < 2) {
     $bit_buf$46 = $bit_buf$45;
     $counter$45 = $counter$44;
     $dist$45 = $dist$44;
     $dist_from_out_buf_start$41 = $dist_from_out_buf_start$40;
     $num_bits$46 = $num_bits$45;
     $num_extra$46 = $num_extra$45;
     $pIn_buf_cur$45 = $pIn_buf_cur$44;
     $pOut_buf_cur$41 = $pOut_buf_cur$40;
     label = 138;
     continue L184;
    }
    $bit_buf$49 = HEAPU8[$pIn_buf_cur$44 >> 0] << $num_bits$45 | $bit_buf$45 | HEAPU8[$pIn_buf_cur$44 + 1 >> 0] << $num_bits$45 + 8;
    $counter$48 = $counter$44;
    $dist_from_out_buf_start$44 = $dist_from_out_buf_start$40;
    $num_bits$49 = $num_bits$45 + 16 | 0;
    $num_extra$49 = $num_extra$45;
    $pIn_buf_cur$48 = $pIn_buf_cur$44 + 2 | 0;
    $pOut_buf_cur$44 = $pOut_buf_cur$40;
    label = 152;
    continue L184;
   } else if ((label | 0) == 215) {
    label = 0;
    $710 = $counter$62 & 511;
    if (($710 | 0) == 256) {
     $bit_buf$84 = $bit_buf$66;
     $counter$81 = 256;
     $dist$79 = $dist$62;
     $dist_from_out_buf_start$75 = $dist_from_out_buf_start$59;
     $num_bits$84 = $num_bits$66;
     $num_extra$81 = $num_extra$64;
     $pIn_buf_cur$83 = $pIn_buf_cur$65;
     $pOut_buf_cur$78 = $pOut_buf_cur$59;
     label = 267;
     continue L184;
    }
    $712 = $710 + -257 | 0;
    $714 = HEAP32[94048 + ($712 << 2) >> 2] | 0;
    $716 = HEAP32[93920 + ($712 << 2) >> 2] | 0;
    if (($710 + -265 | 0) >>> 0 < 20) if ($num_bits$66 >>> 0 < $714 >>> 0) {
     $bit_buf$67 = $bit_buf$66;
     $counter$63 = $716;
     $dist$63 = $dist$62;
     $dist_from_out_buf_start$60 = $dist_from_out_buf_start$59;
     $num_bits$67 = $num_bits$66;
     $num_extra$65 = $714;
     $pIn_buf_cur$66 = $pIn_buf_cur$65;
     $pOut_buf_cur$60 = $pOut_buf_cur$59;
     label = 218;
     continue L184;
    } else {
     $bit_buf$70 = $bit_buf$66;
     $counter$66 = $716;
     $dist$66 = $dist$62;
     $dist_from_out_buf_start$63 = $dist_from_out_buf_start$59;
     $num_bits$70 = $num_bits$66;
     $num_extra$68 = $714;
     $pIn_buf_cur$69 = $pIn_buf_cur$65;
     $pOut_buf_cur$63 = $pOut_buf_cur$59;
     label = 225;
     continue L184;
    } else {
     $bit_buf$71 = $bit_buf$66;
     $counter$67 = $716;
     $dist$67 = $dist$62;
     $dist_from_out_buf_start$64 = $dist_from_out_buf_start$59;
     $num_bits$71 = $num_bits$66;
     $num_extra$69 = $714;
     $pIn_buf_cur$70 = $pIn_buf_cur$65;
     $pOut_buf_cur$64 = $pOut_buf_cur$59;
    }
   } else if ((label | 0) == 255) {
    label = 0;
    $839 = $pOut_buf_cur$73 - $pOut_buf_start | 0;
    if (!($dist$75 >>> 0 <= $839 >>> 0 | $5 ^ 1)) {
     $bit_buf$81 = $bit_buf$80;
     $counter$77 = $counter$76;
     $dist$76 = $dist$75;
     $dist_from_out_buf_start$72 = $839;
     $num_bits$81 = $num_bits$80;
     $num_extra$78 = $num_extra$77;
     $pIn_buf_cur$80 = $pIn_buf_cur$79;
     $pOut_buf_cur$74 = $pOut_buf_cur$73;
     label = 256;
     continue L71;
    }
    $842 = $pOut_buf_start + ($839 - $dist$75 & $12) | 0;
    if ((($pOut_buf_cur$73 >>> 0 > $842 >>> 0 ? $pOut_buf_cur$73 : $842) + $counter$76 | 0) >>> 0 > $3 >>> 0) {
     $bit_buf$82 = $bit_buf$80;
     $counter$78 = $counter$76;
     $dist$77 = $dist$75;
     $dist_from_out_buf_start$73 = $839;
     $num_bits$82 = $num_bits$80;
     $num_extra$79 = $num_extra$77;
     $pIn_buf_cur$81 = $pIn_buf_cur$79;
     $pOut_buf_cur$75 = $pOut_buf_cur$73;
     label = 258;
     continue L184;
    } else {
     $counter$80 = $counter$76;
     $pOut_buf_cur$77 = $pOut_buf_cur$73;
     $pSrc$0 = $842;
    }
    while (1) {
     HEAP8[$pOut_buf_cur$77 >> 0] = HEAP8[$pSrc$0 >> 0] | 0;
     HEAP8[$pOut_buf_cur$77 + 1 >> 0] = HEAP8[$pSrc$0 + 1 >> 0] | 0;
     HEAP8[$pOut_buf_cur$77 + 2 >> 0] = HEAP8[$pSrc$0 + 2 >> 0] | 0;
     $863 = $pOut_buf_cur$77 + 3 | 0;
     $864 = $pSrc$0 + 3 | 0;
     $865 = $counter$80 + -3 | 0;
     if (($865 | 0) > 2) {
      $counter$80 = $865;
      $pOut_buf_cur$77 = $863;
      $pSrc$0 = $864;
     } else break;
    }
    if (($865 | 0) <= 0) {
     $bit_buf$58$ph = $bit_buf$80;
     $counter$57$ph = $865;
     $dist$56$ph = $dist$75;
     $dist_from_out_buf_start$53$ph = $839;
     $num_bits$58$ph = $num_bits$80;
     $num_extra$58$ph = $num_extra$77;
     $pIn_buf_cur$57$ph = $pIn_buf_cur$79;
     $pOut_buf_cur$53$ph = $863;
     label = 199;
     continue L184;
    }
    HEAP8[$863 >> 0] = HEAP8[$864 >> 0] | 0;
    if (($865 | 0) > 1) HEAP8[$pOut_buf_cur$77 + 4 >> 0] = HEAP8[$pSrc$0 + 4 >> 0] | 0;
    $bit_buf$58$ph = $bit_buf$80;
    $counter$57$ph = $865;
    $dist$56$ph = $dist$75;
    $dist_from_out_buf_start$53$ph = $839;
    $num_bits$58$ph = $num_bits$80;
    $num_extra$58$ph = $num_extra$77;
    $pIn_buf_cur$57$ph = $pIn_buf_cur$79;
    $pOut_buf_cur$53$ph = $pOut_buf_cur$77 + $counter$80 | 0;
    label = 199;
    continue L184;
   } while (0);
   if ((label | 0) == 174) {
    label = 0;
    $558 = $r + 24 | 0;
    HEAP32[$558 >> 2] = $560 + -1;
    $$pre$phiZ2D = $558;
    $bit_buf$43 = $bit_buf$57;
    $counter$42 = $counter$56;
    $dist$42 = $dist$55;
    $dist_from_out_buf_start$38 = $dist_from_out_buf_start$52;
    $num_bits$43 = $num_bits$57;
    $num_extra$43 = $num_extra$57;
    $pIn_buf_cur$42 = $pIn_buf_cur$56;
    $pOut_buf_cur$38 = $pOut_buf_cur$52;
    label = 111;
    continue;
   }
   if ($num_bits$71 >>> 0 >= 15) {
    $bit_buf$75 = $bit_buf$71;
    $counter$71 = $counter$67;
    $dist_from_out_buf_start$68 = $dist_from_out_buf_start$64;
    $num_bits$75 = $num_bits$71;
    $pIn_buf_cur$74 = $pIn_buf_cur$70;
    $pOut_buf_cur$68 = $pOut_buf_cur$64;
    label = 242;
    continue;
   }
   if (($1 - $pIn_buf_cur$70 | 0) < 2) {
    $bit_buf$72 = $bit_buf$71;
    $counter$68 = $counter$67;
    $dist$68 = $dist$67;
    $dist_from_out_buf_start$65 = $dist_from_out_buf_start$64;
    $num_bits$72 = $num_bits$71;
    $num_extra$70 = $num_extra$69;
    $pIn_buf_cur$71 = $pIn_buf_cur$70;
    $pOut_buf_cur$65 = $pOut_buf_cur$64;
    label = 228;
    continue;
   }
   $bit_buf$75 = HEAPU8[$pIn_buf_cur$70 >> 0] << $num_bits$71 | $bit_buf$71 | HEAPU8[$pIn_buf_cur$70 + 1 >> 0] << $num_bits$71 + 8;
   $counter$71 = $counter$67;
   $dist_from_out_buf_start$68 = $dist_from_out_buf_start$64;
   $num_bits$75 = $num_bits$71 + 16 | 0;
   $pIn_buf_cur$74 = $pIn_buf_cur$70 + 2 | 0;
   $pOut_buf_cur$68 = $pOut_buf_cur$64;
   label = 242;
  }
  switch (label | 0) {
  case 95:
   {
    label = 0;
    $bit_buf$36 = $bit_buf$34;
    $c4$0 = HEAPU8[$pIn_buf_cur$33 >> 0] | 0;
    $counter$35 = $counter$33;
    $dist$35 = $dist$33;
    $dist_from_out_buf_start$31 = $dist_from_out_buf_start$29;
    $num_bits$36 = $num_bits$34;
    $num_extra$36 = $num_extra$34;
    $pIn_buf_cur$35 = $pIn_buf_cur$33 + 1 | 0;
    $pOut_buf_cur$31 = $pOut_buf_cur$29;
    label = 96;
    continue L71;
    break;
   }
  case 106:
   {
    label = 0;
    $bit_buf$41 = $bit_buf$39;
    $c5$0 = HEAPU8[$pIn_buf_cur$38 >> 0] | 0;
    $counter$40 = $counter$38;
    $dist$40 = $dist$38;
    $dist_from_out_buf_start$36 = $dist_from_out_buf_start$34;
    $num_bits$41 = $num_bits$39;
    $num_extra$41 = $num_extra$39;
    $pIn_buf_cur$40 = $pIn_buf_cur$38 + 1 | 0;
    $pOut_buf_cur$36 = $pOut_buf_cur$34;
    label = 107;
    continue L71;
    break;
   }
  case 144:
   {
    label = 0;
    if ($pIn_buf_cur$45 >>> 0 >= $1 >>> 0) {
     $bit_buf$47 = $bit_buf$46;
     $counter$46 = $counter$45;
     $dist$46 = $dist$45;
     $dist_from_out_buf_start$42 = $dist_from_out_buf_start$41;
     $num_bits$47 = $num_bits$46;
     $num_extra$47 = $num_extra$46;
     $pIn_buf_cur$46 = $pIn_buf_cur$45;
     $pOut_buf_cur$42 = $pOut_buf_cur$41;
     label = 145;
     continue L71;
    }
    $bit_buf$48 = $bit_buf$46;
    $c8$0 = HEAPU8[$pIn_buf_cur$45 >> 0] | 0;
    $counter$47 = $counter$45;
    $dist$47 = $dist$45;
    $dist_from_out_buf_start$43 = $dist_from_out_buf_start$41;
    $num_bits$48 = $num_bits$46;
    $num_extra$48 = $num_extra$46;
    $pIn_buf_cur$47 = $pIn_buf_cur$45 + 1 | 0;
    $pOut_buf_cur$43 = $pOut_buf_cur$41;
    label = 150;
    continue L71;
    break;
   }
  case 165:
   {
    label = 0;
    $bit_buf$53 = $bit_buf$51;
    $c9$0 = HEAPU8[$pIn_buf_cur$50 >> 0] | 0;
    $counter$52 = $counter$50;
    $dist$51 = $dist$49;
    $dist_from_out_buf_start$48 = $dist_from_out_buf_start$46;
    $num_bits$53 = $num_bits$51;
    $num_extra$53 = $num_extra$51;
    $pIn_buf_cur$52 = $pIn_buf_cur$50 + 1 | 0;
    $pOut_buf_cur$48 = $pOut_buf_cur$46;
    label = 166;
    continue L71;
    break;
   }
  case 184:
   {
    label = 0;
    if ($pIn_buf_cur$58 >>> 0 >= $1 >>> 0) {
     $bit_buf$60 = $bit_buf$59;
     $counter$59 = $counter$58;
     $dist$58 = $dist$57;
     $dist_from_out_buf_start$55 = $dist_from_out_buf_start$54;
     $num_bits$60 = $num_bits$59;
     $num_extra$60 = $num_extra$59;
     $pIn_buf_cur$59 = $pIn_buf_cur$58;
     $pOut_buf_cur$55 = $pOut_buf_cur$54;
     label = 185;
     continue L71;
    }
    $bit_buf$61 = $bit_buf$59;
    $c12$0 = HEAPU8[$pIn_buf_cur$58 >> 0] | 0;
    $counter$60 = $counter$58;
    $dist$59 = $dist$57;
    $dist_from_out_buf_start$56 = $dist_from_out_buf_start$54;
    $num_bits$61 = $num_bits$59;
    $num_extra$61 = $num_extra$59;
    $pIn_buf_cur$60 = $pIn_buf_cur$58 + 1 | 0;
    $pOut_buf_cur$56 = $pOut_buf_cur$54;
    label = 190;
    continue L71;
    break;
   }
  case 223:
   {
    label = 0;
    $bit_buf$69 = $bit_buf$67;
    $c14$0 = HEAPU8[$pIn_buf_cur$66 >> 0] | 0;
    $counter$65 = $counter$63;
    $dist$65 = $dist$63;
    $dist_from_out_buf_start$62 = $dist_from_out_buf_start$60;
    $num_bits$69 = $num_bits$67;
    $num_extra$67 = $num_extra$65;
    $pIn_buf_cur$68 = $pIn_buf_cur$66 + 1 | 0;
    $pOut_buf_cur$62 = $pOut_buf_cur$60;
    label = 224;
    continue L71;
    break;
   }
  case 234:
   {
    label = 0;
    if ($pIn_buf_cur$71 >>> 0 >= $1 >>> 0) {
     $bit_buf$73 = $bit_buf$72;
     $counter$69 = $counter$68;
     $dist$69 = $dist$68;
     $dist_from_out_buf_start$66 = $dist_from_out_buf_start$65;
     $num_bits$73 = $num_bits$72;
     $num_extra$71 = $num_extra$70;
     $pIn_buf_cur$72 = $pIn_buf_cur$71;
     $pOut_buf_cur$66 = $pOut_buf_cur$65;
     label = 235;
     continue L71;
    }
    $bit_buf$74 = $bit_buf$72;
    $c17$0 = HEAPU8[$pIn_buf_cur$71 >> 0] | 0;
    $counter$70 = $counter$68;
    $dist$70 = $dist$68;
    $dist_from_out_buf_start$67 = $dist_from_out_buf_start$65;
    $num_bits$74 = $num_bits$72;
    $num_extra$72 = $num_extra$70;
    $pIn_buf_cur$73 = $pIn_buf_cur$71 + 1 | 0;
    $pOut_buf_cur$67 = $pOut_buf_cur$65;
    label = 240;
    continue L71;
    break;
   }
  case 252:
   {
    label = 0;
    $bit_buf$78 = $bit_buf$76;
    $c19$0 = HEAPU8[$pIn_buf_cur$75 >> 0] | 0;
    $counter$74 = $counter$72;
    $dist$73 = $dist$71;
    $dist_from_out_buf_start$71 = $dist_from_out_buf_start$69;
    $num_bits$78 = $num_bits$76;
    $num_extra$75 = $num_extra$73;
    $pIn_buf_cur$77 = $pIn_buf_cur$75 + 1 | 0;
    $pOut_buf_cur$71 = $pOut_buf_cur$69;
    label = 253;
    continue L71;
    break;
   }
  case 275:
   {
    label = 0;
    $bit_buf$87 = $bit_buf$85;
    $c20$0 = HEAPU8[$pIn_buf_cur$84 >> 0] | 0;
    $counter$84 = $counter$82;
    $dist$82 = $dist$80;
    $dist_from_out_buf_start$78 = $dist_from_out_buf_start$76;
    $num_bits$87 = $num_bits$85;
    $num_extra$84 = $num_extra$82;
    $pIn_buf_cur$86 = $pIn_buf_cur$84 + 1 | 0;
    $pOut_buf_cur$81 = $pOut_buf_cur$79;
    label = 276;
    continue L71;
    break;
   }
  case 286:
   {
    label = 0;
    $bit_buf$92 = $bit_buf$90;
    $c22$0 = HEAPU8[$pIn_buf_cur$89 >> 0] | 0;
    $counter$88 = $counter$86;
    $dist$87 = $dist$85;
    $dist_from_out_buf_start$83 = $dist_from_out_buf_start$81;
    $num_bits$92 = $num_bits$90;
    $num_extra$89 = $num_extra$87;
    $pIn_buf_cur$91 = $pIn_buf_cur$89 + 1 | 0;
    $pOut_buf_cur$86 = $pOut_buf_cur$84;
    label = 287;
    continue L71;
    break;
   }
  case 289:
   {
    label = 0;
    if ($pIn_buf_cur$88 >>> 0 >= $1 >>> 0) {
     $bit_buf$94 = $bit_buf$89;
     $counter$90 = $counter$85;
     $dist$89 = $dist$84;
     $dist_from_out_buf_start$85 = $dist_from_out_buf_start$80;
     $num_bits$94 = 0;
     $num_extra$91 = $num_extra$86;
     $pIn_buf_cur$93 = $pIn_buf_cur$88;
     $pOut_buf_cur$88 = $pOut_buf_cur$83;
     label = 290;
     continue L71;
    }
    $bit_buf$95 = $bit_buf$89;
    $counter$91 = $counter$85;
    $dist$90 = $dist$84;
    $dist_from_out_buf_start$86 = $dist_from_out_buf_start$80;
    $num_bits$95 = 0;
    $num_extra$92 = $num_extra$86;
    $pIn_buf_cur$94 = $pIn_buf_cur$88 + 1 | 0;
    $pOut_buf_cur$89 = $pOut_buf_cur$83;
    $s21$0 = HEAPU8[$pIn_buf_cur$88 >> 0] | 0;
    label = 295;
    continue L71;
    break;
   }
  }
 }
 if ((label | 0) == 310) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 $944 = $r + 28 | 0;
 $945 = HEAP32[$944 >> 2] | 0;
 $946 = $945 & 65535;
 $947 = $945 >>> 16;
 if (($pOut_buf_cur$91 | 0) == ($pOut_buf_next | 0)) {
  $s1$0$lcssa = $946;
  $s2$0$lcssa = $947;
 } else {
  $block_len$036 = ($940 >>> 0) % 5552 | 0;
  $buf_len$033 = $940;
  $ptr$032 = $pOut_buf_next;
  $s1$034 = $946;
  $s2$035 = $947;
  while (1) {
   if ($block_len$036 >>> 0 > 7) {
    $i23$018 = 0;
    $ptr$117 = $ptr$032;
    $s1$119 = $s1$034;
    $s2$120 = $s2$035;
    while (1) {
     $953 = (HEAPU8[$ptr$117 >> 0] | 0) + $s1$119 | 0;
     $958 = $953 + (HEAPU8[$ptr$117 + 1 >> 0] | 0) | 0;
     $963 = $958 + (HEAPU8[$ptr$117 + 2 >> 0] | 0) | 0;
     $968 = $963 + (HEAPU8[$ptr$117 + 3 >> 0] | 0) | 0;
     $973 = $968 + (HEAPU8[$ptr$117 + 4 >> 0] | 0) | 0;
     $978 = $973 + (HEAPU8[$ptr$117 + 5 >> 0] | 0) | 0;
     $983 = $978 + (HEAPU8[$ptr$117 + 6 >> 0] | 0) | 0;
     $988 = $983 + (HEAPU8[$ptr$117 + 7 >> 0] | 0) | 0;
     $989 = $953 + $s2$120 + $958 + $963 + $968 + $973 + $978 + $983 + $988 | 0;
     $990 = $i23$018 + 8 | 0;
     $991 = $ptr$117 + 8 | 0;
     if (($990 | 7) >>> 0 < $block_len$036 >>> 0) {
      $i23$018 = $990;
      $ptr$117 = $991;
      $s1$119 = $988;
      $s2$120 = $989;
     } else {
      $i23$0$lcssa = $990;
      $ptr$1$lcssa = $991;
      $s1$1$lcssa = $988;
      $s2$1$lcssa = $989;
      break;
     }
    }
   } else {
    $i23$0$lcssa = 0;
    $ptr$1$lcssa = $ptr$032;
    $s1$1$lcssa = $s1$034;
    $s2$1$lcssa = $s2$035;
   }
   if ($i23$0$lcssa >>> 0 < $block_len$036 >>> 0) {
    $995 = $block_len$036 - $i23$0$lcssa | 0;
    $i23$125 = $i23$0$lcssa;
    $ptr$224 = $ptr$1$lcssa;
    $s1$226 = $s1$1$lcssa;
    $s2$227 = $s2$1$lcssa;
    while (1) {
     $s1$226 = (HEAPU8[$ptr$224 >> 0] | 0) + $s1$226 | 0;
     $s2$227 = $s1$226 + $s2$227 | 0;
     $i23$125 = $i23$125 + 1 | 0;
     if (($i23$125 | 0) == ($block_len$036 | 0)) break; else $ptr$224 = $ptr$224 + 1 | 0;
    }
    $ptr$2$lcssa = $ptr$1$lcssa + $995 | 0;
    $s1$2$lcssa = $s1$226;
    $s2$2$lcssa = $s2$227;
   } else {
    $ptr$2$lcssa = $ptr$1$lcssa;
    $s1$2$lcssa = $s1$1$lcssa;
    $s2$2$lcssa = $s2$1$lcssa;
   }
   $1002 = ($s1$2$lcssa >>> 0) % 65521 | 0;
   $1003 = ($s2$2$lcssa >>> 0) % 65521 | 0;
   $buf_len$033$looptemp = $buf_len$033;
   $buf_len$033 = $buf_len$033 - $block_len$036 | 0;
   if (($buf_len$033$looptemp | 0) == ($block_len$036 | 0)) {
    $s1$0$lcssa = $1002;
    $s2$0$lcssa = $1003;
    break;
   } else {
    $block_len$036 = 5552;
    $ptr$032 = $ptr$2$lcssa;
    $s1$034 = $1002;
    $s2$035 = $1003;
   }
  }
 }
 $1007 = $s2$0$lcssa << 16 | $s1$0$lcssa;
 HEAP32[$944 >> 2] = $1007;
 if ($status$71) {
  $$0 = $status$71;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!($decomp_flags & 1)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  STACKTOP = sp;
  return (($1007 | 0) == (HEAP32[$r + 16 >> 2] | 0) ? 0 : -2) | 0;
 }
 return 0;
}
function _start_decoder($f) {
 $f = $f | 0;
 var $$$i82 = 0, $$0$i = 0, $$0$i$i37 = 0, $$0$i100 = 0, $$0$i102 = 0, $$0$i104 = 0, $$0$i106 = 0, $$0$i108 = 0, $$0$i110 = 0, $$0$i15 = 0, $$0$i16 = 0, $$0$i18 = 0, $$0$i19 = 0, $$0$i24 = 0, $$0$i26 = 0, $$0$i28 = 0, $$0$i40 = 0, $$0$i44 = 0, $$0$i47 = 0, $$0$i49 = 0, $$0$i50 = 0, $$0$i52 = 0, $$0$i54 = 0, $$0$i56 = 0, $$0$i58 = 0, $$0$i60 = 0, $$0$i62 = 0, $$0$i64 = 0, $$0$i66 = 0, $$0$i83 = 0, $$0$i86 = 0, $$0$i88 = 0, $$0$i92 = 0, $$0$i95 = 0, $$14 = 0, $$4 = 0, $$lcssa = 0, $$lcssa161 = 0, $$lcssa227 = 0, $$lcssa294 = 0, $$pr$i$i = 0, $$pr$i$i33 = 0, $$pr$i$i35 = 0, $$pre493 = 0, $$pre494 = 0.0, $$pre495 = 0, $$sink$i = 0, $$sink31$i = 0, $$sink32$i = 0, $100 = 0, $1019 = 0, $102 = 0, $1022 = 0, $1024 = 0, $1025 = 0, $1032 = 0, $1055 = 0, $1058 = 0, $1062 = 0, $1067 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1080 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $109 = 0, $1091 = 0, $1093 = 0, $1096 = 0, $1100 = 0, $1117 = 0, $1119 = 0, $1130 = 0, $1131 = 0, $1133 = 0, $1136 = 0, $1139 = 0, $1151 = 0, $1152 = 0, $1155 = 0, $1158 = 0, $1171 = 0, $1184 = 0, $1186 = 0, $119 = 0, $1192 = 0, $1193 = 0, $1198 = 0, $1204 = 0, $1208 = 0, $1214 = 0, $1216 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1234 = 0, $1238 = 0, $1240 = 0, $1241 = 0, $1244 = 0, $1247 = 0, $1254 = 0, $1257 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1266 = 0, $1268 = 0, $1269 = 0, $1270 = 0, $1277 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1289 = 0, $1298 = 0, $1301 = 0, $1302 = 0, $1305 = 0, $1313 = 0, $1314 = 0, $1316 = 0, $1318 = 0, $1319 = 0, $1321 = 0, $1322 = 0, $1328 = 0, $1333 = 0, $1337 = 0, $1339 = 0, $1346 = 0, $1358 = 0, $1360 = 0, $1361 = 0, $1363 = 0, $1364 = 0, $137 = 0, $1371 = 0, $138 = 0, $1381 = 0, $1382 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1391 = 0, $1394 = 0, $1396 = 0, $1397 = 0, $140 = 0, $1407 = 0, $141 = 0, $1414 = 0, $142 = 0, $1425 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1434 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $144 = 0, $1445 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1457 = 0, $1460 = 0, $1462 = 0, $1463 = 0, $1469 = 0, $147 = 0, $1477 = 0, $1481 = 0, $1489 = 0, $1490 = 0, $151 = 0, $1526 = 0, $1529 = 0, $1530 = 0, $1566 = 0, $1569 = 0, $1571 = 0, $1577 = 0, $1586 = 0, $1589 = 0, $1594 = 0, $1600 = 0, $1608 = 0, $1616 = 0, $1617 = 0, $1629 = 0, $1633 = 0, $1634 = 0, $164 = 0, $1644 = 0, $1647 = 0, $1648 = 0, $1661 = 0, $1669 = 0, $1672 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1687 = 0, $1690 = 0, $1692 = 0, $1693 = 0, $1704 = 0, $1707 = 0, $1709 = 0, $1710 = 0, $1719 = 0, $172 = 0, $1721 = 0, $1722 = 0, $1739 = 0, $1742 = 0, $1743 = 0, $1745 = 0, $175 = 0, $1753 = 0, $1758 = 0, $1765 = 0, $1775 = 0, $1783 = 0, $1788 = 0, $1789 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $182 = 0, $187 = 0, $195 = 0, $198 = 0, $2 = 0, $205 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $22 = 0, $221 = 0, $222 = 0, $224 = 0, $225 = 0, $226 = 0, $23 = 0, $234 = 0, $239 = 0, $240 = 0, $241 = 0, $242 = 0, $255 = 0, $260 = 0, $261 = 0, $262 = 0, $270 = 0, $272 = 0, $273 = 0, $276 = 0, $278 = 0, $280 = 0, $281 = 0, $284 = 0, $290 = 0, $291 = 0, $294 = 0, $296 = 0, $297 = 0, $306 = 0, $308 = 0, $309 = 0, $311 = 0, $312 = 0, $33 = 0, $347 = 0, $354 = 0, $357 = 0, $367 = 0, $372 = 0, $377 = 0, $378 = 0, $381 = 0, $383 = 0, $384 = 0, $39 = 0, $390 = 0, $399 = 0, $4 = 0, $400 = 0, $403 = 0, $41 = 0, $410 = 0, $414 = 0, $417 = 0, $419 = 0, $420 = 0, $432 = 0, $435 = 0, $437 = 0, $438 = 0, $449 = 0, $450 = 0, $453 = 0, $463 = 0, $464 = 0, $467 = 0, $474 = 0, $475 = 0, $476 = 0, $479 = 0, $481 = 0, $489 = 0, $490 = 0, $493 = 0, $494 = 0, $496 = 0, $499 = 0, $501 = 0, $502 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $515 = 0, $520 = 0, $524 = 0, $529 = 0, $534 = 0, $539 = 0, $542 = 0, $543 = 0, $546 = 0, $551 = 0, $554 = 0, $556 = 0, $562 = 0, $567 = 0, $569 = 0, $570 = 0, $572 = 0, $573 = 0, $579 = 0, $58 = 0, $583 = 0, $585 = 0, $587 = 0, $588 = 0, $595 = 0, $598 = 0, $601 = 0, $604 = 0, $605 = 0, $606 = 0, $608 = 0, $610 = 0, $611 = 0, $615 = 0, $620 = 0, $625 = 0, $630 = 0, $635 = 0, $642 = 0, $644 = 0, $648 = 0, $653 = 0, $658 = 0, $663 = 0, $668 = 0, $674 = 0, $677 = 0, $68 = 0, $681 = 0, $683 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $696 = 0, $701 = 0, $706 = 0, $711 = 0, $716 = 0, $719 = 0, $720 = 0, $722 = 0, $723 = 0, $724 = 0, $727 = 0, $74 = 0, $741 = 0, $745 = 0, $752 = 0, $759 = 0, $766 = 0, $767 = 0, $770 = 0, $772 = 0, $773 = 0, $774 = 0, $776 = 0, $778 = 0, $785 = 0, $79 = 0, $790 = 0, $795 = 0, $800 = 0, $805 = 0, $813 = 0, $815 = 0, $82 = 0, $823 = 0, $825 = 0, $826 = 0, $830 = 0, $835 = 0.0, $838 = 0.0, $843 = 0, $844 = 0, $849 = 0.0, $852 = 0.0, $857 = 0, $861 = 0, $864 = 0, $867 = 0, $868 = 0, $878 = 0, $882 = 0.0, $887 = 0.0, $899 = 0, $901 = 0, $903 = 0, $905 = 0, $906 = 0, $909 = 0, $915 = 0, $92 = 0, $920 = 0, $934 = 0, $939 = 0, $940 = 0, $944 = 0, $947 = 0, $949 = 0, $950 = 0, $96 = 0, $960 = 0, $963 = 0, $965 = 0, $966 = 0, $97 = 0, $973 = 0, $98 = 0, $984 = 0, $986 = 0, $987 = 0, $988 = 0, $992 = 0, $994 = 0, $available$i = 0, $c$idx1$val$i = 0, $current_entry$0265 = 0, $current_length$0266$in = 0, $div$0305 = 0, $header = 0, $high$02$i = 0, $high$1$i = 0, $high_bits$0 = 0, $i$012$i = 0, $i$017$i = 0, $i$03$i = 0, $i$03$i98 = 0, $i$03$i98112 = 0, $i$03$i98113246 = 0, $i$03$i98115$lcssa = 0, $i$03$i98115229 = 0, $i$03$i98116 = 0, $i$03$i98117 = 0, $i$03$i98118 = 0, $i$03$i98119245 = 0, $i$03$i98121$lcssa = 0, $i$03$i98121228 = 0, $i$03$i98122 = 0, $i$03$i98123 = 0, $i$0389 = 0, $i$1$i = 0, $i$1$in$i = 0, $i$1$in$ph$i = 0, $i$12$i = 0, $i$122$i = 0, $i$1376 = 0, $i$211$i = 0, $i$2253 = 0, $i$3248 = 0, $i$4193 = 0, $i$5157 = 0, $i$6138 = 0, $i$7135 = 0, $i7$0130 = 0, $j$0260 = 0, $j$10219 = 0, $j$11224 = 0, $j$12230 = 0, $j$1272 = 0, $j$13162 = 0, $j$14170 = 0, $j$15177 = 0, $j$16150 = 0, $j$17146 = 0, $j$18153 = 0, $j$2296 = 0, $j$3310 = 0, $j$4301 = 0, $j$5316 = 0, $j$6129 = 0, $j$7198 = 0, $j$8206 = 0, $j$9215 = 0, $k$0$lcssa$i = 0, $k$0$lcssa$i69 = 0, $k$014$i = 0, $k$016$i = 0, $k$0306 = 0, $k$1$i = 0, $k$1203 = 0, $k$2210 = 0, $k$3169 = 0, $k$4174$in = 0, $k$5142 = 0, $lengths$0 = 0, $lengths$1$ph = 0, $lengths$1522 = 0, $longest_floorlist$0$lcssa = 0, $longest_floorlist$0247 = 0, $low$01$i = 0, $low$1$i = 0, $m$0$ph$i = 0, $max_class$0197 = 0, $max_part_read$0$lcssa = 0, $max_part_read$0131 = 0, $n$010$i = 0, $p = 0, $phitmp9 = 0, $sorted_count$0271 = 0, $sorted_count$1 = 0, $sorted_count$2 = 0, $temp$0173 = 0, $total$0259 = 0, $total$1 = 0, $total$2 = 0, $values$0 = 0, $values$1 = 0, $values$1$ph = 0, $x$0$$i = 0, $x$0$lcssa$i = 0, $x$09$i = 0, $y$06$i = 0, $z$0$lcssa$i = 0, $z$0$ph$i = 0, $z$01$i = 0, $z$03$i = 0, $z$04$i = 0, dest = 0, label = 0, sp = 0, stop = 0, $current_entry$0265$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1136 | 0;
 $available$i = sp;
 $header = sp + 1128 | 0;
 $p = sp + 128 | 0;
 if (!(_start_page($f) | 0)) {
  $$4 = 0;
  STACKTOP = sp;
  return $$4 | 0;
 }
 $2 = $f + 1391 | 0;
 $4 = HEAPU8[$2 >> 0] | 0;
 if (!($4 & 2)) {
  HEAP32[$f + 116 >> 2] = 34;
  $$4 = 0;
  STACKTOP = sp;
  return $$4 | 0;
 }
 if ($4 & 4) {
  HEAP32[$f + 116 >> 2] = 34;
  $$4 = 0;
  STACKTOP = sp;
  return $$4 | 0;
 }
 if ($4 & 1) {
  HEAP32[$f + 116 >> 2] = 34;
  $$4 = 0;
  STACKTOP = sp;
  return $$4 | 0;
 }
 if ((HEAP32[$f + 1132 >> 2] | 0) != 1) {
  HEAP32[$f + 116 >> 2] = 34;
  $$4 = 0;
  STACKTOP = sp;
  return $$4 | 0;
 }
 if ((HEAP8[$f + 1136 >> 0] | 0) != 30) {
  HEAP32[$f + 116 >> 2] = 34;
  $$4 = 0;
  STACKTOP = sp;
  return $$4 | 0;
 }
 $22 = $f + 32 | 0;
 $23 = HEAP32[$22 >> 2] | 0;
 do if (!$23) {
  $33 = _fgetc(HEAP32[$f + 20 >> 2] | 0) | 0;
  if (($33 | 0) == -1) {
   HEAP32[$f + 112 >> 2] = 1;
   break;
  } else {
   $$0$i18 = $33 & 255;
   label = 19;
   break;
  }
 } else if ($23 >>> 0 < (HEAP32[$f + 40 >> 2] | 0) >>> 0) {
  HEAP32[$22 >> 2] = $23 + 1;
  $$0$i18 = HEAP8[$23 >> 0] | 0;
  label = 19;
  break;
 } else {
  HEAP32[$f + 112 >> 2] = 1;
  break;
 } while (0);
 if ((label | 0) == 19) if ($$0$i18 << 24 >> 24 == 1) {
  $39 = HEAP32[$22 >> 2] | 0;
  do if (!$39) {
   if ((_fread($header | 0, 6, 1, HEAP32[$f + 20 >> 2] | 0) | 0) != 1) {
    HEAP32[$f + 112 >> 2] = 1;
    label = 27;
   }
  } else {
   $41 = $39 + 6 | 0;
   if ($41 >>> 0 > (HEAP32[$f + 40 >> 2] | 0) >>> 0) {
    HEAP32[$f + 112 >> 2] = 1;
    label = 27;
    break;
   } else {
    HEAP8[$header + 0 >> 0] = HEAP8[$39 + 0 >> 0] | 0;
    HEAP8[$header + 1 >> 0] = HEAP8[$39 + 1 >> 0] | 0;
    HEAP8[$header + 2 >> 0] = HEAP8[$39 + 2 >> 0] | 0;
    HEAP8[$header + 3 >> 0] = HEAP8[$39 + 3 >> 0] | 0;
    HEAP8[$header + 4 >> 0] = HEAP8[$39 + 4 >> 0] | 0;
    HEAP8[$header + 5 >> 0] = HEAP8[$39 + 5 >> 0] | 0;
    HEAP32[$22 >> 2] = $41;
    break;
   }
  } while (0);
  if ((label | 0) == 27) {
   HEAP32[$f + 116 >> 2] = 10;
   $$4 = 0;
   STACKTOP = sp;
   return $$4 | 0;
  }
  if (_memcmp($header, 79472, 6) | 0) {
   HEAP32[$f + 116 >> 2] = 34;
   $$4 = 0;
   STACKTOP = sp;
   return $$4 | 0;
  }
  if (_get32($f) | 0) {
   HEAP32[$f + 116 >> 2] = 34;
   $$4 = 0;
   STACKTOP = sp;
   return $$4 | 0;
  }
  $58 = HEAP32[$22 >> 2] | 0;
  do if (!$58) {
   $68 = _fgetc(HEAP32[$f + 20 >> 2] | 0) | 0;
   if (($68 | 0) == -1) {
    HEAP32[$f + 112 >> 2] = 1;
    label = 39;
    break;
   } else {
    $$0$i24 = $68 & 255;
    label = 40;
    break;
   }
  } else if ($58 >>> 0 < (HEAP32[$f + 40 >> 2] | 0) >>> 0) {
   HEAP32[$22 >> 2] = $58 + 1;
   $$0$i24 = HEAP8[$58 >> 0] | 0;
   label = 40;
   break;
  } else {
   HEAP32[$f + 112 >> 2] = 1;
   label = 39;
   break;
  } while (0);
  if ((label | 0) == 39) HEAP32[$f + 4 >> 2] = 0; else if ((label | 0) == 40) {
   $74 = $f + 4 | 0;
   HEAP32[$74 >> 2] = $$0$i24 & 255;
   if ($$0$i24 << 24 >> 24) {
    if (($$0$i24 & 255) > 16) {
     HEAP32[$f + 116 >> 2] = 5;
     $$4 = 0;
     STACKTOP = sp;
     return $$4 | 0;
    }
    $79 = _get32($f) | 0;
    HEAP32[$f >> 2] = $79;
    if (!$79) {
     HEAP32[$f + 116 >> 2] = 34;
     $$4 = 0;
     STACKTOP = sp;
     return $$4 | 0;
    }
    _get32($f) | 0;
    _get32($f) | 0;
    _get32($f) | 0;
    $82 = HEAP32[$22 >> 2] | 0;
    do if (!$82) {
     $92 = _fgetc(HEAP32[$f + 20 >> 2] | 0) | 0;
     if (($92 | 0) == -1) {
      HEAP32[$f + 112 >> 2] = 1;
      $$0$i26 = 0;
      break;
     } else {
      $$0$i26 = $92 & 255;
      break;
     }
    } else if ($82 >>> 0 < (HEAP32[$f + 40 >> 2] | 0) >>> 0) {
     HEAP32[$22 >> 2] = $82 + 1;
     $$0$i26 = HEAP8[$82 >> 0] | 0;
     break;
    } else {
     HEAP32[$f + 112 >> 2] = 1;
     $$0$i26 = 0;
     break;
    } while (0);
    $96 = $$0$i26 & 255;
    $97 = $96 & 15;
    $98 = $96 >>> 4;
    $100 = $f + 128 | 0;
    HEAP32[$100 >> 2] = 1 << $97;
    $102 = $f + 132 | 0;
    HEAP32[$102 >> 2] = 1 << $98;
    if (($97 + -6 | 0) >>> 0 > 7) {
     HEAP32[$f + 116 >> 2] = 20;
     $$4 = 0;
     STACKTOP = sp;
     return $$4 | 0;
    }
    if ($$0$i26 + -96 << 24 >> 24 << 24 >> 24 < 0) {
     HEAP32[$f + 116 >> 2] = 20;
     $$4 = 0;
     STACKTOP = sp;
     return $$4 | 0;
    }
    if ($97 >>> 0 > $98 >>> 0) {
     HEAP32[$f + 116 >> 2] = 20;
     $$4 = 0;
     STACKTOP = sp;
     return $$4 | 0;
    }
    $109 = HEAP32[$22 >> 2] | 0;
    do if (!$109) {
     $119 = _fgetc(HEAP32[$f + 20 >> 2] | 0) | 0;
     if (($119 | 0) == -1) {
      HEAP32[$f + 112 >> 2] = 1;
      break;
     } else {
      $$0$i28 = $119 & 255;
      label = 66;
      break;
     }
    } else if ($109 >>> 0 < (HEAP32[$f + 40 >> 2] | 0) >>> 0) {
     HEAP32[$22 >> 2] = $109 + 1;
     $$0$i28 = HEAP8[$109 >> 0] | 0;
     label = 66;
     break;
    } else {
     HEAP32[$f + 112 >> 2] = 1;
     break;
    } while (0);
    do if ((label | 0) == 66) {
     if (!($$0$i28 & 1)) break;
     if (!(_start_page($f) | 0)) {
      $$4 = 0;
      STACKTOP = sp;
      return $$4 | 0;
     }
     $128 = $f + 1396 | 0;
     while (1) {
      if ((HEAP32[$128 >> 2] | 0) != -1) {
       label = 74;
       break;
      }
      if (!(_start_page($f) | 0)) {
       $$4 = 0;
       label = 607;
       break;
      }
      if (HEAP8[$2 >> 0] & 1) {
       label = 73;
       break;
      }
     }
     if ((label | 0) == 73) {
      HEAP32[$f + 116 >> 2] = 32;
      $$4 = 0;
      STACKTOP = sp;
      return $$4 | 0;
     } else if ((label | 0) == 74) {
      $137 = $f + 1400 | 0;
      HEAP32[$137 >> 2] = 0;
      $138 = $f + 1412 | 0;
      HEAP32[$138 >> 2] = 0;
      $139 = $f + 1416 | 0;
      HEAP32[$139 >> 2] = 0;
      $140 = $f + 1392 | 0;
      HEAP8[$140 >> 0] = 0;
      $141 = $f + 20 | 0;
      $142 = $f + 40 | 0;
      $143 = $f + 112 | 0;
      do {
       $144 = _next_segment($f) | 0;
       $145 = HEAP32[$22 >> 2] | 0;
       do if (!$145) {
        $151 = _ftell(HEAP32[$141 >> 2] | 0) | 0;
        _fseek(HEAP32[$141 >> 2] | 0, $151 + $144 | 0, 0) | 0;
       } else {
        $147 = $145 + $144 | 0;
        HEAP32[$22 >> 2] = $147;
        if ($147 >>> 0 < (HEAP32[$142 >> 2] | 0) >>> 0) break;
        HEAP32[$143 >> 2] = 1;
       } while (0);
       HEAP8[$140 >> 0] = 0;
      } while (($144 | 0) != 0);
      while (1) {
       if ((HEAP32[$128 >> 2] | 0) != -1) {
        label = 84;
        break;
       }
       if (!(_start_page($f) | 0)) {
        $$4 = 0;
        label = 607;
        break;
       }
       if (HEAP8[$2 >> 0] & 1) {
        label = 83;
        break;
       }
      }
      if ((label | 0) == 83) {
       HEAP32[$f + 116 >> 2] = 32;
       $$4 = 0;
       STACKTOP = sp;
       return $$4 | 0;
      } else if ((label | 0) == 84) {
       HEAP32[$137 >> 2] = 0;
       HEAP32[$138 >> 2] = 0;
       HEAP32[$139 >> 2] = 0;
       HEAP8[$140 >> 0] = 0;
       $i$03$i = 0;
       do $i$03$i = $i$03$i + 1 | 0; while (($i$03$i | 0) != 256);
       $164 = HEAP8[$140 >> 0] | 0;
       L136 : do if (!($164 << 24 >> 24)) {
        do if (!(HEAP32[$137 >> 2] | 0)) {
         if (!(_next_segment($f) | 0)) break;
         $$pr$i$i33 = HEAP8[$140 >> 0] | 0;
         if ($$pr$i$i33 << 24 >> 24) {
          $172 = $$pr$i$i33;
          label = 91;
          break L136;
         }
         ___assert_fail(79096, 78904, 1503, 79120);
        } while (0);
        HEAP32[$138 >> 2] = 0;
       } else {
        $172 = $164;
        label = 91;
       } while (0);
       do if ((label | 0) == 91) {
        HEAP8[$140 >> 0] = $172 + -1 << 24 >> 24;
        HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + 1;
        $175 = HEAP32[$22 >> 2] | 0;
        do if (!$175) {
         $182 = _fgetc(HEAP32[$141 >> 2] | 0) | 0;
         if (($182 | 0) == -1) {
          label = 97;
          break;
         }
         $$0$i44 = $182 & 255;
        } else {
         if ($175 >>> 0 >= (HEAP32[$142 >> 2] | 0) >>> 0) {
          label = 97;
          break;
         }
         HEAP32[$22 >> 2] = $175 + 1;
         $$0$i44 = HEAP8[$175 >> 0] | 0;
        } while (0);
        if ((label | 0) == 97) {
         HEAP32[$143 >> 2] = 1;
         HEAP32[$138 >> 2] = 0;
         break;
        }
        HEAP32[$138 >> 2] = 0;
        if ($$0$i44 << 24 >> 24 == 5) $i$0389 = 0; else break;
        L153 : do {
         $187 = HEAP8[$140 >> 0] | 0;
         do if (!($187 << 24 >> 24)) {
          if (HEAP32[$137 >> 2] | 0) {
           $$0$i$i37 = -1;
           break;
          }
          if (!(_next_segment($f) | 0)) {
           $$0$i$i37 = -1;
           break;
          }
          $$pr$i$i35 = HEAP8[$140 >> 0] | 0;
          if (!($$pr$i$i35 << 24 >> 24)) {
           label = 104;
           break L153;
          } else {
           $195 = $$pr$i$i35;
           label = 105;
          }
         } else {
          $195 = $187;
          label = 105;
         } while (0);
         do if ((label | 0) == 105) {
          label = 0;
          HEAP8[$140 >> 0] = $195 + -1 << 24 >> 24;
          HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + 1;
          $198 = HEAP32[$22 >> 2] | 0;
          if (!$198) {
           $205 = _fgetc(HEAP32[$141 >> 2] | 0) | 0;
           if (($205 | 0) == -1) {
            HEAP32[$143 >> 2] = 1;
            $$0$i$i37 = 0;
            break;
           } else {
            $$0$i$i37 = $205 & 255;
            break;
           }
          } else if ($198 >>> 0 < (HEAP32[$142 >> 2] | 0) >>> 0) {
           HEAP32[$22 >> 2] = $198 + 1;
           $$0$i$i37 = HEAP8[$198 >> 0] | 0;
           break;
          } else {
           HEAP32[$143 >> 2] = 1;
           $$0$i$i37 = 0;
           break;
          }
         } while (0);
         HEAP32[$138 >> 2] = 0;
         HEAP8[$header + $i$0389 >> 0] = $$0$i$i37;
         $i$0389 = $i$0389 + 1 | 0;
        } while (($i$0389 | 0) < 6);
        if ((label | 0) == 104) ___assert_fail(79096, 78904, 1503, 79120);
        if (_memcmp($header, 79472, 6) | 0) {
         HEAP32[$f + 116 >> 2] = 20;
         $$4 = 0;
         STACKTOP = sp;
         return $$4 | 0;
        }
        $215 = (_get_bits($f, 8) | 0) + 1 | 0;
        $216 = $f + 136 | 0;
        HEAP32[$216 >> 2] = $215;
        $217 = $215 * 2096 | 0;
        $218 = $f + 8 | 0;
        HEAP32[$218 >> 2] = $217 + (HEAP32[$218 >> 2] | 0);
        $221 = $f + 96 | 0;
        $222 = HEAP32[$221 >> 2] | 0;
        do if (!$222) {
         if (!$217) {
          label = 120;
          break;
         }
         $$0$i40 = _malloc($217) | 0;
         label = 121;
        } else {
         $224 = $f + 104 | 0;
         $225 = HEAP32[$224 >> 2] | 0;
         $226 = $225 + $217 | 0;
         if (($226 | 0) > (HEAP32[$f + 108 >> 2] | 0)) {
          label = 120;
          break;
         }
         HEAP32[$224 >> 2] = $226;
         $$0$i40 = $222 + $225 | 0;
         label = 121;
        } while (0);
        do if ((label | 0) == 120) HEAP32[$f + 140 >> 2] = 0; else if ((label | 0) == 121) {
         $234 = $f + 140 | 0;
         HEAP32[$234 >> 2] = $$0$i40;
         if (!$$0$i40) break;
         _memset($$0$i40 | 0, 0, $217 | 0) | 0;
         L187 : do if ((HEAP32[$216 >> 2] | 0) > 0) {
          $239 = $f + 104 | 0;
          $240 = $f + 108 | 0;
          $241 = $f + 16 | 0;
          $i$1376 = 0;
          L189 : while (1) {
           $242 = HEAP32[$234 >> 2] | 0;
           if (((_get_bits($f, 8) | 0) & 255 | 0) != 66) {
            label = 126;
            break;
           }
           if (((_get_bits($f, 8) | 0) & 255 | 0) != 67) {
            label = 128;
            break;
           }
           if (((_get_bits($f, 8) | 0) & 255 | 0) != 86) {
            label = 130;
            break;
           }
           $255 = _get_bits($f, 8) | 0;
           $260 = $242 + ($i$1376 * 2096 | 0) | 0;
           HEAP32[$260 >> 2] = (_get_bits($f, 8) | 0) << 8 | $255 & 255;
           $261 = _get_bits($f, 8) | 0;
           $262 = _get_bits($f, 8) | 0;
           $270 = $242 + ($i$1376 * 2096 | 0) + 4 | 0;
           HEAP32[$270 >> 2] = $262 << 8 & 65280 | $261 & 255 | (_get_bits($f, 8) | 0) << 16;
           $272 = (_get_bits($f, 1) | 0) != 0;
           do if ($272) {
            $273 = $242 + ($i$1376 * 2096 | 0) + 23 | 0;
            HEAP8[$273 >> 0] = 0;
            $1788 = $273;
            $290 = HEAP32[$270 >> 2] | 0;
            label = 138;
           } else {
            $phitmp9 = (_get_bits($f, 1) | 0) & 255;
            $276 = $242 + ($i$1376 * 2096 | 0) + 23 | 0;
            HEAP8[$276 >> 0] = $phitmp9;
            $278 = HEAP32[$270 >> 2] | 0;
            if (!($phitmp9 << 24 >> 24)) {
             $1788 = $276;
             $290 = $278;
             label = 138;
             break;
            }
            $280 = $278 + 3 & -4;
            $281 = HEAP32[$221 >> 2] | 0;
            if (!$281) {
             $357 = $276;
             $lengths$0 = _malloc($280) | 0;
             break;
            }
            $284 = (HEAP32[$240 >> 2] | 0) - $280 | 0;
            if (($284 | 0) < (HEAP32[$239 >> 2] | 0)) {
             label = 145;
             break L189;
            }
            HEAP32[$240 >> 2] = $284;
            $357 = $276;
            $lengths$0 = $281 + $284 | 0;
           } while (0);
           if ((label | 0) == 138) {
            label = 0;
            $291 = $290 + 3 & -4;
            HEAP32[$218 >> 2] = (HEAP32[$218 >> 2] | 0) + $291;
            $294 = HEAP32[$221 >> 2] | 0;
            do if (!$294) {
             if (!$291) {
              $$0$i47 = 0;
              break;
             }
             $$0$i47 = _malloc($291) | 0;
            } else {
             $296 = HEAP32[$239 >> 2] | 0;
             $297 = $296 + $291 | 0;
             if (($297 | 0) > (HEAP32[$240 >> 2] | 0)) {
              $$0$i47 = 0;
              break;
             }
             HEAP32[$239 >> 2] = $297;
             $$0$i47 = $294 + $296 | 0;
            } while (0);
            HEAP32[$242 + ($i$1376 * 2096 | 0) + 8 >> 2] = $$0$i47;
            $357 = $1788;
            $lengths$0 = $$0$i47;
           }
           if (!$lengths$0) {
            label = 145;
            break;
           }
           do if ($272) {
            $308 = _get_bits($f, 5) | 0;
            $309 = HEAP32[$270 >> 2] | 0;
            if (($309 | 0) > 0) {
             $312 = $309;
             $current_entry$0265 = 0;
             $current_length$0266$in = $308;
            } else {
             $372 = $309;
             $total$2 = 0;
             break;
            }
            while (1) {
             $current_length$0266$in = $current_length$0266$in + 1 | 0;
             $311 = $312 - $current_entry$0265 | 0;
             do if (($311 | 0) < 16384) {
              if (($311 | 0) < 16) {
               $$0$i49 = HEAP8[79416 + $311 >> 0] | 0;
               break;
              }
              if (($311 | 0) < 512) {
               $$0$i49 = (HEAP8[79416 + ($311 >> 5) >> 0] | 0) + 5 | 0;
               break;
              } else {
               $$0$i49 = (HEAP8[79416 + ($311 >> 10) >> 0] | 0) + 10 | 0;
               break;
              }
             } else {
              if (($311 | 0) >= 16777216) {
               if (($311 | 0) >= 536870912) {
                $$0$i49 = 0;
                break;
               }
               $$0$i49 = (HEAP8[79416 + ($311 >> 25) >> 0] | 0) + 25 | 0;
               break;
              }
              if (($311 | 0) < 524288) {
               $$0$i49 = (HEAP8[79416 + ($311 >> 15) >> 0] | 0) + 15 | 0;
               break;
              } else {
               $$0$i49 = (HEAP8[79416 + ($311 >> 20) >> 0] | 0) + 20 | 0;
               break;
              }
             } while (0);
             $347 = _get_bits($f, $$0$i49) | 0;
             $current_entry$0265$looptemp = $current_entry$0265;
             $current_entry$0265 = $347 + $current_entry$0265 | 0;
             if (($current_entry$0265 | 0) > (HEAP32[$270 >> 2] | 0)) {
              label = 162;
              break L189;
             }
             _memset($lengths$0 + $current_entry$0265$looptemp | 0, $current_length$0266$in & 255 | 0, $347 | 0) | 0;
             $354 = HEAP32[$270 >> 2] | 0;
             if (($current_entry$0265 | 0) >= ($354 | 0)) {
              $372 = $354;
              $total$2 = 0;
              break;
             } else $312 = $354;
            }
           } else {
            $306 = HEAP32[$270 >> 2] | 0;
            if (($306 | 0) > 0) {
             $j$0260 = 0;
             $total$0259 = 0;
            } else {
             $372 = $306;
             $total$2 = 0;
             break;
            }
            while (1) {
             do if (!(HEAP8[$357 >> 0] | 0)) label = 166; else {
              if (_get_bits($f, 1) | 0) {
               label = 166;
               break;
              }
              HEAP8[$lengths$0 + $j$0260 >> 0] = -1;
              $total$1 = $total$0259;
             } while (0);
             if ((label | 0) == 166) {
              label = 0;
              HEAP8[$lengths$0 + $j$0260 >> 0] = (_get_bits($f, 5) | 0) + 1;
              $total$1 = $total$0259 + 1 | 0;
             }
             $j$0260 = $j$0260 + 1 | 0;
             $367 = HEAP32[$270 >> 2] | 0;
             if (($j$0260 | 0) >= ($367 | 0)) {
              $372 = $367;
              $total$2 = $total$1;
              break;
             } else $total$0259 = $total$1;
            }
           } while (0);
           do if (!(HEAP8[$357 >> 0] | 0)) {
            $lengths$1$ph = $lengths$0;
            label = 182;
           } else {
            if (($total$2 | 0) < ($372 >> 2 | 0)) {
             $lengths$1522 = $lengths$0;
             $sorted_count$2 = $total$2;
             break;
            }
            if (($372 | 0) > (HEAP32[$241 >> 2] | 0)) {
             HEAP32[$241 >> 2] = $372;
             $377 = HEAP32[$270 >> 2] | 0;
            } else $377 = $372;
            $378 = $377 + 3 & -4;
            HEAP32[$218 >> 2] = $378 + (HEAP32[$218 >> 2] | 0);
            $381 = HEAP32[$221 >> 2] | 0;
            do if (!$381) {
             if (!$378) {
              $$0$i52 = 0;
              break;
             }
             $$0$i52 = _malloc($378) | 0;
            } else {
             $383 = HEAP32[$239 >> 2] | 0;
             $384 = $383 + $378 | 0;
             if (($384 | 0) > (HEAP32[$240 >> 2] | 0)) {
              $$0$i52 = 0;
              break;
             }
             HEAP32[$239 >> 2] = $384;
             $$0$i52 = $381 + $383 | 0;
            } while (0);
            $390 = $242 + ($i$1376 * 2096 | 0) + 8 | 0;
            HEAP32[$390 >> 2] = $$0$i52;
            _memcpy($$0$i52 | 0, $lengths$0 | 0, HEAP32[$270 >> 2] | 0) | 0;
            if (!(HEAP32[$221 >> 2] | 0)) _free($lengths$0); else HEAP32[$240 >> 2] = ((HEAP32[$270 >> 2] | 0) + 3 & -4) + (HEAP32[$240 >> 2] | 0);
            $399 = HEAP32[$390 >> 2] | 0;
            HEAP8[$357 >> 0] = 0;
            $lengths$1$ph = $399;
            label = 182;
           } while (0);
           do if ((label | 0) == 182) {
            label = 0;
            $400 = HEAP32[$270 >> 2] | 0;
            if (($400 | 0) > 0) {
             $j$1272 = 0;
             $sorted_count$0271 = 0;
            } else {
             $lengths$1522 = $lengths$1$ph;
             $sorted_count$2 = 0;
             break;
            }
            while (1) {
             $403 = HEAP8[$lengths$1$ph + $j$1272 >> 0] | 0;
             $sorted_count$1 = ((($403 & 255) < 11 | $403 << 24 >> 24 == -1) & 1 ^ 1) + $sorted_count$0271 | 0;
             $j$1272 = $j$1272 + 1 | 0;
             if (($j$1272 | 0) >= ($400 | 0)) {
              $lengths$1522 = $lengths$1$ph;
              $sorted_count$2 = $sorted_count$1;
              break;
             } else $sorted_count$0271 = $sorted_count$1;
            }
           } while (0);
           $410 = $242 + ($i$1376 * 2096 | 0) + 2092 | 0;
           HEAP32[$410 >> 2] = $sorted_count$2;
           do if (!(HEAP8[$357 >> 0] | 0)) {
            $414 = HEAP32[$270 >> 2] << 2;
            HEAP32[$218 >> 2] = (HEAP32[$218 >> 2] | 0) + $414;
            $417 = HEAP32[$221 >> 2] | 0;
            if (!$417) {
             if (!$414) {
              label = 190;
              break L189;
             }
             $$0$i54 = _malloc($414) | 0;
            } else {
             $419 = HEAP32[$239 >> 2] | 0;
             $420 = $419 + $414 | 0;
             if (($420 | 0) > (HEAP32[$240 >> 2] | 0)) {
              label = 190;
              break L189;
             }
             HEAP32[$239 >> 2] = $420;
             $$0$i54 = $417 + $419 | 0;
            }
            HEAP32[$242 + ($i$1376 * 2096 | 0) + 32 >> 2] = $$0$i54;
            if (!$$0$i54) {
             label = 192;
             break L189;
            } else {
             $values$1$ph = 0;
             label = 218;
            }
           } else {
            if (!$sorted_count$2) {
             $476 = 0;
             $values$0 = 0;
            } else {
             $432 = $sorted_count$2 + 3 & -4;
             HEAP32[$218 >> 2] = (HEAP32[$218 >> 2] | 0) + $432;
             $435 = HEAP32[$221 >> 2] | 0;
             if (!$435) {
              if (!$432) {
               label = 199;
               break L189;
              }
              $$0$i58 = _malloc($432) | 0;
             } else {
              $437 = HEAP32[$239 >> 2] | 0;
              $438 = $437 + $432 | 0;
              if (($438 | 0) > (HEAP32[$240 >> 2] | 0)) {
               label = 199;
               break L189;
              }
              HEAP32[$239 >> 2] = $438;
              $$0$i58 = $435 + $437 | 0;
             }
             HEAP32[$242 + ($i$1376 * 2096 | 0) + 8 >> 2] = $$0$i58;
             if (!$$0$i58) {
              label = 201;
              break L189;
             }
             $449 = HEAP32[$410 >> 2] << 2;
             $450 = HEAP32[$221 >> 2] | 0;
             if (!$450) $$0$i60 = _malloc($449) | 0; else {
              $453 = (HEAP32[$240 >> 2] | 0) - $449 | 0;
              if (($453 | 0) < (HEAP32[$239 >> 2] | 0)) {
               label = 204;
               break L189;
              }
              HEAP32[$240 >> 2] = $453;
              $$0$i60 = $450 + $453 | 0;
             }
             HEAP32[$242 + ($i$1376 * 2096 | 0) + 32 >> 2] = $$0$i60;
             if (!$$0$i60) {
              label = 208;
              break L189;
             }
             $463 = HEAP32[$410 >> 2] << 2;
             $464 = HEAP32[$221 >> 2] | 0;
             if (!$464) $$0$i62 = _malloc($463) | 0; else {
              $467 = (HEAP32[$240 >> 2] | 0) - $463 | 0;
              if (($467 | 0) < (HEAP32[$239 >> 2] | 0)) {
               label = 215;
               break L189;
              }
              HEAP32[$240 >> 2] = $467;
              $$0$i62 = $464 + $467 | 0;
             }
             if (!$$0$i62) {
              label = 215;
              break L189;
             }
             $476 = HEAP32[$410 >> 2] << 3;
             $values$0 = $$0$i62;
            }
            $474 = HEAP32[$270 >> 2] | 0;
            $475 = $476 + $474 | 0;
            if ($475 >>> 0 <= (HEAP32[$241 >> 2] | 0) >>> 0) {
             $479 = $474;
             $values$1 = $values$0;
             break;
            }
            HEAP32[$241 >> 2] = $475;
            $values$1$ph = $values$0;
            label = 218;
           } while (0);
           if ((label | 0) == 218) {
            label = 0;
            $479 = HEAP32[$270 >> 2] | 0;
            $values$1 = $values$1$ph;
           }
           dest = $available$i + 0 | 0;
           stop = dest + 128 | 0;
           do {
            HEAP32[dest >> 2] = 0;
            dest = dest + 4 | 0;
           } while ((dest | 0) < (stop | 0));
           L300 : do if (($479 | 0) > 0) {
            $k$014$i = 0;
            while (1) {
             $481 = $k$014$i + 1 | 0;
             if ((HEAP8[$lengths$1522 + $k$014$i >> 0] | 0) != -1) {
              $k$0$lcssa$i = $k$014$i;
              break L300;
             }
             if (($481 | 0) < ($479 | 0)) $k$014$i = $481; else {
              $k$0$lcssa$i = $481;
              break;
             }
            }
           } else $k$0$lcssa$i = 0; while (0);
           L305 : do if (($k$0$lcssa$i | 0) == ($479 | 0)) {
            if (HEAP32[$410 >> 2] | 0) {
             label = 224;
             break L189;
            }
           } else {
            $489 = $lengths$1522 + $k$0$lcssa$i | 0;
            $490 = $242 + ($i$1376 * 2096 | 0) + 23 | 0;
            $493 = $242 + ($i$1376 * 2096 | 0) + 32 | 0;
            $494 = HEAP32[$493 >> 2] | 0;
            if (!(HEAP8[$490 >> 0] | 0)) HEAP32[$494 + ($k$0$lcssa$i << 2) >> 2] = 0; else {
             $496 = HEAP8[$489 >> 0] | 0;
             HEAP32[$494 >> 2] = 0;
             HEAP8[HEAP32[$242 + ($i$1376 * 2096 | 0) + 8 >> 2] >> 0] = $496;
             HEAP32[$values$1 >> 2] = $k$0$lcssa$i;
            }
            $499 = HEAP8[$489 >> 0] | 0;
            if ($499 << 24 >> 24) {
             $501 = $499 & 255;
             $i$012$i = 1;
             while (1) {
              HEAP32[$available$i + ($i$012$i << 2) >> 2] = 1 << 32 - $i$012$i;
              if (($i$012$i | 0) < ($501 | 0)) $i$012$i = $i$012$i + 1 | 0; else break;
             }
            }
            $502 = $242 + ($i$1376 * 2096 | 0) + 8 | 0;
            $i$1$in$ph$i = $k$0$lcssa$i;
            $m$0$ph$i = 1;
            L316 : while (1) {
             $i$1$in$i = $i$1$in$ph$i;
             while (1) {
              $i$1$i = $i$1$in$i + 1 | 0;
              if (($i$1$i | 0) >= ($479 | 0)) break L316;
              $509 = $lengths$1522 + $i$1$i | 0;
              $510 = HEAP8[$509 >> 0] | 0;
              $511 = $510 & 255;
              if (!($510 << 24 >> 24)) {
               $1789 = 0;
               $z$0$lcssa$i = $511;
               label = 237;
               break;
              } else if ($510 << 24 >> 24 == -1) $i$1$in$i = $i$1$i; else {
               $z$04$i = $511;
               label = 236;
               break;
              }
             }
             L321 : do if ((label | 0) == 236) while (1) {
              label = 0;
              $515 = HEAP32[$available$i + ($z$04$i << 2) >> 2] | 0;
              $512 = $z$04$i + -1 | 0;
              if ($515) {
               $520 = $515;
               $551 = $510;
               $z$03$i = $z$04$i;
               break L321;
              }
              if (($512 | 0) > 0) {
               $z$04$i = $512;
               label = 236;
              } else {
               $1789 = $510;
               $z$0$lcssa$i = $512;
               label = 237;
               break;
              }
             } while (0);
             if ((label | 0) == 237) {
              label = 0;
              if (!$z$0$lcssa$i) {
               label = 239;
               break L189;
              }
              $520 = HEAP32[$available$i + ($z$0$lcssa$i << 2) >> 2] | 0;
              $551 = $1789;
              $z$03$i = $z$0$lcssa$i;
             }
             HEAP32[$available$i + ($z$03$i << 2) >> 2] = 0;
             $524 = $520 >>> 1 & 1431655765 | $520 << 1 & -1431655766;
             $529 = $524 >>> 2 & 858993459 | $524 << 2 & -858993460;
             $534 = $529 >>> 4 & 252645135 | $529 << 4 & -252645136;
             $539 = $534 >>> 8 & 16711935 | $534 << 8 & -16711936;
             $542 = $539 >>> 16 | $539 << 16;
             $543 = $m$0$ph$i + 1 | 0;
             $546 = HEAP32[$493 >> 2] | 0;
             if (!(HEAP8[$490 >> 0] | 0)) HEAP32[$546 + ($i$1$i << 2) >> 2] = $542; else {
              HEAP32[$546 + ($m$0$ph$i << 2) >> 2] = $542;
              HEAP8[(HEAP32[$502 >> 2] | 0) + $m$0$ph$i >> 0] = $551;
              HEAP32[$values$1 + ($m$0$ph$i << 2) >> 2] = $i$1$i;
             }
             $554 = HEAPU8[$509 >> 0] | 0;
             if (($554 | 0) > ($z$03$i | 0)) $y$06$i = $554; else {
              $i$1$in$ph$i = $i$1$i;
              $m$0$ph$i = $543;
              continue;
             }
             while (1) {
              $556 = $available$i + ($y$06$i << 2) | 0;
              if (HEAP32[$556 >> 2] | 0) {
               label = 245;
               break L189;
              }
              HEAP32[$556 >> 2] = (1 << 32 - $y$06$i) + $520;
              $562 = $y$06$i + -1 | 0;
              if (($562 | 0) > ($z$03$i | 0)) $y$06$i = $562; else {
               $i$1$in$ph$i = $i$1$i;
               $m$0$ph$i = $543;
               continue L316;
              }
             }
            }
            $$pre493 = HEAP32[$410 >> 2] | 0;
            if (!$$pre493) break;
            $567 = ($$pre493 << 2) + 7 & -4;
            $569 = (HEAP32[$218 >> 2] | 0) + $567 | 0;
            HEAP32[$218 >> 2] = $569;
            $570 = HEAP32[$221 >> 2] | 0;
            do if (!$570) {
             if (!$567) {
              $$0$i64 = 0;
              break;
             }
             $$0$i64 = _malloc($567) | 0;
            } else {
             $572 = HEAP32[$239 >> 2] | 0;
             $573 = $572 + $567 | 0;
             if (($573 | 0) > (HEAP32[$240 >> 2] | 0)) {
              $$0$i64 = 0;
              break;
             }
             HEAP32[$239 >> 2] = $573;
             $$0$i64 = $570 + $572 | 0;
            } while (0);
            $579 = $242 + ($i$1376 * 2096 | 0) + 2084 | 0;
            HEAP32[$579 >> 2] = $$0$i64;
            $583 = (HEAP32[$410 >> 2] << 2) + 7 & -4;
            HEAP32[$218 >> 2] = $583 + $569;
            $585 = HEAP32[$221 >> 2] | 0;
            do if (!$585) {
             if (!$583) {
              label = 258;
              break;
             }
             $$0$i66 = _malloc($583) | 0;
             label = 259;
            } else {
             $587 = HEAP32[$239 >> 2] | 0;
             $588 = $587 + $583 | 0;
             if (($588 | 0) > (HEAP32[$240 >> 2] | 0)) {
              label = 258;
              break;
             }
             HEAP32[$239 >> 2] = $588;
             $$0$i66 = $585 + $587 | 0;
             label = 259;
            } while (0);
            do if ((label | 0) == 258) {
             label = 0;
             HEAP32[$242 + ($i$1376 * 2096 | 0) + 2088 >> 2] = 0;
            } else if ((label | 0) == 259) {
             label = 0;
             $595 = $242 + ($i$1376 * 2096 | 0) + 2088 | 0;
             HEAP32[$595 >> 2] = $$0$i66;
             if (!$$0$i66) break;
             HEAP32[$595 >> 2] = $$0$i66 + 4;
             HEAP32[$$0$i66 >> 2] = -1;
            } while (0);
            $598 = $242 + ($i$1376 * 2096 | 0) + 23 | 0;
            do if (!(HEAP8[$598 >> 0] | 0)) {
             $606 = HEAP32[$270 >> 2] | 0;
             L360 : do if (($606 | 0) > 0) {
              $608 = $242 + ($i$1376 * 2096 | 0) + 32 | 0;
              $1790 = $606;
              $c$idx1$val$i = 1;
              $i$017$i = 0;
              $k$016$i = 0;
              while (1) {
               $610 = HEAP8[$lengths$1522 + $i$017$i >> 0] | 0;
               $611 = $610 << 24 >> 24 == -1;
               if ($c$idx1$val$i) if (($610 & 255) > 10 & ($611 ^ 1)) label = 270; else {
                $644 = $1790;
                $k$1$i = $k$016$i;
               } else if ($611) {
                label = 268;
                break L189;
               } else label = 270;
               if ((label | 0) == 270) {
                label = 0;
                $615 = HEAP32[(HEAP32[$608 >> 2] | 0) + ($i$017$i << 2) >> 2] | 0;
                $620 = $615 >>> 1 & 1431655765 | $615 << 1 & -1431655766;
                $625 = $620 >>> 2 & 858993459 | $620 << 2 & -858993460;
                $630 = $625 >>> 4 & 252645135 | $625 << 4 & -252645136;
                $635 = $630 >>> 8 & 16711935 | $630 << 8 & -16711936;
                HEAP32[(HEAP32[$579 >> 2] | 0) + ($k$016$i << 2) >> 2] = $635 >>> 16 | $635 << 16;
                $644 = HEAP32[$270 >> 2] | 0;
                $k$1$i = $k$016$i + 1 | 0;
               }
               $642 = $i$017$i + 1 | 0;
               if (($642 | 0) >= ($644 | 0)) {
                $k$0$lcssa$i69 = $k$1$i;
                break L360;
               }
               $1790 = $644;
               $c$idx1$val$i = (HEAP8[$598 >> 0] | 0) == 0;
               $i$017$i = $642;
               $k$016$i = $k$1$i;
              }
             } else $k$0$lcssa$i69 = 0; while (0);
             if (($k$0$lcssa$i69 | 0) == (HEAP32[$410 >> 2] | 0)) $677 = $k$0$lcssa$i69; else {
              label = 274;
              break L189;
             }
            } else {
             $601 = HEAP32[$410 >> 2] | 0;
             if (($601 | 0) <= 0) {
              $677 = $601;
              break;
             }
             $604 = HEAP32[$242 + ($i$1376 * 2096 | 0) + 32 >> 2] | 0;
             $605 = HEAP32[$579 >> 2] | 0;
             $i$122$i = 0;
             do {
              $648 = HEAP32[$604 + ($i$122$i << 2) >> 2] | 0;
              $653 = $648 >>> 1 & 1431655765 | $648 << 1 & -1431655766;
              $658 = $653 >>> 2 & 858993459 | $653 << 2 & -858993460;
              $663 = $658 >>> 4 & 252645135 | $658 << 4 & -252645136;
              $668 = $663 >>> 8 & 16711935 | $663 << 8 & -16711936;
              HEAP32[$605 + ($i$122$i << 2) >> 2] = $668 >>> 16 | $668 << 16;
              $i$122$i = $i$122$i + 1 | 0;
              $674 = HEAP32[$410 >> 2] | 0;
             } while (($i$122$i | 0) < ($674 | 0));
             $677 = $674;
            } while (0);
            _qsort(HEAP32[$579 >> 2] | 0, $677, 4, 23);
            HEAP32[(HEAP32[$579 >> 2] | 0) + (HEAP32[$410 >> 2] << 2) >> 2] = -1;
            $681 = HEAP8[$598 >> 0] | 0;
            $683 = HEAP32[($681 << 24 >> 24 == 0 ? $270 : $410) >> 2] | 0;
            if (($683 | 0) <= 0) break;
            $685 = $242 + ($i$1376 * 2096 | 0) + 32 | 0;
            $686 = $242 + ($i$1376 * 2096 | 0) + 2088 | 0;
            $687 = $242 + ($i$1376 * 2096 | 0) + 8 | 0;
            $688 = $681;
            $i$211$i = 0;
            while (1) {
             $689 = $688 << 24 >> 24 == 0;
             if ($689) {
              $$sink31$i = HEAP8[$lengths$1522 + $i$211$i >> 0] | 0;
              if (($$sink31$i & 255) > 10 & $$sink31$i << 24 >> 24 != -1) {
               $$sink32$i = $$sink31$i;
               label = 282;
              }
             } else {
              $$sink$i = HEAP8[$lengths$1522 + (HEAP32[$values$1 + ($i$211$i << 2) >> 2] | 0) >> 0] | 0;
              if ($$sink$i << 24 >> 24 == -1) {
               label = 280;
               break L189;
              } else {
               $$sink32$i = $$sink$i;
               label = 282;
              }
             }
             do if ((label | 0) == 282) {
              label = 0;
              $696 = HEAP32[(HEAP32[$685 >> 2] | 0) + ($i$211$i << 2) >> 2] | 0;
              $701 = $696 >>> 1 & 1431655765 | $696 << 1 & -1431655766;
              $706 = $701 >>> 2 & 858993459 | $701 << 2 & -858993460;
              $711 = $706 >>> 4 & 252645135 | $706 << 4 & -252645136;
              $716 = $711 >>> 8 & 16711935 | $711 << 8 & -16711936;
              $719 = $716 >>> 16 | $716 << 16;
              $720 = HEAP32[$410 >> 2] | 0;
              $722 = HEAP32[$579 >> 2] | 0;
              if (($720 | 0) > 1) {
               $n$010$i = $720;
               $x$09$i = 0;
               while (1) {
                $723 = $n$010$i >> 1;
                $724 = $723 + $x$09$i | 0;
                $727 = (HEAP32[$722 + ($724 << 2) >> 2] | 0) >>> 0 > $719 >>> 0;
                $x$0$$i = $727 ? $x$09$i : $724;
                $n$010$i = $727 ? $723 : $n$010$i - $723 | 0;
                if (($n$010$i | 0) <= 1) {
                 $x$0$lcssa$i = $x$0$$i;
                 break;
                } else $x$09$i = $x$0$$i;
               }
              } else $x$0$lcssa$i = 0;
              if ((HEAP32[$722 + ($x$0$lcssa$i << 2) >> 2] | 0) != ($719 | 0)) {
               label = 285;
               break L189;
              }
              if ($689) {
               HEAP32[(HEAP32[$686 >> 2] | 0) + ($x$0$lcssa$i << 2) >> 2] = $i$211$i;
               break;
              } else {
               HEAP32[(HEAP32[$686 >> 2] | 0) + ($x$0$lcssa$i << 2) >> 2] = HEAP32[$values$1 + ($i$211$i << 2) >> 2];
               HEAP8[(HEAP32[$687 >> 2] | 0) + $x$0$lcssa$i >> 0] = $$sink32$i;
               break;
              }
             } while (0);
             $741 = $i$211$i + 1 | 0;
             if (($741 | 0) >= ($683 | 0)) break L305;
             $688 = HEAP8[$598 >> 0] | 0;
             $i$211$i = $741;
            }
           } while (0);
           if (HEAP8[$357 >> 0] | 0) {
            $745 = HEAP32[$221 >> 2] | 0;
            do if (!$745) {
             _free($values$1);
             $$pre495 = HEAP32[$221 >> 2] | 0;
             $752 = $242 + ($i$1376 * 2096 | 0) + 32 | 0;
             if ($$pre495) {
              $1791 = $752;
              $1792 = $$pre495;
              label = 295;
              break;
             }
             _free(HEAP32[$752 >> 2] | 0);
             $759 = HEAP32[$221 >> 2] | 0;
             $766 = $752;
            } else {
             HEAP32[$240 >> 2] = (HEAP32[$240 >> 2] | 0) + (HEAP32[$410 >> 2] << 2);
             $1791 = $242 + ($i$1376 * 2096 | 0) + 32 | 0;
             $1792 = $745;
             label = 295;
            } while (0);
            if ((label | 0) == 295) {
             label = 0;
             HEAP32[$240 >> 2] = (HEAP32[$240 >> 2] | 0) + (HEAP32[$410 >> 2] << 2);
             $759 = $1792;
             $766 = $1791;
            }
            if (!$759) _free($lengths$1522); else HEAP32[$240 >> 2] = ((HEAP32[$270 >> 2] | 0) + 3 & -4) + (HEAP32[$240 >> 2] | 0);
            HEAP32[$766 >> 2] = 0;
           }
           _memset($242 + ($i$1376 * 2096 | 0) + 36 | 0, -1, 2048) | 0;
           $767 = $242 + ($i$1376 * 2096 | 0) + 23 | 0;
           $770 = HEAP32[((HEAP8[$767 >> 0] | 0) == 0 ? $270 : $410) >> 2] | 0;
           if (($770 | 0) > 0) {
            $772 = $242 + ($i$1376 * 2096 | 0) + 8 | 0;
            $773 = $242 + ($i$1376 * 2096 | 0) + 32 | 0;
            $774 = $242 + ($i$1376 * 2096 | 0) + 2084 | 0;
            $776 = ($770 | 0) < 32767 ? $770 : 32767;
            $778 = HEAP32[$772 >> 2] | 0;
            $i$12$i = 0;
            while (1) {
             do if ((HEAPU8[$778 + $i$12$i >> 0] | 0) < 11) {
              if (!(HEAP8[$767 >> 0] | 0)) $z$0$ph$i = HEAP32[(HEAP32[$773 >> 2] | 0) + ($i$12$i << 2) >> 2] | 0; else {
               $785 = HEAP32[(HEAP32[$774 >> 2] | 0) + ($i$12$i << 2) >> 2] | 0;
               $790 = $785 >>> 1 & 1431655765 | $785 << 1 & -1431655766;
               $795 = $790 >>> 2 & 858993459 | $790 << 2 & -858993460;
               $800 = $795 >>> 4 & 252645135 | $795 << 4 & -252645136;
               $805 = $800 >>> 8 & 16711935 | $800 << 8 & -16711936;
               $z$0$ph$i = $805 >>> 16 | $805 << 16;
              }
              if ($z$0$ph$i >>> 0 >= 1024) {
               $1793 = $778;
               break;
              }
              $813 = $i$12$i & 65535;
              $z$01$i = $z$0$ph$i;
              do {
               HEAP16[$242 + ($i$1376 * 2096 | 0) + ($z$01$i << 1) + 36 >> 1] = $813;
               $815 = HEAP32[$772 >> 2] | 0;
               $z$01$i = (1 << HEAPU8[$815 + $i$12$i >> 0]) + $z$01$i | 0;
              } while ($z$01$i >>> 0 < 1024);
              $1793 = $815;
             } else $1793 = $778; while (0);
             $i$12$i = $i$12$i + 1 | 0;
             if (($i$12$i | 0) == ($776 | 0)) break; else $778 = $1793;
            }
           }
           $823 = _get_bits($f, 4) | 0;
           $825 = $242 + ($i$1376 * 2096 | 0) + 21 | 0;
           HEAP8[$825 >> 0] = $823;
           $826 = $823 & 255;
           if ($826 >>> 0 > 2) {
            label = 312;
            break;
           }
           do if ($826) {
            $830 = _get_bits($f, 32) | 0;
            $835 = +(($830 & 2097151) >>> 0);
            if (($830 | 0) < 0) $838 = -$835; else $838 = $835;
            $843 = $242 + ($i$1376 * 2096 | 0) + 12 | 0;
            HEAPF32[$843 >> 2] = +_ldexp($838, ($830 >>> 21 & 1023) + -788 | 0);
            $844 = _get_bits($f, 32) | 0;
            $849 = +(($844 & 2097151) >>> 0);
            if (($844 | 0) < 0) $852 = -$849; else $852 = $849;
            $857 = $242 + ($i$1376 * 2096 | 0) + 16 | 0;
            HEAPF32[$857 >> 2] = +_ldexp($852, ($844 >>> 21 & 1023) + -788 | 0);
            $861 = $242 + ($i$1376 * 2096 | 0) + 20 | 0;
            HEAP8[$861 >> 0] = (_get_bits($f, 4) | 0) + 1;
            $864 = $242 + ($i$1376 * 2096 | 0) + 22 | 0;
            HEAP8[$864 >> 0] = _get_bits($f, 1) | 0;
            $867 = HEAP32[$270 >> 2] | 0;
            $868 = HEAP32[$260 >> 2] | 0;
            if ((HEAP8[$825 >> 0] | 0) == 1) {
             $878 = ~~+Math_floor(+(+Math_exp(+(+Math_log(+(+($867 | 0))) / +($868 | 0)))));
             $882 = +($868 | 0);
             $$$i82 = ((~~+Math_floor(+(+Math_pow(+(+($878 | 0) + 1.0), +$882))) | 0) <= ($867 | 0) & 1) + $878 | 0;
             $887 = +($$$i82 | 0);
             if (!(+Math_pow(+($887 + 1.0), +$882) > +($867 | 0))) {
              label = 320;
              break L189;
             }
             if ((~~+Math_floor(+(+Math_pow(+$887, +$882))) | 0) > ($867 | 0)) {
              label = 322;
              break L189;
             }
             HEAP32[$242 + ($i$1376 * 2096 | 0) + 24 >> 2] = $$$i82;
             $903 = $$$i82;
            } else {
             $899 = Math_imul($868, $867) | 0;
             HEAP32[$242 + ($i$1376 * 2096 | 0) + 24 >> 2] = $899;
             $903 = $899;
            }
            $901 = $242 + ($i$1376 * 2096 | 0) + 24 | 0;
            $905 = ($903 << 1) + 3 & -4;
            $906 = HEAP32[$221 >> 2] | 0;
            if (!$906) $$0$i83 = _malloc($905) | 0; else {
             $909 = (HEAP32[$240 >> 2] | 0) - $905 | 0;
             if (($909 | 0) < (HEAP32[$239 >> 2] | 0)) {
              label = 331;
              break L189;
             }
             HEAP32[$240 >> 2] = $909;
             $$0$i83 = $906 + $909 | 0;
            }
            if (!$$0$i83) {
             label = 331;
             break L189;
            }
            $915 = HEAP32[$901 >> 2] | 0;
            if (($915 | 0) > 0) {
             $j$2296 = 0;
             while (1) {
              $920 = _get_bits($f, HEAPU8[$861 >> 0] | 0) | 0;
              if (($920 | 0) == -1) {
               label = 333;
               break L189;
              }
              HEAP16[$$0$i83 + ($j$2296 << 1) >> 1] = $920;
              $j$2296 = $j$2296 + 1 | 0;
              $934 = HEAP32[$901 >> 2] | 0;
              if (($j$2296 | 0) >= ($934 | 0)) {
               $$lcssa294 = $934;
               break;
              }
             }
            } else $$lcssa294 = $915;
            do if ((HEAP8[$825 >> 0] | 0) == 1) {
             $939 = (HEAP8[$357 >> 0] | 0) != 0;
             if ($939) {
              $940 = HEAP32[$410 >> 2] | 0;
              if (!$940) {
               label = 380;
               break;
              }
              $944 = Math_imul(HEAP32[$260 >> 2] | 0, $940 << 2) | 0;
              HEAP32[$218 >> 2] = (HEAP32[$218 >> 2] | 0) + $944;
              $947 = HEAP32[$221 >> 2] | 0;
              do if (!$947) {
               if (!$944) {
                $$0$i86 = 0;
                break;
               }
               $$0$i86 = _malloc($944) | 0;
              } else {
               $949 = HEAP32[$239 >> 2] | 0;
               $950 = $949 + $944 | 0;
               if (($950 | 0) > (HEAP32[$240 >> 2] | 0)) {
                $$0$i86 = 0;
                break;
               }
               HEAP32[$239 >> 2] = $950;
               $$0$i86 = $947 + $949 | 0;
              } while (0);
              HEAP32[$242 + ($i$1376 * 2096 | 0) + 28 >> 2] = $$0$i86;
              $973 = $$0$i86;
             } else {
              $960 = Math_imul(HEAP32[$270 >> 2] << 2, HEAP32[$260 >> 2] | 0) | 0;
              HEAP32[$218 >> 2] = (HEAP32[$218 >> 2] | 0) + $960;
              $963 = HEAP32[$221 >> 2] | 0;
              do if (!$963) {
               if (!$960) {
                $$0$i88 = 0;
                break;
               }
               $$0$i88 = _malloc($960) | 0;
              } else {
               $965 = HEAP32[$239 >> 2] | 0;
               $966 = $965 + $960 | 0;
               if (($966 | 0) > (HEAP32[$240 >> 2] | 0)) {
                $$0$i88 = 0;
                break;
               }
               HEAP32[$239 >> 2] = $966;
               $$0$i88 = $963 + $965 | 0;
              } while (0);
              HEAP32[$242 + ($i$1376 * 2096 | 0) + 28 >> 2] = $$0$i88;
              $973 = $$0$i88;
             }
             if (!$973) {
              label = 354;
              break L189;
             }
             $984 = HEAP32[($939 ? $410 : $270) >> 2] | 0;
             if (($984 | 0) > 0) {
              $986 = $242 + ($i$1376 * 2096 | 0) + 2088 | 0;
              $987 = HEAP32[$260 >> 2] | 0;
              $988 = ($987 | 0) > 0;
              $j$3310 = 0;
              do {
               if ($939) $994 = HEAP32[(HEAP32[$986 >> 2] | 0) + ($j$3310 << 2) >> 2] | 0; else $994 = $j$3310;
               if ($988) {
                $992 = HEAP32[$901 >> 2] | 0;
                $div$0305 = 1;
                $k$0306 = 0;
                do {
                 HEAPF32[$973 + ((Math_imul($987, $j$3310) | 0) + $k$0306 << 2) >> 2] = +HEAPF32[$843 >> 2] + +HEAPF32[$857 >> 2] * +(HEAPU16[$$0$i83 + ((((($994 | 0) / ($div$0305 | 0) | 0) >>> 0) % ($992 >>> 0) | 0) << 1) >> 1] | 0);
                 $div$0305 = Math_imul($992, $div$0305) | 0;
                 $k$0306 = $k$0306 + 1 | 0;
                } while (($k$0306 | 0) < ($987 | 0));
               }
               $j$3310 = $j$3310 + 1 | 0;
              } while (($j$3310 | 0) != ($984 | 0));
             }
             if (!(HEAP32[$221 >> 2] | 0)) _free($$0$i83); else HEAP32[$240 >> 2] = ((HEAP32[$901 >> 2] << 1) + 3 & -4) + (HEAP32[$240 >> 2] | 0);
             HEAP8[$825 >> 0] = 2;
            } else {
             $1019 = $$lcssa294 << 2;
             HEAP32[$218 >> 2] = (HEAP32[$218 >> 2] | 0) + $1019;
             $1022 = HEAP32[$221 >> 2] | 0;
             do if (!$1022) {
              if (!$1019) {
               $$0$i92 = 0;
               break;
              }
              $$0$i92 = _malloc($1019) | 0;
             } else {
              $1024 = HEAP32[$239 >> 2] | 0;
              $1025 = $1024 + $1019 | 0;
              if (($1025 | 0) > (HEAP32[$240 >> 2] | 0)) {
               $$0$i92 = 0;
               break;
              }
              HEAP32[$239 >> 2] = $1025;
              $$0$i92 = $1022 + $1024 | 0;
             } while (0);
             HEAP32[$242 + ($i$1376 * 2096 | 0) + 28 >> 2] = $$0$i92;
             $1032 = HEAP32[$901 >> 2] | 0;
             if (($1032 | 0) > 0) {
              $j$4301 = 0;
              do {
               HEAPF32[$$0$i92 + ($j$4301 << 2) >> 2] = +HEAPF32[$843 >> 2] + +HEAPF32[$857 >> 2] * +(HEAPU16[$$0$i83 + ($j$4301 << 1) >> 1] | 0);
               $j$4301 = $j$4301 + 1 | 0;
              } while (($j$4301 | 0) < ($1032 | 0));
             }
             if (!(HEAP32[$221 >> 2] | 0)) {
              _free($$0$i83);
              label = 380;
              break;
             } else {
              HEAP32[$240 >> 2] = (HEAP32[$240 >> 2] | 0) + (($1032 << 1) + 3 & -4);
              label = 380;
              break;
             }
            } while (0);
            if ((label | 0) == 380) {
             label = 0;
             if ((HEAP8[$825 >> 0] | 0) != 2) break;
            }
            if (!(HEAP8[$864 >> 0] | 0)) break;
            $1055 = HEAP32[$901 >> 2] | 0;
            if (($1055 | 0) > 1) {
             $1058 = HEAP32[$242 + ($i$1376 * 2096 | 0) + 28 >> 2] | 0;
             $$pre494 = +HEAPF32[$1058 >> 2];
             $j$5316 = 1;
             do {
              HEAPF32[$1058 + ($j$5316 << 2) >> 2] = $$pre494;
              $j$5316 = $j$5316 + 1 | 0;
             } while (($j$5316 | 0) < ($1055 | 0));
            }
            HEAP8[$864 >> 0] = 0;
           } while (0);
           $1062 = $i$1376 + 1 | 0;
           if (($1062 | 0) < (HEAP32[$216 >> 2] | 0)) $i$1376 = $1062; else break L187;
          }
          switch (label | 0) {
          case 126:
           {
            HEAP32[$f + 116 >> 2] = 20;
            $$4 = 0;
            STACKTOP = sp;
            return $$4 | 0;
           }
          case 128:
           {
            HEAP32[$f + 116 >> 2] = 20;
            $$4 = 0;
            STACKTOP = sp;
            return $$4 | 0;
           }
          case 130:
           {
            HEAP32[$f + 116 >> 2] = 20;
            $$4 = 0;
            STACKTOP = sp;
            return $$4 | 0;
           }
          case 145:
           {
            HEAP32[$f + 116 >> 2] = 3;
            $$4 = 0;
            STACKTOP = sp;
            return $$4 | 0;
           }
          case 162:
           {
            HEAP32[$f + 116 >> 2] = 20;
            $$4 = 0;
            STACKTOP = sp;
            return $$4 | 0;
           }
          case 190:
           {
            HEAP32[$242 + ($i$1376 * 2096 | 0) + 32 >> 2] = 0;
            label = 192;
            break;
           }
          case 199:
           {
            HEAP32[$242 + ($i$1376 * 2096 | 0) + 8 >> 2] = 0;
            label = 201;
            break;
           }
          case 204:
           {
            HEAP32[$242 + ($i$1376 * 2096 | 0) + 32 >> 2] = 0;
            label = 208;
            break;
           }
          case 215:
           {
            HEAP32[$f + 116 >> 2] = 3;
            $$4 = 0;
            STACKTOP = sp;
            return $$4 | 0;
           }
          case 224:
           {
            ___assert_fail(79344, 78904, 1030, 79368);
            break;
           }
          case 239:
           {
            ___assert_fail(81008, 78904, 1051, 79368);
            break;
           }
          case 245:
           {
            ___assert_fail(79392, 78904, 1058, 79368);
            break;
           }
          case 268:
           {
            ___assert_fail(79312, 78904, 1105, 79328);
            break;
           }
          case 274:
           {
            ___assert_fail(79232, 78904, 1125, 79256);
            break;
           }
          case 280:
           {
            ___assert_fail(79312, 78904, 1105, 79328);
            break;
           }
          case 285:
           {
            ___assert_fail(79280, 78904, 1155, 79256);
            break;
           }
          case 312:
           {
            HEAP32[$f + 116 >> 2] = 20;
            $$4 = 0;
            STACKTOP = sp;
            return $$4 | 0;
           }
          case 320:
           {
            ___assert_fail(79136, 78904, 1180, 79168);
            break;
           }
          case 322:
           {
            ___assert_fail(79184, 78904, 1181, 79168);
            break;
           }
          case 331:
           {
            HEAP32[$f + 116 >> 2] = 3;
            $$4 = 0;
            STACKTOP = sp;
            return $$4 | 0;
           }
          case 333:
           {
            if (!(HEAP32[$221 >> 2] | 0)) _free($$0$i83); else HEAP32[$240 >> 2] = ((HEAP32[$901 >> 2] << 1) + 3 & -4) + (HEAP32[$240 >> 2] | 0);
            HEAP32[$f + 116 >> 2] = 20;
            $$4 = 0;
            STACKTOP = sp;
            return $$4 | 0;
           }
          case 354:
           {
            if (!(HEAP32[$221 >> 2] | 0)) _free($$0$i83); else HEAP32[$240 >> 2] = ((HEAP32[$901 >> 2] << 1) + 3 & -4) + (HEAP32[$240 >> 2] | 0);
            HEAP32[$f + 116 >> 2] = 3;
            $$4 = 0;
            STACKTOP = sp;
            return $$4 | 0;
           }
          }
          if ((label | 0) == 192) {
           HEAP32[$f + 116 >> 2] = 3;
           $$4 = 0;
           STACKTOP = sp;
           return $$4 | 0;
          } else if ((label | 0) == 201) {
           HEAP32[$f + 116 >> 2] = 3;
           $$4 = 0;
           STACKTOP = sp;
           return $$4 | 0;
          } else if ((label | 0) == 208) {
           HEAP32[$f + 116 >> 2] = 3;
           $$4 = 0;
           STACKTOP = sp;
           return $$4 | 0;
          }
         } while (0);
         $1067 = (_get_bits($f, 6) | 0) + 1 & 255;
         L558 : do if ($1067) {
          $i$2253 = 0;
          while (1) {
           $i$2253 = $i$2253 + 1 | 0;
           if (_get_bits($f, 16) | 0) break;
           if (($i$2253 | 0) >= ($1067 | 0)) break L558;
          }
          HEAP32[$f + 116 >> 2] = 20;
          $$4 = 0;
          STACKTOP = sp;
          return $$4 | 0;
         } while (0);
         $1075 = (_get_bits($f, 6) | 0) + 1 | 0;
         $1076 = $f + 144 | 0;
         HEAP32[$1076 >> 2] = $1075;
         $1077 = $1075 * 1596 | 0;
         HEAP32[$218 >> 2] = $1077 + (HEAP32[$218 >> 2] | 0);
         $1080 = HEAP32[$221 >> 2] | 0;
         do if (!$1080) {
          if (!$1077) {
           $$0$i95 = 0;
           break;
          }
          $$0$i95 = _malloc($1077) | 0;
         } else {
          $1082 = $f + 104 | 0;
          $1083 = HEAP32[$1082 >> 2] | 0;
          $1084 = $1083 + $1077 | 0;
          if (($1084 | 0) > (HEAP32[$f + 108 >> 2] | 0)) {
           $$0$i95 = 0;
           break;
          }
          HEAP32[$1082 >> 2] = $1084;
          $$0$i95 = $1080 + $1083 | 0;
         } while (0);
         $1091 = $f + 276 | 0;
         HEAP32[$1091 >> 2] = $$0$i95;
         do if (($1075 | 0) > 0) {
          $i$03$i98113246 = 0;
          $i$03$i98119245 = 0;
          $i$3248 = 0;
          $longest_floorlist$0247 = 0;
          L573 : while (1) {
           $1093 = _get_bits($f, 16) | 0;
           HEAP16[$f + ($i$3248 << 1) + 148 >> 1] = $1093;
           $1096 = $1093 & 65535;
           if ($1096 >>> 0 > 1) {
            label = 399;
            break;
           }
           if (!$1096) {
            label = 401;
            break;
           }
           $1130 = HEAP32[$1091 >> 2] | 0;
           $1131 = _get_bits($f, 5) | 0;
           $1133 = $1130 + ($i$3248 * 1596 | 0) | 0;
           HEAP8[$1133 >> 0] = $1131;
           do if ($1131 & 255) {
            $j$7198 = 0;
            $max_class$0197 = -1;
            do {
             $1136 = _get_bits($f, 4) | 0;
             HEAP8[$1130 + ($i$3248 * 1596 | 0) + $j$7198 + 1 >> 0] = $1136;
             $1139 = $1136 & 255;
             $max_class$0197 = ($1139 | 0) > ($max_class$0197 | 0) ? $1139 : $max_class$0197;
             $j$7198 = $j$7198 + 1 | 0;
            } while (($j$7198 | 0) < (HEAPU8[$1133 >> 0] | 0));
            if (($max_class$0197 | 0) < 0) break; else $j$8206 = 0;
            while (1) {
             HEAP8[$1130 + ($i$3248 * 1596 | 0) + $j$8206 + 33 >> 0] = (_get_bits($f, 3) | 0) + 1;
             $1151 = (_get_bits($f, 2) | 0) & 255;
             $1152 = $1130 + ($i$3248 * 1596 | 0) + $j$8206 + 49 | 0;
             HEAP8[$1152 >> 0] = $1151;
             if (!($1151 << 24 >> 24)) $1155 = 0; else {
              $1158 = _get_bits($f, 8) | 0;
              HEAP8[$1130 + ($i$3248 * 1596 | 0) + $j$8206 + 65 >> 0] = $1158;
              if (($1158 & 255 | 0) >= (HEAP32[$216 >> 2] | 0)) {
               label = 411;
               break L573;
              }
              $1155 = HEAP8[$1152 >> 0] | 0;
             }
             if ((1 << ($1155 & 255) | 0) > 0) {
              $k$1203 = 0;
              do {
               $1171 = (_get_bits($f, 8) | 0) + 65535 | 0;
               HEAP16[$1130 + ($i$3248 * 1596 | 0) + ($j$8206 << 4) + ($k$1203 << 1) + 82 >> 1] = $1171;
               $k$1203 = $k$1203 + 1 | 0;
               if (($1171 << 16 >> 16 | 0) >= (HEAP32[$216 >> 2] | 0)) {
                label = 414;
                break L573;
               }
              } while (($k$1203 | 0) < (1 << HEAPU8[$1152 >> 0] | 0));
             }
             if (($j$8206 | 0) < ($max_class$0197 | 0)) $j$8206 = $j$8206 + 1 | 0; else break;
            }
           } while (0);
           HEAP8[$1130 + ($i$3248 * 1596 | 0) + 1588 >> 0] = (_get_bits($f, 2) | 0) + 1;
           $1184 = _get_bits($f, 4) | 0;
           $1186 = $1130 + ($i$3248 * 1596 | 0) + 1589 | 0;
           HEAP8[$1186 >> 0] = $1184;
           HEAP16[$1130 + ($i$3248 * 1596 | 0) + 338 >> 1] = 0;
           HEAP16[$1130 + ($i$3248 * 1596 | 0) + 340 >> 1] = 1 << ($1184 & 255);
           $1192 = $1130 + ($i$3248 * 1596 | 0) + 1592 | 0;
           HEAP32[$1192 >> 2] = 2;
           $1193 = HEAP8[$1133 >> 0] | 0;
           if (!($1193 << 24 >> 24)) {
            $1225 = 2;
            label = 423;
           } else {
            $1794 = $1193;
            $1795 = 2;
            $j$9215 = 0;
            while (1) {
             $1198 = (HEAPU8[$1130 + ($i$3248 * 1596 | 0) + $j$9215 + 1 >> 0] | 0) + ($1130 + ($i$3248 * 1596 | 0)) + 33 | 0;
             if (!(HEAP8[$1198 >> 0] | 0)) {
              $1214 = $1794;
              $1216 = $1795;
             } else {
              $k$2210 = 1;
              while (1) {
               $1204 = (_get_bits($f, HEAPU8[$1186 >> 0] | 0) | 0) & 65535;
               HEAP16[$1130 + ($i$3248 * 1596 | 0) + (HEAP32[$1192 >> 2] << 1) + 338 >> 1] = $1204;
               $1208 = (HEAP32[$1192 >> 2] | 0) + 1 | 0;
               HEAP32[$1192 >> 2] = $1208;
               if (($k$2210 | 0) >= (HEAPU8[$1198 >> 0] | 0)) break;
               $k$2210 = $k$2210 + 1 | 0;
              }
              $1214 = HEAP8[$1133 >> 0] | 0;
              $1216 = $1208;
             }
             $j$9215 = $j$9215 + 1 | 0;
             if (($j$9215 | 0) >= ($1214 & 255 | 0)) break; else {
              $1794 = $1214;
              $1795 = $1216;
             }
            }
            if (($1216 | 0) > 0) {
             $1225 = $1216;
             label = 423;
            } else $1226 = $1216;
           }
           if ((label | 0) == 423) {
            label = 0;
            $j$10219 = 0;
            do {
             HEAP16[$p + ($j$10219 << 2) >> 1] = HEAP16[$1130 + ($i$3248 * 1596 | 0) + ($j$10219 << 1) + 338 >> 1] | 0;
             HEAP16[$p + ($j$10219 << 2) + 2 >> 1] = $j$10219;
             $j$10219 = $j$10219 + 1 | 0;
            } while (($j$10219 | 0) < ($1225 | 0));
            $1226 = $1225;
           }
           _qsort($p, $1226, 4, 24);
           $1227 = HEAP32[$1192 >> 2] | 0;
           do if (($1227 | 0) > 0) {
            $j$11224 = 0;
            do {
             HEAP8[$1130 + ($i$3248 * 1596 | 0) + $j$11224 + 838 >> 0] = HEAP16[$p + ($j$11224 << 2) + 2 >> 1];
             $j$11224 = $j$11224 + 1 | 0;
             $1234 = HEAP32[$1192 >> 2] | 0;
            } while (($j$11224 | 0) < ($1234 | 0));
            if (($1234 | 0) > 2) {
             $i$03$i98115229 = $i$03$i98113246;
             $i$03$i98121228 = $i$03$i98119245;
             $j$12230 = 2;
            } else {
             $$lcssa227 = $1234;
             $i$03$i98115$lcssa = $i$03$i98113246;
             $i$03$i98121$lcssa = $i$03$i98119245;
             break;
            }
            while (1) {
             if (($j$12230 | 0) > 0) {
              $1238 = $1130 + ($i$3248 * 1596 | 0) + ($j$12230 << 1) + 338 | 0;
              $high$02$i = 65536;
              $i$03$i98 = 0;
              $i$03$i98112 = $i$03$i98115229;
              $i$03$i98118 = $i$03$i98121228;
              $low$01$i = -1;
              while (1) {
               $1240 = HEAP16[$1130 + ($i$3248 * 1596 | 0) + ($i$03$i98 << 1) + 338 >> 1] | 0;
               $1241 = $1240 & 65535;
               if (($1241 | 0) > ($low$01$i | 0)) {
                $1244 = ($1240 & 65535) < (HEAPU16[$1238 >> 1] | 0);
                $i$03$i98123 = $1244 ? $i$03$i98 : $i$03$i98118;
                $low$1$i = $1244 ? $1241 : $low$01$i;
               } else {
                $i$03$i98123 = $i$03$i98118;
                $low$1$i = $low$01$i;
               }
               if (($1241 | 0) < ($high$02$i | 0)) {
                $1247 = ($1240 & 65535) > (HEAPU16[$1238 >> 1] | 0);
                $high$1$i = $1247 ? $1241 : $high$02$i;
                $i$03$i98117 = $1247 ? $i$03$i98 : $i$03$i98112;
               } else {
                $high$1$i = $high$02$i;
                $i$03$i98117 = $i$03$i98112;
               }
               $i$03$i98 = $i$03$i98 + 1 | 0;
               if (($i$03$i98 | 0) == ($j$12230 | 0)) {
                $i$03$i98116 = $i$03$i98117;
                $i$03$i98122 = $i$03$i98123;
                break;
               } else {
                $high$02$i = $high$1$i;
                $i$03$i98112 = $i$03$i98117;
                $i$03$i98118 = $i$03$i98123;
                $low$01$i = $low$1$i;
               }
              }
             } else {
              $i$03$i98116 = $i$03$i98115229;
              $i$03$i98122 = $i$03$i98121228;
             }
             HEAP8[$1130 + ($i$3248 * 1596 | 0) + ($j$12230 << 1) + 1088 >> 0] = $i$03$i98122;
             HEAP8[$1130 + ($i$3248 * 1596 | 0) + ($j$12230 << 1) + 1089 >> 0] = $i$03$i98116;
             $j$12230 = $j$12230 + 1 | 0;
             $1254 = HEAP32[$1192 >> 2] | 0;
             if (($j$12230 | 0) >= ($1254 | 0)) {
              $$lcssa227 = $1254;
              $i$03$i98115$lcssa = $i$03$i98116;
              $i$03$i98121$lcssa = $i$03$i98122;
              break;
             } else {
              $i$03$i98115229 = $i$03$i98116;
              $i$03$i98121228 = $i$03$i98122;
             }
            }
           } else {
            $$lcssa227 = $1227;
            $i$03$i98115$lcssa = $i$03$i98113246;
            $i$03$i98121$lcssa = $i$03$i98119245;
           } while (0);
           $longest_floorlist$0247 = ($$lcssa227 | 0) > ($longest_floorlist$0247 | 0) ? $$lcssa227 : $longest_floorlist$0247;
           $1257 = $i$3248 + 1 | 0;
           if (($1257 | 0) >= (HEAP32[$1076 >> 2] | 0)) {
            label = 437;
            break;
           } else {
            $i$03$i98113246 = $i$03$i98115$lcssa;
            $i$03$i98119245 = $i$03$i98121$lcssa;
            $i$3248 = $1257;
           }
          }
          if ((label | 0) == 399) {
           HEAP32[$f + 116 >> 2] = 20;
           $$4 = 0;
           STACKTOP = sp;
           return $$4 | 0;
          } else if ((label | 0) == 401) {
           $1100 = HEAP32[$1091 >> 2] | 0;
           HEAP8[$1100 + ($i$3248 * 1596 | 0) >> 0] = _get_bits($f, 8) | 0;
           HEAP16[$1100 + ($i$3248 * 1596 | 0) + 2 >> 1] = _get_bits($f, 16) | 0;
           HEAP16[$1100 + ($i$3248 * 1596 | 0) + 4 >> 1] = _get_bits($f, 16) | 0;
           HEAP8[$1100 + ($i$3248 * 1596 | 0) + 6 >> 0] = _get_bits($f, 6) | 0;
           HEAP8[$1100 + ($i$3248 * 1596 | 0) + 7 >> 0] = _get_bits($f, 8) | 0;
           $1117 = (_get_bits($f, 4) | 0) + 1 | 0;
           $1119 = $1100 + ($i$3248 * 1596 | 0) + 8 | 0;
           HEAP8[$1119 >> 0] = $1117;
           if ($1117 & 255) {
            $j$6129 = 0;
            do {
             HEAP8[$j$6129 + 8 + ($1100 + ($i$3248 * 1596 | 0)) + 1 >> 0] = _get_bits($f, 8) | 0;
             $j$6129 = $j$6129 + 1 | 0;
            } while (($j$6129 | 0) < (HEAPU8[$1119 >> 0] | 0));
           }
           HEAP32[$f + 116 >> 2] = 4;
           $$4 = 0;
           STACKTOP = sp;
           return $$4 | 0;
          } else if ((label | 0) == 411) {
           HEAP32[$f + 116 >> 2] = 20;
           $$4 = 0;
           STACKTOP = sp;
           return $$4 | 0;
          } else if ((label | 0) == 414) {
           HEAP32[$f + 116 >> 2] = 20;
           $$4 = 0;
           STACKTOP = sp;
           return $$4 | 0;
          } else if ((label | 0) == 437) {
           $longest_floorlist$0$lcssa = ($longest_floorlist$0247 << 1) + 3 & -4;
           break;
          }
         } else $longest_floorlist$0$lcssa = 0; while (0);
         $1261 = (_get_bits($f, 6) | 0) + 1 | 0;
         $1262 = $f + 280 | 0;
         HEAP32[$1262 >> 2] = $1261;
         $1263 = $1261 * 24 | 0;
         HEAP32[$218 >> 2] = $1263 + (HEAP32[$218 >> 2] | 0);
         $1266 = HEAP32[$221 >> 2] | 0;
         do if (!$1266) {
          if (!$1263) {
           $$0$i100 = 0;
           break;
          }
          $$0$i100 = _malloc($1263) | 0;
         } else {
          $1268 = $f + 104 | 0;
          $1269 = HEAP32[$1268 >> 2] | 0;
          $1270 = $1269 + $1263 | 0;
          if (($1270 | 0) > (HEAP32[$f + 108 >> 2] | 0)) {
           $$0$i100 = 0;
           break;
          }
          HEAP32[$1268 >> 2] = $1270;
          $$0$i100 = $1266 + $1269 | 0;
         } while (0);
         $1277 = $f + 412 | 0;
         HEAP32[$1277 >> 2] = $$0$i100;
         L647 : do if (($1261 | 0) > 0) {
          $1279 = $f + 104 | 0;
          $1280 = $f + 108 | 0;
          $1289 = $$0$i100;
          $i$4193 = 0;
          L649 : while (1) {
           $1281 = _get_bits($f, 16) | 0;
           HEAP16[$f + ($i$4193 << 1) + 284 >> 1] = $1281;
           if (($1281 & 65535) >>> 0 > 2) {
            label = 446;
            break;
           }
           HEAP32[$1289 + ($i$4193 * 24 | 0) >> 2] = _get_bits($f, 24) | 0;
           HEAP32[$1289 + ($i$4193 * 24 | 0) + 4 >> 2] = _get_bits($f, 24) | 0;
           HEAP32[$1289 + ($i$4193 * 24 | 0) + 8 >> 2] = (_get_bits($f, 24) | 0) + 1;
           $1298 = $1289 + ($i$4193 * 24 | 0) + 12 | 0;
           HEAP8[$1298 >> 0] = (_get_bits($f, 6) | 0) + 1;
           $1301 = $1289 + ($i$4193 * 24 | 0) + 13 | 0;
           HEAP8[$1301 >> 0] = _get_bits($f, 8) | 0;
           $1302 = HEAP8[$1298 >> 0] | 0;
           if (!($1302 << 24 >> 24)) {
            $$lcssa = 0;
            $$lcssa161 = $1302 & 255;
           } else {
            $j$13162 = 0;
            do {
             $1305 = _get_bits($f, 3) | 0;
             if (!(_get_bits($f, 1) | 0)) $high_bits$0 = 0; else $high_bits$0 = (_get_bits($f, 5) | 0) << 3 & 2040;
             HEAP8[$p + $j$13162 >> 0] = $high_bits$0 + $1305;
             $j$13162 = $j$13162 + 1 | 0;
             $1313 = HEAP8[$1298 >> 0] | 0;
             $1314 = $1313 & 255;
            } while (($j$13162 | 0) < ($1314 | 0));
            $$lcssa = $1313;
            $$lcssa161 = $1314;
           }
           $1316 = $$lcssa161 << 4;
           $1318 = (HEAP32[$218 >> 2] | 0) + $1316 | 0;
           HEAP32[$218 >> 2] = $1318;
           $1319 = HEAP32[$221 >> 2] | 0;
           do if (!$1319) {
            if (!($$lcssa << 24 >> 24)) {
             $$0$i102 = 0;
             break;
            }
            $$0$i102 = _malloc($1316) | 0;
           } else {
            $1321 = HEAP32[$1279 >> 2] | 0;
            $1322 = $1321 + $1316 | 0;
            if (($1322 | 0) > (HEAP32[$1280 >> 2] | 0)) {
             $$0$i102 = 0;
             break;
            }
            HEAP32[$1279 >> 2] = $1322;
            $$0$i102 = $1319 + $1321 | 0;
           } while (0);
           $1328 = $1289 + ($i$4193 * 24 | 0) + 20 | 0;
           HEAP32[$1328 >> 2] = $$0$i102;
           if (!(HEAP8[$1298 >> 0] | 0)) $1360 = $1318; else {
            $1796 = $$0$i102;
            $j$14170 = 0;
            while (1) {
             $1333 = HEAPU8[$p + $j$14170 >> 0] | 0;
             $1346 = $1796;
             $k$3169 = 0;
             while (1) {
              if (!($1333 & 1 << $k$3169)) {
               HEAP16[$1346 + ($j$14170 << 4) + ($k$3169 << 1) >> 1] = -1;
               $1797 = $1346;
              } else {
               $1337 = _get_bits($f, 8) | 0;
               $1339 = HEAP32[$1328 >> 2] | 0;
               HEAP16[$1339 + ($j$14170 << 4) + ($k$3169 << 1) >> 1] = $1337;
               if (($1337 << 16 >> 16 | 0) < (HEAP32[$216 >> 2] | 0)) $1797 = $1339; else {
                label = 460;
                break L649;
               }
              }
              $k$3169 = $k$3169 + 1 | 0;
              if (($k$3169 | 0) >= 8) break; else $1346 = $1797;
             }
             $j$14170 = $j$14170 + 1 | 0;
             if (($j$14170 | 0) >= (HEAPU8[$1298 >> 0] | 0)) break; else $1796 = $1797;
            }
            $1360 = HEAP32[$218 >> 2] | 0;
           }
           $1358 = HEAP32[(HEAP32[$234 >> 2] | 0) + ((HEAPU8[$1301 >> 0] | 0) * 2096 | 0) + 4 >> 2] << 2;
           HEAP32[$218 >> 2] = $1360 + $1358;
           $1361 = HEAP32[$221 >> 2] | 0;
           if (!$1361) {
            if (!$1358) {
             label = 470;
             break;
            }
            $$0$i106 = _malloc($1358) | 0;
           } else {
            $1363 = HEAP32[$1279 >> 2] | 0;
            $1364 = $1363 + $1358 | 0;
            if (($1364 | 0) > (HEAP32[$1280 >> 2] | 0)) {
             label = 470;
             break;
            }
            HEAP32[$1279 >> 2] = $1364;
            $$0$i106 = $1361 + $1363 | 0;
           }
           $1371 = $1289 + ($i$4193 * 24 | 0) + 16 | 0;
           HEAP32[$1371 >> 2] = $$0$i106;
           if (!$$0$i106) break;
           _memset($$0$i106 | 0, 0, HEAP32[(HEAP32[$234 >> 2] | 0) + ((HEAPU8[$1301 >> 0] | 0) * 2096 | 0) + 4 >> 2] << 2 | 0) | 0;
           $1381 = HEAPU8[$1301 >> 0] | 0;
           $1382 = HEAP32[$234 >> 2] | 0;
           if ((HEAP32[$1382 + ($1381 * 2096 | 0) + 4 >> 2] | 0) > 0) {
            $1387 = $1382;
            $1388 = $1381;
            $j$15177 = 0;
            do {
             $1389 = HEAP32[$1387 + ($1388 * 2096 | 0) >> 2] | 0;
             $1391 = $1389 + 3 & -4;
             HEAP32[$218 >> 2] = $1391 + (HEAP32[$218 >> 2] | 0);
             $1394 = HEAP32[$221 >> 2] | 0;
             do if (!$1394) {
              if (!$1391) {
               $$0$i108 = 0;
               break;
              }
              $$0$i108 = _malloc($1391) | 0;
             } else {
              $1396 = HEAP32[$1279 >> 2] | 0;
              $1397 = $1396 + $1391 | 0;
              if (($1397 | 0) > (HEAP32[$1280 >> 2] | 0)) {
               $$0$i108 = 0;
               break;
              }
              HEAP32[$1279 >> 2] = $1397;
              $$0$i108 = $1394 + $1396 | 0;
             } while (0);
             HEAP32[(HEAP32[$1371 >> 2] | 0) + ($j$15177 << 2) >> 2] = $$0$i108;
             if (($1389 | 0) > 0) {
              $1407 = HEAP8[$1298 >> 0] | 0;
              $k$4174$in = $1389;
              $temp$0173 = $j$15177;
              while (1) {
               $k$4174$in = $k$4174$in + -1 | 0;
               HEAP8[(HEAP32[(HEAP32[$1371 >> 2] | 0) + ($j$15177 << 2) >> 2] | 0) + $k$4174$in >> 0] = ($temp$0173 | 0) % ($1407 & 255 | 0) | 0;
               $1414 = HEAP8[$1298 >> 0] | 0;
               if (($k$4174$in | 0) <= 0) break; else {
                $1407 = $1414;
                $temp$0173 = ($temp$0173 | 0) / ($1414 & 255 | 0) | 0;
               }
              }
             }
             $j$15177 = $j$15177 + 1 | 0;
             $1388 = HEAPU8[$1301 >> 0] | 0;
             $1387 = HEAP32[$234 >> 2] | 0;
            } while (($j$15177 | 0) < (HEAP32[$1387 + ($1388 * 2096 | 0) + 4 >> 2] | 0));
           }
           $1425 = $i$4193 + 1 | 0;
           if (($1425 | 0) >= (HEAP32[$1262 >> 2] | 0)) break L647;
           $1289 = HEAP32[$1277 >> 2] | 0;
           $i$4193 = $1425;
          }
          if ((label | 0) == 446) {
           HEAP32[$f + 116 >> 2] = 20;
           $$4 = 0;
           STACKTOP = sp;
           return $$4 | 0;
          } else if ((label | 0) == 460) {
           HEAP32[$f + 116 >> 2] = 20;
           $$4 = 0;
           STACKTOP = sp;
           return $$4 | 0;
          } else if ((label | 0) == 470) HEAP32[$1289 + ($i$4193 * 24 | 0) + 16 >> 2] = 0;
          HEAP32[$f + 116 >> 2] = 3;
          $$4 = 0;
          STACKTOP = sp;
          return $$4 | 0;
         } while (0);
         $1429 = (_get_bits($f, 6) | 0) + 1 | 0;
         $1430 = $f + 416 | 0;
         HEAP32[$1430 >> 2] = $1429;
         $1431 = $1429 * 40 | 0;
         HEAP32[$218 >> 2] = $1431 + (HEAP32[$218 >> 2] | 0);
         $1434 = HEAP32[$221 >> 2] | 0;
         do if (!$1434) {
          if (!$1431) {
           $$0$i110 = 0;
           break;
          }
          $$0$i110 = _malloc($1431) | 0;
         } else {
          $1436 = $f + 104 | 0;
          $1437 = HEAP32[$1436 >> 2] | 0;
          $1438 = $1437 + $1431 | 0;
          if (($1438 | 0) > (HEAP32[$f + 108 >> 2] | 0)) {
           $$0$i110 = 0;
           break;
          }
          HEAP32[$1436 >> 2] = $1438;
          $$0$i110 = $1434 + $1437 | 0;
         } while (0);
         $1445 = $f + 420 | 0;
         HEAP32[$1445 >> 2] = $$0$i110;
         L715 : do if (($1429 | 0) > 0) {
          $1447 = $f + 104 | 0;
          $1448 = $f + 108 | 0;
          $1450 = $$0$i110;
          $i$5157 = 0;
          L717 : while (1) {
           $1449 = $1450 + ($i$5157 * 40 | 0) | 0;
           if (_get_bits($f, 16) | 0) {
            label = 493;
            break;
           }
           $1457 = ((HEAP32[$74 >> 2] | 0) * 3 | 0) + 3 & -4;
           HEAP32[$218 >> 2] = $1457 + (HEAP32[$218 >> 2] | 0);
           $1460 = HEAP32[$221 >> 2] | 0;
           do if (!$1460) {
            if (!$1457) {
             $$0$i104 = 0;
             break;
            }
            $$0$i104 = _malloc($1457) | 0;
           } else {
            $1462 = HEAP32[$1447 >> 2] | 0;
            $1463 = $1462 + $1457 | 0;
            if (($1463 | 0) > (HEAP32[$1448 >> 2] | 0)) {
             $$0$i104 = 0;
             break;
            }
            HEAP32[$1447 >> 2] = $1463;
            $$0$i104 = $1460 + $1462 | 0;
           } while (0);
           $1469 = $1450 + ($i$5157 * 40 | 0) + 4 | 0;
           HEAP32[$1469 >> 2] = $$0$i104;
           if (!(_get_bits($f, 1) | 0)) HEAP8[$1450 + ($i$5157 * 40 | 0) + 8 >> 0] = 1; else HEAP8[$1450 + ($i$5157 * 40 | 0) + 8 >> 0] = (_get_bits($f, 4) | 0) + 1;
           $1477 = $1450 + ($i$5157 * 40 | 0) + 8 | 0;
           do if (!(_get_bits($f, 1) | 0)) HEAP16[$1449 >> 1] = 0; else {
            $1481 = (_get_bits($f, 8) | 0) + 1 | 0;
            HEAP16[$1449 >> 1] = $1481;
            if (!($1481 & 65535)) break;
            $1490 = HEAP32[$74 >> 2] | 0;
            $k$5142 = 0;
            do {
             $1489 = $1490 + -1 | 0;
             do if (($1490 | 0) < 16385) {
              if (($1490 | 0) < 17) {
               $$0$i56 = HEAP8[79416 + $1489 >> 0] | 0;
               break;
              }
              if (($1490 | 0) < 513) {
               $$0$i56 = (HEAP8[79416 + ($1489 >> 5) >> 0] | 0) + 5 | 0;
               break;
              } else {
               $$0$i56 = (HEAP8[79416 + ($1489 >> 10) >> 0] | 0) + 10 | 0;
               break;
              }
             } else {
              if (($1490 | 0) >= 16777217) {
               if (($1490 | 0) >= 536870913) {
                $$0$i56 = 0;
                break;
               }
               $$0$i56 = (HEAP8[79416 + ($1489 >> 25) >> 0] | 0) + 25 | 0;
               break;
              }
              if (($1490 | 0) < 524289) {
               $$0$i56 = (HEAP8[79416 + ($1489 >> 15) >> 0] | 0) + 15 | 0;
               break;
              } else {
               $$0$i56 = (HEAP8[79416 + ($1489 >> 20) >> 0] | 0) + 20 | 0;
               break;
              }
             } while (0);
             $1526 = (_get_bits($f, $$0$i56) | 0) & 255;
             HEAP8[(HEAP32[$1469 >> 2] | 0) + ($k$5142 * 3 | 0) >> 0] = $1526;
             $1529 = HEAP32[$74 >> 2] | 0;
             $1530 = $1529 + -1 | 0;
             do if (($1529 | 0) < 16385) {
              if (($1529 | 0) < 17) {
               $$0$i50 = HEAP8[79416 + $1530 >> 0] | 0;
               break;
              }
              if (($1529 | 0) < 513) {
               $$0$i50 = (HEAP8[79416 + ($1530 >> 5) >> 0] | 0) + 5 | 0;
               break;
              } else {
               $$0$i50 = (HEAP8[79416 + ($1530 >> 10) >> 0] | 0) + 10 | 0;
               break;
              }
             } else {
              if (($1529 | 0) >= 16777217) {
               if (($1529 | 0) >= 536870913) {
                $$0$i50 = 0;
                break;
               }
               $$0$i50 = (HEAP8[79416 + ($1530 >> 25) >> 0] | 0) + 25 | 0;
               break;
              }
              if (($1529 | 0) < 524289) {
               $$0$i50 = (HEAP8[79416 + ($1530 >> 15) >> 0] | 0) + 15 | 0;
               break;
              } else {
               $$0$i50 = (HEAP8[79416 + ($1530 >> 20) >> 0] | 0) + 20 | 0;
               break;
              }
             } while (0);
             $1566 = (_get_bits($f, $$0$i50) | 0) & 255;
             HEAP8[(HEAP32[$1469 >> 2] | 0) + ($k$5142 * 3 | 0) + 1 >> 0] = $1566;
             $1569 = HEAP32[$1469 >> 2] | 0;
             $1571 = HEAP8[$1569 + ($k$5142 * 3 | 0) >> 0] | 0;
             $1490 = HEAP32[$74 >> 2] | 0;
             if (($1571 & 255 | 0) >= ($1490 | 0)) {
              label = 531;
              break L717;
             }
             $1577 = HEAP8[$1569 + ($k$5142 * 3 | 0) + 1 >> 0] | 0;
             if (($1577 & 255 | 0) >= ($1490 | 0)) {
              label = 533;
              break L717;
             }
             $k$5142 = $k$5142 + 1 | 0;
             if ($1571 << 24 >> 24 == $1577 << 24 >> 24) {
              label = 535;
              break L717;
             }
            } while (($k$5142 | 0) < (HEAPU16[$1449 >> 1] | 0));
           } while (0);
           if (_get_bits($f, 2) | 0) {
            label = 538;
            break;
           }
           $1586 = HEAP8[$1477 >> 0] | 0;
           $1589 = (HEAP32[$74 >> 2] | 0) > 0;
           do if (($1586 & 255) > 1) {
            if ($1589) $j$16150 = 0; else {
             $j$18153 = 0;
             label = 549;
             break;
            }
            while (1) {
             $1594 = (_get_bits($f, 4) | 0) & 255;
             HEAP8[(HEAP32[$1469 >> 2] | 0) + ($j$16150 * 3 | 0) + 2 >> 0] = $1594;
             $1600 = HEAP8[$1477 >> 0] | 0;
             if ((HEAPU8[(HEAP32[$1469 >> 2] | 0) + ($j$16150 * 3 | 0) + 2 >> 0] | 0) >= ($1600 & 255)) {
              label = 544;
              break L717;
             }
             $j$16150 = $j$16150 + 1 | 0;
             if (($j$16150 | 0) >= (HEAP32[$74 >> 2] | 0)) {
              $1608 = $1600;
              label = 547;
              break;
             }
            }
           } else {
            if ($1589) $j$17146 = 0; else {
             $1608 = $1586;
             label = 547;
             break;
            }
            do {
             HEAP8[(HEAP32[$1469 >> 2] | 0) + ($j$17146 * 3 | 0) + 2 >> 0] = 0;
             $j$17146 = $j$17146 + 1 | 0;
            } while (($j$17146 | 0) < (HEAP32[$74 >> 2] | 0));
            $1608 = HEAP8[$1477 >> 0] | 0;
            label = 547;
           } while (0);
           if ((label | 0) == 547) {
            label = 0;
            if ($1608 << 24 >> 24) {
             $j$18153 = 0;
             label = 549;
            }
           }
           if ((label | 0) == 549) while (1) {
            label = 0;
            _get_bits($f, 8) | 0;
            $1616 = $1450 + ($i$5157 * 40 | 0) + $j$18153 + 9 | 0;
            HEAP8[$1616 >> 0] = _get_bits($f, 8) | 0;
            $1617 = _get_bits($f, 8) | 0;
            HEAP8[$1450 + ($i$5157 * 40 | 0) + $j$18153 + 24 >> 0] = $1617;
            if ((HEAPU8[$1616 >> 0] | 0) >= (HEAP32[$1076 >> 2] | 0)) {
             label = 550;
             break L717;
            }
            $j$18153 = $j$18153 + 1 | 0;
            if (($1617 & 255 | 0) >= (HEAP32[$1262 >> 2] | 0)) {
             label = 552;
             break L717;
            }
            if (($j$18153 | 0) >= (HEAPU8[$1477 >> 0] | 0)) break; else label = 549;
           }
           $1629 = $i$5157 + 1 | 0;
           if (($1629 | 0) >= (HEAP32[$1430 >> 2] | 0)) break L715;
           $1450 = HEAP32[$1445 >> 2] | 0;
           $i$5157 = $1629;
          }
          if ((label | 0) == 493) {
           HEAP32[$f + 116 >> 2] = 20;
           $$4 = 0;
           STACKTOP = sp;
           return $$4 | 0;
          } else if ((label | 0) == 531) {
           HEAP32[$f + 116 >> 2] = 20;
           $$4 = 0;
           STACKTOP = sp;
           return $$4 | 0;
          } else if ((label | 0) == 533) {
           HEAP32[$f + 116 >> 2] = 20;
           $$4 = 0;
           STACKTOP = sp;
           return $$4 | 0;
          } else if ((label | 0) == 535) {
           HEAP32[$f + 116 >> 2] = 20;
           $$4 = 0;
           STACKTOP = sp;
           return $$4 | 0;
          } else if ((label | 0) == 538) {
           HEAP32[$f + 116 >> 2] = 20;
           $$4 = 0;
           STACKTOP = sp;
           return $$4 | 0;
          } else if ((label | 0) == 544) {
           HEAP32[$f + 116 >> 2] = 20;
           $$4 = 0;
           STACKTOP = sp;
           return $$4 | 0;
          } else if ((label | 0) == 550) {
           HEAP32[$f + 116 >> 2] = 20;
           $$4 = 0;
           STACKTOP = sp;
           return $$4 | 0;
          } else if ((label | 0) == 552) {
           HEAP32[$f + 116 >> 2] = 20;
           $$4 = 0;
           STACKTOP = sp;
           return $$4 | 0;
          }
         } while (0);
         $1633 = (_get_bits($f, 6) | 0) + 1 | 0;
         $1634 = $f + 424 | 0;
         HEAP32[$1634 >> 2] = $1633;
         L811 : do if (($1633 | 0) > 0) {
          $i$6138 = 0;
          while (1) {
           HEAP8[$f + ($i$6138 * 6 | 0) + 428 >> 0] = _get_bits($f, 1) | 0;
           $1644 = $f + ($i$6138 * 6 | 0) + 430 | 0;
           HEAP16[$1644 >> 1] = _get_bits($f, 16) | 0;
           $1647 = $f + ($i$6138 * 6 | 0) + 432 | 0;
           HEAP16[$1647 >> 1] = _get_bits($f, 16) | 0;
           $1648 = _get_bits($f, 8) | 0;
           HEAP8[$f + ($i$6138 * 6 | 0) + 429 >> 0] = $1648;
           if (HEAP16[$1644 >> 1] | 0) {
            label = 558;
            break;
           }
           if (HEAP16[$1647 >> 1] | 0) {
            label = 560;
            break;
           }
           $i$6138 = $i$6138 + 1 | 0;
           if (($1648 & 255 | 0) >= (HEAP32[$1430 >> 2] | 0)) {
            label = 562;
            break;
           }
           if (($i$6138 | 0) >= (HEAP32[$1634 >> 2] | 0)) break L811;
          }
          if ((label | 0) == 558) {
           HEAP32[$f + 116 >> 2] = 20;
           $$4 = 0;
           STACKTOP = sp;
           return $$4 | 0;
          } else if ((label | 0) == 560) {
           HEAP32[$f + 116 >> 2] = 20;
           $$4 = 0;
           STACKTOP = sp;
           return $$4 | 0;
          } else if ((label | 0) == 562) {
           HEAP32[$f + 116 >> 2] = 20;
           $$4 = 0;
           STACKTOP = sp;
           return $$4 | 0;
          }
         } while (0);
         while (1) {
          $1661 = HEAP8[$140 >> 0] | 0;
          if (!($1661 << 24 >> 24)) {
           if (HEAP32[$137 >> 2] | 0) break;
           if (!(_next_segment($f) | 0)) break;
           $$pr$i$i = HEAP8[$140 >> 0] | 0;
           if (!($$pr$i$i << 24 >> 24)) {
            label = 567;
            break;
           } else $1669 = $$pr$i$i;
          } else $1669 = $1661;
          HEAP8[$140 >> 0] = $1669 + -1 << 24 >> 24;
          HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + 1;
          $1672 = HEAP32[$22 >> 2] | 0;
          if (!$1672) {
           if ((_fgetc(HEAP32[$141 >> 2] | 0) | 0) != -1) continue;
           HEAP32[$143 >> 2] = 1;
           continue;
          }
          if ($1672 >>> 0 < (HEAP32[$142 >> 2] | 0) >>> 0) {
           HEAP32[$22 >> 2] = $1672 + 1;
           continue;
          } else {
           HEAP32[$143 >> 2] = 1;
           continue;
          }
         }
         if ((label | 0) == 567) ___assert_fail(79096, 78904, 1503, 79120);
         HEAP32[$f + 1008 >> 2] = 0;
         if ((HEAP32[$74 >> 2] | 0) > 0) {
          $1683 = ($longest_floorlist$0$lcssa | 0) == 0;
          $1684 = $f + 104 | 0;
          $1685 = $f + 108 | 0;
          $i$7135 = 0;
          do {
           $1687 = HEAP32[$102 >> 2] << 2;
           HEAP32[$218 >> 2] = (HEAP32[$218 >> 2] | 0) + $1687;
           $1690 = HEAP32[$221 >> 2] | 0;
           do if (!$1690) {
            if (!$1687) {
             $$0$i19 = 0;
             break;
            }
            $$0$i19 = _malloc($1687) | 0;
           } else {
            $1692 = HEAP32[$1684 >> 2] | 0;
            $1693 = $1692 + $1687 | 0;
            if (($1693 | 0) > (HEAP32[$1685 >> 2] | 0)) {
             $$0$i19 = 0;
             break;
            }
            HEAP32[$1684 >> 2] = $1693;
            $$0$i19 = $1690 + $1692 | 0;
           } while (0);
           HEAP32[$f + ($i$7135 << 2) + 816 >> 2] = $$0$i19;
           $1704 = (HEAP32[$102 >> 2] << 1 & 2147483646) + 3 & -4;
           HEAP32[$218 >> 2] = $1704 + (HEAP32[$218 >> 2] | 0);
           $1707 = HEAP32[$221 >> 2] | 0;
           do if (!$1707) {
            if (!$1704) {
             $$0$i16 = 0;
             break;
            }
            $$0$i16 = _malloc($1704) | 0;
           } else {
            $1709 = HEAP32[$1684 >> 2] | 0;
            $1710 = $1709 + $1704 | 0;
            if (($1710 | 0) > (HEAP32[$1685 >> 2] | 0)) {
             $$0$i16 = 0;
             break;
            }
            HEAP32[$1684 >> 2] = $1710;
            $$0$i16 = $1707 + $1709 | 0;
           } while (0);
           HEAP32[$f + ($i$7135 << 2) + 944 >> 2] = $$0$i16;
           HEAP32[$218 >> 2] = (HEAP32[$218 >> 2] | 0) + $longest_floorlist$0$lcssa;
           $1719 = HEAP32[$221 >> 2] | 0;
           do if (!$1719) {
            if ($1683) {
             $$0$i15 = 0;
             break;
            }
            $$0$i15 = _malloc($longest_floorlist$0$lcssa) | 0;
           } else {
            $1721 = HEAP32[$1684 >> 2] | 0;
            $1722 = $1721 + $longest_floorlist$0$lcssa | 0;
            if (($1722 | 0) > (HEAP32[$1685 >> 2] | 0)) {
             $$0$i15 = 0;
             break;
            }
            HEAP32[$1684 >> 2] = $1722;
            $$0$i15 = $1719 + $1721 | 0;
           } while (0);
           HEAP32[$f + ($i$7135 << 2) + 1012 >> 2] = $$0$i15;
           $i$7135 = $i$7135 + 1 | 0;
          } while (($i$7135 | 0) < (HEAP32[$74 >> 2] | 0));
         }
         if (!(_init_blocksize($f, 0, HEAP32[$100 >> 2] | 0) | 0)) {
          $$4 = 0;
          STACKTOP = sp;
          return $$4 | 0;
         }
         if (!(_init_blocksize($f, 1, HEAP32[$102 >> 2] | 0) | 0)) {
          $$4 = 0;
          STACKTOP = sp;
          return $$4 | 0;
         }
         HEAP32[$f + 120 >> 2] = HEAP32[$100 >> 2];
         $1739 = HEAP32[$102 >> 2] | 0;
         HEAP32[$f + 124 >> 2] = $1739;
         $1742 = $1739 << 1 & 2147483646;
         $1743 = HEAP32[$1262 >> 2] | 0;
         if (($1743 | 0) > 0) {
          $1745 = HEAP32[$1277 >> 2] | 0;
          $i7$0130 = 0;
          $max_part_read$0131 = 0;
          do {
           $1753 = (((HEAP32[$1745 + ($i7$0130 * 24 | 0) + 4 >> 2] | 0) - (HEAP32[$1745 + ($i7$0130 * 24 | 0) >> 2] | 0) | 0) >>> 0) / ((HEAP32[$1745 + ($i7$0130 * 24 | 0) + 8 >> 2] | 0) >>> 0) | 0;
           $max_part_read$0131 = ($1753 | 0) > ($max_part_read$0131 | 0) ? $1753 : $max_part_read$0131;
           $i7$0130 = $i7$0130 + 1 | 0;
          } while (($i7$0130 | 0) < ($1743 | 0));
          $max_part_read$0$lcssa = ($max_part_read$0131 << 2) + 4 | 0;
         } else $max_part_read$0$lcssa = 4;
         $1758 = Math_imul(HEAP32[$74 >> 2] | 0, $max_part_read$0$lcssa) | 0;
         $$14 = $1742 >>> 0 > $1758 >>> 0 ? $1742 : $1758;
         HEAP32[$f + 12 >> 2] = $$14;
         HEAP8[$f + 1393 >> 0] = 1;
         do if (HEAP32[$221 >> 2] | 0) {
          $1765 = HEAP32[$f + 108 >> 2] | 0;
          if (($1765 | 0) != (HEAP32[$f + 100 >> 2] | 0)) ___assert_fail(79024, 78904, 4108, 79080);
          if (((HEAP32[$f + 104 >> 2] | 0) + 1448 + $$14 | 0) >>> 0 <= $1765 >>> 0) break;
          HEAP32[$f + 116 >> 2] = 3;
          $$4 = 0;
          STACKTOP = sp;
          return $$4 | 0;
         } while (0);
         $1775 = HEAP32[$22 >> 2] | 0;
         if (!$1775) {
          $1783 = _ftell(HEAP32[$141 >> 2] | 0) | 0;
          $$0$i = $1783 - (HEAP32[$f + 24 >> 2] | 0) | 0;
         } else $$0$i = $1775 - (HEAP32[$f + 36 >> 2] | 0) | 0;
         HEAP32[$f + 52 >> 2] = $$0$i;
         $$4 = 1;
         STACKTOP = sp;
         return $$4 | 0;
        } while (0);
        HEAP32[$f + 116 >> 2] = 3;
        $$4 = 0;
        STACKTOP = sp;
        return $$4 | 0;
       } while (0);
       HEAP32[$f + 116 >> 2] = 20;
       $$4 = 0;
       STACKTOP = sp;
       return $$4 | 0;
      } else if ((label | 0) == 607) {
       STACKTOP = sp;
       return $$4 | 0;
      }
     } else if ((label | 0) == 607) {
      STACKTOP = sp;
      return $$4 | 0;
     }
    } while (0);
    HEAP32[$f + 116 >> 2] = 34;
    $$4 = 0;
    STACKTOP = sp;
    return $$4 | 0;
   }
  }
  HEAP32[$f + 116 >> 2] = 34;
  $$4 = 0;
  STACKTOP = sp;
  return $$4 | 0;
 }
 HEAP32[$f + 116 >> 2] = 34;
 $$4 = 0;
 STACKTOP = sp;
 return $$4 | 0;
}

function _png_do_read_transformations($png_ptr, $row_info) {
 $png_ptr = $png_ptr | 0;
 $row_info = $row_info | 0;
 var $$$i38 = 0, $$02$i = 0, $$15$i = 0, $$lobit$i = 0, $$phi$trans$insert232 = 0, $$sink = 0, $$sink2 = 0, $$sum$i27 = 0, $$sum$i64 = 0, $$sum133 = 0, $$sum4$i = 0, $$sum6$i = 0, $0 = 0, $1 = 0, $1005 = 0, $1015 = 0, $1025 = 0, $1029 = 0, $1035 = 0, $1037 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $1060 = 0, $1062 = 0, $1067 = 0, $1072 = 0, $1090 = 0, $1091 = 0, $1094 = 0, $1097 = 0, $11 = 0, $1101 = 0, $1106 = 0, $1112 = 0, $1117 = 0, $112 = 0, $1121 = 0, $1126 = 0, $1132 = 0, $1137 = 0, $1141 = 0, $1149 = 0, $1160 = 0, $1161 = 0, $1164 = 0, $1167 = 0, $1173 = 0, $1176 = 0, $1181 = 0, $1187 = 0, $1190 = 0, $1195 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1224 = 0, $1227 = 0, $1234 = 0, $1238 = 0, $1241 = 0, $1248 = 0, $1252 = 0, $1255 = 0, $1262 = 0, $1288 = 0, $1297 = 0, $1300 = 0, $1303 = 0, $1305 = 0, $1306 = 0, $1312 = 0, $1313 = 0, $1316 = 0, $1325 = 0, $1330 = 0, $1332 = 0, $1333 = 0, $1339 = 0, $1340 = 0, $1343 = 0, $1352 = 0, $1357 = 0, $1359 = 0, $1360 = 0, $1366 = 0, $1376 = 0, $140 = 0, $1400 = 0, $1404 = 0, $1408 = 0, $1411 = 0, $1412 = 0, $1416 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1423 = 0, $1426 = 0, $1428 = 0, $1433 = 0, $1438 = 0, $1440 = 0, $1445 = 0, $1450 = 0, $1452 = 0, $1459 = 0, $146 = 0, $1468 = 0, $1471 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1484 = 0, $1486 = 0, $1491 = 0, $1496 = 0, $15 = 0, $150 = 0, $1505 = 0, $1512 = 0, $1516 = 0, $1519 = 0, $1526 = 0, $153 = 0, $1530 = 0, $1533 = 0, $154 = 0, $1540 = 0, $1547 = 0, $1552 = 0, $1557 = 0, $156 = 0, $1566 = 0, $1573 = 0, $1577 = 0, $1580 = 0, $1587 = 0, $1591 = 0, $1594 = 0, $1601 = 0, $1608 = 0, $161 = 0, $1617 = 0, $1624 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $164 = 0, $166 = 0, $167 = 0, $169 = 0, $1691 = 0, $1693 = 0, $17 = 0, $170 = 0, $1719 = 0, $1726 = 0, $173 = 0, $1732 = 0, $1736 = 0, $1740 = 0, $1743 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1752 = 0, $1754 = 0, $1756 = 0, $1757 = 0, $1769 = 0, $1771 = 0, $1774 = 0, $1775 = 0, $178 = 0, $1780 = 0, $1787 = 0, $1794 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $180 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1808 = 0, $182 = 0, $1822 = 0, $1829 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1846 = 0, $1853 = 0, $1856 = 0, $1858 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1865 = 0, $1866 = 0, $1868 = 0, $1892 = 0, $1893 = 0, $19 = 0, $1901 = 0, $1926 = 0, $1927 = 0, $1935 = 0, $1949 = 0, $1951 = 0, $1952 = 0, $1958 = 0, $1959 = 0, $1964 = 0, $1969 = 0, $1977 = 0, $1986 = 0, $1991 = 0, $1993 = 0, $1994 = 0, $1996 = 0, $20 = 0, $200 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2011 = 0, $2016 = 0, $2028 = 0, $2029 = 0, $2030 = 0, $2037 = 0, $204 = 0, $2042 = 0, $2052 = 0, $2053 = 0, $2055 = 0, $2056 = 0, $206 = 0, $2060 = 0, $208 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2097 = 0, $2098 = 0, $21 = 0, $210 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2113 = 0, $2123 = 0, $2124 = 0, $2133 = 0, $2136 = 0, $2146 = 0, $2147 = 0, $215 = 0, $2152 = 0, $2158 = 0, $2159 = 0, $2163 = 0, $2169 = 0, $2170 = 0, $2171 = 0, $2173 = 0, $2174 = 0, $2188 = 0, $22 = 0, $2207 = 0, $2224 = 0, $2230 = 0, $2236 = 0, $2242 = 0, $2248 = 0, $2253 = 0, $2255 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2265 = 0, $2268 = 0, $2269 = 0, $2292 = 0, $2293 = 0, $23 = 0, $2323 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $233 = 0, $2364 = 0, $2365 = 0, $2367 = 0, $237 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2439 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2450 = 0, $2452 = 0, $2454 = 0, $2456 = 0, $246 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $2473 = 0, $2474 = 0, $2475 = 0, $2476 = 0, $2477 = 0, $248 = 0, $2482 = 0, $2488 = 0, $2491 = 0, $2496 = 0, $25 = 0, $250 = 0, $2500 = 0, $2506 = 0, $2507 = 0, $2510 = 0, $2512 = 0, $2519 = 0, $2520 = 0, $265 = 0, $269 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $279 = 0, $280 = 0, $281 = 0, $284 = 0, $288 = 0, $292 = 0, $295 = 0, $296 = 0, $3 = 0, $301 = 0, $308 = 0, $309 = 0, $311 = 0, $334 = 0, $344 = 0, $347 = 0, $361 = 0, $369 = 0, $377 = 0, $378 = 0, $38 = 0, $388 = 0, $394 = 0, $402 = 0, $405 = 0, $414 = 0, $417 = 0, $425 = 0, $428 = 0, $432 = 0, $435 = 0, $444 = 0, $447 = 0, $449 = 0, $451 = 0, $453 = 0, $455 = 0, $457 = 0, $459 = 0, $461 = 0, $463 = 0, $464 = 0, $465 = 0, $468 = 0, $473 = 0, $474 = 0, $476 = 0, $490 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $500 = 0, $502 = 0, $528 = 0, $533 = 0, $547 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $557 = 0, $559 = 0, $57 = 0, $581 = 0, $586 = 0, $600 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $610 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $635 = 0, $637 = 0, $639 = 0, $652 = 0, $660 = 0, $677 = 0, $678 = 0, $679 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $691 = 0, $695 = 0, $697 = 0, $7 = 0, $701 = 0, $717 = 0, $729 = 0, $735 = 0, $74 = 0, $749 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $760 = 0, $761 = 0, $763 = 0, $765 = 0, $767 = 0, $769 = 0, $770 = 0, $771 = 0, $773 = 0, $775 = 0, $777 = 0, $778 = 0, $784 = 0, $785 = 0, $8 = 0, $812 = 0, $820 = 0, $828 = 0, $83 = 0, $836 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $846 = 0, $849 = 0, $88 = 0, $887 = 0, $888 = 0, $889 = 0, $890 = 0, $891 = 0, $893 = 0, $894 = 0, $906 = 0, $912 = 0, $916 = 0, $924 = 0, $929 = 0, $930 = 0, $936 = 0, $947 = 0, $948 = 0, $949 = 0, $950 = 0, $958 = 0, $961 = 0, $968 = 0, $980 = 0, $989 = 0, $995 = 0, $997 = 0, $998 = 0, $bp$02$i = 0, $bp1$04$i = 0, $bp7$011$i = 0, $c$015$i = 0, $channel9$012$i = 0, $channels$0$i = 0, $channels$1$i = 0, $dp$01$i = 0, $dp$01$i82 = 0, $dp$012$i = 0, $dp$014$i = 0, $dp$017$i = 0, $dp$02$i = 0, $dp$021$i = 0, $dp$05$i = 0, $dp$1$i = 0, $dp$124$i = 0, $dp$17$i = 0, $dp$2$i = 0, $dp$231$i = 0, $dp$38$i = 0, $dp$511$i = 0, $dp10$019$i = 0, $dp10$032$i = 0, $dp12$050$i = 0, $dp14$029$i = 0, $dp14$044$i = 0, $dp14$1$i = 0, $dp2$010$i = 0, $dp2$010$i32 = 0, $dp2$015$i = 0, $dp2$015$us$i = 0, $dp4$026$i = 0, $dp5$011$i = 0, $dp5$016$i = 0, $dp6$013$i = 0, $dp6$020$i = 0, $dp8$036$i = 0, $dp8$038$i = 0, $dp8$1$i = 0, $extract1315$i = 0, $extract2022$i = 0, $extract2729$i = 0, $have_shift$014$i = 0, $have_shift$1$i = 0, $i$01$i = 0, $i$01$i92 = 0, $i$011$i = 0, $i$012$i = 0, $i$018$i = 0, $i$02$i = 0, $i$020$i = 0, $i$03$i = 0, $i$051$i = 0, $i$1099$i = 0, $i$11115$i = 0, $i$12110$i = 0, $i$125$i = 0, $i$13126$i = 0, $i$14121$i = 0, $i$15$i = 0, $i$15137$i = 0, $i$16$i = 0, $i$16132$i = 0, $i$162$i = 0, $i$17148$i = 0, $i$18$i = 0, $i$18$i34 = 0, $i$18143$i = 0, $i$19159$i = 0, $i$20154$i = 0, $i$210$i = 0, $i$214$i = 0, $i$224$i = 0, $i$23$i = 0, $i$232$i = 0, $i$256$i = 0, $i$315$i = 0, $i$318$i = 0, $i$374$i = 0, $i$39$i = 0, $i$412$i = 0, $i$420$i = 0, $i$436$i = 0, $i$468$i = 0, $i$525$i = 0, $i$530$i = 0, $i$584$i = 0, $i$644$i = 0, $i$648$i = 0, $i$679$i = 0, $i$730$i = 0, $i$742$i = 0, $i$794$i = 0, $i$835$i = 0, $i$889$i = 0, $i$9104$i = 0, $i$940$i = 0, $i12$020$i = 0, $i15$030$i = 0, $i3$014$i = 0, $i3$014$us$i = 0, $i3$06$i = 0, $i4$08$i = 0, $i6$012$i = 0, $i8$014$i = 0, $i9$017$i = 0, $i9$037$i = 0, $png_ptr$idx$val = 0, $png_ptr$idx8$val = 0, $png_ptr$idx9$val = 0, $rgb_error$023$i = 0, $rgb_error$1$i = 0, $rgb_error$217$i = 0, $rgb_error$217$us$i = 0, $rgb_error$3$i = 0, $rgb_error$3$us$i = 0, $rgb_error$439$i = 0, $rgb_error$5$i = 0, $rgb_error$631$i = 0, $rgb_error$7$i = 0, $rgb_error$8$i = 0, $row_width$01$i = 0, $row_width$14$i = 0, $shift$019$i = 0, $shift$050$i = 0, $shift$06$i = 0, $shift$226$i = 0, $shift$261$i = 0, $shift$433$i = 0, $shift$455$i = 0, $shift$673$i = 0, $shift$867$i = 0, $shift$i = 0, $shift3$011$i = 0, $shift6$017$i = 0, $sp$01$i = 0, $sp$01$i66 = 0, $sp$013$i = 0, $sp$013$i70 = 0, $sp$016$i = 0, $sp$02$i = 0, $sp$02$i81 = 0, $sp$02$i91 = 0, $sp$022$i = 0, $sp$03$i = 0, $sp$04$i = 0, $sp$052$i = 0, $sp$1$i11 = 0, $sp$1085$i = 0, $sp$1180$i = 0, $sp$1295$i = 0, $sp$1390$i = 0, $sp$14105$i = 0, $sp$15100$i = 0, $sp$16$i = 0, $sp$16116$i = 0, $sp$17111$i = 0, $sp$18$i = 0, $sp$18127$i = 0, $sp$19122$i = 0, $sp$20138$i = 0, $sp$211$i = 0, $sp$21133$i = 0, $sp$22149$i = 0, $sp$223$i = 0, $sp$23144$i = 0, $sp$24$i = 0, $sp$24160$i = 0, $sp$25155$i = 0, $sp$263$i = 0, $sp$316$i = 0, $sp$421$i = 0, $sp$430$i = 0, $sp$457$i = 0, $sp$526$i = 0, $sp$645$i = 0, $sp$67$i = 0, $sp$675$i = 0, $sp$710$i = 0, $sp$731$i = 0, $sp$836$i = 0, $sp$869$i = 0, $sp$941$i = 0, $sp1$016$i = 0, $sp1$016$us$i = 0, $sp1$05$i = 0, $sp1$07$i = 0, $sp1$09$i = 0, $sp1$09$i33 = 0, $sp11$049$i = 0, $sp13$028$i = 0, $sp13$043$i = 0, $sp13$1$i = 0, $sp3$025$i = 0, $sp4$015$i = 0, $sp5$019$i = 0, $sp7$016$i = 0, $sp7$037$i = 0, $sp7$038$i = 0, $sp7$1$i = 0, $sp9$031$i = 0, $storemerge$i = 0, $storemerge$i12 = 0, $storemerge$us$i = 0, $storemerge1$i = 0, $storemerge2$i = 0, $storemerge4$in$i = 0, $storemerge8$in$i = 0, $w$0$i = 0, $w$0$off0$i = 0, $w$0$off8$i = 0, $w22$0$off0$i = 0, $w22$0$off8$i = 0, $w30$0$i = 0, $w30$1$i = 0, $w30$2$i = 0, $w41$0$off0$i = 0, $w41$0$off8$i = 0, $w41$1$off0$i = 0, $w41$1$off8$i = 0, $w41$2$off0$i = 0, $w41$2$off8$i = 0, label = 0, sp = 0, $dp$014$i$looptemp = 0, $dp4$026$i$looptemp = 0, $dp8$038$i$looptemp = 0, $dp12$050$i$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $shift$i = sp;
 $0 = $png_ptr + 384 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) _png_error($png_ptr, 75136);
 $3 = $png_ptr + 212 | 0;
 if ((HEAP32[$3 >> 2] & 16448 | 0) == 16384) _png_error($png_ptr, 75152);
 $7 = $png_ptr + 216 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 do if ($8 & 4096) {
  $11 = $row_info + 8 | 0;
  if ((HEAP8[$11 >> 0] | 0) != 3) {
   $140 = $1 + 1 | 0;
   if ((HEAP16[$png_ptr + 428 >> 1] | 0) == 0 | ($8 & 33554432 | 0) == 0) {
    _png_do_expand($row_info, $140, 0);
    break;
   } else {
    _png_do_expand($row_info, $140, $png_ptr + 532 | 0);
    break;
   }
  }
  $15 = HEAP32[$png_ptr + 416 >> 2] | 0;
  $17 = HEAP32[$png_ptr + 528 >> 2] | 0;
  $19 = HEAP16[$png_ptr + 428 >> 1] | 0;
  $20 = $19 & 65535;
  $21 = HEAP32[$row_info >> 2] | 0;
  $22 = $row_info + 9 | 0;
  $23 = HEAP8[$22 >> 0] | 0;
  if (($23 & 255) < 8) {
   $25 = $23 & 255;
   if (($25 | 0) == 4) {
    if ($21) {
     $dp$231$i = $1 + $21 | 0;
     $i$232$i = 0;
     $shift$433$i = $21 << 2 & 4;
     $sp$430$i = $1 + ((($21 + -1 | 0) >>> 1) + 1) | 0;
     while (1) {
      HEAP8[$dp$231$i >> 0] = (HEAPU8[$sp$430$i >> 0] | 0) >>> $shift$433$i & 15;
      $74 = ($shift$433$i | 0) == 4;
      $i$232$i = $i$232$i + 1 | 0;
      if (($i$232$i | 0) == ($21 | 0)) break; else {
       $dp$231$i = $dp$231$i + -1 | 0;
       $shift$433$i = $74 ? 0 : $shift$433$i + 4 | 0;
       $sp$430$i = $74 ? $sp$430$i + -1 | 0 : $sp$430$i;
      }
     }
    }
   } else if (($25 | 0) == 1) {
    if ($21) {
     $dp$017$i = $1 + $21 | 0;
     $i$018$i = 0;
     $shift$019$i = $21 + 7 & 7 ^ 7;
     $sp$016$i = $1 + ((($21 + -1 | 0) >>> 3) + 1) | 0;
     while (1) {
      HEAP8[$dp$017$i >> 0] = (HEAPU8[$sp$016$i >> 0] & 1 << $shift$019$i | 0) != 0 & 1;
      $38 = ($shift$019$i | 0) == 7;
      $i$018$i = $i$018$i + 1 | 0;
      if (($i$018$i | 0) == ($21 | 0)) break; else {
       $dp$017$i = $dp$017$i + -1 | 0;
       $shift$019$i = $38 ? 0 : $shift$019$i + 1 | 0;
       $sp$016$i = $38 ? $sp$016$i + -1 | 0 : $sp$016$i;
      }
     }
    }
   } else if (($25 | 0) == 2) if ($21) {
    $dp$124$i = $1 + $21 | 0;
    $i$125$i = 0;
    $shift$226$i = ($21 << 1) + 6 & 6 ^ 6;
    $sp$223$i = $1 + ((($21 + -1 | 0) >>> 2) + 1) | 0;
    while (1) {
     HEAP8[$dp$124$i >> 0] = (HEAPU8[$sp$223$i >> 0] | 0) >>> $shift$226$i & 3;
     $57 = ($shift$226$i | 0) == 6;
     $i$125$i = $i$125$i + 1 | 0;
     if (($i$125$i | 0) == ($21 | 0)) break; else {
      $dp$124$i = $dp$124$i + -1 | 0;
      $shift$226$i = $57 ? 0 : $shift$226$i + 2 | 0;
      $sp$223$i = $57 ? $sp$223$i + -1 | 0 : $sp$223$i;
     }
    }
   }
   HEAP8[$22 >> 0] = 8;
   HEAP8[$row_info + 11 >> 0] = 8;
   HEAP32[$row_info + 4 >> 2] = $21;
  } else if ($23 << 24 >> 24 != 8) break;
  $83 = $1 + $21 | 0;
  if (!($19 << 16 >> 16)) {
   $112 = $21 * 3 | 0;
   if ($21) {
    $dp$511$i = $1 + $112 | 0;
    $i$412$i = 0;
    $sp$710$i = $83;
    while (1) {
     HEAP8[$dp$511$i >> 0] = HEAP8[$15 + ((HEAPU8[$sp$710$i >> 0] | 0) * 3 | 0) + 2 >> 0] | 0;
     HEAP8[$dp$511$i + -1 >> 0] = HEAP8[$15 + ((HEAPU8[$sp$710$i >> 0] | 0) * 3 | 0) + 1 >> 0] | 0;
     HEAP8[$dp$511$i + -2 >> 0] = HEAP8[$15 + ((HEAPU8[$sp$710$i >> 0] | 0) * 3 | 0) >> 0] | 0;
     $i$412$i = $i$412$i + 1 | 0;
     if (($i$412$i | 0) == ($21 | 0)) break; else {
      $dp$511$i = $dp$511$i + -3 | 0;
      $sp$710$i = $sp$710$i + -1 | 0;
     }
    }
   }
   HEAP8[$22 >> 0] = 8;
   HEAP8[$row_info + 11 >> 0] = 24;
   HEAP32[$row_info + 4 >> 2] = $112;
   HEAP8[$11 >> 0] = 2;
   HEAP8[$row_info + 10 >> 0] = 3;
   break;
  }
  $84 = $21 << 2;
  if ($21) {
   $dp$38$i = $1 + $84 | 0;
   $i$39$i = 0;
   $sp$67$i = $83;
   while (1) {
    $88 = HEAPU8[$sp$67$i >> 0] | 0;
    if ($88 >>> 0 < $20 >>> 0) $storemerge$i = HEAP8[$17 + $88 >> 0] | 0; else $storemerge$i = -1;
    HEAP8[$dp$38$i >> 0] = $storemerge$i;
    HEAP8[$dp$38$i + -1 >> 0] = HEAP8[$15 + ((HEAPU8[$sp$67$i >> 0] | 0) * 3 | 0) + 2 >> 0] | 0;
    HEAP8[$dp$38$i + -2 >> 0] = HEAP8[$15 + ((HEAPU8[$sp$67$i >> 0] | 0) * 3 | 0) + 1 >> 0] | 0;
    HEAP8[$dp$38$i + -3 >> 0] = HEAP8[$15 + ((HEAPU8[$sp$67$i >> 0] | 0) * 3 | 0) >> 0] | 0;
    $i$39$i = $i$39$i + 1 | 0;
    if (($i$39$i | 0) == ($21 | 0)) break; else {
     $dp$38$i = $dp$38$i + -4 | 0;
     $sp$67$i = $sp$67$i + -1 | 0;
    }
   }
  }
  HEAP8[$22 >> 0] = 8;
  HEAP8[$row_info + 11 >> 0] = 32;
  HEAP32[$row_info + 4 >> 2] = $84;
  HEAP8[$11 >> 0] = 6;
  HEAP8[$row_info + 10 >> 0] = 4;
 } while (0);
 $142 = HEAP32[$7 >> 2] | 0;
 if (($142 & 262272 | 0) == 262144) {
  $146 = HEAP8[$row_info + 8 >> 0] | 0;
  if ($146 << 24 >> 24 == 4 | $146 << 24 >> 24 == 6) {
   _png_do_strip_channel($row_info, (HEAP32[$0 >> 2] | 0) + 1 | 0, 0);
   $150 = HEAP32[$7 >> 2] | 0;
  } else $150 = $142;
 } else $150 = $142;
 do if (!($150 & 6291456)) $435 = $150; else {
  $153 = (HEAP32[$0 >> 2] | 0) + 1 | 0;
  $154 = $row_info + 8 | 0;
  $156 = HEAPU8[$154 >> 0] | 0;
  if (($156 & 3 | 0) == 2) {
   $161 = HEAPU16[$png_ptr + 702 >> 1] | 0;
   $164 = HEAPU16[$png_ptr + 704 >> 1] | 0;
   $166 = 32768 - $161 - $164 | 0;
   $167 = HEAP32[$row_info >> 2] | 0;
   $169 = ($156 & 4 | 0) != 0;
   $170 = $row_info + 9 | 0;
   L57 : do if ((HEAP8[$170 >> 0] | 0) == 8) {
    $173 = $png_ptr + 500 | 0;
    if (HEAP32[$173 >> 2] | 0) {
     $200 = $png_ptr + 504 | 0;
     if (HEAP32[$200 >> 2] | 0) {
      if (!$167) {
       $rgb_error$8$i = 0;
       break;
      }
      $204 = $png_ptr + 492 | 0;
      $dp$021$i = $153;
      $i$020$i = 0;
      $rgb_error$023$i = 0;
      $sp$022$i = $153;
      while (1) {
       $206 = HEAP8[$sp$022$i >> 0] | 0;
       $208 = HEAP8[$sp$022$i + 1 >> 0] | 0;
       $209 = $sp$022$i + 3 | 0;
       $210 = HEAP8[$sp$022$i + 2 >> 0] | 0;
       $211 = $206 & 255;
       if ($206 << 24 >> 24 == $208 << 24 >> 24 ? $206 << 24 >> 24 == $210 << 24 >> 24 : 0) {
        $237 = HEAP32[$204 >> 2] | 0;
        if (!$237) {
         $rgb_error$1$i = $rgb_error$023$i;
         $storemerge1$i = $206;
        } else {
         $rgb_error$1$i = $rgb_error$023$i;
         $storemerge1$i = HEAP8[$237 + $211 >> 0] | 0;
        }
       } else {
        $215 = HEAP32[$200 >> 2] | 0;
        $233 = ((Math_imul(HEAPU8[$215 + $211 >> 0] | 0, $161) | 0) + 16384 + (Math_imul(HEAPU8[$215 + ($208 & 255) >> 0] | 0, $164) | 0) + (Math_imul(HEAPU8[$215 + ($210 & 255) >> 0] | 0, $166) | 0) | 0) >>> 15;
        $rgb_error$1$i = $rgb_error$023$i | 1;
        $storemerge1$i = HEAP8[(HEAP32[$173 >> 2] | 0) + $233 >> 0] | 0;
       }
       $dp$1$i = $dp$021$i + 1 | 0;
       HEAP8[$dp$021$i >> 0] = $storemerge1$i;
       if ($169) {
        HEAP8[$dp$1$i >> 0] = HEAP8[$209 >> 0] | 0;
        $dp$2$i = $dp$021$i + 2 | 0;
        $sp$1$i11 = $sp$022$i + 4 | 0;
       } else {
        $dp$2$i = $dp$1$i;
        $sp$1$i11 = $209;
       }
       $i$020$i = $i$020$i + 1 | 0;
       if (($i$020$i | 0) == ($167 | 0)) {
        $rgb_error$8$i = $rgb_error$1$i;
        break L57;
       } else {
        $dp$021$i = $dp$2$i;
        $rgb_error$023$i = $rgb_error$1$i;
        $sp$022$i = $sp$1$i11;
       }
      }
     }
    }
    if (!$167) $rgb_error$8$i = 0; else if ($169) {
     $dp2$015$us$i = $153;
     $i3$014$us$i = 0;
     $rgb_error$217$us$i = 0;
     $sp1$016$us$i = $153;
     while (1) {
      $178 = HEAP8[$sp1$016$us$i >> 0] | 0;
      $180 = HEAP8[$sp1$016$us$i + 1 >> 0] | 0;
      $182 = HEAP8[$sp1$016$us$i + 2 >> 0] | 0;
      if ($178 << 24 >> 24 == $180 << 24 >> 24 ? $178 << 24 >> 24 == $182 << 24 >> 24 : 0) {
       $rgb_error$3$us$i = $rgb_error$217$us$i;
       $storemerge$us$i = $178;
      } else {
       $rgb_error$3$us$i = $rgb_error$217$us$i | 1;
       $storemerge$us$i = ((Math_imul($180 & 255, $164) | 0) + (Math_imul($178 & 255, $161) | 0) + (Math_imul($182 & 255, $166) | 0) | 0) >>> 15 & 255;
      }
      HEAP8[$dp2$015$us$i >> 0] = $storemerge$us$i;
      HEAP8[$dp2$015$us$i + 1 >> 0] = HEAP8[$sp1$016$us$i + 3 >> 0] | 0;
      $i3$014$us$i = $i3$014$us$i + 1 | 0;
      if (($i3$014$us$i | 0) == ($167 | 0)) {
       $rgb_error$8$i = $rgb_error$3$us$i;
       break;
      } else {
       $dp2$015$us$i = $dp2$015$us$i + 2 | 0;
       $rgb_error$217$us$i = $rgb_error$3$us$i;
       $sp1$016$us$i = $sp1$016$us$i + 4 | 0;
      }
     }
    } else {
     $dp2$015$i = $153;
     $i3$014$i = 0;
     $rgb_error$217$i = 0;
     $sp1$016$i = $153;
     while (1) {
      $246 = HEAP8[$sp1$016$i >> 0] | 0;
      $248 = HEAP8[$sp1$016$i + 1 >> 0] | 0;
      $250 = HEAP8[$sp1$016$i + 2 >> 0] | 0;
      if ($246 << 24 >> 24 == $248 << 24 >> 24 ? $246 << 24 >> 24 == $250 << 24 >> 24 : 0) {
       $rgb_error$3$i = $rgb_error$217$i;
       $storemerge$i12 = $246;
      } else {
       $rgb_error$3$i = $rgb_error$217$i | 1;
       $storemerge$i12 = ((Math_imul($248 & 255, $164) | 0) + (Math_imul($246 & 255, $161) | 0) + (Math_imul($250 & 255, $166) | 0) | 0) >>> 15 & 255;
      }
      HEAP8[$dp2$015$i >> 0] = $storemerge$i12;
      $i3$014$i = $i3$014$i + 1 | 0;
      if (($i3$014$i | 0) == ($167 | 0)) {
       $rgb_error$8$i = $rgb_error$3$i;
       break;
      } else {
       $dp2$015$i = $dp2$015$i + 1 | 0;
       $rgb_error$217$i = $rgb_error$3$i;
       $sp1$016$i = $sp1$016$i + 3 | 0;
      }
     }
    }
   } else {
    $265 = $png_ptr + 512 | 0;
    if (HEAP32[$265 >> 2] | 0) {
     $269 = $png_ptr + 508 | 0;
     if (HEAP32[$269 >> 2] | 0) {
      if (!$167) {
       $rgb_error$8$i = 0;
       break;
      }
      $273 = $png_ptr + 496 | 0;
      $274 = $png_ptr + 484 | 0;
      $dp8$036$i = $153;
      $i9$037$i = 0;
      $rgb_error$439$i = 0;
      $sp7$038$i = $153;
      while (1) {
       $275 = HEAP8[$sp7$038$i >> 0] | 0;
       $276 = $275 & 255;
       $279 = HEAP8[$sp7$038$i + 1 >> 0] | 0;
       $280 = $279 & 255;
       $281 = $276 << 8 | $280;
       $284 = HEAPU8[$sp7$038$i + 2 >> 0] | 0;
       $288 = HEAPU8[$sp7$038$i + 3 >> 0] | 0;
       $292 = HEAPU8[$sp7$038$i + 4 >> 0] | 0;
       $295 = HEAPU8[$sp7$038$i + 5 >> 0] | 0;
       $296 = $sp7$038$i + 6 | 0;
       if (($281 | 0) == ($284 << 8 | $288 | 0)) if (($281 | 0) == ($292 << 8 | $295 | 0)) {
        $301 = HEAP32[$273 >> 2] | 0;
        if (!$301) {
         $rgb_error$5$i = $rgb_error$439$i;
         $w$0$off0$i = $279;
         $w$0$off8$i = $275;
        } else {
         $308 = HEAP16[(HEAP32[$301 + ($280 >>> (HEAP32[$274 >> 2] | 0) << 2) >> 2] | 0) + ($276 << 1) >> 1] | 0;
         $rgb_error$5$i = $rgb_error$439$i;
         $w$0$off0$i = $308 & 255;
         $w$0$off8$i = ($308 & 65535) >>> 8 & 255;
        }
       } else label = 68; else label = 68;
       if ((label | 0) == 68) {
        label = 0;
        $309 = HEAP32[$274 >> 2] | 0;
        $311 = HEAP32[$265 >> 2] | 0;
        $334 = (Math_imul(HEAPU16[(HEAP32[$311 + ($280 >>> $309 << 2) >> 2] | 0) + ($276 << 1) >> 1] | 0, $161) | 0) + 16384 + (Math_imul(HEAPU16[(HEAP32[$311 + ($288 >>> $309 << 2) >> 2] | 0) + ($284 << 1) >> 1] | 0, $164) | 0) + (Math_imul(HEAPU16[(HEAP32[$311 + ($295 >>> $309 << 2) >> 2] | 0) + ($292 << 1) >> 1] | 0, $166) | 0) | 0;
        $344 = HEAP16[(HEAP32[(HEAP32[$269 >> 2] | 0) + (($334 >>> 15 & 255) >>> $309 << 2) >> 2] | 0) + (($334 >>> 23 & 255) << 1) >> 1] | 0;
        $rgb_error$5$i = $rgb_error$439$i | 1;
        $w$0$off0$i = $344 & 255;
        $w$0$off8$i = ($344 & 65535) >>> 8 & 255;
       }
       HEAP8[$dp8$036$i >> 0] = $w$0$off8$i;
       $347 = $dp8$036$i + 2 | 0;
       HEAP8[$dp8$036$i + 1 >> 0] = $w$0$off0$i;
       if ($169) {
        HEAP8[$347 >> 0] = HEAP8[$296 >> 0] | 0;
        HEAP8[$dp8$036$i + 3 >> 0] = HEAP8[$sp7$038$i + 7 >> 0] | 0;
        $dp8$1$i = $dp8$036$i + 4 | 0;
        $sp7$1$i = $sp7$038$i + 8 | 0;
       } else {
        $dp8$1$i = $347;
        $sp7$1$i = $296;
       }
       $i9$037$i = $i9$037$i + 1 | 0;
       if (($i9$037$i | 0) == ($167 | 0)) {
        $rgb_error$8$i = $rgb_error$5$i;
        break L57;
       } else {
        $dp8$036$i = $dp8$1$i;
        $rgb_error$439$i = $rgb_error$5$i;
        $sp7$038$i = $sp7$1$i;
       }
      }
     }
    }
    if (!$167) $rgb_error$8$i = 0; else {
     $dp14$029$i = $153;
     $i15$030$i = 0;
     $rgb_error$631$i = 0;
     $sp13$028$i = $153;
     while (1) {
      $361 = HEAPU8[$sp13$028$i >> 0] << 8 | HEAPU8[$sp13$028$i + 1 >> 0];
      $369 = HEAPU8[$sp13$028$i + 2 >> 0] << 8 | HEAPU8[$sp13$028$i + 3 >> 0];
      $377 = HEAPU8[$sp13$028$i + 4 >> 0] << 8 | HEAPU8[$sp13$028$i + 5 >> 0];
      $378 = $sp13$028$i + 6 | 0;
      $rgb_error$7$i = ($361 | 0) == ($369 | 0) & ($361 | 0) == ($377 | 0) & 1 ^ 1 | $rgb_error$631$i;
      $388 = (Math_imul($361, $161) | 0) + 16384 + (Math_imul($369, $164) | 0) + (Math_imul($377, $166) | 0) | 0;
      HEAP8[$dp14$029$i >> 0] = $388 >>> 23;
      $394 = $dp14$029$i + 2 | 0;
      HEAP8[$dp14$029$i + 1 >> 0] = $388 >>> 15;
      if ($169) {
       HEAP8[$394 >> 0] = HEAP8[$378 >> 0] | 0;
       HEAP8[$dp14$029$i + 3 >> 0] = HEAP8[$sp13$028$i + 7 >> 0] | 0;
       $dp14$1$i = $dp14$029$i + 4 | 0;
       $sp13$1$i = $sp13$028$i + 8 | 0;
      } else {
       $dp14$1$i = $394;
       $sp13$1$i = $378;
      }
      $i15$030$i = $i15$030$i + 1 | 0;
      if (($i15$030$i | 0) == ($167 | 0)) {
       $rgb_error$8$i = $rgb_error$7$i;
       break;
      } else {
       $dp14$029$i = $dp14$1$i;
       $rgb_error$631$i = $rgb_error$7$i;
       $sp13$028$i = $sp13$1$i;
      }
     }
    }
   } while (0);
   $402 = $row_info + 10 | 0;
   $405 = (HEAPU8[$402 >> 0] | 0) + 254 | 0;
   HEAP8[$402 >> 0] = $405;
   HEAP8[$154 >> 0] = HEAPU8[$154 >> 0] & 253;
   $414 = Math_imul(HEAPU8[$170 >> 0] | 0, $405 & 255) | 0;
   HEAP8[$row_info + 11 >> 0] = $414;
   $417 = $414 & 255;
   if ($417 >>> 0 > 7) $425 = Math_imul($417 >>> 3, $167) | 0; else $425 = ((Math_imul($417, $167) | 0) + 7 | 0) >>> 3;
   HEAP32[$row_info + 4 >> 2] = $425;
   if (!$rgb_error$8$i) {
    $435 = HEAP32[$7 >> 2] | 0;
    break;
   }
   HEAP8[$png_ptr + 700 >> 0] = 1;
   $428 = HEAP32[$7 >> 2] | 0;
   if (($428 & 6291456 | 0) == 4194304) {
    _png_warning($png_ptr, 75176);
    $432 = HEAP32[$7 >> 2] | 0;
   } else $432 = $428;
   if (($432 & 6291456 | 0) == 2097152) _png_error($png_ptr, 75176); else $435 = $432;
  } else $435 = $150;
 } while (0);
 if (!($435 & 16384)) $444 = $435; else if (!(HEAP32[$png_ptr + 208 >> 2] & 2048)) {
  _png_do_gray_to_rgb($row_info, (HEAP32[$0 >> 2] | 0) + 1 | 0);
  $444 = HEAP32[$7 >> 2] | 0;
 } else $444 = $435;
 L126 : do if ($444 & 128) {
  $447 = (HEAP32[$0 >> 2] | 0) + 1 | 0;
  $449 = HEAP32[$png_ptr + 492 >> 2] | 0;
  $451 = HEAP32[$png_ptr + 500 >> 2] | 0;
  $453 = HEAP32[$png_ptr + 504 >> 2] | 0;
  $455 = HEAP32[$png_ptr + 496 >> 2] | 0;
  $457 = HEAP32[$png_ptr + 508 >> 2] | 0;
  $459 = HEAP32[$png_ptr + 512 >> 2] | 0;
  $461 = HEAP32[$png_ptr + 484 >> 2] | 0;
  $463 = HEAP32[$3 >> 2] & 8192;
  $464 = ($463 | 0) == 0;
  $$lobit$i = $463 >>> 13;
  $465 = HEAP32[$row_info >> 2] | 0;
  $468 = HEAPU8[$row_info + 8 >> 0] | 0;
  if (($468 | 0) == 2) if ((HEAP8[$row_info + 9 >> 0] | 0) == 8) {
   $677 = ($465 | 0) == 0;
   if (!$449) {
    if ($677) break;
    $684 = $png_ptr + 534 | 0;
    $685 = $png_ptr + 536 | 0;
    $686 = $png_ptr + 538 | 0;
    $687 = $png_ptr + 454 | 0;
    $688 = $png_ptr + 456 | 0;
    $689 = $png_ptr + 458 | 0;
    $i$1099$i = 1;
    $sp$15100$i = $447;
    while (1) {
     if ((HEAPU8[$sp$15100$i >> 0] | 0) == (HEAPU16[$684 >> 1] | 0)) {
      $729 = $sp$15100$i + 1 | 0;
      if ((HEAPU8[$729 >> 0] | 0) == (HEAPU16[$685 >> 1] | 0)) {
       $735 = $sp$15100$i + 2 | 0;
       if ((HEAPU8[$735 >> 0] | 0) == (HEAPU16[$686 >> 1] | 0)) {
        HEAP8[$sp$15100$i >> 0] = HEAP16[$687 >> 1];
        HEAP8[$729 >> 0] = HEAP16[$688 >> 1];
        HEAP8[$735 >> 0] = HEAP16[$689 >> 1];
       }
      }
     }
     if (($i$1099$i | 0) == ($465 | 0)) break L126;
     $i$1099$i = $i$1099$i + 1 | 0;
     $sp$15100$i = $sp$15100$i + 3 | 0;
    }
   } else {
    if ($677) break;
    $678 = $png_ptr + 534 | 0;
    $679 = $png_ptr + 536 | 0;
    $680 = $png_ptr + 538 | 0;
    $681 = $png_ptr + 454 | 0;
    $682 = $png_ptr + 456 | 0;
    $683 = $png_ptr + 458 | 0;
    $i$9104$i = 0;
    $sp$14105$i = $447;
    while (1) {
     $691 = HEAPU8[$sp$14105$i >> 0] | 0;
     $695 = $sp$14105$i + 1 | 0;
     $697 = HEAPU8[$695 >> 0] | 0;
     if (($691 | 0) == (HEAPU16[$678 >> 1] | 0)) if (($697 | 0) == (HEAPU16[$679 >> 1] | 0)) {
      $701 = $sp$14105$i + 2 | 0;
      if ((HEAPU8[$701 >> 0] | 0) == (HEAPU16[$680 >> 1] | 0)) {
       HEAP8[$sp$14105$i >> 0] = HEAP16[$681 >> 1];
       HEAP8[$695 >> 0] = HEAP16[$682 >> 1];
       HEAP8[$701 >> 0] = HEAP16[$683 >> 1];
      } else label = 158;
     } else label = 158; else label = 158;
     if ((label | 0) == 158) {
      label = 0;
      HEAP8[$sp$14105$i >> 0] = HEAP8[$449 + $691 >> 0] | 0;
      HEAP8[$695 >> 0] = HEAP8[$449 + $697 >> 0] | 0;
      $717 = $sp$14105$i + 2 | 0;
      HEAP8[$717 >> 0] = HEAP8[$449 + (HEAPU8[$717 >> 0] | 0) >> 0] | 0;
     }
     $i$9104$i = $i$9104$i + 1 | 0;
     if (($i$9104$i | 0) == ($465 | 0)) break; else $sp$14105$i = $sp$14105$i + 3 | 0;
    }
   }
  } else {
   $749 = ($465 | 0) == 0;
   if (!$455) {
    if ($749) break;
    $756 = $png_ptr + 534 | 0;
    $757 = $png_ptr + 536 | 0;
    $758 = $png_ptr + 538 | 0;
    $759 = $png_ptr + 454 | 0;
    $760 = $png_ptr + 456 | 0;
    $761 = $png_ptr + 458 | 0;
    $i$12110$i = 1;
    $sp$17111$i = $447;
    while (1) {
     $836 = $sp$17111$i + 1 | 0;
     $840 = $sp$17111$i + 2 | 0;
     $841 = $sp$17111$i + 3 | 0;
     $842 = $sp$17111$i + 4 | 0;
     $846 = $sp$17111$i + 5 | 0;
     $849 = HEAPU8[$842 >> 0] << 8 | HEAPU8[$846 >> 0];
     if ((HEAPU8[$sp$17111$i >> 0] << 8 | HEAPU8[$836 >> 0] | 0) == (HEAPU16[$756 >> 1] | 0)) if ((HEAPU8[$840 >> 0] << 8 | HEAPU8[$841 >> 0] | 0) == (HEAPU16[$757 >> 1] | 0)) if (($849 | 0) == (HEAPU16[$758 >> 1] | 0)) {
      HEAP8[$sp$17111$i >> 0] = (HEAPU16[$759 >> 1] | 0) >>> 8;
      HEAP8[$836 >> 0] = HEAP16[$759 >> 1];
      HEAP8[$840 >> 0] = (HEAPU16[$760 >> 1] | 0) >>> 8;
      HEAP8[$841 >> 0] = HEAP16[$760 >> 1];
      HEAP8[$842 >> 0] = (HEAPU16[$761 >> 1] | 0) >>> 8;
      HEAP8[$846 >> 0] = HEAP16[$761 >> 1];
     }
     if (($i$12110$i | 0) == ($465 | 0)) break L126;
     $i$12110$i = $i$12110$i + 1 | 0;
     $sp$17111$i = $sp$17111$i + 6 | 0;
    }
   } else {
    if ($749) break;
    $750 = $png_ptr + 534 | 0;
    $751 = $png_ptr + 536 | 0;
    $752 = $png_ptr + 538 | 0;
    $753 = $png_ptr + 454 | 0;
    $754 = $png_ptr + 456 | 0;
    $755 = $png_ptr + 458 | 0;
    $i$11115$i = 0;
    $sp$16116$i = $447;
    while (1) {
     $763 = HEAPU8[$sp$16116$i >> 0] | 0;
     $765 = $sp$16116$i + 1 | 0;
     $767 = HEAPU8[$765 >> 0] | 0;
     $769 = $sp$16116$i + 2 | 0;
     $770 = $sp$16116$i + 3 | 0;
     $771 = $sp$16116$i + 4 | 0;
     $773 = HEAPU8[$771 >> 0] | 0;
     $775 = $sp$16116$i + 5 | 0;
     $777 = HEAPU8[$775 >> 0] | 0;
     $778 = $773 << 8 | $777;
     $784 = HEAPU8[$769 >> 0] | 0;
     $785 = HEAPU8[$770 >> 0] | 0;
     if (($763 << 8 | $767 | 0) == (HEAPU16[$750 >> 1] | 0)) if (($784 << 8 | $785 | 0) == (HEAPU16[$751 >> 1] | 0)) if (($778 | 0) == (HEAPU16[$752 >> 1] | 0)) {
      HEAP8[$sp$16116$i >> 0] = (HEAPU16[$753 >> 1] | 0) >>> 8;
      HEAP8[$765 >> 0] = HEAP16[$753 >> 1];
      HEAP8[$769 >> 0] = (HEAPU16[$754 >> 1] | 0) >>> 8;
      HEAP8[$770 >> 0] = HEAP16[$754 >> 1];
      HEAP8[$771 >> 0] = (HEAPU16[$755 >> 1] | 0) >>> 8;
      $$sink2 = HEAP16[$755 >> 1] | 0;
     } else label = 175; else label = 175; else label = 175;
     if ((label | 0) == 175) {
      label = 0;
      $812 = HEAP16[(HEAP32[$455 + ($767 >>> $461 << 2) >> 2] | 0) + ($763 << 1) >> 1] | 0;
      HEAP8[$sp$16116$i >> 0] = ($812 & 65535) >>> 8;
      HEAP8[$765 >> 0] = $812;
      $820 = HEAP16[(HEAP32[$455 + ($785 >>> $461 << 2) >> 2] | 0) + ($784 << 1) >> 1] | 0;
      HEAP8[$769 >> 0] = ($820 & 65535) >>> 8;
      HEAP8[$770 >> 0] = $820;
      $828 = HEAP16[(HEAP32[$455 + ($777 >>> $461 << 2) >> 2] | 0) + ($773 << 1) >> 1] | 0;
      HEAP8[$771 >> 0] = ($828 & 65535) >>> 8;
      $$sink2 = $828;
     }
     HEAP8[$775 >> 0] = $$sink2;
     $i$11115$i = $i$11115$i + 1 | 0;
     if (($i$11115$i | 0) == ($465 | 0)) break; else $sp$16116$i = $sp$16116$i + 6 | 0;
    }
   }
  } else if (!$468) switch (HEAPU8[$row_info + 9 >> 0] | 0) {
  case 16:
   {
    $629 = ($465 | 0) == 0;
    if (!$455) {
     if ($629) break L126;
     $632 = $png_ptr + 540 | 0;
     $633 = $png_ptr + 460 | 0;
     $i$889$i = 1;
     $sp$1390$i = $447;
     while (1) {
      $660 = $sp$1390$i + 1 | 0;
      if ((HEAPU8[$sp$1390$i >> 0] << 8 | HEAPU8[$660 >> 0] | 0) == (HEAPU16[$632 >> 1] | 0)) {
       HEAP8[$sp$1390$i >> 0] = (HEAPU16[$633 >> 1] | 0) >>> 8;
       HEAP8[$660 >> 0] = HEAP16[$633 >> 1];
      }
      if (($i$889$i | 0) == ($465 | 0)) break L126;
      $i$889$i = $i$889$i + 1 | 0;
      $sp$1390$i = $sp$1390$i + 2 | 0;
     }
    } else {
     if ($629) break L126;
     $630 = $png_ptr + 540 | 0;
     $631 = $png_ptr + 460 | 0;
     $i$794$i = 0;
     $sp$1295$i = $447;
     while (1) {
      $635 = HEAPU8[$sp$1295$i >> 0] | 0;
      $637 = $sp$1295$i + 1 | 0;
      $639 = HEAPU8[$637 >> 0] | 0;
      if (($635 << 8 | $639 | 0) == (HEAPU16[$630 >> 1] | 0)) {
       HEAP8[$sp$1295$i >> 0] = (HEAPU16[$631 >> 1] | 0) >>> 8;
       $$sink = HEAP16[$631 >> 1] | 0;
      } else {
       $652 = HEAP16[(HEAP32[$455 + ($639 >>> $461 << 2) >> 2] | 0) + ($635 << 1) >> 1] | 0;
       HEAP8[$sp$1295$i >> 0] = ($652 & 65535) >>> 8;
       $$sink = $652;
      }
      HEAP8[$637 >> 0] = $$sink;
      $i$794$i = $i$794$i + 1 | 0;
      if (($i$794$i | 0) == ($465 | 0)) break; else $sp$1295$i = $sp$1295$i + 2 | 0;
     }
    }
    break;
   }
  case 8:
   {
    $604 = ($465 | 0) == 0;
    if (!$449) {
     if ($604) break L126;
     $607 = $png_ptr + 540 | 0;
     $608 = $png_ptr + 460 | 0;
     $i$679$i = 1;
     $sp$1180$i = $447;
     while (1) {
      if ((HEAPU8[$sp$1180$i >> 0] | 0) == (HEAPU16[$607 >> 1] | 0)) HEAP8[$sp$1180$i >> 0] = HEAP16[$608 >> 1];
      if (($i$679$i | 0) == ($465 | 0)) break L126;
      $i$679$i = $i$679$i + 1 | 0;
      $sp$1180$i = $sp$1180$i + 1 | 0;
     }
    } else {
     if ($604) break L126;
     $605 = $png_ptr + 540 | 0;
     $606 = $png_ptr + 460 | 0;
     $i$584$i = 0;
     $sp$1085$i = $447;
     while (1) {
      $610 = HEAPU8[$sp$1085$i >> 0] | 0;
      if (($610 | 0) == (HEAPU16[$605 >> 1] | 0)) $storemerge2$i = HEAP16[$606 >> 1] & 255; else $storemerge2$i = HEAP8[$449 + $610 >> 0] | 0;
      HEAP8[$sp$1085$i >> 0] = $storemerge2$i;
      $i$584$i = $i$584$i + 1 | 0;
      if (($i$584$i | 0) == ($465 | 0)) break; else $sp$1085$i = $sp$1085$i + 1 | 0;
     }
    }
    break;
   }
  case 1:
   {
    if (!$465) break L126;
    $473 = $png_ptr + 540 | 0;
    $474 = $png_ptr + 460 | 0;
    $i$051$i = 1;
    $shift$050$i = 7;
    $sp$052$i = $447;
    while (1) {
     $476 = HEAPU8[$sp$052$i >> 0] | 0;
     if (($476 >>> $shift$050$i & 1 | 0) == (HEAPU16[$473 >> 1] | 0)) HEAP8[$sp$052$i >> 0] = HEAPU16[$474 >> 1] << $shift$050$i | $476 & 32639 >>> (7 - $shift$050$i | 0);
     $490 = ($shift$050$i | 0) == 0;
     if (($i$051$i | 0) == ($465 | 0)) break L126;
     $i$051$i = $i$051$i + 1 | 0;
     $shift$050$i = $490 ? 7 : $shift$050$i + -1 | 0;
     $sp$052$i = $490 ? $sp$052$i + 1 | 0 : $sp$052$i;
    }
    break;
   }
  case 2:
   {
    $494 = ($465 | 0) == 0;
    if (!$449) {
     if ($494) break L126;
     $497 = $png_ptr + 540 | 0;
     $498 = $png_ptr + 460 | 0;
     $i$256$i = 1;
     $shift$455$i = 6;
     $sp$457$i = $447;
     while (1) {
      $533 = HEAPU8[$sp$457$i >> 0] | 0;
      if (($533 >>> $shift$455$i & 3 | 0) == (HEAPU16[$497 >> 1] | 0)) HEAP8[$sp$457$i >> 0] = HEAPU16[$498 >> 1] << $shift$455$i | $533 & 16191 >>> (6 - $shift$455$i | 0);
      $547 = ($shift$455$i | 0) == 0;
      if (($i$256$i | 0) == ($465 | 0)) break L126;
      $i$256$i = $i$256$i + 1 | 0;
      $shift$455$i = $547 ? 6 : $shift$455$i + -2 | 0;
      $sp$457$i = $547 ? $sp$457$i + 1 | 0 : $sp$457$i;
     }
    } else {
     if ($494) break L126;
     $495 = $png_ptr + 540 | 0;
     $496 = $png_ptr + 460 | 0;
     $i$162$i = 0;
     $shift$261$i = 6;
     $sp$263$i = $447;
     while (1) {
      $500 = HEAPU8[$sp$263$i >> 0] | 0;
      $502 = $500 >>> $shift$261$i & 3;
      if (($502 | 0) == (HEAPU16[$495 >> 1] | 0)) $storemerge8$in$i = HEAPU16[$496 >> 1] << $shift$261$i & 255 | $500 & 16191 >>> (6 - $shift$261$i | 0); else $storemerge8$in$i = (HEAPU8[$449 + ($502 << 2 | $502 | $502 << 4 | $502 << 6) >> 0] | 0) >>> 6 << $shift$261$i | $500 & 16191 >>> (6 - $shift$261$i | 0);
      HEAP8[$sp$263$i >> 0] = $storemerge8$in$i;
      $528 = ($shift$261$i | 0) == 0;
      $i$162$i = $i$162$i + 1 | 0;
      if (($i$162$i | 0) == ($465 | 0)) break; else {
       $shift$261$i = $528 ? 6 : $shift$261$i + -2 | 0;
       $sp$263$i = $528 ? $sp$263$i + 1 | 0 : $sp$263$i;
      }
     }
    }
    break;
   }
  case 4:
   {
    $551 = ($465 | 0) == 0;
    if (!$449) {
     if ($551) break L126;
     $554 = $png_ptr + 540 | 0;
     $555 = $png_ptr + 460 | 0;
     $i$468$i = 1;
     $shift$867$i = 4;
     $sp$869$i = $447;
     while (1) {
      $586 = HEAPU8[$sp$869$i >> 0] | 0;
      if (($586 >>> $shift$867$i & 15 | 0) == (HEAPU16[$554 >> 1] | 0)) HEAP8[$sp$869$i >> 0] = HEAPU16[$555 >> 1] << $shift$867$i | $586 & 3855 >>> (4 - $shift$867$i | 0);
      $600 = ($shift$867$i | 0) == 0;
      if (($i$468$i | 0) == ($465 | 0)) break L126;
      $i$468$i = $i$468$i + 1 | 0;
      $shift$867$i = $600 ? 4 : $shift$867$i + -4 | 0;
      $sp$869$i = $600 ? $sp$869$i + 1 | 0 : $sp$869$i;
     }
    } else {
     if ($551) break L126;
     $552 = $png_ptr + 540 | 0;
     $553 = $png_ptr + 460 | 0;
     $i$374$i = 0;
     $shift$673$i = 4;
     $sp$675$i = $447;
     while (1) {
      $557 = HEAPU8[$sp$675$i >> 0] | 0;
      $559 = $557 >>> $shift$673$i & 15;
      if (($559 | 0) == (HEAPU16[$552 >> 1] | 0)) $storemerge4$in$i = HEAPU16[$553 >> 1] << $shift$673$i & 255 | $557 & 3855 >>> (4 - $shift$673$i | 0); else $storemerge4$in$i = (HEAPU8[$449 + ($559 << 4 | $559) >> 0] | 0) >>> 4 << $shift$673$i | $557 & 3855 >>> (4 - $shift$673$i | 0);
      HEAP8[$sp$675$i >> 0] = $storemerge4$in$i;
      $581 = ($shift$673$i | 0) == 0;
      $i$374$i = $i$374$i + 1 | 0;
      if (($i$374$i | 0) == ($465 | 0)) break; else {
       $shift$673$i = $581 ? 4 : $shift$673$i + -4 | 0;
       $sp$675$i = $581 ? $sp$675$i + 1 | 0 : $sp$675$i;
      }
     }
    }
    break;
   }
  default:
   break L126;
  } else if (($468 | 0) == 4) {
   if ((HEAP8[$row_info + 9 >> 0] | 0) == 8) {
    $887 = ($465 | 0) == 0;
    if (($453 | 0) == 0 | ($451 | 0) == 0 | ($449 | 0) == 0) {
     if ($887) break;
     $891 = $png_ptr + 460 | 0;
     $i$14121$i = 0;
     $sp$19122$i = $447;
     while (1) {
      $924 = HEAP8[$sp$19122$i + 1 >> 0] | 0;
      if (!($924 << 24 >> 24)) HEAP8[$sp$19122$i >> 0] = HEAP16[$891 >> 1]; else if ($924 << 24 >> 24 != -1) {
       $929 = $924 & 255;
       $930 = Math_imul(HEAPU8[$sp$19122$i >> 0] | 0, $929) | 0;
       $936 = $930 + 128 + (Math_imul(HEAPU16[$891 >> 1] | 0, $929 ^ 255) | 0) | 0;
       HEAP8[$sp$19122$i >> 0] = (($936 >>> 8 & 255) + $936 | 0) >>> 8;
      }
      $i$14121$i = $i$14121$i + 1 | 0;
      if (($i$14121$i | 0) == ($465 | 0)) break L126; else $sp$19122$i = $sp$19122$i + 2 | 0;
     }
    }
    if ($887) break;
    $888 = $png_ptr + 470 | 0;
    $889 = ($$lobit$i | 0) == 0;
    $890 = $png_ptr + 460 | 0;
    $i$13126$i = 0;
    $sp$18127$i = $447;
    while (1) {
     $893 = HEAP8[$sp$18127$i + 1 >> 0] | 0;
     $894 = $893 & 255;
     if ($893 << 24 >> 24 == -1) HEAP8[$sp$18127$i >> 0] = HEAP8[$449 + (HEAPU8[$sp$18127$i >> 0] | 0) >> 0] | 0; else if (!($893 << 24 >> 24)) HEAP8[$sp$18127$i >> 0] = HEAP16[$890 >> 1]; else {
      $906 = Math_imul(HEAPU8[$453 + (HEAPU8[$sp$18127$i >> 0] | 0) >> 0] | 0, $894) | 0;
      $912 = $906 + 128 + (Math_imul(HEAPU16[$888 >> 1] | 0, $894 ^ 255) | 0) | 0;
      $916 = (($912 >>> 8 & 255) + $912 | 0) >>> 8;
      if ($889) $w$0$i = HEAP8[$451 + ($916 & 255) >> 0] | 0; else $w$0$i = $916 & 255;
      HEAP8[$sp$18127$i >> 0] = $w$0$i;
     }
     $i$13126$i = $i$13126$i + 1 | 0;
     if (($i$13126$i | 0) == ($465 | 0)) break L126; else $sp$18127$i = $sp$18127$i + 2 | 0;
    }
   }
   $947 = ($465 | 0) == 0;
   if (($455 | 0) == 0 | ($457 | 0) == 0 | ($459 | 0) == 0) {
    if ($947) break;
    $950 = $png_ptr + 460 | 0;
    $i$16132$i = 0;
    $sp$21133$i = $447;
    while (1) {
     $1015 = HEAPU8[$sp$21133$i + 2 >> 0] << 8 | HEAPU8[$sp$21133$i + 3 >> 0];
     if (!$1015) {
      HEAP8[$sp$21133$i >> 0] = (HEAPU16[$950 >> 1] | 0) >>> 8;
      HEAP8[$sp$21133$i + 1 >> 0] = HEAP16[$950 >> 1];
     } else if (($1015 | 0) != 65535) {
      $1025 = $sp$21133$i + 1 | 0;
      $1029 = Math_imul(HEAPU8[$sp$21133$i >> 0] << 8 | HEAPU8[$1025 >> 0], $1015) | 0;
      $1035 = (Math_imul(HEAPU16[$950 >> 1] | 0, $1015 ^ 65535) | 0) + 32768 + $1029 | 0;
      $1037 = ($1035 >>> 16) + $1035 | 0;
      HEAP8[$sp$21133$i >> 0] = $1037 >>> 24;
      HEAP8[$1025 >> 0] = $1037 >>> 16;
     }
     $i$16132$i = $i$16132$i + 1 | 0;
     if (($i$16132$i | 0) == ($465 | 0)) break L126; else $sp$21133$i = $sp$21133$i + 4 | 0;
    }
   }
   if ($947) break;
   $948 = $png_ptr + 470 | 0;
   $949 = $png_ptr + 460 | 0;
   $i$15137$i = 0;
   $sp$20138$i = $447;
   while (1) {
    $958 = HEAPU8[$sp$20138$i + 2 >> 0] << 8 | HEAPU8[$sp$20138$i + 3 >> 0];
    if (($958 | 0) == 65535) {
     $961 = $sp$20138$i + 1 | 0;
     $968 = HEAP16[(HEAP32[$455 + ((HEAPU8[$961 >> 0] | 0) >>> $461 << 2) >> 2] | 0) + (HEAPU8[$sp$20138$i >> 0] << 1) >> 1] | 0;
     HEAP8[$sp$20138$i >> 0] = ($968 & 65535) >>> 8;
     HEAP8[$961 >> 0] = $968;
    } else if (!$958) {
     HEAP8[$sp$20138$i >> 0] = (HEAPU16[$949 >> 1] | 0) >>> 8;
     HEAP8[$sp$20138$i + 1 >> 0] = HEAP16[$949 >> 1];
    } else {
     $980 = $sp$20138$i + 1 | 0;
     $989 = Math_imul(HEAPU16[(HEAP32[$459 + ((HEAPU8[$980 >> 0] | 0) >>> $461 << 2) >> 2] | 0) + (HEAPU8[$sp$20138$i >> 0] << 1) >> 1] | 0, $958) | 0;
     $995 = $989 + 32768 + (Math_imul(HEAPU16[$948 >> 1] | 0, $958 ^ 65535) | 0) | 0;
     $997 = ($995 >>> 16) + $995 | 0;
     $998 = $997 >>> 16;
     if ($464) {
      $1005 = HEAP16[(HEAP32[$457 + (($998 & 255) >>> $461 << 2) >> 2] | 0) + ($997 >>> 24 << 1) >> 1] | 0;
      $w22$0$off0$i = $1005 & 255;
      $w22$0$off8$i = ($1005 & 65535) >>> 8 & 255;
     } else {
      $w22$0$off0$i = $998 & 255;
      $w22$0$off8$i = $997 >>> 24 & 255;
     }
     HEAP8[$sp$20138$i >> 0] = $w22$0$off8$i;
     HEAP8[$980 >> 0] = $w22$0$off0$i;
    }
    $i$15137$i = $i$15137$i + 1 | 0;
    if (($i$15137$i | 0) == ($465 | 0)) break; else $sp$20138$i = $sp$20138$i + 4 | 0;
   }
  } else if (($468 | 0) == 6) if ((HEAP8[$row_info + 9 >> 0] | 0) == 8) {
   $1050 = ($465 | 0) == 0;
   if (($453 | 0) == 0 | ($451 | 0) == 0 | ($449 | 0) == 0) {
    if ($1050) break;
    $1058 = $png_ptr + 454 | 0;
    $1059 = $png_ptr + 456 | 0;
    $1060 = $png_ptr + 458 | 0;
    $i$18143$i = 0;
    $sp$23144$i = $447;
    while (1) {
     $1149 = HEAP8[$sp$23144$i + 3 >> 0] | 0;
     if (!($1149 << 24 >> 24)) {
      HEAP8[$sp$23144$i >> 0] = HEAP16[$1058 >> 1];
      HEAP8[$sp$23144$i + 1 >> 0] = HEAP16[$1059 >> 1];
      HEAP8[$sp$23144$i + 2 >> 0] = HEAP16[$1060 >> 1];
     } else if ($1149 << 24 >> 24 != -1) {
      $1160 = $1149 & 255;
      $1161 = Math_imul(HEAPU8[$sp$23144$i >> 0] | 0, $1160) | 0;
      $1164 = $1160 ^ 255;
      $1167 = $1161 + 128 + (Math_imul(HEAPU16[$1058 >> 1] | 0, $1164) | 0) | 0;
      HEAP8[$sp$23144$i >> 0] = (($1167 >>> 8 & 255) + $1167 | 0) >>> 8;
      $1173 = $sp$23144$i + 1 | 0;
      $1176 = Math_imul(HEAPU8[$1173 >> 0] | 0, $1160) | 0;
      $1181 = $1176 + 128 + (Math_imul(HEAPU16[$1059 >> 1] | 0, $1164) | 0) | 0;
      HEAP8[$1173 >> 0] = (($1181 >>> 8 & 255) + $1181 | 0) >>> 8;
      $1187 = $sp$23144$i + 2 | 0;
      $1190 = Math_imul(HEAPU8[$1187 >> 0] | 0, $1160) | 0;
      $1195 = $1190 + 128 + (Math_imul(HEAPU16[$1060 >> 1] | 0, $1164) | 0) | 0;
      HEAP8[$1187 >> 0] = (($1195 >>> 8 & 255) + $1195 | 0) >>> 8;
     }
     $i$18143$i = $i$18143$i + 1 | 0;
     if (($i$18143$i | 0) == ($465 | 0)) break L126; else $sp$23144$i = $sp$23144$i + 4 | 0;
    }
   }
   if ($1050) break;
   $1051 = $png_ptr + 464 | 0;
   $1052 = ($$lobit$i | 0) == 0;
   $1053 = $png_ptr + 466 | 0;
   $1054 = $png_ptr + 468 | 0;
   $1055 = $png_ptr + 454 | 0;
   $1056 = $png_ptr + 456 | 0;
   $1057 = $png_ptr + 458 | 0;
   $i$17148$i = 0;
   $sp$22149$i = $447;
   while (1) {
    $1062 = HEAP8[$sp$22149$i + 3 >> 0] | 0;
    if ($1062 << 24 >> 24 == -1) {
     HEAP8[$sp$22149$i >> 0] = HEAP8[$449 + (HEAPU8[$sp$22149$i >> 0] | 0) >> 0] | 0;
     $1067 = $sp$22149$i + 1 | 0;
     HEAP8[$1067 >> 0] = HEAP8[$449 + (HEAPU8[$1067 >> 0] | 0) >> 0] | 0;
     $1072 = $sp$22149$i + 2 | 0;
     HEAP8[$1072 >> 0] = HEAP8[$449 + (HEAPU8[$1072 >> 0] | 0) >> 0] | 0;
    } else if (!($1062 << 24 >> 24)) {
     HEAP8[$sp$22149$i >> 0] = HEAP16[$1055 >> 1];
     HEAP8[$sp$22149$i + 1 >> 0] = HEAP16[$1056 >> 1];
     HEAP8[$sp$22149$i + 2 >> 0] = HEAP16[$1057 >> 1];
    } else {
     $1090 = $1062 & 255;
     $1091 = Math_imul(HEAPU8[$453 + (HEAPU8[$sp$22149$i >> 0] | 0) >> 0] | 0, $1090) | 0;
     $1094 = $1090 ^ 255;
     $1097 = $1091 + 128 + (Math_imul(HEAPU16[$1051 >> 1] | 0, $1094) | 0) | 0;
     $1101 = (($1097 >>> 8 & 255) + $1097 | 0) >>> 8;
     if ($1052) $w30$0$i = HEAP8[$451 + ($1101 & 255) >> 0] | 0; else $w30$0$i = $1101 & 255;
     HEAP8[$sp$22149$i >> 0] = $w30$0$i;
     $1106 = $sp$22149$i + 1 | 0;
     $1112 = Math_imul(HEAPU8[$453 + (HEAPU8[$1106 >> 0] | 0) >> 0] | 0, $1090) | 0;
     $1117 = $1112 + 128 + (Math_imul(HEAPU16[$1053 >> 1] | 0, $1094) | 0) | 0;
     $1121 = (($1117 >>> 8 & 255) + $1117 | 0) >>> 8;
     if ($1052) $w30$1$i = HEAP8[$451 + ($1121 & 255) >> 0] | 0; else $w30$1$i = $1121 & 255;
     HEAP8[$1106 >> 0] = $w30$1$i;
     $1126 = $sp$22149$i + 2 | 0;
     $1132 = Math_imul(HEAPU8[$453 + (HEAPU8[$1126 >> 0] | 0) >> 0] | 0, $1090) | 0;
     $1137 = $1132 + 128 + (Math_imul(HEAPU16[$1054 >> 1] | 0, $1094) | 0) | 0;
     $1141 = (($1137 >>> 8 & 255) + $1137 | 0) >>> 8;
     if ($1052) $w30$2$i = HEAP8[$451 + ($1141 & 255) >> 0] | 0; else $w30$2$i = $1141 & 255;
     HEAP8[$1126 >> 0] = $w30$2$i;
    }
    $i$17148$i = $i$17148$i + 1 | 0;
    if (($i$17148$i | 0) == ($465 | 0)) break; else $sp$22149$i = $sp$22149$i + 4 | 0;
   }
  } else {
   $1206 = ($465 | 0) == 0;
   if (($455 | 0) == 0 | ($457 | 0) == 0 | ($459 | 0) == 0) {
    if ($1206) break;
    $1214 = $png_ptr + 454 | 0;
    $1215 = $png_ptr + 456 | 0;
    $1216 = $png_ptr + 458 | 0;
    $i$20154$i = 0;
    $sp$25155$i = $447;
    while (1) {
     $1376 = HEAPU8[$sp$25155$i + 6 >> 0] << 8 | HEAPU8[$sp$25155$i + 7 >> 0];
     if (!$1376) {
      HEAP8[$sp$25155$i >> 0] = (HEAPU16[$1214 >> 1] | 0) >>> 8;
      HEAP8[$sp$25155$i + 1 >> 0] = HEAP16[$1214 >> 1];
      HEAP8[$sp$25155$i + 2 >> 0] = (HEAPU16[$1215 >> 1] | 0) >>> 8;
      HEAP8[$sp$25155$i + 3 >> 0] = HEAP16[$1215 >> 1];
      HEAP8[$sp$25155$i + 4 >> 0] = (HEAPU16[$1216 >> 1] | 0) >>> 8;
      HEAP8[$sp$25155$i + 5 >> 0] = HEAP16[$1216 >> 1];
     } else if (($1376 | 0) != 65535) {
      $1400 = $sp$25155$i + 1 | 0;
      $1404 = $sp$25155$i + 2 | 0;
      $1408 = $sp$25155$i + 3 | 0;
      $1411 = HEAPU8[$1404 >> 0] << 8 | HEAPU8[$1408 >> 0];
      $1412 = $sp$25155$i + 4 | 0;
      $1416 = $sp$25155$i + 5 | 0;
      $1419 = HEAPU8[$1412 >> 0] << 8 | HEAPU8[$1416 >> 0];
      $1420 = Math_imul(HEAPU8[$sp$25155$i >> 0] << 8 | HEAPU8[$1400 >> 0], $1376) | 0;
      $1423 = $1376 ^ 65535;
      $1426 = $1420 + 32768 + (Math_imul(HEAPU16[$1214 >> 1] | 0, $1423) | 0) | 0;
      $1428 = ($1426 >>> 16) + $1426 | 0;
      HEAP8[$sp$25155$i >> 0] = $1428 >>> 24;
      HEAP8[$1400 >> 0] = $1428 >>> 16;
      $1433 = Math_imul($1411, $1376) | 0;
      $1438 = $1433 + 32768 + (Math_imul(HEAPU16[$1215 >> 1] | 0, $1423) | 0) | 0;
      $1440 = ($1438 >>> 16) + $1438 | 0;
      HEAP8[$1404 >> 0] = $1440 >>> 24;
      HEAP8[$1408 >> 0] = $1440 >>> 16;
      $1445 = Math_imul($1419, $1376) | 0;
      $1450 = $1445 + 32768 + (Math_imul(HEAPU16[$1216 >> 1] | 0, $1423) | 0) | 0;
      $1452 = ($1450 >>> 16) + $1450 | 0;
      HEAP8[$1412 >> 0] = $1452 >>> 24;
      HEAP8[$1416 >> 0] = $1452 >>> 16;
     }
     $i$20154$i = $i$20154$i + 1 | 0;
     if (($i$20154$i | 0) == ($465 | 0)) break L126; else $sp$25155$i = $sp$25155$i + 8 | 0;
    }
   }
   if ($1206) break;
   $1207 = $png_ptr + 464 | 0;
   $1208 = ($$lobit$i | 0) == 0;
   $1209 = $png_ptr + 466 | 0;
   $1210 = $png_ptr + 468 | 0;
   $1211 = $png_ptr + 454 | 0;
   $1212 = $png_ptr + 456 | 0;
   $1213 = $png_ptr + 458 | 0;
   $i$19159$i = 0;
   $sp$24160$i = $447;
   while (1) {
    $1224 = HEAPU8[$sp$24160$i + 6 >> 0] << 8 | HEAPU8[$sp$24160$i + 7 >> 0];
    if (($1224 | 0) == 65535) {
     $1227 = $sp$24160$i + 1 | 0;
     $1234 = HEAP16[(HEAP32[$455 + ((HEAPU8[$1227 >> 0] | 0) >>> $461 << 2) >> 2] | 0) + (HEAPU8[$sp$24160$i >> 0] << 1) >> 1] | 0;
     HEAP8[$sp$24160$i >> 0] = ($1234 & 65535) >>> 8;
     HEAP8[$1227 >> 0] = $1234;
     $1238 = $sp$24160$i + 2 | 0;
     $1241 = $sp$24160$i + 3 | 0;
     $1248 = HEAP16[(HEAP32[$455 + ((HEAPU8[$1241 >> 0] | 0) >>> $461 << 2) >> 2] | 0) + (HEAPU8[$1238 >> 0] << 1) >> 1] | 0;
     HEAP8[$1238 >> 0] = ($1248 & 65535) >>> 8;
     HEAP8[$1241 >> 0] = $1248;
     $1252 = $sp$24160$i + 4 | 0;
     $1255 = $sp$24160$i + 5 | 0;
     $1262 = HEAP16[(HEAP32[$455 + ((HEAPU8[$1255 >> 0] | 0) >>> $461 << 2) >> 2] | 0) + (HEAPU8[$1252 >> 0] << 1) >> 1] | 0;
     HEAP8[$1252 >> 0] = ($1262 & 65535) >>> 8;
     HEAP8[$1255 >> 0] = $1262;
    } else if (!$1224) {
     HEAP8[$sp$24160$i >> 0] = (HEAPU16[$1211 >> 1] | 0) >>> 8;
     HEAP8[$sp$24160$i + 1 >> 0] = HEAP16[$1211 >> 1];
     HEAP8[$sp$24160$i + 2 >> 0] = (HEAPU16[$1212 >> 1] | 0) >>> 8;
     HEAP8[$sp$24160$i + 3 >> 0] = HEAP16[$1212 >> 1];
     HEAP8[$sp$24160$i + 4 >> 0] = (HEAPU16[$1213 >> 1] | 0) >>> 8;
     HEAP8[$sp$24160$i + 5 >> 0] = HEAP16[$1213 >> 1];
    } else {
     $1288 = $sp$24160$i + 1 | 0;
     $1297 = Math_imul(HEAPU16[(HEAP32[$459 + ((HEAPU8[$1288 >> 0] | 0) >>> $461 << 2) >> 2] | 0) + (HEAPU8[$sp$24160$i >> 0] << 1) >> 1] | 0, $1224) | 0;
     $1300 = $1224 ^ 65535;
     $1303 = $1297 + 32768 + (Math_imul(HEAPU16[$1207 >> 1] | 0, $1300) | 0) | 0;
     $1305 = ($1303 >>> 16) + $1303 | 0;
     $1306 = $1305 >>> 16;
     $extract1315$i = $1305 >>> 24;
     if ($1208) {
      $1312 = HEAP16[(HEAP32[$457 + (($1306 & 255) >>> $461 << 2) >> 2] | 0) + ($extract1315$i << 1) >> 1] | 0;
      $w41$0$off0$i = $1312 & 255;
      $w41$0$off8$i = ($1312 & 65535) >>> 8 & 255;
     } else {
      $w41$0$off0$i = $1306 & 255;
      $w41$0$off8$i = $extract1315$i & 255;
     }
     HEAP8[$sp$24160$i >> 0] = $w41$0$off8$i;
     HEAP8[$1288 >> 0] = $w41$0$off0$i;
     $1313 = $sp$24160$i + 2 | 0;
     $1316 = $sp$24160$i + 3 | 0;
     $1325 = Math_imul(HEAPU16[(HEAP32[$459 + ((HEAPU8[$1316 >> 0] | 0) >>> $461 << 2) >> 2] | 0) + (HEAPU8[$1313 >> 0] << 1) >> 1] | 0, $1224) | 0;
     $1330 = $1325 + 32768 + (Math_imul(HEAPU16[$1209 >> 1] | 0, $1300) | 0) | 0;
     $1332 = ($1330 >>> 16) + $1330 | 0;
     $1333 = $1332 >>> 16;
     $extract2022$i = $1332 >>> 24;
     if ($1208) {
      $1339 = HEAP16[(HEAP32[$457 + (($1333 & 255) >>> $461 << 2) >> 2] | 0) + ($extract2022$i << 1) >> 1] | 0;
      $w41$1$off0$i = $1339 & 255;
      $w41$1$off8$i = ($1339 & 65535) >>> 8 & 255;
     } else {
      $w41$1$off0$i = $1333 & 255;
      $w41$1$off8$i = $extract2022$i & 255;
     }
     HEAP8[$1313 >> 0] = $w41$1$off8$i;
     HEAP8[$1316 >> 0] = $w41$1$off0$i;
     $1340 = $sp$24160$i + 4 | 0;
     $1343 = $sp$24160$i + 5 | 0;
     $1352 = Math_imul(HEAPU16[(HEAP32[$459 + ((HEAPU8[$1343 >> 0] | 0) >>> $461 << 2) >> 2] | 0) + (HEAPU8[$1340 >> 0] << 1) >> 1] | 0, $1224) | 0;
     $1357 = $1352 + 32768 + (Math_imul(HEAPU16[$1210 >> 1] | 0, $1300) | 0) | 0;
     $1359 = ($1357 >>> 16) + $1357 | 0;
     $1360 = $1359 >>> 16;
     $extract2729$i = $1359 >>> 24;
     if ($1208) {
      $1366 = HEAP16[(HEAP32[$457 + (($1360 & 255) >>> $461 << 2) >> 2] | 0) + ($extract2729$i << 1) >> 1] | 0;
      $w41$2$off0$i = $1366 & 255;
      $w41$2$off8$i = ($1366 & 65535) >>> 8 & 255;
     } else {
      $w41$2$off0$i = $1360 & 255;
      $w41$2$off8$i = $extract2729$i & 255;
     }
     HEAP8[$1340 >> 0] = $w41$2$off8$i;
     HEAP8[$1343 >> 0] = $w41$2$off0$i;
    }
    $i$19159$i = $i$19159$i + 1 | 0;
    if (($i$19159$i | 0) == ($465 | 0)) break; else $sp$24160$i = $sp$24160$i + 8 | 0;
   }
  } else break;
 } while (0);
 $1459 = HEAP32[$7 >> 2] | 0;
 do if (($1459 & 6299648 | 0) == 8192) {
  if (!($1459 & 128)) $1471 = HEAP8[$png_ptr + 435 >> 0] | 0; else {
   if (HEAP16[$png_ptr + 428 >> 1] | 0) break;
   $1468 = HEAP8[$png_ptr + 435 >> 0] | 0;
   if (!($1468 & 4)) $1471 = $1468; else break;
  }
  if ($1471 << 24 >> 24 != 3) {
   $1474 = (HEAP32[$0 >> 2] | 0) + 1 | 0;
   $png_ptr$idx$val = HEAP32[$png_ptr + 484 >> 2] | 0;
   $png_ptr$idx8$val = HEAP32[$png_ptr + 492 >> 2] | 0;
   $png_ptr$idx9$val = HEAP32[$png_ptr + 496 >> 2] | 0;
   $1475 = HEAP32[$row_info >> 2] | 0;
   $1476 = $row_info + 9 | 0;
   $1477 = HEAP8[$1476 >> 0] | 0;
   if (($1477 & 255) > 8 | ($png_ptr$idx8$val | 0) == 0) if ($1477 << 24 >> 24 != 16 | ($png_ptr$idx9$val | 0) == 0) break;
   $1484 = HEAPU8[$row_info + 8 >> 0] | 0;
   if (($1484 | 0) == 2) {
    $1486 = ($1475 | 0) == 0;
    if ($1477 << 24 >> 24 == 8) {
     if ($1486) break; else {
      $i$01$i92 = 0;
      $sp$02$i91 = $1474;
     }
     while (1) {
      HEAP8[$sp$02$i91 >> 0] = HEAP8[$png_ptr$idx8$val + (HEAPU8[$sp$02$i91 >> 0] | 0) >> 0] | 0;
      $1491 = $sp$02$i91 + 1 | 0;
      HEAP8[$1491 >> 0] = HEAP8[$png_ptr$idx8$val + (HEAPU8[$1491 >> 0] | 0) >> 0] | 0;
      $1496 = $sp$02$i91 + 2 | 0;
      HEAP8[$1496 >> 0] = HEAP8[$png_ptr$idx8$val + (HEAPU8[$1496 >> 0] | 0) >> 0] | 0;
      $i$01$i92 = $i$01$i92 + 1 | 0;
      if (($i$01$i92 | 0) == ($1475 | 0)) break; else $sp$02$i91 = $sp$02$i91 + 3 | 0;
     }
    } else {
     if ($1486) break; else {
      $i$15$i = 0;
      $sp$16$i = $1474;
     }
     while (1) {
      $1505 = $sp$16$i + 1 | 0;
      $1512 = HEAP16[(HEAP32[$png_ptr$idx9$val + ((HEAPU8[$1505 >> 0] | 0) >>> $png_ptr$idx$val << 2) >> 2] | 0) + (HEAPU8[$sp$16$i >> 0] << 1) >> 1] | 0;
      HEAP8[$sp$16$i >> 0] = ($1512 & 65535) >>> 8;
      HEAP8[$1505 >> 0] = $1512;
      $1516 = $sp$16$i + 2 | 0;
      $1519 = $sp$16$i + 3 | 0;
      $1526 = HEAP16[(HEAP32[$png_ptr$idx9$val + ((HEAPU8[$1519 >> 0] | 0) >>> $png_ptr$idx$val << 2) >> 2] | 0) + (HEAPU8[$1516 >> 0] << 1) >> 1] | 0;
      HEAP8[$1516 >> 0] = ($1526 & 65535) >>> 8;
      HEAP8[$1519 >> 0] = $1526;
      $1530 = $sp$16$i + 4 | 0;
      $1533 = $sp$16$i + 5 | 0;
      $1540 = HEAP16[(HEAP32[$png_ptr$idx9$val + ((HEAPU8[$1533 >> 0] | 0) >>> $png_ptr$idx$val << 2) >> 2] | 0) + (HEAPU8[$1530 >> 0] << 1) >> 1] | 0;
      HEAP8[$1530 >> 0] = ($1540 & 65535) >>> 8;
      HEAP8[$1533 >> 0] = $1540;
      $i$15$i = $i$15$i + 1 | 0;
      if (($i$15$i | 0) == ($1475 | 0)) break; else $sp$16$i = $sp$16$i + 6 | 0;
     }
    }
   } else if (($1484 | 0) == 6) {
    $1547 = ($1475 | 0) == 0;
    if ($1477 << 24 >> 24 == 8) {
     if ($1547) break; else {
      $i$210$i = 0;
      $sp$211$i = $1474;
     }
     while (1) {
      HEAP8[$sp$211$i >> 0] = HEAP8[$png_ptr$idx8$val + (HEAPU8[$sp$211$i >> 0] | 0) >> 0] | 0;
      $1552 = $sp$211$i + 1 | 0;
      HEAP8[$1552 >> 0] = HEAP8[$png_ptr$idx8$val + (HEAPU8[$1552 >> 0] | 0) >> 0] | 0;
      $1557 = $sp$211$i + 2 | 0;
      HEAP8[$1557 >> 0] = HEAP8[$png_ptr$idx8$val + (HEAPU8[$1557 >> 0] | 0) >> 0] | 0;
      $i$210$i = $i$210$i + 1 | 0;
      if (($i$210$i | 0) == ($1475 | 0)) break; else $sp$211$i = $sp$211$i + 4 | 0;
     }
    } else {
     if ($1547) break; else {
      $i$315$i = 0;
      $sp$316$i = $1474;
     }
     while (1) {
      $1566 = $sp$316$i + 1 | 0;
      $1573 = HEAP16[(HEAP32[$png_ptr$idx9$val + ((HEAPU8[$1566 >> 0] | 0) >>> $png_ptr$idx$val << 2) >> 2] | 0) + (HEAPU8[$sp$316$i >> 0] << 1) >> 1] | 0;
      HEAP8[$sp$316$i >> 0] = ($1573 & 65535) >>> 8;
      HEAP8[$1566 >> 0] = $1573;
      $1577 = $sp$316$i + 2 | 0;
      $1580 = $sp$316$i + 3 | 0;
      $1587 = HEAP16[(HEAP32[$png_ptr$idx9$val + ((HEAPU8[$1580 >> 0] | 0) >>> $png_ptr$idx$val << 2) >> 2] | 0) + (HEAPU8[$1577 >> 0] << 1) >> 1] | 0;
      HEAP8[$1577 >> 0] = ($1587 & 65535) >>> 8;
      HEAP8[$1580 >> 0] = $1587;
      $1591 = $sp$316$i + 4 | 0;
      $1594 = $sp$316$i + 5 | 0;
      $1601 = HEAP16[(HEAP32[$png_ptr$idx9$val + ((HEAPU8[$1594 >> 0] | 0) >>> $png_ptr$idx$val << 2) >> 2] | 0) + (HEAPU8[$1591 >> 0] << 1) >> 1] | 0;
      HEAP8[$1591 >> 0] = ($1601 & 65535) >>> 8;
      HEAP8[$1594 >> 0] = $1601;
      $i$315$i = $i$315$i + 1 | 0;
      if (($i$315$i | 0) == ($1475 | 0)) break; else $sp$316$i = $sp$316$i + 8 | 0;
     }
    }
   } else if (!$1484) {
    if ($1477 << 24 >> 24 == 2) {
     if (!$1475) break; else {
      $i$644$i = 0;
      $sp$645$i = $1474;
     }
     while (1) {
      $1633 = HEAPU8[$sp$645$i >> 0] | 0;
      $1634 = $1633 & 192;
      $1635 = $1633 & 48;
      $1636 = $1633 & 12;
      $1637 = $1633 & 3;
      HEAP8[$sp$645$i >> 0] = (HEAPU8[$png_ptr$idx8$val + ($1635 << 2 | $1635 | $1635 >>> 2 | $1635 >>> 4) >> 0] | 0) >>> 2 & 48 | HEAPU8[$png_ptr$idx8$val + ($1633 >>> 6 | $1634 | $1634 >>> 2 | $1634 >>> 4) >> 0] & 192 | (HEAPU8[$png_ptr$idx8$val + ($1636 << 2 | $1636 | $1636 << 4 | $1636 >>> 2) >> 0] | 0) >>> 4 & 12 | (HEAPU8[$png_ptr$idx8$val + ($1637 << 4 | $1637 | $1637 << 6 | $1637 << 2) >> 0] | 0) >>> 6;
      $i$644$i = $i$644$i + 4 | 0;
      if ($i$644$i >>> 0 >= $1475 >>> 0) break; else $sp$645$i = $sp$645$i + 1 | 0;
     }
     $2520 = HEAP8[$1476 >> 0] | 0;
    } else $2520 = $1477;
    if ($2520 << 24 >> 24 == 8) {
     if (!$1475) break; else {
      $i$835$i = 0;
      $sp$836$i = $1474;
     }
     while (1) {
      HEAP8[$sp$836$i >> 0] = HEAP8[$png_ptr$idx8$val + (HEAPU8[$sp$836$i >> 0] | 0) >> 0] | 0;
      $i$835$i = $i$835$i + 1 | 0;
      if (($i$835$i | 0) == ($1475 | 0)) break; else $sp$836$i = $sp$836$i + 1 | 0;
     }
    } else if ($2520 << 24 >> 24 == 4) {
     if (!$1475) break; else {
      $i$730$i = 0;
      $sp$731$i = $1474;
     }
     while (1) {
      $1691 = HEAPU8[$sp$731$i >> 0] | 0;
      $1693 = $1691 & 15;
      HEAP8[$sp$731$i >> 0] = (HEAPU8[$png_ptr$idx8$val + ($1693 << 4 | $1693) >> 0] | 0) >>> 4 | HEAPU8[$png_ptr$idx8$val + ($1691 & 240 | $1691 >>> 4) >> 0] & 240;
      $i$730$i = $i$730$i + 2 | 0;
      if ($i$730$i >>> 0 >= $1475 >>> 0) break; else $sp$731$i = $sp$731$i + 1 | 0;
     }
    } else if ($2520 << 24 >> 24 == 16) {
     if (!$1475) break; else {
      $i$940$i = 0;
      $sp$941$i = $1474;
     }
     while (1) {
      $1719 = $sp$941$i + 1 | 0;
      $1726 = HEAP16[(HEAP32[$png_ptr$idx9$val + ((HEAPU8[$1719 >> 0] | 0) >>> $png_ptr$idx$val << 2) >> 2] | 0) + (HEAPU8[$sp$941$i >> 0] << 1) >> 1] | 0;
      HEAP8[$sp$941$i >> 0] = ($1726 & 65535) >>> 8;
      HEAP8[$1719 >> 0] = $1726;
      $i$940$i = $i$940$i + 1 | 0;
      if (($i$940$i | 0) == ($1475 | 0)) break; else $sp$941$i = $sp$941$i + 2 | 0;
     }
    } else break;
   } else if (($1484 | 0) == 4) {
    $1608 = ($1475 | 0) == 0;
    if ($1477 << 24 >> 24 == 8) {
     if ($1608) break; else {
      $i$420$i = 0;
      $sp$421$i = $1474;
     }
     while (1) {
      HEAP8[$sp$421$i >> 0] = HEAP8[$png_ptr$idx8$val + (HEAPU8[$sp$421$i >> 0] | 0) >> 0] | 0;
      $i$420$i = $i$420$i + 1 | 0;
      if (($i$420$i | 0) == ($1475 | 0)) break; else $sp$421$i = $sp$421$i + 2 | 0;
     }
    } else {
     if ($1608) break; else {
      $i$525$i = 0;
      $sp$526$i = $1474;
     }
     while (1) {
      $1617 = $sp$526$i + 1 | 0;
      $1624 = HEAP16[(HEAP32[$png_ptr$idx9$val + ((HEAPU8[$1617 >> 0] | 0) >>> $png_ptr$idx$val << 2) >> 2] | 0) + (HEAPU8[$sp$526$i >> 0] << 1) >> 1] | 0;
      HEAP8[$sp$526$i >> 0] = ($1624 & 65535) >>> 8;
      HEAP8[$1617 >> 0] = $1624;
      $i$525$i = $i$525$i + 1 | 0;
      if (($i$525$i | 0) == ($1475 | 0)) break; else $sp$526$i = $sp$526$i + 4 | 0;
     }
    }
   } else break;
  }
 } while (0);
 $1732 = HEAP32[$7 >> 2] | 0;
 if (($1732 & 262272 | 0) == 262272) {
  $1736 = HEAP8[$row_info + 8 >> 0] | 0;
  if ($1736 << 24 >> 24 == 4 | $1736 << 24 >> 24 == 6) {
   _png_do_strip_channel($row_info, (HEAP32[$0 >> 2] | 0) + 1 | 0, 0);
   $1740 = HEAP32[$7 >> 2] | 0;
  } else $1740 = $1732;
 } else $1740 = $1732;
 L423 : do if ($1740 & 8388608) {
  $1743 = HEAP8[$row_info + 8 >> 0] | 0;
  if ($1743 & 4) {
   $1746 = HEAP32[$0 >> 2] | 0;
   $1747 = HEAP32[$row_info >> 2] | 0;
   $1748 = $1743 & 255;
   do if ($1748 & 4) {
    $1752 = HEAP8[$row_info + 9 >> 0] | 0;
    if ($1752 << 24 >> 24 == 8) {
     $1754 = HEAP32[$png_ptr + 500 >> 2] | 0;
     if (!$1754) break;
     $1756 = $1748 & 2;
     $1757 = $1756 + 2 | 0;
     if (!$1747) break L423;
     $$02$i = $1746 + (($1756 | 1) + 1) | 0;
     $row_width$01$i = $1747;
     while (1) {
      HEAP8[$$02$i >> 0] = HEAP8[$1754 + (HEAPU8[$$02$i >> 0] | 0) >> 0] | 0;
      $row_width$01$i = $row_width$01$i + -1 | 0;
      if (!$row_width$01$i) break L423; else $$02$i = $$02$i + $1757 | 0;
     }
    } else if ($1752 << 24 >> 24 == 16) {
     $1769 = HEAP32[$png_ptr + 508 >> 2] | 0;
     $1771 = HEAP32[$png_ptr + 484 >> 2] | 0;
     if (!$1769) break;
     $1774 = $1748 << 1 & 4;
     $1775 = $1774 + 4 | 0;
     if (!$1747) break L423;
     $$15$i = $1746 + ($1774 | 3) | 0;
     $row_width$14$i = $1747;
     while (1) {
      $1780 = $$15$i + 1 | 0;
      $1787 = HEAP16[(HEAP32[$1769 + ((HEAPU8[$1780 >> 0] | 0) >>> $1771 << 2) >> 2] | 0) + (HEAPU8[$$15$i >> 0] << 1) >> 1] | 0;
      HEAP8[$$15$i >> 0] = ($1787 & 65535) >>> 8;
      HEAP8[$1780 >> 0] = $1787;
      $row_width$14$i = $row_width$14$i + -1 | 0;
      if (!$row_width$14$i) break L423; else $$15$i = $$15$i + $1775 | 0;
     }
    } else break;
   } while (0);
   _png_warning($png_ptr, 75256);
  }
 } while (0);
 $1794 = HEAP32[$7 >> 2] | 0;
 if (!($1794 & 67108864)) $1829 = $1794; else {
  $1797 = HEAP32[$0 >> 2] | 0;
  $1798 = $1797 + 1 | 0;
  $1799 = $row_info + 9 | 0;
  if ((HEAP8[$1799 >> 0] | 0) == 16) {
   $1802 = $row_info + 4 | 0;
   $1803 = HEAP32[$1802 >> 2] | 0;
   $1804 = $1797 + ($1803 + 1) | 0;
   if (($1803 | 0) > 0) {
    $dp$01$i82 = $1798;
    $sp$02$i81 = $1798;
    while (1) {
     $1808 = HEAPU8[$sp$02$i81 >> 0] | 0;
     HEAP8[$dp$01$i82 >> 0] = (((((HEAPU8[$sp$02$i81 + 1 >> 0] | 0) - $1808 | 0) * 65535 | 0) + 8388480 | 0) >>> 24) + $1808;
     $sp$02$i81 = $sp$02$i81 + 2 | 0;
     if ($sp$02$i81 >>> 0 >= $1804 >>> 0) break; else $dp$01$i82 = $dp$01$i82 + 1 | 0;
    }
   }
   HEAP8[$1799 >> 0] = 8;
   $1822 = HEAPU8[$row_info + 10 >> 0] | 0;
   HEAP8[$row_info + 11 >> 0] = $1822 << 3;
   HEAP32[$1802 >> 2] = Math_imul($1822, HEAP32[$row_info >> 2] | 0) | 0;
   $1829 = HEAP32[$7 >> 2] | 0;
  } else $1829 = $1794;
 }
 if (!($1829 & 1024)) $1853 = $1829; else {
  $1831 = HEAP32[$0 >> 2] | 0;
  $1832 = $1831 + 1 | 0;
  $1833 = $row_info + 9 | 0;
  if ((HEAP8[$1833 >> 0] | 0) == 16) {
   $1836 = $row_info + 4 | 0;
   $1837 = HEAP32[$1836 >> 2] | 0;
   $1838 = $1831 + ($1837 + 1) | 0;
   if (($1837 | 0) > 0) {
    $dp$01$i = $1832;
    $sp$02$i = $1832;
    while (1) {
     HEAP8[$dp$01$i >> 0] = HEAP8[$sp$02$i >> 0] | 0;
     $sp$02$i = $sp$02$i + 2 | 0;
     if ($sp$02$i >>> 0 >= $1838 >>> 0) break; else $dp$01$i = $dp$01$i + 1 | 0;
    }
   }
   HEAP8[$1833 >> 0] = 8;
   $1846 = HEAPU8[$row_info + 10 >> 0] | 0;
   HEAP8[$row_info + 11 >> 0] = $1846 << 3;
   HEAP32[$1836 >> 2] = Math_imul($1846, HEAP32[$row_info >> 2] | 0) | 0;
   $1853 = HEAP32[$7 >> 2] | 0;
  } else $1853 = $1829;
 }
 do if (!($1853 & 64)) $1949 = $1853; else {
  $1856 = (HEAP32[$0 >> 2] | 0) + 1 | 0;
  $1858 = HEAP32[$png_ptr + 612 >> 2] | 0;
  $1860 = HEAP32[$png_ptr + 616 >> 2] | 0;
  $1861 = HEAP32[$row_info >> 2] | 0;
  $1862 = $row_info + 9 | 0;
  L459 : do if ((HEAP8[$1862 >> 0] | 0) == 8) {
   $1865 = $row_info + 8 | 0;
   $1866 = HEAP8[$1865 >> 0] | 0;
   $1868 = ($1858 | 0) == 0;
   if (!($1866 << 24 >> 24 != 2 | $1868)) {
    if (!$1861) $1892 = 8; else {
     $dp$012$i = $1856;
     $i$011$i = 0;
     $sp$013$i70 = $1856;
     while (1) {
      HEAP8[$dp$012$i >> 0] = HEAP8[$1858 + ((HEAPU8[$sp$013$i70 + 1 >> 0] | 0) >>> 3 << 5 | (HEAPU8[$sp$013$i70 >> 0] | 0) >>> 3 << 10 | (HEAPU8[$sp$013$i70 + 2 >> 0] | 0) >>> 3) >> 0] | 0;
      $i$011$i = $i$011$i + 1 | 0;
      if (($i$011$i | 0) == ($1861 | 0)) break; else {
       $dp$012$i = $dp$012$i + 1 | 0;
       $sp$013$i70 = $sp$013$i70 + 3 | 0;
      }
     }
     $1892 = HEAP8[$1862 >> 0] | 0;
    }
    HEAP8[$1865 >> 0] = 3;
    HEAP8[$row_info + 10 >> 0] = 1;
    HEAP8[$row_info + 11 >> 0] = $1892;
    $1893 = $1892 & 255;
    if (($1892 & 255) > 7) $1901 = Math_imul($1893 >>> 3, $1861) | 0; else $1901 = ((Math_imul($1893, $1861) | 0) + 7 | 0) >>> 3;
    HEAP32[$row_info + 4 >> 2] = $1901;
    break;
   }
   if ($1866 << 24 >> 24 != 6 | $1868) {
    if ($1866 << 24 >> 24 != 3 | ($1860 | 0) == 0 | ($1861 | 0) == 0) break; else {
     $i$23$i = 0;
     $sp$24$i = $1856;
    }
    while (1) {
     HEAP8[$sp$24$i >> 0] = HEAP8[$1860 + (HEAPU8[$sp$24$i >> 0] | 0) >> 0] | 0;
     $i$23$i = $i$23$i + 1 | 0;
     if (($i$23$i | 0) == ($1861 | 0)) break L459; else $sp$24$i = $sp$24$i + 1 | 0;
    }
   }
   if (!$1861) $1926 = 8; else {
    $dp$17$i = $1856;
    $i$16$i = 0;
    $sp$18$i = $1856;
    while (1) {
     HEAP8[$dp$17$i >> 0] = HEAP8[$1858 + ((HEAPU8[$sp$18$i + 1 >> 0] | 0) >>> 3 << 5 | (HEAPU8[$sp$18$i >> 0] | 0) >>> 3 << 10 | (HEAPU8[$sp$18$i + 2 >> 0] | 0) >>> 3) >> 0] | 0;
     $i$16$i = $i$16$i + 1 | 0;
     if (($i$16$i | 0) == ($1861 | 0)) break; else {
      $dp$17$i = $dp$17$i + 1 | 0;
      $sp$18$i = $sp$18$i + 4 | 0;
     }
    }
    $1926 = HEAP8[$1862 >> 0] | 0;
   }
   HEAP8[$1865 >> 0] = 3;
   HEAP8[$row_info + 10 >> 0] = 1;
   HEAP8[$row_info + 11 >> 0] = $1926;
   $1927 = $1926 & 255;
   if (($1926 & 255) > 7) $1935 = Math_imul($1927 >>> 3, $1861) | 0; else $1935 = ((Math_imul($1927, $1861) | 0) + 7 | 0) >>> 3;
   HEAP32[$row_info + 4 >> 2] = $1935;
  } while (0);
  if (!(HEAP32[$row_info + 4 >> 2] | 0)) _png_error($png_ptr, 75216); else {
   $1949 = HEAP32[$7 >> 2] | 0;
   break;
  }
 } while (0);
 if (!($1949 & 512)) $1977 = $1949; else {
  $1951 = HEAP32[$0 >> 2] | 0;
  $1952 = $row_info + 9 | 0;
  if ((HEAP8[$1952 >> 0] | 0) == 8) if ((HEAP8[$row_info + 8 >> 0] | 0) == 3) $1977 = $1949; else {
   $1958 = $row_info + 4 | 0;
   $1959 = HEAP32[$1958 >> 2] | 0;
   $$sum$i64 = $1959 << 1;
   if (($$sum$i64 | 0) > ($1959 | 0)) {
    $dp$02$i = $1951 + ($$sum$i64 | 1) | 0;
    $sp$01$i66 = $1951 + ($1959 + 1) | 0;
    do {
     $sp$01$i66 = $sp$01$i66 + -1 | 0;
     $1964 = HEAP8[$sp$01$i66 >> 0] | 0;
     HEAP8[$dp$02$i + -1 >> 0] = $1964;
     $dp$02$i = $dp$02$i + -2 | 0;
     HEAP8[$dp$02$i >> 0] = $1964;
    } while ($dp$02$i >>> 0 > $sp$01$i66 >>> 0);
    $1969 = HEAP32[$1958 >> 2] | 0;
   } else $1969 = $1959;
   HEAP32[$1958 >> 2] = $1969 << 1;
   HEAP8[$1952 >> 0] = 16;
   HEAP8[$row_info + 11 >> 0] = HEAPU8[$row_info + 10 >> 0] << 4;
   $1977 = HEAP32[$7 >> 2] | 0;
  } else $1977 = $1949;
 }
 if (!($1977 & 16384)) $1986 = $1977; else if (!(HEAP32[$png_ptr + 208 >> 2] & 2048)) $1986 = $1977; else {
  _png_do_gray_to_rgb($row_info, (HEAP32[$0 >> 2] | 0) + 1 | 0);
  $1986 = HEAP32[$7 >> 2] | 0;
 }
 if (!($1986 & 32)) $1991 = $1986; else {
  _png_do_invert($row_info, (HEAP32[$0 >> 2] | 0) + 1 | 0);
  $1991 = HEAP32[$7 >> 2] | 0;
 }
 do if ($1991 & 524288) {
  $1993 = HEAP32[$0 >> 2] | 0;
  $1994 = HEAP32[$row_info >> 2] | 0;
  $1996 = HEAP8[$row_info + 8 >> 0] | 0;
  if ($1996 << 24 >> 24 == 6) {
   $2002 = $1993 + ((HEAP32[$row_info + 4 >> 2] | 0) + 1) | 0;
   $2003 = ($1994 | 0) == 0;
   if ((HEAP8[$row_info + 9 >> 0] | 0) == 8) {
    if ($2003) break; else {
     $i$02$i = 0;
     $sp$01$i = $2002;
    }
    while (1) {
     $2004 = $sp$01$i + -1 | 0;
     HEAP8[$2004 >> 0] = HEAPU8[$2004 >> 0] ^ 255;
     $i$02$i = $i$02$i + 1 | 0;
     if (($i$02$i | 0) == ($1994 | 0)) break; else $sp$01$i = $sp$01$i + -4 | 0;
    }
   } else {
    if ($2003) break; else {
     $i3$06$i = 0;
     $sp1$05$i = $2002;
    }
    while (1) {
     $2011 = $sp1$05$i + -1 | 0;
     HEAP8[$2011 >> 0] = HEAPU8[$2011 >> 0] ^ 255;
     $2016 = $sp1$05$i + -2 | 0;
     HEAP8[$2016 >> 0] = HEAPU8[$2016 >> 0] ^ 255;
     $i3$06$i = $i3$06$i + 1 | 0;
     if (($i3$06$i | 0) == ($1994 | 0)) break; else $sp1$05$i = $sp1$05$i + -8 | 0;
    }
   }
  } else if ($1996 << 24 >> 24 == 4) {
   $2028 = $1993 + ((HEAP32[$row_info + 4 >> 2] | 0) + 1) | 0;
   $2029 = ($1994 | 0) == 0;
   if ((HEAP8[$row_info + 9 >> 0] | 0) == 8) {
    if ($2029) break; else {
     $dp5$011$i = $2028;
     $i6$012$i = 0;
    }
    while (1) {
     $2030 = $dp5$011$i + -1 | 0;
     HEAP8[$2030 >> 0] = HEAPU8[$2030 >> 0] ^ 255;
     $i6$012$i = $i6$012$i + 1 | 0;
     if (($i6$012$i | 0) == ($1994 | 0)) break; else $dp5$011$i = $dp5$011$i + -2 | 0;
    }
   } else {
    if ($2029) break; else {
     $i9$017$i = 0;
     $sp7$016$i = $2028;
    }
    while (1) {
     $2037 = $sp7$016$i + -1 | 0;
     HEAP8[$2037 >> 0] = HEAPU8[$2037 >> 0] ^ 255;
     $2042 = $sp7$016$i + -2 | 0;
     HEAP8[$2042 >> 0] = HEAPU8[$2042 >> 0] ^ 255;
     $i9$017$i = $i9$017$i + 1 | 0;
     if (($i9$017$i | 0) == ($1994 | 0)) break; else $sp7$016$i = $sp7$016$i + -4 | 0;
    }
   }
  } else break;
 } while (0);
 L530 : do if (HEAP32[$7 >> 2] & 8) {
  $2052 = HEAP32[$0 >> 2] | 0;
  $2053 = $2052 + 1 | 0;
  $2055 = HEAP8[$row_info + 8 >> 0] | 0;
  $2056 = $2055 & 255;
  if ($2055 << 24 >> 24 != 3) {
   $2060 = HEAPU8[$row_info + 9 >> 0] | 0;
   if (!($2056 & 2)) {
    HEAP32[$shift$i >> 2] = $2060 - (HEAPU8[$png_ptr + 524 >> 0] | 0);
    $channels$0$i = 1;
   } else {
    HEAP32[$shift$i >> 2] = $2060 - (HEAPU8[$png_ptr + 521 >> 0] | 0);
    HEAP32[$shift$i + 4 >> 2] = $2060 - (HEAPU8[$png_ptr + 522 >> 0] | 0);
    HEAP32[$shift$i + 8 >> 2] = $2060 - (HEAPU8[$png_ptr + 523 >> 0] | 0);
    $channels$0$i = 3;
   }
   if (!($2056 & 4)) $channels$1$i = $channels$0$i; else {
    HEAP32[$shift$i + ($channels$0$i << 2) >> 2] = $2060 - (HEAPU8[$png_ptr + 525 >> 0] | 0);
    $channels$1$i = $channels$0$i + 1 | 0;
   }
   $c$015$i = 0;
   $have_shift$014$i = 0;
   while (1) {
    $2089 = $shift$i + ($c$015$i << 2) | 0;
    $2090 = HEAP32[$2089 >> 2] | 0;
    if (($2090 | 0) > 0 & ($2090 | 0) < ($2060 | 0)) $have_shift$1$i = 1; else {
     HEAP32[$2089 >> 2] = 0;
     $have_shift$1$i = $have_shift$014$i;
    }
    $c$015$i = $c$015$i + 1 | 0;
    if (($c$015$i | 0) >= ($channels$1$i | 0)) break; else $have_shift$014$i = $have_shift$1$i;
   }
   if (!$have_shift$1$i) break;
   if (($2060 | 0) == 2) {
    $2097 = HEAP32[$row_info + 4 >> 2] | 0;
    $2098 = $2052 + ($2097 + 1) | 0;
    if (($2097 | 0) > 0) $bp$02$i = $2053; else break;
    do {
     HEAP8[$bp$02$i >> 0] = (HEAPU8[$bp$02$i >> 0] | 0) >>> 1 & 85;
     $bp$02$i = $bp$02$i + 1 | 0;
    } while ($bp$02$i >>> 0 < $2098 >>> 0);
   } else if (($2060 | 0) == 8) {
    $2123 = HEAP32[$row_info + 4 >> 2] | 0;
    $$sum133 = $2123 + 1 | 0;
    $2124 = $2052 + $$sum133 | 0;
    if (($2123 | 0) <= 0) break;
    HEAP8[$2053 >> 0] = (HEAPU8[$2053 >> 0] | 0) >>> (HEAP32[$shift$i >> 2] | 0);
    if (($$sum133 | 0) <= 2) break;
    $2133 = 1;
    $2136 = $2052 + 2 | 0;
    while (1) {
     $$$i38 = ($2133 | 0) >= ($channels$1$i | 0) ? 0 : $2133;
     HEAP8[$2136 >> 0] = (HEAPU8[$2136 >> 0] | 0) >>> (HEAP32[$shift$i + ($$$i38 << 2) >> 2] | 0);
     $2136 = $2136 + 1 | 0;
     if ($2136 >>> 0 >= $2124 >>> 0) break; else $2133 = $$$i38 + 1 | 0;
    }
   } else if (($2060 | 0) == 4) {
    $2108 = HEAP32[$row_info + 4 >> 2] | 0;
    $2109 = $2052 + ($2108 + 1) | 0;
    $2110 = HEAP32[$shift$i >> 2] | 0;
    $2111 = 15 >>> $2110;
    $2113 = $2111 << 4 | $2111;
    if (($2108 | 0) > 0) $bp1$04$i = $2053; else break;
    do {
     HEAP8[$bp1$04$i >> 0] = (HEAPU8[$bp1$04$i >> 0] | 0) >>> $2110 & $2113;
     $bp1$04$i = $bp1$04$i + 1 | 0;
    } while ($bp1$04$i >>> 0 < $2109 >>> 0);
   } else if (($2060 | 0) == 16) {
    $2146 = HEAP32[$row_info + 4 >> 2] | 0;
    $2147 = $2052 + ($2146 + 1) | 0;
    if (($2146 | 0) > 0) {
     $bp7$011$i = $2053;
     $channel9$012$i = 0;
    } else break;
    while (1) {
     $2152 = $bp7$011$i + 1 | 0;
     $2158 = (HEAPU8[$bp7$011$i >> 0] << 8 | HEAPU8[$2152 >> 0]) >>> (HEAP32[$shift$i + ($channel9$012$i << 2) >> 2] | 0);
     $2159 = $channel9$012$i + 1 | 0;
     HEAP8[$bp7$011$i >> 0] = $2158 >>> 8;
     $2163 = $bp7$011$i + 2 | 0;
     HEAP8[$2152 >> 0] = $2158;
     if ($2163 >>> 0 >= $2147 >>> 0) break L530;
     $bp7$011$i = $2163;
     $channel9$012$i = ($2159 | 0) >= ($channels$1$i | 0) ? 0 : $2159;
    }
   } else break;
  }
 } while (0);
 do if (HEAP32[$7 >> 2] & 4) {
  $2169 = HEAP32[$0 >> 2] | 0;
  $2170 = $row_info + 9 | 0;
  $2171 = HEAP8[$2170 >> 0] | 0;
  if (($2171 & 255) >= 8) break;
  $2173 = $2171 & 255;
  $2174 = HEAP32[$row_info >> 2] | 0;
  do if (($2173 | 0) == 2) {
   if (!$2174) break;
   $dp2$010$i32 = $2169 + $2174 | 0;
   $i$18$i34 = 0;
   $shift3$011$i = ($2174 << 1) + 6 & 6 ^ 6;
   $sp1$09$i33 = $2169 + ((($2174 + -1 | 0) >>> 2) + 1) | 0;
   while (1) {
    HEAP8[$dp2$010$i32 >> 0] = (HEAPU8[$sp1$09$i33 >> 0] | 0) >>> $shift3$011$i & 3;
    $2207 = ($shift3$011$i | 0) == 6;
    $i$18$i34 = $i$18$i34 + 1 | 0;
    if (($i$18$i34 | 0) == ($2174 | 0)) break; else {
     $dp2$010$i32 = $dp2$010$i32 + -1 | 0;
     $shift3$011$i = $2207 ? 0 : $shift3$011$i + 2 | 0;
     $sp1$09$i33 = $2207 ? $sp1$09$i33 + -1 | 0 : $sp1$09$i33;
    }
   }
  } else if (($2173 | 0) == 1) {
   if (!$2174) break;
   $dp$05$i = $2169 + $2174 | 0;
   $i$03$i = 0;
   $shift$06$i = $2174 + 7 & 7 ^ 7;
   $sp$04$i = $2169 + ((($2174 + -1 | 0) >>> 3) + 1) | 0;
   while (1) {
    HEAP8[$dp$05$i >> 0] = (HEAPU8[$sp$04$i >> 0] | 0) >>> $shift$06$i & 1;
    $2188 = ($shift$06$i | 0) == 7;
    $i$03$i = $i$03$i + 1 | 0;
    if (($i$03$i | 0) == ($2174 | 0)) break; else {
     $dp$05$i = $dp$05$i + -1 | 0;
     $shift$06$i = $2188 ? 0 : $shift$06$i + 1 | 0;
     $sp$04$i = $2188 ? $sp$04$i + -1 | 0 : $sp$04$i;
    }
   }
  } else if (($2173 | 0) == 4) {
   if (!$2174) break;
   $dp5$016$i = $2169 + $2174 | 0;
   $i$214$i = 0;
   $shift6$017$i = $2174 << 2 & 4;
   $sp4$015$i = $2169 + ((($2174 + -1 | 0) >>> 1) + 1) | 0;
   while (1) {
    HEAP8[$dp5$016$i >> 0] = (HEAPU8[$sp4$015$i >> 0] | 0) >>> $shift6$017$i & 15;
    $2224 = ($shift6$017$i | 0) == 4;
    $i$214$i = $i$214$i + 1 | 0;
    if (($i$214$i | 0) == ($2174 | 0)) break; else {
     $dp5$016$i = $dp5$016$i + -1 | 0;
     $shift6$017$i = $2224 ? 0 : 4;
     $sp4$015$i = $2224 ? $sp4$015$i + -1 | 0 : $sp4$015$i;
    }
   }
  } while (0);
  HEAP8[$2170 >> 0] = 8;
  $2230 = HEAPU8[$row_info + 10 >> 0] | 0;
  HEAP8[$row_info + 11 >> 0] = $2230 << 3;
  HEAP32[$row_info + 4 >> 2] = Math_imul($2230, $2174) | 0;
 } while (0);
 $2236 = $row_info + 8 | 0;
 do if ((HEAP8[$2236 >> 0] | 0) == 3) {
  if ((HEAP32[$png_ptr + 424 >> 2] | 0) <= -1) break;
  _png_do_check_palette_indexes($png_ptr, $row_info);
 } while (0);
 $2242 = HEAP32[$7 >> 2] | 0;
 if (!($2242 & 1)) $2248 = $2242; else {
  _png_do_bgr($row_info, (HEAP32[$0 >> 2] | 0) + 1 | 0);
  $2248 = HEAP32[$7 >> 2] | 0;
 }
 if (!($2248 & 65536)) $2253 = $2248; else {
  _png_do_packswap($row_info, (HEAP32[$0 >> 2] | 0) + 1 | 0);
  $2253 = HEAP32[$7 >> 2] | 0;
 }
 do if ($2253 & 32768) {
  $2255 = HEAP32[$0 >> 2] | 0;
  $2257 = HEAP16[$png_ptr + 444 >> 1] | 0;
  $2258 = HEAP32[$3 >> 2] | 0;
  $2259 = HEAP32[$row_info >> 2] | 0;
  $2261 = ($2257 & 65535) >>> 8 & 255;
  $2262 = $2257 & 255;
  $2263 = HEAP8[$2236 >> 0] | 0;
  if (!($2263 << 24 >> 24)) {
   $2265 = HEAP8[$row_info + 9 >> 0] | 0;
   if ($2265 << 24 >> 24 == 8) {
    $2268 = $2255 + ($2259 + 1) | 0;
    $$sum6$i = $2259 << 1;
    $2269 = $2255 + ($$sum6$i | 1) | 0;
    if (!($2258 & 128)) {
     if ($2259) {
      $dp2$010$i = $2269;
      $i$18$i = 0;
      $sp1$09$i = $2268;
      do {
       $sp1$09$i = $sp1$09$i + -1 | 0;
       HEAP8[$dp2$010$i + -1 >> 0] = HEAP8[$sp1$09$i >> 0] | 0;
       $dp2$010$i = $dp2$010$i + -2 | 0;
       HEAP8[$dp2$010$i >> 0] = $2262;
       $i$18$i = $i$18$i + 1 | 0;
      } while (($i$18$i | 0) != ($2259 | 0));
     }
     HEAP8[$row_info + 10 >> 0] = 2;
     HEAP8[$row_info + 11 >> 0] = 16;
     HEAP32[$row_info + 4 >> 2] = $$sum6$i;
     break;
    } else {
     HEAP8[$2255 + $$sum6$i >> 0] = $2262;
     if ($2259 >>> 0 > 1) {
      $dp$014$i = $2269;
      $i$012$i = 1;
      $sp$013$i = $2268;
      do {
       $sp$013$i = $sp$013$i + -1 | 0;
       $dp$014$i$looptemp = $dp$014$i;
       $dp$014$i = $dp$014$i + -2 | 0;
       HEAP8[$dp$014$i >> 0] = HEAP8[$sp$013$i >> 0] | 0;
       $i$012$i = $i$012$i + 1 | 0;
       HEAP8[$dp$014$i$looptemp + -3 >> 0] = $2262;
      } while (($i$012$i | 0) != ($2259 | 0));
     }
     HEAP8[$row_info + 10 >> 0] = 2;
     HEAP8[$row_info + 11 >> 0] = 16;
     HEAP32[$row_info + 4 >> 2] = $$sum6$i;
     break;
    }
   } else if ($2265 << 24 >> 24 == 16) {
    $2292 = $2255 + ($2259 << 1 | 1) | 0;
    $$sum4$i = $2259 << 2;
    $2293 = $2255 + ($$sum4$i | 1) | 0;
    if (!($2258 & 128)) {
     if ($2259) {
      $dp6$020$i = $2293;
      $i$318$i = 0;
      $sp5$019$i = $2292;
      do {
       HEAP8[$dp6$020$i + -1 >> 0] = HEAP8[$sp5$019$i + -1 >> 0] | 0;
       $sp5$019$i = $sp5$019$i + -2 | 0;
       HEAP8[$dp6$020$i + -2 >> 0] = HEAP8[$sp5$019$i >> 0] | 0;
       HEAP8[$dp6$020$i + -3 >> 0] = $2262;
       $dp6$020$i = $dp6$020$i + -4 | 0;
       HEAP8[$dp6$020$i >> 0] = $2261;
       $i$318$i = $i$318$i + 1 | 0;
      } while (($i$318$i | 0) != ($2259 | 0));
     }
     HEAP8[$row_info + 10 >> 0] = 2;
     HEAP8[$row_info + 11 >> 0] = 32;
     HEAP32[$row_info + 4 >> 2] = $$sum4$i;
     break;
    } else {
     HEAP8[$2255 + $$sum4$i >> 0] = $2262;
     HEAP8[$2255 + ($$sum4$i + -1) >> 0] = $2261;
     if ($2259 >>> 0 > 1) {
      $dp4$026$i = $2293;
      $i$224$i = 1;
      $sp3$025$i = $2292;
      do {
       HEAP8[$dp4$026$i + -3 >> 0] = HEAP8[$sp3$025$i + -1 >> 0] | 0;
       $sp3$025$i = $sp3$025$i + -2 | 0;
       $dp4$026$i$looptemp = $dp4$026$i;
       $dp4$026$i = $dp4$026$i + -4 | 0;
       HEAP8[$dp4$026$i >> 0] = HEAP8[$sp3$025$i >> 0] | 0;
       $i$224$i = $i$224$i + 1 | 0;
       HEAP8[$dp4$026$i$looptemp + -5 >> 0] = $2262;
       HEAP8[$dp4$026$i$looptemp + -6 >> 0] = $2261;
      } while (($i$224$i | 0) != ($2259 | 0));
     }
     HEAP8[$row_info + 10 >> 0] = 2;
     HEAP8[$row_info + 11 >> 0] = 32;
     HEAP32[$row_info + 4 >> 2] = $$sum4$i;
     break;
    }
   } else break;
  } else if ($2263 << 24 >> 24 == 2) {
   $2323 = HEAP8[$row_info + 9 >> 0] | 0;
   if ($2323 << 24 >> 24 == 8) {
    $2326 = $2259 * 3 | 0;
    $2327 = $2255 + ($2326 + 1) | 0;
    $2328 = $2255 + ($2259 + 1 + $2326) | 0;
    if (!($2258 & 128)) {
     if ($2259) {
      $dp10$032$i = $2328;
      $i$530$i = 0;
      $sp9$031$i = $2327;
      do {
       HEAP8[$dp10$032$i + -1 >> 0] = HEAP8[$sp9$031$i + -1 >> 0] | 0;
       HEAP8[$dp10$032$i + -2 >> 0] = HEAP8[$sp9$031$i + -2 >> 0] | 0;
       $sp9$031$i = $sp9$031$i + -3 | 0;
       HEAP8[$dp10$032$i + -3 >> 0] = HEAP8[$sp9$031$i >> 0] | 0;
       $dp10$032$i = $dp10$032$i + -4 | 0;
       HEAP8[$dp10$032$i >> 0] = $2262;
       $i$530$i = $i$530$i + 1 | 0;
      } while (($i$530$i | 0) != ($2259 | 0));
     }
     HEAP8[$row_info + 10 >> 0] = 4;
     HEAP8[$row_info + 11 >> 0] = 32;
     HEAP32[$row_info + 4 >> 2] = $2259 << 2;
     break;
    } else {
     HEAP8[$2255 + ($2326 + $2259) >> 0] = $2262;
     if ($2259 >>> 0 > 1) {
      $dp8$038$i = $2328;
      $i$436$i = 1;
      $sp7$037$i = $2327;
      do {
       HEAP8[$dp8$038$i + -2 >> 0] = HEAP8[$sp7$037$i + -1 >> 0] | 0;
       HEAP8[$dp8$038$i + -3 >> 0] = HEAP8[$sp7$037$i + -2 >> 0] | 0;
       $sp7$037$i = $sp7$037$i + -3 | 0;
       $dp8$038$i$looptemp = $dp8$038$i;
       $dp8$038$i = $dp8$038$i + -4 | 0;
       HEAP8[$dp8$038$i >> 0] = HEAP8[$sp7$037$i >> 0] | 0;
       $i$436$i = $i$436$i + 1 | 0;
       HEAP8[$dp8$038$i$looptemp + -5 >> 0] = $2262;
      } while (($i$436$i | 0) != ($2259 | 0));
     }
     HEAP8[$row_info + 10 >> 0] = 4;
     HEAP8[$row_info + 11 >> 0] = 32;
     HEAP32[$row_info + 4 >> 2] = $2259 << 2;
     break;
    }
   } else if ($2323 << 24 >> 24 == 16) {
    $2364 = $2259 * 6 | 0;
    $2365 = $2255 + ($2364 | 1) | 0;
    $$sum$i27 = $2364 + ($2259 << 1) | 0;
    $2367 = $2255 + ($$sum$i27 | 1) | 0;
    if (!($2258 & 128)) {
     if ($2259) {
      $dp14$044$i = $2367;
      $i$742$i = 0;
      $sp13$043$i = $2365;
      do {
       HEAP8[$dp14$044$i + -1 >> 0] = HEAP8[$sp13$043$i + -1 >> 0] | 0;
       HEAP8[$dp14$044$i + -2 >> 0] = HEAP8[$sp13$043$i + -2 >> 0] | 0;
       HEAP8[$dp14$044$i + -3 >> 0] = HEAP8[$sp13$043$i + -3 >> 0] | 0;
       HEAP8[$dp14$044$i + -4 >> 0] = HEAP8[$sp13$043$i + -4 >> 0] | 0;
       HEAP8[$dp14$044$i + -5 >> 0] = HEAP8[$sp13$043$i + -5 >> 0] | 0;
       $sp13$043$i = $sp13$043$i + -6 | 0;
       HEAP8[$dp14$044$i + -6 >> 0] = HEAP8[$sp13$043$i >> 0] | 0;
       HEAP8[$dp14$044$i + -7 >> 0] = $2262;
       $dp14$044$i = $dp14$044$i + -8 | 0;
       HEAP8[$dp14$044$i >> 0] = $2261;
       $i$742$i = $i$742$i + 1 | 0;
      } while (($i$742$i | 0) != ($2259 | 0));
     }
     HEAP8[$row_info + 10 >> 0] = 4;
     HEAP8[$row_info + 11 >> 0] = 64;
     HEAP32[$row_info + 4 >> 2] = $2259 << 3;
     break;
    } else {
     HEAP8[$2255 + $$sum$i27 >> 0] = $2262;
     HEAP8[$2255 + ($$sum$i27 + -1) >> 0] = $2261;
     if ($2259 >>> 0 > 1) {
      $dp12$050$i = $2367;
      $i$648$i = 1;
      $sp11$049$i = $2365;
      do {
       HEAP8[$dp12$050$i + -3 >> 0] = HEAP8[$sp11$049$i + -1 >> 0] | 0;
       HEAP8[$dp12$050$i + -4 >> 0] = HEAP8[$sp11$049$i + -2 >> 0] | 0;
       HEAP8[$dp12$050$i + -5 >> 0] = HEAP8[$sp11$049$i + -3 >> 0] | 0;
       HEAP8[$dp12$050$i + -6 >> 0] = HEAP8[$sp11$049$i + -4 >> 0] | 0;
       HEAP8[$dp12$050$i + -7 >> 0] = HEAP8[$sp11$049$i + -5 >> 0] | 0;
       $sp11$049$i = $sp11$049$i + -6 | 0;
       $dp12$050$i$looptemp = $dp12$050$i;
       $dp12$050$i = $dp12$050$i + -8 | 0;
       HEAP8[$dp12$050$i >> 0] = HEAP8[$sp11$049$i >> 0] | 0;
       $i$648$i = $i$648$i + 1 | 0;
       HEAP8[$dp12$050$i$looptemp + -9 >> 0] = $2262;
       HEAP8[$dp12$050$i$looptemp + -10 >> 0] = $2261;
      } while (($i$648$i | 0) != ($2259 | 0));
     }
     HEAP8[$row_info + 10 >> 0] = 4;
     HEAP8[$row_info + 11 >> 0] = 64;
     HEAP32[$row_info + 4 >> 2] = $2259 << 3;
     break;
    }
   } else break;
  } else break;
 } while (0);
 do if (HEAP32[$7 >> 2] & 131072) {
  $2425 = HEAP32[$0 >> 2] | 0;
  $2426 = HEAP32[$row_info >> 2] | 0;
  $2427 = HEAP8[$2236 >> 0] | 0;
  if ($2427 << 24 >> 24 == 6) {
   $2433 = $2425 + ((HEAP32[$row_info + 4 >> 2] | 0) + 1) | 0;
   $2434 = ($2426 | 0) == 0;
   if ((HEAP8[$row_info + 9 >> 0] | 0) == 8) {
    if ($2434) break; else {
     $i$01$i = 0;
     $sp$03$i = $2433;
    }
    do {
     $2435 = $sp$03$i + -1 | 0;
     $2436 = HEAP8[$2435 >> 0] | 0;
     $2437 = $sp$03$i + -2 | 0;
     HEAP8[$2435 >> 0] = HEAP8[$2437 >> 0] | 0;
     $2439 = $sp$03$i + -3 | 0;
     HEAP8[$2437 >> 0] = HEAP8[$2439 >> 0] | 0;
     $sp$03$i = $sp$03$i + -4 | 0;
     HEAP8[$2439 >> 0] = HEAP8[$sp$03$i >> 0] | 0;
     HEAP8[$sp$03$i >> 0] = $2436;
     $i$01$i = $i$01$i + 1 | 0;
    } while (($i$01$i | 0) != ($2426 | 0));
   } else {
    if ($2434) break; else {
     $i4$08$i = 0;
     $sp1$07$i = $2433;
    }
    do {
     $2444 = $sp1$07$i + -1 | 0;
     $2445 = HEAP8[$2444 >> 0] | 0;
     $2446 = $sp1$07$i + -2 | 0;
     $2447 = HEAP8[$2446 >> 0] | 0;
     $2448 = $sp1$07$i + -3 | 0;
     HEAP8[$2444 >> 0] = HEAP8[$2448 >> 0] | 0;
     $2450 = $sp1$07$i + -4 | 0;
     HEAP8[$2446 >> 0] = HEAP8[$2450 >> 0] | 0;
     $2452 = $sp1$07$i + -5 | 0;
     HEAP8[$2448 >> 0] = HEAP8[$2452 >> 0] | 0;
     $2454 = $sp1$07$i + -6 | 0;
     HEAP8[$2450 >> 0] = HEAP8[$2454 >> 0] | 0;
     $2456 = $sp1$07$i + -7 | 0;
     HEAP8[$2452 >> 0] = HEAP8[$2456 >> 0] | 0;
     $sp1$07$i = $sp1$07$i + -8 | 0;
     HEAP8[$2454 >> 0] = HEAP8[$sp1$07$i >> 0] | 0;
     HEAP8[$2456 >> 0] = $2445;
     HEAP8[$sp1$07$i >> 0] = $2447;
     $i4$08$i = $i4$08$i + 1 | 0;
    } while (($i4$08$i | 0) != ($2426 | 0));
   }
  } else if ($2427 << 24 >> 24 == 4) {
   $2466 = $2425 + ((HEAP32[$row_info + 4 >> 2] | 0) + 1) | 0;
   $2467 = ($2426 | 0) == 0;
   if ((HEAP8[$row_info + 9 >> 0] | 0) == 8) {
    if ($2467) break; else {
     $dp6$013$i = $2466;
     $i8$014$i = 0;
    }
    do {
     $2468 = $dp6$013$i + -1 | 0;
     $2469 = HEAP8[$2468 >> 0] | 0;
     $dp6$013$i = $dp6$013$i + -2 | 0;
     HEAP8[$2468 >> 0] = HEAP8[$dp6$013$i >> 0] | 0;
     HEAP8[$dp6$013$i >> 0] = $2469;
     $i8$014$i = $i8$014$i + 1 | 0;
    } while (($i8$014$i | 0) != ($2426 | 0));
   } else {
    if ($2467) break; else {
     $dp10$019$i = $2466;
     $i12$020$i = 0;
    }
    do {
     $2473 = $dp10$019$i + -1 | 0;
     $2474 = HEAP8[$2473 >> 0] | 0;
     $2475 = $dp10$019$i + -2 | 0;
     $2476 = HEAP8[$2475 >> 0] | 0;
     $2477 = $dp10$019$i + -3 | 0;
     HEAP8[$2473 >> 0] = HEAP8[$2477 >> 0] | 0;
     $dp10$019$i = $dp10$019$i + -4 | 0;
     HEAP8[$2475 >> 0] = HEAP8[$dp10$019$i >> 0] | 0;
     HEAP8[$2477 >> 0] = $2474;
     HEAP8[$dp10$019$i >> 0] = $2476;
     $i12$020$i = $i12$020$i + 1 | 0;
    } while (($i12$020$i | 0) != ($2426 | 0));
   }
  } else break;
 } while (0);
 $2482 = HEAP32[$7 >> 2] | 0;
 if (!($2482 & 16)) $2488 = $2482; else {
  _png_do_swap($row_info, (HEAP32[$0 >> 2] | 0) + 1 | 0);
  $2488 = HEAP32[$7 >> 2] | 0;
 }
 if (!($2488 & 1048576)) {
  STACKTOP = sp;
  return;
 }
 $2491 = HEAP32[$png_ptr + 192 >> 2] | 0;
 if ($2491) FUNCTION_TABLE_viii[$2491 & 15]($png_ptr, $row_info, (HEAP32[$0 >> 2] | 0) + 1 | 0);
 $2496 = HEAP8[$png_ptr + 204 >> 0] | 0;
 if ($2496 << 24 >> 24) HEAP8[$row_info + 9 >> 0] = $2496;
 $2500 = HEAP8[$png_ptr + 205 >> 0] | 0;
 $$phi$trans$insert232 = $row_info + 10 | 0;
 if (!($2500 << 24 >> 24)) $2506 = HEAP8[$$phi$trans$insert232 >> 0] | 0; else {
  HEAP8[$$phi$trans$insert232 >> 0] = $2500;
  $2506 = $2500;
 }
 $2507 = Math_imul($2506 & 255, HEAPU8[$row_info + 9 >> 0] | 0) | 0;
 HEAP8[$row_info + 11 >> 0] = $2507;
 $2510 = $2507 & 255;
 $2512 = HEAP32[$row_info >> 2] | 0;
 if ($2510 >>> 0 > 7) $2519 = Math_imul($2510 >>> 3, $2512) | 0; else $2519 = ((Math_imul($2510, $2512) | 0) + 7 | 0) >>> 3;
 HEAP32[$row_info + 4 >> 2] = $2519;
 STACKTOP = sp;
 return;
}

function _inflate($strm, $flush) {
 $strm = $strm | 0;
 $flush = $flush | 0;
 var $$0 = 0, $$lcssa101 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$lcssa234 = 0, $$lcssa236 = 0, $$lcssa260 = 0, $$lcssa264 = 0, $$lcssa306 = 0, $$lcssa308 = 0, $$lcssa310 = 0, $$lcssa312 = 0, $$lcssa335 = 0, $$lcssa339 = 0, $$lcssa80 = 0, $$pn = 0, $$pn1232 = 0, $$pn1234 = 0, $$pn1237 = 0, $$pre1227 = 0, $101 = 0, $102 = 0, $106 = 0, $111 = 0, $112 = 0, $116 = 0, $117 = 0, $12 = 0, $123 = 0, $128 = 0, $137 = 0, $138 = 0, $14 = 0, $142 = 0, $145 = 0, $15 = 0, $16 = 0, $162 = 0, $163 = 0, $167 = 0, $17 = 0, $170 = 0, $18 = 0, $184 = 0, $189 = 0, $190 = 0, $194 = 0, $197 = 0, $2 = 0, $20 = 0, $201 = 0, $208 = 0, $211 = 0, $214 = 0, $217 = 0, $22 = 0, $220 = 0, $224 = 0, $228 = 0, $23 = 0, $233 = 0, $24 = 0, $240 = 0, $241 = 0, $249 = 0, $25 = 0, $250 = 0, $253 = 0, $255 = 0, $26 = 0, $261 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $279 = 0, $28 = 0, $280 = 0, $283 = 0, $285 = 0, $29 = 0, $291 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $303 = 0, $308 = 0, $309 = 0, $31 = 0, $313 = 0, $314 = 0, $319 = 0, $32 = 0, $325 = 0, $327 = 0, $328 = 0, $33 = 0, $332 = 0, $335 = 0, $338 = 0, $34 = 0, $342 = 0, $346 = 0, $347 = 0, $35 = 0, $351 = 0, $352 = 0, $356 = 0, $36 = 0, $361 = 0, $362 = 0, $363 = 0, $366 = 0, $367 = 0, $37 = 0, $371 = 0, $372 = 0, $374 = 0, $378 = 0, $38 = 0, $39 = 0, $390 = 0, $391 = 0, $395 = 0, $396 = 0, $399 = 0, $4 = 0, $40 = 0, $402 = 0, $406 = 0, $407 = 0, $41 = 0, $413 = 0, $414 = 0, $418 = 0, $419 = 0, $42 = 0, $424 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $436 = 0, $44 = 0, $441 = 0, $443 = 0, $444 = 0, $446 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $455 = 0, $458 = 0, $459 = 0, $46 = 0, $463 = 0, $464 = 0, $465 = 0, $468 = 0, $47 = 0, $474 = 0, $48 = 0, $481 = 0, $483 = 0, $485 = 0, $488 = 0, $489 = 0, $49 = 0, $493 = 0, $494 = 0, $496 = 0, $497 = 0, $5 = 0, $50 = 0, $507 = 0, $508 = 0, $51 = 0, $512 = 0, $513 = 0, $515 = 0, $52 = 0, $522 = 0, $523 = 0, $527 = 0, $528 = 0, $53 = 0, $530 = 0, $538 = 0, $539 = 0, $54 = 0, $541 = 0, $543 = 0, $548 = 0, $549 = 0, $55 = 0, $555 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $573 = 0, $574 = 0, $577 = 0, $578 = 0, $58 = 0, $582 = 0, $583 = 0, $584 = 0, $586 = 0, $587 = 0, $589 = 0, $59 = 0, $593 = 0, $596 = 0, $599 = 0, $60 = 0, $601 = 0, $606 = 0, $607 = 0, $61 = 0, $611 = 0, $612 = 0, $615 = 0, $617 = 0, $62 = 0, $623 = 0, $624 = 0, $627 = 0, $628 = 0, $629 = 0, $631 = 0, $633 = 0, $639 = 0, $640 = 0, $644 = 0, $645 = 0, $649 = 0, $650 = 0, $656 = 0, $66 = 0, $661 = 0, $664 = 0, $665 = 0, $666 = 0, $668 = 0, $669 = 0, $672 = 0, $673 = 0, $677 = 0, $678 = 0, $679 = 0, $681 = 0, $682 = 0, $684 = 0, $687 = 0, $690 = 0, $693 = 0, $695 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $705 = 0, $706 = 0, $709 = 0, $71 = 0, $711 = 0, $717 = 0, $718 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $727 = 0, $728 = 0, $732 = 0, $733 = 0, $737 = 0, $738 = 0, $742 = 0, $743 = 0, $75 = 0, $755 = 0, $756 = 0, $758 = 0, $76 = 0, $763 = 0, $765 = 0, $773 = 0, $777 = 0, $780 = 0, $781 = 0, $782 = 0, $789 = 0, $801 = 0, $802 = 0, $806 = 0, $807 = 0, $809 = 0, $817 = 0, $819 = 0, $822 = 0, $827 = 0, $835 = 0, $836 = 0, $84 = 0, $840 = 0, $841 = 0, $847 = 0, $849 = 0, $856 = 0, $858 = 0, $859 = 0, $860 = 0, $869 = 0, $872 = 0, $875 = 0, $878 = 0, $88 = 0, $884 = 0, $891 = 0, $896 = 0, $897 = 0, $898 = 0, $98 = 0, $99 = 0, $bits$0 = 0, $bits$0$be = 0, $bits$1$lcssa = 0, $bits$10 = 0, $bits$11 = 0, $bits$12$lcssa = 0, $bits$12497 = 0, $bits$13 = 0, $bits$14399 = 0, $bits$15 = 0, $bits$1513 = 0, $bits$16 = 0, $bits$17 = 0, $bits$18$lcssa = 0, $bits$18414 = 0, $bits$19$lcssa = 0, $bits$19382 = 0, $bits$2$lcssa = 0, $bits$20 = 0, $bits$21 = 0, $bits$22$lcssa = 0, $bits$2250 = 0, $bits$23$lcssa = 0, $bits$2385 = 0, $bits$24$lcssa = 0, $bits$2430 = 0, $bits$2466 = 0, $bits$25$be = 0, $bits$25$lcssa1251 = 0, $bits$25$ph = 0, $bits$25215 = 0, $bits$26$lcssa = 0, $bits$26110 = 0, $bits$27$lcssa = 0, $bits$27145 = 0, $bits$28$lcssa = 0, $bits$28129 = 0, $bits$29$lcssa = 0, $bits$29161 = 0, $bits$30 = 0, $bits$32 = 0, $bits$33 = 0, $bits$34$lcssa = 0, $bits$34241 = 0, $bits$3446 = 0, $bits$35$lcssa = 0, $bits$35269 = 0, $bits$36 = 0, $bits$37 = 0, $bits$38$lcssa = 0, $bits$38290 = 0, $bits$39 = 0, $bits$40$lcssa = 0, $bits$40$ph = 0, $bits$40317 = 0, $bits$41$lcssa = 0, $bits$41344 = 0, $bits$42 = 0, $bits$43 = 0, $bits$44$lcssa = 0, $bits$44365 = 0, $bits$4461 = 0, $bits$45 = 0, $bits$46 = 0, $bits$47$lcssa = 0, $bits$4721 = 0, $bits$48 = 0, $bits$49 = 0, $bits$5 = 0, $bits$50$lcssa = 0, $bits$5034 = 0, $bits$51 = 0, $bits$53 = 0, $bits$53$ph = 0, $bits$6476 = 0, $bits$7 = 0, $bits$8 = 0, $bits$9 = 0, $copy$1 = 0, $copy$10 = 0, $copy$2 = 0, $copy$4 = 0, $copy$5 = 0, $copy$6170 = 0, $copy$7 = 0, $copy$8 = 0, $from$0 = 0, $from$1 = 0, $from$2 = 0, $have$0 = 0, $have$0$be = 0, $have$1$lcssa = 0, $have$10 = 0, $have$11 = 0, $have$12 = 0, $have$13 = 0, $have$14 = 0, $have$15 = 0, $have$1511 = 0, $have$16$lcssa = 0, $have$16495 = 0, $have$17 = 0, $have$18$lcssa = 0, $have$18397 = 0, $have$19 = 0, $have$2$lcssa = 0, $have$20 = 0, $have$21 = 0, $have$22$lcssa = 0, $have$22412 = 0, $have$23$lcssa = 0, $have$23380 = 0, $have$24 = 0, $have$2428 = 0, $have$25 = 0, $have$25$ = 0, $have$26$lcssa = 0, $have$2648 = 0, $have$27$lcssa = 0, $have$2783 = 0, $have$28$lcssa = 0, $have$2864 = 0, $have$29$be = 0, $have$29$lcssa1253 = 0, $have$29$ph = 0, $have$29213 = 0, $have$3$lcssa = 0, $have$30$lcssa = 0, $have$30108 = 0, $have$31$lcssa = 0, $have$31143 = 0, $have$32$lcssa = 0, $have$32127 = 0, $have$33$lcssa = 0, $have$33159 = 0, $have$34 = 0, $have$3444 = 0, $have$36 = 0, $have$37 = 0, $have$38$lcssa = 0, $have$38239 = 0, $have$39$lcssa = 0, $have$39267 = 0, $have$4$lcssa = 0, $have$40 = 0, $have$41 = 0, $have$42$lcssa = 0, $have$42288 = 0, $have$43 = 0, $have$44$lcssa = 0, $have$44$ph = 0, $have$44315 = 0, $have$4459 = 0, $have$45$lcssa = 0, $have$45342 = 0, $have$46 = 0, $have$47 = 0, $have$48$lcssa = 0, $have$48363 = 0, $have$49 = 0, $have$5 = 0, $have$50 = 0, $have$51$lcssa = 0, $have$5119 = 0, $have$52 = 0, $have$53 = 0, $have$54$lcssa = 0, $have$5432 = 0, $have$55 = 0, $have$57 = 0, $have$57$ph = 0, $have$6$lcssa = 0, $have$6474 = 0, $have$7 = 0, $have$8 = 0, $have$8$ = 0, $have$9 = 0, $hbuf = 0, $here$sroa$0$0 = 0, $here$sroa$0$1 = 0, $here$sroa$1$0 = 0, $here$sroa$1$1 = 0, $here$sroa$2$0 = 0, $here$sroa$2$1 = 0, $hold$0 = 0, $hold$0$be = 0, $hold$1$lcssa = 0, $hold$10 = 0, $hold$11 = 0, $hold$12$lcssa = 0, $hold$12496 = 0, $hold$13 = 0, $hold$14$lcssa = 0, $hold$14398 = 0, $hold$15 = 0, $hold$1512 = 0, $hold$16 = 0, $hold$17 = 0, $hold$18$lcssa = 0, $hold$18413 = 0, $hold$19$lcssa = 0, $hold$19381 = 0, $hold$2$lcssa = 0, $hold$20 = 0, $hold$21 = 0, $hold$22$lcssa = 0, $hold$2249 = 0, $hold$23$lcssa = 0, $hold$2384 = 0, $hold$24$lcssa = 0, $hold$2429 = 0, $hold$2465 = 0, $hold$25$be = 0, $hold$25$lcssa1252 = 0, $hold$25$ph = 0, $hold$25214 = 0, $hold$26$lcssa = 0, $hold$26109 = 0, $hold$27$lcssa = 0, $hold$27144 = 0, $hold$28$lcssa = 0, $hold$28128 = 0, $hold$29$lcssa = 0, $hold$29160 = 0, $hold$3$lcssa = 0, $hold$30 = 0, $hold$32 = 0, $hold$33 = 0, $hold$34$lcssa = 0, $hold$34240 = 0, $hold$3445 = 0, $hold$35$lcssa = 0, $hold$35268 = 0, $hold$36 = 0, $hold$37 = 0, $hold$38$lcssa = 0, $hold$38289 = 0, $hold$39 = 0, $hold$4$lcssa = 0, $hold$40$lcssa = 0, $hold$40$ph = 0, $hold$40316 = 0, $hold$41$lcssa = 0, $hold$41343 = 0, $hold$42 = 0, $hold$43 = 0, $hold$44$lcssa = 0, $hold$44364 = 0, $hold$4460 = 0, $hold$45 = 0, $hold$46 = 0, $hold$47$lcssa = 0, $hold$4720 = 0, $hold$48 = 0, $hold$49 = 0, $hold$5 = 0, $hold$50$lcssa = 0, $hold$5033 = 0, $hold$51 = 0, $hold$53 = 0, $hold$53$ph = 0, $hold$6$lcssa = 0, $hold$6475 = 0, $hold$7 = 0, $hold$8 = 0, $hold$9 = 0, $left$0 = 0, $left$0$be = 0, $left$0$copy$8 = 0, $left$0$lcssa1037 = 0, $left$01066 = 0, $len$0 = 0, $next$0 = 0, $next$0$be = 0, $next$1$lcssa = 0, $next$10 = 0, $next$11 = 0, $next$12 = 0, $next$13 = 0, $next$14 = 0, $next$15 = 0, $next$1510 = 0, $next$16$lcssa = 0, $next$16494 = 0, $next$17 = 0, $next$18$lcssa = 0, $next$18396 = 0, $next$19 = 0, $next$2$lcssa = 0, $next$20 = 0, $next$21 = 0, $next$22$lcssa = 0, $next$22411 = 0, $next$23$lcssa = 0, $next$23379 = 0, $next$24 = 0, $next$2427 = 0, $next$25 = 0, $next$26$lcssa = 0, $next$2647 = 0, $next$27$lcssa = 0, $next$2782 = 0, $next$28$lcssa = 0, $next$2863 = 0, $next$29$be = 0, $next$29$lcssa1254 = 0, $next$29$ph = 0, $next$29212 = 0, $next$3$lcssa = 0, $next$30$lcssa = 0, $next$30107 = 0, $next$31$lcssa = 0, $next$31142 = 0, $next$32$lcssa = 0, $next$32126 = 0, $next$33$lcssa = 0, $next$33158 = 0, $next$34 = 0, $next$3443 = 0, $next$36 = 0, $next$37 = 0, $next$38$lcssa = 0, $next$38238 = 0, $next$39$lcssa = 0, $next$39266 = 0, $next$4$lcssa = 0, $next$40 = 0, $next$41 = 0, $next$42$lcssa = 0, $next$42287 = 0, $next$43 = 0, $next$44$lcssa = 0, $next$44$ph = 0, $next$44314 = 0, $next$4458 = 0, $next$45$lcssa = 0, $next$45341 = 0, $next$46 = 0, $next$47 = 0, $next$48$lcssa = 0, $next$48362 = 0, $next$49 = 0, $next$5 = 0, $next$50 = 0, $next$51$lcssa = 0, $next$5118 = 0, $next$52 = 0, $next$53 = 0, $next$54$lcssa = 0, $next$5431 = 0, $next$55 = 0, $next$57 = 0, $next$57$ph = 0, $next$6$lcssa = 0, $next$6473 = 0, $next$7 = 0, $next$8 = 0, $next$9 = 0, $out$0 = 0, $out$0$be = 0, $out$1 = 0, $out$2 = 0, $out$4 = 0, $put$0 = 0, $put$0$be = 0, $put$1 = 0, $ret$0 = 0, $ret$0$be = 0, $ret$1$ph = 0, $ret$2 = 0, $ret$3 = 0, $ret$4 = 0, $ret$5$ph = 0, $ret$6 = 0, $ret$7 = 0, $ret$8 = 0, $ret$8$ph = 0, $scevgep885 = 0, $umax = 0, label = 0, sp = 0, $copy$1$looptemp = 0, $copy$2$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $hbuf = sp;
 if (!$strm) {
  $$0 = -2;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $2 = HEAP32[$strm + 28 >> 2] | 0;
 if (!$2) {
  $$0 = -2;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $4 = $strm + 12 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 if (!$5) {
  $$0 = -2;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $7 = HEAP32[$strm >> 2] | 0;
 if (!$7) if (HEAP32[$strm + 4 >> 2] | 0) {
  $$0 = -2;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $12 = HEAP32[$2 >> 2] | 0;
 if (($12 | 0) == 11) {
  HEAP32[$2 >> 2] = 12;
  $896 = 12;
  $897 = HEAP32[$strm >> 2] | 0;
  $898 = HEAP32[$4 >> 2] | 0;
 } else {
  $896 = $12;
  $897 = $7;
  $898 = $5;
 }
 $14 = $strm + 16 | 0;
 $15 = HEAP32[$14 >> 2] | 0;
 $16 = $strm + 4 | 0;
 $17 = HEAP32[$16 >> 2] | 0;
 $18 = $2 + 56 | 0;
 $20 = $2 + 60 | 0;
 $22 = $2 + 8 | 0;
 $23 = $2 + 24 | 0;
 $24 = $hbuf + 1 | 0;
 $25 = $2 + 16 | 0;
 $26 = $2 + 32 | 0;
 $27 = $strm + 24 | 0;
 $28 = $2 + 36 | 0;
 $29 = $2 + 20 | 0;
 $30 = $strm + 48 | 0;
 $31 = $2 + 64 | 0;
 $32 = $2 + 12 | 0;
 $33 = ($flush + -5 | 0) >>> 0 < 2;
 $34 = $2 + 4 | 0;
 $35 = $2 + 76 | 0;
 $36 = $2 + 84 | 0;
 $37 = $2 + 80 | 0;
 $38 = $2 + 88 | 0;
 $39 = ($flush | 0) == 6;
 $40 = $2 + 7108 | 0;
 $41 = $2 + 72 | 0;
 $42 = $2 + 7112 | 0;
 $43 = $2 + 68 | 0;
 $44 = $2 + 44 | 0;
 $45 = $2 + 7104 | 0;
 $46 = $2 + 48 | 0;
 $47 = $2 + 52 | 0;
 $48 = $2 + 40 | 0;
 $49 = $strm + 20 | 0;
 $50 = $2 + 28 | 0;
 $51 = $2 + 96 | 0;
 $52 = $2 + 100 | 0;
 $53 = $2 + 92 | 0;
 $54 = $2 + 104 | 0;
 $55 = $2 + 1328 | 0;
 $56 = $2 + 108 | 0;
 $57 = $2 + 112 | 0;
 $58 = $2 + 752 | 0;
 $59 = $2 + 624 | 0;
 $60 = $hbuf + 2 | 0;
 $61 = $hbuf + 3 | 0;
 $62 = $896;
 $bits$0 = HEAP32[$20 >> 2] | 0;
 $have$0 = $17;
 $hold$0 = HEAP32[$18 >> 2] | 0;
 $left$0 = $15;
 $next$0 = $897;
 $out$0 = $15;
 $put$0 = $898;
 $ret$0 = 0;
 L17 : while (1) {
  L19 : do switch ($62 | 0) {
  case 6:
   {
    $bits$9 = $bits$0;
    $have$11 = $have$0;
    $hold$9 = $hold$0;
    $next$11 = $next$0;
    label = 83;
    break;
   }
  case 9:
   {
    if ($bits$0 >>> 0 < 32) {
     $bits$14399 = $bits$0;
     $have$18397 = $have$0;
     $hold$14398 = $hold$0;
     $next$18396 = $next$0;
     while (1) {
      if (!$have$18397) {
       $bits$53 = $bits$14399;
       $have$57 = 0;
       $hold$53 = $hold$14398;
       $left$01066 = $left$0;
       $next$57 = $next$18396;
       $out$4 = $out$0;
       $ret$8 = $ret$0;
       break L17;
      }
      $327 = $have$18397 + -1 | 0;
      $328 = $next$18396 + 1 | 0;
      $332 = (HEAPU8[$next$18396 >> 0] << $bits$14399) + $hold$14398 | 0;
      $bits$14399 = $bits$14399 + 8 | 0;
      if ($bits$14399 >>> 0 >= 32) {
       $have$18$lcssa = $327;
       $hold$14$lcssa = $332;
       $next$18$lcssa = $328;
       break;
      } else {
       $have$18397 = $327;
       $hold$14398 = $332;
       $next$18396 = $328;
      }
     }
    } else {
     $have$18$lcssa = $have$0;
     $hold$14$lcssa = $hold$0;
     $next$18$lcssa = $next$0;
    }
    $335 = _llvm_bswap_i32($hold$14$lcssa | 0) | 0;
    HEAP32[$23 >> 2] = $335;
    HEAP32[$30 >> 2] = $335;
    HEAP32[$2 >> 2] = 10;
    $bits$15 = 0;
    $have$19 = $have$18$lcssa;
    $hold$15 = 0;
    $next$19 = $next$18$lcssa;
    label = 121;
    break;
   }
  case 21:
   {
    $640 = HEAP32[$41 >> 2] | 0;
    $bits$37 = $bits$0;
    $have$41 = $have$0;
    $hold$37 = $hold$0;
    $next$41 = $next$0;
    $ret$4 = $ret$0;
    label = 218;
    break;
   }
  case 1:
   {
    if ($bits$0 >>> 0 < 16) {
     $bits$2430 = $bits$0;
     $have$2428 = $have$0;
     $hold$2429 = $hold$0;
     $next$2427 = $next$0;
     while (1) {
      if (!$have$2428) {
       $bits$53 = $bits$2430;
       $have$57 = 0;
       $hold$53 = $hold$2429;
       $left$01066 = $left$0;
       $next$57 = $next$2427;
       $out$4 = $out$0;
       $ret$8 = $ret$0;
       break L17;
      }
      $111 = $have$2428 + -1 | 0;
      $112 = $next$2427 + 1 | 0;
      $116 = (HEAPU8[$next$2427 >> 0] << $bits$2430) + $hold$2429 | 0;
      $117 = $bits$2430 + 8 | 0;
      if ($117 >>> 0 < 16) {
       $bits$2430 = $117;
       $have$2428 = $111;
       $hold$2429 = $116;
       $next$2427 = $112;
      } else {
       $bits$2$lcssa = $117;
       $have$2$lcssa = $111;
       $hold$2$lcssa = $116;
       $next$2$lcssa = $112;
       break;
      }
     }
    } else {
     $bits$2$lcssa = $bits$0;
     $have$2$lcssa = $have$0;
     $hold$2$lcssa = $hold$0;
     $next$2$lcssa = $next$0;
    }
    HEAP32[$25 >> 2] = $hold$2$lcssa;
    if (($hold$2$lcssa & 255 | 0) != 8) {
     HEAP32[$27 >> 2] = 102840;
     HEAP32[$2 >> 2] = 29;
     $bits$0$be = $bits$2$lcssa;
     $have$0$be = $have$2$lcssa;
     $hold$0$be = $hold$2$lcssa;
     $left$0$be = $left$0;
     $next$0$be = $next$2$lcssa;
     $out$0$be = $out$0;
     $put$0$be = $put$0;
     $ret$0$be = $ret$0;
     break L19;
    }
    if ($hold$2$lcssa & 57344) {
     HEAP32[$27 >> 2] = 102896;
     HEAP32[$2 >> 2] = 29;
     $bits$0$be = $bits$2$lcssa;
     $have$0$be = $have$2$lcssa;
     $hold$0$be = $hold$2$lcssa;
     $left$0$be = $left$0;
     $next$0$be = $next$2$lcssa;
     $out$0$be = $out$0;
     $put$0$be = $put$0;
     $ret$0$be = $ret$0;
     break L19;
    }
    $123 = HEAP32[$26 >> 2] | 0;
    if (!$123) $128 = $hold$2$lcssa; else {
     HEAP32[$123 >> 2] = $hold$2$lcssa >>> 8 & 1;
     $128 = HEAP32[$25 >> 2] | 0;
    }
    if ($128 & 512) {
     HEAP8[$hbuf >> 0] = $hold$2$lcssa;
     HEAP8[$24 >> 0] = $hold$2$lcssa >>> 8;
     HEAP32[$23 >> 2] = _crc32(HEAP32[$23 >> 2] | 0, $hbuf, 2) | 0;
    }
    HEAP32[$2 >> 2] = 2;
    $bits$3446 = 0;
    $have$3444 = $have$2$lcssa;
    $hold$3445 = 0;
    $next$3443 = $next$2$lcssa;
    label = 47;
    break;
   }
  case 0:
   {
    $66 = HEAP32[$22 >> 2] | 0;
    if (!$66) {
     HEAP32[$2 >> 2] = 12;
     $bits$0$be = $bits$0;
     $have$0$be = $have$0;
     $hold$0$be = $hold$0;
     $left$0$be = $left$0;
     $next$0$be = $next$0;
     $out$0$be = $out$0;
     $put$0$be = $put$0;
     $ret$0$be = $ret$0;
     break L19;
    }
    if ($bits$0 >>> 0 < 16) {
     $bits$1513 = $bits$0;
     $have$1511 = $have$0;
     $hold$1512 = $hold$0;
     $next$1510 = $next$0;
     while (1) {
      if (!$have$1511) {
       $bits$53 = $bits$1513;
       $have$57 = 0;
       $hold$53 = $hold$1512;
       $left$01066 = $left$0;
       $next$57 = $next$1510;
       $out$4 = $out$0;
       $ret$8 = $ret$0;
       break L17;
      }
      $70 = $have$1511 + -1 | 0;
      $71 = $next$1510 + 1 | 0;
      $75 = (HEAPU8[$next$1510 >> 0] << $bits$1513) + $hold$1512 | 0;
      $76 = $bits$1513 + 8 | 0;
      if ($76 >>> 0 < 16) {
       $bits$1513 = $76;
       $have$1511 = $70;
       $hold$1512 = $75;
       $next$1510 = $71;
      } else {
       $bits$1$lcssa = $76;
       $have$1$lcssa = $70;
       $hold$1$lcssa = $75;
       $next$1$lcssa = $71;
       break;
      }
     }
    } else {
     $bits$1$lcssa = $bits$0;
     $have$1$lcssa = $have$0;
     $hold$1$lcssa = $hold$0;
     $next$1$lcssa = $next$0;
    }
    if (($66 & 2 | 0) != 0 & ($hold$1$lcssa | 0) == 35615) {
     HEAP32[$23 >> 2] = _crc32(0, 0, 0) | 0;
     HEAP8[$hbuf >> 0] = 31;
     HEAP8[$24 >> 0] = -117;
     HEAP32[$23 >> 2] = _crc32(HEAP32[$23 >> 2] | 0, $hbuf, 2) | 0;
     HEAP32[$2 >> 2] = 1;
     $bits$0$be = 0;
     $have$0$be = $have$1$lcssa;
     $hold$0$be = 0;
     $left$0$be = $left$0;
     $next$0$be = $next$1$lcssa;
     $out$0$be = $out$0;
     $put$0$be = $put$0;
     $ret$0$be = $ret$0;
     break L19;
    }
    HEAP32[$25 >> 2] = 0;
    $84 = HEAP32[$26 >> 2] | 0;
    if (!$84) $88 = $66; else {
     HEAP32[$84 + 48 >> 2] = -1;
     $88 = HEAP32[$22 >> 2] | 0;
    }
    if ($88 & 1) if (!(((($hold$1$lcssa << 8 & 65280) + ($hold$1$lcssa >>> 8) | 0) >>> 0) % 31 | 0)) {
     if (($hold$1$lcssa & 15 | 0) != 8) {
      HEAP32[$27 >> 2] = 102840;
      HEAP32[$2 >> 2] = 29;
      $bits$0$be = $bits$1$lcssa;
      $have$0$be = $have$1$lcssa;
      $hold$0$be = $hold$1$lcssa;
      $left$0$be = $left$0;
      $next$0$be = $next$1$lcssa;
      $out$0$be = $out$0;
      $put$0$be = $put$0;
      $ret$0$be = $ret$0;
      break L19;
     }
     $98 = $hold$1$lcssa >>> 4;
     $99 = $bits$1$lcssa + -4 | 0;
     $101 = ($98 & 15) + 8 | 0;
     $102 = HEAP32[$28 >> 2] | 0;
     if (!$102) HEAP32[$28 >> 2] = $101; else if ($101 >>> 0 > $102 >>> 0) {
      HEAP32[$27 >> 2] = 102872;
      HEAP32[$2 >> 2] = 29;
      $bits$0$be = $99;
      $have$0$be = $have$1$lcssa;
      $hold$0$be = $98;
      $left$0$be = $left$0;
      $next$0$be = $next$1$lcssa;
      $out$0$be = $out$0;
      $put$0$be = $put$0;
      $ret$0$be = $ret$0;
      break L19;
     }
     HEAP32[$29 >> 2] = 1 << $101;
     $106 = _adler32(0, 0, 0) | 0;
     HEAP32[$23 >> 2] = $106;
     HEAP32[$30 >> 2] = $106;
     HEAP32[$2 >> 2] = $hold$1$lcssa >>> 12 & 2 ^ 11;
     $bits$0$be = 0;
     $have$0$be = $have$1$lcssa;
     $hold$0$be = 0;
     $left$0$be = $left$0;
     $next$0$be = $next$1$lcssa;
     $out$0$be = $out$0;
     $put$0$be = $put$0;
     $ret$0$be = $ret$0;
     break L19;
    }
    HEAP32[$27 >> 2] = 102816;
    HEAP32[$2 >> 2] = 29;
    $bits$0$be = $bits$1$lcssa;
    $have$0$be = $have$1$lcssa;
    $hold$0$be = $hold$1$lcssa;
    $left$0$be = $left$0;
    $next$0$be = $next$1$lcssa;
    $out$0$be = $out$0;
    $put$0$be = $put$0;
    $ret$0$be = $ret$0;
    break;
   }
  case 23:
   {
    $733 = HEAP32[$41 >> 2] | 0;
    $bits$43 = $bits$0;
    $have$47 = $have$0;
    $hold$43 = $hold$0;
    $next$47 = $next$0;
    $ret$6 = $ret$0;
    label = 237;
    break;
   }
  case 10:
   {
    $bits$15 = $bits$0;
    $have$19 = $have$0;
    $hold$15 = $hold$0;
    $next$19 = $next$0;
    label = 121;
    break;
   }
  case 27:
   {
    $bits$49 = $bits$0;
    $have$53 = $have$0;
    $hold$49 = $hold$0;
    $next$53 = $next$0;
    $out$2 = $out$0;
    label = 274;
    break;
   }
  case 3:
   {
    if ($bits$0 >>> 0 < 16) {
     $bits$4461 = $bits$0;
     $have$4459 = $have$0;
     $hold$4460 = $hold$0;
     $next$4458 = $next$0;
     label = 55;
    } else {
     $have$4$lcssa = $have$0;
     $hold$4$lcssa = $hold$0;
     $next$4$lcssa = $next$0;
     label = 57;
    }
    break;
   }
  case 18:
   {
    $446 = HEAP32[$54 >> 2] | 0;
    $bits$25$ph = $bits$0;
    $have$29$ph = $have$0;
    $hold$25$ph = $hold$0;
    $next$29$ph = $next$0;
    $ret$1$ph = $ret$0;
    label = 164;
    break;
   }
  case 16:
   {
    if ($bits$0 >>> 0 < 14) {
     $bits$2250 = $bits$0;
     $have$2648 = $have$0;
     $hold$2249 = $hold$0;
     $next$2647 = $next$0;
     while (1) {
      if (!$have$2648) {
       $bits$53 = $bits$2250;
       $have$57 = 0;
       $hold$53 = $hold$2249;
       $left$01066 = $left$0;
       $next$57 = $next$2647;
       $out$4 = $out$0;
       $ret$8 = $ret$0;
       break L17;
      }
      $390 = $have$2648 + -1 | 0;
      $391 = $next$2647 + 1 | 0;
      $395 = (HEAPU8[$next$2647 >> 0] << $bits$2250) + $hold$2249 | 0;
      $396 = $bits$2250 + 8 | 0;
      if ($396 >>> 0 < 14) {
       $bits$2250 = $396;
       $have$2648 = $390;
       $hold$2249 = $395;
       $next$2647 = $391;
      } else {
       $bits$22$lcssa = $396;
       $have$26$lcssa = $390;
       $hold$22$lcssa = $395;
       $next$26$lcssa = $391;
       break;
      }
     }
    } else {
     $bits$22$lcssa = $bits$0;
     $have$26$lcssa = $have$0;
     $hold$22$lcssa = $hold$0;
     $next$26$lcssa = $next$0;
    }
    $399 = ($hold$22$lcssa & 31) + 257 | 0;
    HEAP32[$51 >> 2] = $399;
    $402 = ($hold$22$lcssa >>> 5 & 31) + 1 | 0;
    HEAP32[$52 >> 2] = $402;
    HEAP32[$53 >> 2] = ($hold$22$lcssa >>> 10 & 15) + 4;
    $406 = $hold$22$lcssa >>> 14;
    $407 = $bits$22$lcssa + -14 | 0;
    if ($399 >>> 0 > 286 | $402 >>> 0 > 30) {
     HEAP32[$27 >> 2] = 103008;
     HEAP32[$2 >> 2] = 29;
     $bits$0$be = $407;
     $have$0$be = $have$26$lcssa;
     $hold$0$be = $406;
     $left$0$be = $left$0;
     $next$0$be = $next$26$lcssa;
     $out$0$be = $out$0;
     $put$0$be = $put$0;
     $ret$0$be = $ret$0;
     break L19;
    } else {
     HEAP32[$54 >> 2] = 0;
     HEAP32[$2 >> 2] = 17;
     $424 = 0;
     $bits$2385 = $407;
     $have$2783 = $have$26$lcssa;
     $hold$2384 = $406;
     $next$2782 = $next$26$lcssa;
     label = 154;
     break L19;
    }
    break;
   }
  case 25:
   {
    if (!$left$0) {
     $bits$53$ph = $bits$0;
     $have$57$ph = $have$0;
     $hold$53$ph = $hold$0;
     $left$0$lcssa1037 = 0;
     $next$57$ph = $next$0;
     $ret$8$ph = $ret$0;
     label = 282;
     break L17;
    }
    HEAP8[$put$0 >> 0] = HEAP32[$31 >> 2];
    HEAP32[$2 >> 2] = 20;
    $bits$0$be = $bits$0;
    $have$0$be = $have$0;
    $hold$0$be = $hold$0;
    $left$0$be = $left$0 + -1 | 0;
    $next$0$be = $next$0;
    $out$0$be = $out$0;
    $put$0$be = $put$0 + 1 | 0;
    $ret$0$be = $ret$0;
    break;
   }
  case 26:
   {
    if (!(HEAP32[$22 >> 2] | 0)) {
     $bits$48 = $bits$0;
     $have$52 = $have$0;
     $hold$48 = $hold$0;
     $next$52 = $next$0;
     $out$1 = $out$0;
    } else {
     if ($bits$0 >>> 0 < 32) {
      $bits$4721 = $bits$0;
      $have$5119 = $have$0;
      $hold$4720 = $hold$0;
      $next$5118 = $next$0;
      while (1) {
       if (!$have$5119) {
        $bits$53 = $bits$4721;
        $have$57 = 0;
        $hold$53 = $hold$4720;
        $left$01066 = $left$0;
        $next$57 = $next$5118;
        $out$4 = $out$0;
        $ret$8 = $ret$0;
        break L17;
       }
       $801 = $have$5119 + -1 | 0;
       $802 = $next$5118 + 1 | 0;
       $806 = (HEAPU8[$next$5118 >> 0] << $bits$4721) + $hold$4720 | 0;
       $807 = $bits$4721 + 8 | 0;
       if ($807 >>> 0 < 32) {
        $bits$4721 = $807;
        $have$5119 = $801;
        $hold$4720 = $806;
        $next$5118 = $802;
       } else {
        $bits$47$lcssa = $807;
        $have$51$lcssa = $801;
        $hold$47$lcssa = $806;
        $next$51$lcssa = $802;
        break;
       }
      }
     } else {
      $bits$47$lcssa = $bits$0;
      $have$51$lcssa = $have$0;
      $hold$47$lcssa = $hold$0;
      $next$51$lcssa = $next$0;
     }
     $809 = $out$0 - $left$0 | 0;
     HEAP32[$49 >> 2] = (HEAP32[$49 >> 2] | 0) + $809;
     HEAP32[$50 >> 2] = (HEAP32[$50 >> 2] | 0) + $809;
     if (($out$0 | 0) != ($left$0 | 0)) {
      $817 = HEAP32[$23 >> 2] | 0;
      $819 = $put$0 + (0 - $809) | 0;
      if (!(HEAP32[$25 >> 2] | 0)) $822 = _adler32($817, $819, $809) | 0; else $822 = _crc32($817, $819, $809) | 0;
      HEAP32[$23 >> 2] = $822;
      HEAP32[$30 >> 2] = $822;
     }
     if (!(HEAP32[$25 >> 2] | 0)) $827 = _llvm_bswap_i32($hold$47$lcssa | 0) | 0; else $827 = $hold$47$lcssa;
     if (($827 | 0) == (HEAP32[$23 >> 2] | 0)) {
      $bits$48 = 0;
      $have$52 = $have$51$lcssa;
      $hold$48 = 0;
      $next$52 = $next$51$lcssa;
      $out$1 = $left$0;
     } else {
      HEAP32[$27 >> 2] = 103208;
      HEAP32[$2 >> 2] = 29;
      $bits$0$be = $bits$47$lcssa;
      $have$0$be = $have$51$lcssa;
      $hold$0$be = $hold$47$lcssa;
      $left$0$be = $left$0;
      $next$0$be = $next$51$lcssa;
      $out$0$be = $left$0;
      $put$0$be = $put$0;
      $ret$0$be = $ret$0;
      break L19;
     }
    }
    HEAP32[$2 >> 2] = 27;
    $bits$49 = $bits$48;
    $have$53 = $have$52;
    $hold$49 = $hold$48;
    $next$53 = $next$52;
    $out$2 = $out$1;
    label = 274;
    break;
   }
  case 2:
   {
    if ($bits$0 >>> 0 < 32) {
     $bits$3446 = $bits$0;
     $have$3444 = $have$0;
     $hold$3445 = $hold$0;
     $next$3443 = $next$0;
     label = 47;
    } else {
     $have$3$lcssa = $have$0;
     $hold$3$lcssa = $hold$0;
     $next$3$lcssa = $next$0;
     label = 49;
    }
    break;
   }
  case 5:
   {
    $bits$8 = $bits$0;
    $have$8 = $have$0;
    $hold$8 = $hold$0;
    $next$8 = $next$0;
    label = 73;
    break;
   }
  case 4:
   {
    $bits$5 = $bits$0;
    $have$5 = $have$0;
    $hold$5 = $hold$0;
    $next$5 = $next$0;
    label = 62;
    break;
   }
  case 14:
   {
    $bits$20 = $bits$0;
    $have$24 = $have$0;
    $hold$20 = $hold$0;
    $next$24 = $next$0;
    label = 143;
    break;
   }
  case 15:
   {
    $bits$21 = $bits$0;
    $have$25 = $have$0;
    $hold$21 = $hold$0;
    $next$25 = $next$0;
    label = 144;
    break;
   }
  case 12:
   {
    $bits$17 = $bits$0;
    $have$21 = $have$0;
    $hold$17 = $hold$0;
    $next$21 = $next$0;
    label = 125;
    break;
   }
  case 11:
   {
    $bits$16 = $bits$0;
    $have$20 = $have$0;
    $hold$16 = $hold$0;
    $next$20 = $next$0;
    label = 124;
    break;
   }
  case 17:
   {
    $$pre1227 = HEAP32[$54 >> 2] | 0;
    if ($$pre1227 >>> 0 < (HEAP32[$53 >> 2] | 0) >>> 0) {
     $424 = $$pre1227;
     $bits$2385 = $bits$0;
     $have$2783 = $have$0;
     $hold$2384 = $hold$0;
     $next$2782 = $next$0;
     label = 154;
    } else {
     $$lcssa80 = $$pre1227;
     $bits$23$lcssa = $bits$0;
     $have$27$lcssa = $have$0;
     $hold$23$lcssa = $hold$0;
     $next$27$lcssa = $next$0;
     label = 158;
    }
    break;
   }
  case 22:
   {
    $bits$40$ph = $bits$0;
    $have$44$ph = $have$0;
    $hold$40$ph = $hold$0;
    $next$44$ph = $next$0;
    $ret$5$ph = $ret$0;
    label = 225;
    break;
   }
  case 13:
   {
    $361 = $bits$0 & 7;
    $362 = $hold$0 >>> $361;
    $363 = $bits$0 - $361 | 0;
    if ($363 >>> 0 < 32) {
     $bits$19382 = $363;
     $have$23380 = $have$0;
     $hold$19381 = $362;
     $next$23379 = $next$0;
     while (1) {
      if (!$have$23380) {
       $bits$53 = $bits$19382;
       $have$57 = 0;
       $hold$53 = $hold$19381;
       $left$01066 = $left$0;
       $next$57 = $next$23379;
       $out$4 = $out$0;
       $ret$8 = $ret$0;
       break L17;
      }
      $366 = $have$23380 + -1 | 0;
      $367 = $next$23379 + 1 | 0;
      $371 = (HEAPU8[$next$23379 >> 0] << $bits$19382) + $hold$19381 | 0;
      $372 = $bits$19382 + 8 | 0;
      if ($372 >>> 0 < 32) {
       $bits$19382 = $372;
       $have$23380 = $366;
       $hold$19381 = $371;
       $next$23379 = $367;
      } else {
       $bits$19$lcssa = $372;
       $have$23$lcssa = $366;
       $hold$19$lcssa = $371;
       $next$23$lcssa = $367;
       break;
      }
     }
    } else {
     $bits$19$lcssa = $363;
     $have$23$lcssa = $have$0;
     $hold$19$lcssa = $362;
     $next$23$lcssa = $next$0;
    }
    $374 = $hold$19$lcssa & 65535;
    if (($374 | 0) == ($hold$19$lcssa >>> 16 ^ 65535 | 0)) {
     HEAP32[$31 >> 2] = $374;
     HEAP32[$2 >> 2] = 14;
     if ($39) {
      $bits$53$ph = 0;
      $have$57$ph = $have$23$lcssa;
      $hold$53$ph = 0;
      $left$0$lcssa1037 = $left$0;
      $next$57$ph = $next$23$lcssa;
      $ret$8$ph = $ret$0;
      label = 282;
      break L17;
     } else {
      $bits$20 = 0;
      $have$24 = $have$23$lcssa;
      $hold$20 = 0;
      $next$24 = $next$23$lcssa;
      label = 143;
      break L19;
     }
    } else {
     HEAP32[$27 >> 2] = 102976;
     HEAP32[$2 >> 2] = 29;
     $bits$0$be = $bits$19$lcssa;
     $have$0$be = $have$23$lcssa;
     $hold$0$be = $hold$19$lcssa;
     $left$0$be = $left$0;
     $next$0$be = $next$23$lcssa;
     $out$0$be = $out$0;
     $put$0$be = $put$0;
     $ret$0$be = $ret$0;
     break L19;
    }
    break;
   }
  case 30:
   {
    label = 298;
    break L17;
    break;
   }
  case 7:
   {
    $bits$10 = $bits$0;
    $have$13 = $have$0;
    $hold$10 = $hold$0;
    $next$13 = $next$0;
    label = 96;
    break;
   }
  case 8:
   {
    $bits$11 = $bits$0;
    $have$15 = $have$0;
    $hold$11 = $hold$0;
    $next$15 = $next$0;
    label = 109;
    break;
   }
  case 24:
   {
    $bits$46 = $bits$0;
    $have$50 = $have$0;
    $hold$46 = $hold$0;
    $next$50 = $next$0;
    $ret$7 = $ret$0;
    label = 243;
    break;
   }
  case 28:
   {
    $bits$53$ph = $bits$0;
    $have$57$ph = $have$0;
    $hold$53$ph = $hold$0;
    $left$0$lcssa1037 = $left$0;
    $next$57$ph = $next$0;
    $ret$8$ph = 1;
    label = 282;
    break L17;
    break;
   }
  case 29:
   {
    $bits$53 = $bits$0;
    $have$57 = $have$0;
    $hold$53 = $hold$0;
    $left$01066 = $left$0;
    $next$57 = $next$0;
    $out$4 = $out$0;
    $ret$8 = -3;
    break L17;
    break;
   }
  case 19:
   {
    $bits$32 = $bits$0;
    $have$36 = $have$0;
    $hold$32 = $hold$0;
    $next$36 = $next$0;
    $ret$2 = $ret$0;
    label = 198;
    break;
   }
  case 20:
   {
    $bits$33 = $bits$0;
    $have$37 = $have$0;
    $hold$33 = $hold$0;
    $next$37 = $next$0;
    $ret$3 = $ret$0;
    label = 199;
    break;
   }
  default:
   {
    $$0 = -2;
    label = 299;
    break L17;
   }
  } while (0);
  if ((label | 0) == 47) while (1) {
   label = 0;
   if (!$have$3444) {
    $bits$53 = $bits$3446;
    $have$57 = 0;
    $hold$53 = $hold$3445;
    $left$01066 = $left$0;
    $next$57 = $next$3443;
    $out$4 = $out$0;
    $ret$8 = $ret$0;
    break L17;
   }
   $137 = $have$3444 + -1 | 0;
   $138 = $next$3443 + 1 | 0;
   $142 = (HEAPU8[$next$3443 >> 0] << $bits$3446) + $hold$3445 | 0;
   $bits$3446 = $bits$3446 + 8 | 0;
   if ($bits$3446 >>> 0 >= 32) {
    $have$3$lcssa = $137;
    $hold$3$lcssa = $142;
    $next$3$lcssa = $138;
    label = 49;
    break;
   } else {
    $have$3444 = $137;
    $hold$3445 = $142;
    $next$3443 = $138;
    label = 47;
   }
  } else if ((label | 0) == 121) {
   label = 0;
   if (!(HEAP32[$32 >> 2] | 0)) {
    label = 122;
    break;
   }
   $338 = _adler32(0, 0, 0) | 0;
   HEAP32[$23 >> 2] = $338;
   HEAP32[$30 >> 2] = $338;
   HEAP32[$2 >> 2] = 11;
   $bits$16 = $bits$15;
   $have$20 = $have$19;
   $hold$16 = $hold$15;
   $next$20 = $next$19;
   label = 124;
  } else if ((label | 0) == 143) {
   label = 0;
   HEAP32[$2 >> 2] = 15;
   $bits$21 = $bits$20;
   $have$25 = $have$24;
   $hold$21 = $hold$20;
   $next$25 = $next$24;
   label = 144;
  } else if ((label | 0) == 154) while (1) {
   label = 0;
   if ($bits$2385 >>> 0 < 3) {
    $bits$2466 = $bits$2385;
    $have$2864 = $have$2783;
    $hold$2465 = $hold$2384;
    $next$2863 = $next$2782;
    while (1) {
     if (!$have$2864) {
      $bits$53 = $bits$2466;
      $have$57 = 0;
      $hold$53 = $hold$2465;
      $left$01066 = $left$0;
      $next$57 = $next$2863;
      $out$4 = $out$0;
      $ret$8 = $ret$0;
      break L17;
     }
     $413 = $have$2864 + -1 | 0;
     $414 = $next$2863 + 1 | 0;
     $418 = (HEAPU8[$next$2863 >> 0] << $bits$2466) + $hold$2465 | 0;
     $419 = $bits$2466 + 8 | 0;
     if ($419 >>> 0 < 3) {
      $bits$2466 = $419;
      $have$2864 = $413;
      $hold$2465 = $418;
      $next$2863 = $414;
     } else {
      $bits$24$lcssa = $419;
      $have$28$lcssa = $413;
      $hold$24$lcssa = $418;
      $next$28$lcssa = $414;
      break;
     }
    }
   } else {
    $bits$24$lcssa = $bits$2385;
    $have$28$lcssa = $have$2783;
    $hold$24$lcssa = $hold$2384;
    $next$28$lcssa = $next$2782;
   }
   HEAP32[$54 >> 2] = $424 + 1;
   HEAP16[$2 + (HEAPU16[102776 + ($424 << 1) >> 1] << 1) + 112 >> 1] = $hold$24$lcssa & 7;
   $429 = $hold$24$lcssa >>> 3;
   $430 = $bits$24$lcssa + -3 | 0;
   $431 = HEAP32[$54 >> 2] | 0;
   if ($431 >>> 0 < (HEAP32[$53 >> 2] | 0) >>> 0) {
    $424 = $431;
    $bits$2385 = $430;
    $have$2783 = $have$28$lcssa;
    $hold$2384 = $429;
    $next$2782 = $next$28$lcssa;
    label = 154;
   } else {
    $$lcssa80 = $431;
    $bits$23$lcssa = $430;
    $have$27$lcssa = $have$28$lcssa;
    $hold$23$lcssa = $429;
    $next$27$lcssa = $next$28$lcssa;
    label = 158;
    break;
   }
  } else if ((label | 0) == 274) {
   label = 0;
   if (!(HEAP32[$22 >> 2] | 0)) {
    $bits$51 = $bits$49;
    $have$55 = $have$53;
    $hold$51 = $hold$49;
    $next$55 = $next$53;
    label = 281;
    break;
   }
   if (!(HEAP32[$25 >> 2] | 0)) {
    $bits$51 = $bits$49;
    $have$55 = $have$53;
    $hold$51 = $hold$49;
    $next$55 = $next$53;
    label = 281;
    break;
   }
   if ($bits$49 >>> 0 < 32) {
    $bits$5034 = $bits$49;
    $have$5432 = $have$53;
    $hold$5033 = $hold$49;
    $next$5431 = $next$53;
    while (1) {
     if (!$have$5432) {
      $bits$53 = $bits$5034;
      $have$57 = 0;
      $hold$53 = $hold$5033;
      $left$01066 = $left$0;
      $next$57 = $next$5431;
      $out$4 = $out$2;
      $ret$8 = $ret$0;
      break L17;
     }
     $835 = $have$5432 + -1 | 0;
     $836 = $next$5431 + 1 | 0;
     $840 = (HEAPU8[$next$5431 >> 0] << $bits$5034) + $hold$5033 | 0;
     $841 = $bits$5034 + 8 | 0;
     if ($841 >>> 0 < 32) {
      $bits$5034 = $841;
      $have$5432 = $835;
      $hold$5033 = $840;
      $next$5431 = $836;
     } else {
      $bits$50$lcssa = $841;
      $have$54$lcssa = $835;
      $hold$50$lcssa = $840;
      $next$54$lcssa = $836;
      break;
     }
    }
   } else {
    $bits$50$lcssa = $bits$49;
    $have$54$lcssa = $have$53;
    $hold$50$lcssa = $hold$49;
    $next$54$lcssa = $next$53;
   }
   if (($hold$50$lcssa | 0) == (HEAP32[$50 >> 2] | 0)) {
    $bits$51 = 0;
    $have$55 = $have$54$lcssa;
    $hold$51 = 0;
    $next$55 = $next$54$lcssa;
    label = 281;
    break;
   }
   HEAP32[$27 >> 2] = 103232;
   HEAP32[$2 >> 2] = 29;
   $bits$0$be = $bits$50$lcssa;
   $have$0$be = $have$54$lcssa;
   $hold$0$be = $hold$50$lcssa;
   $left$0$be = $left$0;
   $next$0$be = $next$54$lcssa;
   $out$0$be = $out$2;
   $put$0$be = $put$0;
   $ret$0$be = $ret$0;
  }
  do if ((label | 0) == 49) {
   label = 0;
   $145 = HEAP32[$26 >> 2] | 0;
   if ($145) HEAP32[$145 + 4 >> 2] = $hold$3$lcssa;
   if (HEAP32[$25 >> 2] & 512) {
    HEAP8[$hbuf >> 0] = $hold$3$lcssa;
    HEAP8[$24 >> 0] = $hold$3$lcssa >>> 8;
    HEAP8[$60 >> 0] = $hold$3$lcssa >>> 16;
    HEAP8[$61 >> 0] = $hold$3$lcssa >>> 24;
    HEAP32[$23 >> 2] = _crc32(HEAP32[$23 >> 2] | 0, $hbuf, 4) | 0;
   }
   HEAP32[$2 >> 2] = 3;
   $bits$4461 = 0;
   $have$4459 = $have$3$lcssa;
   $hold$4460 = 0;
   $next$4458 = $next$3$lcssa;
   label = 55;
  } else if ((label | 0) == 124) {
   label = 0;
   if ($33) {
    $bits$53$ph = $bits$16;
    $have$57$ph = $have$20;
    $hold$53$ph = $hold$16;
    $left$0$lcssa1037 = $left$0;
    $next$57$ph = $next$20;
    $ret$8$ph = $ret$0;
    label = 282;
    break L17;
   } else {
    $bits$17 = $bits$16;
    $have$21 = $have$20;
    $hold$17 = $hold$16;
    $next$21 = $next$20;
    label = 125;
   }
  } else if ((label | 0) == 144) {
   label = 0;
   $378 = HEAP32[$31 >> 2] | 0;
   if (!$378) {
    HEAP32[$2 >> 2] = 11;
    $bits$0$be = $bits$21;
    $have$0$be = $have$25;
    $hold$0$be = $hold$21;
    $left$0$be = $left$0;
    $next$0$be = $next$25;
    $out$0$be = $out$0;
    $put$0$be = $put$0;
    $ret$0$be = $ret$0;
    break;
   }
   $have$25$ = $378 >>> 0 > $have$25 >>> 0 ? $have$25 : $378;
   $copy$4 = $have$25$ >>> 0 > $left$0 >>> 0 ? $left$0 : $have$25$;
   if (!$copy$4) {
    $bits$53$ph = $bits$21;
    $have$57$ph = $have$25;
    $hold$53$ph = $hold$21;
    $left$0$lcssa1037 = $left$0;
    $next$57$ph = $next$25;
    $ret$8$ph = $ret$0;
    label = 282;
    break L17;
   }
   _memcpy($put$0 | 0, $next$25 | 0, $copy$4 | 0) | 0;
   HEAP32[$31 >> 2] = (HEAP32[$31 >> 2] | 0) - $copy$4;
   $bits$0$be = $bits$21;
   $have$0$be = $have$25 - $copy$4 | 0;
   $hold$0$be = $hold$21;
   $left$0$be = $left$0 - $copy$4 | 0;
   $next$0$be = $next$25 + $copy$4 | 0;
   $out$0$be = $out$0;
   $put$0$be = $put$0 + $copy$4 | 0;
   $ret$0$be = $ret$0;
  } else if ((label | 0) == 158) {
   label = 0;
   if ($$lcssa80 >>> 0 < 19) {
    $436 = $$lcssa80;
    do {
     HEAP16[$2 + (HEAPU16[102776 + ($436 << 1) >> 1] << 1) + 112 >> 1] = 0;
     $436 = $436 + 1 | 0;
    } while (($436 | 0) != 19);
    HEAP32[$54 >> 2] = 19;
   }
   HEAP32[$56 >> 2] = $55;
   HEAP32[$35 >> 2] = $55;
   HEAP32[$36 >> 2] = 7;
   $441 = _inflate_table(0, $57, 19, $56, $36, $58) | 0;
   if (!$441) {
    HEAP32[$54 >> 2] = 0;
    HEAP32[$2 >> 2] = 18;
    $446 = 0;
    $bits$25$ph = $bits$23$lcssa;
    $have$29$ph = $have$27$lcssa;
    $hold$25$ph = $hold$23$lcssa;
    $next$29$ph = $next$27$lcssa;
    $ret$1$ph = 0;
    label = 164;
    break;
   } else {
    HEAP32[$27 >> 2] = 103048;
    HEAP32[$2 >> 2] = 29;
    $bits$0$be = $bits$23$lcssa;
    $have$0$be = $have$27$lcssa;
    $hold$0$be = $hold$23$lcssa;
    $left$0$be = $left$0;
    $next$0$be = $next$27$lcssa;
    $out$0$be = $out$0;
    $put$0$be = $put$0;
    $ret$0$be = $441;
    break;
   }
  } while (0);
  L163 : do if ((label | 0) == 55) while (1) {
   label = 0;
   if (!$have$4459) {
    $bits$53 = $bits$4461;
    $have$57 = 0;
    $hold$53 = $hold$4460;
    $left$01066 = $left$0;
    $next$57 = $next$4458;
    $out$4 = $out$0;
    $ret$8 = $ret$0;
    break L17;
   }
   $162 = $have$4459 + -1 | 0;
   $163 = $next$4458 + 1 | 0;
   $167 = (HEAPU8[$next$4458 >> 0] << $bits$4461) + $hold$4460 | 0;
   $bits$4461 = $bits$4461 + 8 | 0;
   if ($bits$4461 >>> 0 >= 16) {
    $have$4$lcssa = $162;
    $hold$4$lcssa = $167;
    $next$4$lcssa = $163;
    label = 57;
    break;
   } else {
    $have$4459 = $162;
    $hold$4460 = $167;
    $next$4458 = $163;
    label = 55;
   }
  } else if ((label | 0) == 125) {
   label = 0;
   if (HEAP32[$34 >> 2] | 0) {
    $342 = $bits$17 & 7;
    HEAP32[$2 >> 2] = 26;
    $bits$0$be = $bits$17 - $342 | 0;
    $have$0$be = $have$21;
    $hold$0$be = $hold$17 >>> $342;
    $left$0$be = $left$0;
    $next$0$be = $next$21;
    $out$0$be = $out$0;
    $put$0$be = $put$0;
    $ret$0$be = $ret$0;
    break;
   }
   if ($bits$17 >>> 0 < 3) {
    $bits$18414 = $bits$17;
    $have$22412 = $have$21;
    $hold$18413 = $hold$17;
    $next$22411 = $next$21;
    while (1) {
     if (!$have$22412) {
      $bits$53 = $bits$18414;
      $have$57 = 0;
      $hold$53 = $hold$18413;
      $left$01066 = $left$0;
      $next$57 = $next$22411;
      $out$4 = $out$0;
      $ret$8 = $ret$0;
      break L17;
     }
     $346 = $have$22412 + -1 | 0;
     $347 = $next$22411 + 1 | 0;
     $351 = (HEAPU8[$next$22411 >> 0] << $bits$18414) + $hold$18413 | 0;
     $352 = $bits$18414 + 8 | 0;
     if ($352 >>> 0 < 3) {
      $bits$18414 = $352;
      $have$22412 = $346;
      $hold$18413 = $351;
      $next$22411 = $347;
     } else {
      $bits$18$lcssa = $352;
      $have$22$lcssa = $346;
      $hold$18$lcssa = $351;
      $next$22$lcssa = $347;
      break;
     }
    }
   } else {
    $bits$18$lcssa = $bits$17;
    $have$22$lcssa = $have$21;
    $hold$18$lcssa = $hold$17;
    $next$22$lcssa = $next$21;
   }
   HEAP32[$34 >> 2] = $hold$18$lcssa & 1;
   $356 = $hold$18$lcssa >>> 1 & 3;
   if (!$356) HEAP32[$2 >> 2] = 13; else if (($356 | 0) == 1) {
    HEAP32[$35 >> 2] = 103256;
    HEAP32[$36 >> 2] = 9;
    HEAP32[$37 >> 2] = 105304;
    HEAP32[$38 >> 2] = 5;
    HEAP32[$2 >> 2] = 19;
    if ($39) {
     label = 133;
     break L17;
    }
   } else if (($356 | 0) == 2) HEAP32[$2 >> 2] = 16; else if (($356 | 0) == 3) {
    HEAP32[$27 >> 2] = 102952;
    HEAP32[$2 >> 2] = 29;
   }
   $bits$0$be = $bits$18$lcssa + -3 | 0;
   $have$0$be = $have$22$lcssa;
   $hold$0$be = $hold$18$lcssa >>> 3;
   $left$0$be = $left$0;
   $next$0$be = $next$22$lcssa;
   $out$0$be = $out$0;
   $put$0$be = $put$0;
   $ret$0$be = $ret$0;
  } else if ((label | 0) == 164) {
   label = 0;
   $443 = HEAP32[$51 >> 2] | 0;
   $444 = HEAP32[$52 >> 2] | 0;
   do if ($446 >>> 0 < ($444 + $443 | 0) >>> 0) {
    $474 = $446;
    $538 = $443;
    $539 = $444;
    $bits$25215 = $bits$25$ph;
    $have$29213 = $have$29$ph;
    $hold$25214 = $hold$25$ph;
    $next$29212 = $next$29$ph;
    L184 : while (1) {
     $450 = (1 << HEAP32[$36 >> 2]) + -1 | 0;
     $451 = $450 & $hold$25214;
     $452 = HEAP32[$35 >> 2] | 0;
     $455 = HEAPU8[$452 + ($451 << 2) + 1 >> 0] | 0;
     if ($455 >>> 0 > $bits$25215 >>> 0) {
      $bits$26110 = $bits$25215;
      $have$30108 = $have$29213;
      $hold$26109 = $hold$25214;
      $next$30107 = $next$29212;
      while (1) {
       if (!$have$30108) {
        $bits$53 = $bits$26110;
        $have$57 = 0;
        $hold$53 = $hold$26109;
        $left$01066 = $left$0;
        $next$57 = $next$30107;
        $out$4 = $out$0;
        $ret$8 = $ret$1$ph;
        break L17;
       }
       $458 = $have$30108 + -1 | 0;
       $459 = $next$30107 + 1 | 0;
       $463 = (HEAPU8[$next$30107 >> 0] << $bits$26110) + $hold$26109 | 0;
       $464 = $bits$26110 + 8 | 0;
       $465 = $450 & $463;
       $468 = HEAPU8[$452 + ($465 << 2) + 1 >> 0] | 0;
       if ($468 >>> 0 > $464 >>> 0) {
        $bits$26110 = $464;
        $have$30108 = $458;
        $hold$26109 = $463;
        $next$30107 = $459;
       } else {
        $$pn = $468;
        $$pn1237 = $465;
        $bits$26$lcssa = $464;
        $have$30$lcssa = $458;
        $hold$26$lcssa = $463;
        $next$30$lcssa = $459;
        break;
       }
      }
     } else {
      $$pn = $455;
      $$pn1237 = $451;
      $bits$26$lcssa = $bits$25215;
      $have$30$lcssa = $have$29213;
      $hold$26$lcssa = $hold$25214;
      $next$30$lcssa = $next$29212;
     }
     $$lcssa101 = HEAP16[$452 + ($$pn1237 << 2) + 2 >> 1] | 0;
     L191 : do if (($$lcssa101 & 65535) < 16) {
      HEAP32[$54 >> 2] = $474 + 1;
      HEAP16[$2 + ($474 << 1) + 112 >> 1] = $$lcssa101;
      $bits$25$be = $bits$26$lcssa - $$pn | 0;
      $have$29$be = $have$30$lcssa;
      $hold$25$be = $hold$26$lcssa >>> $$pn;
      $next$29$be = $next$30$lcssa;
     } else {
      if ($$lcssa101 << 16 >> 16 == 16) {
       $483 = $$pn + 2 | 0;
       if ($bits$26$lcssa >>> 0 < $483 >>> 0) {
        $bits$27145 = $bits$26$lcssa;
        $have$31143 = $have$30$lcssa;
        $hold$27144 = $hold$26$lcssa;
        $next$31142 = $next$30$lcssa;
        while (1) {
         if (!$have$31143) {
          $bits$53 = $bits$27145;
          $have$57 = 0;
          $hold$53 = $hold$27144;
          $left$01066 = $left$0;
          $next$57 = $next$31142;
          $out$4 = $out$0;
          $ret$8 = $ret$1$ph;
          break L17;
         }
         $488 = $have$31143 + -1 | 0;
         $489 = $next$31142 + 1 | 0;
         $493 = (HEAPU8[$next$31142 >> 0] << $bits$27145) + $hold$27144 | 0;
         $494 = $bits$27145 + 8 | 0;
         if ($494 >>> 0 < $483 >>> 0) {
          $bits$27145 = $494;
          $have$31143 = $488;
          $hold$27144 = $493;
          $next$31142 = $489;
         } else {
          $bits$27$lcssa = $494;
          $have$31$lcssa = $488;
          $hold$27$lcssa = $493;
          $next$31$lcssa = $489;
          break;
         }
        }
       } else {
        $bits$27$lcssa = $bits$26$lcssa;
        $have$31$lcssa = $have$30$lcssa;
        $hold$27$lcssa = $hold$26$lcssa;
        $next$31$lcssa = $next$30$lcssa;
       }
       $496 = $hold$27$lcssa >>> $$pn;
       $497 = $bits$27$lcssa - $$pn | 0;
       if (!$474) {
        label = 178;
        break L184;
       }
       $bits$30 = $497 + -2 | 0;
       $copy$5 = ($496 & 3) + 3 | 0;
       $have$34 = $have$31$lcssa;
       $hold$30 = $496 >>> 2;
       $len$0 = HEAP16[$2 + ($474 + -1 << 1) + 112 >> 1] | 0;
       $next$34 = $next$31$lcssa;
      } else if ($$lcssa101 << 16 >> 16 == 17) {
       $485 = $$pn + 3 | 0;
       if ($bits$26$lcssa >>> 0 < $485 >>> 0) {
        $bits$28129 = $bits$26$lcssa;
        $have$32127 = $have$30$lcssa;
        $hold$28128 = $hold$26$lcssa;
        $next$32126 = $next$30$lcssa;
        while (1) {
         if (!$have$32127) {
          $bits$53 = $bits$28129;
          $have$57 = 0;
          $hold$53 = $hold$28128;
          $left$01066 = $left$0;
          $next$57 = $next$32126;
          $out$4 = $out$0;
          $ret$8 = $ret$1$ph;
          break L17;
         }
         $507 = $have$32127 + -1 | 0;
         $508 = $next$32126 + 1 | 0;
         $512 = (HEAPU8[$next$32126 >> 0] << $bits$28129) + $hold$28128 | 0;
         $513 = $bits$28129 + 8 | 0;
         if ($513 >>> 0 < $485 >>> 0) {
          $bits$28129 = $513;
          $have$32127 = $507;
          $hold$28128 = $512;
          $next$32126 = $508;
         } else {
          $bits$28$lcssa = $513;
          $have$32$lcssa = $507;
          $hold$28$lcssa = $512;
          $next$32$lcssa = $508;
          break;
         }
        }
       } else {
        $bits$28$lcssa = $bits$26$lcssa;
        $have$32$lcssa = $have$30$lcssa;
        $hold$28$lcssa = $hold$26$lcssa;
        $next$32$lcssa = $next$30$lcssa;
       }
       $515 = $hold$28$lcssa >>> $$pn;
       $bits$30 = -3 - $$pn + $bits$28$lcssa | 0;
       $copy$5 = ($515 & 7) + 3 | 0;
       $have$34 = $have$32$lcssa;
       $hold$30 = $515 >>> 3;
       $len$0 = 0;
       $next$34 = $next$32$lcssa;
      } else {
       $481 = $$pn + 7 | 0;
       if ($bits$26$lcssa >>> 0 < $481 >>> 0) {
        $bits$29161 = $bits$26$lcssa;
        $have$33159 = $have$30$lcssa;
        $hold$29160 = $hold$26$lcssa;
        $next$33158 = $next$30$lcssa;
        while (1) {
         if (!$have$33159) {
          $bits$53 = $bits$29161;
          $have$57 = 0;
          $hold$53 = $hold$29160;
          $left$01066 = $left$0;
          $next$57 = $next$33158;
          $out$4 = $out$0;
          $ret$8 = $ret$1$ph;
          break L17;
         }
         $522 = $have$33159 + -1 | 0;
         $523 = $next$33158 + 1 | 0;
         $527 = (HEAPU8[$next$33158 >> 0] << $bits$29161) + $hold$29160 | 0;
         $528 = $bits$29161 + 8 | 0;
         if ($528 >>> 0 < $481 >>> 0) {
          $bits$29161 = $528;
          $have$33159 = $522;
          $hold$29160 = $527;
          $next$33158 = $523;
         } else {
          $bits$29$lcssa = $528;
          $have$33$lcssa = $522;
          $hold$29$lcssa = $527;
          $next$33$lcssa = $523;
          break;
         }
        }
       } else {
        $bits$29$lcssa = $bits$26$lcssa;
        $have$33$lcssa = $have$30$lcssa;
        $hold$29$lcssa = $hold$26$lcssa;
        $next$33$lcssa = $next$30$lcssa;
       }
       $530 = $hold$29$lcssa >>> $$pn;
       $bits$30 = -7 - $$pn + $bits$29$lcssa | 0;
       $copy$5 = ($530 & 127) + 11 | 0;
       $have$34 = $have$33$lcssa;
       $hold$30 = $530 >>> 7;
       $len$0 = 0;
       $next$34 = $next$33$lcssa;
      }
      if (($474 + $copy$5 | 0) >>> 0 > ($539 + $538 | 0) >>> 0) {
       label = 187;
       break L184;
      } else {
       $543 = $474;
       $copy$6170 = $copy$5;
      }
      while (1) {
       $541 = $copy$6170 + -1 | 0;
       HEAP32[$54 >> 2] = $543 + 1;
       HEAP16[$2 + ($543 << 1) + 112 >> 1] = $len$0;
       if (!$541) {
        $bits$25$be = $bits$30;
        $have$29$be = $have$34;
        $hold$25$be = $hold$30;
        $next$29$be = $next$34;
        break L191;
       }
       $543 = HEAP32[$54 >> 2] | 0;
       $copy$6170 = $541;
      }
     } while (0);
     $474 = HEAP32[$54 >> 2] | 0;
     $538 = HEAP32[$51 >> 2] | 0;
     $539 = HEAP32[$52 >> 2] | 0;
     if ($474 >>> 0 >= ($539 + $538 | 0) >>> 0) {
      label = 190;
      break;
     } else {
      $bits$25215 = $bits$25$be;
      $have$29213 = $have$29$be;
      $hold$25214 = $hold$25$be;
      $next$29212 = $next$29$be;
     }
    }
    if ((label | 0) == 178) {
     label = 0;
     HEAP32[$27 >> 2] = 103080;
     HEAP32[$2 >> 2] = 29;
     $bits$0$be = $497;
     $have$0$be = $have$31$lcssa;
     $hold$0$be = $496;
     $left$0$be = $left$0;
     $next$0$be = $next$31$lcssa;
     $out$0$be = $out$0;
     $put$0$be = $put$0;
     $ret$0$be = $ret$1$ph;
     break L163;
    } else if ((label | 0) == 187) {
     label = 0;
     HEAP32[$27 >> 2] = 103080;
     HEAP32[$2 >> 2] = 29;
     $bits$0$be = $bits$30;
     $have$0$be = $have$34;
     $hold$0$be = $hold$30;
     $left$0$be = $left$0;
     $next$0$be = $next$34;
     $out$0$be = $out$0;
     $put$0$be = $put$0;
     $ret$0$be = $ret$1$ph;
     break L163;
    } else if ((label | 0) == 190) {
     label = 0;
     if ((HEAP32[$2 >> 2] | 0) == 29) {
      $bits$0$be = $bits$25$be;
      $have$0$be = $have$29$be;
      $hold$0$be = $hold$25$be;
      $left$0$be = $left$0;
      $next$0$be = $next$29$be;
      $out$0$be = $out$0;
      $put$0$be = $put$0;
      $ret$0$be = $ret$1$ph;
      break L163;
     } else {
      $548 = $538;
      $bits$25$lcssa1251 = $bits$25$be;
      $have$29$lcssa1253 = $have$29$be;
      $hold$25$lcssa1252 = $hold$25$be;
      $next$29$lcssa1254 = $next$29$be;
      break;
     }
    }
   } else {
    $548 = $443;
    $bits$25$lcssa1251 = $bits$25$ph;
    $have$29$lcssa1253 = $have$29$ph;
    $hold$25$lcssa1252 = $hold$25$ph;
    $next$29$lcssa1254 = $next$29$ph;
   } while (0);
   if (!(HEAP16[$59 >> 1] | 0)) {
    HEAP32[$27 >> 2] = 103112;
    HEAP32[$2 >> 2] = 29;
    $bits$0$be = $bits$25$lcssa1251;
    $have$0$be = $have$29$lcssa1253;
    $hold$0$be = $hold$25$lcssa1252;
    $left$0$be = $left$0;
    $next$0$be = $next$29$lcssa1254;
    $out$0$be = $out$0;
    $put$0$be = $put$0;
    $ret$0$be = $ret$1$ph;
    break;
   }
   HEAP32[$56 >> 2] = $55;
   HEAP32[$35 >> 2] = $55;
   HEAP32[$36 >> 2] = 9;
   $549 = _inflate_table(1, $57, $548, $56, $36, $58) | 0;
   if ($549) {
    HEAP32[$27 >> 2] = 103152;
    HEAP32[$2 >> 2] = 29;
    $bits$0$be = $bits$25$lcssa1251;
    $have$0$be = $have$29$lcssa1253;
    $hold$0$be = $hold$25$lcssa1252;
    $left$0$be = $left$0;
    $next$0$be = $next$29$lcssa1254;
    $out$0$be = $out$0;
    $put$0$be = $put$0;
    $ret$0$be = $549;
    break;
   }
   HEAP32[$37 >> 2] = HEAP32[$56 >> 2];
   HEAP32[$38 >> 2] = 6;
   $555 = _inflate_table(2, $2 + (HEAP32[$51 >> 2] << 1) + 112 | 0, HEAP32[$52 >> 2] | 0, $56, $38, $58) | 0;
   if (!$555) {
    HEAP32[$2 >> 2] = 19;
    if ($39) {
     $bits$53$ph = $bits$25$lcssa1251;
     $have$57$ph = $have$29$lcssa1253;
     $hold$53$ph = $hold$25$lcssa1252;
     $left$0$lcssa1037 = $left$0;
     $next$57$ph = $next$29$lcssa1254;
     $ret$8$ph = 0;
     label = 282;
     break L17;
    } else {
     $bits$32 = $bits$25$lcssa1251;
     $have$36 = $have$29$lcssa1253;
     $hold$32 = $hold$25$lcssa1252;
     $next$36 = $next$29$lcssa1254;
     $ret$2 = 0;
     label = 198;
     break;
    }
   } else {
    HEAP32[$27 >> 2] = 103184;
    HEAP32[$2 >> 2] = 29;
    $bits$0$be = $bits$25$lcssa1251;
    $have$0$be = $have$29$lcssa1253;
    $hold$0$be = $hold$25$lcssa1252;
    $left$0$be = $left$0;
    $next$0$be = $next$29$lcssa1254;
    $out$0$be = $out$0;
    $put$0$be = $put$0;
    $ret$0$be = $555;
    break;
   }
  } while (0);
  if ((label | 0) == 57) {
   label = 0;
   $170 = HEAP32[$26 >> 2] | 0;
   if ($170) {
    HEAP32[$170 + 8 >> 2] = $hold$4$lcssa & 255;
    HEAP32[$170 + 12 >> 2] = $hold$4$lcssa >>> 8;
   }
   if (HEAP32[$25 >> 2] & 512) {
    HEAP8[$hbuf >> 0] = $hold$4$lcssa;
    HEAP8[$24 >> 0] = $hold$4$lcssa >>> 8;
    HEAP32[$23 >> 2] = _crc32(HEAP32[$23 >> 2] | 0, $hbuf, 2) | 0;
   }
   HEAP32[$2 >> 2] = 4;
   $bits$5 = 0;
   $have$5 = $have$4$lcssa;
   $hold$5 = 0;
   $next$5 = $next$4$lcssa;
   label = 62;
  } else if ((label | 0) == 198) {
   label = 0;
   HEAP32[$2 >> 2] = 20;
   $bits$33 = $bits$32;
   $have$37 = $have$36;
   $hold$33 = $hold$32;
   $next$37 = $next$36;
   $ret$3 = $ret$2;
   label = 199;
  }
  do if ((label | 0) == 62) {
   label = 0;
   $184 = HEAP32[$25 >> 2] | 0;
   if (!($184 & 1024)) {
    $208 = HEAP32[$26 >> 2] | 0;
    if (!$208) {
     $bits$7 = $bits$5;
     $have$7 = $have$5;
     $hold$7 = $hold$5;
     $next$7 = $next$5;
    } else {
     HEAP32[$208 + 16 >> 2] = 0;
     $bits$7 = $bits$5;
     $have$7 = $have$5;
     $hold$7 = $hold$5;
     $next$7 = $next$5;
    }
   } else {
    if ($bits$5 >>> 0 < 16) {
     $bits$6476 = $bits$5;
     $have$6474 = $have$5;
     $hold$6475 = $hold$5;
     $next$6473 = $next$5;
     while (1) {
      if (!$have$6474) {
       $bits$53 = $bits$6476;
       $have$57 = 0;
       $hold$53 = $hold$6475;
       $left$01066 = $left$0;
       $next$57 = $next$6473;
       $out$4 = $out$0;
       $ret$8 = $ret$0;
       break L17;
      }
      $189 = $have$6474 + -1 | 0;
      $190 = $next$6473 + 1 | 0;
      $194 = (HEAPU8[$next$6473 >> 0] << $bits$6476) + $hold$6475 | 0;
      $bits$6476 = $bits$6476 + 8 | 0;
      if ($bits$6476 >>> 0 >= 16) {
       $have$6$lcssa = $189;
       $hold$6$lcssa = $194;
       $next$6$lcssa = $190;
       break;
      } else {
       $have$6474 = $189;
       $hold$6475 = $194;
       $next$6473 = $190;
      }
     }
    } else {
     $have$6$lcssa = $have$5;
     $hold$6$lcssa = $hold$5;
     $next$6$lcssa = $next$5;
    }
    HEAP32[$31 >> 2] = $hold$6$lcssa;
    $197 = HEAP32[$26 >> 2] | 0;
    if (!$197) $201 = $184; else {
     HEAP32[$197 + 20 >> 2] = $hold$6$lcssa;
     $201 = HEAP32[$25 >> 2] | 0;
    }
    if (!($201 & 512)) {
     $bits$7 = 0;
     $have$7 = $have$6$lcssa;
     $hold$7 = 0;
     $next$7 = $next$6$lcssa;
    } else {
     HEAP8[$hbuf >> 0] = $hold$6$lcssa;
     HEAP8[$24 >> 0] = $hold$6$lcssa >>> 8;
     HEAP32[$23 >> 2] = _crc32(HEAP32[$23 >> 2] | 0, $hbuf, 2) | 0;
     $bits$7 = 0;
     $have$7 = $have$6$lcssa;
     $hold$7 = 0;
     $next$7 = $next$6$lcssa;
    }
   }
   HEAP32[$2 >> 2] = 5;
   $bits$8 = $bits$7;
   $have$8 = $have$7;
   $hold$8 = $hold$7;
   $next$8 = $next$7;
   label = 73;
  } else if ((label | 0) == 199) {
   label = 0;
   if ($have$37 >>> 0 > 5 & $left$0 >>> 0 > 257) {
    HEAP32[$4 >> 2] = $put$0;
    HEAP32[$14 >> 2] = $left$0;
    HEAP32[$strm >> 2] = $next$37;
    HEAP32[$16 >> 2] = $have$37;
    HEAP32[$18 >> 2] = $hold$33;
    HEAP32[$20 >> 2] = $bits$33;
    _inflate_fast($strm, $out$0);
    $559 = HEAP32[$4 >> 2] | 0;
    $560 = HEAP32[$14 >> 2] | 0;
    $561 = HEAP32[$strm >> 2] | 0;
    $562 = HEAP32[$16 >> 2] | 0;
    $563 = HEAP32[$18 >> 2] | 0;
    $564 = HEAP32[$20 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) != 11) {
     $bits$0$be = $564;
     $have$0$be = $562;
     $hold$0$be = $563;
     $left$0$be = $560;
     $next$0$be = $561;
     $out$0$be = $out$0;
     $put$0$be = $559;
     $ret$0$be = $ret$3;
     break;
    }
    HEAP32[$40 >> 2] = -1;
    $bits$0$be = $564;
    $have$0$be = $562;
    $hold$0$be = $563;
    $left$0$be = $560;
    $next$0$be = $561;
    $out$0$be = $out$0;
    $put$0$be = $559;
    $ret$0$be = $ret$3;
    break;
   }
   HEAP32[$40 >> 2] = 0;
   $569 = (1 << HEAP32[$36 >> 2]) + -1 | 0;
   $570 = $569 & $hold$33;
   $571 = HEAP32[$35 >> 2] | 0;
   $573 = HEAP8[$571 + ($570 << 2) + 1 >> 0] | 0;
   $574 = $573 & 255;
   if ($574 >>> 0 > $bits$33 >>> 0) {
    $bits$34241 = $bits$33;
    $have$38239 = $have$37;
    $hold$34240 = $hold$33;
    $next$38238 = $next$37;
    while (1) {
     if (!$have$38239) {
      $bits$53 = $bits$34241;
      $have$57 = 0;
      $hold$53 = $hold$34240;
      $left$01066 = $left$0;
      $next$57 = $next$38238;
      $out$4 = $out$0;
      $ret$8 = $ret$3;
      break L17;
     }
     $577 = $have$38239 + -1 | 0;
     $578 = $next$38238 + 1 | 0;
     $582 = (HEAPU8[$next$38238 >> 0] << $bits$34241) + $hold$34240 | 0;
     $583 = $bits$34241 + 8 | 0;
     $584 = $569 & $582;
     $586 = HEAP8[$571 + ($584 << 2) + 1 >> 0] | 0;
     $587 = $586 & 255;
     if ($587 >>> 0 > $583 >>> 0) {
      $bits$34241 = $583;
      $have$38239 = $577;
      $hold$34240 = $582;
      $next$38238 = $578;
     } else {
      $$lcssa232 = $586;
      $$lcssa236 = $587;
      $$pn1234 = $584;
      $bits$34$lcssa = $583;
      $have$38$lcssa = $577;
      $hold$34$lcssa = $582;
      $next$38$lcssa = $578;
      break;
     }
    }
   } else {
    $$lcssa232 = $573;
    $$lcssa236 = $574;
    $$pn1234 = $570;
    $bits$34$lcssa = $bits$33;
    $have$38$lcssa = $have$37;
    $hold$34$lcssa = $hold$33;
    $next$38$lcssa = $next$37;
   }
   $$lcssa230 = HEAP8[$571 + ($$pn1234 << 2) >> 0] | 0;
   $$lcssa234 = HEAP16[$571 + ($$pn1234 << 2) + 2 >> 1] | 0;
   $589 = $$lcssa230 & 255;
   if (!($$lcssa230 << 24 >> 24)) {
    $631 = 0;
    $bits$36 = $bits$34$lcssa;
    $have$40 = $have$38$lcssa;
    $here$sroa$0$0 = 0;
    $here$sroa$1$0 = $$lcssa232;
    $here$sroa$2$0 = $$lcssa234;
    $hold$36 = $hold$34$lcssa;
    $next$40 = $next$38$lcssa;
   } else if (!($589 & 240)) {
    $593 = $$lcssa234 & 65535;
    $596 = (1 << $$lcssa236 + $589) + -1 | 0;
    $599 = (($hold$34$lcssa & $596) >>> $$lcssa236) + $593 | 0;
    $601 = HEAP8[$571 + ($599 << 2) + 1 >> 0] | 0;
    if ((($601 & 255) + $$lcssa236 | 0) >>> 0 > $bits$34$lcssa >>> 0) {
     $bits$35269 = $bits$34$lcssa;
     $have$39267 = $have$38$lcssa;
     $hold$35268 = $hold$34$lcssa;
     $next$39266 = $next$38$lcssa;
     while (1) {
      if (!$have$39267) {
       $bits$53 = $bits$35269;
       $have$57 = 0;
       $hold$53 = $hold$35268;
       $left$01066 = $left$0;
       $next$57 = $next$39266;
       $out$4 = $out$0;
       $ret$8 = $ret$3;
       break L17;
      }
      $606 = $have$39267 + -1 | 0;
      $607 = $next$39266 + 1 | 0;
      $611 = (HEAPU8[$next$39266 >> 0] << $bits$35269) + $hold$35268 | 0;
      $612 = $bits$35269 + 8 | 0;
      $615 = (($611 & $596) >>> $$lcssa236) + $593 | 0;
      $617 = HEAP8[$571 + ($615 << 2) + 1 >> 0] | 0;
      if ((($617 & 255) + $$lcssa236 | 0) >>> 0 > $612 >>> 0) {
       $bits$35269 = $612;
       $have$39267 = $606;
       $hold$35268 = $611;
       $next$39266 = $607;
      } else {
       $$lcssa260 = $615;
       $$lcssa264 = $617;
       $bits$35$lcssa = $612;
       $have$39$lcssa = $606;
       $hold$35$lcssa = $611;
       $next$39$lcssa = $607;
       break;
      }
     }
    } else {
     $$lcssa260 = $599;
     $$lcssa264 = $601;
     $bits$35$lcssa = $bits$34$lcssa;
     $have$39$lcssa = $have$38$lcssa;
     $hold$35$lcssa = $hold$34$lcssa;
     $next$39$lcssa = $next$38$lcssa;
    }
    $623 = HEAP16[$571 + ($$lcssa260 << 2) + 2 >> 1] | 0;
    $624 = HEAP8[$571 + ($$lcssa260 << 2) >> 0] | 0;
    HEAP32[$40 >> 2] = $$lcssa236;
    $631 = $$lcssa236;
    $bits$36 = $bits$35$lcssa - $$lcssa236 | 0;
    $have$40 = $have$39$lcssa;
    $here$sroa$0$0 = $624;
    $here$sroa$1$0 = $$lcssa264;
    $here$sroa$2$0 = $623;
    $hold$36 = $hold$35$lcssa >>> $$lcssa236;
    $next$40 = $next$39$lcssa;
   } else {
    $631 = 0;
    $bits$36 = $bits$34$lcssa;
    $have$40 = $have$38$lcssa;
    $here$sroa$0$0 = $$lcssa230;
    $here$sroa$1$0 = $$lcssa232;
    $here$sroa$2$0 = $$lcssa234;
    $hold$36 = $hold$34$lcssa;
    $next$40 = $next$38$lcssa;
   }
   $627 = $here$sroa$1$0 & 255;
   $628 = $hold$36 >>> $627;
   $629 = $bits$36 - $627 | 0;
   HEAP32[$40 >> 2] = $631 + $627;
   HEAP32[$31 >> 2] = $here$sroa$2$0 & 65535;
   $633 = $here$sroa$0$0 & 255;
   if (!($here$sroa$0$0 << 24 >> 24)) {
    HEAP32[$2 >> 2] = 25;
    $bits$0$be = $629;
    $have$0$be = $have$40;
    $hold$0$be = $628;
    $left$0$be = $left$0;
    $next$0$be = $next$40;
    $out$0$be = $out$0;
    $put$0$be = $put$0;
    $ret$0$be = $ret$3;
    break;
   }
   if ($633 & 32) {
    HEAP32[$40 >> 2] = -1;
    HEAP32[$2 >> 2] = 11;
    $bits$0$be = $629;
    $have$0$be = $have$40;
    $hold$0$be = $628;
    $left$0$be = $left$0;
    $next$0$be = $next$40;
    $out$0$be = $out$0;
    $put$0$be = $put$0;
    $ret$0$be = $ret$3;
    break;
   }
   if (!($633 & 64)) {
    $639 = $633 & 15;
    HEAP32[$41 >> 2] = $639;
    HEAP32[$2 >> 2] = 21;
    $640 = $639;
    $bits$37 = $629;
    $have$41 = $have$40;
    $hold$37 = $628;
    $next$41 = $next$40;
    $ret$4 = $ret$3;
    label = 218;
    break;
   } else {
    HEAP32[$27 >> 2] = 105744;
    HEAP32[$2 >> 2] = 29;
    $bits$0$be = $629;
    $have$0$be = $have$40;
    $hold$0$be = $628;
    $left$0$be = $left$0;
    $next$0$be = $next$40;
    $out$0$be = $out$0;
    $put$0$be = $put$0;
    $ret$0$be = $ret$3;
    break;
   }
  } while (0);
  if ((label | 0) == 73) {
   label = 0;
   $211 = HEAP32[$25 >> 2] | 0;
   if (!($211 & 1024)) {
    $have$10 = $have$8;
    $next$10 = $next$8;
   } else {
    $214 = HEAP32[$31 >> 2] | 0;
    $have$8$ = $214 >>> 0 > $have$8 >>> 0 ? $have$8 : $214;
    if (!$have$8$) {
     $241 = $214;
     $have$9 = $have$8;
     $next$9 = $next$8;
    } else {
     $217 = HEAP32[$26 >> 2] | 0;
     if (!$217) $233 = $211; else {
      $220 = HEAP32[$217 + 16 >> 2] | 0;
      if (!$220) $233 = $211; else {
       $224 = (HEAP32[$217 + 20 >> 2] | 0) - $214 | 0;
       $228 = HEAP32[$217 + 24 >> 2] | 0;
       _memcpy($220 + $224 | 0, $next$8 | 0, (($224 + $have$8$ | 0) >>> 0 > $228 >>> 0 ? $228 - $224 | 0 : $have$8$) | 0) | 0;
       $233 = HEAP32[$25 >> 2] | 0;
      }
     }
     if ($233 & 512) HEAP32[$23 >> 2] = _crc32(HEAP32[$23 >> 2] | 0, $next$8, $have$8$) | 0;
     $240 = (HEAP32[$31 >> 2] | 0) - $have$8$ | 0;
     HEAP32[$31 >> 2] = $240;
     $241 = $240;
     $have$9 = $have$8 - $have$8$ | 0;
     $next$9 = $next$8 + $have$8$ | 0;
    }
    if (!$241) {
     $have$10 = $have$9;
     $next$10 = $next$9;
    } else {
     $bits$53$ph = $bits$8;
     $have$57$ph = $have$9;
     $hold$53$ph = $hold$8;
     $left$0$lcssa1037 = $left$0;
     $next$57$ph = $next$9;
     $ret$8$ph = $ret$0;
     label = 282;
     break;
    }
   }
   HEAP32[$31 >> 2] = 0;
   HEAP32[$2 >> 2] = 6;
   $bits$9 = $bits$8;
   $have$11 = $have$10;
   $hold$9 = $hold$8;
   $next$11 = $next$10;
   label = 83;
  } else if ((label | 0) == 218) {
   label = 0;
   if (!$640) {
    $661 = HEAP32[$31 >> 2] | 0;
    $bits$39 = $bits$37;
    $have$43 = $have$41;
    $hold$39 = $hold$37;
    $next$43 = $next$41;
   } else {
    if ($bits$37 >>> 0 < $640 >>> 0) {
     $bits$38290 = $bits$37;
     $have$42288 = $have$41;
     $hold$38289 = $hold$37;
     $next$42287 = $next$41;
     while (1) {
      if (!$have$42288) {
       $bits$53 = $bits$38290;
       $have$57 = 0;
       $hold$53 = $hold$38289;
       $left$01066 = $left$0;
       $next$57 = $next$42287;
       $out$4 = $out$0;
       $ret$8 = $ret$4;
       break L17;
      }
      $644 = $have$42288 + -1 | 0;
      $645 = $next$42287 + 1 | 0;
      $649 = (HEAPU8[$next$42287 >> 0] << $bits$38290) + $hold$38289 | 0;
      $650 = $bits$38290 + 8 | 0;
      if ($650 >>> 0 < $640 >>> 0) {
       $bits$38290 = $650;
       $have$42288 = $644;
       $hold$38289 = $649;
       $next$42287 = $645;
      } else {
       $bits$38$lcssa = $650;
       $have$42$lcssa = $644;
       $hold$38$lcssa = $649;
       $next$42$lcssa = $645;
       break;
      }
     }
    } else {
     $bits$38$lcssa = $bits$37;
     $have$42$lcssa = $have$41;
     $hold$38$lcssa = $hold$37;
     $next$42$lcssa = $next$41;
    }
    $656 = (HEAP32[$31 >> 2] | 0) + ((1 << $640) + -1 & $hold$38$lcssa) | 0;
    HEAP32[$31 >> 2] = $656;
    HEAP32[$40 >> 2] = (HEAP32[$40 >> 2] | 0) + $640;
    $661 = $656;
    $bits$39 = $bits$38$lcssa - $640 | 0;
    $have$43 = $have$42$lcssa;
    $hold$39 = $hold$38$lcssa >>> $640;
    $next$43 = $next$42$lcssa;
   }
   HEAP32[$42 >> 2] = $661;
   HEAP32[$2 >> 2] = 22;
   $bits$40$ph = $bits$39;
   $have$44$ph = $have$43;
   $hold$40$ph = $hold$39;
   $next$44$ph = $next$43;
   $ret$5$ph = $ret$4;
   label = 225;
  }
  do if ((label | 0) == 83) {
   label = 0;
   if (!(HEAP32[$25 >> 2] & 2048)) {
    $270 = HEAP32[$26 >> 2] | 0;
    if (!$270) {
     $have$12 = $have$11;
     $next$12 = $next$11;
    } else {
     HEAP32[$270 + 28 >> 2] = 0;
     $have$12 = $have$11;
     $next$12 = $next$11;
    }
   } else {
    if (!$have$11) {
     $bits$53$ph = $bits$9;
     $have$57$ph = 0;
     $hold$53$ph = $hold$9;
     $left$0$lcssa1037 = $left$0;
     $next$57$ph = $next$11;
     $ret$8$ph = $ret$0;
     label = 282;
     break L17;
    } else $copy$1 = 0;
    do {
     $copy$1$looptemp = $copy$1;
     $copy$1 = $copy$1 + 1 | 0;
     $249 = HEAP8[$next$11 + $copy$1$looptemp >> 0] | 0;
     $250 = HEAP32[$26 >> 2] | 0;
     if ($250) {
      $253 = HEAP32[$250 + 28 >> 2] | 0;
      if ($253) {
       $255 = HEAP32[$31 >> 2] | 0;
       if ($255 >>> 0 < (HEAP32[$250 + 32 >> 2] | 0) >>> 0) {
        HEAP32[$31 >> 2] = $255 + 1;
        HEAP8[$253 + $255 >> 0] = $249;
       }
      }
     }
     $261 = $249 << 24 >> 24 != 0;
    } while ($261 & $copy$1 >>> 0 < $have$11 >>> 0);
    if (HEAP32[$25 >> 2] & 512) HEAP32[$23 >> 2] = _crc32(HEAP32[$23 >> 2] | 0, $next$11, $copy$1) | 0;
    $268 = $have$11 - $copy$1 | 0;
    $269 = $next$11 + $copy$1 | 0;
    if ($261) {
     $bits$53$ph = $bits$9;
     $have$57$ph = $268;
     $hold$53$ph = $hold$9;
     $left$0$lcssa1037 = $left$0;
     $next$57$ph = $269;
     $ret$8$ph = $ret$0;
     label = 282;
     break L17;
    } else {
     $have$12 = $268;
     $next$12 = $269;
    }
   }
   HEAP32[$31 >> 2] = 0;
   HEAP32[$2 >> 2] = 7;
   $bits$10 = $bits$9;
   $have$13 = $have$12;
   $hold$10 = $hold$9;
   $next$13 = $next$12;
   label = 96;
  } else if ((label | 0) == 225) {
   label = 0;
   $664 = (1 << HEAP32[$38 >> 2]) + -1 | 0;
   $665 = $664 & $hold$40$ph;
   $666 = HEAP32[$37 >> 2] | 0;
   $668 = HEAP8[$666 + ($665 << 2) + 1 >> 0] | 0;
   $669 = $668 & 255;
   if ($669 >>> 0 > $bits$40$ph >>> 0) {
    $bits$40317 = $bits$40$ph;
    $have$44315 = $have$44$ph;
    $hold$40316 = $hold$40$ph;
    $next$44314 = $next$44$ph;
    while (1) {
     if (!$have$44315) {
      $bits$53 = $bits$40317;
      $have$57 = 0;
      $hold$53 = $hold$40316;
      $left$01066 = $left$0;
      $next$57 = $next$44314;
      $out$4 = $out$0;
      $ret$8 = $ret$5$ph;
      break L17;
     }
     $672 = $have$44315 + -1 | 0;
     $673 = $next$44314 + 1 | 0;
     $677 = (HEAPU8[$next$44314 >> 0] << $bits$40317) + $hold$40316 | 0;
     $678 = $bits$40317 + 8 | 0;
     $679 = $664 & $677;
     $681 = HEAP8[$666 + ($679 << 2) + 1 >> 0] | 0;
     $682 = $681 & 255;
     if ($682 >>> 0 > $678 >>> 0) {
      $bits$40317 = $678;
      $have$44315 = $672;
      $hold$40316 = $677;
      $next$44314 = $673;
     } else {
      $$lcssa308 = $681;
      $$lcssa312 = $682;
      $$pn1232 = $679;
      $bits$40$lcssa = $678;
      $have$44$lcssa = $672;
      $hold$40$lcssa = $677;
      $next$44$lcssa = $673;
      break;
     }
    }
   } else {
    $$lcssa308 = $668;
    $$lcssa312 = $669;
    $$pn1232 = $665;
    $bits$40$lcssa = $bits$40$ph;
    $have$44$lcssa = $have$44$ph;
    $hold$40$lcssa = $hold$40$ph;
    $next$44$lcssa = $next$44$ph;
   }
   $$lcssa306 = HEAP8[$666 + ($$pn1232 << 2) >> 0] | 0;
   $$lcssa310 = HEAP16[$666 + ($$pn1232 << 2) + 2 >> 1] | 0;
   $684 = $$lcssa306 & 255;
   if (!($684 & 240)) {
    $687 = $$lcssa310 & 65535;
    $690 = (1 << $$lcssa312 + $684) + -1 | 0;
    $693 = (($hold$40$lcssa & $690) >>> $$lcssa312) + $687 | 0;
    $695 = HEAP8[$666 + ($693 << 2) + 1 >> 0] | 0;
    if ((($695 & 255) + $$lcssa312 | 0) >>> 0 > $bits$40$lcssa >>> 0) {
     $bits$41344 = $bits$40$lcssa;
     $have$45342 = $have$44$lcssa;
     $hold$41343 = $hold$40$lcssa;
     $next$45341 = $next$44$lcssa;
     while (1) {
      if (!$have$45342) {
       $bits$53 = $bits$41344;
       $have$57 = 0;
       $hold$53 = $hold$41343;
       $left$01066 = $left$0;
       $next$57 = $next$45341;
       $out$4 = $out$0;
       $ret$8 = $ret$5$ph;
       break L17;
      }
      $700 = $have$45342 + -1 | 0;
      $701 = $next$45341 + 1 | 0;
      $705 = (HEAPU8[$next$45341 >> 0] << $bits$41344) + $hold$41343 | 0;
      $706 = $bits$41344 + 8 | 0;
      $709 = (($705 & $690) >>> $$lcssa312) + $687 | 0;
      $711 = HEAP8[$666 + ($709 << 2) + 1 >> 0] | 0;
      if ((($711 & 255) + $$lcssa312 | 0) >>> 0 > $706 >>> 0) {
       $bits$41344 = $706;
       $have$45342 = $700;
       $hold$41343 = $705;
       $next$45341 = $701;
      } else {
       $$lcssa335 = $709;
       $$lcssa339 = $711;
       $bits$41$lcssa = $706;
       $have$45$lcssa = $700;
       $hold$41$lcssa = $705;
       $next$45$lcssa = $701;
       break;
      }
     }
    } else {
     $$lcssa335 = $693;
     $$lcssa339 = $695;
     $bits$41$lcssa = $bits$40$lcssa;
     $have$45$lcssa = $have$44$lcssa;
     $hold$41$lcssa = $hold$40$lcssa;
     $next$45$lcssa = $next$44$lcssa;
    }
    $717 = HEAP16[$666 + ($$lcssa335 << 2) + 2 >> 1] | 0;
    $718 = HEAP8[$666 + ($$lcssa335 << 2) >> 0] | 0;
    $722 = (HEAP32[$40 >> 2] | 0) + $$lcssa312 | 0;
    HEAP32[$40 >> 2] = $722;
    $727 = $722;
    $bits$42 = $bits$41$lcssa - $$lcssa312 | 0;
    $have$46 = $have$45$lcssa;
    $here$sroa$0$1 = $718;
    $here$sroa$1$1 = $$lcssa339;
    $here$sroa$2$1 = $717;
    $hold$42 = $hold$41$lcssa >>> $$lcssa312;
    $next$46 = $next$45$lcssa;
   } else {
    $727 = HEAP32[$40 >> 2] | 0;
    $bits$42 = $bits$40$lcssa;
    $have$46 = $have$44$lcssa;
    $here$sroa$0$1 = $$lcssa306;
    $here$sroa$1$1 = $$lcssa308;
    $here$sroa$2$1 = $$lcssa310;
    $hold$42 = $hold$40$lcssa;
    $next$46 = $next$44$lcssa;
   }
   $723 = $here$sroa$1$1 & 255;
   $724 = $hold$42 >>> $723;
   $725 = $bits$42 - $723 | 0;
   HEAP32[$40 >> 2] = $727 + $723;
   $728 = $here$sroa$0$1 & 255;
   if (!($728 & 64)) {
    HEAP32[$43 >> 2] = $here$sroa$2$1 & 65535;
    $732 = $728 & 15;
    HEAP32[$41 >> 2] = $732;
    HEAP32[$2 >> 2] = 23;
    $733 = $732;
    $bits$43 = $725;
    $have$47 = $have$46;
    $hold$43 = $724;
    $next$47 = $next$46;
    $ret$6 = $ret$5$ph;
    label = 237;
    break;
   } else {
    HEAP32[$27 >> 2] = 105720;
    HEAP32[$2 >> 2] = 29;
    $bits$0$be = $725;
    $have$0$be = $have$46;
    $hold$0$be = $724;
    $left$0$be = $left$0;
    $next$0$be = $next$46;
    $out$0$be = $out$0;
    $put$0$be = $put$0;
    $ret$0$be = $ret$5$ph;
    break;
   }
  } while (0);
  if ((label | 0) == 96) {
   label = 0;
   if (!(HEAP32[$25 >> 2] & 4096)) {
    $300 = HEAP32[$26 >> 2] | 0;
    if (!$300) {
     $have$14 = $have$13;
     $next$14 = $next$13;
    } else {
     HEAP32[$300 + 36 >> 2] = 0;
     $have$14 = $have$13;
     $next$14 = $next$13;
    }
   } else {
    if (!$have$13) {
     $bits$53$ph = $bits$10;
     $have$57$ph = 0;
     $hold$53$ph = $hold$10;
     $left$0$lcssa1037 = $left$0;
     $next$57$ph = $next$13;
     $ret$8$ph = $ret$0;
     label = 282;
     break;
    } else $copy$2 = 0;
    do {
     $copy$2$looptemp = $copy$2;
     $copy$2 = $copy$2 + 1 | 0;
     $279 = HEAP8[$next$13 + $copy$2$looptemp >> 0] | 0;
     $280 = HEAP32[$26 >> 2] | 0;
     if ($280) {
      $283 = HEAP32[$280 + 36 >> 2] | 0;
      if ($283) {
       $285 = HEAP32[$31 >> 2] | 0;
       if ($285 >>> 0 < (HEAP32[$280 + 40 >> 2] | 0) >>> 0) {
        HEAP32[$31 >> 2] = $285 + 1;
        HEAP8[$283 + $285 >> 0] = $279;
       }
      }
     }
     $291 = $279 << 24 >> 24 != 0;
    } while ($291 & $copy$2 >>> 0 < $have$13 >>> 0);
    if (HEAP32[$25 >> 2] & 512) HEAP32[$23 >> 2] = _crc32(HEAP32[$23 >> 2] | 0, $next$13, $copy$2) | 0;
    $298 = $have$13 - $copy$2 | 0;
    $299 = $next$13 + $copy$2 | 0;
    if ($291) {
     $bits$53$ph = $bits$10;
     $have$57$ph = $298;
     $hold$53$ph = $hold$10;
     $left$0$lcssa1037 = $left$0;
     $next$57$ph = $299;
     $ret$8$ph = $ret$0;
     label = 282;
     break;
    } else {
     $have$14 = $298;
     $next$14 = $299;
    }
   }
   HEAP32[$2 >> 2] = 8;
   $bits$11 = $bits$10;
   $have$15 = $have$14;
   $hold$11 = $hold$10;
   $next$15 = $next$14;
   label = 109;
  } else if ((label | 0) == 237) {
   label = 0;
   if (!$733) {
    $bits$45 = $bits$43;
    $have$49 = $have$47;
    $hold$45 = $hold$43;
    $next$49 = $next$47;
   } else {
    if ($bits$43 >>> 0 < $733 >>> 0) {
     $bits$44365 = $bits$43;
     $have$48363 = $have$47;
     $hold$44364 = $hold$43;
     $next$48362 = $next$47;
     while (1) {
      if (!$have$48363) {
       $bits$53 = $bits$44365;
       $have$57 = 0;
       $hold$53 = $hold$44364;
       $left$01066 = $left$0;
       $next$57 = $next$48362;
       $out$4 = $out$0;
       $ret$8 = $ret$6;
       break L17;
      }
      $737 = $have$48363 + -1 | 0;
      $738 = $next$48362 + 1 | 0;
      $742 = (HEAPU8[$next$48362 >> 0] << $bits$44365) + $hold$44364 | 0;
      $743 = $bits$44365 + 8 | 0;
      if ($743 >>> 0 < $733 >>> 0) {
       $bits$44365 = $743;
       $have$48363 = $737;
       $hold$44364 = $742;
       $next$48362 = $738;
      } else {
       $bits$44$lcssa = $743;
       $have$48$lcssa = $737;
       $hold$44$lcssa = $742;
       $next$48$lcssa = $738;
       break;
      }
     }
    } else {
     $bits$44$lcssa = $bits$43;
     $have$48$lcssa = $have$47;
     $hold$44$lcssa = $hold$43;
     $next$48$lcssa = $next$47;
    }
    HEAP32[$43 >> 2] = (HEAP32[$43 >> 2] | 0) + ((1 << $733) + -1 & $hold$44$lcssa);
    HEAP32[$40 >> 2] = (HEAP32[$40 >> 2] | 0) + $733;
    $bits$45 = $bits$44$lcssa - $733 | 0;
    $have$49 = $have$48$lcssa;
    $hold$45 = $hold$44$lcssa >>> $733;
    $next$49 = $next$48$lcssa;
   }
   HEAP32[$2 >> 2] = 24;
   $bits$46 = $bits$45;
   $have$50 = $have$49;
   $hold$46 = $hold$45;
   $next$50 = $next$49;
   $ret$7 = $ret$6;
   label = 243;
  }
  do if ((label | 0) == 109) {
   label = 0;
   $303 = HEAP32[$25 >> 2] | 0;
   if (!($303 & 512)) {
    $bits$13 = $bits$11;
    $have$17 = $have$15;
    $hold$13 = $hold$11;
    $next$17 = $next$15;
   } else {
    if ($bits$11 >>> 0 < 16) {
     $bits$12497 = $bits$11;
     $have$16495 = $have$15;
     $hold$12496 = $hold$11;
     $next$16494 = $next$15;
     while (1) {
      if (!$have$16495) {
       $bits$53 = $bits$12497;
       $have$57 = 0;
       $hold$53 = $hold$12496;
       $left$01066 = $left$0;
       $next$57 = $next$16494;
       $out$4 = $out$0;
       $ret$8 = $ret$0;
       break L17;
      }
      $308 = $have$16495 + -1 | 0;
      $309 = $next$16494 + 1 | 0;
      $313 = (HEAPU8[$next$16494 >> 0] << $bits$12497) + $hold$12496 | 0;
      $314 = $bits$12497 + 8 | 0;
      if ($314 >>> 0 < 16) {
       $bits$12497 = $314;
       $have$16495 = $308;
       $hold$12496 = $313;
       $next$16494 = $309;
      } else {
       $bits$12$lcssa = $314;
       $have$16$lcssa = $308;
       $hold$12$lcssa = $313;
       $next$16$lcssa = $309;
       break;
      }
     }
    } else {
     $bits$12$lcssa = $bits$11;
     $have$16$lcssa = $have$15;
     $hold$12$lcssa = $hold$11;
     $next$16$lcssa = $next$15;
    }
    if (($hold$12$lcssa | 0) == (HEAP32[$23 >> 2] & 65535 | 0)) {
     $bits$13 = 0;
     $have$17 = $have$16$lcssa;
     $hold$13 = 0;
     $next$17 = $next$16$lcssa;
    } else {
     HEAP32[$27 >> 2] = 102928;
     HEAP32[$2 >> 2] = 29;
     $bits$0$be = $bits$12$lcssa;
     $have$0$be = $have$16$lcssa;
     $hold$0$be = $hold$12$lcssa;
     $left$0$be = $left$0;
     $next$0$be = $next$16$lcssa;
     $out$0$be = $out$0;
     $put$0$be = $put$0;
     $ret$0$be = $ret$0;
     break;
    }
   }
   $319 = HEAP32[$26 >> 2] | 0;
   if ($319) {
    HEAP32[$319 + 44 >> 2] = $303 >>> 9 & 1;
    HEAP32[$319 + 48 >> 2] = 1;
   }
   $325 = _crc32(0, 0, 0) | 0;
   HEAP32[$23 >> 2] = $325;
   HEAP32[$30 >> 2] = $325;
   HEAP32[$2 >> 2] = 11;
   $bits$0$be = $bits$13;
   $have$0$be = $have$17;
   $hold$0$be = $hold$13;
   $left$0$be = $left$0;
   $next$0$be = $next$17;
   $out$0$be = $out$0;
   $put$0$be = $put$0;
   $ret$0$be = $ret$0;
  } else if ((label | 0) == 243) {
   label = 0;
   if (!$left$0) {
    $bits$53$ph = $bits$46;
    $have$57$ph = $have$50;
    $hold$53$ph = $hold$46;
    $left$0$lcssa1037 = 0;
    $next$57$ph = $next$50;
    $ret$8$ph = $ret$7;
    label = 282;
    break L17;
   }
   $755 = $out$0 - $left$0 | 0;
   $756 = HEAP32[$43 >> 2] | 0;
   if ($756 >>> 0 > $755 >>> 0) {
    $758 = $756 - $755 | 0;
    if ($758 >>> 0 > (HEAP32[$44 >> 2] | 0) >>> 0) if (HEAP32[$45 >> 2] | 0) {
     HEAP32[$27 >> 2] = 105688;
     HEAP32[$2 >> 2] = 29;
     $bits$0$be = $bits$46;
     $have$0$be = $have$50;
     $hold$0$be = $hold$46;
     $left$0$be = $left$0;
     $next$0$be = $next$50;
     $out$0$be = $out$0;
     $put$0$be = $put$0;
     $ret$0$be = $ret$7;
     break;
    }
    $763 = HEAP32[$46 >> 2] | 0;
    if ($758 >>> 0 > $763 >>> 0) {
     $765 = $758 - $763 | 0;
     $copy$7 = $765;
     $from$0 = (HEAP32[$47 >> 2] | 0) + ((HEAP32[$48 >> 2] | 0) - $765) | 0;
    } else {
     $copy$7 = $758;
     $from$0 = (HEAP32[$47 >> 2] | 0) + ($763 - $758) | 0;
    }
    $773 = HEAP32[$31 >> 2] | 0;
    $780 = $773;
    $copy$8 = $copy$7 >>> 0 > $773 >>> 0 ? $773 : $copy$7;
    $from$1 = $from$0;
   } else {
    $777 = HEAP32[$31 >> 2] | 0;
    $780 = $777;
    $copy$8 = $777;
    $from$1 = $put$0 + (0 - $756) | 0;
   }
   $left$0$copy$8 = $copy$8 >>> 0 > $left$0 >>> 0 ? $left$0 : $copy$8;
   HEAP32[$31 >> 2] = $780 - $left$0$copy$8;
   $781 = ~$left$0;
   $782 = ~$copy$8;
   $umax = $781 >>> 0 > $782 >>> 0 ? $781 : $782;
   $copy$10 = $left$0$copy$8;
   $from$2 = $from$1;
   $put$1 = $put$0;
   while (1) {
    HEAP8[$put$1 >> 0] = HEAP8[$from$2 >> 0] | 0;
    $copy$10 = $copy$10 + -1 | 0;
    if (!$copy$10) break; else {
     $from$2 = $from$2 + 1 | 0;
     $put$1 = $put$1 + 1 | 0;
    }
   }
   $789 = $left$0 - $left$0$copy$8 | 0;
   $scevgep885 = $put$0 + ~$umax | 0;
   if (!(HEAP32[$31 >> 2] | 0)) {
    HEAP32[$2 >> 2] = 20;
    $bits$0$be = $bits$46;
    $have$0$be = $have$50;
    $hold$0$be = $hold$46;
    $left$0$be = $789;
    $next$0$be = $next$50;
    $out$0$be = $out$0;
    $put$0$be = $scevgep885;
    $ret$0$be = $ret$7;
   } else {
    $bits$0$be = $bits$46;
    $have$0$be = $have$50;
    $hold$0$be = $hold$46;
    $left$0$be = $789;
    $next$0$be = $next$50;
    $out$0$be = $out$0;
    $put$0$be = $scevgep885;
    $ret$0$be = $ret$7;
   }
  } while (0);
  $62 = HEAP32[$2 >> 2] | 0;
  $bits$0 = $bits$0$be;
  $have$0 = $have$0$be;
  $hold$0 = $hold$0$be;
  $left$0 = $left$0$be;
  $next$0 = $next$0$be;
  $out$0 = $out$0$be;
  $put$0 = $put$0$be;
  $ret$0 = $ret$0$be;
 }
 if ((label | 0) == 122) {
  HEAP32[$4 >> 2] = $put$0;
  HEAP32[$14 >> 2] = $left$0;
  HEAP32[$strm >> 2] = $next$19;
  HEAP32[$16 >> 2] = $have$19;
  HEAP32[$18 >> 2] = $hold$15;
  HEAP32[$20 >> 2] = $bits$15;
  $$0 = 2;
  STACKTOP = sp;
  return $$0 | 0;
 } else if ((label | 0) == 133) {
  $bits$53 = $bits$18$lcssa + -3 | 0;
  $have$57 = $have$22$lcssa;
  $hold$53 = $hold$18$lcssa >>> 3;
  $left$01066 = $left$0;
  $next$57 = $next$22$lcssa;
  $out$4 = $out$0;
  $ret$8 = $ret$0;
 } else if ((label | 0) == 281) {
  HEAP32[$2 >> 2] = 28;
  $bits$53 = $bits$51;
  $have$57 = $have$55;
  $hold$53 = $hold$51;
  $left$01066 = $left$0;
  $next$57 = $next$55;
  $out$4 = $out$2;
  $ret$8 = 1;
 } else if ((label | 0) == 282) {
  $bits$53 = $bits$53$ph;
  $have$57 = $have$57$ph;
  $hold$53 = $hold$53$ph;
  $left$01066 = $left$0$lcssa1037;
  $next$57 = $next$57$ph;
  $out$4 = $out$0;
  $ret$8 = $ret$8$ph;
 } else if ((label | 0) == 298) {
  $$0 = -4;
  STACKTOP = sp;
  return $$0 | 0;
 } else if ((label | 0) == 299) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[$4 >> 2] = $put$0;
 HEAP32[$14 >> 2] = $left$01066;
 HEAP32[$strm >> 2] = $next$57;
 HEAP32[$16 >> 2] = $have$57;
 HEAP32[$18 >> 2] = $hold$53;
 HEAP32[$20 >> 2] = $bits$53;
 $847 = HEAP32[$14 >> 2] | 0;
 if (!(HEAP32[$48 >> 2] | 0)) if (($out$4 | 0) == ($847 | 0)) $859 = $out$4; else {
  $849 = HEAP32[$2 >> 2] | 0;
  if ($849 >>> 0 < 29) if ($849 >>> 0 > 25 & ($flush | 0) == 4) $859 = $847; else label = 287; else $859 = $847;
 } else label = 287;
 do if ((label | 0) == 287) {
  if (!(_updatewindow($strm, $put$0, $out$4 - $847 | 0) | 0)) {
   $859 = HEAP32[$14 >> 2] | 0;
   break;
  }
  HEAP32[$2 >> 2] = 30;
  $$0 = -4;
  STACKTOP = sp;
  return $$0 | 0;
 } while (0);
 $856 = HEAP32[$16 >> 2] | 0;
 $858 = $out$4 - $859 | 0;
 $860 = $strm + 8 | 0;
 HEAP32[$860 >> 2] = $17 - $856 + (HEAP32[$860 >> 2] | 0);
 HEAP32[$49 >> 2] = (HEAP32[$49 >> 2] | 0) + $858;
 HEAP32[$50 >> 2] = (HEAP32[$50 >> 2] | 0) + $858;
 $869 = ($out$4 | 0) == ($859 | 0);
 if (!((HEAP32[$22 >> 2] | 0) == 0 | $869)) {
  $872 = HEAP32[$23 >> 2] | 0;
  $875 = (HEAP32[$4 >> 2] | 0) + (0 - $858) | 0;
  if (!(HEAP32[$25 >> 2] | 0)) $878 = _adler32($872, $875, $858) | 0; else $878 = _crc32($872, $875, $858) | 0;
  HEAP32[$23 >> 2] = $878;
  HEAP32[$30 >> 2] = $878;
 }
 $884 = HEAP32[$2 >> 2] | 0;
 if (($884 | 0) == 19) $891 = 256; else $891 = ($884 | 0) == 14 ? 256 : 0;
 HEAP32[$strm + 44 >> 2] = ((HEAP32[$34 >> 2] | 0) != 0 ? 64 : 0) + (HEAP32[$20 >> 2] | 0) + (($884 | 0) == 11 ? 128 : 0) + $891;
 $$0 = (($17 | 0) == ($856 | 0) & $869 | ($flush | 0) == 4) & ($ret$8 | 0) == 0 ? -5 : $ret$8;
 STACKTOP = sp;
 return $$0 | 0;
}

function _printf_core($f, $fmt, $ap, $nl_arg, $nl_type) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 $nl_arg = $nl_arg | 0;
 $nl_type = $nl_type | 0;
 var $$$p$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i105$i = 0, $$0$lcssa$i112$i = 0, $$0$lcssa$i136$i = 0, $$0$lcssa$i151$i = 0, $$0$lcssa$i47 = 0, $$0$lcssa$i47$i = 0, $$0$lcssa$i52 = 0, $$0$lcssa$i54 = 0, $$0$lcssa$i54$i = 0, $$0$lcssa$i56$i = 0, $$0$lcssa$i62 = 0, $$0$lcssa$i64$i = 0, $$0$lcssa$i69 = 0, $$0$lcssa$i71$i = 0, $$0$lcssa$i76 = 0, $$0$lcssa$i77$i = 0, $$0$lcssa$i84$i = 0, $$0$lcssa$i86 = 0, $$0$lcssa$i92$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i103$i = 0, $$01$i110$i = 0, $$01$i134$i = 0, $$01$i149$i = 0, $$01$i45 = 0, $$01$i45$i = 0, $$01$i52$i = 0, $$01$i60 = 0, $$01$i62$i = 0, $$01$i67 = 0, $$01$i69$i = 0, $$01$i74 = 0, $$01$i75$i = 0, $$01$i82$i = 0, $$01$i84 = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i93$i = 0, $$012$i = 0, $$013$i = 0.0, $$019$i = 0, $$03$i49 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i87$i = 0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i120$i = 0, $$12$i = 0, $$12$i$i = 0, $$12$i118$i = 0, $$12$i127$i = 0, $$12$i142$i = 0, $$12$i142$i$lcssa = 0, $$12$i95$i = 0, $$120$i = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$216$i = 0, $$26$i = 0, $$26$us$i = 0, $$28$i = 0.0, $$29$i = 0, $$3$i = 0.0, $$31$i = 0, $$317$i = 0, $$39$i = 0, $$4$i = 0.0, $$418$lcssa$i = 0, $$418193$i = 0, $$5205$i = 0, $$93 = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us310$i = 0, $$a$3312$i = 0, $$fl$4 = 0, $$lcssa107 = 0, $$lcssa283$i = 0, $$lcssa345 = 0, $$lcssa346 = 0, $$lcssa350 = 0, $$lcssa352 = 0, $$lcssa353 = 0, $$lcssa354 = 0, $$lcssa355 = 0, $$lcssa356 = 0, $$lcssa358 = 0, $$lcssa359 = 0, $$lcssa365 = 0, $$lcssa369 = 0, $$lcssa371 = 0, $$lcssa374 = 0, $$lcssa375 = 0, $$lcssa378 = 0.0, $$lcssa379 = 0, $$lcssa382 = 0, $$lcssa386 = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr154$i = 0, $$pre308$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1009 = 0, $1011 = 0, $1013 = 0, $1015 = 0, $1016 = 0, $1024 = 0, $1032 = 0, $1040 = 0, $105 = 0, $1050 = 0, $1053 = 0, $1060 = 0, $1061 = 0, $1067 = 0, $1068 = 0, $107 = 0, $1071 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1091 = 0, $1092 = 0, $1094 = 0, $1097 = 0, $1098 = 0, $11 = 0, $110 = 0, $1107 = 0, $1108 = 0, $1110 = 0, $1113 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1133 = 0, $1134 = 0, $1136 = 0, $1139 = 0, $1148 = 0, $1149 = 0, $1150 = 0, $1159 = 0, $1160 = 0.0, $1166 = 0, $1167 = 0.0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $1190 = 0, $1191 = 0, $1193 = 0, $1195 = 0, $12 = 0, $13 = 0, $134 = 0, $135 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $140$phi = 0, $144 = 0, $146 = 0, $148 = 0, $15 = 0, $150 = 0, $151 = 0, $156 = 0, $159 = 0, $16 = 0, $171 = 0, $172 = 0, $179 = 0, $180 = 0, $188 = 0, $189 = 0, $195 = 0, $196 = 0, $198 = 0, $2 = 0, $201 = 0, $207 = 0, $208 = 0, $219 = 0, $22 = 0, $220 = 0, $226 = 0, $227 = 0, $23 = 0, $238 = 0, $239 = 0, $245 = 0, $246 = 0.0, $25 = 0, $254 = 0, $255 = 0.0, $259 = 0, $26 = 0, $266 = 0, $267 = 0, $273 = 0, $28 = 0, $285 = 0, $292 = 0, $294 = 0, $298 = 0, $3 = 0, $304 = 0, $305 = 0, $31 = 0, $317 = 0, $319 = 0, $32 = 0, $322 = 0, $323 = 0, $333 = 0, $337 = 0, $339 = 0, $341 = 0, $346 = 0, $347 = 0, $348 = 0, $352 = 0, $353 = 0, $364 = 0, $369 = 0, $37 = 0, $371 = 0, $373 = 0, $379 = 0, $387 = 0, $39 = 0, $393 = 0, $395 = 0, $397 = 0, $4 = 0, $40 = 0, $402 = 0, $405 = 0, $407 = 0, $408 = 0, $416 = 0, $418 = 0, $424 = 0, $432 = 0.0, $437 = 0, $44 = 0, $441 = 0, $448 = 0, $452 = 0, $455 = 0, $456 = 0, $46 = 0, $465 = 0, $47 = 0, $473 = 0.0, $474 = 0, $477 = 0, $479 = 0, $482 = 0, $486 = 0.0, $496 = 0, $499 = 0, $5 = 0, $503 = 0, $504 = 0, $505 = 0, $509 = 0, $51 = 0, $510 = 0, $521 = 0, $533 = 0, $536 = 0, $542 = 0, $551 = 0, $557 = 0, $56 = 0, $566 = 0, $572 = 0, $584 = 0, $589 = 0, $59 = 0, $590 = 0, $592 = 0, $593 = 0, $6 = 0, $60 = 0, $601 = 0, $608 = 0, $61 = 0, $610 = 0, $612 = 0, $621 = 0, $631 = 0, $632 = 0, $634 = 0, $635 = 0, $636 = 0, $642 = 0, $644 = 0, $647 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $653 = 0, $655 = 0, $655$phi = 0, $658 = 0, $660 = 0, $664 = 0, $669 = 0, $67 = 0, $671 = 0, $672 = 0, $691 = 0, $693 = 0, $696 = 0, $697 = 0, $7 = 0, $701 = 0, $709 = 0, $710 = 0, $711 = 0, $715 = 0, $736 = 0, $737 = 0, $740 = 0, $745 = 0, $747 = 0, $754 = 0, $755 = 0, $756 = 0, $759 = 0, $760 = 0, $761 = 0, $768 = 0, $778 = 0, $781 = 0, $783 = 0, $785 = 0, $787 = 0, $792 = 0, $793 = 0, $796 = 0, $798 = 0, $8 = 0, $800 = 0, $802 = 0, $816 = 0, $821 = 0, $830 = 0, $831 = 0, $835 = 0, $838 = 0, $841 = 0, $842 = 0, $844 = 0, $848 = 0, $852 = 0, $853 = 0, $854 = 0, $858 = 0, $859 = 0, $870 = 0, $876 = 0, $886 = 0, $891 = 0, $892 = 0, $894 = 0, $895 = 0, $9 = 0, $903 = 0, $91 = 0, $911 = 0, $912 = 0, $914 = 0, $916 = 0, $917 = 0, $92 = 0, $922 = 0, $927 = 0, $932 = 0, $941 = 0, $946 = 0, $950 = 0, $952 = 0, $954 = 0, $955 = 0, $955$phi = 0, $956 = 0, $968 = 0, $969 = 0, $974 = 0, $98 = 0, $980 = 0, $984 = 0, $986 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1261$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3248$i = 0, $a$3248$us$i = 0, $a$5$lcssa$i = 0, $a$5223$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $a$8$ph294$i = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0254$i = 0, $carry3$0242$i = 0, $carry3$0242$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0253$i = 0, $d$0255$i = 0, $d$1241$i = 0, $d$1241$us$i = 0, $d$2$lcssa$i = 0, $d$2222$i = 0, $d$3$i = 0, $d$4199$i = 0, $d$5192$i = 0, $d$6204$i = 0, $e$0237$i = 0, $e$1$i = 0, $e$2218$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1209$i = 0, $estr$2$i = 0, $fl$0111 = 0, $fl$0171 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0$lcssa272 = 0, $i$0176 = 0, $i$0236$i = 0, $i$03$i = 0, $i$03$i31 = 0, $i$1$lcssa$i = 0, $i$1187 = 0, $i$1230$i = 0, $i$2163 = 0, $i$2163$lcssa = 0, $i$2217$i = 0, $i$3161 = 0, $i$3213$i = 0, $isdigittmp = 0, $isdigittmp1$i = 0, $isdigittmp1$i28 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i30 = 0, $isdigittmp9 = 0, $j$0229$i = 0, $j$0231$i = 0, $j$1214$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1175 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $or$cond19 = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$4271 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$1187$i = 0, $round$0186$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s1$0$i = 0, $s7$0196$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0188$i = 0, $s9$0$i = 0, $s9$1200$i = 0, $s9$2$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa351 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8109 = 0, $storemerge8170 = 0, $t$0 = 0, $t$1 = 0, $uglygep296$i = 0, $uglygep300301$i = 0, $umax$i = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $wc = 0, $ws$0177 = 0, $ws$1188 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i117$i = 0, $y$03$i126$i = 0, $y$03$i141$i = 0, $y$03$i94$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0164 = 0, $z$1$lcssa$i = 0, $z$1260$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3247$i = 0, $z$3247$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864 | 0;
 $big$i = sp + 16 | 0;
 $e2$i = sp + 8 | 0;
 $buf$i = sp + 836 | 0;
 $0 = $buf$i;
 $ebuf0$i = sp + 824 | 0;
 $pad$i = sp + 568 | 0;
 $buf = sp + 528 | 0;
 $wc = sp;
 $mb = sp + 520 | 0;
 $1 = ($f | 0) != 0;
 $2 = $buf + 40 | 0;
 $3 = $2;
 $4 = $buf + 39 | 0;
 $5 = $wc + 4 | 0;
 $6 = $wc;
 $7 = $ebuf0$i + 12 | 0;
 $8 = $ebuf0$i + 11 | 0;
 $9 = $7;
 $10 = $9 - $0 | 0;
 $11 = -2 - $0 | 0;
 $12 = $9 + 2 | 0;
 $13 = $big$i + 288 | 0;
 $14 = $buf$i + 9 | 0;
 $15 = $14;
 $16 = $buf$i + 8 | 0;
 $1175 = 0;
 $1176 = 0;
 $23 = $fmt;
 $cnt$0 = 0;
 $l$0 = 0;
 $l10n$0 = 0;
 L1 : while (1) {
  do if (($cnt$0 | 0) > -1) if (($l$0 | 0) > (2147483647 - $cnt$0 | 0)) {
   HEAP32[(___errno_location() | 0) >> 2] = 75;
   $cnt$1 = -1;
   break;
  } else {
   $cnt$1 = $l$0 + $cnt$0 | 0;
   break;
  } else $cnt$1 = $cnt$0; while (0);
  $22 = HEAP8[$23 >> 0] | 0;
  if (!($22 << 24 >> 24)) {
   $cnt$1$lcssa = $cnt$1;
   $l10n$0$lcssa = $l10n$0;
   label = 355;
   break;
  } else {
   $1177 = $22;
   $26 = $23;
  }
  while (1) {
   if (!($1177 << 24 >> 24)) {
    $$lcssa107 = $26;
    $z$0$lcssa = $26;
    break;
   } else if ($1177 << 24 >> 24 == 37) {
    $28 = $26;
    $z$0164 = $26;
    label = 9;
    break;
   }
   $25 = $26 + 1 | 0;
   $1177 = HEAP8[$25 >> 0] | 0;
   $26 = $25;
  }
  L12 : do if ((label | 0) == 9) while (1) {
   label = 0;
   if ((HEAP8[$28 + 1 >> 0] | 0) != 37) {
    $$lcssa107 = $28;
    $z$0$lcssa = $z$0164;
    break L12;
   }
   $31 = $z$0164 + 1 | 0;
   $32 = $28 + 2 | 0;
   if ((HEAP8[$32 >> 0] | 0) == 37) {
    $28 = $32;
    $z$0164 = $31;
    label = 9;
   } else {
    $$lcssa107 = $32;
    $z$0$lcssa = $31;
    break;
   }
  } while (0);
  $37 = $z$0$lcssa - $23 | 0;
  if ($1) ___fwritex($23, $37, $f) | 0;
  if (($z$0$lcssa | 0) != ($23 | 0)) {
   $23 = $$lcssa107;
   $cnt$0 = $cnt$1;
   $l$0 = $37;
   continue;
  }
  $39 = $$lcssa107 + 1 | 0;
  $40 = HEAP8[$39 >> 0] | 0;
  $isdigittmp = ($40 << 24 >> 24) + -48 | 0;
  if ($isdigittmp >>> 0 < 10) {
   $44 = (HEAP8[$$lcssa107 + 2 >> 0] | 0) == 36;
   $$93 = $44 ? $$lcssa107 + 3 | 0 : $39;
   $47 = HEAP8[$$93 >> 0] | 0;
   $argpos$0 = $44 ? $isdigittmp : -1;
   $l10n$1 = $44 ? 1 : $l10n$0;
   $storemerge = $$93;
  } else {
   $47 = $40;
   $argpos$0 = -1;
   $l10n$1 = $l10n$0;
   $storemerge = $39;
  }
  $46 = $47 << 24 >> 24;
  L24 : do if (($46 & -32 | 0) == 32) {
   $51 = $46;
   $56 = $47;
   $fl$0171 = 0;
   $storemerge8170 = $storemerge;
   while (1) {
    if (!(1 << $51 + -32 & 75913)) {
     $65 = $56;
     $fl$0111 = $fl$0171;
     $storemerge8109 = $storemerge8170;
     break L24;
    }
    $59 = 1 << ($56 << 24 >> 24) + -32 | $fl$0171;
    $60 = $storemerge8170 + 1 | 0;
    $61 = HEAP8[$60 >> 0] | 0;
    $51 = $61 << 24 >> 24;
    if (($51 & -32 | 0) != 32) {
     $65 = $61;
     $fl$0111 = $59;
     $storemerge8109 = $60;
     break;
    } else {
     $56 = $61;
     $fl$0171 = $59;
     $storemerge8170 = $60;
    }
   }
  } else {
   $65 = $47;
   $fl$0111 = 0;
   $storemerge8109 = $storemerge;
  } while (0);
  do if ($65 << 24 >> 24 == 42) {
   $67 = $storemerge8109 + 1 | 0;
   $isdigittmp11 = (HEAP8[$67 >> 0] | 0) + -48 | 0;
   if ($isdigittmp11 >>> 0 < 10) if ((HEAP8[$storemerge8109 + 2 >> 0] | 0) == 36) {
    HEAP32[$nl_type + ($isdigittmp11 << 2) >> 2] = 10;
    $l10n$2 = 1;
    $storemerge13 = $storemerge8109 + 3 | 0;
    $w$0 = HEAP32[$nl_arg + ((HEAP8[$67 >> 0] | 0) + -48 << 3) >> 2] | 0;
   } else label = 23; else label = 23;
   if ((label | 0) == 23) {
    label = 0;
    if ($l10n$1) {
     $$0 = -1;
     label = 374;
     break L1;
    }
    if (!$1) {
     $105 = $67;
     $fl$1 = $fl$0111;
     $l10n$3 = 0;
     $w$1 = 0;
     break;
    }
    $91 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
    $92 = HEAP32[$91 >> 2] | 0;
    HEAP32[$ap >> 2] = $91 + 4;
    $l10n$2 = 0;
    $storemerge13 = $67;
    $w$0 = $92;
   }
   if (($w$0 | 0) < 0) {
    $105 = $storemerge13;
    $fl$1 = $fl$0111 | 8192;
    $l10n$3 = $l10n$2;
    $w$1 = 0 - $w$0 | 0;
   } else {
    $105 = $storemerge13;
    $fl$1 = $fl$0111;
    $l10n$3 = $l10n$2;
    $w$1 = $w$0;
   }
  } else {
   $isdigittmp1$i = ($65 << 24 >> 24) + -48 | 0;
   if ($isdigittmp1$i >>> 0 < 10) {
    $100 = $storemerge8109;
    $i$03$i = 0;
    $isdigittmp4$i = $isdigittmp1$i;
    while (1) {
     $98 = ($i$03$i * 10 | 0) + $isdigittmp4$i | 0;
     $99 = $100 + 1 | 0;
     $isdigittmp4$i = (HEAP8[$99 >> 0] | 0) + -48 | 0;
     if ($isdigittmp4$i >>> 0 >= 10) {
      $$lcssa345 = $98;
      $$lcssa346 = $99;
      break;
     } else {
      $100 = $99;
      $i$03$i = $98;
     }
    }
    if (($$lcssa345 | 0) < 0) {
     $$0 = -1;
     label = 374;
     break L1;
    } else {
     $105 = $$lcssa346;
     $fl$1 = $fl$0111;
     $l10n$3 = $l10n$1;
     $w$1 = $$lcssa345;
    }
   } else {
    $105 = $storemerge8109;
    $fl$1 = $fl$0111;
    $l10n$3 = $l10n$1;
    $w$1 = 0;
   }
  } while (0);
  L45 : do if ((HEAP8[$105 >> 0] | 0) == 46) {
   $107 = $105 + 1 | 0;
   $108 = HEAP8[$107 >> 0] | 0;
   if ($108 << 24 >> 24 != 42) {
    $isdigittmp1$i28 = ($108 << 24 >> 24) + -48 | 0;
    if ($isdigittmp1$i28 >>> 0 < 10) {
     $1179 = $107;
     $140 = $105;
     $i$03$i31 = 0;
     $isdigittmp4$i30 = $isdigittmp1$i28;
    } else {
     $1178 = $107;
     $p$0 = 0;
     break;
    }
    while (1) {
     $138 = ($i$03$i31 * 10 | 0) + $isdigittmp4$i30 | 0;
     $139 = $140 + 2 | 0;
     $isdigittmp4$i30 = (HEAP8[$139 >> 0] | 0) + -48 | 0;
     if ($isdigittmp4$i30 >>> 0 >= 10) {
      $1178 = $139;
      $p$0 = $138;
      break L45;
     } else {
      $140$phi = $1179;
      $1179 = $139;
      $i$03$i31 = $138;
      $140 = $140$phi;
     }
    }
   }
   $110 = $105 + 2 | 0;
   $isdigittmp9 = (HEAP8[$110 >> 0] | 0) + -48 | 0;
   if ($isdigittmp9 >>> 0 < 10) if ((HEAP8[$105 + 3 >> 0] | 0) == 36) {
    HEAP32[$nl_type + ($isdigittmp9 << 2) >> 2] = 10;
    $1178 = $105 + 4 | 0;
    $p$0 = HEAP32[$nl_arg + ((HEAP8[$110 >> 0] | 0) + -48 << 3) >> 2] | 0;
    break;
   }
   if ($l10n$3) {
    $$0 = -1;
    label = 374;
    break L1;
   }
   if ($1) {
    $134 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
    $135 = HEAP32[$134 >> 2] | 0;
    HEAP32[$ap >> 2] = $134 + 4;
    $1178 = $110;
    $p$0 = $135;
   } else {
    $1178 = $110;
    $p$0 = 0;
   }
  } else {
   $1178 = $105;
   $p$0 = -1;
  } while (0);
  $144 = $1178;
  $st$0 = 0;
  while (1) {
   $146 = (HEAP8[$144 >> 0] | 0) + -65 | 0;
   if ($146 >>> 0 > 57) {
    $$0 = -1;
    label = 374;
    break L1;
   }
   $148 = $144 + 1 | 0;
   $150 = HEAP8[107216 + ($st$0 * 58 | 0) + $146 >> 0] | 0;
   $151 = $150 & 255;
   if (($151 + -1 | 0) >>> 0 < 8) {
    $144 = $148;
    $st$0 = $151;
   } else {
    $$lcssa350 = $144;
    $$lcssa352 = $148;
    $$lcssa353 = $150;
    $$lcssa354 = $151;
    $st$0$lcssa351 = $st$0;
    break;
   }
  }
  if (!($$lcssa353 << 24 >> 24)) {
   $$0 = -1;
   label = 374;
   break;
  }
  $156 = ($argpos$0 | 0) > -1;
  L64 : do if ($$lcssa353 << 24 >> 24 == 19) if ($156) {
   $$0 = -1;
   label = 374;
   break L1;
  } else {
   $1180 = $1175;
   $1181 = $1176;
   label = 62;
  } else {
   if ($156) {
    HEAP32[$nl_type + ($argpos$0 << 2) >> 2] = $$lcssa354;
    $159 = $nl_arg + ($argpos$0 << 3) | 0;
    $1180 = HEAP32[$159 + 4 >> 2] | 0;
    $1181 = HEAP32[$159 >> 2] | 0;
    label = 62;
    break;
   }
   if (!$1) {
    $$0 = 0;
    label = 374;
    break L1;
   }
   if (($$lcssa353 & 255) > 20) {
    $1182 = $$lcssa352;
    $267 = $1176;
    $294 = $1175;
   } else do switch ($$lcssa354 | 0) {
   case 11:
    {
     $188 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $189 = HEAP32[$188 >> 2] | 0;
     HEAP32[$ap >> 2] = $188 + 4;
     $1182 = $$lcssa352;
     $267 = $189;
     $294 = 0;
     break L64;
     break;
    }
   case 14:
    {
     $219 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $220 = HEAP32[$219 >> 2] | 0;
     HEAP32[$ap >> 2] = $219 + 4;
     $1182 = $$lcssa352;
     $267 = $220 & 65535;
     $294 = 0;
     break L64;
     break;
    }
   case 17:
    {
     $245 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
     $246 = +HEAPF64[$245 >> 3];
     HEAP32[$ap >> 2] = $245 + 8;
     HEAPF64[tempDoublePtr >> 3] = $246;
     $1182 = $$lcssa352;
     $267 = HEAP32[tempDoublePtr >> 2] | 0;
     $294 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
     break L64;
     break;
    }
   case 12:
    {
     $195 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
     $196 = $195;
     $198 = HEAP32[$196 >> 2] | 0;
     $201 = HEAP32[$196 + 4 >> 2] | 0;
     HEAP32[$ap >> 2] = $195 + 8;
     $1182 = $$lcssa352;
     $267 = $198;
     $294 = $201;
     break L64;
     break;
    }
   case 10:
    {
     $179 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $180 = HEAP32[$179 >> 2] | 0;
     HEAP32[$ap >> 2] = $179 + 4;
     $1182 = $$lcssa352;
     $267 = $180;
     $294 = (($180 | 0) < 0) << 31 >> 31;
     break L64;
     break;
    }
   case 9:
    {
     $171 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $172 = HEAP32[$171 >> 2] | 0;
     HEAP32[$ap >> 2] = $171 + 4;
     $1182 = $$lcssa352;
     $267 = $172;
     $294 = $1175;
     break L64;
     break;
    }
   case 16:
    {
     $238 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $239 = HEAP32[$238 >> 2] | 0;
     HEAP32[$ap >> 2] = $238 + 4;
     $1182 = $$lcssa352;
     $267 = $239 & 255;
     $294 = 0;
     break L64;
     break;
    }
   case 18:
    {
     $254 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
     $255 = +HEAPF64[$254 >> 3];
     HEAP32[$ap >> 2] = $254 + 8;
     HEAPF64[tempDoublePtr >> 3] = $255;
     $1182 = $$lcssa352;
     $267 = HEAP32[tempDoublePtr >> 2] | 0;
     $294 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
     break L64;
     break;
    }
   case 13:
    {
     $207 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $208 = HEAP32[$207 >> 2] | 0;
     HEAP32[$ap >> 2] = $207 + 4;
     $1182 = $$lcssa352;
     $267 = $208 << 16 >> 16;
     $294 = ((($208 & 65535) << 16 >> 16 | 0) < 0) << 31 >> 31;
     break L64;
     break;
    }
   case 15:
    {
     $226 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $227 = HEAP32[$226 >> 2] | 0;
     HEAP32[$ap >> 2] = $226 + 4;
     $1182 = $$lcssa352;
     $267 = $227 << 24 >> 24;
     $294 = ((($227 & 255) << 24 >> 24 | 0) < 0) << 31 >> 31;
     break L64;
     break;
    }
   default:
    {
     $1182 = $$lcssa352;
     $267 = $1176;
     $294 = $1175;
     break L64;
    }
   } while (0);
  } while (0);
  if ((label | 0) == 62) {
   label = 0;
   if ($1) {
    $1182 = $$lcssa352;
    $267 = $1181;
    $294 = $1180;
   } else {
    $1175 = $1180;
    $1176 = $1181;
    $23 = $$lcssa352;
    $cnt$0 = $cnt$1;
    $l$0 = $37;
    $l10n$0 = $l10n$3;
    continue;
   }
  }
  $259 = HEAP8[$$lcssa350 >> 0] | 0;
  $t$0 = ($st$0$lcssa351 | 0) != 0 & ($259 & 15 | 0) == 3 ? $259 & -33 : $259;
  $266 = $fl$1 & -65537;
  $fl$1$ = ($fl$1 & 8192 | 0) == 0 ? $fl$1 : $266;
  L86 : do switch ($t$0 | 0) {
  case 88:
  case 120:
   {
    $fl$3 = $fl$1$;
    $p$1 = $p$0;
    $t$1 = $t$0;
    label = 73;
    break;
   }
  case 105:
  case 100:
   {
    if (($294 | 0) < 0) {
     $333 = _i64Subtract(0, 0, $267 | 0, $294 | 0) | 0;
     $339 = tempRet0;
     $341 = $333;
     $pl$0 = 1;
     $prefix$0 = 107680;
     label = 84;
     break L86;
    }
    if (!($fl$1$ & 2048)) {
     $337 = $fl$1$ & 1;
     $339 = $294;
     $341 = $267;
     $pl$0 = $337;
     $prefix$0 = ($337 | 0) == 0 ? 107680 : 107682;
     label = 84;
    } else {
     $339 = $294;
     $341 = $267;
     $pl$0 = 1;
     $prefix$0 = 107681;
     label = 84;
    }
    break;
   }
  case 117:
   {
    $339 = $294;
    $341 = $267;
    $pl$0 = 0;
    $prefix$0 = 107680;
    label = 84;
    break;
   }
  case 65:
  case 71:
  case 70:
  case 69:
  case 97:
  case 103:
  case 102:
  case 101:
   {
    HEAP32[tempDoublePtr >> 2] = $267;
    HEAP32[tempDoublePtr + 4 >> 2] = $294;
    $432 = +HEAPF64[tempDoublePtr >> 3];
    HEAP32[$e2$i >> 2] = 0;
    if (($294 | 0) < 0) {
     $$013$i = -$432;
     $pl$0$i = 1;
     $prefix$0$i = 107704;
    } else if (!($fl$1$ & 2048)) {
     $437 = $fl$1$ & 1;
     $$013$i = $432;
     $pl$0$i = $437;
     $prefix$0$i = ($437 | 0) == 0 ? 107705 : 107710;
    } else {
     $$013$i = $432;
     $pl$0$i = 1;
     $prefix$0$i = 107707;
    }
    HEAPF64[tempDoublePtr >> 3] = $$013$i;
    $441 = HEAP32[tempDoublePtr + 4 >> 2] & 2146435072;
    do if ($441 >>> 0 < 2146435072 | ($441 | 0) == 2146435072 & 0 < 0) {
     $473 = +_frexpl($$013$i, $e2$i) * 2.0;
     $474 = $473 != 0.0;
     if ($474) HEAP32[$e2$i >> 2] = (HEAP32[$e2$i >> 2] | 0) + -1;
     $477 = $t$0 | 32;
     if (($477 | 0) == 97) {
      $479 = $t$0 & 32;
      $prefix$0$$i = ($479 | 0) == 0 ? $prefix$0$i : $prefix$0$i + 9 | 0;
      $482 = $pl$0$i | 2;
      do if ($p$0 >>> 0 > 11) $$1$i = $473; else {
       $re$1187$i = 12 - $p$0 | 0;
       $round$0186$i = 8.0;
       while (1) {
        $re$1187$i = $re$1187$i + -1 | 0;
        $486 = $round$0186$i * 16.0;
        if (!$re$1187$i) {
         $$lcssa378 = $486;
         break;
        } else $round$0186$i = $486;
       }
       if ((HEAP8[$prefix$0$$i >> 0] | 0) == 45) {
        $$1$i = -($$lcssa378 + (-$473 - $$lcssa378));
        break;
       } else {
        $$1$i = $473 + $$lcssa378 - $$lcssa378;
        break;
       }
      } while (0);
      $496 = HEAP32[$e2$i >> 2] | 0;
      $499 = ($496 | 0) < 0 ? 0 - $496 | 0 : $496;
      if (($499 | 0) < 0) {
       $$05$i$i = $7;
       $503 = $499;
       $504 = (($499 | 0) < 0) << 31 >> 31;
       while (1) {
        $505 = ___uremdi3($503 | 0, $504 | 0, 10, 0) | 0;
        $509 = $$05$i$i + -1 | 0;
        HEAP8[$509 >> 0] = $505 | 48;
        $510 = ___udivdi3($503 | 0, $504 | 0, 10, 0) | 0;
        if ($504 >>> 0 > 9 | ($504 | 0) == 9 & $503 >>> 0 > 4294967295) {
         $$05$i$i = $509;
         $503 = $510;
         $504 = tempRet0;
        } else {
         $$lcssa379 = $509;
         $1191 = $510;
         break;
        }
       }
       $$0$lcssa$i56$i = $$lcssa379;
       $$01$lcssa$off0$i$i = $1191;
      } else {
       $$0$lcssa$i56$i = $7;
       $$01$lcssa$off0$i$i = $499;
      }
      if (!$$01$lcssa$off0$i$i) $$1$lcssa$i$i = $$0$lcssa$i56$i; else {
       $$12$i$i = $$0$lcssa$i56$i;
       $y$03$i$i = $$01$lcssa$off0$i$i;
       while (1) {
        $521 = $$12$i$i + -1 | 0;
        HEAP8[$521 >> 0] = ($y$03$i$i >>> 0) % 10 | 0 | 48;
        if ($y$03$i$i >>> 0 < 10) {
         $$1$lcssa$i$i = $521;
         break;
        } else {
         $$12$i$i = $521;
         $y$03$i$i = ($y$03$i$i >>> 0) / 10 | 0;
        }
       }
      }
      if (($$1$lcssa$i$i | 0) == ($7 | 0)) {
       HEAP8[$8 >> 0] = 48;
       $estr$0$i = $8;
      } else $estr$0$i = $$1$lcssa$i$i;
      HEAP8[$estr$0$i + -1 >> 0] = (HEAP32[$e2$i >> 2] >> 31 & 2) + 43;
      $533 = $estr$0$i + -2 | 0;
      HEAP8[$533 >> 0] = $t$0 + 15;
      if (!($fl$1$ & 8)) if (($p$0 | 0) < 1) {
       $$2$us$us$i = $$1$i;
       $s$0$us$us$i = $buf$i;
       while (1) {
        $536 = ~~$$2$us$us$i;
        $542 = $s$0$us$us$i + 1 | 0;
        HEAP8[$s$0$us$us$i >> 0] = HEAPU8[107760 + $536 >> 0] | $479;
        $$2$us$us$i = ($$2$us$us$i - +($536 | 0)) * 16.0;
        if (($542 - $0 | 0) != 1 | $$2$us$us$i == 0.0) $s$1$us$us$i = $542; else {
         HEAP8[$542 >> 0] = 46;
         $s$1$us$us$i = $s$0$us$us$i + 2 | 0;
        }
        if (!($$2$us$us$i != 0.0)) {
         $s$1$lcssa$i = $s$1$us$us$i;
         break;
        } else $s$0$us$us$i = $s$1$us$us$i;
       }
      } else {
       $$2$us$i = $$1$i;
       $s$0$us$i = $buf$i;
       while (1) {
        $551 = ~~$$2$us$i;
        $557 = $s$0$us$i + 1 | 0;
        HEAP8[$s$0$us$i >> 0] = HEAPU8[107760 + $551 >> 0] | $479;
        $$2$us$i = ($$2$us$i - +($551 | 0)) * 16.0;
        if (($557 - $0 | 0) == 1) {
         HEAP8[$557 >> 0] = 46;
         $s$1$us$i = $s$0$us$i + 2 | 0;
        } else $s$1$us$i = $557;
        if (!($$2$us$i != 0.0)) {
         $s$1$lcssa$i = $s$1$us$i;
         break;
        } else $s$0$us$i = $s$1$us$i;
       }
      } else {
       $$2$i = $$1$i;
       $s$0$i = $buf$i;
       while (1) {
        $566 = ~~$$2$i;
        $572 = $s$0$i + 1 | 0;
        HEAP8[$s$0$i >> 0] = HEAPU8[107760 + $566 >> 0] | $479;
        $$2$i = ($$2$i - +($566 | 0)) * 16.0;
        if (($572 - $0 | 0) == 1) {
         HEAP8[$572 >> 0] = 46;
         $s$1$i = $s$0$i + 2 | 0;
        } else $s$1$i = $572;
        if (!($$2$i != 0.0)) {
         $s$1$lcssa$i = $s$1$i;
         break;
        } else $s$0$i = $s$1$i;
       }
      }
      $$pre308$i = $s$1$lcssa$i;
      $584 = $533;
      if (($p$0 | 0) != 0 & ($11 + $$pre308$i | 0) < ($p$0 | 0)) $l$0$i = $12 + $p$0 - $584 | 0; else $l$0$i = $10 - $584 + $$pre308$i | 0;
      $589 = $l$0$i + $482 | 0;
      $590 = $fl$1$ & 73728;
      $592 = ($w$1 | 0) > ($589 | 0);
      if (($590 | 0) == 0 & $592) {
       $593 = $w$1 - $589 | 0;
       _memset($pad$i | 0, 32, ($593 >>> 0 > 256 ? 256 : $593) | 0) | 0;
       if ($593 >>> 0 > 255) {
        $$01$i62$i = $593;
        do {
         ___fwritex($pad$i, 256, $f) | 0;
         $$01$i62$i = $$01$i62$i + -256 | 0;
        } while ($$01$i62$i >>> 0 > 255);
        $$0$lcssa$i64$i = $593 & 255;
       } else $$0$lcssa$i64$i = $593;
       ___fwritex($pad$i, $$0$lcssa$i64$i, $f) | 0;
      }
      ___fwritex($prefix$0$$i, $482, $f) | 0;
      if (($590 | 0) == 65536 & $592) {
       $601 = $w$1 - $589 | 0;
       _memset($pad$i | 0, 48, ($601 >>> 0 > 256 ? 256 : $601) | 0) | 0;
       if ($601 >>> 0 > 255) {
        $$01$i69$i = $601;
        do {
         ___fwritex($pad$i, 256, $f) | 0;
         $$01$i69$i = $$01$i69$i + -256 | 0;
        } while ($$01$i69$i >>> 0 > 255);
        $$0$lcssa$i71$i = $601 & 255;
       } else $$0$lcssa$i71$i = $601;
       ___fwritex($pad$i, $$0$lcssa$i71$i, $f) | 0;
      }
      $608 = $$pre308$i - $0 | 0;
      ___fwritex($buf$i, $608, $f) | 0;
      $610 = $9 - $533 | 0;
      $612 = $l$0$i - $610 - $608 | 0;
      if (($612 | 0) > 0) {
       _memset($pad$i | 0, 48, ($612 >>> 0 > 256 ? 256 : $612) | 0) | 0;
       if ($612 >>> 0 > 255) {
        $$01$i75$i = $612;
        do {
         ___fwritex($pad$i, 256, $f) | 0;
         $$01$i75$i = $$01$i75$i + -256 | 0;
        } while ($$01$i75$i >>> 0 > 255);
        $$0$lcssa$i77$i = $612 & 255;
       } else $$0$lcssa$i77$i = $612;
       ___fwritex($pad$i, $$0$lcssa$i77$i, $f) | 0;
      }
      ___fwritex($533, $610, $f) | 0;
      if (($590 | 0) == 8192 & $592) {
       $621 = $w$1 - $589 | 0;
       _memset($pad$i | 0, 32, ($621 >>> 0 > 256 ? 256 : $621) | 0) | 0;
       if ($621 >>> 0 > 255) {
        $$01$i82$i = $621;
        do {
         ___fwritex($pad$i, 256, $f) | 0;
         $$01$i82$i = $$01$i82$i + -256 | 0;
        } while ($$01$i82$i >>> 0 > 255);
        $$0$lcssa$i84$i = $621 & 255;
       } else $$0$lcssa$i84$i = $621;
       ___fwritex($pad$i, $$0$lcssa$i84$i, $f) | 0;
      }
      $$0$i = $592 ? $w$1 : $589;
      break;
     }
     $$p$i = ($p$0 | 0) < 0 ? 6 : $p$0;
     if ($474) {
      $631 = (HEAP32[$e2$i >> 2] | 0) + -28 | 0;
      HEAP32[$e2$i >> 2] = $631;
      $$3$i = $473 * 268435456.0;
      $632 = $631;
     } else {
      $$3$i = $473;
      $632 = HEAP32[$e2$i >> 2] | 0;
     }
     $$39$i = ($632 | 0) < 0 ? $big$i : $13;
     $634 = $$39$i;
     $$4$i = $$3$i;
     $z$0$i = $$39$i;
     while (1) {
      $635 = ~~$$4$i >>> 0;
      HEAP32[$z$0$i >> 2] = $635;
      $636 = $z$0$i + 4 | 0;
      $$4$i = ($$4$i - +($635 >>> 0)) * 1.0e9;
      if (!($$4$i != 0.0)) {
       $$lcssa355 = $636;
       break;
      } else $z$0$i = $636;
     }
     $$pr$i = HEAP32[$e2$i >> 2] | 0;
     if (($$pr$i | 0) > 0) {
      $642 = $$pr$i;
      $a$1261$i = $$39$i;
      $z$1260$i = $$lcssa355;
      while (1) {
       $644 = ($642 | 0) > 29 ? 29 : $642;
       $d$0253$i = $z$1260$i + -4 | 0;
       do if ($d$0253$i >>> 0 < $a$1261$i >>> 0) $a$2$ph$i = $a$1261$i; else {
        $655 = $z$1260$i;
        $carry$0254$i = 0;
        $d$0255$i = $d$0253$i;
        while (1) {
         $647 = _bitshift64Shl(HEAP32[$d$0255$i >> 2] | 0, 0, $644 | 0) | 0;
         $649 = _i64Add($647 | 0, tempRet0 | 0, $carry$0254$i | 0, 0) | 0;
         $650 = tempRet0;
         $651 = ___uremdi3($649 | 0, $650 | 0, 1e9, 0) | 0;
         HEAP32[$d$0255$i >> 2] = $651;
         $653 = ___udivdi3($649 | 0, $650 | 0, 1e9, 0) | 0;
         $d$0$i = $655 + -8 | 0;
         if ($d$0$i >>> 0 < $a$1261$i >>> 0) {
          $$lcssa356 = $653;
          break;
         } else {
          $655$phi = $d$0255$i;
          $carry$0254$i = $653;
          $d$0255$i = $d$0$i;
          $655 = $655$phi;
         }
        }
        if (!$$lcssa356) {
         $a$2$ph$i = $a$1261$i;
         break;
        }
        $658 = $a$1261$i + -4 | 0;
        HEAP32[$658 >> 2] = $$lcssa356;
        $a$2$ph$i = $658;
       } while (0);
       $z$2$i = $z$1260$i;
       while (1) {
        if ($z$2$i >>> 0 <= $a$2$ph$i >>> 0) {
         $z$2$i$lcssa = $z$2$i;
         break;
        }
        $660 = $z$2$i + -4 | 0;
        if (!(HEAP32[$660 >> 2] | 0)) $z$2$i = $660; else {
         $z$2$i$lcssa = $z$2$i;
         break;
        }
       }
       $664 = (HEAP32[$e2$i >> 2] | 0) - $644 | 0;
       HEAP32[$e2$i >> 2] = $664;
       if (($664 | 0) > 0) {
        $642 = $664;
        $a$1261$i = $a$2$ph$i;
        $z$1260$i = $z$2$i$lcssa;
       } else {
        $$pr154$i = $664;
        $a$1$lcssa$i = $a$2$ph$i;
        $z$1$lcssa$i = $z$2$i$lcssa;
        break;
       }
      }
     } else {
      $$pr154$i = $$pr$i;
      $a$1$lcssa$i = $$39$i;
      $z$1$lcssa$i = $$lcssa355;
     }
     L205 : do if (($$pr154$i | 0) < 0) {
      $669 = (($$p$i + 25 | 0) / 9 | 0) + 1 | 0;
      if (($477 | 0) == 102) {
       $671 = $$39$i + ($669 << 2) | 0;
       $672 = $$pr154$i;
       $a$3248$us$i = $a$1$lcssa$i;
       $z$3247$us$i = $z$1$lcssa$i;
       while (1) {
        $$26$us$i = ($672 | 0) < -9 ? 9 : 0 - $672 | 0;
        do if ($a$3248$us$i >>> 0 < $z$3247$us$i >>> 0) {
         $693 = (1 << $$26$us$i) + -1 | 0;
         $697 = 1e9 >>> $$26$us$i;
         $carry3$0242$us$i = 0;
         $d$1241$us$i = $a$3248$us$i;
         while (1) {
          $691 = HEAP32[$d$1241$us$i >> 2] | 0;
          HEAP32[$d$1241$us$i >> 2] = ($691 >>> $$26$us$i) + $carry3$0242$us$i;
          $696 = Math_imul($691 & $693, $697) | 0;
          $d$1241$us$i = $d$1241$us$i + 4 | 0;
          if ($d$1241$us$i >>> 0 >= $z$3247$us$i >>> 0) {
           $$lcssa359 = $696;
           break;
          } else $carry3$0242$us$i = $696;
         }
         $$a$3$us$i = (HEAP32[$a$3248$us$i >> 2] | 0) == 0 ? $a$3248$us$i + 4 | 0 : $a$3248$us$i;
         if (!$$lcssa359) {
          $$a$3$us310$i = $$a$3$us$i;
          $z$4$us$i = $z$3247$us$i;
          break;
         }
         HEAP32[$z$3247$us$i >> 2] = $$lcssa359;
         $$a$3$us310$i = $$a$3$us$i;
         $z$4$us$i = $z$3247$us$i + 4 | 0;
        } else {
         $$a$3$us310$i = (HEAP32[$a$3248$us$i >> 2] | 0) == 0 ? $a$3248$us$i + 4 | 0 : $a$3248$us$i;
         $z$4$us$i = $z$3247$us$i;
        } while (0);
        $$z$4$us$i = ($z$4$us$i - $634 >> 2 | 0) > ($669 | 0) ? $671 : $z$4$us$i;
        $672 = (HEAP32[$e2$i >> 2] | 0) + $$26$us$i | 0;
        HEAP32[$e2$i >> 2] = $672;
        if (($672 | 0) >= 0) {
         $a$3$lcssa$i = $$a$3$us310$i;
         $z$3$lcssa$i = $$z$4$us$i;
         break L205;
        } else {
         $a$3248$us$i = $$a$3$us310$i;
         $z$3247$us$i = $$z$4$us$i;
        }
       }
      } else {
       $701 = $$pr154$i;
       $a$3248$i = $a$1$lcssa$i;
       $z$3247$i = $z$1$lcssa$i;
      }
      while (1) {
       $$26$i = ($701 | 0) < -9 ? 9 : 0 - $701 | 0;
       do if ($a$3248$i >>> 0 < $z$3247$i >>> 0) {
        $709 = (1 << $$26$i) + -1 | 0;
        $710 = 1e9 >>> $$26$i;
        $carry3$0242$i = 0;
        $d$1241$i = $a$3248$i;
        while (1) {
         $711 = HEAP32[$d$1241$i >> 2] | 0;
         HEAP32[$d$1241$i >> 2] = ($711 >>> $$26$i) + $carry3$0242$i;
         $715 = Math_imul($711 & $709, $710) | 0;
         $d$1241$i = $d$1241$i + 4 | 0;
         if ($d$1241$i >>> 0 >= $z$3247$i >>> 0) {
          $$lcssa358 = $715;
          break;
         } else $carry3$0242$i = $715;
        }
        $$a$3$i = (HEAP32[$a$3248$i >> 2] | 0) == 0 ? $a$3248$i + 4 | 0 : $a$3248$i;
        if (!$$lcssa358) {
         $$a$3312$i = $$a$3$i;
         $z$4$i = $z$3247$i;
         break;
        }
        HEAP32[$z$3247$i >> 2] = $$lcssa358;
        $$a$3312$i = $$a$3$i;
        $z$4$i = $z$3247$i + 4 | 0;
       } else {
        $$a$3312$i = (HEAP32[$a$3248$i >> 2] | 0) == 0 ? $a$3248$i + 4 | 0 : $a$3248$i;
        $z$4$i = $z$3247$i;
       } while (0);
       if (($z$4$i - $$a$3312$i >> 2 | 0) > ($669 | 0)) $z$5$i = $$a$3312$i + ($669 << 2) | 0; else $z$5$i = $z$4$i;
       $701 = (HEAP32[$e2$i >> 2] | 0) + $$26$i | 0;
       HEAP32[$e2$i >> 2] = $701;
       if (($701 | 0) >= 0) {
        $a$3$lcssa$i = $$a$3312$i;
        $z$3$lcssa$i = $z$5$i;
        break;
       } else {
        $a$3248$i = $$a$3312$i;
        $z$3247$i = $z$5$i;
       }
      }
     } else {
      $a$3$lcssa$i = $a$1$lcssa$i;
      $z$3$lcssa$i = $z$1$lcssa$i;
     } while (0);
     do if ($a$3$lcssa$i >>> 0 < $z$3$lcssa$i >>> 0) {
      $736 = ($634 - $a$3$lcssa$i >> 2) * 9 | 0;
      $737 = HEAP32[$a$3$lcssa$i >> 2] | 0;
      if ($737 >>> 0 < 10) {
       $e$1$i = $736;
       break;
      } else {
       $e$0237$i = $736;
       $i$0236$i = 10;
      }
      while (1) {
       $i$0236$i = $i$0236$i * 10 | 0;
       $740 = $e$0237$i + 1 | 0;
       if ($737 >>> 0 < $i$0236$i >>> 0) {
        $e$1$i = $740;
        break;
       } else $e$0237$i = $740;
      }
     } else $e$1$i = 0; while (0);
     $745 = ($477 | 0) == 103;
     $747 = $$p$i - (($477 | 0) != 102 ? $e$1$i : 0) + ((($$p$i | 0) != 0 & $745) << 31 >> 31) | 0;
     if (($747 | 0) < ((($z$3$lcssa$i - $634 >> 2) * 9 | 0) + -9 | 0)) {
      $754 = $747 + 9216 | 0;
      $755 = ($754 | 0) / 9 | 0;
      $756 = $$39$i + ($755 + -1023 << 2) | 0;
      $j$0229$i = (($754 | 0) % 9 | 0) + 1 | 0;
      if (($j$0229$i | 0) < 9) {
       $i$1230$i = 10;
       $j$0231$i = $j$0229$i;
       while (1) {
        $759 = $i$1230$i * 10 | 0;
        if (($j$0231$i | 0) == 8) {
         $i$1$lcssa$i = $759;
         break;
        } else {
         $i$1230$i = $759;
         $j$0231$i = $j$0231$i + 1 | 0;
        }
       }
      } else $i$1$lcssa$i = 10;
      $760 = HEAP32[$756 >> 2] | 0;
      $761 = ($760 >>> 0) % ($i$1$lcssa$i >>> 0) | 0;
      if (!$761) if (($$39$i + ($755 + -1022 << 2) | 0) == ($z$3$lcssa$i | 0)) {
       $a$7$i = $a$3$lcssa$i;
       $d$3$i = $756;
       $e$3$i = $e$1$i;
      } else label = 231; else label = 231;
      do if ((label | 0) == 231) {
       label = 0;
       $$28$i = ((($760 >>> 0) / ($i$1$lcssa$i >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
       $768 = ($i$1$lcssa$i | 0) / 2 | 0;
       do if ($761 >>> 0 < $768 >>> 0) $small$0$i = .5; else {
        if (($761 | 0) == ($768 | 0)) if (($$39$i + ($755 + -1022 << 2) | 0) == ($z$3$lcssa$i | 0)) {
         $small$0$i = 1.0;
         break;
        }
        $small$0$i = 1.5;
       } while (0);
       do if (!$pl$0$i) {
        $round6$1$i = $$28$i;
        $small$1$i = $small$0$i;
       } else {
        if ((HEAP8[$prefix$0$i >> 0] | 0) != 45) {
         $round6$1$i = $$28$i;
         $small$1$i = $small$0$i;
         break;
        }
        $round6$1$i = -$$28$i;
        $small$1$i = -$small$0$i;
       } while (0);
       $778 = $760 - $761 | 0;
       HEAP32[$756 >> 2] = $778;
       if (!($round6$1$i + $small$1$i != $round6$1$i)) {
        $a$7$i = $a$3$lcssa$i;
        $d$3$i = $756;
        $e$3$i = $e$1$i;
        break;
       }
       $781 = $778 + $i$1$lcssa$i | 0;
       HEAP32[$756 >> 2] = $781;
       if ($781 >>> 0 > 999999999) {
        $a$5223$i = $a$3$lcssa$i;
        $d$2222$i = $756;
        while (1) {
         $783 = $d$2222$i + -4 | 0;
         HEAP32[$d$2222$i >> 2] = 0;
         if ($783 >>> 0 < $a$5223$i >>> 0) {
          $785 = $a$5223$i + -4 | 0;
          HEAP32[$785 >> 2] = 0;
          $a$6$i = $785;
         } else $a$6$i = $a$5223$i;
         $787 = (HEAP32[$783 >> 2] | 0) + 1 | 0;
         HEAP32[$783 >> 2] = $787;
         if ($787 >>> 0 > 999999999) {
          $a$5223$i = $a$6$i;
          $d$2222$i = $783;
         } else {
          $a$5$lcssa$i = $a$6$i;
          $d$2$lcssa$i = $783;
          break;
         }
        }
       } else {
        $a$5$lcssa$i = $a$3$lcssa$i;
        $d$2$lcssa$i = $756;
       }
       $792 = ($634 - $a$5$lcssa$i >> 2) * 9 | 0;
       $793 = HEAP32[$a$5$lcssa$i >> 2] | 0;
       if ($793 >>> 0 < 10) {
        $a$7$i = $a$5$lcssa$i;
        $d$3$i = $d$2$lcssa$i;
        $e$3$i = $792;
        break;
       } else {
        $e$2218$i = $792;
        $i$2217$i = 10;
       }
       while (1) {
        $i$2217$i = $i$2217$i * 10 | 0;
        $796 = $e$2218$i + 1 | 0;
        if ($793 >>> 0 < $i$2217$i >>> 0) {
         $a$7$i = $a$5$lcssa$i;
         $d$3$i = $d$2$lcssa$i;
         $e$3$i = $796;
         break;
        } else $e$2218$i = $796;
       }
      } while (0);
      $798 = $d$3$i + 4 | 0;
      $a$8$ph$i = $a$7$i;
      $e$4$ph$i = $e$3$i;
      $z$6$ph$i = $z$3$lcssa$i >>> 0 > $798 >>> 0 ? $798 : $z$3$lcssa$i;
     } else {
      $a$8$ph$i = $a$3$lcssa$i;
      $e$4$ph$i = $e$1$i;
      $z$6$ph$i = $z$3$lcssa$i;
     }
     $a$8$ph294$i = $a$8$ph$i;
     $800 = 0 - $e$4$ph$i | 0;
     $z$6$i = $z$6$ph$i;
     while (1) {
      if ($z$6$i >>> 0 <= $a$8$ph$i >>> 0) {
       $$lcssa283$i = 0;
       $z$6$i$lcssa = $z$6$i;
       break;
      }
      $802 = $z$6$i + -4 | 0;
      if (!(HEAP32[$802 >> 2] | 0)) $z$6$i = $802; else {
       $$lcssa283$i = 1;
       $z$6$i$lcssa = $z$6$i;
       break;
      }
     }
     do if ($745) {
      $$$p$i = (($$p$i | 0) == 0 & 1) + $$p$i | 0;
      if (($$$p$i | 0) > ($e$4$ph$i | 0) & ($e$4$ph$i | 0) > -5) {
       $$019$i = $t$0 + -1 | 0;
       $$216$i = $$$p$i + -1 - $e$4$ph$i | 0;
      } else {
       $$019$i = $t$0 + -2 | 0;
       $$216$i = $$$p$i + -1 | 0;
      }
      if ($fl$1$ & 8) {
       $$120$i = $$019$i;
       $$317$i = $$216$i;
       break;
      }
      do if ($$lcssa283$i) {
       $816 = HEAP32[$z$6$i$lcssa + -4 >> 2] | 0;
       if (!$816) {
        $j$2$i = 9;
        break;
       }
       if (!(($816 >>> 0) % 10 | 0)) {
        $i$3213$i = 10;
        $j$1214$i = 0;
       } else {
        $j$2$i = 0;
        break;
       }
       while (1) {
        $i$3213$i = $i$3213$i * 10 | 0;
        $821 = $j$1214$i + 1 | 0;
        if (($816 >>> 0) % ($i$3213$i >>> 0) | 0) {
         $j$2$i = $821;
         break;
        } else $j$1214$i = $821;
       }
      } else $j$2$i = 9; while (0);
      $830 = (($z$6$i$lcssa - $634 >> 2) * 9 | 0) + -9 | 0;
      if (($$019$i | 32 | 0) == 102) {
       $831 = $830 - $j$2$i | 0;
       $$29$i = ($831 | 0) < 0 ? 0 : $831;
       $$120$i = $$019$i;
       $$317$i = ($$216$i | 0) < ($$29$i | 0) ? $$216$i : $$29$i;
       break;
      } else {
       $835 = $830 + $e$4$ph$i - $j$2$i | 0;
       $$31$i = ($835 | 0) < 0 ? 0 : $835;
       $$120$i = $$019$i;
       $$317$i = ($$216$i | 0) < ($$31$i | 0) ? $$216$i : $$31$i;
       break;
      }
     } else {
      $$120$i = $t$0;
      $$317$i = $$p$i;
     } while (0);
     $838 = ($$317$i | 0) != 0;
     if ($838) $842 = 1; else $842 = ($fl$1$ & 8 | 0) != 0;
     $841 = $842 & 1;
     $844 = ($$120$i | 32 | 0) == 102;
     if ($844) {
      $$pn$i = ($e$4$ph$i | 0) > 0 ? $e$4$ph$i : 0;
      $estr$2$i = 0;
     } else {
      $848 = ($e$4$ph$i | 0) < 0 ? $800 : $e$4$ph$i;
      if (($848 | 0) < 0) {
       $$05$i87$i = $7;
       $852 = $848;
       $853 = (($848 | 0) < 0) << 31 >> 31;
       while (1) {
        $854 = ___uremdi3($852 | 0, $853 | 0, 10, 0) | 0;
        $858 = $$05$i87$i + -1 | 0;
        HEAP8[$858 >> 0] = $854 | 48;
        $859 = ___udivdi3($852 | 0, $853 | 0, 10, 0) | 0;
        if ($853 >>> 0 > 9 | ($853 | 0) == 9 & $852 >>> 0 > 4294967295) {
         $$05$i87$i = $858;
         $852 = $859;
         $853 = tempRet0;
        } else {
         $$lcssa365 = $858;
         $1193 = $859;
         break;
        }
       }
       $$0$lcssa$i92$i = $$lcssa365;
       $$01$lcssa$off0$i93$i = $1193;
      } else {
       $$0$lcssa$i92$i = $7;
       $$01$lcssa$off0$i93$i = $848;
      }
      if (!$$01$lcssa$off0$i93$i) $estr$1$ph$i = $$0$lcssa$i92$i; else {
       $$12$i95$i = $$0$lcssa$i92$i;
       $y$03$i94$i = $$01$lcssa$off0$i93$i;
       while (1) {
        $870 = $$12$i95$i + -1 | 0;
        HEAP8[$870 >> 0] = ($y$03$i94$i >>> 0) % 10 | 0 | 48;
        if ($y$03$i94$i >>> 0 < 10) {
         $estr$1$ph$i = $870;
         break;
        } else {
         $$12$i95$i = $870;
         $y$03$i94$i = ($y$03$i94$i >>> 0) / 10 | 0;
        }
       }
      }
      if (($9 - $estr$1$ph$i | 0) < 2) {
       $estr$1209$i = $estr$1$ph$i;
       while (1) {
        $876 = $estr$1209$i + -1 | 0;
        HEAP8[$876 >> 0] = 48;
        if (($9 - $876 | 0) < 2) $estr$1209$i = $876; else {
         $estr$1$lcssa$i = $876;
         break;
        }
       }
      } else $estr$1$lcssa$i = $estr$1$ph$i;
      HEAP8[$estr$1$lcssa$i + -1 >> 0] = ($e$4$ph$i >> 31 & 2) + 43;
      $886 = $estr$1$lcssa$i + -2 | 0;
      HEAP8[$886 >> 0] = $$120$i;
      $$pn$i = $9 - $886 | 0;
      $estr$2$i = $886;
     }
     $891 = $pl$0$i + 1 + $$317$i + $841 + $$pn$i | 0;
     $892 = $fl$1$ & 73728;
     $894 = ($w$1 | 0) > ($891 | 0);
     if (($892 | 0) == 0 & $894) {
      $895 = $w$1 - $891 | 0;
      _memset($pad$i | 0, 32, ($895 >>> 0 > 256 ? 256 : $895) | 0) | 0;
      if ($895 >>> 0 > 255) {
       $$01$i103$i = $895;
       do {
        ___fwritex($pad$i, 256, $f) | 0;
        $$01$i103$i = $$01$i103$i + -256 | 0;
       } while ($$01$i103$i >>> 0 > 255);
       $$0$lcssa$i105$i = $895 & 255;
      } else $$0$lcssa$i105$i = $895;
      ___fwritex($pad$i, $$0$lcssa$i105$i, $f) | 0;
     }
     ___fwritex($prefix$0$i, $pl$0$i, $f) | 0;
     if (($892 | 0) == 65536 & $894) {
      $903 = $w$1 - $891 | 0;
      _memset($pad$i | 0, 48, ($903 >>> 0 > 256 ? 256 : $903) | 0) | 0;
      if ($903 >>> 0 > 255) {
       $$01$i110$i = $903;
       do {
        ___fwritex($pad$i, 256, $f) | 0;
        $$01$i110$i = $$01$i110$i + -256 | 0;
       } while ($$01$i110$i >>> 0 > 255);
       $$0$lcssa$i112$i = $903 & 255;
      } else $$0$lcssa$i112$i = $903;
      ___fwritex($pad$i, $$0$lcssa$i112$i, $f) | 0;
     }
     if ($844) {
      $r$0$a$8$i = $a$8$ph$i >>> 0 > $$39$i >>> 0 ? $$39$i : $a$8$ph$i;
      $911 = ~$634;
      $912 = ~$a$8$ph294$i;
      $umax$i = $911 >>> 0 > $912 >>> 0 ? $911 : $912;
      $914 = 3 - $umax$i | 0;
      $uglygep296$i = $$39$i + 1 | 0;
      $uglygep300301$i = ($914 >>> 0 > $uglygep296$i >>> 0 ? $914 : $uglygep296$i) + $umax$i | 0;
      $916 = ~$umax$i;
      $d$4199$i = $r$0$a$8$i;
      while (1) {
       $917 = HEAP32[$d$4199$i >> 2] | 0;
       if (!$917) $$1$lcssa$i120$i = $14; else {
        $$12$i118$i = $14;
        $y$03$i117$i = $917;
        while (1) {
         $922 = $$12$i118$i + -1 | 0;
         HEAP8[$922 >> 0] = ($y$03$i117$i >>> 0) % 10 | 0 | 48;
         if ($y$03$i117$i >>> 0 < 10) {
          $$1$lcssa$i120$i = $922;
          break;
         } else {
          $$12$i118$i = $922;
          $y$03$i117$i = ($y$03$i117$i >>> 0) / 10 | 0;
         }
        }
       }
       do if (($d$4199$i | 0) == ($r$0$a$8$i | 0)) {
        if (($$1$lcssa$i120$i | 0) != ($14 | 0)) {
         $s7$1$i = $$1$lcssa$i120$i;
         break;
        }
        HEAP8[$16 >> 0] = 48;
        $s7$1$i = $16;
       } else {
        if ($$1$lcssa$i120$i >>> 0 > $buf$i >>> 0) $s7$0196$i = $$1$lcssa$i120$i; else {
         $s7$1$i = $$1$lcssa$i120$i;
         break;
        }
        while (1) {
         $927 = $s7$0196$i + -1 | 0;
         HEAP8[$927 >> 0] = 48;
         if ($927 >>> 0 > $buf$i >>> 0) $s7$0196$i = $927; else {
          $s7$1$i = $927;
          break;
         }
        }
       } while (0);
       ___fwritex($s7$1$i, $15 - $s7$1$i | 0, $f) | 0;
       $932 = $d$4199$i + 4 | 0;
       if ($932 >>> 0 > $$39$i >>> 0) {
        $$lcssa374 = $932;
        break;
       } else $d$4199$i = $932;
      }
      if (!(($fl$1$ & 8 | 0) == 0 & ($838 ^ 1))) ___fwritex(107776, 1, $f) | 0;
      if (($$317$i | 0) > 0 & $$lcssa374 >>> 0 < $z$6$i$lcssa >>> 0) {
       $$418193$i = $$317$i;
       $955 = ($uglygep300301$i & -4) + $916 | 0;
       $d$5192$i = $$lcssa374;
       while (1) {
        $941 = HEAP32[$d$5192$i >> 2] | 0;
        if (!$941) {
         $s8$0188$i = $14;
         label = 300;
        } else {
         $$12$i127$i = $14;
         $y$03$i126$i = $941;
         while (1) {
          $946 = $$12$i127$i + -1 | 0;
          HEAP8[$946 >> 0] = ($y$03$i126$i >>> 0) % 10 | 0 | 48;
          if ($y$03$i126$i >>> 0 < 10) {
           $$lcssa375 = $946;
           break;
          } else {
           $$12$i127$i = $946;
           $y$03$i126$i = ($y$03$i126$i >>> 0) / 10 | 0;
          }
         }
         if ($$lcssa375 >>> 0 > $buf$i >>> 0) {
          $s8$0188$i = $$lcssa375;
          label = 300;
         } else $s8$0$lcssa$i = $$lcssa375;
        }
        if ((label | 0) == 300) while (1) {
         label = 0;
         $950 = $s8$0188$i + -1 | 0;
         HEAP8[$950 >> 0] = 48;
         if ($950 >>> 0 > $buf$i >>> 0) {
          $s8$0188$i = $950;
          label = 300;
         } else {
          $s8$0$lcssa$i = $950;
          break;
         }
        }
        $952 = ($$418193$i | 0) > 9;
        ___fwritex($s8$0$lcssa$i, $952 ? 9 : $$418193$i, $f) | 0;
        $954 = $955 + 8 | 0;
        $956 = $$418193$i + -9 | 0;
        if ($952 & $954 >>> 0 < $z$6$i$lcssa >>> 0) {
         $955$phi = $d$5192$i;
         $$418193$i = $956;
         $d$5192$i = $954;
         $955 = $955$phi;
        } else {
         $$418$lcssa$i = $956;
         break;
        }
       }
      } else $$418$lcssa$i = $$317$i;
      if (($$418$lcssa$i | 0) > 0) {
       _memset($pad$i | 0, 48, ($$418$lcssa$i >>> 0 > 256 ? 256 : $$418$lcssa$i) | 0) | 0;
       if ($$418$lcssa$i >>> 0 > 255) {
        $$01$i134$i = $$418$lcssa$i;
        do {
         ___fwritex($pad$i, 256, $f) | 0;
         $$01$i134$i = $$01$i134$i + -256 | 0;
        } while ($$01$i134$i >>> 0 > 255);
        $$0$lcssa$i136$i = $$418$lcssa$i & 255;
       } else $$0$lcssa$i136$i = $$418$lcssa$i;
       ___fwritex($pad$i, $$0$lcssa$i136$i, $f) | 0;
      }
     } else {
      $z$6$$i = $$lcssa283$i ? $z$6$i$lcssa : $a$8$ph$i + 4 | 0;
      do if (($$317$i | 0) > -1) {
       $968 = ($fl$1$ & 8 | 0) == 0;
       $$5205$i = $$317$i;
       $d$6204$i = $a$8$ph$i;
       while (1) {
        $969 = HEAP32[$d$6204$i >> 2] | 0;
        if (!$969) label = 314; else {
         $$12$i142$i = $14;
         $y$03$i141$i = $969;
         while (1) {
          $974 = $$12$i142$i + -1 | 0;
          HEAP8[$974 >> 0] = ($y$03$i141$i >>> 0) % 10 | 0 | 48;
          if ($y$03$i141$i >>> 0 < 10) {
           $$12$i142$i$lcssa = $$12$i142$i;
           $$lcssa369 = $974;
           break;
          } else {
           $$12$i142$i = $974;
           $y$03$i141$i = ($y$03$i141$i >>> 0) / 10 | 0;
          }
         }
         if (($$lcssa369 | 0) == ($14 | 0)) label = 314; else {
          $1195 = $$12$i142$i$lcssa;
          $s9$0$i = $$lcssa369;
         }
        }
        if ((label | 0) == 314) {
         label = 0;
         HEAP8[$16 >> 0] = 48;
         $1195 = $14;
         $s9$0$i = $16;
        }
        do if (($d$6204$i | 0) == ($a$8$ph$i | 0)) {
         ___fwritex($s9$0$i, 1, $f) | 0;
         if ($968 & ($$5205$i | 0) < 1) {
          $s9$2$i = $1195;
          break;
         }
         ___fwritex(107776, 1, $f) | 0;
         $s9$2$i = $1195;
        } else {
         if ($s9$0$i >>> 0 > $buf$i >>> 0) $s9$1200$i = $s9$0$i; else {
          $s9$2$i = $s9$0$i;
          break;
         }
         while (1) {
          $980 = $s9$1200$i + -1 | 0;
          HEAP8[$980 >> 0] = 48;
          if ($980 >>> 0 > $buf$i >>> 0) $s9$1200$i = $980; else {
           $s9$2$i = $980;
           break;
          }
         }
        } while (0);
        $984 = $15 - $s9$2$i | 0;
        ___fwritex($s9$2$i, ($$5205$i | 0) > ($984 | 0) ? $984 : $$5205$i, $f) | 0;
        $986 = $$5205$i - $984 | 0;
        $d$6204$i = $d$6204$i + 4 | 0;
        if (!($d$6204$i >>> 0 < $z$6$$i >>> 0 & ($986 | 0) > -1)) {
         $$lcssa371 = $986;
         break;
        } else $$5205$i = $986;
       }
       if (($$lcssa371 | 0) <= 0) break;
       _memset($pad$i | 0, 48, ($$lcssa371 >>> 0 > 256 ? 256 : $$lcssa371) | 0) | 0;
       if ($$lcssa371 >>> 0 > 255) {
        $$01$i149$i = $$lcssa371;
        do {
         ___fwritex($pad$i, 256, $f) | 0;
         $$01$i149$i = $$01$i149$i + -256 | 0;
        } while ($$01$i149$i >>> 0 > 255);
        $$0$lcssa$i151$i = $$lcssa371 & 255;
       } else $$0$lcssa$i151$i = $$lcssa371;
       ___fwritex($pad$i, $$0$lcssa$i151$i, $f) | 0;
      } else {} while (0);
      ___fwritex($estr$2$i, $9 - $estr$2$i | 0, $f) | 0;
     }
     if (($892 | 0) == 8192 & $894) {
      $1000 = $w$1 - $891 | 0;
      _memset($pad$i | 0, 32, ($1000 >>> 0 > 256 ? 256 : $1000) | 0) | 0;
      if ($1000 >>> 0 > 255) {
       $$01$i$i = $1000;
       do {
        ___fwritex($pad$i, 256, $f) | 0;
        $$01$i$i = $$01$i$i + -256 | 0;
       } while ($$01$i$i >>> 0 > 255);
       $$0$lcssa$i$i = $1000 & 255;
      } else $$0$lcssa$i$i = $1000;
      ___fwritex($pad$i, $$0$lcssa$i$i, $f) | 0;
     }
     $$0$i = $894 ? $w$1 : $891;
    } else {
     $448 = ($t$0 & 32 | 0) != 0;
     if ($$013$i != $$013$i | 0.0 != 0.0) {
      $pl$1$i = 0;
      $s1$0$i = $448 ? 107744 : 107752;
     } else {
      $pl$1$i = $pl$0$i;
      $s1$0$i = $448 ? 107728 : 107736;
     }
     $452 = $pl$1$i + 3 | 0;
     $455 = ($w$1 | 0) > ($452 | 0);
     if (($fl$1$ & 8192 | 0) == 0 & $455) {
      $456 = $w$1 - $452 | 0;
      _memset($pad$i | 0, 32, ($456 >>> 0 > 256 ? 256 : $456) | 0) | 0;
      if ($456 >>> 0 > 255) {
       $$01$i45$i = $456;
       do {
        ___fwritex($pad$i, 256, $f) | 0;
        $$01$i45$i = $$01$i45$i + -256 | 0;
       } while ($$01$i45$i >>> 0 > 255);
       $$0$lcssa$i47$i = $456 & 255;
      } else $$0$lcssa$i47$i = $456;
      ___fwritex($pad$i, $$0$lcssa$i47$i, $f) | 0;
     }
     ___fwritex($prefix$0$i, $pl$1$i, $f) | 0;
     ___fwritex($s1$0$i, 3, $f) | 0;
     if (($fl$1$ & 73728 | 0) == 8192 & $455) {
      $465 = $w$1 - $452 | 0;
      _memset($pad$i | 0, 32, ($465 >>> 0 > 256 ? 256 : $465) | 0) | 0;
      if ($465 >>> 0 > 255) {
       $$01$i52$i = $465;
       do {
        ___fwritex($pad$i, 256, $f) | 0;
        $$01$i52$i = $$01$i52$i + -256 | 0;
       } while ($$01$i52$i >>> 0 > 255);
       $$0$lcssa$i54$i = $465 & 255;
      } else $$0$lcssa$i54$i = $465;
      ___fwritex($pad$i, $$0$lcssa$i54$i, $f) | 0;
     }
     $$0$i = $455 ? $w$1 : $452;
    } while (0);
    $1175 = $294;
    $1176 = $267;
    $23 = $1182;
    $cnt$0 = $cnt$1;
    $l$0 = $$0$i;
    $l10n$0 = $l10n$3;
    continue L1;
    break;
   }
  case 111:
   {
    $317 = ($267 | 0) == 0 & ($294 | 0) == 0;
    if ($317) $$0$lcssa$i52 = $2; else {
     $$03$i49 = $2;
     $319 = $267;
     $323 = $294;
     while (1) {
      $322 = $$03$i49 + -1 | 0;
      HEAP8[$322 >> 0] = $319 & 7 | 48;
      $319 = _bitshift64Lshr($319 | 0, $323 | 0, 3) | 0;
      $323 = tempRet0;
      if (($319 | 0) == 0 & ($323 | 0) == 0) {
       $$0$lcssa$i52 = $322;
       break;
      } else $$03$i49 = $322;
     }
    }
    $or$cond19 = ($fl$1$ & 8 | 0) == 0 | $317;
    $369 = $267;
    $371 = $294;
    $a$0 = $$0$lcssa$i52;
    $fl$4 = $fl$1$;
    $p$2 = $p$0;
    $pl$1 = $or$cond19 & 1 ^ 1;
    $prefix$1 = $or$cond19 ? 107680 : 107685;
    label = 89;
    break;
   }
  case 112:
   {
    $fl$3 = $fl$1$ | 8;
    $p$1 = $p$0 >>> 0 > 8 ? $p$0 : 8;
    $t$1 = 120;
    label = 73;
    break;
   }
  case 99:
   {
    HEAP8[$4 >> 0] = $267;
    $1183 = $294;
    $1184 = $267;
    $a$2 = $4;
    $fl$6 = $266;
    $p$5 = 1;
    $pl$2 = 0;
    $prefix$2 = 107680;
    $z$2 = $2;
    break;
   }
  case 110:
   {
    switch ($st$0$lcssa351 | 0) {
    case 2:
     {
      $273 = $267;
      HEAP32[$273 >> 2] = $cnt$1;
      HEAP32[$273 + 4 >> 2] = (($cnt$1 | 0) < 0) << 31 >> 31;
      $1175 = $294;
      $1176 = $267;
      $23 = $1182;
      $cnt$0 = $cnt$1;
      $l$0 = $37;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 4:
     {
      HEAP8[$267 >> 0] = $cnt$1;
      $1175 = $294;
      $1176 = $267;
      $23 = $1182;
      $cnt$0 = $cnt$1;
      $l$0 = $37;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 1:
     {
      HEAP32[$267 >> 2] = $cnt$1;
      $1175 = $294;
      $1176 = $267;
      $23 = $1182;
      $cnt$0 = $cnt$1;
      $l$0 = $37;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 7:
     {
      $285 = $267;
      HEAP32[$285 >> 2] = $cnt$1;
      HEAP32[$285 + 4 >> 2] = (($cnt$1 | 0) < 0) << 31 >> 31;
      $1175 = $294;
      $1176 = $267;
      $23 = $1182;
      $cnt$0 = $cnt$1;
      $l$0 = $37;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 3:
     {
      HEAP16[$267 >> 1] = $cnt$1;
      $1175 = $294;
      $1176 = $267;
      $23 = $1182;
      $cnt$0 = $cnt$1;
      $l$0 = $37;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 0:
     {
      HEAP32[$267 >> 2] = $cnt$1;
      $1175 = $294;
      $1176 = $267;
      $23 = $1182;
      $cnt$0 = $cnt$1;
      $l$0 = $37;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 6:
     {
      HEAP32[$267 >> 2] = $cnt$1;
      $1175 = $294;
      $1176 = $267;
      $23 = $1182;
      $cnt$0 = $cnt$1;
      $l$0 = $37;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    default:
     {
      $1175 = $294;
      $1176 = $267;
      $23 = $1182;
      $cnt$0 = $cnt$1;
      $l$0 = $37;
      $l10n$0 = $l10n$3;
      continue L1;
     }
    }
    break;
   }
  case 109:
   {
    $a$1 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0;
    label = 94;
    break;
   }
  case 115:
   {
    $a$1 = ($267 | 0) == 0 ? 107696 : $267;
    label = 94;
    break;
   }
  case 67:
   {
    HEAP32[$wc >> 2] = $267;
    HEAP32[$5 >> 2] = 0;
    $1187 = $wc;
    $1188 = $6;
    $p$4271 = -1;
    label = 99;
    break;
   }
  case 83:
   {
    $393 = $267;
    if (!$p$0) {
     $1189 = $267;
     $1190 = $393;
     $i$0$lcssa272 = 0;
     label = 104;
    } else {
     $1187 = $393;
     $1188 = $267;
     $p$4271 = $p$0;
     label = 99;
    }
    break;
   }
  default:
   {
    $1183 = $294;
    $1184 = $267;
    $a$2 = $23;
    $fl$6 = $fl$1$;
    $p$5 = $p$0;
    $pl$2 = 0;
    $prefix$2 = 107680;
    $z$2 = $2;
   }
  } while (0);
  do if ((label | 0) == 73) {
   label = 0;
   $292 = $t$1 & 32;
   if (($267 | 0) == 0 & ($294 | 0) == 0) {
    $369 = $267;
    $371 = $294;
    $a$0 = $2;
    $fl$4 = $fl$3;
    $p$2 = $p$1;
    $pl$1 = 0;
    $prefix$1 = 107680;
    label = 89;
   } else {
    $$012$i = $2;
    $298 = $267;
    $305 = $294;
    while (1) {
     $304 = $$012$i + -1 | 0;
     HEAP8[$304 >> 0] = HEAPU8[107760 + ($298 & 15) >> 0] | $292;
     $298 = _bitshift64Lshr($298 | 0, $305 | 0, 4) | 0;
     $305 = tempRet0;
     if (($298 | 0) == 0 & ($305 | 0) == 0) {
      $$lcssa386 = $304;
      break;
     } else $$012$i = $304;
    }
    if (!($fl$3 & 8)) {
     $369 = $267;
     $371 = $294;
     $a$0 = $$lcssa386;
     $fl$4 = $fl$3;
     $p$2 = $p$1;
     $pl$1 = 0;
     $prefix$1 = 107680;
     label = 89;
    } else {
     $369 = $267;
     $371 = $294;
     $a$0 = $$lcssa386;
     $fl$4 = $fl$3;
     $p$2 = $p$1;
     $pl$1 = 2;
     $prefix$1 = 107680 + ($t$1 >> 4) | 0;
     label = 89;
    }
   }
  } else if ((label | 0) == 84) {
   label = 0;
   if ($339 >>> 0 > 0 | ($339 | 0) == 0 & $341 >>> 0 > 4294967295) {
    $$05$i = $2;
    $346 = $341;
    $347 = $339;
    while (1) {
     $348 = ___uremdi3($346 | 0, $347 | 0, 10, 0) | 0;
     $352 = $$05$i + -1 | 0;
     HEAP8[$352 >> 0] = $348 | 48;
     $353 = ___udivdi3($346 | 0, $347 | 0, 10, 0) | 0;
     if ($347 >>> 0 > 9 | ($347 | 0) == 9 & $346 >>> 0 > 4294967295) {
      $$05$i = $352;
      $346 = $353;
      $347 = tempRet0;
     } else {
      $$lcssa382 = $352;
      $1185 = $353;
      break;
     }
    }
    $$0$lcssa$i54 = $$lcssa382;
    $$01$lcssa$off0$i = $1185;
   } else {
    $$0$lcssa$i54 = $2;
    $$01$lcssa$off0$i = $341;
   }
   if (!$$01$lcssa$off0$i) {
    $369 = $341;
    $371 = $339;
    $a$0 = $$0$lcssa$i54;
    $fl$4 = $fl$1$;
    $p$2 = $p$0;
    $pl$1 = $pl$0;
    $prefix$1 = $prefix$0;
    label = 89;
   } else {
    $$12$i = $$0$lcssa$i54;
    $y$03$i = $$01$lcssa$off0$i;
    while (1) {
     $364 = $$12$i + -1 | 0;
     HEAP8[$364 >> 0] = ($y$03$i >>> 0) % 10 | 0 | 48;
     if ($y$03$i >>> 0 < 10) {
      $369 = $341;
      $371 = $339;
      $a$0 = $364;
      $fl$4 = $fl$1$;
      $p$2 = $p$0;
      $pl$1 = $pl$0;
      $prefix$1 = $prefix$0;
      label = 89;
      break;
     } else {
      $$12$i = $364;
      $y$03$i = ($y$03$i >>> 0) / 10 | 0;
     }
    }
   }
  } else if ((label | 0) == 94) {
   label = 0;
   $387 = _memchr($a$1, 0, $p$0) | 0;
   if (!$387) {
    $1183 = $294;
    $1184 = $267;
    $a$2 = $a$1;
    $fl$6 = $266;
    $p$5 = $p$0;
    $pl$2 = 0;
    $prefix$2 = 107680;
    $z$2 = $a$1 + $p$0 | 0;
    break;
   } else {
    $1183 = $294;
    $1184 = $267;
    $a$2 = $a$1;
    $fl$6 = $266;
    $p$5 = $387 - $a$1 | 0;
    $pl$2 = 0;
    $prefix$2 = 107680;
    $z$2 = $387;
    break;
   }
  } else if ((label | 0) == 99) {
   label = 0;
   $i$0176 = 0;
   $l$1175 = 0;
   $ws$0177 = $1187;
   while (1) {
    $395 = HEAP32[$ws$0177 >> 2] | 0;
    if (!$395) {
     $i$0$lcssa = $i$0176;
     $l$2 = $l$1175;
     break;
    }
    $397 = _wctomb($mb, $395) | 0;
    if (($397 | 0) < 0 | $397 >>> 0 > ($p$4271 - $i$0176 | 0) >>> 0) {
     $i$0$lcssa = $i$0176;
     $l$2 = $397;
     break;
    }
    $402 = $397 + $i$0176 | 0;
    if ($p$4271 >>> 0 > $402 >>> 0) {
     $i$0176 = $402;
     $l$1175 = $397;
     $ws$0177 = $ws$0177 + 4 | 0;
    } else {
     $i$0$lcssa = $402;
     $l$2 = $397;
     break;
    }
   }
   if (($l$2 | 0) < 0) {
    $$0 = -1;
    label = 374;
    break L1;
   } else {
    $1189 = $1188;
    $1190 = $1187;
    $i$0$lcssa272 = $i$0$lcssa;
    label = 104;
   }
  } while (0);
  if ((label | 0) == 89) {
   label = 0;
   $$fl$4 = ($p$2 | 0) > -1 ? $fl$4 & -65537 : $fl$4;
   $373 = ($369 | 0) != 0 | ($371 | 0) != 0;
   if ($373 | ($p$2 | 0) != 0) {
    $379 = ($373 & 1 ^ 1) + ($3 - $a$0) | 0;
    $1183 = $371;
    $1184 = $369;
    $a$2 = $a$0;
    $fl$6 = $$fl$4;
    $p$5 = ($p$2 | 0) > ($379 | 0) ? $p$2 : $379;
    $pl$2 = $pl$1;
    $prefix$2 = $prefix$1;
    $z$2 = $2;
   } else {
    $1183 = $371;
    $1184 = $369;
    $a$2 = $2;
    $fl$6 = $$fl$4;
    $p$5 = 0;
    $pl$2 = $pl$1;
    $prefix$2 = $prefix$1;
    $z$2 = $2;
   }
  } else if ((label | 0) == 104) {
   label = 0;
   $405 = $fl$1$ & 73728;
   $407 = ($w$1 | 0) > ($i$0$lcssa272 | 0);
   if (($405 | 0) == 0 & $407) {
    $408 = $w$1 - $i$0$lcssa272 | 0;
    _memset($pad$i | 0, 32, ($408 >>> 0 > 256 ? 256 : $408) | 0) | 0;
    if ($408 >>> 0 > 255) {
     $$01$i67 = $408;
     do {
      ___fwritex($pad$i, 256, $f) | 0;
      $$01$i67 = $$01$i67 + -256 | 0;
     } while ($$01$i67 >>> 0 > 255);
     $$0$lcssa$i69 = $408 & 255;
    } else $$0$lcssa$i69 = $408;
    ___fwritex($pad$i, $$0$lcssa$i69, $f) | 0;
   }
   L481 : do if ($i$0$lcssa272) {
    $i$1187 = 0;
    $ws$1188 = $1190;
    while (1) {
     $416 = HEAP32[$ws$1188 >> 2] | 0;
     if (!$416) break L481;
     $418 = _wctomb($mb, $416) | 0;
     $i$1187 = $418 + $i$1187 | 0;
     if (($i$1187 | 0) > ($i$0$lcssa272 | 0)) break L481;
     ___fwritex($mb, $418, $f) | 0;
     if ($i$1187 >>> 0 >= $i$0$lcssa272 >>> 0) break; else $ws$1188 = $ws$1188 + 4 | 0;
    }
   } while (0);
   if (($405 | 0) == 8192 & $407) {
    $424 = $w$1 - $i$0$lcssa272 | 0;
    _memset($pad$i | 0, 32, ($424 >>> 0 > 256 ? 256 : $424) | 0) | 0;
    if ($424 >>> 0 > 255) {
     $$01$i74 = $424;
     do {
      ___fwritex($pad$i, 256, $f) | 0;
      $$01$i74 = $$01$i74 + -256 | 0;
     } while ($$01$i74 >>> 0 > 255);
     $$0$lcssa$i76 = $424 & 255;
    } else $$0$lcssa$i76 = $424;
    ___fwritex($pad$i, $$0$lcssa$i76, $f) | 0;
   }
   $1175 = $294;
   $1176 = $1189;
   $23 = $1182;
   $cnt$0 = $cnt$1;
   $l$0 = $407 ? $w$1 : $i$0$lcssa272;
   $l10n$0 = $l10n$3;
   continue;
  }
  $1009 = $z$2 - $a$2 | 0;
  $$p$5 = ($p$5 | 0) < ($1009 | 0) ? $1009 : $p$5;
  $1011 = $pl$2 + $$p$5 | 0;
  $w$2 = ($w$1 | 0) < ($1011 | 0) ? $1011 : $w$1;
  $1013 = $fl$6 & 73728;
  $1015 = ($w$2 | 0) > ($1011 | 0);
  if (($1013 | 0) == 0 & $1015) {
   $1016 = $w$2 - $1011 | 0;
   _memset($pad$i | 0, 32, ($1016 >>> 0 > 256 ? 256 : $1016) | 0) | 0;
   if ($1016 >>> 0 > 255) {
    $$01$i84 = $1016;
    do {
     ___fwritex($pad$i, 256, $f) | 0;
     $$01$i84 = $$01$i84 + -256 | 0;
    } while ($$01$i84 >>> 0 > 255);
    $$0$lcssa$i86 = $1016 & 255;
   } else $$0$lcssa$i86 = $1016;
   ___fwritex($pad$i, $$0$lcssa$i86, $f) | 0;
  }
  ___fwritex($prefix$2, $pl$2, $f) | 0;
  if (($1013 | 0) == 65536 & $1015) {
   $1024 = $w$2 - $1011 | 0;
   _memset($pad$i | 0, 48, ($1024 >>> 0 > 256 ? 256 : $1024) | 0) | 0;
   if ($1024 >>> 0 > 255) {
    $$01$i60 = $1024;
    do {
     ___fwritex($pad$i, 256, $f) | 0;
     $$01$i60 = $$01$i60 + -256 | 0;
    } while ($$01$i60 >>> 0 > 255);
    $$0$lcssa$i62 = $1024 & 255;
   } else $$0$lcssa$i62 = $1024;
   ___fwritex($pad$i, $$0$lcssa$i62, $f) | 0;
  }
  if (($$p$5 | 0) > ($1009 | 0)) {
   $1032 = $$p$5 - $1009 | 0;
   _memset($pad$i | 0, 48, ($1032 >>> 0 > 256 ? 256 : $1032) | 0) | 0;
   if ($1032 >>> 0 > 255) {
    $$01$i45 = $1032;
    do {
     ___fwritex($pad$i, 256, $f) | 0;
     $$01$i45 = $$01$i45 + -256 | 0;
    } while ($$01$i45 >>> 0 > 255);
    $$0$lcssa$i47 = $1032 & 255;
   } else $$0$lcssa$i47 = $1032;
   ___fwritex($pad$i, $$0$lcssa$i47, $f) | 0;
  }
  ___fwritex($a$2, $1009, $f) | 0;
  if (($1013 | 0) == 8192 & $1015) {
   $1040 = $w$2 - $1011 | 0;
   _memset($pad$i | 0, 32, ($1040 >>> 0 > 256 ? 256 : $1040) | 0) | 0;
   if ($1040 >>> 0 > 255) {
    $$01$i = $1040;
    do {
     ___fwritex($pad$i, 256, $f) | 0;
     $$01$i = $$01$i + -256 | 0;
    } while ($$01$i >>> 0 > 255);
    $$0$lcssa$i = $1040 & 255;
   } else $$0$lcssa$i = $1040;
   ___fwritex($pad$i, $$0$lcssa$i, $f) | 0;
  }
  $1175 = $1183;
  $1176 = $1184;
  $23 = $1182;
  $cnt$0 = $cnt$1;
  $l$0 = $w$2;
  $l10n$0 = $l10n$3;
 }
 if ((label | 0) == 355) {
  if ($f) {
   $$0 = $cnt$1$lcssa;
   STACKTOP = sp;
   return $$0 | 0;
  }
  if (!$l10n$0$lcssa) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else $i$2163 = 1;
  while (1) {
   $1050 = HEAP32[$nl_type + ($i$2163 << 2) >> 2] | 0;
   if (!$1050) {
    $i$2163$lcssa = $i$2163;
    break;
   }
   $1053 = $nl_arg + ($i$2163 << 3) | 0;
   L538 : do if ($1050 >>> 0 <= 20) do switch ($1050 | 0) {
   case 9:
    {
     $1060 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $1061 = HEAP32[$1060 >> 2] | 0;
     HEAP32[$ap >> 2] = $1060 + 4;
     HEAP32[$1053 >> 2] = $1061;
     break L538;
     break;
    }
   case 10:
    {
     $1067 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $1068 = HEAP32[$1067 >> 2] | 0;
     HEAP32[$ap >> 2] = $1067 + 4;
     $1071 = $1053;
     HEAP32[$1071 >> 2] = $1068;
     HEAP32[$1071 + 4 >> 2] = (($1068 | 0) < 0) << 31 >> 31;
     break L538;
     break;
    }
   case 11:
    {
     $1080 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $1081 = HEAP32[$1080 >> 2] | 0;
     HEAP32[$ap >> 2] = $1080 + 4;
     $1082 = $1053;
     HEAP32[$1082 >> 2] = $1081;
     HEAP32[$1082 + 4 >> 2] = 0;
     break L538;
     break;
    }
   case 12:
    {
     $1091 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
     $1092 = $1091;
     $1094 = HEAP32[$1092 >> 2] | 0;
     $1097 = HEAP32[$1092 + 4 >> 2] | 0;
     HEAP32[$ap >> 2] = $1091 + 8;
     $1098 = $1053;
     HEAP32[$1098 >> 2] = $1094;
     HEAP32[$1098 + 4 >> 2] = $1097;
     break L538;
     break;
    }
   case 13:
    {
     $1107 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $1108 = HEAP32[$1107 >> 2] | 0;
     HEAP32[$ap >> 2] = $1107 + 4;
     $1110 = ($1108 & 65535) << 16 >> 16;
     $1113 = $1053;
     HEAP32[$1113 >> 2] = $1110;
     HEAP32[$1113 + 4 >> 2] = (($1110 | 0) < 0) << 31 >> 31;
     break L538;
     break;
    }
   case 14:
    {
     $1122 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $1123 = HEAP32[$1122 >> 2] | 0;
     HEAP32[$ap >> 2] = $1122 + 4;
     $1124 = $1053;
     HEAP32[$1124 >> 2] = $1123 & 65535;
     HEAP32[$1124 + 4 >> 2] = 0;
     break L538;
     break;
    }
   case 15:
    {
     $1133 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $1134 = HEAP32[$1133 >> 2] | 0;
     HEAP32[$ap >> 2] = $1133 + 4;
     $1136 = ($1134 & 255) << 24 >> 24;
     $1139 = $1053;
     HEAP32[$1139 >> 2] = $1136;
     HEAP32[$1139 + 4 >> 2] = (($1136 | 0) < 0) << 31 >> 31;
     break L538;
     break;
    }
   case 16:
    {
     $1148 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $1149 = HEAP32[$1148 >> 2] | 0;
     HEAP32[$ap >> 2] = $1148 + 4;
     $1150 = $1053;
     HEAP32[$1150 >> 2] = $1149 & 255;
     HEAP32[$1150 + 4 >> 2] = 0;
     break L538;
     break;
    }
   case 17:
    {
     $1159 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
     $1160 = +HEAPF64[$1159 >> 3];
     HEAP32[$ap >> 2] = $1159 + 8;
     HEAPF64[$1053 >> 3] = $1160;
     break L538;
     break;
    }
   case 18:
    {
     $1166 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
     $1167 = +HEAPF64[$1166 >> 3];
     HEAP32[$ap >> 2] = $1166 + 8;
     HEAPF64[$1053 >> 3] = $1167;
     break L538;
     break;
    }
   default:
    break L538;
   } while (0); while (0);
   $i$2163 = $i$2163 + 1 | 0;
   if (($i$2163 | 0) >= 10) {
    $$0 = 1;
    label = 374;
    break;
   }
  }
  if ((label | 0) == 374) {
   STACKTOP = sp;
   return $$0 | 0;
  }
  if (($i$2163$lcssa | 0) < 10) $i$3161 = $i$2163$lcssa; else {
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  }
  while (1) {
   if (HEAP32[$nl_type + ($i$3161 << 2) >> 2] | 0) {
    $$0 = -1;
    label = 374;
    break;
   }
   $i$3161 = $i$3161 + 1 | 0;
   if (($i$3161 | 0) >= 10) {
    $$0 = 1;
    label = 374;
    break;
   }
  }
  if ((label | 0) == 374) {
   STACKTOP = sp;
   return $$0 | 0;
  }
 } else if ((label | 0) == 374) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _luaV_execute($L) {
 $L = $L | 0;
 var $$0$i143 = 0, $$02$i$i = 0, $$02$i$i100 = 0, $$02$i$i105 = 0, $$02$i$i110 = 0, $$02$i$i115 = 0, $$02$i$i120 = 0, $$02$i$i125 = 0, $$02$i$i131 = 0, $$02$i$i136 = 0, $$02$i$i168 = 0, $$02$i$i173 = 0, $$02$i$i95 = 0, $$c24 = 0, $$ph275$ph = 0, $$ph275279 = 0, $$pre$phiZ2D = 0, $$pre1017 = 0, $$pre1019 = 0, $$sum13 = 0, $$sum14 = 0, $$sum21 = 0, $$sum25 = 0, $$sum3 = 0, $0 = 0, $10 = 0, $1002 = 0, $1010 = 0, $1011 = 0, $1021 = 0, $1033 = 0, $1034 = 0, $1044 = 0, $1055 = 0.0, $1056 = 0.0, $1060 = 0, $1061 = 0, $1063 = 0, $107 = 0, $1072 = 0, $1084 = 0.0, $1087 = 0, $1088 = 0, $1094 = 0, $1095 = 0.0, $1096 = 0.0, $11 = 0, $1106 = 0, $1113 = 0, $1116 = 0, $1118 = 0, $112 = 0, $1125 = 0, $113 = 0, $1130 = 0, $1132 = 0, $1136 = 0, $1138 = 0, $1139 = 0, $1144 = 0, $1145 = 0, $1155 = 0, $1157 = 0, $1166 = 0, $1172 = 0, $1179 = 0, $1180 = 0, $1182 = 0, $1183 = 0, $1185 = 0, $1187 = 0, $1194 = 0, $1196 = 0, $12 = 0, $1202 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1212 = 0, $1213 = 0, $1215 = 0, $1217 = 0, $1224 = 0, $1226 = 0, $1232 = 0, $1239 = 0, $1240 = 0, $1242 = 0, $1243 = 0, $1245 = 0, $1247 = 0, $1254 = 0, $1259 = 0, $1260 = 0, $1269 = 0, $1270 = 0, $1272 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1285 = 0, $1286 = 0, $1295 = 0, $13 = 0, $1300 = 0, $1301 = 0, $1305 = 0, $1306 = 0, $1308 = 0, $1315 = 0, $1316 = 0, $1318 = 0, $132 = 0, $1327 = 0, $1328 = 0, $1333 = 0, $1339 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1352 = 0, $1361 = 0, $1362 = 0, $1367 = 0, $1368 = 0, $1377 = 0, $1386 = 0, $139 = 0, $1391 = 0, $1396 = 0, $14 = 0, $1403 = 0, $1408 = 0, $1412 = 0, $1415 = 0, $1416 = 0, $1418 = 0, $1420 = 0, $1430 = 0.0, $1432 = 0.0, $1434 = 0.0, $144 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1452 = 0, $1453 = 0, $1455 = 0, $1457 = 0, $1458 = 0.0, $1459 = 0.0, $1471 = 0, $1477 = 0, $1478 = 0, $1488 = 0, $15 = 0, $150 = 0, $1500 = 0.0, $1505 = 0, $1506 = 0, $1507 = 0, $1517 = 0, $1528 = 0.0, $1529 = 0, $1530 = 0, $1540 = 0, $1551 = 0.0, $1552 = 0, $1562 = 0, $157 = 0, $1574 = 0.0, $1579 = 0, $158 = 0, $1582 = 0, $1587 = 0, $1588 = 0, $1594 = 0, $1599 = 0, $16 = 0, $1600 = 0, $1604 = 0, $1609 = 0, $1610 = 0, $1617 = 0, $1619 = 0, $162 = 0, $1621 = 0, $1629 = 0, $1634 = 0, $1635 = 0, $164 = 0, $1643 = 0, $1645 = 0, $1654 = 0, $1658 = 0, $1661 = 0, $1666 = 0, $1667 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $17 = 0, $170 = 0, $1701 = 0, $1710 = 0, $1711 = 0, $1720 = 0, $1722 = 0, $1725 = 0, $1727 = 0, $1728 = 0, $174 = 0, $1744 = 0, $1745 = 0, $1755 = 0, $1756 = 0, $1765 = 0, $1769 = 0, $1773 = 0, $1778 = 0, $1779 = 0, $1784 = 0, $18 = 0, $181 = 0, $187 = 0, $19 = 0, $194 = 0, $195 = 0, $197 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $204 = 0, $21 = 0, $214 = 0, $216 = 0, $22 = 0, $221 = 0, $222 = 0, $226 = 0, $23 = 0, $233 = 0, $235 = 0, $24 = 0, $241 = 0, $249 = 0, $25 = 0, $250 = 0, $252 = 0, $266 = 0, $27 = 0, $278 = 0, $28 = 0, $288 = 0, $3 = 0, $300 = 0.0, $301 = 0.0, $304 = 0, $31 = 0, $310 = 0, $318 = 0, $319 = 0, $32 = 0, $321 = 0, $335 = 0, $34 = 0, $347 = 0, $35 = 0, $357 = 0, $36 = 0, $369 = 0.0, $37 = 0, $370 = 0.0, $373 = 0, $379 = 0, $387 = 0, $388 = 0, $39 = 0, $390 = 0, $4 = 0, $40 = 0, $404 = 0, $416 = 0, $426 = 0, $438 = 0.0, $439 = 0.0, $44 = 0, $442 = 0, $448 = 0, $456 = 0, $457 = 0, $467 = 0, $479 = 0, $480 = 0, $490 = 0, $5 = 0, $50 = 0, $502 = 0.0, $503 = 0.0, $506 = 0, $51 = 0, $512 = 0, $520 = 0, $521 = 0, $524 = 0.0, $525 = 0.0, $532 = 0, $536 = 0, $543 = 0, $544 = 0, $547 = 0.0, $548 = 0.0, $55 = 0, $555 = 0, $559 = 0, $566 = 0, $567 = 0, $570 = 0, $576 = 0, $584 = 0, $585 = 0, $588 = 0.0, $589 = 0.0, $596 = 0, $6 = 0, $60 = 0, $600 = 0, $607 = 0, $608 = 0, $61 = 0, $611 = 0.0, $612 = 0.0, $619 = 0, $623 = 0, $630 = 0, $631 = 0, $634 = 0, $640 = 0, $648 = 0, $649 = 0, $652 = 0.0, $653 = 0.0, $660 = 0, $664 = 0, $67 = 0, $671 = 0, $672 = 0, $675 = 0.0, $676 = 0.0, $683 = 0, $687 = 0, $694 = 0, $695 = 0, $698 = 0, $7 = 0, $704 = 0, $712 = 0, $713 = 0, $716 = 0.0, $717 = 0.0, $72 = 0, $724 = 0, $728 = 0, $73 = 0, $735 = 0, $736 = 0, $739 = 0.0, $740 = 0.0, $747 = 0, $751 = 0, $757 = 0, $762 = 0, $765 = 0, $768 = 0, $77 = 0, $774 = 0, $782 = 0, $783 = 0, $786 = 0.0, $787 = 0.0, $794 = 0, $798 = 0, $8 = 0, $805 = 0, $806 = 0, $809 = 0.0, $810 = 0.0, $817 = 0, $82 = 0, $821 = 0, $827 = 0, $828 = 0, $832 = 0, $835 = 0, $838 = 0, $844 = 0, $852 = 0, $853 = 0, $855 = 0, $858 = 0, $859 = 0, $863 = 0, $87 = 0, $876 = 0, $88 = 0, $888 = 0, $898 = 0, $9 = 0, $909 = 0.0, $910 = 0.0, $911 = 0.0, $917 = 0, $923 = 0, $931 = 0, $932 = 0, $934 = 0, $937 = 0, $938 = 0, $943 = 0, $948 = 0, $957 = 0, $969 = 0, $979 = 0, $991 = 0.0, $992 = 0.0, $996 = 0, $aux$0634 = 0, $b$0 = 0, $b131$0 = 0, $base$0 = 0, $base$1 = 0, $base$2 = 0, $base$3 = 0, $c128$0 = 0, $ci$0 = 0, $f$0$i$i = 0.0, $i$0 = 0, $i$01$i = 0, $i$01$i188 = 0, $j$0296 = 0, $last$0298 = 0, $m$0 = 0.0, $n$0 = 0, $n$1297 = 0, $ra$0 = 0, $ra$1 = 0, $ra$2 = 0, $storemerge = 0, $storemerge42$in = 0, $storemerge46$in = 0, $storemerge50$in = 0, $v$i = 0, $v$i$i = 0, $v$i$i104 = 0, $v$i$i109 = 0, $v$i$i114 = 0, $v$i$i119 = 0, $v$i$i124 = 0, $v$i$i130 = 0, $v$i$i135 = 0, $v$i$i167 = 0, $v$i$i172 = 0, $v$i$i94 = 0, $v$i$i99 = 0, $v$i1$i = 0, $v$i144 = 0, $v$i147 = 0, $v$i152 = 0, $v$i155 = 0, $v$i158 = 0, $v$i161 = 0, $v$i164 = 0, $v$i177 = 0, $v$i180 = 0, $v$i183 = 0, $v$i73 = 0, $v$i76 = 0, $v$i79 = 0, $v$i82 = 0, $v$i85 = 0, $v$i88 = 0, $v$i91 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 $vararg_buffer8 = sp + 32 | 0;
 $vararg_buffer6 = sp + 24 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer2 = sp + 8 | 0;
 $vararg_buffer = sp;
 $v$i183 = sp + 280 | 0;
 $v$i180 = sp + 272 | 0;
 $v$i177 = sp + 264 | 0;
 $v$i1$i = sp + 256 | 0;
 $v$i$i172 = sp + 248 | 0;
 $v$i$i167 = sp + 240 | 0;
 $v$i164 = sp + 232 | 0;
 $v$i161 = sp + 224 | 0;
 $v$i158 = sp + 216 | 0;
 $v$i155 = sp + 208 | 0;
 $v$i152 = sp + 200 | 0;
 $v$i147 = sp + 192 | 0;
 $v$i144 = sp + 184 | 0;
 $v$i$i135 = sp + 176 | 0;
 $v$i$i130 = sp + 168 | 0;
 $v$i$i124 = sp + 160 | 0;
 $v$i$i119 = sp + 152 | 0;
 $v$i$i114 = sp + 144 | 0;
 $v$i$i109 = sp + 136 | 0;
 $v$i$i104 = sp + 128 | 0;
 $v$i$i99 = sp + 120 | 0;
 $v$i$i94 = sp + 112 | 0;
 $v$i$i = sp + 104 | 0;
 $v$i91 = sp + 96 | 0;
 $v$i88 = sp + 88 | 0;
 $v$i85 = sp + 80 | 0;
 $v$i82 = sp + 72 | 0;
 $v$i79 = sp + 64 | 0;
 $v$i76 = sp + 56 | 0;
 $v$i73 = sp + 48 | 0;
 $v$i = sp + 40 | 0;
 $0 = $L + 16 | 0;
 $2 = $L + 108 | 0;
 $3 = $L + 12 | 0;
 $4 = $L + 8 | 0;
 $5 = $v$i73 + 4 | 0;
 $6 = $v$i + 4 | 0;
 $7 = $v$i79 + 4 | 0;
 $8 = $v$i76 + 4 | 0;
 $9 = $v$i85 + 4 | 0;
 $10 = $v$i82 + 4 | 0;
 $11 = $v$i91 + 4 | 0;
 $12 = $v$i88 + 4 | 0;
 $13 = $v$i147 + 4 | 0;
 $14 = $v$i144 + 4 | 0;
 $15 = $v$i155 + 4 | 0;
 $16 = $v$i152 + 4 | 0;
 $17 = $v$i161 + 4 | 0;
 $18 = $v$i158 + 4 | 0;
 $19 = $v$i164 + 4 | 0;
 $20 = $v$i1$i + 4 | 0;
 $21 = $v$i183 + 4 | 0;
 $22 = $v$i180 + 4 | 0;
 $23 = $v$i177 + 4 | 0;
 $24 = $L + 24 | 0;
 $25 = $L + 100 | 0;
 $ci$0 = HEAP32[$0 >> 2] | 0;
 L1 : while (1) {
  $27 = HEAP32[HEAP32[$ci$0 >> 2] >> 2] | 0;
  $28 = $27 + 12 | 0;
  $31 = HEAP32[(HEAP32[$28 >> 2] | 0) + 44 >> 2] | 0;
  $32 = $ci$0 + 16 | 0;
  $34 = $ci$0 + 20 | 0;
  $35 = $27 + 16 | 0;
  $36 = $ci$0 + 4 | 0;
  $base$0 = HEAP32[$32 >> 2] | 0;
  L3 : while (1) {
   $37 = HEAP32[$34 >> 2] | 0;
   HEAP32[$34 >> 2] = $37 + 4;
   $39 = HEAP32[$37 >> 2] | 0;
   $40 = HEAP8[$2 >> 0] | 0;
   if (!($40 & 12)) $base$1 = $base$0; else {
    $44 = (HEAP32[$25 >> 2] | 0) + -1 | 0;
    HEAP32[$25 >> 2] = $44;
    if (($44 | 0) != 0 & ($40 & 4) == 0) $base$1 = $base$0; else {
     _luaG_traceexec($L);
     $base$1 = HEAP32[$32 >> 2] | 0;
    }
   }
   $50 = $39 >>> 6 & 255;
   $51 = $base$1 + ($50 << 3) | 0;
   do switch ($39 & 63 | 0) {
   case 0:
    {
     $55 = $base$1 + ($39 >>> 23 << 3) | 0;
     $60 = HEAP32[$55 + 4 >> 2] | 0;
     $61 = $51;
     HEAP32[$61 >> 2] = HEAP32[$55 >> 2];
     HEAP32[$61 + 4 >> 2] = $60;
     $base$0 = $base$1;
     continue L3;
     break;
    }
   case 5:
    {
     $107 = HEAP32[HEAP32[$35 + ($39 >>> 23 << 2) >> 2] >> 2] | 0;
     $112 = HEAP32[$107 + 4 >> 2] | 0;
     $113 = $51;
     HEAP32[$113 >> 2] = HEAP32[$107 >> 2];
     HEAP32[$113 + 4 >> 2] = $112;
     $base$0 = $base$1;
     continue L3;
     break;
    }
   case 9:
    {
     $162 = HEAP32[$35 + ($39 >>> 23 << 2) >> 2] | 0;
     $164 = $51;
     $169 = HEAP32[$164 + 4 >> 2] | 0;
     $170 = HEAP32[$162 >> 2] | 0;
     HEAP32[$170 >> 2] = HEAP32[$164 >> 2];
     HEAP32[$170 + 4 >> 2] = $169;
     $174 = HEAP32[$162 >> 2] | 0;
     if (!(HEAP32[$174 + 4 >> 2] & 64)) {
      $base$0 = $base$1;
      continue L3;
     }
     if (($174 | 0) != ($162 + 8 | 0)) {
      $base$0 = $base$1;
      continue L3;
     }
     _luaC_upvalbarrier_($L, $162);
     $base$0 = $base$1;
     continue L3;
     break;
    }
   case 3:
    {
     HEAP32[$51 >> 2] = $39 >>> 23;
     HEAP32[$base$1 + ($50 << 3) + 4 >> 2] = 1;
     if (!($39 & 8372224)) {
      $base$0 = $base$1;
      continue L3;
     }
     HEAP32[$34 >> 2] = (HEAP32[$34 >> 2] | 0) + 4;
     $base$0 = $base$1;
     continue L3;
     break;
    }
   case 6:
    {
     $121 = $39 >>> 14;
     if (!($121 & 256)) $128 = $base$1 + (($121 & 511) << 3) | 0; else $128 = $31 + (($121 & 255) << 3) | 0;
     _luaV_gettable($L, HEAP32[HEAP32[$35 + ($39 >>> 23 << 2) >> 2] >> 2] | 0, $128, $51);
     $base$0 = HEAP32[$32 >> 2] | 0;
     continue L3;
     break;
    }
   case 10:
    {
     $181 = $39 >>> 23;
     if (!($181 & 256)) $194 = $base$1 + ($181 << 3) | 0; else $194 = $31 + (($181 & 255) << 3) | 0;
     $187 = $39 >>> 14;
     if (!($187 & 256)) $195 = $base$1 + (($187 & 511) << 3) | 0; else $195 = $31 + (($187 & 255) << 3) | 0;
     _luaV_settable($L, $51, $194, $195);
     $base$0 = HEAP32[$32 >> 2] | 0;
     continue L3;
     break;
    }
   case 7:
    {
     $132 = $39 >>> 14;
     if (!($132 & 256)) $139 = $base$1 + (($132 & 511) << 3) | 0; else $139 = $31 + (($132 & 255) << 3) | 0;
     _luaV_gettable($L, $base$1 + ($39 >>> 23 << 3) | 0, $139, $51);
     $base$0 = HEAP32[$32 >> 2] | 0;
     continue L3;
     break;
    }
   case 2:
    {
     $77 = HEAP32[$34 >> 2] | 0;
     HEAP32[$34 >> 2] = $77 + 4;
     $82 = $31 + ((HEAP32[$77 >> 2] | 0) >>> 6 << 3) | 0;
     $87 = HEAP32[$82 + 4 >> 2] | 0;
     $88 = $51;
     HEAP32[$88 >> 2] = HEAP32[$82 >> 2];
     HEAP32[$88 + 4 >> 2] = $87;
     $base$0 = $base$1;
     continue L3;
     break;
    }
   case 4:
    {
     $b$0 = $39 >>> 23;
     $ra$0 = $51;
     while (1) {
      HEAP32[$ra$0 + 4 >> 2] = 0;
      if (!$b$0) {
       $base$0 = $base$1;
       continue L3;
      } else {
       $b$0 = $b$0 + -1 | 0;
       $ra$0 = $ra$0 + 8 | 0;
      }
     }
     break;
    }
   case 13:
    {
     $235 = $39 >>> 23;
     if (!($235 & 256)) $249 = $base$1 + ($235 << 3) | 0; else $249 = $31 + (($235 & 255) << 3) | 0;
     $241 = $39 >>> 14;
     if (!($241 & 256)) $252 = $base$1 + (($241 & 511) << 3) | 0; else $252 = $31 + (($241 & 255) << 3) | 0;
     $250 = HEAP32[$249 + 4 >> 2] | 0;
     do if (($250 | 0) == 3) {
      $301 = +HEAPF32[$249 >> 2];
      label = 65;
     } else if (($250 | 0) == 19) if ((HEAP32[$252 + 4 >> 2] | 0) == 19) {
      HEAP32[$51 >> 2] = (HEAP32[$252 >> 2] | 0) + (HEAP32[$249 >> 2] | 0);
      HEAP32[$base$1 + ($50 << 3) + 4 >> 2] = 19;
      $base$0 = $base$1;
      continue L3;
     } else {
      $301 = +(HEAP32[$249 >> 2] | 0);
      label = 65;
      break;
     } else if (($250 & 15 | 0) == 4) {
      $266 = _luaO_str2num((HEAP32[$249 >> 2] | 0) + 24 | 0, $v$i) | 0;
      if (($266 | 0) == ((HEAP32[(HEAP32[$249 >> 2] | 0) + 12 >> 2] | 0) + 1 | 0)) if ((HEAP32[$6 >> 2] | 0) == 19) {
       $301 = +(HEAP32[$v$i >> 2] | 0);
       label = 65;
       break;
      } else {
       $301 = +HEAPF32[$v$i >> 2];
       label = 65;
       break;
      }
     } while (0);
     L61 : do if ((label | 0) == 65) {
      label = 0;
      $278 = HEAP32[$252 + 4 >> 2] | 0;
      do if (($278 | 0) == 3) $300 = +HEAPF32[$252 >> 2]; else {
       if (($278 | 0) == 19) {
        $300 = +(HEAP32[$252 >> 2] | 0);
        break;
       }
       if (($278 & 15 | 0) != 4) break L61;
       $288 = _luaO_str2num((HEAP32[$252 >> 2] | 0) + 24 | 0, $v$i73) | 0;
       if (($288 | 0) != ((HEAP32[(HEAP32[$252 >> 2] | 0) + 12 >> 2] | 0) + 1 | 0)) break L61;
       if ((HEAP32[$5 >> 2] | 0) == 19) {
        $300 = +(HEAP32[$v$i73 >> 2] | 0);
        break;
       } else {
        $300 = +HEAPF32[$v$i73 >> 2];
        break;
       }
      } while (0);
      HEAPF32[$51 >> 2] = $301 + $300;
      HEAP32[$base$1 + ($50 << 3) + 4 >> 2] = 3;
      $base$0 = $base$1;
      continue L3;
     } while (0);
     _luaT_trybinTM($L, $249, $252, $51, 6);
     $base$0 = HEAP32[$32 >> 2] | 0;
     continue L3;
     break;
    }
   case 12:
    {
     $214 = $base$1 + ($39 >>> 23 << 3) | 0;
     $216 = $214;
     $221 = HEAP32[$216 + 4 >> 2] | 0;
     $222 = $base$1 + ($50 + 1 << 3) | 0;
     HEAP32[$222 >> 2] = HEAP32[$216 >> 2];
     HEAP32[$222 + 4 >> 2] = $221;
     $226 = $39 >>> 14;
     if (!($226 & 256)) $233 = $base$1 + (($226 & 511) << 3) | 0; else $233 = $31 + (($226 & 255) << 3) | 0;
     _luaV_gettable($L, $214, $233, $51);
     $base$0 = HEAP32[$32 >> 2] | 0;
     continue L3;
     break;
    }
   case 8:
    {
     $144 = $39 >>> 23;
     if (!($144 & 256)) $157 = $base$1 + ($144 << 3) | 0; else $157 = $31 + (($144 & 255) << 3) | 0;
     $150 = $39 >>> 14;
     if (!($150 & 256)) $158 = $base$1 + (($150 & 511) << 3) | 0; else $158 = $31 + (($150 & 255) << 3) | 0;
     _luaV_settable($L, HEAP32[HEAP32[$35 + ($50 << 2) >> 2] >> 2] | 0, $157, $158);
     $base$0 = HEAP32[$32 >> 2] | 0;
     continue L3;
     break;
    }
   case 20:
    {
     $506 = $39 >>> 23;
     if (!($506 & 256)) $520 = $base$1 + ($506 << 3) | 0; else $520 = $31 + (($506 & 255) << 3) | 0;
     $512 = $39 >>> 14;
     if (!($512 & 256)) $543 = $base$1 + (($512 & 511) << 3) | 0; else $543 = $31 + (($512 & 255) << 3) | 0;
     $521 = HEAP32[$520 + 4 >> 2] | 0;
     L99 : do if (($521 | 0) == 19) {
      $566 = HEAP32[$520 >> 2] | 0;
      label = 172;
     } else {
      $$02$i$i = $520;
      $532 = $521;
      while (1) {
       if (($532 | 0) == 3) break; else if (($532 | 0) == 19) {
        label = 168;
        break;
       }
       if (($532 & 15 | 0) != 4) break L99;
       $536 = _luaO_str2num((HEAP32[$$02$i$i >> 2] | 0) + 24 | 0, $v$i$i) | 0;
       if (($536 | 0) != ((HEAP32[(HEAP32[$$02$i$i >> 2] | 0) + 12 >> 2] | 0) + 1 | 0)) break L99;
       $$02$i$i = $v$i$i;
       $532 = HEAP32[$v$i$i + 4 >> 2] | 0;
      }
      if ((label | 0) == 168) {
       label = 0;
       $566 = HEAP32[$$02$i$i >> 2] | 0;
       label = 172;
       break;
      }
      $524 = +HEAPF32[$$02$i$i >> 2];
      $525 = +Math_floor(+$524);
      if (!($524 != $525)) if ($525 >= -2147483648.0 & $525 < 2147483648.0) {
       $566 = ~~$525;
       label = 172;
      }
     } while (0);
     L111 : do if ((label | 0) == 172) {
      label = 0;
      $544 = HEAP32[$543 + 4 >> 2] | 0;
      do if (($544 | 0) == 19) $567 = HEAP32[$543 >> 2] | 0; else {
       $$02$i$i95 = $543;
       $555 = $544;
       while (1) {
        if (($555 | 0) == 3) break; else if (($555 | 0) == 19) {
         label = 178;
         break;
        }
        if (($555 & 15 | 0) != 4) break L111;
        $559 = _luaO_str2num((HEAP32[$$02$i$i95 >> 2] | 0) + 24 | 0, $v$i$i94) | 0;
        if (($559 | 0) != ((HEAP32[(HEAP32[$$02$i$i95 >> 2] | 0) + 12 >> 2] | 0) + 1 | 0)) break L111;
        $$02$i$i95 = $v$i$i94;
        $555 = HEAP32[$v$i$i94 + 4 >> 2] | 0;
       }
       if ((label | 0) == 178) {
        label = 0;
        $567 = HEAP32[$$02$i$i95 >> 2] | 0;
        break;
       }
       $547 = +HEAPF32[$$02$i$i95 >> 2];
       $548 = +Math_floor(+$547);
       if ($547 != $548) break L111;
       if (!($548 >= -2147483648.0 & $548 < 2147483648.0)) break L111;
       $567 = ~~$548;
      } while (0);
      HEAP32[$51 >> 2] = $567 & $566;
      HEAP32[$base$1 + ($50 << 3) + 4 >> 2] = 19;
      $base$0 = $base$1;
      continue L3;
     } while (0);
     _luaT_trybinTM($L, $520, $543, $51, 13);
     $base$0 = HEAP32[$32 >> 2] | 0;
     continue L3;
     break;
    }
   case 18:
    {
     $442 = $39 >>> 23;
     if (!($442 & 256)) $456 = $base$1 + ($442 << 3) | 0; else $456 = $31 + (($442 & 255) << 3) | 0;
     $448 = $39 >>> 14;
     if (!($448 & 256)) $479 = $base$1 + (($448 & 511) << 3) | 0; else $479 = $31 + (($448 & 255) << 3) | 0;
     $457 = HEAP32[$456 + 4 >> 2] | 0;
     do if (($457 | 0) == 3) {
      $503 = +HEAPF32[$456 >> 2];
      label = 145;
     } else {
      if (($457 | 0) == 19) {
       $503 = +(HEAP32[$456 >> 2] | 0);
       label = 145;
       break;
      }
      if (($457 & 15 | 0) == 4) {
       $467 = _luaO_str2num((HEAP32[$456 >> 2] | 0) + 24 | 0, $v$i88) | 0;
       if (($467 | 0) == ((HEAP32[(HEAP32[$456 >> 2] | 0) + 12 >> 2] | 0) + 1 | 0)) if ((HEAP32[$12 >> 2] | 0) == 19) {
        $503 = +(HEAP32[$v$i88 >> 2] | 0);
        label = 145;
        break;
       } else {
        $503 = +HEAPF32[$v$i88 >> 2];
        label = 145;
        break;
       }
      }
     } while (0);
     L147 : do if ((label | 0) == 145) {
      label = 0;
      $480 = HEAP32[$479 + 4 >> 2] | 0;
      do if (($480 | 0) == 3) $502 = +HEAPF32[$479 >> 2]; else {
       if (($480 | 0) == 19) {
        $502 = +(HEAP32[$479 >> 2] | 0);
        break;
       }
       if (($480 & 15 | 0) != 4) break L147;
       $490 = _luaO_str2num((HEAP32[$479 >> 2] | 0) + 24 | 0, $v$i91) | 0;
       if (($490 | 0) != ((HEAP32[(HEAP32[$479 >> 2] | 0) + 12 >> 2] | 0) + 1 | 0)) break L147;
       if ((HEAP32[$11 >> 2] | 0) == 19) {
        $502 = +(HEAP32[$v$i91 >> 2] | 0);
        break;
       } else {
        $502 = +HEAPF32[$v$i91 >> 2];
        break;
       }
      } while (0);
      HEAPF32[$51 >> 2] = $503 / $502;
      HEAP32[$base$1 + ($50 << 3) + 4 >> 2] = 3;
      $base$0 = $base$1;
      continue L3;
     } while (0);
     _luaT_trybinTM($L, $456, $479, $51, 11);
     $base$0 = HEAP32[$32 >> 2] | 0;
     continue L3;
     break;
    }
   case 1:
    {
     $67 = $31 + ($39 >>> 14 << 3) | 0;
     $72 = HEAP32[$67 + 4 >> 2] | 0;
     $73 = $51;
     HEAP32[$73 >> 2] = HEAP32[$67 >> 2];
     HEAP32[$73 + 4 >> 2] = $72;
     $base$0 = $base$1;
     continue L3;
     break;
    }
   case 14:
    {
     $304 = $39 >>> 23;
     if (!($304 & 256)) $318 = $base$1 + ($304 << 3) | 0; else $318 = $31 + (($304 & 255) << 3) | 0;
     $310 = $39 >>> 14;
     if (!($310 & 256)) $321 = $base$1 + (($310 & 511) << 3) | 0; else $321 = $31 + (($310 & 255) << 3) | 0;
     $319 = HEAP32[$318 + 4 >> 2] | 0;
     do if (($319 | 0) == 19) if ((HEAP32[$321 + 4 >> 2] | 0) == 19) {
      HEAP32[$51 >> 2] = (HEAP32[$318 >> 2] | 0) - (HEAP32[$321 >> 2] | 0);
      HEAP32[$base$1 + ($50 << 3) + 4 >> 2] = 19;
      $base$0 = $base$1;
      continue L3;
     } else {
      $370 = +(HEAP32[$318 >> 2] | 0);
      label = 92;
      break;
     } else if (($319 | 0) == 3) {
      $370 = +HEAPF32[$318 >> 2];
      label = 92;
     } else if (($319 & 15 | 0) == 4) {
      $335 = _luaO_str2num((HEAP32[$318 >> 2] | 0) + 24 | 0, $v$i76) | 0;
      if (($335 | 0) == ((HEAP32[(HEAP32[$318 >> 2] | 0) + 12 >> 2] | 0) + 1 | 0)) if ((HEAP32[$8 >> 2] | 0) == 19) {
       $370 = +(HEAP32[$v$i76 >> 2] | 0);
       label = 92;
       break;
      } else {
       $370 = +HEAPF32[$v$i76 >> 2];
       label = 92;
       break;
      }
     } while (0);
     L184 : do if ((label | 0) == 92) {
      label = 0;
      $347 = HEAP32[$321 + 4 >> 2] | 0;
      do if (($347 | 0) == 3) $369 = +HEAPF32[$321 >> 2]; else {
       if (($347 | 0) == 19) {
        $369 = +(HEAP32[$321 >> 2] | 0);
        break;
       }
       if (($347 & 15 | 0) != 4) break L184;
       $357 = _luaO_str2num((HEAP32[$321 >> 2] | 0) + 24 | 0, $v$i79) | 0;
       if (($357 | 0) != ((HEAP32[(HEAP32[$321 >> 2] | 0) + 12 >> 2] | 0) + 1 | 0)) break L184;
       if ((HEAP32[$7 >> 2] | 0) == 19) {
        $369 = +(HEAP32[$v$i79 >> 2] | 0);
        break;
       } else {
        $369 = +HEAPF32[$v$i79 >> 2];
        break;
       }
      } while (0);
      HEAPF32[$51 >> 2] = $370 - $369;
      HEAP32[$base$1 + ($50 << 3) + 4 >> 2] = 3;
      $base$0 = $base$1;
      continue L3;
     } while (0);
     _luaT_trybinTM($L, $318, $321, $51, 7);
     $base$0 = HEAP32[$32 >> 2] | 0;
     continue L3;
     break;
    }
   case 15:
    {
     $373 = $39 >>> 23;
     if (!($373 & 256)) $387 = $base$1 + ($373 << 3) | 0; else $387 = $31 + (($373 & 255) << 3) | 0;
     $379 = $39 >>> 14;
     if (!($379 & 256)) $390 = $base$1 + (($379 & 511) << 3) | 0; else $390 = $31 + (($379 & 255) << 3) | 0;
     $388 = HEAP32[$387 + 4 >> 2] | 0;
     do if (($388 | 0) == 19) if ((HEAP32[$390 + 4 >> 2] | 0) == 19) {
      HEAP32[$51 >> 2] = Math_imul(HEAP32[$390 >> 2] | 0, HEAP32[$387 >> 2] | 0) | 0;
      HEAP32[$base$1 + ($50 << 3) + 4 >> 2] = 19;
      $base$0 = $base$1;
      continue L3;
     } else {
      $439 = +(HEAP32[$387 >> 2] | 0);
      label = 119;
      break;
     } else if (($388 | 0) == 3) {
      $439 = +HEAPF32[$387 >> 2];
      label = 119;
     } else if (($388 & 15 | 0) == 4) {
      $404 = _luaO_str2num((HEAP32[$387 >> 2] | 0) + 24 | 0, $v$i82) | 0;
      if (($404 | 0) == ((HEAP32[(HEAP32[$387 >> 2] | 0) + 12 >> 2] | 0) + 1 | 0)) if ((HEAP32[$10 >> 2] | 0) == 19) {
       $439 = +(HEAP32[$v$i82 >> 2] | 0);
       label = 119;
       break;
      } else {
       $439 = +HEAPF32[$v$i82 >> 2];
       label = 119;
       break;
      }
     } while (0);
     L220 : do if ((label | 0) == 119) {
      label = 0;
      $416 = HEAP32[$390 + 4 >> 2] | 0;
      do if (($416 | 0) == 3) $438 = +HEAPF32[$390 >> 2]; else {
       if (($416 | 0) == 19) {
        $438 = +(HEAP32[$390 >> 2] | 0);
        break;
       }
       if (($416 & 15 | 0) != 4) break L220;
       $426 = _luaO_str2num((HEAP32[$390 >> 2] | 0) + 24 | 0, $v$i85) | 0;
       if (($426 | 0) != ((HEAP32[(HEAP32[$390 >> 2] | 0) + 12 >> 2] | 0) + 1 | 0)) break L220;
       if ((HEAP32[$9 >> 2] | 0) == 19) {
        $438 = +(HEAP32[$v$i85 >> 2] | 0);
        break;
       } else {
        $438 = +HEAPF32[$v$i85 >> 2];
        break;
       }
      } while (0);
      HEAPF32[$51 >> 2] = $439 * $438;
      HEAP32[$base$1 + ($50 << 3) + 4 >> 2] = 3;
      $base$0 = $base$1;
      continue L3;
     } while (0);
     _luaT_trybinTM($L, $387, $390, $51, 8);
     $base$0 = HEAP32[$32 >> 2] | 0;
     continue L3;
     break;
    }
   case 11:
    {
     $197 = $39 >>> 23;
     $199 = $39 >>> 14 & 511;
     $200 = _luaH_new($L) | 0;
     HEAP32[$51 >> 2] = $200;
     HEAP32[$base$1 + ($50 << 3) + 4 >> 2] = 69;
     if ($199 | $197) {
      $204 = _luaO_fb2int($197) | 0;
      _luaH_resize($L, $200, $204, _luaO_fb2int($199) | 0);
     }
     if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0) > 0) {
      HEAP32[$4 >> 2] = $base$1 + ($50 + 1 << 3);
      _luaC_step($L);
      HEAP32[$4 >> 2] = HEAP32[$36 >> 2];
     }
     $base$0 = HEAP32[$32 >> 2] | 0;
     continue L3;
     break;
    }
   case 21:
    {
     $570 = $39 >>> 23;
     if (!($570 & 256)) $584 = $base$1 + ($570 << 3) | 0; else $584 = $31 + (($570 & 255) << 3) | 0;
     $576 = $39 >>> 14;
     if (!($576 & 256)) $607 = $base$1 + (($576 & 511) << 3) | 0; else $607 = $31 + (($576 & 255) << 3) | 0;
     $585 = HEAP32[$584 + 4 >> 2] | 0;
     L251 : do if (($585 | 0) == 19) {
      $630 = HEAP32[$584 >> 2] | 0;
      label = 200;
     } else {
      $$02$i$i100 = $584;
      $596 = $585;
      while (1) {
       if (($596 | 0) == 3) break; else if (($596 | 0) == 19) {
        label = 196;
        break;
       }
       if (($596 & 15 | 0) != 4) break L251;
       $600 = _luaO_str2num((HEAP32[$$02$i$i100 >> 2] | 0) + 24 | 0, $v$i$i99) | 0;
       if (($600 | 0) != ((HEAP32[(HEAP32[$$02$i$i100 >> 2] | 0) + 12 >> 2] | 0) + 1 | 0)) break L251;
       $$02$i$i100 = $v$i$i99;
       $596 = HEAP32[$v$i$i99 + 4 >> 2] | 0;
      }
      if ((label | 0) == 196) {
       label = 0;
       $630 = HEAP32[$$02$i$i100 >> 2] | 0;
       label = 200;
       break;
      }
      $588 = +HEAPF32[$$02$i$i100 >> 2];
      $589 = +Math_floor(+$588);
      if (!($588 != $589)) if ($589 >= -2147483648.0 & $589 < 2147483648.0) {
       $630 = ~~$589;
       label = 200;
      }
     } while (0);
     L263 : do if ((label | 0) == 200) {
      label = 0;
      $608 = HEAP32[$607 + 4 >> 2] | 0;
      do if (($608 | 0) == 19) $631 = HEAP32[$607 >> 2] | 0; else {
       $$02$i$i105 = $607;
       $619 = $608;
       while (1) {
        if (($619 | 0) == 3) break; else if (($619 | 0) == 19) {
         label = 206;
         break;
        }
        if (($619 & 15 | 0) != 4) break L263;
        $623 = _luaO_str2num((HEAP32[$$02$i$i105 >> 2] | 0) + 24 | 0, $v$i$i104) | 0;
        if (($623 | 0) != ((HEAP32[(HEAP32[$$02$i$i105 >> 2] | 0) + 12 >> 2] | 0) + 1 | 0)) break L263;
        $$02$i$i105 = $v$i$i104;
        $619 = HEAP32[$v$i$i104 + 4 >> 2] | 0;
       }
       if ((label | 0) == 206) {
        label = 0;
        $631 = HEAP32[$$02$i$i105 >> 2] | 0;
        break;
       }
       $611 = +HEAPF32[$$02$i$i105 >> 2];
       $612 = +Math_floor(+$611);
       if ($611 != $612) break L263;
       if (!($612 >= -2147483648.0 & $612 < 2147483648.0)) break L263;
       $631 = ~~$612;
      } while (0);
      HEAP32[$51 >> 2] = $631 | $630;
      HEAP32[$base$1 + ($50 << 3) + 4 >> 2] = 19;
      $base$0 = $base$1;
      continue L3;
     } while (0);
     _luaT_trybinTM($L, $584, $607, $51, 14);
     $base$0 = HEAP32[$32 >> 2] | 0;
     continue L3;
     break;
    }
   case 22:
    {
     $634 = $39 >>> 23;
     if (!($634 & 256)) $648 = $base$1 + ($634 << 3) | 0; else $648 = $31 + (($634 & 255) << 3) | 0;
     $640 = $39 >>> 14;
     if (!($640 & 256)) $671 = $base$1 + (($640 & 511) << 3) | 0; else $671 = $31 + (($640 & 255) << 3) | 0;
     $649 = HEAP32[$648 + 4 >> 2] | 0;
     L288 : do if (($649 | 0) == 19) {
      $694 = HEAP32[$648 >> 2] | 0;
      label = 228;
     } else {
      $$02$i$i110 = $648;
      $660 = $649;
      while (1) {
       if (($660 | 0) == 3) break; else if (($660 | 0) == 19) {
        label = 224;
        break;
       }
       if (($660 & 15 | 0) != 4) break L288;
       $664 = _luaO_str2num((HEAP32[$$02$i$i110 >> 2] | 0) + 24 | 0, $v$i$i109) | 0;
       if (($664 | 0) != ((HEAP32[(HEAP32[$$02$i$i110 >> 2] | 0) + 12 >> 2] | 0) + 1 | 0)) break L288;
       $$02$i$i110 = $v$i$i109;
       $660 = HEAP32[$v$i$i109 + 4 >> 2] | 0;
      }
      if ((label | 0) == 224) {
       label = 0;
       $694 = HEAP32[$$02$i$i110 >> 2] | 0;
       label = 228;
       break;
      }
      $652 = +HEAPF32[$$02$i$i110 >> 2];
      $653 = +Math_floor(+$652);
      if (!($652 != $653)) if ($653 >= -2147483648.0 & $653 < 2147483648.0) {
       $694 = ~~$653;
       label = 228;
      }
     } while (0);
     L300 : do if ((label | 0) == 228) {
      label = 0;
      $672 = HEAP32[$671 + 4 >> 2] | 0;
      do if (($672 | 0) == 19) $695 = HEAP32[$671 >> 2] | 0; else {
       $$02$i$i115 = $671;
       $683 = $672;
       while (1) {
        if (($683 | 0) == 3) break; else if (($683 | 0) == 19) {
         label = 234;
         break;
        }
        if (($683 & 15 | 0) != 4) break L300;
        $687 = _luaO_str2num((HEAP32[$$02$i$i115 >> 2] | 0) + 24 | 0, $v$i$i114) | 0;
        if (($687 | 0) != ((HEAP32[(HEAP32[$$02$i$i115 >> 2] | 0) + 12 >> 2] | 0) + 1 | 0)) break L300;
        $$02$i$i115 = $v$i$i114;
        $683 = HEAP32[$v$i$i114 + 4 >> 2] | 0;
       }
       if ((label | 0) == 234) {
        label = 0;
        $695 = HEAP32[$$02$i$i115 >> 2] | 0;
        break;
       }
       $675 = +HEAPF32[$$02$i$i115 >> 2];
       $676 = +Math_floor(+$675);
       if ($675 != $676) break L300;
       if (!($676 >= -2147483648.0 & $676 < 2147483648.0)) break L300;
       $695 = ~~$676;
      } while (0);
      HEAP32[$51 >> 2] = $695 ^ $694;
      HEAP32[$base$1 + ($50 << 3) + 4 >> 2] = 19;
      $base$0 = $base$1;
      continue L3;
     } while (0);
     _luaT_trybinTM($L, $648, $671, $51, 15);
     $base$0 = HEAP32[$32 >> 2] | 0;
     continue L3;
     break;
    }
   case 23:
    {
     $698 = $39 >>> 23;
     if (!($698 & 256)) $712 = $base$1 + ($698 << 3) | 0; else $712 = $31 + (($698 & 255) << 3) | 0;
     $704 = $39 >>> 14;
     if (!($704 & 256)) $735 = $base$1 + (($704 & 511) << 3) | 0; else $735 = $31 + (($704 & 255) << 3) | 0;
     $713 = HEAP32[$712 + 4 >> 2] | 0;
     L325 : do if (($713 | 0) == 19) {
      $762 = HEAP32[$712 >> 2] | 0;
      label = 256;
     } else {
      $$02$i$i120 = $712;
      $724 = $713;
      while (1) {
       if (($724 | 0) == 3) break; else if (($724 | 0) == 19) {
        label = 252;
        break;
       }
       if (($724 & 15 | 0) != 4) break L325;
       $728 = _luaO_str2num((HEAP32[$$02$i$i120 >> 2] | 0) + 24 | 0, $v$i$i119) | 0;
       if (($728 | 0) != ((HEAP32[(HEAP32[$$02$i$i120 >> 2] | 0) + 12 >> 2] | 0) + 1 | 0)) break L325;
       $$02$i$i120 = $v$i$i119;
       $724 = HEAP32[$v$i$i119 + 4 >> 2] | 0;
      }
      if ((label | 0) == 252) {
       label = 0;
       $762 = HEAP32[$$02$i$i120 >> 2] | 0;
       label = 256;
       break;
      }
      $716 = +HEAPF32[$$02$i$i120 >> 2];
      $717 = +Math_floor(+$716);
      if (!($716 != $717)) if ($717 >= -2147483648.0 & $717 < 2147483648.0) {
       $762 = ~~$717;
       label = 256;
      }
     } while (0);
     L337 : do if ((label | 0) == 256) {
      label = 0;
      $736 = HEAP32[$735 + 4 >> 2] | 0;
      do if (($736 | 0) == 19) $757 = HEAP32[$735 >> 2] | 0; else {
       $$02$i$i125 = $735;
       $747 = $736;
       while (1) {
        if (($747 | 0) == 3) break; else if (($747 | 0) == 19) {
         label = 262;
         break;
        }
        if (($747 & 15 | 0) != 4) break L337;
        $751 = _luaO_str2num((HEAP32[$$02$i$i125 >> 2] | 0) + 24 | 0, $v$i$i124) | 0;
        if (($751 | 0) != ((HEAP32[(HEAP32[$$02$i$i125 >> 2] | 0) + 12 >> 2] | 0) + 1 | 0)) break L337;
        $$02$i$i125 = $v$i$i124;
        $747 = HEAP32[$v$i$i124 + 4 >> 2] | 0;
       }
       if ((label | 0) == 262) {
        label = 0;
        $757 = HEAP32[$$02$i$i125 >> 2] | 0;
        break;
       }
       $739 = +HEAPF32[$$02$i$i125 >> 2];
       $740 = +Math_floor(+$739);
       if ($739 != $740) break L337;
       if (!($740 >= -2147483648.0 & $740 < 2147483648.0)) break L337;
       $757 = ~~$740;
      } while (0);
      if (($757 | 0) < 0) if (($757 | 0) < -31) $765 = 0; else $765 = $762 >>> (0 - $757 | 0); else $765 = ($757 | 0) > 31 ? 0 : $762 << $757;
      HEAP32[$51 >> 2] = $765;
      HEAP32[$base$1 + ($50 << 3) + 4 >> 2] = 19;
      $base$0 = $base$1;
      continue L3;
     } while (0);
     _luaT_trybinTM($L, $712, $735, $51, 16);
     $base$0 = HEAP32[$32 >> 2] | 0;
     continue L3;
     break;
    }
   case 24:
    {
     $768 = $39 >>> 23;
     if (!($768 & 256)) $782 = $base$1 + ($768 << 3) | 0; else $782 = $31 + (($768 & 255) << 3) | 0;
     $774 = $39 >>> 14;
     if (!($774 & 256)) $805 = $base$1 + (($774 & 511) << 3) | 0; else $805 = $31 + (($774 & 255) << 3) | 0;
     $783 = HEAP32[$782 + 4 >> 2] | 0;
     L367 : do if (($783 | 0) == 19) {
      $832 = HEAP32[$782 >> 2] | 0;
      label = 288;
     } else {
      $$02$i$i131 = $782;
      $794 = $783;
      while (1) {
       if (($794 | 0) == 3) break; else if (($794 | 0) == 19) {
        label = 284;
        break;
       }
       if (($794 & 15 | 0) != 4) break L367;
       $798 = _luaO_str2num((HEAP32[$$02$i$i131 >> 2] | 0) + 24 | 0, $v$i$i130) | 0;
       if (($798 | 0) != ((HEAP32[(HEAP32[$$02$i$i131 >> 2] | 0) + 12 >> 2] | 0) + 1 | 0)) break L367;
       $$02$i$i131 = $v$i$i130;
       $794 = HEAP32[$v$i$i130 + 4 >> 2] | 0;
      }
      if ((label | 0) == 284) {
       label = 0;
       $832 = HEAP32[$$02$i$i131 >> 2] | 0;
       label = 288;
       break;
      }
      $786 = +HEAPF32[$$02$i$i131 >> 2];
      $787 = +Math_floor(+$786);
      if (!($786 != $787)) if ($787 >= -2147483648.0 & $787 < 2147483648.0) {
       $832 = ~~$787;
       label = 288;
      }
     } while (0);
     L379 : do if ((label | 0) == 288) {
      label = 0;
      $806 = HEAP32[$805 + 4 >> 2] | 0;
      do if (($806 | 0) == 19) $828 = HEAP32[$805 >> 2] | 0; else {
       $$02$i$i136 = $805;
       $817 = $806;
       while (1) {
        if (($817 | 0) == 3) break; else if (($817 | 0) == 19) {
         label = 294;
         break;
        }
        if (($817 & 15 | 0) != 4) break L379;
        $821 = _luaO_str2num((HEAP32[$$02$i$i136 >> 2] | 0) + 24 | 0, $v$i$i135) | 0;
        if (($821 | 0) != ((HEAP32[(HEAP32[$$02$i$i136 >> 2] | 0) + 12 >> 2] | 0) + 1 | 0)) break L379;
        $$02$i$i136 = $v$i$i135;
        $817 = HEAP32[$v$i$i135 + 4 >> 2] | 0;
       }
       if ((label | 0) == 294) {
        label = 0;
        $828 = HEAP32[$$02$i$i136 >> 2] | 0;
        break;
       }
       $809 = +HEAPF32[$$02$i$i136 >> 2];
       $810 = +Math_floor(+$809);
       if ($809 != $810) break L379;
       if (!($810 >= -2147483648.0 & $810 < 2147483648.0)) break L379;
       $828 = ~~$810;
      } while (0);
      $827 = 0 - $828 | 0;
      if (($828 | 0) > 0) $835 = ($827 | 0) < -31 ? 0 : $832 >>> $828; else $835 = ($827 | 0) > 31 ? 0 : $832 << $827;
      HEAP32[$51 >> 2] = $835;
      HEAP32[$base$1 + ($50 << 3) + 4 >> 2] = 19;
      $base$0 = $base$1;
      continue L3;
     } while (0);
     _luaT_trybinTM($L, $782, $805, $51, 17);
     $base$0 = HEAP32[$32 >> 2] | 0;
     continue L3;
     break;
    }
   case 16:
    {
     $838 = $39 >>> 23;
     if (!($838 & 256)) $852 = $base$1 + ($838 << 3) | 0; else $852 = $31 + (($838 & 255) << 3) | 0;
     $844 = $39 >>> 14;
     if (!($844 & 256)) $855 = $base$1 + (($844 & 511) << 3) | 0; else $855 = $31 + (($844 & 255) << 3) | 0;
     $853 = HEAP32[$852 + 4 >> 2] | 0;
     do if (($853 | 0) == 19) {
      if ((HEAP32[$855 + 4 >> 2] | 0) != 19) {
       $909 = +(HEAP32[$852 >> 2] | 0);
       label = 323;
       break;
      }
      $858 = HEAP32[$852 >> 2] | 0;
      $859 = HEAP32[$855 >> 2] | 0;
      if (($859 + 1 | 0) >>> 0 < 2) if (!$859) {
       label = 313;
       break L1;
      } else $$0$i143 = 0; else {
       $863 = ($858 | 0) % ($859 | 0) | 0;
       $$0$i143 = (($863 | 0) != 0 & ($859 ^ $858 | 0) < 0 ? $859 : 0) + $863 | 0;
      }
      HEAP32[$51 >> 2] = $$0$i143;
      HEAP32[$base$1 + ($50 << 3) + 4 >> 2] = 19;
      $base$0 = $base$1;
      continue L3;
     } else if (($853 | 0) == 3) {
      $909 = +HEAPF32[$852 >> 2];
      label = 323;
     } else if (($853 & 15 | 0) == 4) {
      $876 = _luaO_str2num((HEAP32[$852 >> 2] | 0) + 24 | 0, $v$i144) | 0;
      if (($876 | 0) == ((HEAP32[(HEAP32[$852 >> 2] | 0) + 12 >> 2] | 0) + 1 | 0)) if ((HEAP32[$14 >> 2] | 0) == 19) {
       $909 = +(HEAP32[$v$i144 >> 2] | 0);
       label = 323;
       break;
      } else {
       $909 = +HEAPF32[$v$i144 >> 2];
       label = 323;
       break;
      }
     } while (0);
     L424 : do if ((label | 0) == 323) {
      label = 0;
      $888 = HEAP32[$855 + 4 >> 2] | 0;
      do if (($888 | 0) == 3) $910 = +HEAPF32[$855 >> 2]; else {
       if (($888 | 0) == 19) {
        $910 = +(HEAP32[$855 >> 2] | 0);
        break;
       }
       if (($888 & 15 | 0) != 4) break L424;
       $898 = _luaO_str2num((HEAP32[$855 >> 2] | 0) + 24 | 0, $v$i147) | 0;
       if (($898 | 0) != ((HEAP32[(HEAP32[$855 >> 2] | 0) + 12 >> 2] | 0) + 1 | 0)) break L424;
       if ((HEAP32[$13 >> 2] | 0) == 19) {
        $910 = +(HEAP32[$v$i147 >> 2] | 0);
        break;
       } else {
        $910 = +HEAPF32[$v$i147 >> 2];
        break;
       }
      } while (0);
      $911 = +_fmodf($909, $910);
      if ($910 * $911 < 0.0) $m$0 = $910 + $911; else $m$0 = $911;
      HEAPF32[$51 >> 2] = $m$0;
      HEAP32[$base$1 + ($50 << 3) + 4 >> 2] = 3;
      $base$0 = $base$1;
      continue L3;
     } while (0);
     _luaT_trybinTM($L, $852, $855, $51, 9);
     $base$0 = HEAP32[$32 >> 2] | 0;
     continue L3;
     break;
    }
   case 19:
    {
     $917 = $39 >>> 23;
     if (!($917 & 256)) $931 = $base$1 + ($917 << 3) | 0; else $931 = $31 + (($917 & 255) << 3) | 0;
     $923 = $39 >>> 14;
     if (!($923 & 256)) $934 = $base$1 + (($923 & 511) << 3) | 0; else $934 = $31 + (($923 & 255) << 3) | 0;
     $932 = HEAP32[$931 + 4 >> 2] | 0;
     do if (($932 | 0) == 3) {
      $992 = +HEAPF32[$931 >> 2];
      label = 358;
     } else if (($932 | 0) == 19) {
      if ((HEAP32[$934 + 4 >> 2] | 0) != 19) {
       $992 = +(HEAP32[$931 >> 2] | 0);
       label = 358;
       break;
      }
      $937 = HEAP32[$931 >> 2] | 0;
      $938 = HEAP32[$934 >> 2] | 0;
      if (($938 + 1 | 0) >>> 0 < 2) {
       if (!$938) {
        label = 346;
        break L1;
       }
       $948 = 0 - $937 | 0;
      } else {
       $943 = ($937 | 0) / ($938 | 0) | 0;
       if (($938 ^ $937 | 0) < 0) $948 = (((($937 | 0) % ($938 | 0) | 0 | 0) != 0) << 31 >> 31) + $943 | 0; else $948 = $943;
      }
      HEAP32[$51 >> 2] = $948;
      HEAP32[$base$1 + ($50 << 3) + 4 >> 2] = 19;
      $base$0 = $base$1;
      continue L3;
     } else if (($932 & 15 | 0) == 4) {
      $957 = _luaO_str2num((HEAP32[$931 >> 2] | 0) + 24 | 0, $v$i152) | 0;
      if (($957 | 0) == ((HEAP32[(HEAP32[$931 >> 2] | 0) + 12 >> 2] | 0) + 1 | 0)) if ((HEAP32[$16 >> 2] | 0) == 19) {
       $992 = +(HEAP32[$v$i152 >> 2] | 0);
       label = 358;
       break;
      } else {
       $992 = +HEAPF32[$v$i152 >> 2];
       label = 358;
       break;
      }
     } while (0);
     L469 : do if ((label | 0) == 358) {
      label = 0;
      $969 = HEAP32[$934 + 4 >> 2] | 0;
      do if (($969 | 0) == 3) $991 = +HEAPF32[$934 >> 2]; else {
       if (($969 | 0) == 19) {
        $991 = +(HEAP32[$934 >> 2] | 0);
        break;
       }
       if (($969 & 15 | 0) != 4) break L469;
       $979 = _luaO_str2num((HEAP32[$934 >> 2] | 0) + 24 | 0, $v$i155) | 0;
       if (($979 | 0) != ((HEAP32[(HEAP32[$934 >> 2] | 0) + 12 >> 2] | 0) + 1 | 0)) break L469;
       if ((HEAP32[$15 >> 2] | 0) == 19) {
        $991 = +(HEAP32[$v$i155 >> 2] | 0);
        break;
       } else {
        $991 = +HEAPF32[$v$i155 >> 2];
        break;
       }
      } while (0);
      HEAPF32[$51 >> 2] = +Math_floor(+($992 / $991));
      HEAP32[$base$1 + ($50 << 3) + 4 >> 2] = 3;
      $base$0 = $base$1;
      continue L3;
     } while (0);
     _luaT_trybinTM($L, $931, $934, $51, 12);
     $base$0 = HEAP32[$32 >> 2] | 0;
     continue L3;
     break;
    }
   case 17:
    {
     $996 = $39 >>> 23;
     if (!($996 & 256)) $1010 = $base$1 + ($996 << 3) | 0; else $1010 = $31 + (($996 & 255) << 3) | 0;
     $1002 = $39 >>> 14;
     if (!($1002 & 256)) $1033 = $base$1 + (($1002 & 511) << 3) | 0; else $1033 = $31 + (($1002 & 255) << 3) | 0;
     $1011 = HEAP32[$1010 + 4 >> 2] | 0;
     do if (($1011 | 0) == 3) {
      $1055 = +HEAPF32[$1010 >> 2];
      label = 384;
     } else {
      if (($1011 | 0) == 19) {
       $1055 = +(HEAP32[$1010 >> 2] | 0);
       label = 384;
       break;
      }
      if (($1011 & 15 | 0) == 4) {
       $1021 = _luaO_str2num((HEAP32[$1010 >> 2] | 0) + 24 | 0, $v$i158) | 0;
       if (($1021 | 0) == ((HEAP32[(HEAP32[$1010 >> 2] | 0) + 12 >> 2] | 0) + 1 | 0)) if ((HEAP32[$18 >> 2] | 0) == 19) {
        $1055 = +(HEAP32[$v$i158 >> 2] | 0);
        label = 384;
        break;
       } else {
        $1055 = +HEAPF32[$v$i158 >> 2];
        label = 384;
        break;
       }
      }
     } while (0);
     L504 : do if ((label | 0) == 384) {
      label = 0;
      $1034 = HEAP32[$1033 + 4 >> 2] | 0;
      do if (($1034 | 0) == 3) $1056 = +HEAPF32[$1033 >> 2]; else {
       if (($1034 | 0) == 19) {
        $1056 = +(HEAP32[$1033 >> 2] | 0);
        break;
       }
       if (($1034 & 15 | 0) != 4) break L504;
       $1044 = _luaO_str2num((HEAP32[$1033 >> 2] | 0) + 24 | 0, $v$i161) | 0;
       if (($1044 | 0) != ((HEAP32[(HEAP32[$1033 >> 2] | 0) + 12 >> 2] | 0) + 1 | 0)) break L504;
       if ((HEAP32[$17 >> 2] | 0) == 19) {
        $1056 = +(HEAP32[$v$i161 >> 2] | 0);
        break;
       } else {
        $1056 = +HEAPF32[$v$i161 >> 2];
        break;
       }
      } while (0);
      HEAPF32[$51 >> 2] = +Math_pow(+$1055, +$1056);
      HEAP32[$base$1 + ($50 << 3) + 4 >> 2] = 3;
      $base$0 = $base$1;
      continue L3;
     } while (0);
     _luaT_trybinTM($L, $1010, $1033, $51, 10);
     $base$0 = HEAP32[$32 >> 2] | 0;
     continue L3;
     break;
    }
   case 25:
    {
     $1060 = $39 >>> 23;
     $1061 = $base$1 + ($1060 << 3) | 0;
     $1063 = HEAP32[$base$1 + ($1060 << 3) + 4 >> 2] | 0;
     do if (($1063 | 0) == 19) {
      HEAP32[$51 >> 2] = 0 - (HEAP32[$1061 >> 2] | 0);
      HEAP32[$base$1 + ($50 << 3) + 4 >> 2] = 19;
      $base$0 = $base$1;
      continue L3;
     } else if (($1063 | 0) == 3) $1084 = +HEAPF32[$1061 >> 2]; else {
      if (($1063 & 15 | 0) == 4) {
       $1072 = _luaO_str2num((HEAP32[$1061 >> 2] | 0) + 24 | 0, $v$i164) | 0;
       if (($1072 | 0) == ((HEAP32[(HEAP32[$1061 >> 2] | 0) + 12 >> 2] | 0) + 1 | 0)) if ((HEAP32[$19 >> 2] | 0) == 19) {
        $1084 = +(HEAP32[$v$i164 >> 2] | 0);
        break;
       } else {
        $1084 = +HEAPF32[$v$i164 >> 2];
        break;
       }
      }
      _luaT_trybinTM($L, $1061, $1061, $51, 18);
      $base$0 = HEAP32[$32 >> 2] | 0;
      continue L3;
     } while (0);
     HEAPF32[$51 >> 2] = -$1084;
     HEAP32[$base$1 + ($50 << 3) + 4 >> 2] = 3;
     $base$0 = $base$1;
     continue L3;
     break;
    }
   case 26:
    {
     $1087 = $39 >>> 23;
     $1088 = $base$1 + ($1087 << 3) | 0;
     do if ((HEAP32[$base$1 + ($1087 << 3) + 4 >> 2] | 0) == 19) $1113 = HEAP32[$1088 >> 2] | 0; else {
      $$02$i$i168 = $1088;
      while (1) {
       $1094 = HEAP32[$$02$i$i168 + 4 >> 2] | 0;
       if (($1094 | 0) == 3) {
        label = 408;
        break;
       } else if (($1094 | 0) == 19) {
        label = 411;
        break;
       }
       if (($1094 & 15 | 0) != 4) break;
       $1106 = _luaO_str2num((HEAP32[$$02$i$i168 >> 2] | 0) + 24 | 0, $v$i$i167) | 0;
       if (($1106 | 0) == ((HEAP32[(HEAP32[$$02$i$i168 >> 2] | 0) + 12 >> 2] | 0) + 1 | 0)) $$02$i$i168 = $v$i$i167; else break;
      }
      if ((label | 0) == 411) {
       label = 0;
       $1113 = HEAP32[$$02$i$i168 >> 2] | 0;
       break;
      }
      if ((label | 0) == 408) {
       label = 0;
       $1095 = +HEAPF32[$$02$i$i168 >> 2];
       $1096 = +Math_floor(+$1095);
       if (!($1095 != $1096)) if ($1096 >= -2147483648.0 & $1096 < 2147483648.0) {
        $1113 = ~~$1096;
        break;
       }
      }
      _luaT_trybinTM($L, $1088, $1088, $51, 19);
      $base$0 = HEAP32[$32 >> 2] | 0;
      continue L3;
     } while (0);
     HEAP32[$51 >> 2] = ~$1113;
     HEAP32[$base$1 + ($50 << 3) + 4 >> 2] = 19;
     $base$0 = $base$1;
     continue L3;
     break;
    }
   case 27:
    {
     $1116 = $39 >>> 23;
     $1118 = HEAP32[$base$1 + ($1116 << 3) + 4 >> 2] | 0;
     if (!$1118) $1125 = 1; else if (($1118 | 0) == 1) $1125 = (HEAP32[$base$1 + ($1116 << 3) >> 2] | 0) == 0; else $1125 = 0;
     HEAP32[$51 >> 2] = $1125 & 1;
     HEAP32[$base$1 + ($50 << 3) + 4 >> 2] = 1;
     $base$0 = $base$1;
     continue L3;
     break;
    }
   case 28:
    {
     _luaV_objlen($L, $51, $base$1 + ($39 >>> 23 << 3) | 0);
     $base$0 = HEAP32[$32 >> 2] | 0;
     continue L3;
     break;
    }
   case 30:
    {
     if ($50) _luaF_close($L, (HEAP32[$32 >> 2] | 0) + ($50 + -1 << 3) | 0);
     HEAP32[$34 >> 2] = (HEAP32[$34 >> 2] | 0) + (($39 >>> 14) + -131071 << 2);
     $base$0 = $base$1;
     continue L3;
     break;
    }
   case 31:
    {
     $1166 = $39 >>> 23;
     if (!($1166 & 256)) $1179 = $base$1 + ($1166 << 3) | 0; else $1179 = $31 + (($1166 & 255) << 3) | 0;
     $1172 = $39 >>> 14;
     if (!($1172 & 256)) $1180 = $base$1 + (($1172 & 511) << 3) | 0; else $1180 = $31 + (($1172 & 255) << 3) | 0;
     $1182 = (_luaV_equalobj($L, $1179, $1180) | 0) == ($50 | 0);
     $1183 = HEAP32[$34 >> 2] | 0;
     if ($1182) {
      $1185 = HEAP32[$1183 >> 2] | 0;
      $1187 = $1185 >>> 6 & 255;
      if (!$1187) $1194 = $1183; else {
       _luaF_close($L, (HEAP32[$32 >> 2] | 0) + ($1187 + -1 << 3) | 0);
       $1194 = HEAP32[$34 >> 2] | 0;
      }
      $storemerge50$in = $1194 + (($1185 >>> 14) + -131070 << 2) | 0;
     } else $storemerge50$in = $1183 + 4 | 0;
     HEAP32[$34 >> 2] = $storemerge50$in;
     $base$0 = HEAP32[$32 >> 2] | 0;
     continue L3;
     break;
    }
   case 29:
    {
     $1130 = $39 >>> 23;
     $1132 = $39 >>> 14 & 511;
     HEAP32[$4 >> 2] = $base$1 + ($1132 + 1 << 3);
     _luaV_concat($L, 1 - $1130 + $1132 | 0);
     $1136 = HEAP32[$32 >> 2] | 0;
     $1138 = $1136 + ($1130 << 3) | 0;
     $1139 = $1138;
     $1144 = HEAP32[$1139 + 4 >> 2] | 0;
     $1145 = $1136 + ($50 << 3) | 0;
     HEAP32[$1145 >> 2] = HEAP32[$1139 >> 2];
     HEAP32[$1145 + 4 >> 2] = $1144;
     if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0) > 0) {
      if ($50 >>> 0 < $1130 >>> 0) $1155 = $1138; else $1155 = $1136 + ($50 + 1 << 3) | 0;
      HEAP32[$4 >> 2] = $1155;
      _luaC_step($L);
      HEAP32[$4 >> 2] = HEAP32[$36 >> 2];
     }
     $1157 = HEAP32[$32 >> 2] | 0;
     HEAP32[$4 >> 2] = HEAP32[$36 >> 2];
     $base$0 = $1157;
     continue L3;
     break;
    }
   case 32:
    {
     $1196 = $39 >>> 23;
     if (!($1196 & 256)) $1209 = $base$1 + ($1196 << 3) | 0; else $1209 = $31 + (($1196 & 255) << 3) | 0;
     $1202 = $39 >>> 14;
     if (!($1202 & 256)) $1210 = $base$1 + (($1202 & 511) << 3) | 0; else $1210 = $31 + (($1202 & 255) << 3) | 0;
     $1212 = (_luaV_lessthan($L, $1209, $1210) | 0) == ($50 | 0);
     $1213 = HEAP32[$34 >> 2] | 0;
     if ($1212) {
      $1215 = HEAP32[$1213 >> 2] | 0;
      $1217 = $1215 >>> 6 & 255;
      if (!$1217) $1224 = $1213; else {
       _luaF_close($L, (HEAP32[$32 >> 2] | 0) + ($1217 + -1 << 3) | 0);
       $1224 = HEAP32[$34 >> 2] | 0;
      }
      $storemerge46$in = $1224 + (($1215 >>> 14) + -131070 << 2) | 0;
     } else $storemerge46$in = $1213 + 4 | 0;
     HEAP32[$34 >> 2] = $storemerge46$in;
     $base$0 = HEAP32[$32 >> 2] | 0;
     continue L3;
     break;
    }
   case 33:
    {
     $1226 = $39 >>> 23;
     if (!($1226 & 256)) $1239 = $base$1 + ($1226 << 3) | 0; else $1239 = $31 + (($1226 & 255) << 3) | 0;
     $1232 = $39 >>> 14;
     if (!($1232 & 256)) $1240 = $base$1 + (($1232 & 511) << 3) | 0; else $1240 = $31 + (($1232 & 255) << 3) | 0;
     $1242 = (_luaV_lessequal($L, $1239, $1240) | 0) == ($50 | 0);
     $1243 = HEAP32[$34 >> 2] | 0;
     if ($1242) {
      $1245 = HEAP32[$1243 >> 2] | 0;
      $1247 = $1245 >>> 6 & 255;
      if (!$1247) $1254 = $1243; else {
       _luaF_close($L, (HEAP32[$32 >> 2] | 0) + ($1247 + -1 << 3) | 0);
       $1254 = HEAP32[$34 >> 2] | 0;
      }
      $storemerge42$in = $1254 + (($1245 >>> 14) + -131070 << 2) | 0;
     } else $storemerge42$in = $1243 + 4 | 0;
     HEAP32[$34 >> 2] = $storemerge42$in;
     $base$0 = HEAP32[$32 >> 2] | 0;
     continue L3;
     break;
    }
   case 34:
    {
     $1259 = HEAP32[$base$1 + ($50 << 3) + 4 >> 2] | 0;
     $1260 = ($1259 | 0) == 0;
     if (!($39 & 8372224)) {
      if (!$1260) if (($1259 | 0) == 1) {
       if (HEAP32[$51 >> 2] | 0) label = 472;
      } else label = 472;
     } else if ($1260) label = 472; else if (($1259 | 0) == 1) if (!(HEAP32[$51 >> 2] | 0)) label = 472;
     if ((label | 0) == 472) {
      label = 0;
      HEAP32[$34 >> 2] = (HEAP32[$34 >> 2] | 0) + 4;
      $base$0 = $base$1;
      continue L3;
     }
     $1269 = HEAP32[$34 >> 2] | 0;
     $1270 = HEAP32[$1269 >> 2] | 0;
     $1272 = $1270 >>> 6 & 255;
     if (!$1272) $1279 = $1269; else {
      _luaF_close($L, (HEAP32[$32 >> 2] | 0) + ($1272 + -1 << 3) | 0);
      $1279 = HEAP32[$34 >> 2] | 0;
     }
     HEAP32[$34 >> 2] = $1279 + (($1270 >>> 14) + -131070 << 2);
     $base$0 = $base$1;
     continue L3;
     break;
    }
   case 35:
    {
     $1280 = $39 >>> 23;
     $1281 = $base$1 + ($1280 << 3) | 0;
     $1285 = HEAP32[$base$1 + ($1280 << 3) + 4 >> 2] | 0;
     $1286 = ($1285 | 0) == 0;
     if (!($39 & 8372224)) {
      if (!$1286) if (($1285 | 0) == 1) {
       if (HEAP32[$1281 >> 2] | 0) label = 483;
      } else label = 483;
     } else if ($1286) label = 483; else if (($1285 | 0) == 1) if (!(HEAP32[$1281 >> 2] | 0)) label = 483;
     if ((label | 0) == 483) {
      label = 0;
      HEAP32[$34 >> 2] = (HEAP32[$34 >> 2] | 0) + 4;
      $base$0 = $base$1;
      continue L3;
     }
     $1295 = $1281;
     $1300 = HEAP32[$1295 + 4 >> 2] | 0;
     $1301 = $51;
     HEAP32[$1301 >> 2] = HEAP32[$1295 >> 2];
     HEAP32[$1301 + 4 >> 2] = $1300;
     $1305 = HEAP32[$34 >> 2] | 0;
     $1306 = HEAP32[$1305 >> 2] | 0;
     $1308 = $1306 >>> 6 & 255;
     if (!$1308) $1315 = $1305; else {
      _luaF_close($L, (HEAP32[$32 >> 2] | 0) + ($1308 + -1 << 3) | 0);
      $1315 = HEAP32[$34 >> 2] | 0;
     }
     HEAP32[$34 >> 2] = $1315 + (($1306 >>> 14) + -131070 << 2);
     $base$0 = $base$1;
     continue L3;
     break;
    }
   case 36:
    {
     $1316 = $39 >>> 23;
     $1318 = $39 >>> 14 & 511;
     if ($1316) HEAP32[$4 >> 2] = $base$1 + ($50 + $1316 << 3);
     if (!(_luaD_precall($L, $51, $1318 + -1 | 0) | 0)) {
      label = 493;
      break L3;
     }
     if ($1318) HEAP32[$4 >> 2] = HEAP32[$36 >> 2];
     $base$0 = HEAP32[$32 >> 2] | 0;
     continue L3;
     break;
    }
   case 37:
    {
     $1333 = $39 >>> 23;
     if ($1333) HEAP32[$4 >> 2] = $base$1 + ($50 + $1333 << 3);
     if (!(_luaD_precall($L, $51, -1) | 0)) {
      label = 498;
      break L3;
     }
     $base$0 = HEAP32[$32 >> 2] | 0;
     continue L3;
     break;
    }
   case 38:
    {
     label = 503;
     break L3;
     break;
    }
   case 39:
    {
     $1412 = $base$1 + ($50 << 3) + 4 | 0;
     $1415 = $base$1 + ($50 + 2 << 3) | 0;
     if ((HEAP32[$1412 >> 2] | 0) == 19) {
      $1416 = HEAP32[$1415 >> 2] | 0;
      $1418 = (HEAP32[$51 >> 2] | 0) + $1416 | 0;
      $1420 = HEAP32[$base$1 + ($50 + 1 << 3) >> 2] | 0;
      if (($1416 | 0) > 0) {
       if (($1418 | 0) > ($1420 | 0)) {
        $base$0 = $base$1;
        continue L3;
       }
      } else if (($1420 | 0) > ($1418 | 0)) {
       $base$0 = $base$1;
       continue L3;
      }
      HEAP32[$34 >> 2] = (HEAP32[$34 >> 2] | 0) + (($39 >>> 14) + -131071 << 2);
      $$c24 = $1418;
      HEAP32[$51 >> 2] = $$c24;
      HEAP32[$1412 >> 2] = 19;
      $$sum25 = $50 + 3 | 0;
      HEAP32[$base$1 + ($$sum25 << 3) >> 2] = $$c24;
      HEAP32[$base$1 + ($$sum25 << 3) + 4 >> 2] = 19;
      $base$0 = $base$1;
      continue L3;
     } else {
      $1430 = +HEAPF32[$1415 >> 2];
      $1432 = $1430 + +HEAPF32[$51 >> 2];
      $1434 = +HEAPF32[$base$1 + ($50 + 1 << 3) >> 2];
      if ($1430 > 0.0) {
       if (!($1432 <= $1434)) {
        $base$0 = $base$1;
        continue L3;
       }
      } else if (!($1434 <= $1432)) {
       $base$0 = $base$1;
       continue L3;
      }
      HEAP32[$34 >> 2] = (HEAP32[$34 >> 2] | 0) + (($39 >>> 14) + -131071 << 2);
      HEAPF32[$51 >> 2] = $1432;
      HEAP32[$1412 >> 2] = 3;
      $$sum21 = $50 + 3 | 0;
      HEAPF32[$base$1 + ($$sum21 << 3) >> 2] = $1432;
      HEAP32[$base$1 + ($$sum21 << 3) + 4 >> 2] = 3;
      $base$0 = $base$1;
      continue L3;
     }
     break;
    }
   case 40:
    {
     $$sum13 = $50 + 1 | 0;
     $1444 = $base$1 + ($$sum13 << 3) | 0;
     $$sum14 = $50 + 2 | 0;
     $1445 = $base$1 + ($$sum14 << 3) | 0;
     $1446 = $base$1 + ($50 << 3) + 4 | 0;
     L666 : do if ((HEAP32[$1446 >> 2] | 0) == 19) if ((HEAP32[$base$1 + ($$sum14 << 3) + 4 >> 2] | 0) == 19) {
      $1452 = HEAP32[$1445 >> 2] | 0;
      $1453 = ($1452 | 0) < 0;
      $1455 = ($1452 >>> 31) + 1 | 0;
      $$02$i$i173 = $1444;
      while (1) {
       $1457 = HEAP32[$$02$i$i173 + 4 >> 2] | 0;
       if (($1457 | 0) == 3) {
        label = 524;
        break;
       } else if (($1457 | 0) == 19) {
        label = 528;
        break;
       }
       if (($1457 & 15 | 0) != 4) {
        label = 531;
        break;
       }
       $1471 = _luaO_str2num((HEAP32[$$02$i$i173 >> 2] | 0) + 24 | 0, $v$i$i172) | 0;
       if (($1471 | 0) == ((HEAP32[(HEAP32[$$02$i$i173 >> 2] | 0) + 12 >> 2] | 0) + 1 | 0)) $$02$i$i173 = $v$i$i172; else {
        label = 531;
        break;
       }
      }
      if ((label | 0) == 524) {
       label = 0;
       $1458 = +HEAPF32[$$02$i$i173 >> 2];
       $1459 = +Math_floor(+$1458);
       if ($1458 != $1459 & $1455 >>> 0 > 1) $f$0$i$i = $1459 + 1.0; else $f$0$i$i = $1459;
       if ($f$0$i$i >= -2147483648.0 & $f$0$i$i < 2147483648.0) {
        $$ph275$ph = ~~$f$0$i$i;
        label = 543;
       } else label = 531;
      } else if ((label | 0) == 528) {
       label = 0;
       $$ph275$ph = HEAP32[$$02$i$i173 >> 2] | 0;
       label = 543;
      }
      do if ((label | 0) == 531) {
       label = 0;
       $1477 = $base$1 + ($$sum13 << 3) + 4 | 0;
       $1478 = HEAP32[$1477 >> 2] | 0;
       do if (($1478 | 0) == 3) $1500 = +HEAPF32[$1444 >> 2]; else {
        if (($1478 | 0) == 19) {
         $1500 = +(HEAP32[$1444 >> 2] | 0);
         break;
        }
        if (($1478 & 15 | 0) != 4) {
         label = 545;
         break L666;
        }
        $1488 = _luaO_str2num((HEAP32[$1444 >> 2] | 0) + 24 | 0, $v$i1$i) | 0;
        if (($1488 | 0) != ((HEAP32[(HEAP32[$1444 >> 2] | 0) + 12 >> 2] | 0) + 1 | 0)) {
         label = 545;
         break L666;
        }
        if ((HEAP32[$20 >> 2] | 0) == 19) {
         $1500 = +(HEAP32[$v$i1$i >> 2] | 0);
         break;
        } else {
         $1500 = +HEAPF32[$v$i1$i >> 2];
         break;
        }
       } while (0);
       if ($1500 > 0.0) if ($1453) {
        $$ph275279 = 2147483647;
        $$pre$phiZ2D = $1477;
        $1505 = 0;
        break;
       } else {
        $$ph275$ph = 2147483647;
        label = 543;
        break;
       } else if (($1452 | 0) > -1) {
        $$ph275279 = -2147483648;
        $$pre$phiZ2D = $1477;
        $1505 = 0;
        break;
       } else {
        $$ph275$ph = -2147483648;
        label = 543;
        break;
       }
      } while (0);
      if ((label | 0) == 543) {
       label = 0;
       $$ph275279 = $$ph275$ph;
       $$pre$phiZ2D = $base$1 + ($$sum13 << 3) + 4 | 0;
       $1505 = HEAP32[$51 >> 2] | 0;
      }
      HEAP32[$1444 >> 2] = $$ph275279;
      HEAP32[$$pre$phiZ2D >> 2] = 19;
      HEAP32[$51 >> 2] = $1505 - (HEAP32[$1445 >> 2] | 0);
      $storemerge = 19;
     } else label = 545; else label = 545; while (0);
     if ((label | 0) == 545) {
      label = 0;
      $1506 = $base$1 + ($$sum13 << 3) + 4 | 0;
      $1507 = HEAP32[$1506 >> 2] | 0;
      do if (($1507 | 0) == 3) $1528 = +HEAPF32[$1444 >> 2]; else {
       if (($1507 | 0) == 19) {
        $1528 = +(HEAP32[$1444 >> 2] | 0);
        break;
       }
       if (($1507 & 15 | 0) != 4) {
        label = 554;
        break L1;
       }
       $1517 = _luaO_str2num((HEAP32[$1444 >> 2] | 0) + 24 | 0, $v$i177) | 0;
       if (($1517 | 0) != ((HEAP32[(HEAP32[$1444 >> 2] | 0) + 12 >> 2] | 0) + 1 | 0)) {
        label = 554;
        break L1;
       }
       if ((HEAP32[$23 >> 2] | 0) == 19) {
        $1528 = +(HEAP32[$v$i177 >> 2] | 0);
        break;
       } else {
        $1528 = +HEAPF32[$v$i177 >> 2];
        break;
       }
      } while (0);
      HEAPF32[$1444 >> 2] = $1528;
      HEAP32[$1506 >> 2] = 3;
      $1529 = $base$1 + ($$sum14 << 3) + 4 | 0;
      $1530 = HEAP32[$1529 >> 2] | 0;
      do if (($1530 | 0) == 3) $1551 = +HEAPF32[$1445 >> 2]; else {
       if (($1530 | 0) == 19) {
        $1551 = +(HEAP32[$1445 >> 2] | 0);
        break;
       }
       if (($1530 & 15 | 0) != 4) {
        label = 564;
        break L1;
       }
       $1540 = _luaO_str2num((HEAP32[$1445 >> 2] | 0) + 24 | 0, $v$i180) | 0;
       if (($1540 | 0) != ((HEAP32[(HEAP32[$1445 >> 2] | 0) + 12 >> 2] | 0) + 1 | 0)) {
        label = 564;
        break L1;
       }
       if ((HEAP32[$22 >> 2] | 0) == 19) {
        $1551 = +(HEAP32[$v$i180 >> 2] | 0);
        break;
       } else {
        $1551 = +HEAPF32[$v$i180 >> 2];
        break;
       }
      } while (0);
      HEAPF32[$1445 >> 2] = $1551;
      HEAP32[$1529 >> 2] = 3;
      $1552 = HEAP32[$1446 >> 2] | 0;
      do if (($1552 | 0) == 3) $1574 = +HEAPF32[$51 >> 2]; else {
       if (($1552 | 0) == 19) {
        $1574 = +(HEAP32[$51 >> 2] | 0);
        break;
       }
       if (($1552 & 15 | 0) != 4) {
        label = 574;
        break L1;
       }
       $1562 = _luaO_str2num((HEAP32[$51 >> 2] | 0) + 24 | 0, $v$i183) | 0;
       if (($1562 | 0) != ((HEAP32[(HEAP32[$51 >> 2] | 0) + 12 >> 2] | 0) + 1 | 0)) {
        label = 574;
        break L1;
       }
       if ((HEAP32[$21 >> 2] | 0) == 19) {
        $1574 = +(HEAP32[$v$i183 >> 2] | 0);
        break;
       } else {
        $1574 = +HEAPF32[$v$i183 >> 2];
        break;
       }
      } while (0);
      HEAPF32[$51 >> 2] = $1574 - $1551;
      $storemerge = 3;
     }
     HEAP32[$1446 >> 2] = $storemerge;
     HEAP32[$34 >> 2] = (HEAP32[$34 >> 2] | 0) + (($39 >>> 14) + -131071 << 2);
     $base$0 = $base$1;
     continue L3;
     break;
    }
   case 43:
    {
     $1643 = $39 >>> 23;
     $1645 = $39 >>> 14 & 511;
     if (!$1643) $n$0 = ((HEAP32[$4 >> 2] | 0) - $51 >> 3) + -1 | 0; else $n$0 = $1643;
     if (!$1645) {
      $1654 = HEAP32[$34 >> 2] | 0;
      HEAP32[$34 >> 2] = $1654 + 4;
      $c128$0 = (HEAP32[$1654 >> 2] | 0) >>> 6;
     } else $c128$0 = $1645;
     $1658 = HEAP32[$51 >> 2] | 0;
     $1661 = $n$0 + -50 + ($c128$0 * 50 | 0) | 0;
     if ($1661 >>> 0 > (HEAP32[$1658 + 8 >> 2] | 0) >>> 0) _luaH_resizearray($L, $1658, $1661);
     if (($n$0 | 0) > 0) {
      $1666 = $1658 + 5 | 0;
      $last$0298 = $1661;
      $n$1297 = $n$0;
      do {
       $$sum3 = $n$1297 + $50 | 0;
       $1667 = $base$1 + ($$sum3 << 3) | 0;
       _luaH_setint($L, $1658, $last$0298, $1667);
       $last$0298 = $last$0298 + -1 | 0;
       if (HEAP32[$base$1 + ($$sum3 << 3) + 4 >> 2] & 64) if (HEAP8[$1666 >> 0] & 4) if (HEAP8[(HEAP32[$1667 >> 2] | 0) + 5 >> 0] & 3) _luaC_barrierback_($L, $1658);
       $n$1297 = $n$1297 + -1 | 0;
      } while (($n$1297 | 0) > 0);
     }
     HEAP32[$4 >> 2] = HEAP32[$36 >> 2];
     $base$0 = $base$1;
     continue L3;
     break;
    }
   case 42:
    {
     $base$2 = $base$1;
     $i$0 = $39;
     $ra$1 = $51;
     break;
    }
   case 41:
    {
     $1579 = $base$1 + ($50 + 3 << 3) | 0;
     $1582 = $base$1 + ($50 + 2 << 3) | 0;
     $1587 = HEAP32[$1582 + 4 >> 2] | 0;
     $1588 = $base$1 + ($50 + 5 << 3) | 0;
     HEAP32[$1588 >> 2] = HEAP32[$1582 >> 2];
     HEAP32[$1588 + 4 >> 2] = $1587;
     $1594 = $base$1 + ($50 + 1 << 3) | 0;
     $1599 = HEAP32[$1594 + 4 >> 2] | 0;
     $1600 = $base$1 + ($50 + 4 << 3) | 0;
     HEAP32[$1600 >> 2] = HEAP32[$1594 >> 2];
     HEAP32[$1600 + 4 >> 2] = $1599;
     $1604 = $51;
     $1609 = HEAP32[$1604 + 4 >> 2] | 0;
     $1610 = $1579;
     HEAP32[$1610 >> 2] = HEAP32[$1604 >> 2];
     HEAP32[$1610 + 4 >> 2] = $1609;
     HEAP32[$4 >> 2] = $base$1 + ($50 + 6 << 3);
     _luaD_call($L, $1579, $39 >>> 14 & 511, 1);
     $1617 = HEAP32[$32 >> 2] | 0;
     HEAP32[$4 >> 2] = HEAP32[$36 >> 2];
     $1619 = HEAP32[$34 >> 2] | 0;
     HEAP32[$34 >> 2] = $1619 + 4;
     $1621 = HEAP32[$1619 >> 2] | 0;
     $base$2 = $1617;
     $i$0 = $1621;
     $ra$1 = $1617 + (($1621 >>> 6 & 255) << 3) | 0;
     break;
    }
   case 44:
    {
     $1689 = HEAP32[(HEAP32[(HEAP32[$28 >> 2] | 0) + 52 >> 2] | 0) + ($39 >>> 14 << 2) >> 2] | 0;
     $1690 = $1689 + 68 | 0;
     $1691 = HEAP32[$1690 >> 2] | 0;
     $$pre1017 = HEAP32[$1689 + 12 >> 2] | 0;
     $$pre1019 = HEAP32[$1689 + 64 >> 2] | 0;
     L761 : do if (!$1691) label = 601; else {
      if (($$pre1017 | 0) > 0) {
       $i$01$i = 0;
       do {
        $1701 = HEAPU8[$$pre1019 + ($i$01$i << 3) + 5 >> 0] | 0;
        if (!(HEAP8[$$pre1019 + ($i$01$i << 3) + 4 >> 0] | 0)) $1710 = HEAP32[HEAP32[$35 + ($1701 << 2) >> 2] >> 2] | 0; else $1710 = $base$1 + ($1701 << 3) | 0;
        if ((HEAP32[HEAP32[$1691 + ($i$01$i << 2) + 16 >> 2] >> 2] | 0) != ($1710 | 0)) {
         label = 601;
         break L761;
        }
        $i$01$i = $i$01$i + 1 | 0;
       } while (($i$01$i | 0) < ($$pre1017 | 0));
      }
      HEAP32[$51 >> 2] = $1691;
      HEAP32[$base$1 + ($50 << 3) + 4 >> 2] = 70;
     } while (0);
     if ((label | 0) == 601) {
      label = 0;
      $1711 = _luaF_newLclosure($L, $$pre1017) | 0;
      HEAP32[$1711 + 12 >> 2] = $1689;
      HEAP32[$51 >> 2] = $1711;
      HEAP32[$base$1 + ($50 << 3) + 4 >> 2] = 70;
      if (($$pre1017 | 0) > 0) {
       $i$01$i188 = 0;
       do {
        $1720 = HEAPU8[$$pre1019 + ($i$01$i188 << 3) + 5 >> 0] | 0;
        if (!(HEAP8[$$pre1019 + ($i$01$i188 << 3) + 4 >> 0] | 0)) {
         $1725 = HEAP32[$35 + ($1720 << 2) >> 2] | 0;
         HEAP32[$1711 + ($i$01$i188 << 2) + 16 >> 2] = $1725;
         $1728 = $1725;
        } else {
         $1722 = _luaF_findupval($L, $base$1 + ($1720 << 3) | 0) | 0;
         HEAP32[$1711 + ($i$01$i188 << 2) + 16 >> 2] = $1722;
         $1728 = $1722;
        }
        $1727 = $1728 + 4 | 0;
        HEAP32[$1727 >> 2] = (HEAP32[$1727 >> 2] | 0) + 1;
        $i$01$i188 = $i$01$i188 + 1 | 0;
       } while (($i$01$i188 | 0) != ($$pre1017 | 0));
      }
      if (!(HEAP8[$1689 + 5 >> 0] & 4)) HEAP32[$1690 >> 2] = $1711;
     }
     if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0) > 0) {
      HEAP32[$4 >> 2] = $base$1 + ($50 + 1 << 3);
      _luaC_step($L);
      HEAP32[$4 >> 2] = HEAP32[$36 >> 2];
     }
     $base$0 = HEAP32[$32 >> 2] | 0;
     continue L3;
     break;
    }
   case 45:
    {
     $1744 = $39 >>> 23;
     $1745 = $1744 + -1 | 0;
     $1755 = ($base$1 - (HEAP32[$ci$0 >> 2] | 0) >> 3) - (HEAPU8[(HEAP32[$28 >> 2] | 0) + 6 >> 0] | 0) | 0;
     $1756 = $1755 + -1 | 0;
     if (!$1744) {
      if (((HEAP32[$24 >> 2] | 0) - (HEAP32[$4 >> 2] | 0) >> 3 | 0) <= ($1756 | 0)) _luaD_growstack($L, $1756);
      $1765 = HEAP32[$32 >> 2] | 0;
      HEAP32[$4 >> 2] = $1765 + ($1756 + $50 << 3);
      $b131$0 = $1756;
      $base$3 = $1765;
      $ra$2 = $1765 + ($50 << 3) | 0;
     } else {
      $b131$0 = $1745;
      $base$3 = $base$1;
      $ra$2 = $51;
     }
     if (($b131$0 | 0) <= 0) {
      $base$0 = $base$3;
      continue L3;
     }
     $1769 = 1 - $1755 | 0;
     $j$0296 = 0;
     while (1) {
      if (($j$0296 | 0) < ($1756 | 0)) {
       $1773 = $base$3 + ($1769 + $j$0296 << 3) | 0;
       $1778 = HEAP32[$1773 + 4 >> 2] | 0;
       $1779 = $ra$2 + ($j$0296 << 3) | 0;
       HEAP32[$1779 >> 2] = HEAP32[$1773 >> 2];
       HEAP32[$1779 + 4 >> 2] = $1778;
      } else HEAP32[$ra$2 + ($j$0296 << 3) + 4 >> 2] = 0;
      $1784 = $j$0296 + 1 | 0;
      if (($1784 | 0) == ($b131$0 | 0)) {
       $base$0 = $base$3;
       continue L3;
      } else $j$0296 = $1784;
     }
     break;
    }
   default:
    {
     $base$0 = $base$1;
     continue L3;
    }
   } while (0);
   if (!(HEAP32[$ra$1 + 12 >> 2] | 0)) {
    $base$0 = $base$2;
    continue;
   }
   $1629 = $ra$1 + 8 | 0;
   $1634 = HEAP32[$1629 + 4 >> 2] | 0;
   $1635 = $ra$1;
   HEAP32[$1635 >> 2] = HEAP32[$1629 >> 2];
   HEAP32[$1635 + 4 >> 2] = $1634;
   HEAP32[$34 >> 2] = (HEAP32[$34 >> 2] | 0) + (($i$0 >>> 14) + -131071 << 2);
   $base$0 = $base$2;
  }
  if ((label | 0) == 493) {
   label = 0;
   $1327 = HEAP32[$0 >> 2] | 0;
   $1328 = $1327 + 34 | 0;
   HEAP8[$1328 >> 0] = HEAPU8[$1328 >> 0] | 8;
   $ci$0 = $1327;
   continue;
  } else if ((label | 0) == 498) {
   label = 0;
   $1339 = HEAP32[$0 >> 2] | 0;
   $1341 = HEAP32[$1339 + 8 >> 2] | 0;
   $1342 = HEAP32[$1339 >> 2] | 0;
   $1343 = HEAP32[$1341 >> 2] | 0;
   $1344 = $1339 + 16 | 0;
   $1352 = (HEAP32[$1344 >> 2] | 0) + (HEAPU8[(HEAP32[(HEAP32[$1342 >> 2] | 0) + 12 >> 2] | 0) + 6 >> 0] << 3) | 0;
   if ((HEAP32[(HEAP32[$28 >> 2] | 0) + 28 >> 2] | 0) > 0) _luaF_close($L, HEAP32[$1341 + 16 >> 2] | 0);
   if ($1342 >>> 0 < $1352 >>> 0) {
    $1361 = $1342;
    $aux$0634 = 0;
    do {
     $1362 = $1361;
     $1367 = HEAP32[$1362 + 4 >> 2] | 0;
     $1368 = $1343 + ($aux$0634 << 3) | 0;
     HEAP32[$1368 >> 2] = HEAP32[$1362 >> 2];
     HEAP32[$1368 + 4 >> 2] = $1367;
     $aux$0634 = $aux$0634 + 1 | 0;
     $1361 = $1342 + ($aux$0634 << 3) | 0;
    } while ($1361 >>> 0 < $1352 >>> 0);
   }
   $1377 = $1342;
   HEAP32[$1341 + 16 >> 2] = $1343 + ((HEAP32[$1344 >> 2] | 0) - $1377 >> 3 << 3);
   $1386 = $1343 + ((HEAP32[$4 >> 2] | 0) - $1377 >> 3 << 3) | 0;
   HEAP32[$4 >> 2] = $1386;
   HEAP32[$1341 + 4 >> 2] = $1386;
   HEAP32[$1341 + 20 >> 2] = HEAP32[$1339 + 20 >> 2];
   $1391 = $1341 + 34 | 0;
   HEAP8[$1391 >> 0] = HEAPU8[$1391 >> 0] | 32;
   HEAP32[$0 >> 2] = $1341;
   $ci$0 = $1341;
   continue;
  } else if ((label | 0) == 503) {
   label = 0;
   $1396 = $39 >>> 23;
   if ($1396) HEAP32[$4 >> 2] = $base$1 + ($1396 + -1 + $50 << 3);
   if ((HEAP32[(HEAP32[$28 >> 2] | 0) + 28 >> 2] | 0) > 0) _luaF_close($L, $base$1);
   $1403 = _luaD_poscall($L, $51) | 0;
   if (!(HEAP8[$ci$0 + 34 >> 0] & 8)) {
    label = 508;
    break;
   }
   $1408 = HEAP32[$0 >> 2] | 0;
   if (!$1403) {
    $ci$0 = $1408;
    continue;
   }
   HEAP32[$4 >> 2] = HEAP32[$1408 + 4 >> 2];
   $ci$0 = $1408;
   continue;
  }
 }
 if ((label | 0) == 313) _luaG_runerror($L, 64112, $vararg_buffer); else if ((label | 0) == 346) _luaG_runerror($L, 64080, $vararg_buffer2); else if ((label | 0) == 508) {
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 554) _luaG_runerror($L, 64144, $vararg_buffer4); else if ((label | 0) == 564) _luaG_runerror($L, 64176, $vararg_buffer6); else if ((label | 0) == 574) _luaG_runerror($L, 64208, $vararg_buffer8);
}

function _llex($ls, $seminfo) {
 $ls = $ls | 0;
 $seminfo = $seminfo | 0;
 var $$0 = 0, $$be$i = 0, $$be48$i = 0, $0 = 0, $10 = 0, $1000 = 0, $1002 = 0, $1004 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1011 = 0, $1012 = 0, $1017 = 0, $1023 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $1030 = 0, $104 = 0, $1041 = 0, $1042 = 0, $105 = 0, $1058 = 0, $106 = 0, $1062 = 0, $1063 = 0, $1066 = 0, $1067 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $109 = 0, $110 = 0, $115 = 0, $116 = 0, $117 = 0, $120 = 0, $121 = 0, $126 = 0, $127 = 0, $128 = 0, $131 = 0, $132 = 0, $137 = 0, $138 = 0, $139 = 0, $142 = 0, $143 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $153 = 0, $154 = 0, $159 = 0, $16 = 0, $161 = 0, $162 = 0, $165 = 0, $166 = 0, $17 = 0, $171 = 0, $172 = 0, $173 = 0, $176 = 0, $177 = 0, $182 = 0, $184 = 0, $185 = 0, $188 = 0, $189 = 0, $194 = 0, $195 = 0, $196 = 0, $199 = 0, $20 = 0, $200 = 0, $205 = 0, $207 = 0, $208 = 0, $21 = 0, $211 = 0, $212 = 0, $217 = 0, $218 = 0, $219 = 0, $220 = 0, $222 = 0, $223 = 0, $226 = 0, $230 = 0, $231 = 0, $233 = 0, $235 = 0, $236 = 0, $237 = 0, $240 = 0, $241 = 0, $246 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $253 = 0, $254 = 0, $257 = 0, $26 = 0, $260 = 0, $262 = 0, $264 = 0, $265 = 0, $266 = 0, $269 = 0, $270 = 0, $275 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $281 = 0, $282 = 0, $285 = 0, $288 = 0, $29 = 0, $290 = 0, $292 = 0, $293 = 0, $294 = 0, $297 = 0, $298 = 0, $3 = 0, $303 = 0, $310 = 0, $311 = 0, $312 = 0, $314 = 0, $315 = 0, $318 = 0, $32 = 0, $321 = 0, $324 = 0, $326 = 0, $327 = 0, $328 = 0, $33 = 0, $331 = 0, $332 = 0, $337 = 0, $339 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $345 = 0, $346 = 0, $349 = 0, $352 = 0, $355 = 0, $357 = 0, $358 = 0, $359 = 0, $362 = 0, $363 = 0, $368 = 0, $375 = 0, $376 = 0, $377 = 0, $379 = 0, $38 = 0, $380 = 0, $383 = 0, $386 = 0, $389 = 0, $391 = 0, $392 = 0, $393 = 0, $396 = 0, $397 = 0, $4 = 0, $40 = 0, $402 = 0, $404 = 0, $406 = 0, $409 = 0, $410 = 0, $411 = 0, $413 = 0, $414 = 0, $417 = 0, $420 = 0, $422 = 0, $424 = 0, $425 = 0, $426 = 0, $429 = 0, $430 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $440 = 0, $441 = 0, $444 = 0, $447 = 0, $450 = 0, $452 = 0, $453 = 0, $454 = 0, $457 = 0, $458 = 0, $46 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $468 = 0, $469 = 0, $47 = 0, $472 = 0, $475 = 0, $477 = 0, $479 = 0, $480 = 0, $481 = 0, $484 = 0, $485 = 0, $490 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $501 = 0, $502 = 0, $505 = 0, $508 = 0, $51 = 0, $511 = 0, $513 = 0, $514 = 0, $515 = 0, $518 = 0, $519 = 0, $524 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $531 = 0, $532 = 0, $535 = 0, $538 = 0, $541 = 0, $543 = 0, $544 = 0, $545 = 0, $548 = 0, $549 = 0, $554 = 0, $56 = 0, $563 = 0, $565 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $571 = 0, $572 = 0, $575 = 0, $578 = 0, $581 = 0, $583 = 0, $584 = 0, $585 = 0, $588 = 0, $589 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $603 = 0, $606 = 0, $609 = 0, $61 = 0, $611 = 0, $612 = 0, $613 = 0, $616 = 0, $617 = 0, $622 = 0, $623 = 0, $624 = 0, $627 = 0, $628 = 0, $633 = 0, $635 = 0, $638 = 0, $64 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $647 = 0, $648 = 0, $65 = 0, $651 = 0, $654 = 0, $656 = 0, $658 = 0, $662 = 0, $665 = 0, $666 = 0, $669 = 0, $670 = 0, $675 = 0, $681 = 0, $682 = 0, $685 = 0, $686 = 0, $691 = 0, $70 = 0, $703 = 0, $704 = 0, $705 = 0, $707 = 0, $708 = 0, $711 = 0, $714 = 0, $717 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $724 = 0, $725 = 0, $73 = 0, $730 = 0, $732 = 0, $739 = 0, $740 = 0, $741 = 0, $742 = 0, $744 = 0, $745 = 0, $748 = 0, $751 = 0, $754 = 0, $756 = 0, $757 = 0, $758 = 0, $76 = 0, $761 = 0, $762 = 0, $767 = 0, $768 = 0, $77 = 0, $771 = 0, $773 = 0, $774 = 0, $775 = 0, $777 = 0, $778 = 0, $781 = 0, $784 = 0, $787 = 0, $789 = 0, $790 = 0, $791 = 0, $794 = 0, $795 = 0, $800 = 0, $802 = 0, $805 = 0, $806 = 0, $809 = 0, $810 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $824 = 0, $827 = 0, $83 = 0, $830 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $837 = 0, $838 = 0, $84 = 0, $841 = 0, $844 = 0, $846 = 0, $848 = 0, $850 = 0, $851 = 0, $852 = 0, $855 = 0, $856 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $866 = 0, $867 = 0, $87 = 0, $870 = 0, $874 = 0, $876 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $883 = 0, $884 = 0, $889 = 0, $890 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $900 = 0, $911 = 0, $912 = 0, $924 = 0, $925 = 0, $926 = 0, $928 = 0, $929 = 0, $93 = 0, $932 = 0, $936 = 0, $938 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $945 = 0, $946 = 0, $95 = 0, $951 = 0, $953 = 0, $954 = 0, $957 = 0, $958 = 0, $963 = 0, $965 = 0, $966 = 0, $969 = 0, $970 = 0, $975 = 0, $98 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $993 = 0, $994 = 0, $997 = 0, $buff$i$i = 0, $c$0$i = 0, $c$1$i = 0, $i$0$i$i$i = 0, $i$0$lcssa$i$i = 0, $i$08$i$i = 0, $n$01$i$i = 0, $r$0$i$i$i = 0, $r$0$lcssa$i$i = 0, $r$09$i$i = 0, $ts$0$i = 0, $ts$0$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $buff$i$i = sp;
 $0 = $ls + 40 | 0;
 HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] = 0;
 $3 = $ls + 36 | 0;
 L1 : while (1) {
  $4 = HEAP32[$ls >> 2] | 0;
  L3 : while (1) {
   switch ($4 | 0) {
   case 39:
   case 34:
    {
     label = 85;
     break L1;
     break;
    }
   case 91:
    {
     label = 25;
     break L1;
     break;
    }
   case 58:
    {
     label = 77;
     break L1;
     break;
    }
   case 60:
    {
     label = 37;
     break L1;
     break;
    }
   case 47:
    {
     label = 61;
     break L1;
     break;
    }
   case 11:
   case 9:
   case 12:
   case 32:
    break;
   case 13:
   case 10:
    {
     label = 4;
     break L3;
     break;
    }
   case 126:
    {
     label = 69;
     break L1;
     break;
    }
   case 62:
    {
     label = 49;
     break L1;
     break;
    }
   case 61:
    {
     label = 29;
     break L1;
     break;
    }
   case 46:
    {
     label = 318;
     break L1;
     break;
    }
   case 57:
   case 56:
   case 55:
   case 54:
   case 53:
   case 52:
   case 51:
   case 50:
   case 49:
   case 48:
    {
     label = 337;
     break L1;
     break;
    }
   case -1:
    {
     $$0 = 289;
     label = 360;
     break L1;
     break;
    }
   case 45:
    {
     break L3;
     break;
    }
   default:
    {
     label = 338;
     break L1;
    }
   }
   $5 = HEAP32[$3 >> 2] | 0;
   $6 = HEAP32[$5 >> 2] | 0;
   HEAP32[$5 >> 2] = $6 + -1;
   if (!$6) $15 = _luaZ_fill($5) | 0; else {
    $9 = $5 + 4 | 0;
    $10 = HEAP32[$9 >> 2] | 0;
    HEAP32[$9 >> 2] = $10 + 1;
    $15 = HEAPU8[$10 >> 0] | 0;
   }
   HEAP32[$ls >> 2] = $15;
   $4 = $15;
  }
  if ((label | 0) == 4) {
   label = 0;
   _inclinenumber($ls);
   continue;
  }
  $16 = HEAP32[$3 >> 2] | 0;
  $17 = HEAP32[$16 >> 2] | 0;
  HEAP32[$16 >> 2] = $17 + -1;
  if (!$17) $26 = _luaZ_fill($16) | 0; else {
   $20 = $16 + 4 | 0;
   $21 = HEAP32[$20 >> 2] | 0;
   HEAP32[$20 >> 2] = $21 + 1;
   $26 = HEAPU8[$21 >> 0] | 0;
  }
  HEAP32[$ls >> 2] = $26;
  if (($26 | 0) != 45) {
   $$0 = 45;
   label = 360;
   break;
  }
  $28 = HEAP32[$3 >> 2] | 0;
  $29 = HEAP32[$28 >> 2] | 0;
  HEAP32[$28 >> 2] = $29 + -1;
  if (!$29) $38 = _luaZ_fill($28) | 0; else {
   $32 = $28 + 4 | 0;
   $33 = HEAP32[$32 >> 2] | 0;
   HEAP32[$32 >> 2] = $33 + 1;
   $38 = HEAPU8[$33 >> 0] | 0;
  }
  HEAP32[$ls >> 2] = $38;
  do if (($38 | 0) == 91) {
   $40 = _skip_sep($ls) | 0;
   HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] = 0;
   if (($40 | 0) > -1) {
    _read_long_string($ls, 0, $40);
    HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] = 0;
    continue L1;
   } else {
    $1073 = HEAP32[$ls >> 2] | 0;
    break;
   }
  } else $1073 = $38; while (0);
  while (1) {
   if (($1073 | 0) == -1 | ($1073 | 0) == 13 | ($1073 | 0) == 10) continue L1;
   $46 = HEAP32[$3 >> 2] | 0;
   $47 = HEAP32[$46 >> 2] | 0;
   HEAP32[$46 >> 2] = $47 + -1;
   if (!$47) $56 = _luaZ_fill($46) | 0; else {
    $50 = $46 + 4 | 0;
    $51 = HEAP32[$50 >> 2] | 0;
    HEAP32[$50 >> 2] = $51 + 1;
    $56 = HEAPU8[$51 >> 0] | 0;
   }
   HEAP32[$ls >> 2] = $56;
   $1073 = $56;
  }
 }
 switch (label | 0) {
 case 25:
  {
   $57 = _skip_sep($ls) | 0;
   if (($57 | 0) > -1) {
    _read_long_string($ls, $seminfo, $57);
    $$0 = 293;
    STACKTOP = sp;
    return $$0 | 0;
   }
   if (($57 | 0) == -1) {
    $$0 = 91;
    STACKTOP = sp;
    return $$0 | 0;
   } else _lexerror($ls, 67144, 293);
   break;
  }
 case 29:
  {
   $60 = HEAP32[$3 >> 2] | 0;
   $61 = HEAP32[$60 >> 2] | 0;
   HEAP32[$60 >> 2] = $61 + -1;
   if (!$61) $70 = _luaZ_fill($60) | 0; else {
    $64 = $60 + 4 | 0;
    $65 = HEAP32[$64 >> 2] | 0;
    HEAP32[$64 >> 2] = $65 + 1;
    $70 = HEAPU8[$65 >> 0] | 0;
   }
   HEAP32[$ls >> 2] = $70;
   if (($70 | 0) != 61) {
    $$0 = 61;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $72 = HEAP32[$3 >> 2] | 0;
   $73 = HEAP32[$72 >> 2] | 0;
   HEAP32[$72 >> 2] = $73 + -1;
   if (!$73) $82 = _luaZ_fill($72) | 0; else {
    $76 = $72 + 4 | 0;
    $77 = HEAP32[$76 >> 2] | 0;
    HEAP32[$76 >> 2] = $77 + 1;
    $82 = HEAPU8[$77 >> 0] | 0;
   }
   HEAP32[$ls >> 2] = $82;
   $$0 = 282;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 37:
  {
   $83 = HEAP32[$3 >> 2] | 0;
   $84 = HEAP32[$83 >> 2] | 0;
   HEAP32[$83 >> 2] = $84 + -1;
   if (!$84) $93 = _luaZ_fill($83) | 0; else {
    $87 = $83 + 4 | 0;
    $88 = HEAP32[$87 >> 2] | 0;
    HEAP32[$87 >> 2] = $88 + 1;
    $93 = HEAPU8[$88 >> 0] | 0;
   }
   HEAP32[$ls >> 2] = $93;
   if (($93 | 0) == 61) {
    $94 = HEAP32[$3 >> 2] | 0;
    $95 = HEAP32[$94 >> 2] | 0;
    HEAP32[$94 >> 2] = $95 + -1;
    if (!$95) $104 = _luaZ_fill($94) | 0; else {
     $98 = $94 + 4 | 0;
     $99 = HEAP32[$98 >> 2] | 0;
     HEAP32[$98 >> 2] = $99 + 1;
     $104 = HEAPU8[$99 >> 0] | 0;
    }
    HEAP32[$ls >> 2] = $104;
    $$0 = 284;
    STACKTOP = sp;
    return $$0 | 0;
   } else if (($93 | 0) == 60) {
    $105 = HEAP32[$3 >> 2] | 0;
    $106 = HEAP32[$105 >> 2] | 0;
    HEAP32[$105 >> 2] = $106 + -1;
    if (!$106) $115 = _luaZ_fill($105) | 0; else {
     $109 = $105 + 4 | 0;
     $110 = HEAP32[$109 >> 2] | 0;
     HEAP32[$109 >> 2] = $110 + 1;
     $115 = HEAPU8[$110 >> 0] | 0;
    }
    HEAP32[$ls >> 2] = $115;
    $$0 = 286;
    STACKTOP = sp;
    return $$0 | 0;
   } else {
    $$0 = 60;
    STACKTOP = sp;
    return $$0 | 0;
   }
   break;
  }
 case 49:
  {
   $116 = HEAP32[$3 >> 2] | 0;
   $117 = HEAP32[$116 >> 2] | 0;
   HEAP32[$116 >> 2] = $117 + -1;
   if (!$117) $126 = _luaZ_fill($116) | 0; else {
    $120 = $116 + 4 | 0;
    $121 = HEAP32[$120 >> 2] | 0;
    HEAP32[$120 >> 2] = $121 + 1;
    $126 = HEAPU8[$121 >> 0] | 0;
   }
   HEAP32[$ls >> 2] = $126;
   if (($126 | 0) == 61) {
    $127 = HEAP32[$3 >> 2] | 0;
    $128 = HEAP32[$127 >> 2] | 0;
    HEAP32[$127 >> 2] = $128 + -1;
    if (!$128) $137 = _luaZ_fill($127) | 0; else {
     $131 = $127 + 4 | 0;
     $132 = HEAP32[$131 >> 2] | 0;
     HEAP32[$131 >> 2] = $132 + 1;
     $137 = HEAPU8[$132 >> 0] | 0;
    }
    HEAP32[$ls >> 2] = $137;
    $$0 = 283;
    STACKTOP = sp;
    return $$0 | 0;
   } else if (($126 | 0) == 62) {
    $138 = HEAP32[$3 >> 2] | 0;
    $139 = HEAP32[$138 >> 2] | 0;
    HEAP32[$138 >> 2] = $139 + -1;
    if (!$139) $148 = _luaZ_fill($138) | 0; else {
     $142 = $138 + 4 | 0;
     $143 = HEAP32[$142 >> 2] | 0;
     HEAP32[$142 >> 2] = $143 + 1;
     $148 = HEAPU8[$143 >> 0] | 0;
    }
    HEAP32[$ls >> 2] = $148;
    $$0 = 287;
    STACKTOP = sp;
    return $$0 | 0;
   } else {
    $$0 = 62;
    STACKTOP = sp;
    return $$0 | 0;
   }
   break;
  }
 case 61:
  {
   $149 = HEAP32[$3 >> 2] | 0;
   $150 = HEAP32[$149 >> 2] | 0;
   HEAP32[$149 >> 2] = $150 + -1;
   if (!$150) $159 = _luaZ_fill($149) | 0; else {
    $153 = $149 + 4 | 0;
    $154 = HEAP32[$153 >> 2] | 0;
    HEAP32[$153 >> 2] = $154 + 1;
    $159 = HEAPU8[$154 >> 0] | 0;
   }
   HEAP32[$ls >> 2] = $159;
   if (($159 | 0) != 47) {
    $$0 = 47;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $161 = HEAP32[$3 >> 2] | 0;
   $162 = HEAP32[$161 >> 2] | 0;
   HEAP32[$161 >> 2] = $162 + -1;
   if (!$162) $171 = _luaZ_fill($161) | 0; else {
    $165 = $161 + 4 | 0;
    $166 = HEAP32[$165 >> 2] | 0;
    HEAP32[$165 >> 2] = $166 + 1;
    $171 = HEAPU8[$166 >> 0] | 0;
   }
   HEAP32[$ls >> 2] = $171;
   $$0 = 279;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 69:
  {
   $172 = HEAP32[$3 >> 2] | 0;
   $173 = HEAP32[$172 >> 2] | 0;
   HEAP32[$172 >> 2] = $173 + -1;
   if (!$173) $182 = _luaZ_fill($172) | 0; else {
    $176 = $172 + 4 | 0;
    $177 = HEAP32[$176 >> 2] | 0;
    HEAP32[$176 >> 2] = $177 + 1;
    $182 = HEAPU8[$177 >> 0] | 0;
   }
   HEAP32[$ls >> 2] = $182;
   if (($182 | 0) != 61) {
    $$0 = 126;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $184 = HEAP32[$3 >> 2] | 0;
   $185 = HEAP32[$184 >> 2] | 0;
   HEAP32[$184 >> 2] = $185 + -1;
   if (!$185) $194 = _luaZ_fill($184) | 0; else {
    $188 = $184 + 4 | 0;
    $189 = HEAP32[$188 >> 2] | 0;
    HEAP32[$188 >> 2] = $189 + 1;
    $194 = HEAPU8[$189 >> 0] | 0;
   }
   HEAP32[$ls >> 2] = $194;
   $$0 = 285;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 77:
  {
   $195 = HEAP32[$3 >> 2] | 0;
   $196 = HEAP32[$195 >> 2] | 0;
   HEAP32[$195 >> 2] = $196 + -1;
   if (!$196) $205 = _luaZ_fill($195) | 0; else {
    $199 = $195 + 4 | 0;
    $200 = HEAP32[$199 >> 2] | 0;
    HEAP32[$199 >> 2] = $200 + 1;
    $205 = HEAPU8[$200 >> 0] | 0;
   }
   HEAP32[$ls >> 2] = $205;
   if (($205 | 0) != 58) {
    $$0 = 58;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $207 = HEAP32[$3 >> 2] | 0;
   $208 = HEAP32[$207 >> 2] | 0;
   HEAP32[$207 >> 2] = $208 + -1;
   if (!$208) $217 = _luaZ_fill($207) | 0; else {
    $211 = $207 + 4 | 0;
    $212 = HEAP32[$211 >> 2] | 0;
    HEAP32[$211 >> 2] = $212 + 1;
    $217 = HEAPU8[$212 >> 0] | 0;
   }
   HEAP32[$ls >> 2] = $217;
   $$0 = 288;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 85:
  {
   $218 = HEAP32[$0 >> 2] | 0;
   $219 = $218 + 4 | 0;
   $220 = HEAP32[$219 >> 2] | 0;
   $222 = $218 + 8 | 0;
   $223 = HEAP32[$222 >> 2] | 0;
   do if (($220 + 1 | 0) >>> 0 > $223 >>> 0) if ($223 >>> 0 > 1073741822) _lexerror($ls, 67216, 0); else {
    $226 = $223 << 1;
    $230 = _luaM_realloc_(HEAP32[$ls + 32 >> 2] | 0, HEAP32[$218 >> 2] | 0, $223, $226) | 0;
    HEAP32[$218 >> 2] = $230;
    HEAP32[$222 >> 2] = $226;
    $233 = HEAP32[$219 >> 2] | 0;
    $235 = $230;
    break;
   } else {
    $233 = $220;
    $235 = HEAP32[$218 >> 2] | 0;
   } while (0);
   $231 = $4 & 255;
   HEAP32[$219 >> 2] = $233 + 1;
   HEAP8[$235 + $233 >> 0] = $231;
   $236 = HEAP32[$3 >> 2] | 0;
   $237 = HEAP32[$236 >> 2] | 0;
   HEAP32[$236 >> 2] = $237 + -1;
   if (!$237) $246 = _luaZ_fill($236) | 0; else {
    $240 = $236 + 4 | 0;
    $241 = HEAP32[$240 >> 2] | 0;
    HEAP32[$240 >> 2] = $241 + 1;
    $246 = HEAPU8[$241 >> 0] | 0;
   }
   HEAP32[$ls >> 2] = $246;
   L47 : do if (($246 | 0) != ($4 | 0)) {
    $248 = $ls + 32 | 0;
    $846 = $246;
    L49 : while (1) {
     L51 : do if (($846 | 0) == -1) {
      label = 97;
      break L49;
     } else if (($846 | 0) == 13 | ($846 | 0) == 10) {
      label = 98;
      break L49;
     } else if (($846 | 0) == 92) {
      $249 = HEAP32[$0 >> 2] | 0;
      $250 = $249 + 4 | 0;
      $251 = HEAP32[$250 >> 2] | 0;
      $253 = $249 + 8 | 0;
      $254 = HEAP32[$253 >> 2] | 0;
      if (($251 + 1 | 0) >>> 0 > $254 >>> 0) {
       if ($254 >>> 0 > 1073741822) {
        label = 102;
        break L49;
       }
       $257 = $254 << 1;
       $260 = _luaM_realloc_(HEAP32[$248 >> 2] | 0, HEAP32[$249 >> 2] | 0, $254, $257) | 0;
       HEAP32[$249 >> 2] = $260;
       HEAP32[$253 >> 2] = $257;
       $262 = HEAP32[$250 >> 2] | 0;
       $264 = $260;
      } else {
       $262 = $251;
       $264 = HEAP32[$249 >> 2] | 0;
      }
      HEAP32[$250 >> 2] = $262 + 1;
      HEAP8[$264 + $262 >> 0] = 92;
      $265 = HEAP32[$3 >> 2] | 0;
      $266 = HEAP32[$265 >> 2] | 0;
      HEAP32[$265 >> 2] = $266 + -1;
      if (!$266) $275 = _luaZ_fill($265) | 0; else {
       $269 = $265 + 4 | 0;
       $270 = HEAP32[$269 >> 2] | 0;
       HEAP32[$269 >> 2] = $270 + 1;
       $275 = HEAPU8[$270 >> 0] | 0;
      }
      HEAP32[$ls >> 2] = $275;
      do switch ($275 | 0) {
      case 117:
       {
        $409 = HEAP32[$0 >> 2] | 0;
        $410 = $409 + 4 | 0;
        $411 = HEAP32[$410 >> 2] | 0;
        $413 = $409 + 8 | 0;
        $414 = HEAP32[$413 >> 2] | 0;
        if (($411 + 1 | 0) >>> 0 > $414 >>> 0) {
         if ($414 >>> 0 > 1073741822) {
          label = 159;
          break L49;
         }
         $417 = $414 << 1;
         $420 = _luaM_realloc_(HEAP32[$248 >> 2] | 0, HEAP32[$409 >> 2] | 0, $414, $417) | 0;
         HEAP32[$409 >> 2] = $420;
         HEAP32[$413 >> 2] = $417;
         $422 = HEAP32[$410 >> 2] | 0;
         $424 = $420;
        } else {
         $422 = $411;
         $424 = HEAP32[$409 >> 2] | 0;
        }
        HEAP32[$410 >> 2] = $422 + 1;
        HEAP8[$424 + $422 >> 0] = 117;
        $425 = HEAP32[$3 >> 2] | 0;
        $426 = HEAP32[$425 >> 2] | 0;
        HEAP32[$425 >> 2] = $426 + -1;
        if (!$426) $435 = _luaZ_fill($425) | 0; else {
         $429 = $425 + 4 | 0;
         $430 = HEAP32[$429 >> 2] | 0;
         HEAP32[$429 >> 2] = $430 + 1;
         $435 = HEAPU8[$430 >> 0] | 0;
        }
        HEAP32[$ls >> 2] = $435;
        if (($435 | 0) == -1) {
         label = 174;
         break L49;
        } else if (($435 | 0) != 123) {
         label = 165;
         break L49;
        }
        $464 = HEAP32[$0 >> 2] | 0;
        $465 = $464 + 4 | 0;
        $466 = HEAP32[$465 >> 2] | 0;
        $468 = $464 + 8 | 0;
        $469 = HEAP32[$468 >> 2] | 0;
        if (($466 + 1 | 0) >>> 0 > $469 >>> 0) {
         if ($469 >>> 0 > 1073741822) {
          label = 178;
          break L49;
         }
         $472 = $469 << 1;
         $475 = _luaM_realloc_(HEAP32[$248 >> 2] | 0, HEAP32[$464 >> 2] | 0, $469, $472) | 0;
         HEAP32[$464 >> 2] = $475;
         HEAP32[$468 >> 2] = $472;
         $477 = HEAP32[$465 >> 2] | 0;
         $479 = $475;
        } else {
         $477 = $466;
         $479 = HEAP32[$464 >> 2] | 0;
        }
        HEAP32[$465 >> 2] = $477 + 1;
        HEAP8[$479 + $477 >> 0] = 123;
        $480 = HEAP32[$3 >> 2] | 0;
        $481 = HEAP32[$480 >> 2] | 0;
        HEAP32[$480 >> 2] = $481 + -1;
        if (!$481) $490 = _luaZ_fill($480) | 0; else {
         $484 = $480 + 4 | 0;
         $485 = HEAP32[$484 >> 2] | 0;
         HEAP32[$484 >> 2] = $485 + 1;
         $490 = HEAPU8[$485 >> 0] | 0;
        }
        HEAP32[$ls >> 2] = $490;
        if (!(HEAP8[$490 + 65881 >> 0] & 16)) {
         label = 184;
         break L49;
        }
        $i$0$i$i$i = 4;
        $r$0$i$i$i = _luaO_hexavalue($490) | 0;
        while (1) {
         $526 = HEAP32[$ls >> 2] | 0;
         $527 = HEAP32[$0 >> 2] | 0;
         $528 = $527 + 4 | 0;
         $529 = HEAP32[$528 >> 2] | 0;
         $531 = $527 + 8 | 0;
         $532 = HEAP32[$531 >> 2] | 0;
         if (($529 + 1 | 0) >>> 0 > $532 >>> 0) {
          if ($532 >>> 0 > 1073741822) {
           label = 199;
           break L49;
          }
          $535 = $532 << 1;
          $538 = _luaM_realloc_(HEAP32[$248 >> 2] | 0, HEAP32[$527 >> 2] | 0, $532, $535) | 0;
          HEAP32[$527 >> 2] = $538;
          HEAP32[$531 >> 2] = $535;
          $541 = HEAP32[$528 >> 2] | 0;
          $543 = $538;
         } else {
          $541 = $529;
          $543 = HEAP32[$527 >> 2] | 0;
         }
         HEAP32[$528 >> 2] = $541 + 1;
         HEAP8[$543 + $541 >> 0] = $526;
         $544 = HEAP32[$3 >> 2] | 0;
         $545 = HEAP32[$544 >> 2] | 0;
         HEAP32[$544 >> 2] = $545 + -1;
         if (!$545) $554 = _luaZ_fill($544) | 0; else {
          $548 = $544 + 4 | 0;
          $549 = HEAP32[$548 >> 2] | 0;
          HEAP32[$548 >> 2] = $549 + 1;
          $554 = HEAPU8[$549 >> 0] | 0;
         }
         HEAP32[$ls >> 2] = $554;
         if (!(HEAP8[$554 + 65881 >> 0] & 16)) break;
         $563 = (_luaO_hexavalue($554) | 0) + ($r$0$i$i$i << 4) | 0;
         if ($563 >>> 0 < 1114112) {
          $i$0$i$i$i = $i$0$i$i$i + 1 | 0;
          $r$0$i$i$i = $563;
         } else {
          label = 206;
          break L49;
         }
        }
        if (($554 | 0) == -1) {
         label = 227;
         break L49;
        } else if (($554 | 0) != 125) {
         label = 218;
         break L49;
        }
        $623 = HEAP32[$3 >> 2] | 0;
        $624 = HEAP32[$623 >> 2] | 0;
        HEAP32[$623 >> 2] = $624 + -1;
        if (!$624) $633 = _luaZ_fill($623) | 0; else {
         $627 = $623 + 4 | 0;
         $628 = HEAP32[$627 >> 2] | 0;
         HEAP32[$627 >> 2] = $628 + 1;
         $633 = HEAPU8[$628 >> 0] | 0;
        }
        HEAP32[$ls >> 2] = $633;
        $635 = (HEAP32[$0 >> 2] | 0) + 4 | 0;
        HEAP32[$635 >> 2] = (HEAP32[$635 >> 2] | 0) - $i$0$i$i$i;
        $638 = _luaO_utf8esc($buff$i$i, $r$0$i$i$i) | 0;
        if (($638 | 0) > 0) {
         $n$01$i$i = $638;
         do {
          $642 = HEAP8[$buff$i$i + (8 - $n$01$i$i) >> 0] | 0;
          $643 = HEAP32[$0 >> 2] | 0;
          $644 = $643 + 4 | 0;
          $645 = HEAP32[$644 >> 2] | 0;
          $647 = $643 + 8 | 0;
          $648 = HEAP32[$647 >> 2] | 0;
          if (($645 + 1 | 0) >>> 0 > $648 >>> 0) {
           if ($648 >>> 0 > 1073741822) {
            label = 235;
            break L49;
           }
           $651 = $648 << 1;
           $654 = _luaM_realloc_(HEAP32[$248 >> 2] | 0, HEAP32[$643 >> 2] | 0, $648, $651) | 0;
           HEAP32[$643 >> 2] = $654;
           HEAP32[$647 >> 2] = $651;
           $656 = HEAP32[$644 >> 2] | 0;
           $658 = $654;
          } else {
           $656 = $645;
           $658 = HEAP32[$643 >> 2] | 0;
          }
          HEAP32[$644 >> 2] = $656 + 1;
          HEAP8[$658 + $656 >> 0] = $642;
          $n$01$i$i = $n$01$i$i + -1 | 0;
         } while (($n$01$i$i | 0) > 0);
        }
        break;
       }
      case -1:
       {
        $$be48$i = -1;
        break L51;
        break;
       }
      case 98:
       {
        $c$0$i = 8;
        label = 286;
        break;
       }
      case 102:
       {
        $c$0$i = 12;
        label = 286;
        break;
       }
      case 110:
       {
        $c$0$i = 10;
        label = 286;
        break;
       }
      case 114:
       {
        $c$0$i = 13;
        label = 286;
        break;
       }
      case 116:
       {
        $c$0$i = 9;
        label = 286;
        break;
       }
      case 118:
       {
        $c$0$i = 11;
        label = 286;
        break;
       }
      case 120:
       {
        $277 = HEAP32[$0 >> 2] | 0;
        $278 = $277 + 4 | 0;
        $279 = HEAP32[$278 >> 2] | 0;
        $281 = $277 + 8 | 0;
        $282 = HEAP32[$281 >> 2] | 0;
        if (($279 + 1 | 0) >>> 0 > $282 >>> 0) {
         if ($282 >>> 0 > 1073741822) {
          label = 118;
          break L49;
         }
         $285 = $282 << 1;
         $288 = _luaM_realloc_(HEAP32[$248 >> 2] | 0, HEAP32[$277 >> 2] | 0, $282, $285) | 0;
         HEAP32[$277 >> 2] = $288;
         HEAP32[$281 >> 2] = $285;
         $290 = HEAP32[$278 >> 2] | 0;
         $292 = $288;
        } else {
         $290 = $279;
         $292 = HEAP32[$277 >> 2] | 0;
        }
        HEAP32[$278 >> 2] = $290 + 1;
        HEAP8[$292 + $290 >> 0] = 120;
        $293 = HEAP32[$3 >> 2] | 0;
        $294 = HEAP32[$293 >> 2] | 0;
        HEAP32[$293 >> 2] = $294 + -1;
        if (!$294) $303 = _luaZ_fill($293) | 0; else {
         $297 = $293 + 4 | 0;
         $298 = HEAP32[$297 >> 2] | 0;
         HEAP32[$297 >> 2] = $298 + 1;
         $303 = HEAPU8[$298 >> 0] | 0;
        }
        HEAP32[$ls >> 2] = $303;
        if (!(HEAP8[$303 + 65881 >> 0] & 16)) {
         label = 124;
         break L49;
        }
        $339 = (_luaO_hexavalue($303) | 0) << 4;
        $340 = HEAP32[$ls >> 2] | 0;
        $341 = HEAP32[$0 >> 2] | 0;
        $342 = $341 + 4 | 0;
        $343 = HEAP32[$342 >> 2] | 0;
        $345 = $341 + 8 | 0;
        $346 = HEAP32[$345 >> 2] | 0;
        if (($343 + 1 | 0) >>> 0 > $346 >>> 0) {
         if ($346 >>> 0 > 1073741822) {
          label = 138;
          break L49;
         }
         $349 = $346 << 1;
         $352 = _luaM_realloc_(HEAP32[$248 >> 2] | 0, HEAP32[$341 >> 2] | 0, $346, $349) | 0;
         HEAP32[$341 >> 2] = $352;
         HEAP32[$345 >> 2] = $349;
         $355 = HEAP32[$342 >> 2] | 0;
         $357 = $352;
        } else {
         $355 = $343;
         $357 = HEAP32[$341 >> 2] | 0;
        }
        HEAP32[$342 >> 2] = $355 + 1;
        HEAP8[$357 + $355 >> 0] = $340;
        $358 = HEAP32[$3 >> 2] | 0;
        $359 = HEAP32[$358 >> 2] | 0;
        HEAP32[$358 >> 2] = $359 + -1;
        if (!$359) $368 = _luaZ_fill($358) | 0; else {
         $362 = $358 + 4 | 0;
         $363 = HEAP32[$362 >> 2] | 0;
         HEAP32[$362 >> 2] = $363 + 1;
         $368 = HEAPU8[$363 >> 0] | 0;
        }
        HEAP32[$ls >> 2] = $368;
        if (!(HEAP8[$368 + 65881 >> 0] & 16)) {
         label = 144;
         break L49;
        }
        $404 = (_luaO_hexavalue($368) | 0) + $339 | 0;
        $406 = (HEAP32[$0 >> 2] | 0) + 4 | 0;
        HEAP32[$406 >> 2] = (HEAP32[$406 >> 2] | 0) + -2;
        $c$0$i = $404;
        label = 286;
        break;
       }
      case 13:
      case 10:
       {
        _inclinenumber($ls);
        $c$1$i = 10;
        label = 290;
        break;
       }
      case 39:
      case 34:
      case 92:
       {
        $c$0$i = $275;
        label = 286;
        break;
       }
      case 122:
       {
        $662 = (HEAP32[$0 >> 2] | 0) + 4 | 0;
        HEAP32[$662 >> 2] = (HEAP32[$662 >> 2] | 0) + -1;
        $665 = HEAP32[$3 >> 2] | 0;
        $666 = HEAP32[$665 >> 2] | 0;
        HEAP32[$665 >> 2] = $666 + -1;
        if (!$666) $675 = _luaZ_fill($665) | 0; else {
         $669 = $665 + 4 | 0;
         $670 = HEAP32[$669 >> 2] | 0;
         HEAP32[$669 >> 2] = $670 + 1;
         $675 = HEAPU8[$670 >> 0] | 0;
        }
        HEAP32[$ls >> 2] = $675;
        if (HEAP8[$675 + 65881 >> 0] & 8) {
         $1074 = $675;
         while (1) {
          if (($1074 | 0) == 13 | ($1074 | 0) == 10) {
           _inclinenumber($ls);
           $$be$i = HEAP32[$ls >> 2] | 0;
          } else {
           $681 = HEAP32[$3 >> 2] | 0;
           $682 = HEAP32[$681 >> 2] | 0;
           HEAP32[$681 >> 2] = $682 + -1;
           if (!$682) $691 = _luaZ_fill($681) | 0; else {
            $685 = $681 + 4 | 0;
            $686 = HEAP32[$685 >> 2] | 0;
            HEAP32[$685 >> 2] = $686 + 1;
            $691 = HEAPU8[$686 >> 0] | 0;
           }
           HEAP32[$ls >> 2] = $691;
           $$be$i = $691;
          }
          if (!(HEAP8[$$be$i + 65881 >> 0] & 8)) break; else $1074 = $$be$i;
         }
        }
        break;
       }
      case 97:
       {
        $c$0$i = 7;
        label = 286;
        break;
       }
      default:
       {
        if (!(HEAP8[$275 + 65881 >> 0] & 2)) {
         label = 252;
         break L49;
        } else {
         $732 = $275;
         $i$08$i$i = 0;
         $r$09$i$i = 0;
        }
        while (1) {
         if (!(HEAP8[$732 + 65881 >> 0] & 2)) {
          $771 = $732;
          $i$0$lcssa$i$i = $i$08$i$i;
          $r$0$lcssa$i$i = $r$09$i$i;
          break;
         }
         $739 = $732 + -48 + ($r$09$i$i * 10 | 0) | 0;
         $740 = HEAP32[$0 >> 2] | 0;
         $741 = $740 + 4 | 0;
         $742 = HEAP32[$741 >> 2] | 0;
         $744 = $740 + 8 | 0;
         $745 = HEAP32[$744 >> 2] | 0;
         if (($742 + 1 | 0) >>> 0 > $745 >>> 0) {
          if ($745 >>> 0 > 1073741822) {
           label = 267;
           break L49;
          }
          $748 = $745 << 1;
          $751 = _luaM_realloc_(HEAP32[$248 >> 2] | 0, HEAP32[$740 >> 2] | 0, $745, $748) | 0;
          HEAP32[$740 >> 2] = $751;
          HEAP32[$744 >> 2] = $748;
          $754 = HEAP32[$741 >> 2] | 0;
          $756 = $751;
         } else {
          $754 = $742;
          $756 = HEAP32[$740 >> 2] | 0;
         }
         HEAP32[$741 >> 2] = $754 + 1;
         HEAP8[$756 + $754 >> 0] = $732;
         $757 = HEAP32[$3 >> 2] | 0;
         $758 = HEAP32[$757 >> 2] | 0;
         HEAP32[$757 >> 2] = $758 + -1;
         if (!$758) $767 = _luaZ_fill($757) | 0; else {
          $761 = $757 + 4 | 0;
          $762 = HEAP32[$761 >> 2] | 0;
          HEAP32[$761 >> 2] = $762 + 1;
          $767 = HEAPU8[$762 >> 0] | 0;
         }
         HEAP32[$ls >> 2] = $767;
         $768 = $i$08$i$i + 1 | 0;
         if (($768 | 0) < 3) {
          $732 = $767;
          $i$08$i$i = $768;
          $r$09$i$i = $739;
         } else {
          $771 = $767;
          $i$0$lcssa$i$i = $768;
          $r$0$lcssa$i$i = $739;
          break;
         }
        }
        if (($r$0$lcssa$i$i | 0) >= 256) {
         label = 274;
         break L49;
        }
        $802 = (HEAP32[$0 >> 2] | 0) + 4 | 0;
        HEAP32[$802 >> 2] = (HEAP32[$802 >> 2] | 0) - $i$0$lcssa$i$i;
        $c$1$i = $r$0$lcssa$i$i;
        label = 290;
       }
      } while (0);
      if ((label | 0) == 286) {
       label = 0;
       $805 = HEAP32[$3 >> 2] | 0;
       $806 = HEAP32[$805 >> 2] | 0;
       HEAP32[$805 >> 2] = $806 + -1;
       if (!$806) $815 = _luaZ_fill($805) | 0; else {
        $809 = $805 + 4 | 0;
        $810 = HEAP32[$809 >> 2] | 0;
        HEAP32[$809 >> 2] = $810 + 1;
        $815 = HEAPU8[$810 >> 0] | 0;
       }
       HEAP32[$ls >> 2] = $815;
       $c$1$i = $c$0$i;
       label = 290;
      }
      if ((label | 0) == 290) {
       label = 0;
       $816 = HEAP32[$0 >> 2] | 0;
       $817 = $816 + 4 | 0;
       $818 = HEAP32[$817 >> 2] | 0;
       $819 = $818 + -1 | 0;
       HEAP32[$817 >> 2] = $819;
       $820 = $816 + 8 | 0;
       $821 = HEAP32[$820 >> 2] | 0;
       if ($818 >>> 0 > $821 >>> 0) {
        if ($821 >>> 0 > 1073741822) {
         label = 293;
         break L49;
        }
        $824 = $821 << 1;
        $827 = _luaM_realloc_(HEAP32[$248 >> 2] | 0, HEAP32[$816 >> 2] | 0, $821, $824) | 0;
        HEAP32[$816 >> 2] = $827;
        HEAP32[$820 >> 2] = $824;
        $830 = HEAP32[$817 >> 2] | 0;
        $832 = $827;
       } else {
        $830 = $819;
        $832 = HEAP32[$816 >> 2] | 0;
       }
       HEAP32[$817 >> 2] = $830 + 1;
       HEAP8[$832 + $830 >> 0] = $c$1$i;
      }
      $$be48$i = HEAP32[$ls >> 2] | 0;
     } else {
      $833 = HEAP32[$0 >> 2] | 0;
      $834 = $833 + 4 | 0;
      $835 = HEAP32[$834 >> 2] | 0;
      $837 = $833 + 8 | 0;
      $838 = HEAP32[$837 >> 2] | 0;
      if (($835 + 1 | 0) >>> 0 > $838 >>> 0) {
       if ($838 >>> 0 > 1073741822) {
        label = 299;
        break L49;
       }
       $841 = $838 << 1;
       $844 = _luaM_realloc_(HEAP32[$248 >> 2] | 0, HEAP32[$833 >> 2] | 0, $838, $841) | 0;
       HEAP32[$833 >> 2] = $844;
       HEAP32[$837 >> 2] = $841;
       $848 = HEAP32[$834 >> 2] | 0;
       $850 = $844;
      } else {
       $848 = $835;
       $850 = HEAP32[$833 >> 2] | 0;
      }
      HEAP32[$834 >> 2] = $848 + 1;
      HEAP8[$850 + $848 >> 0] = $846;
      $851 = HEAP32[$3 >> 2] | 0;
      $852 = HEAP32[$851 >> 2] | 0;
      HEAP32[$851 >> 2] = $852 + -1;
      if (!$852) $861 = _luaZ_fill($851) | 0; else {
       $855 = $851 + 4 | 0;
       $856 = HEAP32[$855 >> 2] | 0;
       HEAP32[$855 >> 2] = $856 + 1;
       $861 = HEAPU8[$856 >> 0] | 0;
      }
      HEAP32[$ls >> 2] = $861;
      $$be48$i = $861;
     } while (0);
     if (($$be48$i | 0) == ($4 | 0)) break L47; else $846 = $$be48$i;
    }
    switch (label | 0) {
    case 97:
     {
      _lexerror($ls, 67248, 289);
      break;
     }
    case 98:
     {
      _lexerror($ls, 67248, 293);
      break;
     }
    case 102:
     {
      _lexerror($ls, 67216, 0);
      break;
     }
    case 118:
     {
      _lexerror($ls, 67216, 0);
      break;
     }
    case 124:
     {
      if (($303 | 0) == -1) _lexerror($ls, 67384, 293);
      $310 = HEAP32[$0 >> 2] | 0;
      $311 = $310 + 4 | 0;
      $312 = HEAP32[$311 >> 2] | 0;
      $314 = $310 + 8 | 0;
      $315 = HEAP32[$314 >> 2] | 0;
      do if (($312 + 1 | 0) >>> 0 > $315 >>> 0) if ($315 >>> 0 > 1073741822) _lexerror($ls, 67216, 0); else {
       $318 = $315 << 1;
       $321 = _luaM_realloc_(HEAP32[$248 >> 2] | 0, HEAP32[$310 >> 2] | 0, $315, $318) | 0;
       HEAP32[$310 >> 2] = $321;
       HEAP32[$314 >> 2] = $318;
       $324 = HEAP32[$311 >> 2] | 0;
       $326 = $321;
       break;
      } else {
       $324 = $312;
       $326 = HEAP32[$310 >> 2] | 0;
      } while (0);
      HEAP32[$311 >> 2] = $324 + 1;
      HEAP8[$326 + $324 >> 0] = $303;
      $327 = HEAP32[$3 >> 2] | 0;
      $328 = HEAP32[$327 >> 2] | 0;
      HEAP32[$327 >> 2] = $328 + -1;
      if (!$328) $337 = _luaZ_fill($327) | 0; else {
       $331 = $327 + 4 | 0;
       $332 = HEAP32[$331 >> 2] | 0;
       HEAP32[$331 >> 2] = $332 + 1;
       $337 = HEAPU8[$332 >> 0] | 0;
      }
      HEAP32[$ls >> 2] = $337;
      _lexerror($ls, 67384, 293);
      break;
     }
    case 138:
     {
      _lexerror($ls, 67216, 0);
      break;
     }
    case 144:
     {
      if (($368 | 0) == -1) _lexerror($ls, 67384, 293);
      $375 = HEAP32[$0 >> 2] | 0;
      $376 = $375 + 4 | 0;
      $377 = HEAP32[$376 >> 2] | 0;
      $379 = $375 + 8 | 0;
      $380 = HEAP32[$379 >> 2] | 0;
      do if (($377 + 1 | 0) >>> 0 > $380 >>> 0) if ($380 >>> 0 > 1073741822) _lexerror($ls, 67216, 0); else {
       $383 = $380 << 1;
       $386 = _luaM_realloc_(HEAP32[$248 >> 2] | 0, HEAP32[$375 >> 2] | 0, $380, $383) | 0;
       HEAP32[$375 >> 2] = $386;
       HEAP32[$379 >> 2] = $383;
       $389 = HEAP32[$376 >> 2] | 0;
       $391 = $386;
       break;
      } else {
       $389 = $377;
       $391 = HEAP32[$375 >> 2] | 0;
      } while (0);
      HEAP32[$376 >> 2] = $389 + 1;
      HEAP8[$391 + $389 >> 0] = $368;
      $392 = HEAP32[$3 >> 2] | 0;
      $393 = HEAP32[$392 >> 2] | 0;
      HEAP32[$392 >> 2] = $393 + -1;
      if (!$393) $402 = _luaZ_fill($392) | 0; else {
       $396 = $392 + 4 | 0;
       $397 = HEAP32[$396 >> 2] | 0;
       HEAP32[$396 >> 2] = $397 + 1;
       $402 = HEAPU8[$397 >> 0] | 0;
      }
      HEAP32[$ls >> 2] = $402;
      _lexerror($ls, 67384, 293);
      break;
     }
    case 159:
     {
      _lexerror($ls, 67216, 0);
      break;
     }
    case 165:
     {
      $436 = HEAP32[$0 >> 2] | 0;
      $437 = $436 + 4 | 0;
      $438 = HEAP32[$437 >> 2] | 0;
      $440 = $436 + 8 | 0;
      $441 = HEAP32[$440 >> 2] | 0;
      do if (($438 + 1 | 0) >>> 0 > $441 >>> 0) if ($441 >>> 0 > 1073741822) _lexerror($ls, 67216, 0); else {
       $444 = $441 << 1;
       $447 = _luaM_realloc_(HEAP32[$248 >> 2] | 0, HEAP32[$436 >> 2] | 0, $441, $444) | 0;
       HEAP32[$436 >> 2] = $447;
       HEAP32[$440 >> 2] = $444;
       $450 = HEAP32[$437 >> 2] | 0;
       $452 = $447;
       break;
      } else {
       $450 = $438;
       $452 = HEAP32[$436 >> 2] | 0;
      } while (0);
      HEAP32[$437 >> 2] = $450 + 1;
      HEAP8[$452 + $450 >> 0] = $435;
      $453 = HEAP32[$3 >> 2] | 0;
      $454 = HEAP32[$453 >> 2] | 0;
      HEAP32[$453 >> 2] = $454 + -1;
      if (!$454) $463 = _luaZ_fill($453) | 0; else {
       $457 = $453 + 4 | 0;
       $458 = HEAP32[$457 >> 2] | 0;
       HEAP32[$457 >> 2] = $458 + 1;
       $463 = HEAPU8[$458 >> 0] | 0;
      }
      HEAP32[$ls >> 2] = $463;
      _lexerror($ls, 67328, 293);
      break;
     }
    case 174:
     {
      _lexerror($ls, 67328, 293);
      break;
     }
    case 178:
     {
      _lexerror($ls, 67216, 0);
      break;
     }
    case 184:
     {
      if (($490 | 0) == -1) _lexerror($ls, 67384, 293);
      $497 = HEAP32[$0 >> 2] | 0;
      $498 = $497 + 4 | 0;
      $499 = HEAP32[$498 >> 2] | 0;
      $501 = $497 + 8 | 0;
      $502 = HEAP32[$501 >> 2] | 0;
      do if (($499 + 1 | 0) >>> 0 > $502 >>> 0) if ($502 >>> 0 > 1073741822) _lexerror($ls, 67216, 0); else {
       $505 = $502 << 1;
       $508 = _luaM_realloc_(HEAP32[$248 >> 2] | 0, HEAP32[$497 >> 2] | 0, $502, $505) | 0;
       HEAP32[$497 >> 2] = $508;
       HEAP32[$501 >> 2] = $505;
       $511 = HEAP32[$498 >> 2] | 0;
       $513 = $508;
       break;
      } else {
       $511 = $499;
       $513 = HEAP32[$497 >> 2] | 0;
      } while (0);
      HEAP32[$498 >> 2] = $511 + 1;
      HEAP8[$513 + $511 >> 0] = $490;
      $514 = HEAP32[$3 >> 2] | 0;
      $515 = HEAP32[$514 >> 2] | 0;
      HEAP32[$514 >> 2] = $515 + -1;
      if (!$515) $524 = _luaZ_fill($514) | 0; else {
       $518 = $514 + 4 | 0;
       $519 = HEAP32[$518 >> 2] | 0;
       HEAP32[$518 >> 2] = $519 + 1;
       $524 = HEAPU8[$519 >> 0] | 0;
      }
      HEAP32[$ls >> 2] = $524;
      _lexerror($ls, 67384, 293);
      break;
     }
    case 199:
     {
      _lexerror($ls, 67216, 0);
      break;
     }
    case 206:
     {
      $565 = HEAP32[$ls >> 2] | 0;
      if (($565 | 0) == -1) _lexerror($ls, 67344, 293);
      $567 = HEAP32[$0 >> 2] | 0;
      $568 = $567 + 4 | 0;
      $569 = HEAP32[$568 >> 2] | 0;
      $571 = $567 + 8 | 0;
      $572 = HEAP32[$571 >> 2] | 0;
      do if (($569 + 1 | 0) >>> 0 > $572 >>> 0) if ($572 >>> 0 > 1073741822) _lexerror($ls, 67216, 0); else {
       $575 = $572 << 1;
       $578 = _luaM_realloc_(HEAP32[$248 >> 2] | 0, HEAP32[$567 >> 2] | 0, $572, $575) | 0;
       HEAP32[$567 >> 2] = $578;
       HEAP32[$571 >> 2] = $575;
       $581 = HEAP32[$568 >> 2] | 0;
       $583 = $578;
       break;
      } else {
       $581 = $569;
       $583 = HEAP32[$567 >> 2] | 0;
      } while (0);
      HEAP32[$568 >> 2] = $581 + 1;
      HEAP8[$583 + $581 >> 0] = $565;
      $584 = HEAP32[$3 >> 2] | 0;
      $585 = HEAP32[$584 >> 2] | 0;
      HEAP32[$584 >> 2] = $585 + -1;
      if (!$585) $594 = _luaZ_fill($584) | 0; else {
       $588 = $584 + 4 | 0;
       $589 = HEAP32[$588 >> 2] | 0;
       HEAP32[$588 >> 2] = $589 + 1;
       $594 = HEAPU8[$589 >> 0] | 0;
      }
      HEAP32[$ls >> 2] = $594;
      _lexerror($ls, 67344, 293);
      break;
     }
    case 218:
     {
      $595 = HEAP32[$0 >> 2] | 0;
      $596 = $595 + 4 | 0;
      $597 = HEAP32[$596 >> 2] | 0;
      $599 = $595 + 8 | 0;
      $600 = HEAP32[$599 >> 2] | 0;
      do if (($597 + 1 | 0) >>> 0 > $600 >>> 0) if ($600 >>> 0 > 1073741822) _lexerror($ls, 67216, 0); else {
       $603 = $600 << 1;
       $606 = _luaM_realloc_(HEAP32[$248 >> 2] | 0, HEAP32[$595 >> 2] | 0, $600, $603) | 0;
       HEAP32[$595 >> 2] = $606;
       HEAP32[$599 >> 2] = $603;
       $609 = HEAP32[$596 >> 2] | 0;
       $611 = $606;
       break;
      } else {
       $609 = $597;
       $611 = HEAP32[$595 >> 2] | 0;
      } while (0);
      HEAP32[$596 >> 2] = $609 + 1;
      HEAP8[$611 + $609 >> 0] = $554;
      $612 = HEAP32[$3 >> 2] | 0;
      $613 = HEAP32[$612 >> 2] | 0;
      HEAP32[$612 >> 2] = $613 + -1;
      if (!$613) $622 = _luaZ_fill($612) | 0; else {
       $616 = $612 + 4 | 0;
       $617 = HEAP32[$616 >> 2] | 0;
       HEAP32[$616 >> 2] = $617 + 1;
       $622 = HEAPU8[$617 >> 0] | 0;
      }
      HEAP32[$ls >> 2] = $622;
      _lexerror($ls, 67368, 293);
      break;
     }
    case 227:
     {
      _lexerror($ls, 67368, 293);
      break;
     }
    case 235:
     {
      _lexerror($ls, 67216, 0);
      break;
     }
    case 252:
     {
      if (($275 | 0) == -1) _lexerror($ls, 67272, 293);
      $703 = HEAP32[$0 >> 2] | 0;
      $704 = $703 + 4 | 0;
      $705 = HEAP32[$704 >> 2] | 0;
      $707 = $703 + 8 | 0;
      $708 = HEAP32[$707 >> 2] | 0;
      do if (($705 + 1 | 0) >>> 0 > $708 >>> 0) if ($708 >>> 0 > 1073741822) _lexerror($ls, 67216, 0); else {
       $711 = $708 << 1;
       $714 = _luaM_realloc_(HEAP32[$248 >> 2] | 0, HEAP32[$703 >> 2] | 0, $708, $711) | 0;
       HEAP32[$703 >> 2] = $714;
       HEAP32[$707 >> 2] = $711;
       $717 = HEAP32[$704 >> 2] | 0;
       $719 = $714;
       break;
      } else {
       $717 = $705;
       $719 = HEAP32[$703 >> 2] | 0;
      } while (0);
      HEAP32[$704 >> 2] = $717 + 1;
      HEAP8[$719 + $717 >> 0] = $275;
      $720 = HEAP32[$3 >> 2] | 0;
      $721 = HEAP32[$720 >> 2] | 0;
      HEAP32[$720 >> 2] = $721 + -1;
      if (!$721) $730 = _luaZ_fill($720) | 0; else {
       $724 = $720 + 4 | 0;
       $725 = HEAP32[$724 >> 2] | 0;
       HEAP32[$724 >> 2] = $725 + 1;
       $730 = HEAPU8[$725 >> 0] | 0;
      }
      HEAP32[$ls >> 2] = $730;
      _lexerror($ls, 67272, 293);
      break;
     }
    case 267:
     {
      _lexerror($ls, 67216, 0);
      break;
     }
    case 274:
     {
      if (($771 | 0) == -1) _lexerror($ls, 67296, 293);
      $773 = HEAP32[$0 >> 2] | 0;
      $774 = $773 + 4 | 0;
      $775 = HEAP32[$774 >> 2] | 0;
      $777 = $773 + 8 | 0;
      $778 = HEAP32[$777 >> 2] | 0;
      do if (($775 + 1 | 0) >>> 0 > $778 >>> 0) if ($778 >>> 0 > 1073741822) _lexerror($ls, 67216, 0); else {
       $781 = $778 << 1;
       $784 = _luaM_realloc_(HEAP32[$248 >> 2] | 0, HEAP32[$773 >> 2] | 0, $778, $781) | 0;
       HEAP32[$773 >> 2] = $784;
       HEAP32[$777 >> 2] = $781;
       $787 = HEAP32[$774 >> 2] | 0;
       $789 = $784;
       break;
      } else {
       $787 = $775;
       $789 = HEAP32[$773 >> 2] | 0;
      } while (0);
      HEAP32[$774 >> 2] = $787 + 1;
      HEAP8[$789 + $787 >> 0] = $771;
      $790 = HEAP32[$3 >> 2] | 0;
      $791 = HEAP32[$790 >> 2] | 0;
      HEAP32[$790 >> 2] = $791 + -1;
      if (!$791) $800 = _luaZ_fill($790) | 0; else {
       $794 = $790 + 4 | 0;
       $795 = HEAP32[$794 >> 2] | 0;
       HEAP32[$794 >> 2] = $795 + 1;
       $800 = HEAPU8[$795 >> 0] | 0;
      }
      HEAP32[$ls >> 2] = $800;
      _lexerror($ls, 67296, 293);
      break;
     }
    case 293:
     {
      _lexerror($ls, 67216, 0);
      break;
     }
    case 299:
     {
      _lexerror($ls, 67216, 0);
      break;
     }
    }
   } while (0);
   $862 = HEAP32[$0 >> 2] | 0;
   $863 = $862 + 4 | 0;
   $864 = HEAP32[$863 >> 2] | 0;
   $866 = $862 + 8 | 0;
   $867 = HEAP32[$866 >> 2] | 0;
   do if (($864 + 1 | 0) >>> 0 > $867 >>> 0) if ($867 >>> 0 > 1073741822) _lexerror($ls, 67216, 0); else {
    $870 = $867 << 1;
    $874 = _luaM_realloc_(HEAP32[$ls + 32 >> 2] | 0, HEAP32[$862 >> 2] | 0, $867, $870) | 0;
    HEAP32[$862 >> 2] = $874;
    HEAP32[$866 >> 2] = $870;
    $876 = HEAP32[$863 >> 2] | 0;
    $878 = $874;
    break;
   } else {
    $876 = $864;
    $878 = HEAP32[$862 >> 2] | 0;
   } while (0);
   HEAP32[$863 >> 2] = $876 + 1;
   HEAP8[$878 + $876 >> 0] = $231;
   $879 = HEAP32[$3 >> 2] | 0;
   $880 = HEAP32[$879 >> 2] | 0;
   HEAP32[$879 >> 2] = $880 + -1;
   if (!$880) $889 = _luaZ_fill($879) | 0; else {
    $883 = $879 + 4 | 0;
    $884 = HEAP32[$883 >> 2] | 0;
    HEAP32[$883 >> 2] = $884 + 1;
    $889 = HEAPU8[$884 >> 0] | 0;
   }
   HEAP32[$ls >> 2] = $889;
   $890 = HEAP32[$0 >> 2] | 0;
   $897 = HEAP32[$ls + 32 >> 2] | 0;
   $898 = _luaS_newlstr($897, (HEAP32[$890 >> 2] | 0) + 1 | 0, (HEAP32[$890 + 4 >> 2] | 0) + -2 | 0) | 0;
   $899 = $897 + 8 | 0;
   $900 = HEAP32[$899 >> 2] | 0;
   HEAP32[$899 >> 2] = $900 + 8;
   HEAP32[$900 >> 2] = $898;
   HEAP32[$900 + 4 >> 2] = HEAPU8[$898 + 4 >> 0] | 64;
   $911 = _luaH_set($897, HEAP32[$ls + 44 >> 2] | 0, (HEAP32[$899 >> 2] | 0) + -8 | 0) | 0;
   $912 = $911 + 4 | 0;
   if (!(HEAP32[$912 >> 2] | 0)) {
    HEAP32[$911 >> 2] = 1;
    HEAP32[$912 >> 2] = 1;
    if ((HEAP32[(HEAP32[$897 + 12 >> 2] | 0) + 12 >> 2] | 0) > 0) {
     _luaC_step($897);
     $ts$0$i$i = $898;
    } else $ts$0$i$i = $898;
   } else $ts$0$i$i = HEAP32[$911 + 8 >> 2] | 0;
   HEAP32[$899 >> 2] = (HEAP32[$899 >> 2] | 0) + -8;
   HEAP32[$seminfo >> 2] = $ts$0$i$i;
   $$0 = 293;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 318:
  {
   $924 = HEAP32[$0 >> 2] | 0;
   $925 = $924 + 4 | 0;
   $926 = HEAP32[$925 >> 2] | 0;
   $928 = $924 + 8 | 0;
   $929 = HEAP32[$928 >> 2] | 0;
   do if (($926 + 1 | 0) >>> 0 > $929 >>> 0) if ($929 >>> 0 > 1073741822) _lexerror($ls, 67216, 0); else {
    $932 = $929 << 1;
    $936 = _luaM_realloc_(HEAP32[$ls + 32 >> 2] | 0, HEAP32[$924 >> 2] | 0, $929, $932) | 0;
    HEAP32[$924 >> 2] = $936;
    HEAP32[$928 >> 2] = $932;
    $938 = HEAP32[$925 >> 2] | 0;
    $940 = $936;
    break;
   } else {
    $938 = $926;
    $940 = HEAP32[$924 >> 2] | 0;
   } while (0);
   HEAP32[$925 >> 2] = $938 + 1;
   HEAP8[$940 + $938 >> 0] = 46;
   $941 = HEAP32[$3 >> 2] | 0;
   $942 = HEAP32[$941 >> 2] | 0;
   HEAP32[$941 >> 2] = $942 + -1;
   if (!$942) $951 = _luaZ_fill($941) | 0; else {
    $945 = $941 + 4 | 0;
    $946 = HEAP32[$945 >> 2] | 0;
    HEAP32[$945 >> 2] = $946 + 1;
    $951 = HEAPU8[$946 >> 0] | 0;
   }
   HEAP32[$ls >> 2] = $951;
   if (($951 | 0) != 46) {
    if (!(HEAP8[$951 + 65881 >> 0] & 2)) {
     $$0 = 46;
     STACKTOP = sp;
     return $$0 | 0;
    }
    $$0 = _read_numeral($ls, $seminfo) | 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $953 = HEAP32[$3 >> 2] | 0;
   $954 = HEAP32[$953 >> 2] | 0;
   HEAP32[$953 >> 2] = $954 + -1;
   if (!$954) $963 = _luaZ_fill($953) | 0; else {
    $957 = $953 + 4 | 0;
    $958 = HEAP32[$957 >> 2] | 0;
    HEAP32[$957 >> 2] = $958 + 1;
    $963 = HEAPU8[$958 >> 0] | 0;
   }
   HEAP32[$ls >> 2] = $963;
   if (($963 | 0) != 46) {
    $$0 = 280;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $965 = HEAP32[$3 >> 2] | 0;
   $966 = HEAP32[$965 >> 2] | 0;
   HEAP32[$965 >> 2] = $966 + -1;
   if (!$966) $975 = _luaZ_fill($965) | 0; else {
    $969 = $965 + 4 | 0;
    $970 = HEAP32[$969 >> 2] | 0;
    HEAP32[$969 >> 2] = $970 + 1;
    $975 = HEAPU8[$970 >> 0] | 0;
   }
   HEAP32[$ls >> 2] = $975;
   $$0 = 281;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 337:
  {
   $$0 = _read_numeral($ls, $seminfo) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 338:
  {
   if (!(HEAP8[$4 + 65881 >> 0] & 1)) {
    $1062 = HEAP32[$3 >> 2] | 0;
    $1063 = HEAP32[$1062 >> 2] | 0;
    HEAP32[$1062 >> 2] = $1063 + -1;
    if (!$1063) $1072 = _luaZ_fill($1062) | 0; else {
     $1066 = $1062 + 4 | 0;
     $1067 = HEAP32[$1066 >> 2] | 0;
     HEAP32[$1066 >> 2] = $1067 + 1;
     $1072 = HEAPU8[$1067 >> 0] | 0;
    }
    HEAP32[$ls >> 2] = $1072;
    $$0 = $4;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $988 = $ls + 32 | 0;
   $1002 = $4;
   while (1) {
    $989 = HEAP32[$0 >> 2] | 0;
    $990 = $989 + 4 | 0;
    $991 = HEAP32[$990 >> 2] | 0;
    $993 = $989 + 8 | 0;
    $994 = HEAP32[$993 >> 2] | 0;
    if (($991 + 1 | 0) >>> 0 > $994 >>> 0) {
     if ($994 >>> 0 > 1073741822) {
      label = 343;
      break;
     }
     $997 = $994 << 1;
     $1000 = _luaM_realloc_(HEAP32[$988 >> 2] | 0, HEAP32[$989 >> 2] | 0, $994, $997) | 0;
     HEAP32[$989 >> 2] = $1000;
     HEAP32[$993 >> 2] = $997;
     $1004 = HEAP32[$990 >> 2] | 0;
     $1006 = $1000;
    } else {
     $1004 = $991;
     $1006 = HEAP32[$989 >> 2] | 0;
    }
    HEAP32[$990 >> 2] = $1004 + 1;
    HEAP8[$1006 + $1004 >> 0] = $1002;
    $1007 = HEAP32[$3 >> 2] | 0;
    $1008 = HEAP32[$1007 >> 2] | 0;
    HEAP32[$1007 >> 2] = $1008 + -1;
    if (!$1008) $1017 = _luaZ_fill($1007) | 0; else {
     $1011 = $1007 + 4 | 0;
     $1012 = HEAP32[$1011 >> 2] | 0;
     HEAP32[$1011 >> 2] = $1012 + 1;
     $1017 = HEAPU8[$1012 >> 0] | 0;
    }
    HEAP32[$ls >> 2] = $1017;
    if (!(HEAP8[$1017 + 65881 >> 0] & 3)) break; else $1002 = $1017;
   }
   if ((label | 0) == 343) _lexerror($ls, 67216, 0);
   $1023 = HEAP32[$0 >> 2] | 0;
   $1027 = HEAP32[$988 >> 2] | 0;
   $1028 = _luaS_newlstr($1027, HEAP32[$1023 >> 2] | 0, HEAP32[$1023 + 4 >> 2] | 0) | 0;
   $1029 = $1027 + 8 | 0;
   $1030 = HEAP32[$1029 >> 2] | 0;
   HEAP32[$1029 >> 2] = $1030 + 8;
   HEAP32[$1030 >> 2] = $1028;
   HEAP32[$1030 + 4 >> 2] = HEAPU8[$1028 + 4 >> 0] | 64;
   $1041 = _luaH_set($1027, HEAP32[$ls + 44 >> 2] | 0, (HEAP32[$1029 >> 2] | 0) + -8 | 0) | 0;
   $1042 = $1041 + 4 | 0;
   if (!(HEAP32[$1042 >> 2] | 0)) {
    HEAP32[$1041 >> 2] = 1;
    HEAP32[$1042 >> 2] = 1;
    if ((HEAP32[(HEAP32[$1027 + 12 >> 2] | 0) + 12 >> 2] | 0) > 0) {
     _luaC_step($1027);
     $ts$0$i = $1028;
    } else $ts$0$i = $1028;
   } else $ts$0$i = HEAP32[$1041 + 8 >> 2] | 0;
   HEAP32[$1029 >> 2] = (HEAP32[$1029 >> 2] | 0) + -8;
   HEAP32[$seminfo >> 2] = $ts$0$i;
   if ((HEAP8[$ts$0$i + 4 >> 0] | 0) != 4) {
    $$0 = 292;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $1058 = HEAP8[$ts$0$i + 6 >> 0] | 0;
   if (!($1058 << 24 >> 24)) {
    $$0 = 292;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $$0 = $1058 & 255 | 256;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 360:
  {
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 return 0;
}
function _malloc($bytes) {
 $bytes = $bytes | 0;
 var $$lcssa = 0, $$lcssa148 = 0, $$lcssa152 = 0, $$lcssa153 = 0, $$lcssa154 = 0, $$lcssa156 = 0, $$lcssa159 = 0, $$lcssa161 = 0, $$lcssa163 = 0, $$lcssa165 = 0, $$lcssa167 = 0, $$lcssa169 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi59$i$iZ2D = 0, $$pre$phiZ2D = 0, $$rsize$3$i = 0, $$sum$i19$i = 0, $$sum2$i21$i = 0, $$sum3132$i$i = 0, $$sum67$i$i = 0, $100 = 0, $1000 = 0, $1002 = 0, $1005 = 0, $1010 = 0, $1016 = 0, $1019 = 0, $1020 = 0, $1027 = 0, $1036 = 0, $1039 = 0, $1044 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $106 = 0, $1060 = 0, $1062 = 0, $1063 = 0, $110 = 0, $112 = 0, $113 = 0, $115 = 0, $117 = 0, $119 = 0, $12 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $13 = 0, $132 = 0, $138 = 0, $14 = 0, $141 = 0, $144 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $151 = 0, $154 = 0, $156 = 0, $159 = 0, $16 = 0, $161 = 0, $164 = 0, $167 = 0, $168 = 0, $17 = 0, $170 = 0, $171 = 0, $173 = 0, $174 = 0, $176 = 0, $177 = 0, $18 = 0, $182 = 0, $183 = 0, $192 = 0, $197 = 0, $201 = 0, $207 = 0, $214 = 0, $217 = 0, $225 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $236 = 0, $237 = 0, $245 = 0, $246 = 0, $247 = 0, $249 = 0, $25 = 0, $250 = 0, $255 = 0, $256 = 0, $259 = 0, $261 = 0, $264 = 0, $269 = 0, $276 = 0, $28 = 0, $282 = 0, $285 = 0, $286 = 0, $290 = 0, $300 = 0, $303 = 0, $307 = 0, $309 = 0, $31 = 0, $310 = 0, $312 = 0, $314 = 0, $316 = 0, $318 = 0, $320 = 0, $322 = 0, $324 = 0, $334 = 0, $335 = 0, $337 = 0, $34 = 0, $346 = 0, $348 = 0, $351 = 0, $353 = 0, $356 = 0, $358 = 0, $361 = 0, $364 = 0, $365 = 0, $367 = 0, $368 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $379 = 0, $38 = 0, $380 = 0, $389 = 0, $394 = 0, $398 = 0, $4 = 0, $404 = 0, $41 = 0, $411 = 0, $414 = 0, $422 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $431 = 0, $432 = 0, $438 = 0, $44 = 0, $443 = 0, $444 = 0, $447 = 0, $449 = 0, $452 = 0, $457 = 0, $46 = 0, $463 = 0, $467 = 0, $468 = 0, $47 = 0, $475 = 0, $484 = 0, $487 = 0, $49 = 0, $492 = 0, $499 = 0, $5 = 0, $500 = 0, $501 = 0, $509 = 0, $51 = 0, $511 = 0, $512 = 0, $522 = 0, $526 = 0, $528 = 0, $529 = 0, $53 = 0, $538 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $552 = 0, $554 = 0, $555 = 0, $561 = 0, $563 = 0, $565 = 0, $57 = 0, $572 = 0, $574 = 0, $575 = 0, $576 = 0, $584 = 0, $585 = 0, $588 = 0, $59 = 0, $592 = 0, $596 = 0, $598 = 0, $6 = 0, $604 = 0, $608 = 0, $61 = 0, $612 = 0, $621 = 0, $622 = 0, $628 = 0, $630 = 0, $632 = 0, $635 = 0, $637 = 0, $64 = 0, $641 = 0, $642 = 0, $648 = 0, $65 = 0, $654 = 0, $655 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $67 = 0, $676 = 0, $678 = 0, $68 = 0, $684 = 0, $685 = 0, $69 = 0, $690 = 0, $692 = 0, $7 = 0, $70 = 0, $702 = 0, $706 = 0, $712 = 0, $714 = 0, $719 = 0, $720 = 0, $724 = 0, $725 = 0, $730 = 0, $736 = 0, $741 = 0, $744 = 0, $745 = 0, $748 = 0, $750 = 0, $752 = 0, $755 = 0, $766 = 0, $77 = 0, $771 = 0, $773 = 0, $776 = 0, $778 = 0, $781 = 0, $784 = 0, $785 = 0, $787 = 0, $788 = 0, $790 = 0, $791 = 0, $793 = 0, $794 = 0, $799 = 0, $80 = 0, $800 = 0, $809 = 0, $81 = 0, $814 = 0, $818 = 0, $824 = 0, $832 = 0, $838 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $847 = 0, $848 = 0, $854 = 0, $859 = 0, $860 = 0, $863 = 0, $865 = 0, $868 = 0, $873 = 0, $879 = 0, $88 = 0, $883 = 0, $884 = 0, $891 = 0, $90 = 0, $900 = 0, $903 = 0, $908 = 0, $91 = 0, $915 = 0, $916 = 0, $917 = 0, $92 = 0, $925 = 0, $928 = 0, $929 = 0, $93 = 0, $934 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $943 = 0, $944 = 0, $947 = 0, $95 = 0, $953 = 0, $954 = 0, $959 = 0, $960 = 0, $964 = 0, $970 = 0, $975 = 0, $977 = 0, $978 = 0, $979 = 0, $980 = 0, $984 = 0, $985 = 0, $99 = 0, $991 = 0, $996 = 0, $997 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$08$i$i = 0, $K8$053$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0, $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$052$i$i = 0, $T$052$i$i$lcssa = 0, $T$07$i$i = 0, $T$07$i$i$lcssa = 0, $br$0$ph$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $oldfirst$0$i$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$082$i = 0, $sp$082$i$lcssa = 0, $sp$181$i = 0, $sp$181$i$lcssa = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$230$i = 0, $tbase$253$i = 0, $tsize$0313843$i = 0, $tsize$1$i = 0, $tsize$252$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$332$i = 0, label = 0, $964$looptemp = 0;
 do if ($bytes >>> 0 < 245) {
  if ($bytes >>> 0 < 11) $5 = 16; else $5 = $bytes + 11 & -8;
  $4 = $5 >>> 3;
  $6 = HEAP32[26666] | 0;
  $7 = $6 >>> $4;
  if ($7 & 3) {
   $12 = ($7 & 1 ^ 1) + $4 | 0;
   $13 = $12 << 1;
   $14 = 106704 + ($13 << 2) | 0;
   $15 = 106704 + ($13 + 2 << 2) | 0;
   $16 = HEAP32[$15 >> 2] | 0;
   $17 = $16 + 8 | 0;
   $18 = HEAP32[$17 >> 2] | 0;
   do if (($14 | 0) == ($18 | 0)) HEAP32[26666] = $6 & ~(1 << $12); else {
    if ($18 >>> 0 < (HEAP32[26670] | 0) >>> 0) _abort();
    $25 = $18 + 12 | 0;
    if ((HEAP32[$25 >> 2] | 0) == ($16 | 0)) {
     HEAP32[$25 >> 2] = $14;
     HEAP32[$15 >> 2] = $18;
     break;
    } else _abort();
   } while (0);
   $28 = $12 << 3;
   HEAP32[$16 + 4 >> 2] = $28 | 3;
   $31 = $16 + ($28 | 4) | 0;
   HEAP32[$31 >> 2] = HEAP32[$31 >> 2] | 1;
   $mem$0 = $17;
   return $mem$0 | 0;
  }
  $34 = HEAP32[26668] | 0;
  if ($5 >>> 0 > $34 >>> 0) {
   if ($7) {
    $38 = 2 << $4;
    $41 = $7 << $4 & ($38 | 0 - $38);
    $44 = ($41 & 0 - $41) + -1 | 0;
    $46 = $44 >>> 12 & 16;
    $47 = $44 >>> $46;
    $49 = $47 >>> 5 & 8;
    $51 = $47 >>> $49;
    $53 = $51 >>> 2 & 4;
    $55 = $51 >>> $53;
    $57 = $55 >>> 1 & 2;
    $59 = $55 >>> $57;
    $61 = $59 >>> 1 & 1;
    $64 = ($49 | $46 | $53 | $57 | $61) + ($59 >>> $61) | 0;
    $65 = $64 << 1;
    $66 = 106704 + ($65 << 2) | 0;
    $67 = 106704 + ($65 + 2 << 2) | 0;
    $68 = HEAP32[$67 >> 2] | 0;
    $69 = $68 + 8 | 0;
    $70 = HEAP32[$69 >> 2] | 0;
    do if (($66 | 0) == ($70 | 0)) {
     HEAP32[26666] = $6 & ~(1 << $64);
     $88 = $34;
    } else {
     if ($70 >>> 0 < (HEAP32[26670] | 0) >>> 0) _abort();
     $77 = $70 + 12 | 0;
     if ((HEAP32[$77 >> 2] | 0) == ($68 | 0)) {
      HEAP32[$77 >> 2] = $66;
      HEAP32[$67 >> 2] = $70;
      $88 = HEAP32[26668] | 0;
      break;
     } else _abort();
    } while (0);
    $80 = $64 << 3;
    $81 = $80 - $5 | 0;
    HEAP32[$68 + 4 >> 2] = $5 | 3;
    $84 = $68 + $5 | 0;
    HEAP32[$68 + ($5 | 4) >> 2] = $81 | 1;
    HEAP32[$68 + $80 >> 2] = $81;
    if ($88) {
     $90 = HEAP32[26671] | 0;
     $91 = $88 >>> 3;
     $92 = $91 << 1;
     $93 = 106704 + ($92 << 2) | 0;
     $94 = HEAP32[26666] | 0;
     $95 = 1 << $91;
     if (!($94 & $95)) {
      HEAP32[26666] = $94 | $95;
      $$pre$phiZ2D = 106704 + ($92 + 2 << 2) | 0;
      $F4$0 = $93;
     } else {
      $99 = 106704 + ($92 + 2 << 2) | 0;
      $100 = HEAP32[$99 >> 2] | 0;
      if ($100 >>> 0 < (HEAP32[26670] | 0) >>> 0) _abort(); else {
       $$pre$phiZ2D = $99;
       $F4$0 = $100;
      }
     }
     HEAP32[$$pre$phiZ2D >> 2] = $90;
     HEAP32[$F4$0 + 12 >> 2] = $90;
     HEAP32[$90 + 8 >> 2] = $F4$0;
     HEAP32[$90 + 12 >> 2] = $93;
    }
    HEAP32[26668] = $81;
    HEAP32[26671] = $84;
    $mem$0 = $69;
    return $mem$0 | 0;
   }
   $106 = HEAP32[26667] | 0;
   if (!$106) $nb$0 = $5; else {
    $110 = ($106 & 0 - $106) + -1 | 0;
    $112 = $110 >>> 12 & 16;
    $113 = $110 >>> $112;
    $115 = $113 >>> 5 & 8;
    $117 = $113 >>> $115;
    $119 = $117 >>> 2 & 4;
    $121 = $117 >>> $119;
    $123 = $121 >>> 1 & 2;
    $125 = $121 >>> $123;
    $127 = $125 >>> 1 & 1;
    $132 = HEAP32[106968 + (($115 | $112 | $119 | $123 | $127) + ($125 >>> $127) << 2) >> 2] | 0;
    $rsize$0$i = (HEAP32[$132 + 4 >> 2] & -8) - $5 | 0;
    $t$0$i = $132;
    $v$0$i = $132;
    while (1) {
     $138 = HEAP32[$t$0$i + 16 >> 2] | 0;
     if (!$138) {
      $141 = HEAP32[$t$0$i + 20 >> 2] | 0;
      if (!$141) {
       $rsize$0$i$lcssa = $rsize$0$i;
       $v$0$i$lcssa = $v$0$i;
       break;
      } else $144 = $141;
     } else $144 = $138;
     $147 = (HEAP32[$144 + 4 >> 2] & -8) - $5 | 0;
     $148 = $147 >>> 0 < $rsize$0$i >>> 0;
     $rsize$0$i = $148 ? $147 : $rsize$0$i;
     $t$0$i = $144;
     $v$0$i = $148 ? $144 : $v$0$i;
    }
    $149 = HEAP32[26670] | 0;
    if ($v$0$i$lcssa >>> 0 < $149 >>> 0) _abort();
    $151 = $v$0$i$lcssa + $5 | 0;
    if ($v$0$i$lcssa >>> 0 >= $151 >>> 0) _abort();
    $154 = HEAP32[$v$0$i$lcssa + 24 >> 2] | 0;
    $156 = HEAP32[$v$0$i$lcssa + 12 >> 2] | 0;
    do if (($156 | 0) == ($v$0$i$lcssa | 0)) {
     $167 = $v$0$i$lcssa + 20 | 0;
     $168 = HEAP32[$167 >> 2] | 0;
     if (!$168) {
      $170 = $v$0$i$lcssa + 16 | 0;
      $171 = HEAP32[$170 >> 2] | 0;
      if (!$171) {
       $R$1$i = 0;
       break;
      } else {
       $R$0$i = $171;
       $RP$0$i = $170;
      }
     } else {
      $R$0$i = $168;
      $RP$0$i = $167;
     }
     while (1) {
      $173 = $R$0$i + 20 | 0;
      $174 = HEAP32[$173 >> 2] | 0;
      if ($174) {
       $R$0$i = $174;
       $RP$0$i = $173;
       continue;
      }
      $176 = $R$0$i + 16 | 0;
      $177 = HEAP32[$176 >> 2] | 0;
      if (!$177) {
       $R$0$i$lcssa = $R$0$i;
       $RP$0$i$lcssa = $RP$0$i;
       break;
      } else {
       $R$0$i = $177;
       $RP$0$i = $176;
      }
     }
     if ($RP$0$i$lcssa >>> 0 < $149 >>> 0) _abort(); else {
      HEAP32[$RP$0$i$lcssa >> 2] = 0;
      $R$1$i = $R$0$i$lcssa;
      break;
     }
    } else {
     $159 = HEAP32[$v$0$i$lcssa + 8 >> 2] | 0;
     if ($159 >>> 0 < $149 >>> 0) _abort();
     $161 = $159 + 12 | 0;
     if ((HEAP32[$161 >> 2] | 0) != ($v$0$i$lcssa | 0)) _abort();
     $164 = $156 + 8 | 0;
     if ((HEAP32[$164 >> 2] | 0) == ($v$0$i$lcssa | 0)) {
      HEAP32[$161 >> 2] = $156;
      HEAP32[$164 >> 2] = $159;
      $R$1$i = $156;
      break;
     } else _abort();
    } while (0);
    do if ($154) {
     $182 = HEAP32[$v$0$i$lcssa + 28 >> 2] | 0;
     $183 = 106968 + ($182 << 2) | 0;
     if (($v$0$i$lcssa | 0) == (HEAP32[$183 >> 2] | 0)) {
      HEAP32[$183 >> 2] = $R$1$i;
      if (!$R$1$i) {
       HEAP32[26667] = HEAP32[26667] & ~(1 << $182);
       break;
      }
     } else {
      if ($154 >>> 0 < (HEAP32[26670] | 0) >>> 0) _abort();
      $192 = $154 + 16 | 0;
      if ((HEAP32[$192 >> 2] | 0) == ($v$0$i$lcssa | 0)) HEAP32[$192 >> 2] = $R$1$i; else HEAP32[$154 + 20 >> 2] = $R$1$i;
      if (!$R$1$i) break;
     }
     $197 = HEAP32[26670] | 0;
     if ($R$1$i >>> 0 < $197 >>> 0) _abort();
     HEAP32[$R$1$i + 24 >> 2] = $154;
     $201 = HEAP32[$v$0$i$lcssa + 16 >> 2] | 0;
     do if ($201) if ($201 >>> 0 < $197 >>> 0) _abort(); else {
      HEAP32[$R$1$i + 16 >> 2] = $201;
      HEAP32[$201 + 24 >> 2] = $R$1$i;
      break;
     } while (0);
     $207 = HEAP32[$v$0$i$lcssa + 20 >> 2] | 0;
     if ($207) if ($207 >>> 0 < (HEAP32[26670] | 0) >>> 0) _abort(); else {
      HEAP32[$R$1$i + 20 >> 2] = $207;
      HEAP32[$207 + 24 >> 2] = $R$1$i;
      break;
     }
    } while (0);
    if ($rsize$0$i$lcssa >>> 0 < 16) {
     $214 = $rsize$0$i$lcssa + $5 | 0;
     HEAP32[$v$0$i$lcssa + 4 >> 2] = $214 | 3;
     $217 = $v$0$i$lcssa + ($214 + 4) | 0;
     HEAP32[$217 >> 2] = HEAP32[$217 >> 2] | 1;
    } else {
     HEAP32[$v$0$i$lcssa + 4 >> 2] = $5 | 3;
     HEAP32[$v$0$i$lcssa + ($5 | 4) >> 2] = $rsize$0$i$lcssa | 1;
     HEAP32[$v$0$i$lcssa + ($rsize$0$i$lcssa + $5) >> 2] = $rsize$0$i$lcssa;
     $225 = HEAP32[26668] | 0;
     if ($225) {
      $227 = HEAP32[26671] | 0;
      $228 = $225 >>> 3;
      $229 = $228 << 1;
      $230 = 106704 + ($229 << 2) | 0;
      $231 = HEAP32[26666] | 0;
      $232 = 1 << $228;
      if (!($231 & $232)) {
       HEAP32[26666] = $231 | $232;
       $$pre$phi$iZ2D = 106704 + ($229 + 2 << 2) | 0;
       $F1$0$i = $230;
      } else {
       $236 = 106704 + ($229 + 2 << 2) | 0;
       $237 = HEAP32[$236 >> 2] | 0;
       if ($237 >>> 0 < (HEAP32[26670] | 0) >>> 0) _abort(); else {
        $$pre$phi$iZ2D = $236;
        $F1$0$i = $237;
       }
      }
      HEAP32[$$pre$phi$iZ2D >> 2] = $227;
      HEAP32[$F1$0$i + 12 >> 2] = $227;
      HEAP32[$227 + 8 >> 2] = $F1$0$i;
      HEAP32[$227 + 12 >> 2] = $230;
     }
     HEAP32[26668] = $rsize$0$i$lcssa;
     HEAP32[26671] = $151;
    }
    $mem$0 = $v$0$i$lcssa + 8 | 0;
    return $mem$0 | 0;
   }
  } else $nb$0 = $5;
 } else if ($bytes >>> 0 > 4294967231) $nb$0 = -1; else {
  $245 = $bytes + 11 | 0;
  $246 = $245 & -8;
  $247 = HEAP32[26667] | 0;
  if (!$247) $nb$0 = $246; else {
   $249 = 0 - $246 | 0;
   $250 = $245 >>> 8;
   if (!$250) $idx$0$i = 0; else if ($246 >>> 0 > 16777215) $idx$0$i = 31; else {
    $255 = ($250 + 1048320 | 0) >>> 16 & 8;
    $256 = $250 << $255;
    $259 = ($256 + 520192 | 0) >>> 16 & 4;
    $261 = $256 << $259;
    $264 = ($261 + 245760 | 0) >>> 16 & 2;
    $269 = 14 - ($259 | $255 | $264) + ($261 << $264 >>> 15) | 0;
    $idx$0$i = $246 >>> ($269 + 7 | 0) & 1 | $269 << 1;
   }
   $276 = HEAP32[106968 + ($idx$0$i << 2) >> 2] | 0;
   L126 : do if (!$276) {
    $rsize$2$i = $249;
    $t$1$i = 0;
    $v$2$i = 0;
    label = 90;
   } else {
    if (($idx$0$i | 0) == 31) $282 = 0; else $282 = 25 - ($idx$0$i >>> 1) | 0;
    $rsize$0$i15 = $249;
    $rst$0$i = 0;
    $sizebits$0$i = $246 << $282;
    $t$0$i14 = $276;
    $v$0$i16 = 0;
    while (1) {
     $285 = HEAP32[$t$0$i14 + 4 >> 2] & -8;
     $286 = $285 - $246 | 0;
     if ($286 >>> 0 < $rsize$0$i15 >>> 0) if (($285 | 0) == ($246 | 0)) {
      $rsize$331$i = $286;
      $t$230$i = $t$0$i14;
      $v$332$i = $t$0$i14;
      label = 94;
      break L126;
     } else {
      $rsize$1$i = $286;
      $v$1$i = $t$0$i14;
     } else {
      $rsize$1$i = $rsize$0$i15;
      $v$1$i = $v$0$i16;
     }
     $290 = HEAP32[$t$0$i14 + 20 >> 2] | 0;
     $t$0$i14 = HEAP32[$t$0$i14 + ($sizebits$0$i >>> 31 << 2) + 16 >> 2] | 0;
     $rst$1$i = ($290 | 0) == 0 | ($290 | 0) == ($t$0$i14 | 0) ? $rst$0$i : $290;
     if (!$t$0$i14) {
      $rsize$2$i = $rsize$1$i;
      $t$1$i = $rst$1$i;
      $v$2$i = $v$1$i;
      label = 90;
      break;
     } else {
      $rsize$0$i15 = $rsize$1$i;
      $rst$0$i = $rst$1$i;
      $sizebits$0$i = $sizebits$0$i << 1;
      $v$0$i16 = $v$1$i;
     }
    }
   } while (0);
   if ((label | 0) == 90) {
    if (($t$1$i | 0) == 0 & ($v$2$i | 0) == 0) {
     $300 = 2 << $idx$0$i;
     $303 = $247 & ($300 | 0 - $300);
     if (!$303) {
      $nb$0 = $246;
      break;
     }
     $307 = ($303 & 0 - $303) + -1 | 0;
     $309 = $307 >>> 12 & 16;
     $310 = $307 >>> $309;
     $312 = $310 >>> 5 & 8;
     $314 = $310 >>> $312;
     $316 = $314 >>> 2 & 4;
     $318 = $314 >>> $316;
     $320 = $318 >>> 1 & 2;
     $322 = $318 >>> $320;
     $324 = $322 >>> 1 & 1;
     $t$2$ph$i = HEAP32[106968 + (($312 | $309 | $316 | $320 | $324) + ($322 >>> $324) << 2) >> 2] | 0;
    } else $t$2$ph$i = $t$1$i;
    if (!$t$2$ph$i) {
     $rsize$3$lcssa$i = $rsize$2$i;
     $v$3$lcssa$i = $v$2$i;
    } else {
     $rsize$331$i = $rsize$2$i;
     $t$230$i = $t$2$ph$i;
     $v$332$i = $v$2$i;
     label = 94;
    }
   }
   if ((label | 0) == 94) while (1) {
    label = 0;
    $334 = (HEAP32[$t$230$i + 4 >> 2] & -8) - $246 | 0;
    $335 = $334 >>> 0 < $rsize$331$i >>> 0;
    $$rsize$3$i = $335 ? $334 : $rsize$331$i;
    $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
    $337 = HEAP32[$t$230$i + 16 >> 2] | 0;
    if ($337) {
     $rsize$331$i = $$rsize$3$i;
     $t$230$i = $337;
     $v$332$i = $t$2$v$3$i;
     label = 94;
     continue;
    }
    $t$230$i = HEAP32[$t$230$i + 20 >> 2] | 0;
    if (!$t$230$i) {
     $rsize$3$lcssa$i = $$rsize$3$i;
     $v$3$lcssa$i = $t$2$v$3$i;
     break;
    } else {
     $rsize$331$i = $$rsize$3$i;
     $v$332$i = $t$2$v$3$i;
     label = 94;
    }
   }
   if (!$v$3$lcssa$i) $nb$0 = $246; else if ($rsize$3$lcssa$i >>> 0 < ((HEAP32[26668] | 0) - $246 | 0) >>> 0) {
    $346 = HEAP32[26670] | 0;
    if ($v$3$lcssa$i >>> 0 < $346 >>> 0) _abort();
    $348 = $v$3$lcssa$i + $246 | 0;
    if ($v$3$lcssa$i >>> 0 >= $348 >>> 0) _abort();
    $351 = HEAP32[$v$3$lcssa$i + 24 >> 2] | 0;
    $353 = HEAP32[$v$3$lcssa$i + 12 >> 2] | 0;
    do if (($353 | 0) == ($v$3$lcssa$i | 0)) {
     $364 = $v$3$lcssa$i + 20 | 0;
     $365 = HEAP32[$364 >> 2] | 0;
     if (!$365) {
      $367 = $v$3$lcssa$i + 16 | 0;
      $368 = HEAP32[$367 >> 2] | 0;
      if (!$368) {
       $R$1$i20 = 0;
       break;
      } else {
       $R$0$i18 = $368;
       $RP$0$i17 = $367;
      }
     } else {
      $R$0$i18 = $365;
      $RP$0$i17 = $364;
     }
     while (1) {
      $370 = $R$0$i18 + 20 | 0;
      $371 = HEAP32[$370 >> 2] | 0;
      if ($371) {
       $R$0$i18 = $371;
       $RP$0$i17 = $370;
       continue;
      }
      $373 = $R$0$i18 + 16 | 0;
      $374 = HEAP32[$373 >> 2] | 0;
      if (!$374) {
       $R$0$i18$lcssa = $R$0$i18;
       $RP$0$i17$lcssa = $RP$0$i17;
       break;
      } else {
       $R$0$i18 = $374;
       $RP$0$i17 = $373;
      }
     }
     if ($RP$0$i17$lcssa >>> 0 < $346 >>> 0) _abort(); else {
      HEAP32[$RP$0$i17$lcssa >> 2] = 0;
      $R$1$i20 = $R$0$i18$lcssa;
      break;
     }
    } else {
     $356 = HEAP32[$v$3$lcssa$i + 8 >> 2] | 0;
     if ($356 >>> 0 < $346 >>> 0) _abort();
     $358 = $356 + 12 | 0;
     if ((HEAP32[$358 >> 2] | 0) != ($v$3$lcssa$i | 0)) _abort();
     $361 = $353 + 8 | 0;
     if ((HEAP32[$361 >> 2] | 0) == ($v$3$lcssa$i | 0)) {
      HEAP32[$358 >> 2] = $353;
      HEAP32[$361 >> 2] = $356;
      $R$1$i20 = $353;
      break;
     } else _abort();
    } while (0);
    do if ($351) {
     $379 = HEAP32[$v$3$lcssa$i + 28 >> 2] | 0;
     $380 = 106968 + ($379 << 2) | 0;
     if (($v$3$lcssa$i | 0) == (HEAP32[$380 >> 2] | 0)) {
      HEAP32[$380 >> 2] = $R$1$i20;
      if (!$R$1$i20) {
       HEAP32[26667] = HEAP32[26667] & ~(1 << $379);
       break;
      }
     } else {
      if ($351 >>> 0 < (HEAP32[26670] | 0) >>> 0) _abort();
      $389 = $351 + 16 | 0;
      if ((HEAP32[$389 >> 2] | 0) == ($v$3$lcssa$i | 0)) HEAP32[$389 >> 2] = $R$1$i20; else HEAP32[$351 + 20 >> 2] = $R$1$i20;
      if (!$R$1$i20) break;
     }
     $394 = HEAP32[26670] | 0;
     if ($R$1$i20 >>> 0 < $394 >>> 0) _abort();
     HEAP32[$R$1$i20 + 24 >> 2] = $351;
     $398 = HEAP32[$v$3$lcssa$i + 16 >> 2] | 0;
     do if ($398) if ($398 >>> 0 < $394 >>> 0) _abort(); else {
      HEAP32[$R$1$i20 + 16 >> 2] = $398;
      HEAP32[$398 + 24 >> 2] = $R$1$i20;
      break;
     } while (0);
     $404 = HEAP32[$v$3$lcssa$i + 20 >> 2] | 0;
     if ($404) if ($404 >>> 0 < (HEAP32[26670] | 0) >>> 0) _abort(); else {
      HEAP32[$R$1$i20 + 20 >> 2] = $404;
      HEAP32[$404 + 24 >> 2] = $R$1$i20;
      break;
     }
    } while (0);
    L205 : do if ($rsize$3$lcssa$i >>> 0 < 16) {
     $411 = $rsize$3$lcssa$i + $246 | 0;
     HEAP32[$v$3$lcssa$i + 4 >> 2] = $411 | 3;
     $414 = $v$3$lcssa$i + ($411 + 4) | 0;
     HEAP32[$414 >> 2] = HEAP32[$414 >> 2] | 1;
    } else {
     HEAP32[$v$3$lcssa$i + 4 >> 2] = $246 | 3;
     HEAP32[$v$3$lcssa$i + ($246 | 4) >> 2] = $rsize$3$lcssa$i | 1;
     HEAP32[$v$3$lcssa$i + ($rsize$3$lcssa$i + $246) >> 2] = $rsize$3$lcssa$i;
     $422 = $rsize$3$lcssa$i >>> 3;
     if ($rsize$3$lcssa$i >>> 0 < 256) {
      $424 = $422 << 1;
      $425 = 106704 + ($424 << 2) | 0;
      $426 = HEAP32[26666] | 0;
      $427 = 1 << $422;
      if (!($426 & $427)) {
       HEAP32[26666] = $426 | $427;
       $$pre$phi$i26Z2D = 106704 + ($424 + 2 << 2) | 0;
       $F5$0$i = $425;
      } else {
       $431 = 106704 + ($424 + 2 << 2) | 0;
       $432 = HEAP32[$431 >> 2] | 0;
       if ($432 >>> 0 < (HEAP32[26670] | 0) >>> 0) _abort(); else {
        $$pre$phi$i26Z2D = $431;
        $F5$0$i = $432;
       }
      }
      HEAP32[$$pre$phi$i26Z2D >> 2] = $348;
      HEAP32[$F5$0$i + 12 >> 2] = $348;
      HEAP32[$v$3$lcssa$i + ($246 + 8) >> 2] = $F5$0$i;
      HEAP32[$v$3$lcssa$i + ($246 + 12) >> 2] = $425;
      break;
     }
     $438 = $rsize$3$lcssa$i >>> 8;
     if (!$438) $I7$0$i = 0; else if ($rsize$3$lcssa$i >>> 0 > 16777215) $I7$0$i = 31; else {
      $443 = ($438 + 1048320 | 0) >>> 16 & 8;
      $444 = $438 << $443;
      $447 = ($444 + 520192 | 0) >>> 16 & 4;
      $449 = $444 << $447;
      $452 = ($449 + 245760 | 0) >>> 16 & 2;
      $457 = 14 - ($447 | $443 | $452) + ($449 << $452 >>> 15) | 0;
      $I7$0$i = $rsize$3$lcssa$i >>> ($457 + 7 | 0) & 1 | $457 << 1;
     }
     $463 = 106968 + ($I7$0$i << 2) | 0;
     HEAP32[$v$3$lcssa$i + ($246 + 28) >> 2] = $I7$0$i;
     HEAP32[$v$3$lcssa$i + ($246 + 20) >> 2] = 0;
     HEAP32[$v$3$lcssa$i + ($246 + 16) >> 2] = 0;
     $467 = HEAP32[26667] | 0;
     $468 = 1 << $I7$0$i;
     if (!($467 & $468)) {
      HEAP32[26667] = $467 | $468;
      HEAP32[$463 >> 2] = $348;
      HEAP32[$v$3$lcssa$i + ($246 + 24) >> 2] = $463;
      HEAP32[$v$3$lcssa$i + ($246 + 12) >> 2] = $348;
      HEAP32[$v$3$lcssa$i + ($246 + 8) >> 2] = $348;
      break;
     }
     $475 = HEAP32[$463 >> 2] | 0;
     if (($I7$0$i | 0) == 31) $484 = 0; else $484 = 25 - ($I7$0$i >>> 1) | 0;
     L225 : do if ((HEAP32[$475 + 4 >> 2] & -8 | 0) == ($rsize$3$lcssa$i | 0)) $T$0$lcssa$i = $475; else {
      $K12$029$i = $rsize$3$lcssa$i << $484;
      $T$028$i = $475;
      while (1) {
       $492 = $T$028$i + ($K12$029$i >>> 31 << 2) + 16 | 0;
       $487 = HEAP32[$492 >> 2] | 0;
       if (!$487) {
        $$lcssa169 = $492;
        $T$028$i$lcssa = $T$028$i;
        break;
       }
       if ((HEAP32[$487 + 4 >> 2] & -8 | 0) == ($rsize$3$lcssa$i | 0)) {
        $T$0$lcssa$i = $487;
        break L225;
       } else {
        $K12$029$i = $K12$029$i << 1;
        $T$028$i = $487;
       }
      }
      if ($$lcssa169 >>> 0 < (HEAP32[26670] | 0) >>> 0) _abort(); else {
       HEAP32[$$lcssa169 >> 2] = $348;
       HEAP32[$v$3$lcssa$i + ($246 + 24) >> 2] = $T$028$i$lcssa;
       HEAP32[$v$3$lcssa$i + ($246 + 12) >> 2] = $348;
       HEAP32[$v$3$lcssa$i + ($246 + 8) >> 2] = $348;
       break L205;
      }
     } while (0);
     $499 = $T$0$lcssa$i + 8 | 0;
     $500 = HEAP32[$499 >> 2] | 0;
     $501 = HEAP32[26670] | 0;
     if ($T$0$lcssa$i >>> 0 >= $501 >>> 0 & $500 >>> 0 >= $501 >>> 0) {
      HEAP32[$500 + 12 >> 2] = $348;
      HEAP32[$499 >> 2] = $348;
      HEAP32[$v$3$lcssa$i + ($246 + 8) >> 2] = $500;
      HEAP32[$v$3$lcssa$i + ($246 + 12) >> 2] = $T$0$lcssa$i;
      HEAP32[$v$3$lcssa$i + ($246 + 24) >> 2] = 0;
      break;
     } else _abort();
    } while (0);
    $mem$0 = $v$3$lcssa$i + 8 | 0;
    return $mem$0 | 0;
   } else $nb$0 = $246;
  }
 } while (0);
 $509 = HEAP32[26668] | 0;
 if ($509 >>> 0 >= $nb$0 >>> 0) {
  $511 = $509 - $nb$0 | 0;
  $512 = HEAP32[26671] | 0;
  if ($511 >>> 0 > 15) {
   HEAP32[26671] = $512 + $nb$0;
   HEAP32[26668] = $511;
   HEAP32[$512 + ($nb$0 + 4) >> 2] = $511 | 1;
   HEAP32[$512 + $509 >> 2] = $511;
   HEAP32[$512 + 4 >> 2] = $nb$0 | 3;
  } else {
   HEAP32[26668] = 0;
   HEAP32[26671] = 0;
   HEAP32[$512 + 4 >> 2] = $509 | 3;
   $522 = $512 + ($509 + 4) | 0;
   HEAP32[$522 >> 2] = HEAP32[$522 >> 2] | 1;
  }
  $mem$0 = $512 + 8 | 0;
  return $mem$0 | 0;
 }
 $526 = HEAP32[26669] | 0;
 if ($526 >>> 0 > $nb$0 >>> 0) {
  $528 = $526 - $nb$0 | 0;
  HEAP32[26669] = $528;
  $529 = HEAP32[26672] | 0;
  HEAP32[26672] = $529 + $nb$0;
  HEAP32[$529 + ($nb$0 + 4) >> 2] = $528 | 1;
  HEAP32[$529 + 4 >> 2] = $nb$0 | 3;
  $mem$0 = $529 + 8 | 0;
  return $mem$0 | 0;
 }
 do if (!(HEAP32[26784] | 0)) {
  $538 = _sysconf(30) | 0;
  if (!($538 + -1 & $538)) {
   HEAP32[26786] = $538;
   HEAP32[26785] = $538;
   HEAP32[26787] = -1;
   HEAP32[26788] = -1;
   HEAP32[26789] = 0;
   HEAP32[26777] = 0;
   HEAP32[26784] = (_time(0) | 0) & -16 ^ 1431655768;
   break;
  } else _abort();
 } while (0);
 $545 = $nb$0 + 48 | 0;
 $546 = HEAP32[26786] | 0;
 $547 = $nb$0 + 47 | 0;
 $548 = $546 + $547 | 0;
 $549 = 0 - $546 | 0;
 $550 = $548 & $549;
 if ($550 >>> 0 <= $nb$0 >>> 0) {
  $mem$0 = 0;
  return $mem$0 | 0;
 }
 $552 = HEAP32[26776] | 0;
 if ($552) {
  $554 = HEAP32[26774] | 0;
  $555 = $554 + $550 | 0;
  if ($555 >>> 0 <= $554 >>> 0 | $555 >>> 0 > $552 >>> 0) {
   $mem$0 = 0;
   return $mem$0 | 0;
  }
 }
 L267 : do if (!(HEAP32[26777] & 4)) {
  $561 = HEAP32[26672] | 0;
  L269 : do if (!$561) label = 180; else {
   $sp$0$i$i = 107112 | 0;
   while (1) {
    $563 = HEAP32[$sp$0$i$i >> 2] | 0;
    if ($563 >>> 0 <= $561 >>> 0) {
     $565 = $sp$0$i$i + 4 | 0;
     if (($563 + (HEAP32[$565 >> 2] | 0) | 0) >>> 0 > $561 >>> 0) {
      $$lcssa165 = $sp$0$i$i;
      $$lcssa167 = $565;
      break;
     }
    }
    $sp$0$i$i = HEAP32[$sp$0$i$i + 8 >> 2] | 0;
    if (!$sp$0$i$i) {
     label = 180;
     break L269;
    }
   }
   $596 = $548 - (HEAP32[26669] | 0) & $549;
   if ($596 >>> 0 < 2147483647) {
    $598 = _sbrk($596 | 0) | 0;
    if (($598 | 0) == ((HEAP32[$$lcssa165 >> 2] | 0) + (HEAP32[$$lcssa167 >> 2] | 0) | 0)) if (($598 | 0) == (-1 | 0)) $tsize$0313843$i = $596; else {
     $tbase$253$i = $598;
     $tsize$252$i = $596;
     label = 200;
     break L267;
    } else {
     $br$0$ph$i = $598;
     $ssize$1$ph$i = $596;
     label = 190;
    }
   } else $tsize$0313843$i = 0;
  } while (0);
  do if ((label | 0) == 180) {
   $572 = _sbrk(0) | 0;
   if (($572 | 0) == (-1 | 0)) $tsize$0313843$i = 0; else {
    $574 = $572;
    $575 = HEAP32[26785] | 0;
    $576 = $575 + -1 | 0;
    if (!($576 & $574)) $ssize$0$i = $550; else $ssize$0$i = $550 - $574 + ($576 + $574 & 0 - $575) | 0;
    $584 = HEAP32[26774] | 0;
    $585 = $584 + $ssize$0$i | 0;
    if ($ssize$0$i >>> 0 > $nb$0 >>> 0 & $ssize$0$i >>> 0 < 2147483647) {
     $588 = HEAP32[26776] | 0;
     if ($588) if ($585 >>> 0 <= $584 >>> 0 | $585 >>> 0 > $588 >>> 0) {
      $tsize$0313843$i = 0;
      break;
     }
     $592 = _sbrk($ssize$0$i | 0) | 0;
     if (($592 | 0) == ($572 | 0)) {
      $tbase$253$i = $572;
      $tsize$252$i = $ssize$0$i;
      label = 200;
      break L267;
     } else {
      $br$0$ph$i = $592;
      $ssize$1$ph$i = $ssize$0$i;
      label = 190;
     }
    } else $tsize$0313843$i = 0;
   }
  } while (0);
  L289 : do if ((label | 0) == 190) {
   $604 = 0 - $ssize$1$ph$i | 0;
   do if ($545 >>> 0 > $ssize$1$ph$i >>> 0 & ($ssize$1$ph$i >>> 0 < 2147483647 & ($br$0$ph$i | 0) != (-1 | 0))) {
    $608 = HEAP32[26786] | 0;
    $612 = $547 - $ssize$1$ph$i + $608 & 0 - $608;
    if ($612 >>> 0 < 2147483647) if ((_sbrk($612 | 0) | 0) == (-1 | 0)) {
     _sbrk($604 | 0) | 0;
     $tsize$0313843$i = 0;
     break L289;
    } else {
     $ssize$2$i = $612 + $ssize$1$ph$i | 0;
     break;
    } else $ssize$2$i = $ssize$1$ph$i;
   } else $ssize$2$i = $ssize$1$ph$i; while (0);
   if (($br$0$ph$i | 0) == (-1 | 0)) $tsize$0313843$i = 0; else {
    $tbase$253$i = $br$0$ph$i;
    $tsize$252$i = $ssize$2$i;
    label = 200;
    break L267;
   }
  } while (0);
  HEAP32[26777] = HEAP32[26777] | 4;
  $tsize$1$i = $tsize$0313843$i;
  label = 197;
 } else {
  $tsize$1$i = 0;
  label = 197;
 } while (0);
 if ((label | 0) == 197) if ($550 >>> 0 < 2147483647) {
  $621 = _sbrk($550 | 0) | 0;
  $622 = _sbrk(0) | 0;
  if ($621 >>> 0 < $622 >>> 0 & (($621 | 0) != (-1 | 0) & ($622 | 0) != (-1 | 0))) {
   $628 = $622 - $621 | 0;
   $630 = $628 >>> 0 > ($nb$0 + 40 | 0) >>> 0;
   if ($630) {
    $tbase$253$i = $621;
    $tsize$252$i = $630 ? $628 : $tsize$1$i;
    label = 200;
   }
  }
 }
 if ((label | 0) == 200) {
  $632 = (HEAP32[26774] | 0) + $tsize$252$i | 0;
  HEAP32[26774] = $632;
  if ($632 >>> 0 > (HEAP32[26775] | 0) >>> 0) HEAP32[26775] = $632;
  $635 = HEAP32[26672] | 0;
  L308 : do if (!$635) {
   $637 = HEAP32[26670] | 0;
   if (($637 | 0) == 0 | $tbase$253$i >>> 0 < $637 >>> 0) HEAP32[26670] = $tbase$253$i;
   HEAP32[26778] = $tbase$253$i;
   HEAP32[26779] = $tsize$252$i;
   HEAP32[26781] = 0;
   HEAP32[26675] = HEAP32[26784];
   HEAP32[26674] = -1;
   $i$02$i$i = 0;
   do {
    $641 = $i$02$i$i << 1;
    $642 = 106704 + ($641 << 2) | 0;
    HEAP32[106704 + ($641 + 3 << 2) >> 2] = $642;
    HEAP32[106704 + ($641 + 2 << 2) >> 2] = $642;
    $i$02$i$i = $i$02$i$i + 1 | 0;
   } while (($i$02$i$i | 0) != 32);
   $648 = $tbase$253$i + 8 | 0;
   if (!($648 & 7)) $654 = 0; else $654 = 0 - $648 & 7;
   $655 = $tsize$252$i + -40 - $654 | 0;
   HEAP32[26672] = $tbase$253$i + $654;
   HEAP32[26669] = $655;
   HEAP32[$tbase$253$i + ($654 + 4) >> 2] = $655 | 1;
   HEAP32[$tbase$253$i + ($tsize$252$i + -36) >> 2] = 40;
   HEAP32[26673] = HEAP32[26788];
  } else {
   $sp$082$i = 107112 | 0;
   do {
    $660 = HEAP32[$sp$082$i >> 2] | 0;
    $661 = $sp$082$i + 4 | 0;
    $662 = HEAP32[$661 >> 2] | 0;
    if (($tbase$253$i | 0) == ($660 + $662 | 0)) {
     $$lcssa159 = $660;
     $$lcssa161 = $661;
     $$lcssa163 = $662;
     $sp$082$i$lcssa = $sp$082$i;
     label = 212;
     break;
    }
    $sp$082$i = HEAP32[$sp$082$i + 8 >> 2] | 0;
   } while (($sp$082$i | 0) != 0);
   if ((label | 0) == 212) if (!(HEAP32[$sp$082$i$lcssa + 12 >> 2] & 8)) if ($635 >>> 0 < $tbase$253$i >>> 0 & $635 >>> 0 >= $$lcssa159 >>> 0) {
    HEAP32[$$lcssa161 >> 2] = $$lcssa163 + $tsize$252$i;
    $676 = (HEAP32[26669] | 0) + $tsize$252$i | 0;
    $678 = $635 + 8 | 0;
    if (!($678 & 7)) $684 = 0; else $684 = 0 - $678 & 7;
    $685 = $676 - $684 | 0;
    HEAP32[26672] = $635 + $684;
    HEAP32[26669] = $685;
    HEAP32[$635 + ($684 + 4) >> 2] = $685 | 1;
    HEAP32[$635 + ($676 + 4) >> 2] = 40;
    HEAP32[26673] = HEAP32[26788];
    break;
   }
   $690 = HEAP32[26670] | 0;
   if ($tbase$253$i >>> 0 < $690 >>> 0) {
    HEAP32[26670] = $tbase$253$i;
    $755 = $tbase$253$i;
   } else $755 = $690;
   $692 = $tbase$253$i + $tsize$252$i | 0;
   $sp$181$i = 107112 | 0;
   while (1) {
    if ((HEAP32[$sp$181$i >> 2] | 0) == ($692 | 0)) {
     $$lcssa156 = $sp$181$i;
     $sp$181$i$lcssa = $sp$181$i;
     label = 222;
     break;
    }
    $sp$181$i = HEAP32[$sp$181$i + 8 >> 2] | 0;
    if (!$sp$181$i) {
     $sp$0$i$i$i = 107112 | 0;
     break;
    }
   }
   if ((label | 0) == 222) if (!(HEAP32[$sp$181$i$lcssa + 12 >> 2] & 8)) {
    HEAP32[$$lcssa156 >> 2] = $tbase$253$i;
    $702 = $sp$181$i$lcssa + 4 | 0;
    HEAP32[$702 >> 2] = (HEAP32[$702 >> 2] | 0) + $tsize$252$i;
    $706 = $tbase$253$i + 8 | 0;
    if (!($706 & 7)) $712 = 0; else $712 = 0 - $706 & 7;
    $714 = $tbase$253$i + ($tsize$252$i + 8) | 0;
    if (!($714 & 7)) $719 = 0; else $719 = 0 - $714 & 7;
    $720 = $tbase$253$i + ($719 + $tsize$252$i) | 0;
    $$sum$i19$i = $712 + $nb$0 | 0;
    $724 = $tbase$253$i + $$sum$i19$i | 0;
    $725 = $720 - ($tbase$253$i + $712) - $nb$0 | 0;
    HEAP32[$tbase$253$i + ($712 + 4) >> 2] = $nb$0 | 3;
    L345 : do if (($720 | 0) == ($635 | 0)) {
     $730 = (HEAP32[26669] | 0) + $725 | 0;
     HEAP32[26669] = $730;
     HEAP32[26672] = $724;
     HEAP32[$tbase$253$i + ($$sum$i19$i + 4) >> 2] = $730 | 1;
    } else {
     if (($720 | 0) == (HEAP32[26671] | 0)) {
      $736 = (HEAP32[26668] | 0) + $725 | 0;
      HEAP32[26668] = $736;
      HEAP32[26671] = $724;
      HEAP32[$tbase$253$i + ($$sum$i19$i + 4) >> 2] = $736 | 1;
      HEAP32[$tbase$253$i + ($736 + $$sum$i19$i) >> 2] = $736;
      break;
     }
     $$sum2$i21$i = $tsize$252$i + 4 | 0;
     $741 = HEAP32[$tbase$253$i + ($$sum2$i21$i + $719) >> 2] | 0;
     if (($741 & 3 | 0) == 1) {
      $744 = $741 & -8;
      $745 = $741 >>> 3;
      L353 : do if ($741 >>> 0 < 256) {
       $748 = HEAP32[$tbase$253$i + (($719 | 8) + $tsize$252$i) >> 2] | 0;
       $750 = HEAP32[$tbase$253$i + ($tsize$252$i + 12 + $719) >> 2] | 0;
       $752 = 106704 + ($745 << 1 << 2) | 0;
       do if (($748 | 0) != ($752 | 0)) {
        if ($748 >>> 0 < $755 >>> 0) _abort();
        if ((HEAP32[$748 + 12 >> 2] | 0) == ($720 | 0)) break;
        _abort();
       } while (0);
       if (($750 | 0) == ($748 | 0)) {
        HEAP32[26666] = HEAP32[26666] & ~(1 << $745);
        break;
       }
       do if (($750 | 0) == ($752 | 0)) $$pre$phi59$i$iZ2D = $750 + 8 | 0; else {
        if ($750 >>> 0 < $755 >>> 0) _abort();
        $766 = $750 + 8 | 0;
        if ((HEAP32[$766 >> 2] | 0) == ($720 | 0)) {
         $$pre$phi59$i$iZ2D = $766;
         break;
        }
        _abort();
       } while (0);
       HEAP32[$748 + 12 >> 2] = $750;
       HEAP32[$$pre$phi59$i$iZ2D >> 2] = $748;
      } else {
       $771 = HEAP32[$tbase$253$i + (($719 | 24) + $tsize$252$i) >> 2] | 0;
       $773 = HEAP32[$tbase$253$i + ($tsize$252$i + 12 + $719) >> 2] | 0;
       do if (($773 | 0) == ($720 | 0)) {
        $$sum67$i$i = $719 | 16;
        $784 = $tbase$253$i + ($$sum2$i21$i + $$sum67$i$i) | 0;
        $785 = HEAP32[$784 >> 2] | 0;
        if (!$785) {
         $787 = $tbase$253$i + ($$sum67$i$i + $tsize$252$i) | 0;
         $788 = HEAP32[$787 >> 2] | 0;
         if (!$788) {
          $R$1$i$i = 0;
          break;
         } else {
          $R$0$i$i = $788;
          $RP$0$i$i = $787;
         }
        } else {
         $R$0$i$i = $785;
         $RP$0$i$i = $784;
        }
        while (1) {
         $790 = $R$0$i$i + 20 | 0;
         $791 = HEAP32[$790 >> 2] | 0;
         if ($791) {
          $R$0$i$i = $791;
          $RP$0$i$i = $790;
          continue;
         }
         $793 = $R$0$i$i + 16 | 0;
         $794 = HEAP32[$793 >> 2] | 0;
         if (!$794) {
          $R$0$i$i$lcssa = $R$0$i$i;
          $RP$0$i$i$lcssa = $RP$0$i$i;
          break;
         } else {
          $R$0$i$i = $794;
          $RP$0$i$i = $793;
         }
        }
        if ($RP$0$i$i$lcssa >>> 0 < $755 >>> 0) _abort(); else {
         HEAP32[$RP$0$i$i$lcssa >> 2] = 0;
         $R$1$i$i = $R$0$i$i$lcssa;
         break;
        }
       } else {
        $776 = HEAP32[$tbase$253$i + (($719 | 8) + $tsize$252$i) >> 2] | 0;
        if ($776 >>> 0 < $755 >>> 0) _abort();
        $778 = $776 + 12 | 0;
        if ((HEAP32[$778 >> 2] | 0) != ($720 | 0)) _abort();
        $781 = $773 + 8 | 0;
        if ((HEAP32[$781 >> 2] | 0) == ($720 | 0)) {
         HEAP32[$778 >> 2] = $773;
         HEAP32[$781 >> 2] = $776;
         $R$1$i$i = $773;
         break;
        } else _abort();
       } while (0);
       if (!$771) break;
       $799 = HEAP32[$tbase$253$i + ($tsize$252$i + 28 + $719) >> 2] | 0;
       $800 = 106968 + ($799 << 2) | 0;
       do if (($720 | 0) == (HEAP32[$800 >> 2] | 0)) {
        HEAP32[$800 >> 2] = $R$1$i$i;
        if ($R$1$i$i) break;
        HEAP32[26667] = HEAP32[26667] & ~(1 << $799);
        break L353;
       } else {
        if ($771 >>> 0 < (HEAP32[26670] | 0) >>> 0) _abort();
        $809 = $771 + 16 | 0;
        if ((HEAP32[$809 >> 2] | 0) == ($720 | 0)) HEAP32[$809 >> 2] = $R$1$i$i; else HEAP32[$771 + 20 >> 2] = $R$1$i$i;
        if (!$R$1$i$i) break L353;
       } while (0);
       $814 = HEAP32[26670] | 0;
       if ($R$1$i$i >>> 0 < $814 >>> 0) _abort();
       HEAP32[$R$1$i$i + 24 >> 2] = $771;
       $$sum3132$i$i = $719 | 16;
       $818 = HEAP32[$tbase$253$i + ($$sum3132$i$i + $tsize$252$i) >> 2] | 0;
       do if ($818) if ($818 >>> 0 < $814 >>> 0) _abort(); else {
        HEAP32[$R$1$i$i + 16 >> 2] = $818;
        HEAP32[$818 + 24 >> 2] = $R$1$i$i;
        break;
       } while (0);
       $824 = HEAP32[$tbase$253$i + ($$sum2$i21$i + $$sum3132$i$i) >> 2] | 0;
       if (!$824) break;
       if ($824 >>> 0 < (HEAP32[26670] | 0) >>> 0) _abort(); else {
        HEAP32[$R$1$i$i + 20 >> 2] = $824;
        HEAP32[$824 + 24 >> 2] = $R$1$i$i;
        break;
       }
      } while (0);
      $oldfirst$0$i$i = $tbase$253$i + (($744 | $719) + $tsize$252$i) | 0;
      $qsize$0$i$i = $744 + $725 | 0;
     } else {
      $oldfirst$0$i$i = $720;
      $qsize$0$i$i = $725;
     }
     $832 = $oldfirst$0$i$i + 4 | 0;
     HEAP32[$832 >> 2] = HEAP32[$832 >> 2] & -2;
     HEAP32[$tbase$253$i + ($$sum$i19$i + 4) >> 2] = $qsize$0$i$i | 1;
     HEAP32[$tbase$253$i + ($qsize$0$i$i + $$sum$i19$i) >> 2] = $qsize$0$i$i;
     $838 = $qsize$0$i$i >>> 3;
     if ($qsize$0$i$i >>> 0 < 256) {
      $840 = $838 << 1;
      $841 = 106704 + ($840 << 2) | 0;
      $842 = HEAP32[26666] | 0;
      $843 = 1 << $838;
      do if (!($842 & $843)) {
       HEAP32[26666] = $842 | $843;
       $$pre$phi$i23$iZ2D = 106704 + ($840 + 2 << 2) | 0;
       $F4$0$i$i = $841;
      } else {
       $847 = 106704 + ($840 + 2 << 2) | 0;
       $848 = HEAP32[$847 >> 2] | 0;
       if ($848 >>> 0 >= (HEAP32[26670] | 0) >>> 0) {
        $$pre$phi$i23$iZ2D = $847;
        $F4$0$i$i = $848;
        break;
       }
       _abort();
      } while (0);
      HEAP32[$$pre$phi$i23$iZ2D >> 2] = $724;
      HEAP32[$F4$0$i$i + 12 >> 2] = $724;
      HEAP32[$tbase$253$i + ($$sum$i19$i + 8) >> 2] = $F4$0$i$i;
      HEAP32[$tbase$253$i + ($$sum$i19$i + 12) >> 2] = $841;
      break;
     }
     $854 = $qsize$0$i$i >>> 8;
     do if (!$854) $I7$0$i$i = 0; else {
      if ($qsize$0$i$i >>> 0 > 16777215) {
       $I7$0$i$i = 31;
       break;
      }
      $859 = ($854 + 1048320 | 0) >>> 16 & 8;
      $860 = $854 << $859;
      $863 = ($860 + 520192 | 0) >>> 16 & 4;
      $865 = $860 << $863;
      $868 = ($865 + 245760 | 0) >>> 16 & 2;
      $873 = 14 - ($863 | $859 | $868) + ($865 << $868 >>> 15) | 0;
      $I7$0$i$i = $qsize$0$i$i >>> ($873 + 7 | 0) & 1 | $873 << 1;
     } while (0);
     $879 = 106968 + ($I7$0$i$i << 2) | 0;
     HEAP32[$tbase$253$i + ($$sum$i19$i + 28) >> 2] = $I7$0$i$i;
     HEAP32[$tbase$253$i + ($$sum$i19$i + 20) >> 2] = 0;
     HEAP32[$tbase$253$i + ($$sum$i19$i + 16) >> 2] = 0;
     $883 = HEAP32[26667] | 0;
     $884 = 1 << $I7$0$i$i;
     if (!($883 & $884)) {
      HEAP32[26667] = $883 | $884;
      HEAP32[$879 >> 2] = $724;
      HEAP32[$tbase$253$i + ($$sum$i19$i + 24) >> 2] = $879;
      HEAP32[$tbase$253$i + ($$sum$i19$i + 12) >> 2] = $724;
      HEAP32[$tbase$253$i + ($$sum$i19$i + 8) >> 2] = $724;
      break;
     }
     $891 = HEAP32[$879 >> 2] | 0;
     if (($I7$0$i$i | 0) == 31) $900 = 0; else $900 = 25 - ($I7$0$i$i >>> 1) | 0;
     L442 : do if ((HEAP32[$891 + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) $T$0$lcssa$i25$i = $891; else {
      $K8$053$i$i = $qsize$0$i$i << $900;
      $T$052$i$i = $891;
      while (1) {
       $908 = $T$052$i$i + ($K8$053$i$i >>> 31 << 2) + 16 | 0;
       $903 = HEAP32[$908 >> 2] | 0;
       if (!$903) {
        $$lcssa = $908;
        $T$052$i$i$lcssa = $T$052$i$i;
        break;
       }
       if ((HEAP32[$903 + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) {
        $T$0$lcssa$i25$i = $903;
        break L442;
       } else {
        $K8$053$i$i = $K8$053$i$i << 1;
        $T$052$i$i = $903;
       }
      }
      if ($$lcssa >>> 0 < (HEAP32[26670] | 0) >>> 0) _abort(); else {
       HEAP32[$$lcssa >> 2] = $724;
       HEAP32[$tbase$253$i + ($$sum$i19$i + 24) >> 2] = $T$052$i$i$lcssa;
       HEAP32[$tbase$253$i + ($$sum$i19$i + 12) >> 2] = $724;
       HEAP32[$tbase$253$i + ($$sum$i19$i + 8) >> 2] = $724;
       break L345;
      }
     } while (0);
     $915 = $T$0$lcssa$i25$i + 8 | 0;
     $916 = HEAP32[$915 >> 2] | 0;
     $917 = HEAP32[26670] | 0;
     if ($T$0$lcssa$i25$i >>> 0 >= $917 >>> 0 & $916 >>> 0 >= $917 >>> 0) {
      HEAP32[$916 + 12 >> 2] = $724;
      HEAP32[$915 >> 2] = $724;
      HEAP32[$tbase$253$i + ($$sum$i19$i + 8) >> 2] = $916;
      HEAP32[$tbase$253$i + ($$sum$i19$i + 12) >> 2] = $T$0$lcssa$i25$i;
      HEAP32[$tbase$253$i + ($$sum$i19$i + 24) >> 2] = 0;
      break;
     } else _abort();
    } while (0);
    $mem$0 = $tbase$253$i + ($712 | 8) | 0;
    return $mem$0 | 0;
   } else $sp$0$i$i$i = 107112 | 0;
   while (1) {
    $925 = HEAP32[$sp$0$i$i$i >> 2] | 0;
    if ($925 >>> 0 <= $635 >>> 0) {
     $928 = HEAP32[$sp$0$i$i$i + 4 >> 2] | 0;
     $929 = $925 + $928 | 0;
     if ($929 >>> 0 > $635 >>> 0) {
      $$lcssa152 = $925;
      $$lcssa153 = $928;
      $$lcssa154 = $929;
      break;
     }
    }
    $sp$0$i$i$i = HEAP32[$sp$0$i$i$i + 8 >> 2] | 0;
   }
   $934 = $$lcssa152 + ($$lcssa153 + -39) | 0;
   if (!($934 & 7)) $939 = 0; else $939 = 0 - $934 & 7;
   $940 = $$lcssa152 + ($$lcssa153 + -47 + $939) | 0;
   $941 = $635 + 16 | 0;
   $943 = $940 >>> 0 < $941 >>> 0 ? $635 : $940;
   $944 = $943 + 8 | 0;
   $947 = $tbase$253$i + 8 | 0;
   if (!($947 & 7)) $953 = 0; else $953 = 0 - $947 & 7;
   $954 = $tsize$252$i + -40 - $953 | 0;
   HEAP32[26672] = $tbase$253$i + $953;
   HEAP32[26669] = $954;
   HEAP32[$tbase$253$i + ($953 + 4) >> 2] = $954 | 1;
   HEAP32[$tbase$253$i + ($tsize$252$i + -36) >> 2] = 40;
   HEAP32[26673] = HEAP32[26788];
   $959 = $943 + 4 | 0;
   HEAP32[$959 >> 2] = 27;
   HEAP32[$944 + 0 >> 2] = HEAP32[26778];
   HEAP32[$944 + 4 >> 2] = HEAP32[26779];
   HEAP32[$944 + 8 >> 2] = HEAP32[26780];
   HEAP32[$944 + 12 >> 2] = HEAP32[26781];
   HEAP32[26778] = $tbase$253$i;
   HEAP32[26779] = $tsize$252$i;
   HEAP32[26781] = 0;
   HEAP32[26780] = $944;
   $960 = $943 + 28 | 0;
   HEAP32[$960 >> 2] = 7;
   if (($943 + 32 | 0) >>> 0 < $$lcssa154 >>> 0) {
    $964 = $960;
    do {
     $964$looptemp = $964;
     $964 = $964 + 4 | 0;
     HEAP32[$964 >> 2] = 7;
    } while (($964$looptemp + 8 | 0) >>> 0 < $$lcssa154 >>> 0);
   }
   if (($943 | 0) != ($635 | 0)) {
    $970 = $943 - $635 | 0;
    HEAP32[$959 >> 2] = HEAP32[$959 >> 2] & -2;
    HEAP32[$635 + 4 >> 2] = $970 | 1;
    HEAP32[$943 >> 2] = $970;
    $975 = $970 >>> 3;
    if ($970 >>> 0 < 256) {
     $977 = $975 << 1;
     $978 = 106704 + ($977 << 2) | 0;
     $979 = HEAP32[26666] | 0;
     $980 = 1 << $975;
     do if (!($979 & $980)) {
      HEAP32[26666] = $979 | $980;
      $$pre$phi$i$iZ2D = 106704 + ($977 + 2 << 2) | 0;
      $F$0$i$i = $978;
     } else {
      $984 = 106704 + ($977 + 2 << 2) | 0;
      $985 = HEAP32[$984 >> 2] | 0;
      if ($985 >>> 0 >= (HEAP32[26670] | 0) >>> 0) {
       $$pre$phi$i$iZ2D = $984;
       $F$0$i$i = $985;
       break;
      }
      _abort();
     } while (0);
     HEAP32[$$pre$phi$i$iZ2D >> 2] = $635;
     HEAP32[$F$0$i$i + 12 >> 2] = $635;
     HEAP32[$635 + 8 >> 2] = $F$0$i$i;
     HEAP32[$635 + 12 >> 2] = $978;
     break;
    }
    $991 = $970 >>> 8;
    if (!$991) $I1$0$i$i = 0; else if ($970 >>> 0 > 16777215) $I1$0$i$i = 31; else {
     $996 = ($991 + 1048320 | 0) >>> 16 & 8;
     $997 = $991 << $996;
     $1000 = ($997 + 520192 | 0) >>> 16 & 4;
     $1002 = $997 << $1000;
     $1005 = ($1002 + 245760 | 0) >>> 16 & 2;
     $1010 = 14 - ($1000 | $996 | $1005) + ($1002 << $1005 >>> 15) | 0;
     $I1$0$i$i = $970 >>> ($1010 + 7 | 0) & 1 | $1010 << 1;
    }
    $1016 = 106968 + ($I1$0$i$i << 2) | 0;
    HEAP32[$635 + 28 >> 2] = $I1$0$i$i;
    HEAP32[$635 + 20 >> 2] = 0;
    HEAP32[$941 >> 2] = 0;
    $1019 = HEAP32[26667] | 0;
    $1020 = 1 << $I1$0$i$i;
    if (!($1019 & $1020)) {
     HEAP32[26667] = $1019 | $1020;
     HEAP32[$1016 >> 2] = $635;
     HEAP32[$635 + 24 >> 2] = $1016;
     HEAP32[$635 + 12 >> 2] = $635;
     HEAP32[$635 + 8 >> 2] = $635;
     break;
    }
    $1027 = HEAP32[$1016 >> 2] | 0;
    if (($I1$0$i$i | 0) == 31) $1036 = 0; else $1036 = 25 - ($I1$0$i$i >>> 1) | 0;
    L492 : do if ((HEAP32[$1027 + 4 >> 2] & -8 | 0) == ($970 | 0)) $T$0$lcssa$i$i = $1027; else {
     $K2$08$i$i = $970 << $1036;
     $T$07$i$i = $1027;
     while (1) {
      $1044 = $T$07$i$i + ($K2$08$i$i >>> 31 << 2) + 16 | 0;
      $1039 = HEAP32[$1044 >> 2] | 0;
      if (!$1039) {
       $$lcssa148 = $1044;
       $T$07$i$i$lcssa = $T$07$i$i;
       break;
      }
      if ((HEAP32[$1039 + 4 >> 2] & -8 | 0) == ($970 | 0)) {
       $T$0$lcssa$i$i = $1039;
       break L492;
      } else {
       $K2$08$i$i = $K2$08$i$i << 1;
       $T$07$i$i = $1039;
      }
     }
     if ($$lcssa148 >>> 0 < (HEAP32[26670] | 0) >>> 0) _abort(); else {
      HEAP32[$$lcssa148 >> 2] = $635;
      HEAP32[$635 + 24 >> 2] = $T$07$i$i$lcssa;
      HEAP32[$635 + 12 >> 2] = $635;
      HEAP32[$635 + 8 >> 2] = $635;
      break L308;
     }
    } while (0);
    $1051 = $T$0$lcssa$i$i + 8 | 0;
    $1052 = HEAP32[$1051 >> 2] | 0;
    $1053 = HEAP32[26670] | 0;
    if ($T$0$lcssa$i$i >>> 0 >= $1053 >>> 0 & $1052 >>> 0 >= $1053 >>> 0) {
     HEAP32[$1052 + 12 >> 2] = $635;
     HEAP32[$1051 >> 2] = $635;
     HEAP32[$635 + 8 >> 2] = $1052;
     HEAP32[$635 + 12 >> 2] = $T$0$lcssa$i$i;
     HEAP32[$635 + 24 >> 2] = 0;
     break;
    } else _abort();
   }
  } while (0);
  $1060 = HEAP32[26669] | 0;
  if ($1060 >>> 0 > $nb$0 >>> 0) {
   $1062 = $1060 - $nb$0 | 0;
   HEAP32[26669] = $1062;
   $1063 = HEAP32[26672] | 0;
   HEAP32[26672] = $1063 + $nb$0;
   HEAP32[$1063 + ($nb$0 + 4) >> 2] = $1062 | 1;
   HEAP32[$1063 + 4 >> 2] = $nb$0 | 3;
   $mem$0 = $1063 + 8 | 0;
   return $mem$0 | 0;
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12;
 $mem$0 = 0;
 return $mem$0 | 0;
}

function ___floatscan($f, $prec, $pok) {
 $f = $f | 0;
 $prec = $prec | 0;
 $pok = $pok | 0;
 var $$0 = 0.0, $$0$i27 = 0.0, $$012$i = 0, $$013$i = 0, $$01335$i = 0, $$01336$i = 0, $$07$i = 0, $$0711$i = 0, $$0712$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$2$i = 0, $$21$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3131$i = 0, $$in = 0, $$lcssa = 0, $$lcssa207 = 0, $$lcssa207$lcssa = 0, $$lcssa208 = 0, $$lcssa208$lcssa = 0, $$lcssa221 = 0, $$lcssa222 = 0, $$lcssa232 = 0, $$lcssa59$i = 0, $$old$i = 0, $$pn$i = 0.0, $$pre$i18 = 0, $$pre$phi$iZ2D = 0.0, $$sink$off0$us$i = 0, $$sink$off0$us102$i = 0, $0 = 0, $1 = 0, $109 = 0, $117 = 0, $119 = 0, $126 = 0, $133 = 0, $141 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $154 = 0, $156 = 0, $159 = 0, $16 = 0, $163 = 0, $165 = 0, $178 = 0.0, $185 = 0, $187 = 0, $196 = 0, $2 = 0, $200 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $218 = 0, $219 = 0, $220 = 0, $230 = 0, $231 = 0, $244 = 0, $246 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $265 = 0, $267 = 0, $279 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $289 = 0, $29 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $304 = 0.0, $316 = 0.0, $324 = 0, $325 = 0, $332 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $352 = 0, $354 = 0, $355 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $364 = 0, $369 = 0, $370 = 0, $374 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $394 = 0, $395 = 0, $404 = 0, $405 = 0, $406 = 0, $414 = 0, $418 = 0, $42 = 0, $420 = 0, $421 = 0, $423 = 0, $436 = 0, $438 = 0, $448 = 0, $450 = 0, $462 = 0, $463 = 0, $464 = 0, $486 = 0, $498 = 0, $502 = 0, $505 = 0, $507 = 0, $508 = 0, $509 = 0, $512 = 0, $513 = 0, $526 = 0, $529 = 0, $531 = 0, $533 = 0, $534 = 0, $54 = 0, $540 = 0, $542 = 0, $547 = 0, $550 = 0, $555 = 0, $557 = 0, $559 = 0, $560 = 0, $566 = 0, $568 = 0, $573 = 0, $576 = 0, $580 = 0, $583 = 0, $588 = 0, $592 = 0, $593 = 0, $595 = 0, $599 = 0, $601 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $610 = 0, $611 = 0, $619 = 0, $625 = 0, $63 = 0, $632 = 0, $634 = 0.0, $636 = 0, $638 = 0, $643 = 0.0, $644 = 0.0, $647 = 0.0, $651 = 0, $654 = 0, $661 = 0.0, $679 = 0.0, $681 = 0, $697 = 0, $70 = 0, $707 = 0, $710 = 0, $719 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $76 = 0, $84 = 0, $9 = 0, $93 = 0, $a$0$lcssa186$i = 0, $a$0110$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph47$i = 0, $a$3$i = 0, $a$3$i$lcssa199 = 0, $a$3$i$ph = 0, $a$3$i200 = 0, $a$3$ph$i = 0, $a$487$i = 0, $a$5$i = 0, $a$5$i$lcssa = 0, $a$5$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i24 = 0.0, $bits$0$ph = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$186 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$4 = 0, $c$4$1 = 0, $c$6 = 0, $carry$0112$i = 0, $carry1$0$us$i = 0, $carry1$0$us98$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us$i$lcssa = 0, $carry1$1$us103$i = 0, $carry1$1$us103$i$lcssa = 0, $carry3$090$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$033$i = 0, $denormal$034$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0, $e2$0$us$i = 0, $e2$0$us93$i = 0, $e2$1$i = 0, $e2$1$i$ph = 0, $e2$1$i197 = 0, $e2$1$ph$i = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i$lcssa193 = 0, $gotdig$0$i12 = 0, $gotdig$0$i12$lcssa230 = 0, $gotdig$2$i = 0, $gotdig$2$i$lcssa = 0, $gotdig$2$i13 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3127$i = 0, $gotdig$3127$i$lcssa = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i$lcssa = 0, $gotrad$0$i14 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1128$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$085 = 0, $i$1 = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0130$i = 0, $j$0130$i$lcssa = 0, $j$076$i = 0, $j$077$i = 0, $j$078$i = 0, $j$2$i = 0, $j$3119$i = 0, $k$0$lcssa$i = 0, $k$0129$i = 0, $k$0129$i$lcssa = 0, $k$072$i = 0, $k$073$i = 0, $k$074$i = 0, $k$2$i = 0, $k$3$i = 0, $k$4111$i = 0, $k$5$in$us$i = 0, $k$5$in$us97$i = 0, $k$5$us$i = 0, $k$5$us99$i = 0, $k$688$i = 0, $lnz$0$lcssa$i = 0, $lnz$0126$i = 0, $lnz$0126$i$lcssa = 0, $lnz$066$i = 0, $lnz$067$i = 0, $lnz$068$i = 0, $lnz$2$i = 0, $or$cond22$i = 0, $or$cond9$i = 0, $rp$0$lcssa187$i = 0, $rp$0109$i = 0, $rp$1$i19 = 0, $rp$1$i19$lcssa = 0, $rp$2$ph45$i = 0, $rp$3$i$ph = 0, $rp$3$ph43$i = 0, $rp$486$i = 0, $rp$5$i = 0, $rp$5$i$lcssa = 0, $rp$5$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$325$i = 0, $x$4$lcssa$i = 0, $x$420$i = 0, $x$5$i = 0, $x$i = 0, $y$0$i = 0.0, $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i23 = 0.0, $y$2$i = 0.0, $y$2$i25 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$321$i = 0.0, $y$4$i = 0.0, $z$0$i = 0, $z$1$ph46$i = 0, $z$1$us$i = 0, $z$1$us94$i = 0, $z$2$us$i = 0, $z$2$us96$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us$i$lcssa = 0, $z$3$us106$i = 0, $z$3$us106$i$lcssa = 0, $z$4$i = 0, $z$5$ph$i = 0, $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0, $k$4111$i$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 $x$i = sp;
 if (($prec | 0) == 1) {
  $bits$0$ph = 53;
  $emin$0$ph = -1074;
 } else if (($prec | 0) == 2) {
  $bits$0$ph = 53;
  $emin$0$ph = -1074;
 } else if (!$prec) {
  $bits$0$ph = 24;
  $emin$0$ph = -149;
 } else {
  $$0 = 0.0;
  STACKTOP = sp;
  return +$$0;
 }
 $0 = $f + 4 | 0;
 $1 = $f + 100 | 0;
 do {
  $2 = HEAP32[$0 >> 2] | 0;
  if ($2 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
   HEAP32[$0 >> 2] = $2 + 1;
   $9 = HEAPU8[$2 >> 0] | 0;
  } else $9 = ___shgetc($f) | 0;
 } while ((_isspace($9) | 0) != 0);
 $$lcssa232 = $9;
 do if (($$lcssa232 | 0) == 43 | ($$lcssa232 | 0) == 45) {
  $15 = 1 - ((($$lcssa232 | 0) == 45 & 1) << 1) | 0;
  $16 = HEAP32[$0 >> 2] | 0;
  if ($16 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
   HEAP32[$0 >> 2] = $16 + 1;
   $c$0 = HEAPU8[$16 >> 0] | 0;
   $sign$0 = $15;
   break;
  } else {
   $c$0 = ___shgetc($f) | 0;
   $sign$0 = $15;
   break;
  }
 } else {
  $c$0 = $$lcssa232;
  $sign$0 = 1;
 } while (0);
 $c$186 = $c$0;
 $i$085 = 0;
 while (1) {
  if (($c$186 | 32 | 0) != (HEAP8[107160 + $i$085 >> 0] | 0)) {
   $c$1$lcssa = $c$186;
   $i$0$lcssa = $i$085;
   break;
  }
  do if ($i$085 >>> 0 < 7) {
   $29 = HEAP32[$0 >> 2] | 0;
   if ($29 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
    HEAP32[$0 >> 2] = $29 + 1;
    $c$2 = HEAPU8[$29 >> 0] | 0;
    break;
   } else {
    $c$2 = ___shgetc($f) | 0;
    break;
   }
  } else $c$2 = $c$186; while (0);
  $36 = $i$085 + 1 | 0;
  if ($36 >>> 0 < 8) {
   $c$186 = $c$2;
   $i$085 = $36;
  } else {
   $c$1$lcssa = $c$2;
   $i$0$lcssa = $36;
   break;
  }
 }
 do if (($i$0$lcssa | 0) == 3) label = 23; else if (($i$0$lcssa | 0) != 8) {
  $39 = ($pok | 0) != 0;
  if ($39 & $i$0$lcssa >>> 0 > 3) if (($i$0$lcssa | 0) == 8) break; else {
   label = 23;
   break;
  }
  do if (!$i$0$lcssa) {
   if (($c$1$lcssa | 32 | 0) == 110) {
    $54 = HEAP32[$0 >> 2] | 0;
    if ($54 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $54 + 1;
     $c$4 = HEAPU8[$54 >> 0] | 0;
    } else $c$4 = ___shgetc($f) | 0;
    if (($c$4 | 32 | 0) != 97) break;
    $710 = HEAP32[$0 >> 2] | 0;
    if ($710 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $710 + 1;
     $c$4$1 = HEAPU8[$710 >> 0] | 0;
    } else $c$4$1 = ___shgetc($f) | 0;
    if (($c$4$1 | 32 | 0) != 110) break;
    $63 = HEAP32[$0 >> 2] | 0;
    if ($63 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $63 + 1;
     $70 = HEAPU8[$63 >> 0] | 0;
    } else $70 = ___shgetc($f) | 0;
    if (($70 | 0) == 40) $i$4 = 1; else {
     if (!(HEAP32[$1 >> 2] | 0)) {
      $$0 = nan;
      STACKTOP = sp;
      return +$$0;
     }
     HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
     $$0 = nan;
     STACKTOP = sp;
     return +$$0;
    }
    while (1) {
     $76 = HEAP32[$0 >> 2] | 0;
     if ($76 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
      HEAP32[$0 >> 2] = $76 + 1;
      $84 = HEAPU8[$76 >> 0] | 0;
     } else $84 = ___shgetc($f) | 0;
     if (!(($84 + -48 | 0) >>> 0 < 10 | ($84 + -65 | 0) >>> 0 < 26)) if (!(($84 | 0) == 95 | ($84 + -97 | 0) >>> 0 < 26)) {
      $$lcssa = $84;
      $i$4$lcssa = $i$4;
      break;
     }
     $i$4 = $i$4 + 1 | 0;
    }
    if (($$lcssa | 0) == 41) {
     $$0 = nan;
     STACKTOP = sp;
     return +$$0;
    }
    $93 = (HEAP32[$1 >> 2] | 0) == 0;
    if (!$93) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
    if (!$39) {
     HEAP32[(___errno_location() | 0) >> 2] = 22;
     ___shlim($f, 0);
     $$0 = 0.0;
     STACKTOP = sp;
     return +$$0;
    }
    if (($i$4$lcssa | 0) == 0 | $93) {
     $$0 = nan;
     STACKTOP = sp;
     return +$$0;
    } else $$in = $i$4$lcssa;
    do {
     $$in = $$in + -1 | 0;
     HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
    } while (($$in | 0) != 0);
    $$0 = nan;
    STACKTOP = sp;
    return +$$0;
   }
   do if (($c$1$lcssa | 0) == 48) {
    $109 = HEAP32[$0 >> 2] | 0;
    if ($109 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $109 + 1;
     $117 = HEAPU8[$109 >> 0] | 0;
    } else $117 = ___shgetc($f) | 0;
    if (($117 | 32 | 0) != 120) {
     if (!(HEAP32[$1 >> 2] | 0)) {
      $c$6 = 48;
      break;
     }
     HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
     $c$6 = 48;
     break;
    }
    $119 = HEAP32[$0 >> 2] | 0;
    if ($119 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $119 + 1;
     $c$0$i = HEAPU8[$119 >> 0] | 0;
     $gotdig$0$i = 0;
    } else {
     $c$0$i = ___shgetc($f) | 0;
     $gotdig$0$i = 0;
    }
    while (1) {
     if (($c$0$i | 0) == 46) {
      $gotdig$0$i$lcssa193 = $gotdig$0$i;
      label = 68;
      break;
     } else if (($c$0$i | 0) != 48) {
      $163 = 0;
      $165 = 0;
      $719 = 0;
      $720 = 0;
      $c$2$i = $c$0$i;
      $gotdig$2$i = $gotdig$0$i;
      $gotrad$0$i = 0;
      $gottail$0$i = 0;
      $scale$0$i = 1.0;
      $x$0$i = 0;
      $y$0$i = 0.0;
      break;
     }
     $126 = HEAP32[$0 >> 2] | 0;
     if ($126 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
      HEAP32[$0 >> 2] = $126 + 1;
      $c$0$i = HEAPU8[$126 >> 0] | 0;
      $gotdig$0$i = 1;
      continue;
     } else {
      $c$0$i = ___shgetc($f) | 0;
      $gotdig$0$i = 1;
      continue;
     }
    }
    if ((label | 0) == 68) {
     $133 = HEAP32[$0 >> 2] | 0;
     if ($133 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
      HEAP32[$0 >> 2] = $133 + 1;
      $c$1$ph$i = HEAPU8[$133 >> 0] | 0;
     } else $c$1$ph$i = ___shgetc($f) | 0;
     if (($c$1$ph$i | 0) == 48) {
      $148 = 0;
      $149 = 0;
      while (1) {
       $141 = HEAP32[$0 >> 2] | 0;
       if ($141 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
        HEAP32[$0 >> 2] = $141 + 1;
        $152 = HEAPU8[$141 >> 0] | 0;
       } else $152 = ___shgetc($f) | 0;
       $150 = _i64Add($148 | 0, $149 | 0, -1, -1) | 0;
       $151 = tempRet0;
       if (($152 | 0) == 48) {
        $148 = $150;
        $149 = $151;
       } else {
        $163 = 0;
        $165 = 0;
        $719 = $150;
        $720 = $151;
        $c$2$i = $152;
        $gotdig$2$i = 1;
        $gotrad$0$i = 1;
        $gottail$0$i = 0;
        $scale$0$i = 1.0;
        $x$0$i = 0;
        $y$0$i = 0.0;
        break;
       }
      }
     } else {
      $163 = 0;
      $165 = 0;
      $719 = 0;
      $720 = 0;
      $c$2$i = $c$1$ph$i;
      $gotdig$2$i = $gotdig$0$i$lcssa193;
      $gotrad$0$i = 1;
      $gottail$0$i = 0;
      $scale$0$i = 1.0;
      $x$0$i = 0;
      $y$0$i = 0.0;
     }
    }
    L115 : while (1) {
     $154 = $c$2$i + -48 | 0;
     do if ($154 >>> 0 < 10) {
      $d$0$i = $154;
      label = 81;
     } else {
      $156 = $c$2$i | 32;
      $159 = ($c$2$i | 0) == 46;
      if (!($159 | ($156 + -97 | 0) >>> 0 < 6)) {
       $207 = $719;
       $208 = $165;
       $210 = $720;
       $211 = $163;
       $c$2$lcssa$i = $c$2$i;
       $gotdig$2$i$lcssa = $gotdig$2$i;
       $gotrad$0$i$lcssa = $gotrad$0$i;
       $x$0$i$lcssa = $x$0$i;
       $y$0$i$lcssa = $y$0$i;
       break L115;
      }
      if ($159) if (!$gotrad$0$i) {
       $721 = $165;
       $722 = $163;
       $723 = $165;
       $724 = $163;
       $gotdig$3$i = $gotdig$2$i;
       $gotrad$1$i = 1;
       $gottail$2$i = $gottail$0$i;
       $scale$2$i = $scale$0$i;
       $x$2$i = $x$0$i;
       $y$2$i = $y$0$i;
       break;
      } else {
       $207 = $719;
       $208 = $165;
       $210 = $720;
       $211 = $163;
       $c$2$lcssa$i = 46;
       $gotdig$2$i$lcssa = $gotdig$2$i;
       $gotrad$0$i$lcssa = $gotrad$0$i;
       $x$0$i$lcssa = $x$0$i;
       $y$0$i$lcssa = $y$0$i;
       break L115;
      } else {
       $d$0$i = ($c$2$i | 0) > 57 ? $156 + -87 | 0 : $154;
       label = 81;
       break;
      }
     } while (0);
     if ((label | 0) == 81) {
      label = 0;
      do if (($163 | 0) < 0 | ($163 | 0) == 0 & $165 >>> 0 < 8) {
       $gottail$1$i = $gottail$0$i;
       $scale$1$i = $scale$0$i;
       $x$1$i = $d$0$i + ($x$0$i << 4) | 0;
       $y$1$i = $y$0$i;
      } else {
       if (($163 | 0) < 0 | ($163 | 0) == 0 & $165 >>> 0 < 14) {
        $178 = $scale$0$i * .0625;
        $gottail$1$i = $gottail$0$i;
        $scale$1$i = $178;
        $x$1$i = $x$0$i;
        $y$1$i = $y$0$i + $178 * +($d$0$i | 0);
        break;
       }
       if (($gottail$0$i | 0) != 0 | ($d$0$i | 0) == 0) {
        $gottail$1$i = $gottail$0$i;
        $scale$1$i = $scale$0$i;
        $x$1$i = $x$0$i;
        $y$1$i = $y$0$i;
       } else {
        $gottail$1$i = 1;
        $scale$1$i = $scale$0$i;
        $x$1$i = $x$0$i;
        $y$1$i = $y$0$i + $scale$0$i * .5;
       }
      } while (0);
      $185 = _i64Add($165 | 0, $163 | 0, 1, 0) | 0;
      $721 = $719;
      $722 = $720;
      $723 = $185;
      $724 = tempRet0;
      $gotdig$3$i = 1;
      $gotrad$1$i = $gotrad$0$i;
      $gottail$2$i = $gottail$1$i;
      $scale$2$i = $scale$1$i;
      $x$2$i = $x$1$i;
      $y$2$i = $y$1$i;
     }
     $187 = HEAP32[$0 >> 2] | 0;
     if ($187 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
      HEAP32[$0 >> 2] = $187 + 1;
      $163 = $724;
      $165 = $723;
      $719 = $721;
      $720 = $722;
      $c$2$i = HEAPU8[$187 >> 0] | 0;
      $gotdig$2$i = $gotdig$3$i;
      $gotrad$0$i = $gotrad$1$i;
      $gottail$0$i = $gottail$2$i;
      $scale$0$i = $scale$2$i;
      $x$0$i = $x$2$i;
      $y$0$i = $y$2$i;
      continue;
     } else {
      $163 = $724;
      $165 = $723;
      $719 = $721;
      $720 = $722;
      $c$2$i = ___shgetc($f) | 0;
      $gotdig$2$i = $gotdig$3$i;
      $gotrad$0$i = $gotrad$1$i;
      $gottail$0$i = $gottail$2$i;
      $scale$0$i = $scale$2$i;
      $x$0$i = $x$2$i;
      $y$0$i = $y$2$i;
      continue;
     }
    }
    if (!$gotdig$2$i$lcssa) {
     $196 = (HEAP32[$1 >> 2] | 0) == 0;
     if (!$196) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
     if (!$pok) ___shlim($f, 0); else if (!$196) {
      $200 = HEAP32[$0 >> 2] | 0;
      HEAP32[$0 >> 2] = $200 + -1;
      if ($gotrad$0$i$lcssa) HEAP32[$0 >> 2] = $200 + -2;
     }
     $$0 = +($sign$0 | 0) * 0.0;
     STACKTOP = sp;
     return +$$0;
    }
    $206 = ($gotrad$0$i$lcssa | 0) == 0;
    $209 = $206 ? $208 : $207;
    $212 = $206 ? $211 : $210;
    if (($211 | 0) < 0 | ($211 | 0) == 0 & $208 >>> 0 < 8) {
     $219 = $208;
     $220 = $211;
     $x$325$i = $x$0$i$lcssa;
     while (1) {
      $218 = $x$325$i << 4;
      $219 = _i64Add($219 | 0, $220 | 0, 1, 0) | 0;
      $220 = tempRet0;
      if (!(($220 | 0) < 0 | ($220 | 0) == 0 & $219 >>> 0 < 8)) {
       $x$3$lcssa$i = $218;
       break;
      } else $x$325$i = $218;
     }
    } else $x$3$lcssa$i = $x$0$i$lcssa;
    do if (($c$2$lcssa$i | 32 | 0) == 112) {
     $230 = _scanexp($f, $pok) | 0;
     $231 = tempRet0;
     if (($230 | 0) == 0 & ($231 | 0) == -2147483648) if (!$pok) {
      ___shlim($f, 0);
      $$0 = 0.0;
      STACKTOP = sp;
      return +$$0;
     } else {
      if (!(HEAP32[$1 >> 2] | 0)) {
       $248 = 0;
       $249 = 0;
       break;
      }
      HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
      $248 = 0;
      $249 = 0;
      break;
     } else {
      $248 = $230;
      $249 = $231;
     }
    } else if (!(HEAP32[$1 >> 2] | 0)) {
     $248 = 0;
     $249 = 0;
    } else {
     HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
     $248 = 0;
     $249 = 0;
    } while (0);
    $244 = _bitshift64Shl($209 | 0, $212 | 0, 2) | 0;
    $246 = _i64Add($244 | 0, tempRet0 | 0, -32, -1) | 0;
    $250 = _i64Add($246 | 0, tempRet0 | 0, $248 | 0, $249 | 0) | 0;
    $251 = tempRet0;
    if (!$x$3$lcssa$i) {
     $$0 = +($sign$0 | 0) * 0.0;
     STACKTOP = sp;
     return +$$0;
    }
    if (($251 | 0) > 0 | ($251 | 0) == 0 & $250 >>> 0 > (0 - $emin$0$ph | 0) >>> 0) {
     HEAP32[(___errno_location() | 0) >> 2] = 34;
     $$0 = +($sign$0 | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
     STACKTOP = sp;
     return +$$0;
    }
    $265 = $emin$0$ph + -106 | 0;
    $267 = (($265 | 0) < 0) << 31 >> 31;
    if (($251 | 0) < ($267 | 0) | ($251 | 0) == ($267 | 0) & $250 >>> 0 < $265 >>> 0) {
     HEAP32[(___errno_location() | 0) >> 2] = 34;
     $$0 = +($sign$0 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
     STACKTOP = sp;
     return +$$0;
    }
    if (($x$3$lcssa$i | 0) > -1) {
     $282 = $250;
     $283 = $251;
     $x$420$i = $x$3$lcssa$i;
     $y$321$i = $y$0$i$lcssa;
     while (1) {
      $279 = $x$420$i << 1;
      if (!($y$321$i >= .5)) {
       $$pn$i = $y$321$i;
       $x$5$i = $279;
      } else {
       $$pn$i = $y$321$i + -1.0;
       $x$5$i = $279 | 1;
      }
      $y$4$i = $y$321$i + $$pn$i;
      $284 = _i64Add($282 | 0, $283 | 0, -1, -1) | 0;
      $285 = tempRet0;
      if (($x$5$i | 0) > -1) {
       $282 = $284;
       $283 = $285;
       $x$420$i = $x$5$i;
       $y$321$i = $y$4$i;
      } else {
       $291 = $284;
       $292 = $285;
       $x$4$lcssa$i = $x$5$i;
       $y$3$lcssa$i = $y$4$i;
       break;
      }
     }
    } else {
     $291 = $250;
     $292 = $251;
     $x$4$lcssa$i = $x$3$lcssa$i;
     $y$3$lcssa$i = $y$0$i$lcssa;
    }
    $289 = _i64Subtract(32, 0, $emin$0$ph | 0, (($emin$0$ph | 0) < 0) << 31 >> 31 | 0) | 0;
    $293 = _i64Add($291 | 0, $292 | 0, $289 | 0, tempRet0 | 0) | 0;
    $294 = tempRet0;
    if (0 > ($294 | 0) | 0 == ($294 | 0) & $bits$0$ph >>> 0 > $293 >>> 0) if (($293 | 0) < 0) {
     $$0711$i = 0;
     label = 124;
    } else {
     $$07$i = $293;
     label = 122;
    } else {
     $$07$i = $bits$0$ph;
     label = 122;
    }
    do if ((label | 0) == 122) {
     if (($$07$i | 0) < 53) {
      $$0711$i = $$07$i;
      label = 124;
      break;
     }
     $$0712$i = $$07$i;
     $$pre$phi$iZ2D = +($sign$0 | 0);
     $bias$0$i = 0.0;
    } while (0);
    if ((label | 0) == 124) {
     $304 = +($sign$0 | 0);
     $$0712$i = $$0711$i;
     $$pre$phi$iZ2D = $304;
     $bias$0$i = +_copysignl(+_scalbn(1.0, 84 - $$0711$i | 0), $304);
    }
    $or$cond9$i = ($x$4$lcssa$i & 1 | 0) == 0 & ($y$3$lcssa$i != 0.0 & ($$0712$i | 0) < 32);
    $316 = $$pre$phi$iZ2D * ($or$cond9$i ? 0.0 : $y$3$lcssa$i) + ($bias$0$i + $$pre$phi$iZ2D * +((($or$cond9$i & 1) + $x$4$lcssa$i | 0) >>> 0)) - $bias$0$i;
    if (!($316 != 0.0)) HEAP32[(___errno_location() | 0) >> 2] = 34;
    $$0 = +_scalbnl($316, $291);
    STACKTOP = sp;
    return +$$0;
   } else $c$6 = $c$1$lcssa; while (0);
   $sum$i = $emin$0$ph + $bits$0$ph | 0;
   $324 = 0 - $sum$i | 0;
   $$012$i = $c$6;
   $gotdig$0$i12 = 0;
   while (1) {
    if (($$012$i | 0) == 46) {
     $gotdig$0$i12$lcssa230 = $gotdig$0$i12;
     label = 135;
     break;
    } else if (($$012$i | 0) != 48) {
     $$2$i = $$012$i;
     $725 = 0;
     $726 = 0;
     $gotdig$2$i13 = $gotdig$0$i12;
     $gotrad$0$i14 = 0;
     break;
    }
    $325 = HEAP32[$0 >> 2] | 0;
    if ($325 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $325 + 1;
     $$012$i = HEAPU8[$325 >> 0] | 0;
     $gotdig$0$i12 = 1;
     continue;
    } else {
     $$012$i = ___shgetc($f) | 0;
     $gotdig$0$i12 = 1;
     continue;
    }
   }
   if ((label | 0) == 135) {
    $332 = HEAP32[$0 >> 2] | 0;
    if ($332 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $332 + 1;
     $$1$ph$i = HEAPU8[$332 >> 0] | 0;
    } else $$1$ph$i = ___shgetc($f) | 0;
    if (($$1$ph$i | 0) == 48) {
     $340 = 0;
     $341 = 0;
     while (1) {
      $342 = _i64Add($340 | 0, $341 | 0, -1, -1) | 0;
      $343 = tempRet0;
      $344 = HEAP32[$0 >> 2] | 0;
      if ($344 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
       HEAP32[$0 >> 2] = $344 + 1;
       $$1$be$i = HEAPU8[$344 >> 0] | 0;
      } else $$1$be$i = ___shgetc($f) | 0;
      if (($$1$be$i | 0) == 48) {
       $340 = $342;
       $341 = $343;
      } else {
       $$2$i = $$1$be$i;
       $725 = $342;
       $726 = $343;
       $gotdig$2$i13 = 1;
       $gotrad$0$i14 = 1;
       break;
      }
     }
    } else {
     $$2$i = $$1$ph$i;
     $725 = 0;
     $726 = 0;
     $gotdig$2$i13 = $gotdig$0$i12$lcssa230;
     $gotrad$0$i14 = 1;
    }
   }
   HEAP32[$x$i >> 2] = 0;
   $352 = $$2$i + -48 | 0;
   $354 = ($$2$i | 0) == 46;
   L217 : do if ($354 | $352 >>> 0 < 10) {
    $355 = $x$i + 496 | 0;
    $$3131$i = $$2$i;
    $358 = 0;
    $359 = 0;
    $727 = $354;
    $728 = $352;
    $729 = $725;
    $730 = $726;
    $gotdig$3127$i = $gotdig$2$i13;
    $gotrad$1128$i = $gotrad$0$i14;
    $j$0130$i = 0;
    $k$0129$i = 0;
    $lnz$0126$i = 0;
    L219 : while (1) {
     do if ($727) if (!$gotrad$1128$i) {
      $731 = $358;
      $732 = $359;
      $733 = $358;
      $734 = $359;
      $gotdig$4$i = $gotdig$3127$i;
      $gotrad$2$i = 1;
      $j$2$i = $j$0130$i;
      $k$2$i = $k$0129$i;
      $lnz$2$i = $lnz$0126$i;
     } else {
      $735 = $729;
      $736 = $730;
      $737 = $358;
      $738 = $359;
      $gotdig$3127$i$lcssa = $gotdig$3127$i;
      $j$0130$i$lcssa = $j$0130$i;
      $k$0129$i$lcssa = $k$0129$i;
      $lnz$0126$i$lcssa = $lnz$0126$i;
      break L219;
     } else {
      $360 = _i64Add($358 | 0, $359 | 0, 1, 0) | 0;
      $361 = tempRet0;
      $362 = ($$3131$i | 0) != 48;
      if (($k$0129$i | 0) >= 125) {
       if (!$362) {
        $731 = $729;
        $732 = $730;
        $733 = $360;
        $734 = $361;
        $gotdig$4$i = $gotdig$3127$i;
        $gotrad$2$i = $gotrad$1128$i;
        $j$2$i = $j$0130$i;
        $k$2$i = $k$0129$i;
        $lnz$2$i = $lnz$0126$i;
        break;
       }
       HEAP32[$355 >> 2] = HEAP32[$355 >> 2] | 1;
       $731 = $729;
       $732 = $730;
       $733 = $360;
       $734 = $361;
       $gotdig$4$i = $gotdig$3127$i;
       $gotrad$2$i = $gotrad$1128$i;
       $j$2$i = $j$0130$i;
       $k$2$i = $k$0129$i;
       $lnz$2$i = $lnz$0126$i;
       break;
      }
      $364 = $x$i + ($k$0129$i << 2) | 0;
      if (!$j$0130$i) $storemerge$i = $728; else $storemerge$i = $$3131$i + -48 + ((HEAP32[$364 >> 2] | 0) * 10 | 0) | 0;
      HEAP32[$364 >> 2] = $storemerge$i;
      $369 = $j$0130$i + 1 | 0;
      $370 = ($369 | 0) == 9;
      $731 = $729;
      $732 = $730;
      $733 = $360;
      $734 = $361;
      $gotdig$4$i = 1;
      $gotrad$2$i = $gotrad$1128$i;
      $j$2$i = $370 ? 0 : $369;
      $k$2$i = ($370 & 1) + $k$0129$i | 0;
      $lnz$2$i = $362 ? $360 : $lnz$0126$i;
     } while (0);
     $374 = HEAP32[$0 >> 2] | 0;
     if ($374 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
      HEAP32[$0 >> 2] = $374 + 1;
      $$3$be$i = HEAPU8[$374 >> 0] | 0;
     } else $$3$be$i = ___shgetc($f) | 0;
     $728 = $$3$be$i + -48 | 0;
     $727 = ($$3$be$i | 0) == 46;
     if (!($727 | $728 >>> 0 < 10)) {
      $$3$lcssa$i = $$3$be$i;
      $385 = $731;
      $386 = $733;
      $388 = $732;
      $389 = $734;
      $gotdig$3$lcssa$i = $gotdig$4$i;
      $gotrad$1$lcssa$i = $gotrad$2$i;
      $j$0$lcssa$i = $j$2$i;
      $k$0$lcssa$i = $k$2$i;
      $lnz$0$lcssa$i = $lnz$2$i;
      label = 158;
      break L217;
     } else {
      $$3131$i = $$3$be$i;
      $358 = $733;
      $359 = $734;
      $729 = $731;
      $730 = $732;
      $gotdig$3127$i = $gotdig$4$i;
      $gotrad$1128$i = $gotrad$2$i;
      $j$0130$i = $j$2$i;
      $k$0129$i = $k$2$i;
      $lnz$0126$i = $lnz$2$i;
     }
    }
    $739 = $737;
    $740 = $738;
    $741 = $735;
    $742 = $736;
    $743 = ($gotdig$3127$i$lcssa | 0) != 0;
    $j$078$i = $j$0130$i$lcssa;
    $k$074$i = $k$0129$i$lcssa;
    $lnz$068$i = $lnz$0126$i$lcssa;
    label = 166;
   } else {
    $$3$lcssa$i = $$2$i;
    $385 = $725;
    $386 = 0;
    $388 = $726;
    $389 = 0;
    $gotdig$3$lcssa$i = $gotdig$2$i13;
    $gotrad$1$lcssa$i = $gotrad$0$i14;
    $j$0$lcssa$i = 0;
    $k$0$lcssa$i = 0;
    $lnz$0$lcssa$i = 0;
    label = 158;
   } while (0);
   do if ((label | 0) == 158) {
    $384 = ($gotrad$1$lcssa$i | 0) == 0;
    $387 = $384 ? $386 : $385;
    $390 = $384 ? $389 : $388;
    $391 = ($gotdig$3$lcssa$i | 0) != 0;
    if (!(($$3$lcssa$i | 32 | 0) == 101 & $391)) if (($$3$lcssa$i | 0) > -1) {
     $739 = $386;
     $740 = $389;
     $741 = $387;
     $742 = $390;
     $743 = $391;
     $j$078$i = $j$0$lcssa$i;
     $k$074$i = $k$0$lcssa$i;
     $lnz$068$i = $lnz$0$lcssa$i;
     label = 166;
     break;
    } else {
     $744 = $386;
     $745 = $389;
     $746 = $391;
     $747 = $387;
     $748 = $390;
     $j$077$i = $j$0$lcssa$i;
     $k$073$i = $k$0$lcssa$i;
     $lnz$067$i = $lnz$0$lcssa$i;
     label = 168;
     break;
    }
    $394 = _scanexp($f, $pok) | 0;
    $395 = tempRet0;
    if (($394 | 0) == 0 & ($395 | 0) == -2147483648) {
     if (!$pok) {
      ___shlim($f, 0);
      $$0$i27 = 0.0;
      break;
     }
     if (!(HEAP32[$1 >> 2] | 0)) {
      $404 = 0;
      $405 = 0;
     } else {
      HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
      $404 = 0;
      $405 = 0;
     }
    } else {
     $404 = $394;
     $405 = $395;
    }
    $406 = _i64Add($404 | 0, $405 | 0, $387 | 0, $390 | 0) | 0;
    $418 = $406;
    $420 = $386;
    $421 = tempRet0;
    $423 = $389;
    $j$076$i = $j$0$lcssa$i;
    $k$072$i = $k$0$lcssa$i;
    $lnz$066$i = $lnz$0$lcssa$i;
    label = 170;
   } while (0);
   if ((label | 0) == 166) if (!(HEAP32[$1 >> 2] | 0)) {
    $744 = $739;
    $745 = $740;
    $746 = $743;
    $747 = $741;
    $748 = $742;
    $j$077$i = $j$078$i;
    $k$073$i = $k$074$i;
    $lnz$067$i = $lnz$068$i;
    label = 168;
   } else {
    HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
    if ($743) {
     $418 = $741;
     $420 = $739;
     $421 = $742;
     $423 = $740;
     $j$076$i = $j$078$i;
     $k$072$i = $k$074$i;
     $lnz$066$i = $lnz$068$i;
     label = 170;
    } else label = 169;
   }
   if ((label | 0) == 168) if ($746) {
    $418 = $747;
    $420 = $744;
    $421 = $748;
    $423 = $745;
    $j$076$i = $j$077$i;
    $k$072$i = $k$073$i;
    $lnz$066$i = $lnz$067$i;
    label = 170;
   } else label = 169;
   do if ((label | 0) == 169) {
    HEAP32[(___errno_location() | 0) >> 2] = 22;
    ___shlim($f, 0);
    $$0$i27 = 0.0;
   } else if ((label | 0) == 170) {
    $414 = HEAP32[$x$i >> 2] | 0;
    if (!$414) {
     $$0$i27 = +($sign$0 | 0) * 0.0;
     break;
    }
    if ((($423 | 0) < 0 | ($423 | 0) == 0 & $420 >>> 0 < 10) & (($418 | 0) == ($420 | 0) & ($421 | 0) == ($423 | 0))) if ($bits$0$ph >>> 0 > 30 | ($414 >>> $bits$0$ph | 0) == 0) {
     $$0$i27 = +($sign$0 | 0) * +($414 >>> 0);
     break;
    }
    $436 = ($emin$0$ph | 0) / -2 | 0;
    $438 = (($436 | 0) < 0) << 31 >> 31;
    if (($421 | 0) > ($438 | 0) | ($421 | 0) == ($438 | 0) & $418 >>> 0 > $436 >>> 0) {
     HEAP32[(___errno_location() | 0) >> 2] = 34;
     $$0$i27 = +($sign$0 | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
     break;
    }
    $448 = $emin$0$ph + -106 | 0;
    $450 = (($448 | 0) < 0) << 31 >> 31;
    if (($421 | 0) < ($450 | 0) | ($421 | 0) == ($450 | 0) & $418 >>> 0 < $448 >>> 0) {
     HEAP32[(___errno_location() | 0) >> 2] = 34;
     $$0$i27 = +($sign$0 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
     break;
    }
    if (!$j$076$i) $k$3$i = $k$072$i; else {
     if (($j$076$i | 0) < 9) {
      $462 = $x$i + ($k$072$i << 2) | 0;
      $464 = HEAP32[$462 >> 2] | 0;
      $j$3119$i = $j$076$i;
      while (1) {
       $463 = $464 * 10 | 0;
       if (($j$3119$i | 0) == 8) {
        $$lcssa222 = $463;
        break;
       } else {
        $464 = $463;
        $j$3119$i = $j$3119$i + 1 | 0;
       }
      }
      HEAP32[$462 >> 2] = $$lcssa222;
     }
     $k$3$i = $k$072$i + 1 | 0;
    }
    if (($lnz$066$i | 0) < 9) if (($lnz$066$i | 0) <= ($418 | 0) & ($418 | 0) < 18) {
     if (($418 | 0) == 9) {
      $$0$i27 = +($sign$0 | 0) * +((HEAP32[$x$i >> 2] | 0) >>> 0);
      break;
     }
     if (($418 | 0) < 9) {
      $$0$i27 = +($sign$0 | 0) * +((HEAP32[$x$i >> 2] | 0) >>> 0) / +(HEAP32[107176 + (8 - $418 << 2) >> 2] | 0);
      break;
     }
     $486 = $bits$0$ph + 27 + (Math_imul($418, -3) | 0) | 0;
     $$pre$i18 = HEAP32[$x$i >> 2] | 0;
     if (($486 | 0) > 30 | ($$pre$i18 >>> $486 | 0) == 0) {
      $$0$i27 = +($sign$0 | 0) * +($$pre$i18 >>> 0) * +(HEAP32[107176 + ($418 + -10 << 2) >> 2] | 0);
      break;
     }
    }
    $498 = ($418 | 0) % 9 | 0;
    if (!$498) {
     $a$2$ph47$i = 0;
     $e2$0$ph$i = 0;
     $rp$2$ph45$i = $418;
     $z$1$ph46$i = $k$3$i;
    } else {
     $502 = ($418 | 0) > -1 ? $498 : $498 + 9 | 0;
     $505 = HEAP32[107176 + (8 - $502 << 2) >> 2] | 0;
     if (!$k$3$i) {
      $a$0$lcssa186$i = 0;
      $rp$0$lcssa187$i = $418;
      $z$0$i = 0;
     } else {
      $507 = 1e9 / ($505 | 0) | 0;
      $a$0110$i = 0;
      $carry$0112$i = 0;
      $k$4111$i = 0;
      $rp$0109$i = $418;
      while (1) {
       $508 = $x$i + ($k$4111$i << 2) | 0;
       $509 = HEAP32[$508 >> 2] | 0;
       $512 = (($509 >>> 0) / ($505 >>> 0) | 0) + $carry$0112$i | 0;
       HEAP32[$508 >> 2] = $512;
       $513 = Math_imul(($509 >>> 0) % ($505 >>> 0) | 0, $507) | 0;
       $k$4111$i$looptemp = $k$4111$i;
       $k$4111$i = $k$4111$i + 1 | 0;
       if (($k$4111$i$looptemp | 0) == ($a$0110$i | 0) & ($512 | 0) == 0) {
        $a$1$i = $k$4111$i & 127;
        $rp$1$i19 = $rp$0109$i + -9 | 0;
       } else {
        $a$1$i = $a$0110$i;
        $rp$1$i19 = $rp$0109$i;
       }
       if (($k$4111$i | 0) == ($k$3$i | 0)) {
        $$lcssa221 = $513;
        $a$1$i$lcssa = $a$1$i;
        $rp$1$i19$lcssa = $rp$1$i19;
        break;
       } else {
        $a$0110$i = $a$1$i;
        $carry$0112$i = $513;
        $rp$0109$i = $rp$1$i19;
       }
      }
      if (!$$lcssa221) {
       $a$0$lcssa186$i = $a$1$i$lcssa;
       $rp$0$lcssa187$i = $rp$1$i19$lcssa;
       $z$0$i = $k$3$i;
      } else {
       HEAP32[$x$i + ($k$3$i << 2) >> 2] = $$lcssa221;
       $a$0$lcssa186$i = $a$1$i$lcssa;
       $rp$0$lcssa187$i = $rp$1$i19$lcssa;
       $z$0$i = $k$3$i + 1 | 0;
      }
     }
     $a$2$ph47$i = $a$0$lcssa186$i;
     $e2$0$ph$i = 0;
     $rp$2$ph45$i = 9 - $502 + $rp$0$lcssa187$i | 0;
     $z$1$ph46$i = $z$0$i;
    }
    L302 : while (1) {
     $526 = $x$i + ($a$2$ph47$i << 2) | 0;
     if (($rp$2$ph45$i | 0) < 18) {
      $e2$0$us$i = $e2$0$ph$i;
      $z$1$us$i = $z$1$ph46$i;
      while (1) {
       $carry1$0$us$i = 0;
       $k$5$in$us$i = $z$1$us$i + 127 | 0;
       $z$2$us$i = $z$1$us$i;
       while (1) {
        $k$5$us$i = $k$5$in$us$i & 127;
        $529 = $x$i + ($k$5$us$i << 2) | 0;
        $531 = _bitshift64Shl(HEAP32[$529 >> 2] | 0, 0, 29) | 0;
        $533 = _i64Add($531 | 0, tempRet0 | 0, $carry1$0$us$i | 0, 0) | 0;
        $534 = tempRet0;
        if ($534 >>> 0 > 0 | ($534 | 0) == 0 & $533 >>> 0 > 1e9) {
         $540 = ___udivdi3($533 | 0, $534 | 0, 1e9, 0) | 0;
         $542 = ___uremdi3($533 | 0, $534 | 0, 1e9, 0) | 0;
         $$sink$off0$us$i = $542;
         $carry1$1$us$i = $540;
        } else {
         $$sink$off0$us$i = $533;
         $carry1$1$us$i = 0;
        }
        HEAP32[$529 >> 2] = $$sink$off0$us$i;
        $547 = ($k$5$us$i | 0) == ($a$2$ph47$i | 0);
        if (($k$5$us$i | 0) != ($z$2$us$i + 127 & 127 | 0) | $547) $z$3$us$i = $z$2$us$i; else $z$3$us$i = ($$sink$off0$us$i | 0) == 0 ? $k$5$us$i : $z$2$us$i;
        if ($547) {
         $carry1$1$us$i$lcssa = $carry1$1$us$i;
         $z$3$us$i$lcssa = $z$3$us$i;
         break;
        } else {
         $carry1$0$us$i = $carry1$1$us$i;
         $k$5$in$us$i = $k$5$us$i + -1 | 0;
         $z$2$us$i = $z$3$us$i;
        }
       }
       $550 = $e2$0$us$i + -29 | 0;
       if (!$carry1$1$us$i$lcssa) {
        $e2$0$us$i = $550;
        $z$1$us$i = $z$3$us$i$lcssa;
       } else {
        $$lcssa59$i = $550;
        $carry1$1$lcssa$lcssa$i = $carry1$1$us$i$lcssa;
        $z$3$lcssa$lcssa$i = $z$3$us$i$lcssa;
        break;
       }
      }
     } else {
      if (($rp$2$ph45$i | 0) == 18) {
       $e2$0$us93$i = $e2$0$ph$i;
       $z$1$us94$i = $z$1$ph46$i;
      } else {
       $a$3$ph$i = $a$2$ph47$i;
       $e2$1$ph$i = $e2$0$ph$i;
       $rp$3$ph43$i = $rp$2$ph45$i;
       $z$5$ph$i = $z$1$ph46$i;
       break;
      }
      while (1) {
       if ((HEAP32[$526 >> 2] | 0) >>> 0 >= 9007199) {
        $a$3$ph$i = $a$2$ph47$i;
        $e2$1$ph$i = $e2$0$us93$i;
        $rp$3$ph43$i = 18;
        $z$5$ph$i = $z$1$us94$i;
        break L302;
       }
       $carry1$0$us98$i = 0;
       $k$5$in$us97$i = $z$1$us94$i + 127 | 0;
       $z$2$us96$i = $z$1$us94$i;
       while (1) {
        $k$5$us99$i = $k$5$in$us97$i & 127;
        $555 = $x$i + ($k$5$us99$i << 2) | 0;
        $557 = _bitshift64Shl(HEAP32[$555 >> 2] | 0, 0, 29) | 0;
        $559 = _i64Add($557 | 0, tempRet0 | 0, $carry1$0$us98$i | 0, 0) | 0;
        $560 = tempRet0;
        if ($560 >>> 0 > 0 | ($560 | 0) == 0 & $559 >>> 0 > 1e9) {
         $566 = ___udivdi3($559 | 0, $560 | 0, 1e9, 0) | 0;
         $568 = ___uremdi3($559 | 0, $560 | 0, 1e9, 0) | 0;
         $$sink$off0$us102$i = $568;
         $carry1$1$us103$i = $566;
        } else {
         $$sink$off0$us102$i = $559;
         $carry1$1$us103$i = 0;
        }
        HEAP32[$555 >> 2] = $$sink$off0$us102$i;
        $573 = ($k$5$us99$i | 0) == ($a$2$ph47$i | 0);
        if (($k$5$us99$i | 0) != ($z$2$us96$i + 127 & 127 | 0) | $573) $z$3$us106$i = $z$2$us96$i; else $z$3$us106$i = ($$sink$off0$us102$i | 0) == 0 ? $k$5$us99$i : $z$2$us96$i;
        if ($573) {
         $carry1$1$us103$i$lcssa = $carry1$1$us103$i;
         $z$3$us106$i$lcssa = $z$3$us106$i;
         break;
        } else {
         $carry1$0$us98$i = $carry1$1$us103$i;
         $k$5$in$us97$i = $k$5$us99$i + -1 | 0;
         $z$2$us96$i = $z$3$us106$i;
        }
       }
       $576 = $e2$0$us93$i + -29 | 0;
       if (!$carry1$1$us103$i$lcssa) {
        $e2$0$us93$i = $576;
        $z$1$us94$i = $z$3$us106$i$lcssa;
       } else {
        $$lcssa59$i = $576;
        $carry1$1$lcssa$lcssa$i = $carry1$1$us103$i$lcssa;
        $z$3$lcssa$lcssa$i = $z$3$us106$i$lcssa;
        break;
       }
      }
     }
     $580 = $a$2$ph47$i + 127 & 127;
     if (($580 | 0) == ($z$3$lcssa$lcssa$i | 0)) {
      $583 = $z$3$lcssa$lcssa$i + 127 & 127;
      $588 = $x$i + (($z$3$lcssa$lcssa$i + 126 & 127) << 2) | 0;
      HEAP32[$588 >> 2] = HEAP32[$588 >> 2] | HEAP32[$x$i + ($583 << 2) >> 2];
      $z$4$i = $583;
     } else $z$4$i = $z$3$lcssa$lcssa$i;
     HEAP32[$x$i + ($580 << 2) >> 2] = $carry1$1$lcssa$lcssa$i;
     $a$2$ph47$i = $580;
     $e2$0$ph$i = $$lcssa59$i;
     $rp$2$ph45$i = $rp$2$ph45$i + 9 | 0;
     $z$1$ph46$i = $z$4$i;
    }
    L333 : while (1) {
     $619 = $z$5$ph$i + 1 & 127;
     $625 = $x$i + (($z$5$ph$i + 127 & 127) << 2) | 0;
     $a$3$i$ph = $a$3$ph$i;
     $e2$1$i$ph = $e2$1$ph$i;
     $rp$3$i$ph = $rp$3$ph43$i;
     while (1) {
      $$old$i = ($rp$3$i$ph | 0) == 18;
      $$21$i = ($rp$3$i$ph | 0) > 27 ? 9 : 1;
      $a$3$i = $a$3$i$ph;
      $e2$1$i = $e2$1$i$ph;
      while (1) {
       $592 = $a$3$i & 127;
       $593 = ($592 | 0) == ($z$5$ph$i | 0);
       do if ($593) label = 226; else {
        $595 = HEAP32[$x$i + ($592 << 2) >> 2] | 0;
        if ($595 >>> 0 < 9007199) {
         label = 226;
         break;
        }
        if ($595 >>> 0 > 9007199) break;
        $599 = $a$3$i + 1 & 127;
        if (($599 | 0) == ($z$5$ph$i | 0)) {
         label = 226;
         break;
        }
        $707 = HEAP32[$x$i + ($599 << 2) >> 2] | 0;
        if ($707 >>> 0 < 254740991) {
         label = 226;
         break;
        }
        if ($$old$i & $707 >>> 0 < 254740992) {
         $632 = $592;
         $a$3$i200 = $a$3$i;
         $e2$1$i197 = $e2$1$i;
         $z$7$i = $z$5$ph$i;
         break L333;
        }
       } while (0);
       if ((label | 0) == 226) {
        label = 0;
        if ($$old$i) {
         label = 227;
         break L333;
        }
       }
       $601 = $$21$i + $e2$1$i | 0;
       if (($a$3$i | 0) == ($z$5$ph$i | 0)) {
        $a$3$i = $z$5$ph$i;
        $e2$1$i = $601;
       } else {
        $$lcssa207 = $601;
        $a$3$i$lcssa199 = $a$3$i;
        break;
       }
      }
      $604 = (1 << $$21$i) + -1 | 0;
      $605 = 1e9 >>> $$21$i;
      $a$487$i = $a$3$i$lcssa199;
      $carry3$090$i = 0;
      $k$688$i = $a$3$i$lcssa199;
      $rp$486$i = $rp$3$i$ph;
      while (1) {
       $606 = $x$i + ($k$688$i << 2) | 0;
       $607 = HEAP32[$606 >> 2] | 0;
       $610 = ($607 >>> $$21$i) + $carry3$090$i | 0;
       HEAP32[$606 >> 2] = $610;
       $611 = Math_imul($607 & $604, $605) | 0;
       $or$cond22$i = ($k$688$i | 0) == ($a$487$i | 0) & ($610 | 0) == 0;
       $k$688$i = $k$688$i + 1 & 127;
       $rp$5$i = $or$cond22$i ? $rp$486$i + -9 | 0 : $rp$486$i;
       $a$5$i = $or$cond22$i ? $k$688$i : $a$487$i;
       if (($k$688$i | 0) == ($z$5$ph$i | 0)) {
        $$lcssa208 = $611;
        $a$5$i$lcssa = $a$5$i;
        $rp$5$i$lcssa = $rp$5$i;
        break;
       } else {
        $a$487$i = $a$5$i;
        $carry3$090$i = $611;
        $rp$486$i = $rp$5$i;
       }
      }
      if (!$$lcssa208) {
       $a$3$i$ph = $a$5$i$lcssa;
       $e2$1$i$ph = $$lcssa207;
       $rp$3$i$ph = $rp$5$i$lcssa;
       continue;
      }
      if (($619 | 0) != ($a$5$i$lcssa | 0)) {
       $$lcssa207$lcssa = $$lcssa207;
       $$lcssa208$lcssa = $$lcssa208;
       $a$5$i$lcssa$lcssa = $a$5$i$lcssa;
       $rp$5$i$lcssa$lcssa = $rp$5$i$lcssa;
       break;
      }
      HEAP32[$625 >> 2] = HEAP32[$625 >> 2] | 1;
      $a$3$i$ph = $a$5$i$lcssa;
      $e2$1$i$ph = $$lcssa207;
      $rp$3$i$ph = $rp$5$i$lcssa;
     }
     HEAP32[$x$i + ($z$5$ph$i << 2) >> 2] = $$lcssa208$lcssa;
     $a$3$ph$i = $a$5$i$lcssa$lcssa;
     $e2$1$ph$i = $$lcssa207$lcssa;
     $rp$3$ph43$i = $rp$5$i$lcssa$lcssa;
     $z$5$ph$i = $619;
    }
    if ((label | 0) == 227) if ($593) {
     HEAP32[$x$i + ($619 + -1 << 2) >> 2] = 0;
     $632 = $z$5$ph$i;
     $a$3$i200 = $a$3$i;
     $e2$1$i197 = $e2$1$i;
     $z$7$i = $619;
    } else {
     $632 = $592;
     $a$3$i200 = $a$3$i;
     $e2$1$i197 = $e2$1$i;
     $z$7$i = $z$5$ph$i;
    }
    $634 = +((HEAP32[$x$i + ($632 << 2) >> 2] | 0) >>> 0);
    $636 = $a$3$i200 + 1 & 127;
    if (($636 | 0) == ($z$7$i | 0)) {
     $697 = $z$7$i + 1 & 127;
     HEAP32[$x$i + ($697 + -1 << 2) >> 2] = 0;
     $z$7$1$i = $697;
    } else $z$7$1$i = $z$7$i;
    $661 = +($sign$0 | 0);
    $643 = $661 * ($634 * 1.0e9 + +((HEAP32[$x$i + ($636 << 2) >> 2] | 0) >>> 0));
    $681 = $e2$1$i197 + 53 | 0;
    $638 = $681 - $emin$0$ph | 0;
    if (($638 | 0) < ($bits$0$ph | 0)) if (($638 | 0) < 0) {
     $$01335$i = 0;
     $denormal$034$i = 1;
     label = 241;
    } else {
     $$013$i = $638;
     $denormal$0$i = 1;
     label = 240;
    } else {
     $$013$i = $bits$0$ph;
     $denormal$0$i = 0;
     label = 240;
    }
    if ((label | 0) == 240) if (($$013$i | 0) < 53) {
     $$01335$i = $$013$i;
     $denormal$034$i = $denormal$0$i;
     label = 241;
    } else {
     $$01336$i = $$013$i;
     $bias$0$i24 = 0.0;
     $denormal$033$i = $denormal$0$i;
     $frac$0$i = 0.0;
     $y$1$i23 = $643;
    }
    if ((label | 0) == 241) {
     $644 = +_copysignl(+_scalbn(1.0, 105 - $$01335$i | 0), $643);
     $647 = +_fmodl($643, +_scalbn(1.0, 53 - $$01335$i | 0));
     $$01336$i = $$01335$i;
     $bias$0$i24 = $644;
     $denormal$033$i = $denormal$034$i;
     $frac$0$i = $647;
     $y$1$i23 = $644 + ($643 - $647);
    }
    $651 = $a$3$i200 + 2 & 127;
    do if (($651 | 0) == ($z$7$1$i | 0)) $frac$2$i = $frac$0$i; else {
     $654 = HEAP32[$x$i + ($651 << 2) >> 2] | 0;
     do if ($654 >>> 0 < 5e8) {
      if (!$654) if (($a$3$i200 + 3 & 127 | 0) == ($z$7$1$i | 0)) {
       $frac$1$i = $frac$0$i;
       break;
      }
      $frac$1$i = $661 * .25 + $frac$0$i;
     } else {
      if ($654 >>> 0 > 5e8) {
       $frac$1$i = $661 * .75 + $frac$0$i;
       break;
      }
      if (($a$3$i200 + 3 & 127 | 0) == ($z$7$1$i | 0)) {
       $frac$1$i = $661 * .5 + $frac$0$i;
       break;
      } else {
       $frac$1$i = $661 * .75 + $frac$0$i;
       break;
      }
     } while (0);
     if ((53 - $$01336$i | 0) <= 1) {
      $frac$2$i = $frac$1$i;
      break;
     }
     if (+_fmodl($frac$1$i, 1.0) != 0.0) {
      $frac$2$i = $frac$1$i;
      break;
     }
     $frac$2$i = $frac$1$i + 1.0;
    } while (0);
    $679 = $y$1$i23 + $frac$2$i - $bias$0$i24;
    do if (($681 & 2147483647 | 0) > (-2 - $sum$i | 0)) {
     if (!(+Math_abs(+$679) >= 9007199254740992.0)) {
      $denormal$2$i = $denormal$033$i;
      $e2$2$i = $e2$1$i197;
      $y$2$i25 = $679;
     } else {
      $denormal$2$i = ($$01336$i | 0) == ($638 | 0) & ($denormal$033$i | 0) != 0 ? 0 : $denormal$033$i;
      $e2$2$i = $e2$1$i197 + 1 | 0;
      $y$2$i25 = $679 * .5;
     }
     if (($e2$2$i + 50 | 0) <= ($324 | 0)) if (!($frac$2$i != 0.0 & ($denormal$2$i | 0) != 0)) {
      $e2$3$i = $e2$2$i;
      $y$3$i = $y$2$i25;
      break;
     }
     HEAP32[(___errno_location() | 0) >> 2] = 34;
     $e2$3$i = $e2$2$i;
     $y$3$i = $y$2$i25;
    } else {
     $e2$3$i = $e2$1$i197;
     $y$3$i = $679;
    } while (0);
    $$0$i27 = +_scalbnl($y$3$i, $e2$3$i);
   } while (0);
   $$0 = $$0$i27;
   STACKTOP = sp;
   return +$$0;
  } while (0);
  if (HEAP32[$1 >> 2] | 0) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  ___shlim($f, 0);
  $$0 = 0.0;
  STACKTOP = sp;
  return +$$0;
 } while (0);
 if ((label | 0) == 23) {
  $42 = (HEAP32[$1 >> 2] | 0) == 0;
  if (!$42) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
  if (!($i$0$lcssa >>> 0 < 4 | ($pok | 0) == 0 | $42)) {
   $i$1 = $i$0$lcssa;
   do {
    HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
    $i$1 = $i$1 + -1 | 0;
   } while ($i$1 >>> 0 > 3);
  }
 }
 $$0 = +($sign$0 | 0) * inf;
 STACKTOP = sp;
 return +$$0;
}

function __ZN12b2EPCollider7CollideEP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS7_($this, $manifold, $edgeA, $xfA, $polygonB, $xfB) {
 $this = $this | 0;
 $manifold = $manifold | 0;
 $edgeA = $edgeA | 0;
 $xfA = $xfA | 0;
 $polygonB = $polygonB | 0;
 $xfB = $xfB | 0;
 var $$ = 0, $$43 = 0, $$in = 0, $$in176 = 0, $$in177 = 0, $$in178 = 0, $$in179 = 0, $$in180 = 0, $$pre = 0.0, $$pre159 = 0.0, $0 = 0, $1001 = 0, $1002 = 0, $1006 = 0, $1010 = 0, $1016 = 0, $1018 = 0, $102 = 0, $1021 = 0, $1022 = 0, $1028 = 0, $1030 = 0, $1033 = 0, $1034 = 0, $104 = 0, $1040 = 0, $1042 = 0, $1045 = 0, $1046 = 0, $1050 = 0.0, $1051 = 0.0, $1052 = 0.0, $1053 = 0.0, $1054 = 0.0, $1055 = 0.0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0.0, $1061 = 0, $1062 = 0.0, $1064 = 0, $1068 = 0, $107 = 0, $1070 = 0, $1072 = 0.0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1088 = 0, $1089 = 0, $1091 = 0, $1094 = 0, $1095 = 0, $11 = 0.0, $1100 = 0, $1102 = 0, $1105 = 0, $1106 = 0, $1110 = 0.0, $1111 = 0.0, $1112 = 0.0, $1113 = 0.0, $1114 = 0.0, $1117 = 0.0, $1122 = 0.0, $1124 = 0, $1126 = 0, $1131 = 0, $1132 = 0, $1138 = 0, $114 = 0, $1143 = 0, $1144 = 0, $1148 = 0.0, $1149 = 0.0, $1158 = 0.0, $1161 = 0.0, $1163 = 0.0, $1164 = 0.0, $1166 = 0.0, $117 = 0, $1172 = 0.0, $1173 = 0.0, $1174 = 0, $118 = 0.0, $1182 = 0.0, $1185 = 0.0, $119 = 0.0, $1191 = 0.0, $1192 = 0, $1197 = 0, $1198 = 0, $120 = 0, $1202 = 0, $1205 = 0, $121 = 0.0, $1214 = 0, $122 = 0.0, $1224 = 0.0, $1226 = 0, $1231 = 0, $1232 = 0, $1236 = 0, $1239 = 0, $1251 = 0.0, $1253 = 0.0, $1254 = 0.0, $1256 = 0.0, $126 = 0.0, $1262 = 0.0, $1263 = 0.0, $1264 = 0, $1272 = 0, $128 = 0.0, $129 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $15 = 0.0, $150 = 0.0, $152 = 0.0, $155 = 0.0, $156 = 0.0, $158 = 0.0, $16 = 0.0, $169 = 0.0, $170 = 0.0, $174 = 0.0, $176 = 0.0, $179 = 0.0, $180 = 0.0, $181 = 0, $182 = 0.0, $183 = 0, $187 = 0, $19 = 0.0, $192 = 0.0, $197 = 0, $199 = 0, $2 = 0.0, $200 = 0, $205 = 0, $206 = 0, $207 = 0, $213 = 0, $218 = 0, $219 = 0, $225 = 0, $230 = 0, $231 = 0, $236 = 0.0, $237 = 0.0, $238 = 0, $24 = 0.0, $243 = 0, $248 = 0, $258 = 0, $260 = 0, $261 = 0, $266 = 0, $267 = 0, $268 = 0, $27 = 0.0, $274 = 0, $279 = 0, $280 = 0, $285 = 0, $290 = 0, $291 = 0, $296 = 0.0, $297 = 0.0, $298 = 0, $299 = 0, $30 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0.0, $310 = 0, $319 = 0.0, $32 = 0.0, $320 = 0.0, $321 = 0, $33 = 0, $331 = 0, $333 = 0, $334 = 0, $339 = 0, $340 = 0, $341 = 0, $346 = 0, $351 = 0, $352 = 0, $358 = 0, $363 = 0, $364 = 0, $369 = 0.0, $370 = 0.0, $371 = 0, $372 = 0, $38 = 0, $381 = 0.0, $382 = 0.0, $383 = 0, $394 = 0.0, $395 = 0.0, $396 = 0, $4 = 0.0, $404 = 0, $406 = 0, $407 = 0, $409 = 0, $412 = 0, $413 = 0, $418 = 0, $423 = 0, $428 = 0.0, $429 = 0.0, $43 = 0, $430 = 0, $431 = 0, $440 = 0.0, $441 = 0.0, $442 = 0, $45 = 0.0, $453 = 0.0, $454 = 0.0, $455 = 0, $459 = 0, $462 = 0, $463 = 0, $466 = 0, $468 = 0, $469 = 0, $47 = 0, $474 = 0, $475 = 0, $476 = 0, $482 = 0, $487 = 0, $488 = 0, $49 = 0.0, $497 = 0.0, $498 = 0.0, $499 = 0, $504 = 0.0, $505 = 0.0, $506 = 0, $511 = 0, $513 = 0, $516 = 0, $517 = 0, $52 = 0.0, $524 = 0, $530 = 0, $532 = 0, $533 = 0, $535 = 0, $538 = 0, $539 = 0, $544 = 0, $550 = 0.0, $551 = 0.0, $552 = 0, $557 = 0.0, $558 = 0.0, $559 = 0, $56 = 0, $560 = 0, $565 = 0, $57 = 0.0, $570 = 0, $571 = 0, $58 = 0.0, $582 = 0.0, $583 = 0.0, $584 = 0, $588 = 0, $59 = 0.0, $591 = 0, $593 = 0, $594 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $610 = 0.0, $611 = 0.0, $612 = 0, $618 = 0, $623 = 0, $624 = 0, $629 = 0.0, $630 = 0.0, $631 = 0, $636 = 0, $641 = 0, $646 = 0, $647 = 0, $653 = 0, $655 = 0, $656 = 0, $658 = 0, $66 = 0, $661 = 0, $662 = 0, $668 = 0.0, $669 = 0.0, $670 = 0, $675 = 0, $68 = 0, $680 = 0.0, $681 = 0.0, $682 = 0, $683 = 0, $694 = 0.0, $695 = 0.0, $696 = 0, $7 = 0.0, $701 = 0, $706 = 0, $707 = 0, $71 = 0, $713 = 0, $714 = 0, $716 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $727 = 0.0, $728 = 0.0, $729 = 0, $734 = 0, $739 = 0.0, $740 = 0.0, $741 = 0, $742 = 0, $747 = 0, $749 = 0, $752 = 0, $753 = 0, $758 = 0, $76 = 0, $762 = 0, $764 = 0, $768 = 0.0, $770 = 0.0, $772 = 0.0, $774 = 0.0, $78 = 0, $784 = 0.0, $785 = 0.0, $786 = 0, $791 = 0.0, $793 = 0.0, $795 = 0.0, $797 = 0.0, $80 = 0, $803 = 0.0, $804 = 0.0, $805 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $818 = 0.0, $819 = 0.0, $821 = 0.0, $823 = 0.0, $83 = 0, $832 = 0.0, $834 = 0.0, $838 = 0, $84 = 0, $841 = 0.0, $849 = 0, $850 = 0, $851 = 0, $852 = 0, $859 = 0.0, $861 = 0.0, $871 = 0.0, $872 = 0, $875 = 0, $878 = 0, $88 = 0, $883 = 0, $884 = 0, $888 = 0, $895 = 0, $9 = 0.0, $90 = 0, $900 = 0, $901 = 0, $905 = 0, $914 = 0, $916 = 0, $919 = 0, $92 = 0, $920 = 0, $925 = 0, $927 = 0, $930 = 0, $931 = 0, $936 = 0, $938 = 0, $941 = 0, $942 = 0, $948 = 0, $95 = 0, $950 = 0, $953 = 0, $954 = 0, $959 = 0, $96 = 0, $961 = 0, $964 = 0, $965 = 0, $974 = 0, $975 = 0, $976 = 0, $980 = 0, $985 = 0, $986 = 0, $990 = 0, $991 = 0, $996 = 0, $bestIndex$0$lcssa = 0, $bestIndex$0140 = 0, $bestIndex$1 = 0, $bestValue$0141 = 0.0, $bitcast154 = 0.0, $bitcast156 = 0.0, $clipPoints1 = 0, $clipPoints2 = 0, $convex1$0$off0 = 0, $i$01$i = 0, $i$0145 = 0, $i1$0142 = 0, $ie = 0, $offset0$0 = 0.0, $pointCount$0$lcssa = 0, $pointCount$1 = 0, $pointCount$1$us = 0, $polygonAxis = 0, $primaryAxis$sroa$0$0184 = 0, $rf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $polygonAxis = sp + 128 | 0;
 $ie = sp + 24 | 0;
 $rf = sp + 72 | 0;
 $clipPoints1 = sp + 48 | 0;
 $clipPoints2 = sp;
 $0 = $this + 132 | 0;
 $2 = +HEAPF32[$xfA + 12 >> 2];
 $4 = +HEAPF32[$xfB + 8 >> 2];
 $7 = +HEAPF32[$xfA + 8 >> 2];
 $9 = +HEAPF32[$xfB + 12 >> 2];
 $11 = $2 * $4 - $7 * $9;
 $14 = $4 * $7 + $2 * $9;
 $15 = +$11;
 $16 = +$14;
 $19 = +HEAPF32[$xfB >> 2] - +HEAPF32[$xfA >> 2];
 $24 = +HEAPF32[$xfB + 4 >> 2] - +HEAPF32[$xfA + 4 >> 2];
 $27 = $2 * $19 + $7 * $24;
 $30 = $2 * $24 - $7 * $19;
 $31 = +$27;
 $32 = +$30;
 $33 = $0;
 HEAPF32[$33 >> 2] = $31;
 HEAPF32[$33 + 4 >> 2] = $32;
 $38 = $this + 140 | 0;
 HEAPF32[$38 >> 2] = $15;
 HEAPF32[$38 + 4 >> 2] = $16;
 $43 = $this + 144 | 0;
 $45 = +HEAPF32[$polygonB + 12 >> 2];
 $47 = $this + 140 | 0;
 $49 = +HEAPF32[$polygonB + 16 >> 2];
 $52 = $27 + ($14 * $45 - $11 * $49);
 $56 = $this + 136 | 0;
 $57 = $45 * $11 + $14 * $49 + $30;
 $58 = +$52;
 $59 = +$57;
 $60 = $this + 148 | 0;
 HEAPF32[$60 >> 2] = $58;
 HEAPF32[$60 + 4 >> 2] = $59;
 $66 = $edgeA + 28 | 0;
 $68 = HEAP32[$66 >> 2] | 0;
 $71 = HEAP32[$66 + 4 >> 2] | 0;
 $72 = $this + 156 | 0;
 HEAP32[$72 >> 2] = $68;
 HEAP32[$72 + 4 >> 2] = $71;
 $76 = $this + 164 | 0;
 $78 = $edgeA + 12 | 0;
 $80 = HEAP32[$78 >> 2] | 0;
 $83 = HEAP32[$78 + 4 >> 2] | 0;
 $84 = $76;
 HEAP32[$84 >> 2] = $80;
 HEAP32[$84 + 4 >> 2] = $83;
 $88 = $this + 172 | 0;
 $90 = $edgeA + 20 | 0;
 $92 = HEAP32[$90 >> 2] | 0;
 $95 = HEAP32[$90 + 4 >> 2] | 0;
 $96 = $88;
 HEAP32[$96 >> 2] = $92;
 HEAP32[$96 + 4 >> 2] = $95;
 $102 = $edgeA + 36 | 0;
 $104 = HEAP32[$102 >> 2] | 0;
 $107 = HEAP32[$102 + 4 >> 2] | 0;
 $108 = $this + 180 | 0;
 HEAP32[$108 >> 2] = $104;
 HEAP32[$108 + 4 >> 2] = $107;
 $114 = (HEAP8[$edgeA + 44 >> 0] | 0) != 0;
 $117 = (HEAP8[$edgeA + 45 >> 0] | 0) != 0;
 $bitcast154 = (HEAP32[tempDoublePtr >> 2] = $92, +HEAPF32[tempDoublePtr >> 2]);
 $bitcast156 = (HEAP32[tempDoublePtr >> 2] = $80, +HEAPF32[tempDoublePtr >> 2]);
 $118 = $bitcast154 - $bitcast156;
 $119 = (HEAP32[tempDoublePtr >> 2] = $95, +HEAPF32[tempDoublePtr >> 2]);
 $120 = $this + 168 | 0;
 $121 = (HEAP32[tempDoublePtr >> 2] = $83, +HEAPF32[tempDoublePtr >> 2]);
 $122 = $119 - $121;
 $126 = +Math_sqrt(+($118 * $118 + $122 * $122));
 $128 = (HEAP32[tempDoublePtr >> 2] = $68, +HEAPF32[tempDoublePtr >> 2]);
 $129 = (HEAP32[tempDoublePtr >> 2] = $71, +HEAPF32[tempDoublePtr >> 2]);
 $130 = (HEAP32[tempDoublePtr >> 2] = $104, +HEAPF32[tempDoublePtr >> 2]);
 $131 = (HEAP32[tempDoublePtr >> 2] = $107, +HEAPF32[tempDoublePtr >> 2]);
 if ($126 < 1.1920928955078125e-07) {
  $137 = $118;
  $138 = $122;
 } else {
  $132 = 1.0 / $126;
  $137 = $118 * $132;
  $138 = $122 * $132;
 }
 $135 = $this + 196 | 0;
 $136 = -$137;
 HEAPF32[$135 >> 2] = $138;
 $139 = $this + 200 | 0;
 HEAPF32[$139 >> 2] = $136;
 $144 = ($52 - $bitcast156) * $138 + ($57 - $121) * $136;
 if ($114) {
  $145 = $bitcast156 - $128;
  $146 = $121 - $129;
  $150 = +Math_sqrt(+($145 * $145 + $146 * $146));
  if ($150 < 1.1920928955078125e-07) {
   $156 = $145;
   $158 = $146;
  } else {
   $152 = 1.0 / $150;
   $156 = $145 * $152;
   $158 = $146 * $152;
  }
  $155 = -$156;
  HEAPF32[$this + 188 >> 2] = $158;
  HEAPF32[$this + 192 >> 2] = $155;
  $convex1$0$off0 = $138 * $156 - $137 * $158 >= 0.0;
  $offset0$0 = ($52 - $128) * $158 + ($57 - $129) * $155;
 } else {
  $convex1$0$off0 = 0;
  $offset0$0 = 0.0;
 }
 L10 : do if ($117) {
  $169 = $130 - $bitcast154;
  $170 = $131 - $119;
  $174 = +Math_sqrt(+($169 * $169 + $170 * $170));
  if ($174 < 1.1920928955078125e-07) {
   $180 = $169;
   $182 = $170;
  } else {
   $176 = 1.0 / $174;
   $180 = $169 * $176;
   $182 = $170 * $176;
  }
  $179 = -$180;
  $181 = $this + 204 | 0;
  HEAPF32[$181 >> 2] = $182;
  $183 = $this + 208 | 0;
  HEAPF32[$183 >> 2] = $179;
  $187 = $137 * $182 - $138 * $180 > 0.0;
  $192 = ($52 - $bitcast154) * $182 + ($57 - $119) * $179;
  if (!$114) {
   $588 = $144 >= 0.0;
   if (!$117) {
    HEAP8[$this + 248 >> 0] = $588 & 1;
    $713 = $this + 212 | 0;
    if ($588) {
     $720 = $713;
     label = 64;
     break;
    } else {
     $741 = $713;
     label = 65;
     break;
    }
   }
   if ($187) {
    if ($588) {
     HEAP8[$this + 248 >> 0] = 1;
     $600 = $this + 212 | 0;
    } else {
     $591 = $192 >= 0.0;
     HEAP8[$this + 248 >> 0] = $591 & 1;
     $593 = $this + 212 | 0;
     if ($591) $600 = $593; else {
      $629 = +-$138;
      $630 = +$137;
      $631 = $593;
      HEAPF32[$631 >> 2] = $629;
      HEAPF32[$631 + 4 >> 2] = $630;
      $636 = $this + 228 | 0;
      HEAPF32[$636 >> 2] = $629;
      HEAPF32[$636 + 4 >> 2] = $630;
      $641 = $135;
      $646 = HEAP32[$641 + 4 >> 2] | 0;
      $647 = $this + 236 | 0;
      HEAP32[$647 >> 2] = HEAP32[$641 >> 2];
      HEAP32[$647 + 4 >> 2] = $646;
      break;
     }
    }
    $594 = $135;
    $599 = HEAP32[$594 + 4 >> 2] | 0;
    $601 = $600;
    HEAP32[$601 >> 2] = HEAP32[$594 >> 2];
    HEAP32[$601 + 4 >> 2] = $599;
    $610 = +-+HEAPF32[$135 >> 2];
    $611 = +-+HEAPF32[$139 >> 2];
    $612 = $this + 228 | 0;
    HEAPF32[$612 >> 2] = $610;
    HEAPF32[$612 + 4 >> 2] = $611;
    $618 = $this + 204 | 0;
    $623 = HEAP32[$618 + 4 >> 2] | 0;
    $624 = $this + 236 | 0;
    HEAP32[$624 >> 2] = HEAP32[$618 >> 2];
    HEAP32[$624 + 4 >> 2] = $623;
    break;
   } else {
    if ($588) {
     $653 = $192 >= 0.0;
     HEAP8[$this + 248 >> 0] = $653 & 1;
     $655 = $this + 212 | 0;
     if ($653) {
      $656 = $135;
      $658 = HEAP32[$656 >> 2] | 0;
      $661 = HEAP32[$656 + 4 >> 2] | 0;
      $662 = $655;
      HEAP32[$662 >> 2] = $658;
      HEAP32[$662 + 4 >> 2] = $661;
      $668 = +-(HEAP32[tempDoublePtr >> 2] = $658, +HEAPF32[tempDoublePtr >> 2]);
      $669 = +$137;
      $670 = $this + 228 | 0;
      HEAPF32[$670 >> 2] = $668;
      HEAPF32[$670 + 4 >> 2] = $669;
      $675 = $this + 236 | 0;
      HEAP32[$675 >> 2] = $658;
      HEAP32[$675 + 4 >> 2] = $661;
      break;
     } else $682 = $655;
    } else {
     HEAP8[$this + 248 >> 0] = 0;
     $682 = $this + 212 | 0;
    }
    $680 = +-$138;
    $681 = +$137;
    $683 = $682;
    HEAPF32[$683 >> 2] = $680;
    HEAPF32[$683 + 4 >> 2] = $681;
    $694 = +-+HEAPF32[$this + 204 >> 2];
    $695 = +-+HEAPF32[$this + 208 >> 2];
    $696 = $this + 228 | 0;
    HEAPF32[$696 >> 2] = $694;
    HEAPF32[$696 + 4 >> 2] = $695;
    $701 = $135;
    $706 = HEAP32[$701 + 4 >> 2] | 0;
    $707 = $this + 236 | 0;
    HEAP32[$707 >> 2] = HEAP32[$701 >> 2];
    HEAP32[$707 + 4 >> 2] = $706;
    break;
   }
  }
  if ($convex1$0$off0 & $187) {
   if (!($offset0$0 >= 0.0) & !($144 >= 0.0)) {
    $197 = $192 >= 0.0;
    HEAP8[$this + 248 >> 0] = $197 & 1;
    $199 = $this + 212 | 0;
    if ($197) $206 = $199; else {
     $236 = +-$138;
     $237 = +$137;
     $238 = $199;
     HEAPF32[$238 >> 2] = $236;
     HEAPF32[$238 + 4 >> 2] = $237;
     $243 = $this + 228 | 0;
     HEAPF32[$243 >> 2] = $236;
     HEAPF32[$243 + 4 >> 2] = $237;
     $248 = $this + 236 | 0;
     HEAPF32[$248 >> 2] = $236;
     HEAPF32[$248 + 4 >> 2] = $237;
     break;
    }
   } else {
    HEAP8[$this + 248 >> 0] = 1;
    $206 = $this + 212 | 0;
   }
   $200 = $135;
   $205 = HEAP32[$200 + 4 >> 2] | 0;
   $207 = $206;
   HEAP32[$207 >> 2] = HEAP32[$200 >> 2];
   HEAP32[$207 + 4 >> 2] = $205;
   $213 = $this + 188 | 0;
   $218 = HEAP32[$213 + 4 >> 2] | 0;
   $219 = $this + 228 | 0;
   HEAP32[$219 >> 2] = HEAP32[$213 >> 2];
   HEAP32[$219 + 4 >> 2] = $218;
   $225 = $this + 204 | 0;
   $230 = HEAP32[$225 + 4 >> 2] | 0;
   $231 = $this + 236 | 0;
   HEAP32[$231 >> 2] = HEAP32[$225 >> 2];
   HEAP32[$231 + 4 >> 2] = $230;
   break;
  }
  if ($convex1$0$off0) {
   do if (!($offset0$0 >= 0.0)) {
    if (!($144 >= 0.0)) {
     HEAP8[$this + 248 >> 0] = 0;
     $298 = $this + 212 | 0;
    } else {
     $258 = $192 >= 0.0;
     HEAP8[$this + 248 >> 0] = $258 & 1;
     $260 = $this + 212 | 0;
     if ($258) {
      $267 = $260;
      break;
     } else $298 = $260;
    }
    $296 = +-$138;
    $297 = +$137;
    $299 = $298;
    HEAPF32[$299 >> 2] = $296;
    HEAPF32[$299 + 4 >> 2] = $297;
    $308 = +-+HEAPF32[$181 >> 2];
    $309 = +-+HEAPF32[$183 >> 2];
    $310 = $this + 228 | 0;
    HEAPF32[$310 >> 2] = $308;
    HEAPF32[$310 + 4 >> 2] = $309;
    $319 = +-+HEAPF32[$135 >> 2];
    $320 = +-+HEAPF32[$139 >> 2];
    $321 = $this + 236 | 0;
    HEAPF32[$321 >> 2] = $319;
    HEAPF32[$321 + 4 >> 2] = $320;
    break L10;
   } else {
    HEAP8[$this + 248 >> 0] = 1;
    $267 = $this + 212 | 0;
   } while (0);
   $261 = $135;
   $266 = HEAP32[$261 + 4 >> 2] | 0;
   $268 = $267;
   HEAP32[$268 >> 2] = HEAP32[$261 >> 2];
   HEAP32[$268 + 4 >> 2] = $266;
   $274 = $this + 188 | 0;
   $279 = HEAP32[$274 + 4 >> 2] | 0;
   $280 = $this + 228 | 0;
   HEAP32[$280 >> 2] = HEAP32[$274 >> 2];
   HEAP32[$280 + 4 >> 2] = $279;
   $285 = $135;
   $290 = HEAP32[$285 + 4 >> 2] | 0;
   $291 = $this + 236 | 0;
   HEAP32[$291 >> 2] = HEAP32[$285 >> 2];
   HEAP32[$291 + 4 >> 2] = $290;
   break;
  }
  if (!$187) {
   if (!($offset0$0 >= 0.0) | !($144 >= 0.0)) {
    HEAP8[$this + 248 >> 0] = 0;
    $430 = $this + 212 | 0;
   } else {
    $404 = $192 >= 0.0;
    HEAP8[$this + 248 >> 0] = $404 & 1;
    $406 = $this + 212 | 0;
    if ($404) {
     $407 = $135;
     $409 = HEAP32[$407 >> 2] | 0;
     $412 = HEAP32[$407 + 4 >> 2] | 0;
     $413 = $406;
     HEAP32[$413 >> 2] = $409;
     HEAP32[$413 + 4 >> 2] = $412;
     $418 = $this + 228 | 0;
     HEAP32[$418 >> 2] = $409;
     HEAP32[$418 + 4 >> 2] = $412;
     $423 = $this + 236 | 0;
     HEAP32[$423 >> 2] = $409;
     HEAP32[$423 + 4 >> 2] = $412;
     break;
    } else $430 = $406;
   }
   $428 = +-$138;
   $429 = +$137;
   $431 = $430;
   HEAPF32[$431 >> 2] = $428;
   HEAPF32[$431 + 4 >> 2] = $429;
   $440 = +-+HEAPF32[$181 >> 2];
   $441 = +-+HEAPF32[$183 >> 2];
   $442 = $this + 228 | 0;
   HEAPF32[$442 >> 2] = $440;
   HEAPF32[$442 + 4 >> 2] = $441;
   $453 = +-+HEAPF32[$this + 188 >> 2];
   $454 = +-+HEAPF32[$this + 192 >> 2];
   $455 = $this + 236 | 0;
   HEAPF32[$455 >> 2] = $453;
   HEAPF32[$455 + 4 >> 2] = $454;
   break;
  }
  do if (!($192 >= 0.0)) {
   if (!($offset0$0 >= 0.0)) {
    HEAP8[$this + 248 >> 0] = 0;
    $371 = $this + 212 | 0;
   } else {
    $331 = $144 >= 0.0;
    HEAP8[$this + 248 >> 0] = $331 & 1;
    $333 = $this + 212 | 0;
    if ($331) {
     $340 = $333;
     break;
    } else $371 = $333;
   }
   $369 = +-$138;
   $370 = +$137;
   $372 = $371;
   HEAPF32[$372 >> 2] = $369;
   HEAPF32[$372 + 4 >> 2] = $370;
   $381 = +-+HEAPF32[$135 >> 2];
   $382 = +-+HEAPF32[$139 >> 2];
   $383 = $this + 228 | 0;
   HEAPF32[$383 >> 2] = $381;
   HEAPF32[$383 + 4 >> 2] = $382;
   $394 = +-+HEAPF32[$this + 188 >> 2];
   $395 = +-+HEAPF32[$this + 192 >> 2];
   $396 = $this + 236 | 0;
   HEAPF32[$396 >> 2] = $394;
   HEAPF32[$396 + 4 >> 2] = $395;
   break L10;
  } else {
   HEAP8[$this + 248 >> 0] = 1;
   $340 = $this + 212 | 0;
  } while (0);
  $334 = $135;
  $339 = HEAP32[$334 + 4 >> 2] | 0;
  $341 = $340;
  HEAP32[$341 >> 2] = HEAP32[$334 >> 2];
  HEAP32[$341 + 4 >> 2] = $339;
  $346 = $135;
  $351 = HEAP32[$346 + 4 >> 2] | 0;
  $352 = $this + 228 | 0;
  HEAP32[$352 >> 2] = HEAP32[$346 >> 2];
  HEAP32[$352 + 4 >> 2] = $351;
  $358 = $this + 204 | 0;
  $363 = HEAP32[$358 + 4 >> 2] | 0;
  $364 = $this + 236 | 0;
  HEAP32[$364 >> 2] = HEAP32[$358 >> 2];
  HEAP32[$364 + 4 >> 2] = $363;
 } else {
  if (!$114) {
   $459 = $144 >= 0.0;
   HEAP8[$this + 248 >> 0] = $459 & 1;
   $462 = $this + 212 | 0;
   if ($459) {
    $720 = $462;
    label = 64;
    break;
   } else {
    $741 = $462;
    label = 65;
    break;
   }
  }
  $463 = $offset0$0 >= 0.0;
  if ($convex1$0$off0) {
   if ($463) {
    HEAP8[$this + 248 >> 0] = 1;
    $475 = $this + 212 | 0;
   } else {
    $466 = $144 >= 0.0;
    HEAP8[$this + 248 >> 0] = $466 & 1;
    $468 = $this + 212 | 0;
    if ($466) $475 = $468; else {
     $504 = +-$138;
     $505 = +$137;
     $506 = $468;
     HEAPF32[$506 >> 2] = $504;
     HEAPF32[$506 + 4 >> 2] = $505;
     $511 = $135;
     $513 = HEAP32[$511 >> 2] | 0;
     $516 = HEAP32[$511 + 4 >> 2] | 0;
     $517 = $this + 228 | 0;
     HEAP32[$517 >> 2] = $513;
     HEAP32[$517 + 4 >> 2] = $516;
     $524 = $this + 236 | 0;
     HEAPF32[$524 >> 2] = -(HEAP32[tempDoublePtr >> 2] = $513, +HEAPF32[tempDoublePtr >> 2]);
     HEAPF32[$524 + 4 >> 2] = $505;
     break;
    }
   }
   $469 = $135;
   $474 = HEAP32[$469 + 4 >> 2] | 0;
   $476 = $475;
   HEAP32[$476 >> 2] = HEAP32[$469 >> 2];
   HEAP32[$476 + 4 >> 2] = $474;
   $482 = $this + 188 | 0;
   $487 = HEAP32[$482 + 4 >> 2] | 0;
   $488 = $this + 228 | 0;
   HEAP32[$488 >> 2] = HEAP32[$482 >> 2];
   HEAP32[$488 + 4 >> 2] = $487;
   $497 = +-+HEAPF32[$135 >> 2];
   $498 = +-+HEAPF32[$139 >> 2];
   $499 = $this + 236 | 0;
   HEAPF32[$499 >> 2] = $497;
   HEAPF32[$499 + 4 >> 2] = $498;
   break;
  } else {
   if ($463) {
    $530 = $144 >= 0.0;
    HEAP8[$this + 248 >> 0] = $530 & 1;
    $532 = $this + 212 | 0;
    if ($530) {
     $533 = $135;
     $535 = HEAP32[$533 >> 2] | 0;
     $538 = HEAP32[$533 + 4 >> 2] | 0;
     $539 = $532;
     HEAP32[$539 >> 2] = $535;
     HEAP32[$539 + 4 >> 2] = $538;
     $544 = $this + 228 | 0;
     HEAP32[$544 >> 2] = $535;
     HEAP32[$544 + 4 >> 2] = $538;
     $550 = +-(HEAP32[tempDoublePtr >> 2] = $535, +HEAPF32[tempDoublePtr >> 2]);
     $551 = +$137;
     $552 = $this + 236 | 0;
     HEAPF32[$552 >> 2] = $550;
     HEAPF32[$552 + 4 >> 2] = $551;
     break;
    } else $559 = $532;
   } else {
    HEAP8[$this + 248 >> 0] = 0;
    $559 = $this + 212 | 0;
   }
   $557 = +-$138;
   $558 = +$137;
   $560 = $559;
   HEAPF32[$560 >> 2] = $557;
   HEAPF32[$560 + 4 >> 2] = $558;
   $565 = $135;
   $570 = HEAP32[$565 + 4 >> 2] | 0;
   $571 = $this + 228 | 0;
   HEAP32[$571 >> 2] = HEAP32[$565 >> 2];
   HEAP32[$571 + 4 >> 2] = $570;
   $582 = +-+HEAPF32[$this + 188 >> 2];
   $583 = +-+HEAPF32[$this + 192 >> 2];
   $584 = $this + 236 | 0;
   HEAPF32[$584 >> 2] = $582;
   HEAPF32[$584 + 4 >> 2] = $583;
   break;
  }
 } while (0);
 if ((label | 0) == 64) {
  $714 = $135;
  $716 = HEAP32[$714 >> 2] | 0;
  $719 = HEAP32[$714 + 4 >> 2] | 0;
  $721 = $720;
  HEAP32[$721 >> 2] = $716;
  HEAP32[$721 + 4 >> 2] = $719;
  $727 = +-(HEAP32[tempDoublePtr >> 2] = $716, +HEAPF32[tempDoublePtr >> 2]);
  $728 = +$137;
  $729 = $this + 228 | 0;
  HEAPF32[$729 >> 2] = $727;
  HEAPF32[$729 + 4 >> 2] = $728;
  $734 = $this + 236 | 0;
  HEAPF32[$734 >> 2] = $727;
  HEAPF32[$734 + 4 >> 2] = $728;
 } else if ((label | 0) == 65) {
  $739 = +-$138;
  $740 = +$137;
  $742 = $741;
  HEAPF32[$742 >> 2] = $739;
  HEAPF32[$742 + 4 >> 2] = $740;
  $747 = $135;
  $749 = HEAP32[$747 >> 2] | 0;
  $752 = HEAP32[$747 + 4 >> 2] | 0;
  $753 = $this + 228 | 0;
  HEAP32[$753 >> 2] = $749;
  HEAP32[$753 + 4 >> 2] = $752;
  $758 = $this + 236 | 0;
  HEAP32[$758 >> 2] = $749;
  HEAP32[$758 + 4 >> 2] = $752;
 }
 $762 = $polygonB + 148 | 0;
 $764 = $this + 128 | 0;
 HEAP32[$764 >> 2] = HEAP32[$762 >> 2];
 if ((HEAP32[$762 >> 2] | 0) > 0) {
  $i$0145 = 0;
  do {
   $768 = +HEAPF32[$43 >> 2];
   $770 = +HEAPF32[$polygonB + ($i$0145 << 3) + 20 >> 2];
   $772 = +HEAPF32[$47 >> 2];
   $774 = +HEAPF32[$polygonB + ($i$0145 << 3) + 24 >> 2];
   $784 = +(+HEAPF32[$0 >> 2] + ($768 * $770 - $772 * $774));
   $785 = +($770 * $772 + $768 * $774 + +HEAPF32[$56 >> 2]);
   $786 = $this + ($i$0145 << 3) | 0;
   HEAPF32[$786 >> 2] = $784;
   HEAPF32[$786 + 4 >> 2] = $785;
   $791 = +HEAPF32[$43 >> 2];
   $793 = +HEAPF32[$polygonB + ($i$0145 << 3) + 84 >> 2];
   $795 = +HEAPF32[$47 >> 2];
   $797 = +HEAPF32[$polygonB + ($i$0145 << 3) + 88 >> 2];
   $803 = +($791 * $793 - $795 * $797);
   $804 = +($793 * $795 + $791 * $797);
   $805 = $this + ($i$0145 << 3) + 64 | 0;
   HEAPF32[$805 >> 2] = $803;
   HEAPF32[$805 + 4 >> 2] = $804;
   $i$0145 = $i$0145 + 1 | 0;
  } while (($i$0145 | 0) < (HEAP32[$762 >> 2] | 0));
 }
 $812 = $this + 244 | 0;
 HEAPF32[$812 >> 2] = .019999999552965164;
 $813 = $manifold + 60 | 0;
 HEAP32[$813 >> 2] = 0;
 $814 = $this + 248 | 0;
 $815 = HEAP32[$764 >> 2] | 0;
 if (($815 | 0) <= 0) {
  STACKTOP = sp;
  return;
 }
 $818 = +HEAPF32[$this + 164 >> 2];
 $819 = +HEAPF32[$120 >> 2];
 $821 = +HEAPF32[$this + 212 >> 2];
 $823 = +HEAPF32[$this + 216 >> 2];
 $834 = 3402823466385288598117041.0e14;
 $i$01$i = 0;
 do {
  $832 = $821 * (+HEAPF32[$this + ($i$01$i << 3) >> 2] - $818) + $823 * (+HEAPF32[$this + ($i$01$i << 3) + 4 >> 2] - $819);
  $834 = $832 < $834 ? $832 : $834;
  $i$01$i = $i$01$i + 1 | 0;
 } while (($i$01$i | 0) != ($815 | 0));
 if ($834 > .019999999552965164) {
  STACKTOP = sp;
  return;
 }
 __ZN12b2EPCollider24ComputePolygonSeparationEv($polygonAxis, $this);
 $838 = HEAP32[$polygonAxis >> 2] | 0;
 if (!$838) label = 75; else {
  $841 = +HEAPF32[$polygonAxis + 8 >> 2];
  if ($841 > +HEAPF32[$812 >> 2]) {
   STACKTOP = sp;
   return;
  }
  if ($841 > $834 * .9800000190734863 + 1.0000000474974513e-03) {
   $849 = HEAP32[$polygonAxis + 4 >> 2] | 0;
   $850 = $manifold + 56 | 0;
   if (($838 | 0) == 1) {
    $1272 = $ie;
    $851 = $850;
    label = 77;
   } else {
    HEAP32[$850 >> 2] = 2;
    $980 = $76;
    $985 = HEAP32[$980 + 4 >> 2] | 0;
    $986 = $ie;
    HEAP32[$986 >> 2] = HEAP32[$980 >> 2];
    HEAP32[$986 + 4 >> 2] = $985;
    $990 = $ie + 8 | 0;
    HEAP8[$990 >> 0] = 0;
    $991 = $849 & 255;
    HEAP8[$990 + 1 >> 0] = $991;
    HEAP8[$990 + 2 >> 0] = 0;
    HEAP8[$990 + 3 >> 0] = 1;
    $996 = $88;
    $1001 = HEAP32[$996 + 4 >> 2] | 0;
    $1002 = $ie + 12 | 0;
    HEAP32[$1002 >> 2] = HEAP32[$996 >> 2];
    HEAP32[$1002 + 4 >> 2] = $1001;
    $1006 = $ie + 20 | 0;
    HEAP8[$1006 >> 0] = 0;
    HEAP8[$1006 + 1 >> 0] = $991;
    HEAP8[$1006 + 2 >> 0] = 0;
    HEAP8[$1006 + 3 >> 0] = 1;
    HEAP32[$rf >> 2] = $849;
    $1010 = $849 + 1 | 0;
    $$43 = ($1010 | 0) < (HEAP32[$764 >> 2] | 0) ? $1010 : 0;
    HEAP32[$rf + 4 >> 2] = $$43;
    $1016 = $this + ($849 << 3) | 0;
    $1018 = HEAP32[$1016 >> 2] | 0;
    $1021 = HEAP32[$1016 + 4 >> 2] | 0;
    $1022 = $rf + 8 | 0;
    HEAP32[$1022 >> 2] = $1018;
    HEAP32[$1022 + 4 >> 2] = $1021;
    $1028 = $this + ($$43 << 3) | 0;
    $1030 = HEAP32[$1028 >> 2] | 0;
    $1033 = HEAP32[$1028 + 4 >> 2] | 0;
    $1034 = $rf + 16 | 0;
    HEAP32[$1034 >> 2] = $1030;
    HEAP32[$1034 + 4 >> 2] = $1033;
    $1040 = $this + ($849 << 3) + 64 | 0;
    $1042 = HEAP32[$1040 >> 2] | 0;
    $1045 = HEAP32[$1040 + 4 >> 2] | 0;
    $1046 = $rf + 24 | 0;
    HEAP32[$1046 >> 2] = $1042;
    HEAP32[$1046 + 4 >> 2] = $1045;
    $$in = $1033;
    $$in176 = $1030;
    $$in177 = $1021;
    $$in178 = $1018;
    $$in179 = $1042;
    $$in180 = $1045;
    $1079 = $ie;
    $1080 = $849;
    $primaryAxis$sroa$0$0184 = 0;
   }
  } else label = 75;
 }
 if ((label | 0) == 75) {
  $1272 = $ie;
  $851 = $manifold + 56 | 0;
  label = 77;
 }
 do if ((label | 0) == 77) {
  HEAP32[$851 >> 2] = 1;
  $852 = HEAP32[$764 >> 2] | 0;
  if (($852 | 0) > 1) {
   $859 = +HEAPF32[$this + 216 >> 2];
   $861 = +HEAPF32[$this + 212 >> 2];
   $bestIndex$0140 = 0;
   $bestValue$0141 = $861 * +HEAPF32[$this + 64 >> 2] + $859 * +HEAPF32[$this + 68 >> 2];
   $i1$0142 = 1;
   while (1) {
    $871 = $861 * +HEAPF32[$this + ($i1$0142 << 3) + 64 >> 2] + $859 * +HEAPF32[$this + ($i1$0142 << 3) + 68 >> 2];
    $872 = $871 < $bestValue$0141;
    $bestIndex$1 = $872 ? $i1$0142 : $bestIndex$0140;
    $i1$0142 = $i1$0142 + 1 | 0;
    if (($i1$0142 | 0) >= ($852 | 0)) {
     $bestIndex$0$lcssa = $bestIndex$1;
     break;
    } else {
     $bestIndex$0140 = $bestIndex$1;
     $bestValue$0141 = $872 ? $871 : $bestValue$0141;
    }
   }
  } else $bestIndex$0$lcssa = 0;
  $875 = $bestIndex$0$lcssa + 1 | 0;
  $$ = ($875 | 0) < ($852 | 0) ? $875 : 0;
  $878 = $this + ($bestIndex$0$lcssa << 3) | 0;
  $883 = HEAP32[$878 + 4 >> 2] | 0;
  $884 = $ie;
  HEAP32[$884 >> 2] = HEAP32[$878 >> 2];
  HEAP32[$884 + 4 >> 2] = $883;
  $888 = $ie + 8 | 0;
  HEAP8[$888 >> 0] = 0;
  HEAP8[$888 + 1 >> 0] = $bestIndex$0$lcssa;
  HEAP8[$888 + 2 >> 0] = 1;
  HEAP8[$888 + 3 >> 0] = 0;
  $895 = $this + ($$ << 3) | 0;
  $900 = HEAP32[$895 + 4 >> 2] | 0;
  $901 = $ie + 12 | 0;
  HEAP32[$901 >> 2] = HEAP32[$895 >> 2];
  HEAP32[$901 + 4 >> 2] = $900;
  $905 = $ie + 20 | 0;
  HEAP8[$905 >> 0] = 0;
  HEAP8[$905 + 1 >> 0] = $$;
  HEAP8[$905 + 2 >> 0] = 1;
  HEAP8[$905 + 3 >> 0] = 0;
  if (!(HEAP8[$814 >> 0] | 0)) {
   HEAP32[$rf >> 2] = 1;
   HEAP32[$rf + 4 >> 2] = 0;
   $948 = $88;
   $950 = HEAP32[$948 >> 2] | 0;
   $953 = HEAP32[$948 + 4 >> 2] | 0;
   $954 = $rf + 8 | 0;
   HEAP32[$954 >> 2] = $950;
   HEAP32[$954 + 4 >> 2] = $953;
   $959 = $76;
   $961 = HEAP32[$959 >> 2] | 0;
   $964 = HEAP32[$959 + 4 >> 2] | 0;
   $965 = $rf + 16 | 0;
   HEAP32[$965 >> 2] = $961;
   HEAP32[$965 + 4 >> 2] = $964;
   $974 = (HEAPF32[tempDoublePtr >> 2] = -+HEAPF32[$135 >> 2], HEAP32[tempDoublePtr >> 2] | 0);
   $975 = (HEAPF32[tempDoublePtr >> 2] = -+HEAPF32[$139 >> 2], HEAP32[tempDoublePtr >> 2] | 0);
   $976 = $rf + 24 | 0;
   HEAP32[$976 >> 2] = $974;
   HEAP32[$976 + 4 >> 2] = $975;
   $$in = $964;
   $$in176 = $961;
   $$in177 = $953;
   $$in178 = $950;
   $$in179 = $974;
   $$in180 = $975;
   $1079 = $1272;
   $1080 = 1;
   $primaryAxis$sroa$0$0184 = 1;
   break;
  } else {
   HEAP32[$rf >> 2] = 0;
   HEAP32[$rf + 4 >> 2] = 1;
   $914 = $76;
   $916 = HEAP32[$914 >> 2] | 0;
   $919 = HEAP32[$914 + 4 >> 2] | 0;
   $920 = $rf + 8 | 0;
   HEAP32[$920 >> 2] = $916;
   HEAP32[$920 + 4 >> 2] = $919;
   $925 = $88;
   $927 = HEAP32[$925 >> 2] | 0;
   $930 = HEAP32[$925 + 4 >> 2] | 0;
   $931 = $rf + 16 | 0;
   HEAP32[$931 >> 2] = $927;
   HEAP32[$931 + 4 >> 2] = $930;
   $936 = $135;
   $938 = HEAP32[$936 >> 2] | 0;
   $941 = HEAP32[$936 + 4 >> 2] | 0;
   $942 = $rf + 24 | 0;
   HEAP32[$942 >> 2] = $938;
   HEAP32[$942 + 4 >> 2] = $941;
   $$in = $930;
   $$in176 = $927;
   $$in177 = $919;
   $$in178 = $916;
   $$in179 = $938;
   $$in180 = $941;
   $1079 = $1272;
   $1080 = 0;
   $primaryAxis$sroa$0$0184 = 1;
   break;
  }
 } while (0);
 $1050 = (HEAP32[tempDoublePtr >> 2] = $$in180, +HEAPF32[tempDoublePtr >> 2]);
 $1051 = (HEAP32[tempDoublePtr >> 2] = $$in179, +HEAPF32[tempDoublePtr >> 2]);
 $1052 = (HEAP32[tempDoublePtr >> 2] = $$in178, +HEAPF32[tempDoublePtr >> 2]);
 $1053 = (HEAP32[tempDoublePtr >> 2] = $$in177, +HEAPF32[tempDoublePtr >> 2]);
 $1054 = (HEAP32[tempDoublePtr >> 2] = $$in176, +HEAPF32[tempDoublePtr >> 2]);
 $1055 = (HEAP32[tempDoublePtr >> 2] = $$in, +HEAPF32[tempDoublePtr >> 2]);
 $1056 = $rf + 32 | 0;
 $1057 = $rf + 24 | 0;
 $1058 = $rf + 28 | 0;
 $1059 = -$1051;
 HEAPF32[$1056 >> 2] = $1050;
 HEAPF32[$rf + 36 >> 2] = $1059;
 $1061 = $rf + 44 | 0;
 $1062 = -$1050;
 $1064 = $1061;
 HEAPF32[$1064 >> 2] = $1062;
 HEAP32[$1064 + 4 >> 2] = $$in179;
 $1068 = $rf + 8 | 0;
 $1070 = $rf + 12 | 0;
 $1072 = $1050 * $1052 + $1053 * $1059;
 HEAPF32[$rf + 40 >> 2] = $1072;
 $1078 = $rf + 52 | 0;
 HEAPF32[$1078 >> 2] = $1054 * $1062 + (HEAP32[tempDoublePtr >> 2] = $$in179, +HEAPF32[tempDoublePtr >> 2]) * $1055;
 if ((__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi($clipPoints1, $1079, $1056, $1072, $1080) | 0) < 2) {
  STACKTOP = sp;
  return;
 }
 if ((__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi($clipPoints2, $clipPoints1, $1061, +HEAPF32[$1078 >> 2], HEAP32[$rf + 4 >> 2] | 0) | 0) < 2) {
  STACKTOP = sp;
  return;
 }
 $1088 = $manifold + 40 | 0;
 if ($primaryAxis$sroa$0$0184) {
  $1089 = $1057;
  $1091 = HEAP32[$1089 >> 2] | 0;
  $1094 = HEAP32[$1089 + 4 >> 2] | 0;
  $1095 = $1088;
  HEAP32[$1095 >> 2] = $1091;
  HEAP32[$1095 + 4 >> 2] = $1094;
  $1100 = $1068;
  $1102 = HEAP32[$1100 >> 2] | 0;
  $1105 = HEAP32[$1100 + 4 >> 2] | 0;
  $1106 = $manifold + 48 | 0;
  HEAP32[$1106 >> 2] = $1102;
  HEAP32[$1106 + 4 >> 2] = $1105;
  $1110 = (HEAP32[tempDoublePtr >> 2] = $1102, +HEAPF32[tempDoublePtr >> 2]);
  $1111 = (HEAP32[tempDoublePtr >> 2] = $1091, +HEAPF32[tempDoublePtr >> 2]);
  $1112 = +HEAPF32[$1070 >> 2];
  $1113 = +HEAPF32[$1058 >> 2];
  $1114 = +HEAPF32[$clipPoints2 >> 2];
  $1117 = +HEAPF32[$clipPoints2 + 4 >> 2];
  $1122 = +HEAPF32[$812 >> 2];
  if (!(($1114 - $1110) * $1111 + ($1117 - $1112) * $1113 <= $1122)) {
   $1191 = $1122;
   $pointCount$1$us = 0;
  } else {
   $1161 = $1114 - +HEAPF32[$0 >> 2];
   $1163 = $1117 - +HEAPF32[$56 >> 2];
   $1164 = +HEAPF32[$43 >> 2];
   $1166 = +HEAPF32[$47 >> 2];
   $1172 = +($1161 * $1164 + $1163 * $1166);
   $1173 = +($1164 * $1163 - $1161 * $1166);
   $1174 = $manifold;
   HEAPF32[$1174 >> 2] = $1172;
   HEAPF32[$1174 + 4 >> 2] = $1173;
   HEAP32[$manifold + 16 >> 2] = HEAP32[$clipPoints2 + 8 >> 2];
   $1191 = +HEAPF32[$812 >> 2];
   $pointCount$1$us = 1;
  }
  $1182 = +HEAPF32[$clipPoints2 + 12 >> 2];
  $1185 = +HEAPF32[$clipPoints2 + 16 >> 2];
  if (!(($1182 - $1110) * $1111 + ($1185 - $1112) * $1113 <= $1191)) $pointCount$0$lcssa = $pointCount$1$us; else {
   $1251 = $1182 - +HEAPF32[$0 >> 2];
   $1253 = $1185 - +HEAPF32[$56 >> 2];
   $1254 = +HEAPF32[$43 >> 2];
   $1256 = +HEAPF32[$47 >> 2];
   $1262 = +($1251 * $1254 + $1253 * $1256);
   $1263 = +($1254 * $1253 - $1251 * $1256);
   $1264 = $manifold + ($pointCount$1$us * 20 | 0) | 0;
   HEAPF32[$1264 >> 2] = $1262;
   HEAPF32[$1264 + 4 >> 2] = $1263;
   HEAP32[$manifold + ($pointCount$1$us * 20 | 0) + 16 >> 2] = HEAP32[$clipPoints2 + 20 >> 2];
   $pointCount$0$lcssa = $pointCount$1$us + 1 | 0;
  }
 } else {
  $1124 = HEAP32[$rf >> 2] | 0;
  $1126 = $polygonB + ($1124 << 3) + 84 | 0;
  $1131 = HEAP32[$1126 + 4 >> 2] | 0;
  $1132 = $1088;
  HEAP32[$1132 >> 2] = HEAP32[$1126 >> 2];
  HEAP32[$1132 + 4 >> 2] = $1131;
  $1138 = $polygonB + ($1124 << 3) + 20 | 0;
  $1143 = HEAP32[$1138 + 4 >> 2] | 0;
  $1144 = $manifold + 48 | 0;
  HEAP32[$1144 >> 2] = HEAP32[$1138 >> 2];
  HEAP32[$1144 + 4 >> 2] = $1143;
  $$pre = +HEAPF32[$1068 >> 2];
  $$pre159 = +HEAPF32[$1057 >> 2];
  $1148 = +HEAPF32[$1070 >> 2];
  $1149 = +HEAPF32[$1058 >> 2];
  $1158 = +HEAPF32[$812 >> 2];
  if (!((+HEAPF32[$clipPoints2 >> 2] - $$pre) * $$pre159 + (+HEAPF32[$clipPoints2 + 4 >> 2] - $1148) * $1149 <= $1158)) {
   $1224 = $1158;
   $pointCount$1 = 0;
  } else {
   $1192 = $clipPoints2;
   $1197 = HEAP32[$1192 + 4 >> 2] | 0;
   $1198 = $manifold;
   HEAP32[$1198 >> 2] = HEAP32[$1192 >> 2];
   HEAP32[$1198 + 4 >> 2] = $1197;
   $1202 = $clipPoints2 + 8 | 0;
   $1205 = $manifold + 16 | 0;
   HEAP8[$1205 + 2 >> 0] = HEAP8[$1202 + 3 >> 0] | 0;
   HEAP8[$1205 + 3 >> 0] = HEAP8[$1202 + 2 >> 0] | 0;
   HEAP8[$1205 >> 0] = HEAP8[$1202 + 1 >> 0] | 0;
   HEAP8[$1205 + 1 >> 0] = HEAP8[$1202 >> 0] | 0;
   $1224 = +HEAPF32[$812 >> 2];
   $pointCount$1 = 1;
  }
  $1214 = $clipPoints2 + 12 | 0;
  if (!((+HEAPF32[$1214 >> 2] - $$pre) * $$pre159 + (+HEAPF32[$clipPoints2 + 16 >> 2] - $1148) * $1149 <= $1224)) $pointCount$0$lcssa = $pointCount$1; else {
   $1226 = $1214;
   $1231 = HEAP32[$1226 + 4 >> 2] | 0;
   $1232 = $manifold + ($pointCount$1 * 20 | 0) | 0;
   HEAP32[$1232 >> 2] = HEAP32[$1226 >> 2];
   HEAP32[$1232 + 4 >> 2] = $1231;
   $1236 = $clipPoints2 + 20 | 0;
   $1239 = $manifold + ($pointCount$1 * 20 | 0) + 16 | 0;
   HEAP8[$1239 + 2 >> 0] = HEAP8[$1236 + 3 >> 0] | 0;
   HEAP8[$1239 + 3 >> 0] = HEAP8[$1236 + 2 >> 0] | 0;
   HEAP8[$1239 >> 0] = HEAP8[$1236 + 1 >> 0] | 0;
   HEAP8[$1239 + 1 >> 0] = HEAP8[$1236 >> 0] | 0;
   $pointCount$0$lcssa = $pointCount$1 + 1 | 0;
  }
 }
 HEAP32[$813 >> 2] = $pointCount$0$lcssa;
 STACKTOP = sp;
 return;
}

function _decode_residue($f, $residue_buffers, $ch, $n, $rn, $do_not_decode) {
 $f = $f | 0;
 $residue_buffers = $residue_buffers | 0;
 $ch = $ch | 0;
 $n = $n | 0;
 $rn = $rn | 0;
 $do_not_decode = $do_not_decode | 0;
 var $$0117$i = 0, $$0123$i = 0, $$3$i = 0, $$p_inter$1$i = 0, $$sum$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $117 = 0, $126 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $136 = 0, $137 = 0, $138 = 0, $142 = 0, $145 = 0, $146 = 0, $151 = 0, $154 = 0, $155 = 0, $16 = 0, $165 = 0, $172 = 0, $176 = 0, $18 = 0, $182 = 0, $184 = 0, $187 = 0, $188 = 0, $19 = 0, $192 = 0, $198 = 0, $20 = 0, $202 = 0, $205 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $217 = 0, $22 = 0, $220 = 0, $221 = 0, $228 = 0, $231 = 0, $232 = 0, $235 = 0, $239 = 0.0, $243 = 0, $246 = 0, $249 = 0, $25 = 0, $250 = 0, $255 = 0, $26 = 0, $262 = 0, $265 = 0, $266 = 0, $270 = 0, $273 = 0, $277 = 0, $28 = 0, $285 = 0, $286 = 0, $288 = 0, $29 = 0, $292 = 0, $295 = 0, $296 = 0, $3 = 0, $302 = 0, $305 = 0, $306 = 0, $322 = 0, $331 = 0, $338 = 0, $34 = 0, $341 = 0, $343 = 0, $351 = 0, $354 = 0, $356 = 0, $360 = 0, $363 = 0, $364 = 0, $37 = 0, $370 = 0, $373 = 0, $374 = 0, $390 = 0, $399 = 0, $4 = 0, $406 = 0, $409 = 0, $41 = 0, $413 = 0, $42 = 0, $423 = 0, $425 = 0, $429 = 0, $432 = 0, $433 = 0, $439 = 0, $442 = 0, $443 = 0, $474 = 0, $476 = 0, $478 = 0, $480 = 0, $482 = 0, $483 = 0, $484 = 0, $486 = 0, $487 = 0, $488 = 0, $490 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $498 = 0, $500 = 0, $502 = 0, $503 = 0, $504 = 0, $506 = 0, $51 = 0, $510 = 0.0, $512 = 0, $52 = 0, $520 = 0, $521 = 0, $523 = 0, $525 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $538 = 0, $54 = 0, $542 = 0.0, $543 = 0, $55 = 0, $553 = 0, $56 = 0, $563 = 0, $57 = 0, $58 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $83 = 0, $87 = 0, $90 = 0, $91 = 0, $97 = 0, $c_inter$0$lcssa$i25 = 0, $c_inter$0$lcssa$i2789 = 0, $c_inter$022$i = 0, $c_inter$18$i = 0, $c_inter$3$i = 0, $c_inter$4$i = 0, $c_inter16 = 0, $c_inter6 = 0, $class_set$098 = 0, $class_set$168 = 0, $class_set$2112 = 0, $class_set26$050 = 0, $effective$020$i = 0, $effective$1$i = 0, $i$01$i = 0, $i$0127 = 0, $i$02$i$i = 0, $i$05$i$i = 0, $i$06$i = 0, $i$1$i = 0, $i$12$i$i = 0, $i$192 = 0, $i$2$lcssa$i = 0, $i$210$i = 0, $i$210$us$i = 0, $i$210$us$us$i = 0, $i$210$us16$i = 0, $i$262 = 0, $i$3106 = 0, $i$447 = 0, $j$0$lcssa = 0, $j$0122 = 0, $j$132 = 0, $j$239 = 0, $k$012$i = 0, $k$118$i = 0, $last$03$i$i = 0.0, $last$05$i = 0.0, $last$06$i$i = 0.0, $p_inter$0$lcssa$i22 = 0, $p_inter$0$lcssa$i2490 = 0, $p_inter$021$i = 0, $p_inter$17$i = 0, $p_inter$3$i = 0, $p_inter$4$lcssa$i = 0, $p_inter$411$i = 0, $p_inter$411$us$i = 0, $p_inter$411$us$us$i = 0, $p_inter$411$us15$i = 0, $p_inter$5$i = 0, $p_inter17 = 0, $p_inter7 = 0, $pass$0117 = 0, $pass$155 = 0, $pcount$099 = 0, $pcount$1$lcssa = 0, $pcount$191 = 0, $pcount$269 = 0, $pcount$3$lcssa = 0, $pcount$361 = 0, $pcount$4113 = 0, $pcount$5$lcssa = 0, $pcount$5105 = 0, $pcount25$049 = 0, $pcount25$1$lcssa = 0, $pcount25$145 = 0, $q$0 = 0, $q$02$i = 0, $q$1 = 0, $q19$0 = 0, $q19$1 = 0, $q9$0 = 0, $q9$1 = 0, $temp$0 = 0, $temp$1 = 0, $z$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $c_inter6 = sp + 12 | 0;
 $p_inter7 = sp + 8 | 0;
 $c_inter16 = sp + 4 | 0;
 $p_inter17 = sp;
 $1 = HEAP32[$f + 412 >> 2] | 0;
 $3 = HEAP16[$f + ($rn << 1) + 284 >> 1] | 0;
 $4 = $1 + ($rn * 24 | 0) + 13 | 0;
 $7 = $f + 140 | 0;
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + ((HEAPU8[$4 >> 0] | 0) * 2096 | 0) >> 2] | 0;
 $13 = $1 + ($rn * 24 | 0) | 0;
 $16 = $1 + ($rn * 24 | 0) + 8 | 0;
 $18 = (((HEAP32[$1 + ($rn * 24 | 0) + 4 >> 2] | 0) - (HEAP32[$13 >> 2] | 0) | 0) >>> 0) / ((HEAP32[$16 >> 2] | 0) >>> 0) | 0;
 $19 = $f + 108 | 0;
 $20 = HEAP32[$19 >> 2] | 0;
 $22 = HEAP32[$f + 96 >> 2] | 0;
 $25 = HEAP32[$f + 4 >> 2] | 0;
 $26 = $18 << 2;
 $28 = Math_imul($25, $26 + 4 | 0) | 0;
 if (!$22) {
  $34 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * $28 | 0) + 15 & -16) | 0;
  $37 = $34;
 } else {
  $29 = $20 - $28 | 0;
  if (($29 | 0) < (HEAP32[$f + 104 >> 2] | 0)) $37 = 0; else {
   HEAP32[$19 >> 2] = $29;
   $37 = $22 + $29 | 0;
  }
 }
 if (($25 | 0) > 0) {
  $i$01$i = 0;
  $q$02$i = $37 + ($25 << 2) | 0;
  while (1) {
   HEAP32[$37 + ($i$01$i << 2) >> 2] = $q$02$i;
   $i$01$i = $i$01$i + 1 | 0;
   if (($i$01$i | 0) == ($25 | 0)) break; else $q$02$i = $q$02$i + $26 | 0;
  }
 }
 $41 = ($ch | 0) > 0;
 if ($41) {
  $42 = $n << 2;
  $i$0127 = 0;
  do {
   if (!(HEAP8[$do_not_decode + $i$0127 >> 0] | 0)) _memset(HEAP32[$residue_buffers + ($i$0127 << 2) >> 2] | 0, 0, $42 | 0) | 0;
   $i$0127 = $i$0127 + 1 | 0;
  } while (($i$0127 | 0) != ($ch | 0));
 }
 if ($3 << 16 >> 16 != 2 | ($ch | 0) == 1) {
  $51 = ($18 | 0) > 0;
  $52 = $f + 1412 | 0;
  $53 = $f + 1408 | 0;
  $54 = $1 + ($rn * 24 | 0) + 16 | 0;
  $55 = ($10 | 0) > 0;
  $56 = $1 + ($rn * 24 | 0) + 20 | 0;
  $57 = $3 << 16 >> 16 == 0;
  $pass$155 = 0;
  L21 : while (1) {
   if ($51) {
    $class_set26$050 = 0;
    $pcount25$049 = 0;
    while (1) {
     if (!(($pass$155 | 0) != 0 | $41 ^ 1)) {
      $j$132 = 0;
      do {
       if (!(HEAP8[$do_not_decode + $j$132 >> 0] | 0)) {
        $423 = HEAP32[$7 >> 2] | 0;
        $425 = HEAPU8[$4 >> 0] | 0;
        if ((HEAP32[$52 >> 2] | 0) < 10) _prep_huffman($f);
        $429 = HEAP32[$53 >> 2] | 0;
        $432 = HEAP16[$423 + ($425 * 2096 | 0) + (($429 & 1023) << 1) + 36 >> 1] | 0;
        $433 = $432 << 16 >> 16;
        if ($432 << 16 >> 16 > -1) {
         $439 = HEAPU8[(HEAP32[$423 + ($425 * 2096 | 0) + 8 >> 2] | 0) + $433 >> 0] | 0;
         HEAP32[$53 >> 2] = $429 >>> $439;
         $442 = (HEAP32[$52 >> 2] | 0) - $439 | 0;
         $443 = ($442 | 0) < 0;
         HEAP32[$52 >> 2] = $443 ? 0 : $442;
         $temp$0 = $443 ? -1 : $433;
        } else $temp$0 = _codebook_decode_scalar_raw($f, $423 + ($425 * 2096 | 0) | 0) | 0;
        if (!(HEAP8[$423 + ($425 * 2096 | 0) + 23 >> 0] | 0)) $temp$1 = $temp$0; else $temp$1 = HEAP32[(HEAP32[$423 + ($425 * 2096 | 0) + 2088 >> 2] | 0) + ($temp$0 << 2) >> 2] | 0;
        if (($temp$1 | 0) == -1) {
         label = 157;
         break L21;
        }
        HEAP32[(HEAP32[$37 + ($j$132 << 2) >> 2] | 0) + ($class_set26$050 << 2) >> 2] = HEAP32[(HEAP32[$54 >> 2] | 0) + ($temp$1 << 2) >> 2];
       }
       $j$132 = $j$132 + 1 | 0;
      } while (($j$132 | 0) < ($ch | 0));
     }
     if ($55 & ($pcount25$049 | 0) < ($18 | 0)) {
      $i$447 = 0;
      $pcount25$145 = $pcount25$049;
      while (1) {
       if ($41) {
        $j$239 = 0;
        do {
         L50 : do if (!(HEAP8[$do_not_decode + $j$239 >> 0] | 0)) {
          $474 = HEAP16[(HEAP32[$56 >> 2] | 0) + (HEAPU8[(HEAP32[(HEAP32[$37 + ($j$239 << 2) >> 2] | 0) + ($class_set26$050 << 2) >> 2] | 0) + $i$447 >> 0] << 4) + ($pass$155 << 1) >> 1] | 0;
          if ($474 << 16 >> 16 > -1) {
           $476 = $474 << 16 >> 16;
           $478 = HEAP32[$residue_buffers + ($j$239 << 2) >> 2] | 0;
           $480 = HEAP32[$16 >> 2] | 0;
           $482 = (Math_imul($480, $pcount25$145) | 0) + (HEAP32[$13 >> 2] | 0) | 0;
           $483 = HEAP32[$7 >> 2] | 0;
           $484 = $483 + ($476 * 2096 | 0) | 0;
           if ($57) {
            $490 = ($480 | 0) / (HEAP32[$484 >> 2] | 0) | 0;
            if (($490 | 0) <= 0) break;
            $492 = $480 - $482 | 0;
            $493 = $483 + ($476 * 2096 | 0) + 28 | 0;
            $494 = $483 + ($476 * 2096 | 0) + 22 | 0;
            $k$012$i = 0;
            while (1) {
             $$sum$i = $k$012$i + $482 | 0;
             $495 = $492 - $k$012$i | 0;
             $496 = _codebook_decode_start($f, $484) | 0;
             if (($496 | 0) < 0) {
              label = 157;
              break L21;
             }
             $498 = HEAP32[$484 >> 2] | 0;
             $500 = Math_imul($498, $496) | 0;
             if (((($498 | 0) < ($495 | 0) ? $498 : $495) | 0) > 0) {
              $502 = HEAP32[$493 >> 2] | 0;
              $503 = ~$498;
              $504 = ~$495;
              $506 = ~(($503 | 0) > ($504 | 0) ? $503 : $504);
              $i$02$i$i = 0;
              $last$03$i$i = 0.0;
              while (1) {
               $510 = $last$03$i$i + +HEAPF32[$502 + ($i$02$i$i + $500 << 2) >> 2];
               $512 = $478 + ($$sum$i + (Math_imul($i$02$i$i, $490) | 0) << 2) | 0;
               HEAPF32[$512 >> 2] = +HEAPF32[$512 >> 2] + $510;
               $i$02$i$i = $i$02$i$i + 1 | 0;
               if (($i$02$i$i | 0) == ($506 | 0)) break; else $last$03$i$i = (HEAP8[$494 >> 0] | 0) == 0 ? $last$03$i$i : $510;
              }
             }
             $k$012$i = $k$012$i + 1 | 0;
             if (($k$012$i | 0) >= ($490 | 0)) break L50;
            }
           }
           if (($480 | 0) <= 0) break;
           $486 = $483 + ($476 * 2096 | 0) + 22 | 0;
           $487 = $483 + ($476 * 2096 | 0) + 28 | 0;
           $488 = $483 + ($476 * 2096 | 0) + 12 | 0;
           $$0117$i = $482;
           $k$118$i = 0;
           while (1) {
            $520 = $480 - $k$118$i | 0;
            $521 = _codebook_decode_start($f, $484) | 0;
            if (($521 | 0) < 0) {
             label = 157;
             break L21;
            }
            $523 = HEAP32[$484 >> 2] | 0;
            $525 = Math_imul($523, $521) | 0;
            $528 = ((($523 | 0) < ($520 | 0) ? $523 : $520) | 0) > 0;
            do if (!(HEAP8[$486 >> 0] | 0)) {
             if (!$528) break;
             $534 = HEAP32[$487 >> 2] | 0;
             $535 = ~$523;
             $536 = ~$520;
             $538 = ~(($535 | 0) > ($536 | 0) ? $535 : $536);
             $i$12$i$i = 0;
             do {
              $553 = $478 + ($i$12$i$i + $$0117$i << 2) | 0;
              HEAPF32[$553 >> 2] = +HEAPF32[$553 >> 2] + (+HEAPF32[$534 + ($i$12$i$i + $525 << 2) >> 2] + 0.0);
              $i$12$i$i = $i$12$i$i + 1 | 0;
             } while (($i$12$i$i | 0) != ($538 | 0));
            } else {
             if (!$528) break;
             $529 = HEAP32[$487 >> 2] | 0;
             $530 = ~$523;
             $531 = ~$520;
             $533 = ~(($530 | 0) > ($531 | 0) ? $530 : $531);
             $i$05$i$i = 0;
             $last$06$i$i = 0.0;
             while (1) {
              $542 = $last$06$i$i + +HEAPF32[$529 + ($i$05$i$i + $525 << 2) >> 2];
              $543 = $478 + ($i$05$i$i + $$0117$i << 2) | 0;
              HEAPF32[$543 >> 2] = +HEAPF32[$543 >> 2] + $542;
              $i$05$i$i = $i$05$i$i + 1 | 0;
              if (($i$05$i$i | 0) == ($533 | 0)) break; else $last$06$i$i = $542 + +HEAPF32[$488 >> 2];
             }
            } while (0);
            $k$118$i = $523 + $k$118$i | 0;
            if (($k$118$i | 0) >= ($480 | 0)) break; else $$0117$i = $523 + $$0117$i | 0;
           }
          }
         } while (0);
         $j$239 = $j$239 + 1 | 0;
        } while (($j$239 | 0) < ($ch | 0));
       }
       $i$447 = $i$447 + 1 | 0;
       $563 = $pcount25$145 + 1 | 0;
       if (!(($i$447 | 0) < ($10 | 0) & ($563 | 0) < ($18 | 0))) {
        $pcount25$1$lcssa = $563;
        break;
       } else $pcount25$145 = $563;
      }
     } else $pcount25$1$lcssa = $pcount25$049;
     if (($pcount25$1$lcssa | 0) < ($18 | 0)) {
      $class_set26$050 = $class_set26$050 + 1 | 0;
      $pcount25$049 = $pcount25$1$lcssa;
     } else break;
    }
   }
   $pass$155 = $pass$155 + 1 | 0;
   if (($pass$155 | 0) >= 8) {
    label = 157;
    break;
   }
  }
  if ((label | 0) == 157) {
   HEAP32[$19 >> 2] = $20;
   STACKTOP = sp;
   return;
  }
 }
 L89 : do if ($41) {
  $j$0122 = 0;
  while (1) {
   $58 = $j$0122 + 1 | 0;
   if (!(HEAP8[$do_not_decode + $j$0122 >> 0] | 0)) {
    $j$0$lcssa = $j$0122;
    break L89;
   }
   if (($58 | 0) < ($ch | 0)) $j$0122 = $58; else {
    $j$0$lcssa = $58;
    break;
   }
  }
 } else $j$0$lcssa = 0; while (0);
 if (($j$0$lcssa | 0) == ($ch | 0)) {
  HEAP32[$19 >> 2] = $20;
  STACKTOP = sp;
  return;
 }
 $64 = ($18 | 0) > 0;
 $65 = $f + 1412 | 0;
 $66 = $f + 1408 | 0;
 $67 = $1 + ($rn * 24 | 0) + 16 | 0;
 $68 = ($10 | 0) > 0;
 $69 = $1 + ($rn * 24 | 0) + 20 | 0;
 $70 = $n << 1;
 $71 = $residue_buffers + 4 | 0;
 $pass$0117 = 0;
 L97 : while (1) {
  L99 : do if (($ch | 0) == 1) {
   if ($64) {
    $74 = ($pass$0117 | 0) == 0;
    $class_set$168 = 0;
    $pcount$269 = 0;
    while (1) {
     $285 = (Math_imul(HEAP32[$16 >> 2] | 0, $pcount$269) | 0) + (HEAP32[$13 >> 2] | 0) | 0;
     HEAP32[$c_inter6 >> 2] = 0;
     HEAP32[$p_inter7 >> 2] = $285;
     if ($74) {
      $286 = HEAP32[$7 >> 2] | 0;
      $288 = HEAPU8[$4 >> 0] | 0;
      if ((HEAP32[$65 >> 2] | 0) < 10) _prep_huffman($f);
      $292 = HEAP32[$66 >> 2] | 0;
      $295 = HEAP16[$286 + ($288 * 2096 | 0) + (($292 & 1023) << 1) + 36 >> 1] | 0;
      $296 = $295 << 16 >> 16;
      if ($295 << 16 >> 16 > -1) {
       $302 = HEAPU8[(HEAP32[$286 + ($288 * 2096 | 0) + 8 >> 2] | 0) + $296 >> 0] | 0;
       HEAP32[$66 >> 2] = $292 >>> $302;
       $305 = (HEAP32[$65 >> 2] | 0) - $302 | 0;
       $306 = ($305 | 0) < 0;
       HEAP32[$65 >> 2] = $306 ? 0 : $305;
       $q9$0 = $306 ? -1 : $296;
      } else $q9$0 = _codebook_decode_scalar_raw($f, $286 + ($288 * 2096 | 0) | 0) | 0;
      if (!(HEAP8[$286 + ($288 * 2096 | 0) + 23 >> 0] | 0)) $q9$1 = $q9$0; else $q9$1 = HEAP32[(HEAP32[$286 + ($288 * 2096 | 0) + 2088 >> 2] | 0) + ($q9$0 << 2) >> 2] | 0;
      if (($q9$1 | 0) == -1) {
       label = 157;
       break L97;
      }
      HEAP32[(HEAP32[$37 >> 2] | 0) + ($class_set$168 << 2) >> 2] = HEAP32[(HEAP32[$67 >> 2] | 0) + ($q9$1 << 2) >> 2];
     }
     if ($68 & ($pcount$269 | 0) < ($18 | 0)) {
      $i$262 = 0;
      $pcount$361 = $pcount$269;
      while (1) {
       $322 = HEAP32[$16 >> 2] | 0;
       $331 = HEAP16[(HEAP32[$69 >> 2] | 0) + (HEAPU8[(HEAP32[(HEAP32[$37 >> 2] | 0) + ($class_set$168 << 2) >> 2] | 0) + $i$262 >> 0] << 4) + ($pass$0117 << 1) >> 1] | 0;
       if ($331 << 16 >> 16 > -1) {
        if (!(_codebook_decode_deinterleave_repeat($f, (HEAP32[$7 >> 2] | 0) + (($331 << 16 >> 16) * 2096 | 0) | 0, $residue_buffers, 1, $c_inter6, $p_inter7, $n, $322) | 0)) {
         label = 157;
         break L97;
        }
       } else {
        $338 = Math_imul($322, $pcount$361) | 0;
        $341 = $338 + $322 + (HEAP32[$13 >> 2] | 0) | 0;
        HEAP32[$c_inter6 >> 2] = 0;
        HEAP32[$p_inter7 >> 2] = $341;
       }
       $i$262 = $i$262 + 1 | 0;
       $343 = $pcount$361 + 1 | 0;
       if (!(($i$262 | 0) < ($10 | 0) & ($343 | 0) < ($18 | 0))) {
        $pcount$3$lcssa = $343;
        break;
       } else $pcount$361 = $343;
      }
     } else $pcount$3$lcssa = $pcount$269;
     if (($pcount$3$lcssa | 0) >= ($18 | 0)) break L99;
     $class_set$168 = $class_set$168 + 1 | 0;
     $pcount$269 = $pcount$3$lcssa;
    }
   }
  } else if (($ch | 0) == 2) {
   if ($64) {
    $73 = ($pass$0117 | 0) == 0;
    $class_set$098 = 0;
    $pcount$099 = 0;
    while (1) {
     $78 = (Math_imul(HEAP32[$16 >> 2] | 0, $pcount$099) | 0) + (HEAP32[$13 >> 2] | 0) | 0;
     $79 = $78 & 1;
     $80 = $78 >> 1;
     if ($73) {
      $81 = HEAP32[$7 >> 2] | 0;
      $83 = HEAPU8[$4 >> 0] | 0;
      if ((HEAP32[$65 >> 2] | 0) < 10) _prep_huffman($f);
      $87 = HEAP32[$66 >> 2] | 0;
      $90 = HEAP16[$81 + ($83 * 2096 | 0) + (($87 & 1023) << 1) + 36 >> 1] | 0;
      $91 = $90 << 16 >> 16;
      if ($90 << 16 >> 16 > -1) {
       $97 = HEAPU8[(HEAP32[$81 + ($83 * 2096 | 0) + 8 >> 2] | 0) + $91 >> 0] | 0;
       HEAP32[$66 >> 2] = $87 >>> $97;
       $100 = (HEAP32[$65 >> 2] | 0) - $97 | 0;
       $101 = ($100 | 0) < 0;
       HEAP32[$65 >> 2] = $101 ? 0 : $100;
       $q$0 = $101 ? -1 : $91;
      } else $q$0 = _codebook_decode_scalar_raw($f, $81 + ($83 * 2096 | 0) | 0) | 0;
      if (!(HEAP8[$81 + ($83 * 2096 | 0) + 23 >> 0] | 0)) $q$1 = $q$0; else $q$1 = HEAP32[(HEAP32[$81 + ($83 * 2096 | 0) + 2088 >> 2] | 0) + ($q$0 << 2) >> 2] | 0;
      if (($q$1 | 0) == -1) {
       label = 157;
       break L97;
      }
      HEAP32[(HEAP32[$37 >> 2] | 0) + ($class_set$098 << 2) >> 2] = HEAP32[(HEAP32[$67 >> 2] | 0) + ($q$1 << 2) >> 2];
     }
     if ($68 & ($pcount$099 | 0) < ($18 | 0)) {
      $c_inter$0$lcssa$i2789 = $79;
      $i$192 = 0;
      $p_inter$0$lcssa$i2490 = $80;
      $pcount$191 = $pcount$099;
      while (1) {
       $117 = HEAP32[$16 >> 2] | 0;
       $126 = HEAP16[(HEAP32[$69 >> 2] | 0) + (HEAPU8[(HEAP32[(HEAP32[$37 >> 2] | 0) + ($class_set$098 << 2) >> 2] | 0) + $i$192 >> 0] << 4) + ($pass$0117 << 1) >> 1] | 0;
       if ($126 << 16 >> 16 > -1) {
        $128 = $126 << 16 >> 16;
        $129 = HEAP32[$7 >> 2] | 0;
        $130 = $129 + ($128 * 2096 | 0) | 0;
        if (!(HEAP8[$129 + ($128 * 2096 | 0) + 21 >> 0] | 0)) {
         label = 42;
         break L97;
        }
        if (($117 | 0) > 0) {
         $136 = $129 + ($128 * 2096 | 0) + 8 | 0;
         $137 = $129 + ($128 * 2096 | 0) + 22 | 0;
         $138 = $129 + ($128 * 2096 | 0) + 28 | 0;
         $$0123$i = $117;
         $c_inter$022$i = $c_inter$0$lcssa$i2789;
         $effective$020$i = HEAP32[$130 >> 2] | 0;
         $p_inter$021$i = $p_inter$0$lcssa$i2490;
         while (1) {
          if ((HEAP32[$65 >> 2] | 0) < 10) _prep_huffman($f);
          $142 = HEAP32[$66 >> 2] | 0;
          $145 = HEAP16[$129 + ($128 * 2096 | 0) + (($142 & 1023) << 1) + 36 >> 1] | 0;
          $146 = $145 << 16 >> 16;
          if ($145 << 16 >> 16 > -1) {
           $151 = HEAPU8[(HEAP32[$136 >> 2] | 0) + $146 >> 0] | 0;
           HEAP32[$66 >> 2] = $142 >>> $151;
           $154 = (HEAP32[$65 >> 2] | 0) - $151 | 0;
           $155 = ($154 | 0) < 0;
           HEAP32[$65 >> 2] = $155 ? 0 : $154;
           $z$0$i = $155 ? -1 : $146;
          } else $z$0$i = _codebook_decode_scalar_raw($f, $130) | 0;
          if (($z$0$i | 0) < 0) {
           label = 49;
           break L97;
          }
          $165 = $p_inter$021$i << 1;
          if (($effective$020$i + $c_inter$022$i + $165 | 0) > ($70 | 0)) $effective$1$i = $c_inter$022$i + $70 - $165 | 0; else $effective$1$i = $effective$020$i;
          $172 = Math_imul(HEAP32[$130 >> 2] | 0, $z$0$i) | 0;
          do if (!(HEAP8[$137 >> 0] | 0)) {
           $192 = HEAP32[$71 >> 2] | 0;
           if (($c_inter$022$i | 0) == 1) {
            if ($192) {
             $198 = $192 + ($p_inter$021$i << 2) | 0;
             HEAPF32[$198 >> 2] = +HEAPF32[$198 >> 2] + (+HEAPF32[(HEAP32[$138 >> 2] | 0) + ($172 << 2) >> 2] + 0.0);
            }
            $c_inter$3$i = 0;
            $i$1$i = 1;
            $p_inter$3$i = $p_inter$021$i + 1 | 0;
           } else {
            $c_inter$3$i = $c_inter$022$i;
            $i$1$i = 0;
            $p_inter$3$i = $p_inter$021$i;
           }
           $202 = HEAP32[$residue_buffers >> 2] | 0;
           L207 : do if (($i$1$i + 1 | 0) < ($effective$1$i | 0)) {
            $205 = HEAP32[$138 >> 2] | 0;
            $207 = ($192 | 0) == 0;
            if ($202) if ($207) {
             $i$210$us16$i = $i$1$i;
             $p_inter$411$us15$i = $p_inter$3$i;
             while (1) {
              $228 = $202 + ($p_inter$411$us15$i << 2) | 0;
              HEAPF32[$228 >> 2] = +HEAPF32[$228 >> 2] + (+HEAPF32[$205 + ($i$210$us16$i + $172 << 2) >> 2] + 0.0);
              $231 = $p_inter$411$us15$i + 1 | 0;
              $232 = $i$210$us16$i + 2 | 0;
              if (($i$210$us16$i + 3 | 0) < ($effective$1$i | 0)) {
               $i$210$us16$i = $232;
               $p_inter$411$us15$i = $231;
              } else {
               $i$2$lcssa$i = $232;
               $p_inter$4$lcssa$i = $231;
               break L207;
              }
             }
            } else {
             $i$210$i = $i$1$i;
             $p_inter$411$i = $p_inter$3$i;
             while (1) {
              $235 = $i$210$i + $172 | 0;
              $239 = +HEAPF32[$205 + ($235 + 1 << 2) >> 2] + 0.0;
              $243 = $202 + ($p_inter$411$i << 2) | 0;
              HEAPF32[$243 >> 2] = +HEAPF32[$243 >> 2] + (+HEAPF32[$205 + ($235 << 2) >> 2] + 0.0);
              $246 = $192 + ($p_inter$411$i << 2) | 0;
              HEAPF32[$246 >> 2] = $239 + +HEAPF32[$246 >> 2];
              $249 = $p_inter$411$i + 1 | 0;
              $250 = $i$210$i + 2 | 0;
              if (($i$210$i + 3 | 0) < ($effective$1$i | 0)) {
               $i$210$i = $250;
               $p_inter$411$i = $249;
              } else {
               $i$2$lcssa$i = $250;
               $p_inter$4$lcssa$i = $249;
               break L207;
              }
             }
            }
            if ($207) {
             $i$210$us$us$i = $i$1$i;
             $p_inter$411$us$us$i = $p_inter$3$i;
             while (1) {
              $209 = $p_inter$411$us$us$i + 1 | 0;
              $210 = $i$210$us$us$i + 2 | 0;
              if (($i$210$us$us$i + 3 | 0) < ($effective$1$i | 0)) {
               $i$210$us$us$i = $210;
               $p_inter$411$us$us$i = $209;
              } else {
               $i$2$lcssa$i = $210;
               $p_inter$4$lcssa$i = $209;
               break L207;
              }
             }
            }
            $208 = $172 + 1 | 0;
            $i$210$us$i = $i$1$i;
            $p_inter$411$us$i = $p_inter$3$i;
            while (1) {
             $217 = $192 + ($p_inter$411$us$i << 2) | 0;
             HEAPF32[$217 >> 2] = +HEAPF32[$205 + ($208 + $i$210$us$i << 2) >> 2] + 0.0 + +HEAPF32[$217 >> 2];
             $220 = $p_inter$411$us$i + 1 | 0;
             $221 = $i$210$us$i + 2 | 0;
             if (($i$210$us$i + 3 | 0) < ($effective$1$i | 0)) {
              $i$210$us$i = $221;
              $p_inter$411$us$i = $220;
             } else {
              $i$2$lcssa$i = $221;
              $p_inter$4$lcssa$i = $220;
              break;
             }
            }
           } else {
            $i$2$lcssa$i = $i$1$i;
            $p_inter$4$lcssa$i = $p_inter$3$i;
           } while (0);
           if (($i$2$lcssa$i | 0) >= ($effective$1$i | 0)) {
            $c_inter$4$i = $c_inter$3$i;
            $p_inter$5$i = $p_inter$4$lcssa$i;
            break;
           }
           $255 = HEAP32[$residue_buffers + ($c_inter$3$i << 2) >> 2] | 0;
           if ($255) {
            $262 = $255 + ($p_inter$4$lcssa$i << 2) | 0;
            HEAPF32[$262 >> 2] = +HEAPF32[$262 >> 2] + (+HEAPF32[(HEAP32[$138 >> 2] | 0) + ($i$2$lcssa$i + $172 << 2) >> 2] + 0.0);
           }
           $265 = $c_inter$3$i + 1 | 0;
           $266 = ($265 | 0) == 2;
           $c_inter$4$i = $266 ? 0 : $265;
           $p_inter$5$i = $p_inter$4$lcssa$i + ($266 & 1) | 0;
          } else {
           if (($effective$1$i | 0) <= 0) {
            $c_inter$4$i = $c_inter$022$i;
            $p_inter$5$i = $p_inter$021$i;
            break;
           }
           $176 = HEAP32[$138 >> 2] | 0;
           $c_inter$18$i = $c_inter$022$i;
           $i$06$i = 0;
           $last$05$i = 0.0;
           $p_inter$17$i = $p_inter$021$i;
           while (1) {
            $last$05$i = $last$05$i + +HEAPF32[$176 + ($i$06$i + $172 << 2) >> 2];
            $182 = HEAP32[$residue_buffers + ($c_inter$18$i << 2) >> 2] | 0;
            if ($182) {
             $184 = $182 + ($p_inter$17$i << 2) | 0;
             HEAPF32[$184 >> 2] = $last$05$i + +HEAPF32[$184 >> 2];
            }
            $187 = $c_inter$18$i + 1 | 0;
            $188 = ($187 | 0) == 2;
            $$p_inter$1$i = ($188 & 1) + $p_inter$17$i | 0;
            $$3$i = $188 ? 0 : $187;
            $i$06$i = $i$06$i + 1 | 0;
            if (($i$06$i | 0) == ($effective$1$i | 0)) {
             $c_inter$4$i = $$3$i;
             $p_inter$5$i = $$p_inter$1$i;
             break;
            } else {
             $c_inter$18$i = $$3$i;
             $p_inter$17$i = $$p_inter$1$i;
            }
           }
          } while (0);
          $$0123$i = $$0123$i - $effective$1$i | 0;
          if (($$0123$i | 0) <= 0) {
           $c_inter$0$lcssa$i25 = $c_inter$4$i;
           $p_inter$0$lcssa$i22 = $p_inter$5$i;
           break;
          } else {
           $c_inter$022$i = $c_inter$4$i;
           $effective$020$i = $effective$1$i;
           $p_inter$021$i = $p_inter$5$i;
          }
         }
        } else {
         $c_inter$0$lcssa$i25 = $c_inter$0$lcssa$i2789;
         $p_inter$0$lcssa$i22 = $p_inter$0$lcssa$i2490;
        }
       } else {
        $270 = Math_imul($117, $pcount$191) | 0;
        $273 = $270 + $117 + (HEAP32[$13 >> 2] | 0) | 0;
        $c_inter$0$lcssa$i25 = $273 & 1;
        $p_inter$0$lcssa$i22 = $273 >> 1;
       }
       $i$192 = $i$192 + 1 | 0;
       $277 = $pcount$191 + 1 | 0;
       if (!(($i$192 | 0) < ($10 | 0) & ($277 | 0) < ($18 | 0))) {
        $pcount$1$lcssa = $277;
        break;
       } else {
        $c_inter$0$lcssa$i2789 = $c_inter$0$lcssa$i25;
        $p_inter$0$lcssa$i2490 = $p_inter$0$lcssa$i22;
        $pcount$191 = $277;
       }
      }
     } else $pcount$1$lcssa = $pcount$099;
     if (($pcount$1$lcssa | 0) >= ($18 | 0)) break L99;
     $class_set$098 = $class_set$098 + 1 | 0;
     $pcount$099 = $pcount$1$lcssa;
    }
   }
  } else if ($64) {
   $72 = ($pass$0117 | 0) == 0;
   $class_set$2112 = 0;
   $pcount$4113 = 0;
   while (1) {
    $351 = (Math_imul(HEAP32[$16 >> 2] | 0, $pcount$4113) | 0) + (HEAP32[$13 >> 2] | 0) | 0;
    HEAP32[$c_inter16 >> 2] = ($351 | 0) % ($ch | 0) | 0;
    HEAP32[$p_inter17 >> 2] = ($351 | 0) / ($ch | 0) | 0;
    if ($72) {
     $354 = HEAP32[$7 >> 2] | 0;
     $356 = HEAPU8[$4 >> 0] | 0;
     if ((HEAP32[$65 >> 2] | 0) < 10) _prep_huffman($f);
     $360 = HEAP32[$66 >> 2] | 0;
     $363 = HEAP16[$354 + ($356 * 2096 | 0) + (($360 & 1023) << 1) + 36 >> 1] | 0;
     $364 = $363 << 16 >> 16;
     if ($363 << 16 >> 16 > -1) {
      $370 = HEAPU8[(HEAP32[$354 + ($356 * 2096 | 0) + 8 >> 2] | 0) + $364 >> 0] | 0;
      HEAP32[$66 >> 2] = $360 >>> $370;
      $373 = (HEAP32[$65 >> 2] | 0) - $370 | 0;
      $374 = ($373 | 0) < 0;
      HEAP32[$65 >> 2] = $374 ? 0 : $373;
      $q19$0 = $374 ? -1 : $364;
     } else $q19$0 = _codebook_decode_scalar_raw($f, $354 + ($356 * 2096 | 0) | 0) | 0;
     if (!(HEAP8[$354 + ($356 * 2096 | 0) + 23 >> 0] | 0)) $q19$1 = $q19$0; else $q19$1 = HEAP32[(HEAP32[$354 + ($356 * 2096 | 0) + 2088 >> 2] | 0) + ($q19$0 << 2) >> 2] | 0;
     if (($q19$1 | 0) == -1) {
      label = 157;
      break L97;
     }
     HEAP32[(HEAP32[$37 >> 2] | 0) + ($class_set$2112 << 2) >> 2] = HEAP32[(HEAP32[$67 >> 2] | 0) + ($q19$1 << 2) >> 2];
    }
    if ($68 & ($pcount$4113 | 0) < ($18 | 0)) {
     $i$3106 = 0;
     $pcount$5105 = $pcount$4113;
     while (1) {
      $390 = HEAP32[$16 >> 2] | 0;
      $399 = HEAP16[(HEAP32[$69 >> 2] | 0) + (HEAPU8[(HEAP32[(HEAP32[$37 >> 2] | 0) + ($class_set$2112 << 2) >> 2] | 0) + $i$3106 >> 0] << 4) + ($pass$0117 << 1) >> 1] | 0;
      if ($399 << 16 >> 16 > -1) {
       if (!(_codebook_decode_deinterleave_repeat($f, (HEAP32[$7 >> 2] | 0) + (($399 << 16 >> 16) * 2096 | 0) | 0, $residue_buffers, $ch, $c_inter16, $p_inter17, $n, $390) | 0)) {
        label = 157;
        break L97;
       }
      } else {
       $406 = Math_imul($390, $pcount$5105) | 0;
       $409 = $406 + $390 + (HEAP32[$13 >> 2] | 0) | 0;
       HEAP32[$c_inter16 >> 2] = ($409 | 0) % ($ch | 0) | 0;
       HEAP32[$p_inter17 >> 2] = ($409 | 0) / ($ch | 0) | 0;
      }
      $i$3106 = $i$3106 + 1 | 0;
      $413 = $pcount$5105 + 1 | 0;
      if (!(($i$3106 | 0) < ($10 | 0) & ($413 | 0) < ($18 | 0))) {
       $pcount$5$lcssa = $413;
       break;
      } else $pcount$5105 = $413;
     }
    } else $pcount$5$lcssa = $pcount$4113;
    if (($pcount$5$lcssa | 0) >= ($18 | 0)) break L99;
    $class_set$2112 = $class_set$2112 + 1 | 0;
    $pcount$4113 = $pcount$5$lcssa;
   }
  } while (0);
  $pass$0117 = $pass$0117 + 1 | 0;
  if (($pass$0117 | 0) >= 8) {
   label = 157;
   break;
  }
 }
 if ((label | 0) == 42) {
  HEAP32[$f + 116 >> 2] = 21;
  HEAP32[$19 >> 2] = $20;
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 49) {
  if (!(HEAP8[$f + 1392 >> 0] | 0)) if (HEAP32[$f + 1400 >> 2] | 0) {
   HEAP32[$19 >> 2] = $20;
   STACKTOP = sp;
   return;
  }
  HEAP32[$f + 116 >> 2] = 21;
  HEAP32[$19 >> 2] = $20;
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 157) {
  HEAP32[$19 >> 2] = $20;
  STACKTOP = sp;
  return;
 }
}

function _png_load($filename, $data, $width, $height, $format, $internal_format) {
 $filename = $filename | 0;
 $data = $data | 0;
 $width = $width | 0;
 $height = $height | 0;
 $format = $format | 0;
 $internal_format = $internal_format | 0;
 var $$0$reg2mem$0 = 0, $$reg2mem124$0 = 0, $$reg2mem124$0$phi = 0, $$reg2mem147$0 = 0, $$reg2mem147$0$phi = 0, $$reg2mem172$0 = 0, $$reg2mem174$0 = 0, $0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $104 = 0, $107 = 0, $108 = 0, $114 = 0, $115 = 0, $119 = 0, $120 = 0, $121 = 0, $125 = 0, $126 = 0, $128 = 0, $13 = 0, $131 = 0, $132 = 0, $136 = 0, $137 = 0, $14 = 0, $141 = 0, $142 = 0, $146 = 0, $147 = 0, $149 = 0, $150 = 0, $151 = 0, $153 = 0, $154 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $170 = 0, $172 = 0, $18 = 0, $180 = 0, $181 = 0, $184 = 0, $185 = 0, $187 = 0, $188 = 0, $190 = 0, $191 = 0, $193 = 0, $194 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $43 = 0, $46 = 0, $47 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $62 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $70 = 0, $73 = 0, $74 = 0, $76 = 0, $77 = 0, $79 = 0, $80 = 0, $83 = 0, $84 = 0, $88 = 0, $89 = 0, $9 = 0, $93 = 0, $94 = 0, $95 = 0, $bit_depth = 0, $color_type = 0, $header = 0, $i$01$reg2mem$0 = 0, $info_ptr = 0, $png_ptr = 0, $temp_format$0$reg2mem168$0 = 0, $temp_height = 0, $temp_internal_format$0$reg2mem170$0 = 0, $temp_width = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 _setjmpTableSize = 4;
 _setjmpTable = _malloc(40) | 0;
 HEAP32[_setjmpTable >> 2] = 0;
 $header = sp;
 $png_ptr = sp + 28 | 0;
 $info_ptr = sp + 24 | 0;
 $bit_depth = sp + 20 | 0;
 $color_type = sp + 16 | 0;
 $temp_width = sp + 12 | 0;
 $temp_height = sp + 8 | 0;
 $0 = $header;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 do if (!$data) {
  __THREW__ = 0;
  invoke_viiii(14, 80936, 16096, 38, 16328);
  $5 = __THREW__;
  __THREW__ = 0;
  if (($5 | 0) != 0 & (threwValue | 0) != 0) {
   $6 = _testSetjmp(HEAP32[$5 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
   if (!$6) _longjmp($5 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else $6 = -1;
  if (($6 | 0) == 1) {
   $$reg2mem124$0 = 0;
   $$reg2mem147$0 = 0;
   $$reg2mem174$0 = tempRet0;
  } else {}
 } else {
  if (!$filename) {
   __THREW__ = 0;
   invoke_viiii(14, 16296, 16096, 39, 16328);
   $9 = __THREW__;
   __THREW__ = 0;
   if (($9 | 0) != 0 & (threwValue | 0) != 0) {
    $10 = _testSetjmp(HEAP32[$9 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
    if (!$10) _longjmp($9 | 0, threwValue | 0);
    tempRet0 = threwValue;
   } else $10 = -1;
   if (($10 | 0) == 1) {
    $$reg2mem124$0 = 0;
    $$reg2mem147$0 = 0;
    $$reg2mem174$0 = tempRet0;
    break;
   }
  }
  if (!$width) {
   __THREW__ = 0;
   invoke_viiii(14, 16344, 16096, 40, 16328);
   $13 = __THREW__;
   __THREW__ = 0;
   if (($13 | 0) != 0 & (threwValue | 0) != 0) {
    $14 = _testSetjmp(HEAP32[$13 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
    if (!$14) _longjmp($13 | 0, threwValue | 0);
    tempRet0 = threwValue;
   } else $14 = -1;
   if (($14 | 0) == 1) {
    $$reg2mem124$0 = 0;
    $$reg2mem147$0 = 0;
    $$reg2mem174$0 = tempRet0;
    break;
   }
  }
  if (!$height) {
   __THREW__ = 0;
   invoke_viiii(14, 16352, 16096, 41, 16328);
   $17 = __THREW__;
   __THREW__ = 0;
   if (($17 | 0) != 0 & (threwValue | 0) != 0) {
    $18 = _testSetjmp(HEAP32[$17 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
    if (!$18) _longjmp($17 | 0, threwValue | 0);
    tempRet0 = threwValue;
   } else $18 = -1;
   if (($18 | 0) == 1) {
    $$reg2mem124$0 = 0;
    $$reg2mem147$0 = 0;
    $$reg2mem174$0 = tempRet0;
    break;
   }
  }
  if (!$format) {
   __THREW__ = 0;
   invoke_viiii(14, 61136, 16096, 42, 16328);
   $21 = __THREW__;
   __THREW__ = 0;
   if (($21 | 0) != 0 & (threwValue | 0) != 0) {
    $22 = _testSetjmp(HEAP32[$21 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
    if (!$22) _longjmp($21 | 0, threwValue | 0);
    tempRet0 = threwValue;
   } else $22 = -1;
   if (($22 | 0) == 1) {
    $$reg2mem124$0 = 0;
    $$reg2mem147$0 = 0;
    $$reg2mem174$0 = tempRet0;
    break;
   }
  }
  if (!$internal_format) {
   __THREW__ = 0;
   invoke_viiii(14, 16360, 16096, 43, 16328);
   $25 = __THREW__;
   __THREW__ = 0;
   if (($25 | 0) != 0 & (threwValue | 0) != 0) {
    $26 = _testSetjmp(HEAP32[$25 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
    if (!$26) _longjmp($25 | 0, threwValue | 0);
    tempRet0 = threwValue;
   } else $26 = -1;
   if (($26 | 0) == 1) {
    $$reg2mem124$0 = 0;
    $$reg2mem147$0 = 0;
    $$reg2mem174$0 = tempRet0;
    break;
   }
  }
  __THREW__ = 0;
  $28 = invoke_iii(17, $filename | 0, 80904) | 0;
  $29 = __THREW__;
  __THREW__ = 0;
  if (($29 | 0) != 0 & (threwValue | 0) != 0) {
   $30 = _testSetjmp(HEAP32[$29 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
   if (!$30) _longjmp($29 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else $30 = -1;
  if (($30 | 0) == 1) {
   $$reg2mem124$0 = 0;
   $$reg2mem147$0 = $28;
   $$reg2mem174$0 = tempRet0;
  } else {
   if (!$28) {
    $$0$reg2mem$0 = -2;
    _free(_setjmpTable | 0);
    STACKTOP = sp;
    return $$0$reg2mem$0 | 0;
   }
   __THREW__ = 0;
   $33 = invoke_iiiii(1, $header | 0, 1, 8, $28 | 0) | 0;
   $34 = __THREW__;
   __THREW__ = 0;
   if (($34 | 0) != 0 & (threwValue | 0) != 0) {
    $35 = _testSetjmp(HEAP32[$34 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
    if (!$35) _longjmp($34 | 0, threwValue | 0);
    tempRet0 = threwValue;
   } else $35 = -1;
   if (($35 | 0) == 1) {
    $$reg2mem124$0 = 0;
    $$reg2mem147$0 = $28;
    $$reg2mem174$0 = tempRet0;
   } else {
    if (($33 | 0) != 8) {
     __THREW__ = 0;
     invoke_ii(332, $28 | 0) | 0;
     $38 = __THREW__;
     __THREW__ = 0;
     if (($38 | 0) != 0 & (threwValue | 0) != 0) {
      $39 = _testSetjmp(HEAP32[$38 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
      if (!$39) _longjmp($38 | 0, threwValue | 0);
      tempRet0 = threwValue;
     } else $39 = -1;
     if (($39 | 0) == 1) {
      $$reg2mem124$0 = 0;
      $$reg2mem147$0 = $28;
      $$reg2mem174$0 = tempRet0;
      break;
     }
     $$0$reg2mem$0 = -74;
     _free(_setjmpTable | 0);
     STACKTOP = sp;
     return $$0$reg2mem$0 | 0;
    }
    __THREW__ = 0;
    $41 = invoke_iiii(10, $header | 0, 0, 8) | 0;
    $42 = __THREW__;
    __THREW__ = 0;
    if (($42 | 0) != 0 & (threwValue | 0) != 0) {
     $43 = _testSetjmp(HEAP32[$42 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
     if (!$43) _longjmp($42 | 0, threwValue | 0);
     tempRet0 = threwValue;
    } else $43 = -1;
    if (($43 | 0) == 1) {
     $$reg2mem124$0 = 0;
     $$reg2mem147$0 = $28;
     $$reg2mem174$0 = tempRet0;
    } else {
     if ($41) {
      __THREW__ = 0;
      invoke_ii(332, $28 | 0) | 0;
      $46 = __THREW__;
      __THREW__ = 0;
      if (($46 | 0) != 0 & (threwValue | 0) != 0) {
       $47 = _testSetjmp(HEAP32[$46 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
       if (!$47) _longjmp($46 | 0, threwValue | 0);
       tempRet0 = threwValue;
      } else $47 = -1;
      if (($47 | 0) == 1) {
       $$reg2mem124$0 = 0;
       $$reg2mem147$0 = $28;
       $$reg2mem174$0 = tempRet0;
       break;
      }
      $$0$reg2mem$0 = -74;
      _free(_setjmpTable | 0);
      STACKTOP = sp;
      return $$0$reg2mem$0 | 0;
     }
     __THREW__ = 0;
     $49 = invoke_iiiii(2, 71752, 0, 0, 0) | 0;
     $50 = __THREW__;
     __THREW__ = 0;
     if (($50 | 0) != 0 & (threwValue | 0) != 0) {
      $51 = _testSetjmp(HEAP32[$50 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
      if (!$51) _longjmp($50 | 0, threwValue | 0);
      tempRet0 = threwValue;
     } else $51 = -1;
     if (($51 | 0) == 1) {
      $$reg2mem124$0 = $49;
      $$reg2mem147$0 = $28;
      $$reg2mem174$0 = tempRet0;
     } else {
      HEAP32[$png_ptr >> 2] = $49;
      if (!$49) {
       __THREW__ = 0;
       invoke_v(4);
       $54 = __THREW__;
       __THREW__ = 0;
       if (($54 | 0) != 0 & (threwValue | 0) != 0) {
        $55 = _testSetjmp(HEAP32[$54 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
        if (!$55) _longjmp($54 | 0, threwValue | 0);
        tempRet0 = threwValue;
       } else $55 = -1;
       if (($55 | 0) == 1) {
        $$reg2mem124$0 = $49;
        $$reg2mem147$0 = $28;
        $$reg2mem174$0 = tempRet0;
        break;
       }
      }
      __THREW__ = 0;
      $57 = invoke_ii(333, $49 | 0) | 0;
      $58 = __THREW__;
      __THREW__ = 0;
      if (($58 | 0) != 0 & (threwValue | 0) != 0) {
       $59 = _testSetjmp(HEAP32[$58 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
       if (!$59) _longjmp($58 | 0, threwValue | 0);
       tempRet0 = threwValue;
      } else $59 = -1;
      if (($59 | 0) == 1) {
       $$reg2mem124$0 = $49;
       $$reg2mem147$0 = $28;
       $$reg2mem174$0 = tempRet0;
      } else {
       HEAP32[$info_ptr >> 2] = $57;
       if (!$57) {
        __THREW__ = 0;
        invoke_v(4);
        $62 = __THREW__;
        __THREW__ = 0;
        if (($62 | 0) != 0 & (threwValue | 0) != 0) {
         $63 = _testSetjmp(HEAP32[$62 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
         if (!$63) _longjmp($62 | 0, threwValue | 0);
         tempRet0 = threwValue;
        } else $63 = -1;
        if (($63 | 0) == 1) {
         $$reg2mem124$0 = $49;
         $$reg2mem147$0 = $28;
         $$reg2mem174$0 = tempRet0;
         break;
        }
       }
       __THREW__ = 0;
       $65 = invoke_iiii(11, $49 | 0, 71, 156) | 0;
       $66 = __THREW__;
       __THREW__ = 0;
       if (($66 | 0) != 0 & (threwValue | 0) != 0) {
        $67 = _testSetjmp(HEAP32[$66 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
        if (!$67) _longjmp($66 | 0, threwValue | 0);
        tempRet0 = threwValue;
       } else $67 = -1;
       if (($67 | 0) == 1) {
        $$reg2mem124$0 = $49;
        $$reg2mem147$0 = $28;
        $$reg2mem174$0 = tempRet0;
       } else {
        _setjmpTable = _saveSetjmp($65, 1, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
        _setjmpTableSize = tempRet0;
        __THREW__ = 0;
        $69 = __THREW__;
        __THREW__ = 0;
        if (($69 | 0) != 0 & (threwValue | 0) != 0) {
         $70 = _testSetjmp(HEAP32[$69 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
         if (!$70) _longjmp($69 | 0, threwValue | 0);
         tempRet0 = threwValue;
        } else $70 = -1;
        if (($70 | 0) == 1) {
         $$reg2mem124$0 = $49;
         $$reg2mem147$0 = $28;
         $$reg2mem174$0 = tempRet0;
        } else {
         $$reg2mem124$0 = $49;
         $$reg2mem147$0 = $28;
         $$reg2mem174$0 = 0;
        }
       }
      }
     }
    }
   }
  }
 } while (0);
 while (1) {
  if ($$reg2mem174$0) {
   __THREW__ = 0;
   invoke_viii(6, $png_ptr | 0, $info_ptr | 0, 0);
   $73 = __THREW__;
   __THREW__ = 0;
   if (($73 | 0) != 0 & (threwValue | 0) != 0) {
    $74 = _testSetjmp(HEAP32[$73 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
    if (!$74) _longjmp($73 | 0, threwValue | 0);
    tempRet0 = threwValue;
   } else $74 = -1;
   if (($74 | 0) == 1) {
    $$reg2mem147$0$phi = $$reg2mem147$0;
    $$reg2mem124$0$phi = $$reg2mem124$0;
    $$reg2mem174$0 = tempRet0;
    $$reg2mem147$0 = $$reg2mem147$0$phi;
    $$reg2mem124$0 = $$reg2mem124$0$phi;
    continue;
   }
   __THREW__ = 0;
   invoke_ii(332, $$reg2mem147$0 | 0) | 0;
   $76 = __THREW__;
   __THREW__ = 0;
   if (($76 | 0) != 0 & (threwValue | 0) != 0) {
    $77 = _testSetjmp(HEAP32[$76 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
    if (!$77) _longjmp($76 | 0, threwValue | 0);
    tempRet0 = threwValue;
   } else $77 = -1;
   if (($77 | 0) == 1) {
    $$reg2mem147$0$phi = $$reg2mem147$0;
    $$reg2mem124$0$phi = $$reg2mem124$0;
    $$reg2mem174$0 = tempRet0;
    $$reg2mem147$0 = $$reg2mem147$0$phi;
    $$reg2mem124$0 = $$reg2mem124$0$phi;
    continue;
   } else {
    label = 43;
    break;
   }
  }
  __THREW__ = 0;
  invoke_vii(72, $$reg2mem124$0 | 0, $$reg2mem147$0 | 0);
  $79 = __THREW__;
  __THREW__ = 0;
  if (($79 | 0) != 0 & (threwValue | 0) != 0) {
   $80 = _testSetjmp(HEAP32[$79 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
   if (!$80) _longjmp($79 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else $80 = -1;
  if (($80 | 0) == 1) {
   $$reg2mem147$0$phi = $$reg2mem147$0;
   $$reg2mem124$0$phi = $$reg2mem124$0;
   $$reg2mem174$0 = tempRet0;
   $$reg2mem147$0 = $$reg2mem147$0$phi;
   $$reg2mem124$0 = $$reg2mem124$0$phi;
   continue;
  }
  __THREW__ = 0;
  invoke_vii(73, HEAP32[$png_ptr >> 2] | 0, 8);
  $83 = __THREW__;
  __THREW__ = 0;
  if (($83 | 0) != 0 & (threwValue | 0) != 0) {
   $84 = _testSetjmp(HEAP32[$83 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
   if (!$84) _longjmp($83 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else $84 = -1;
  if (($84 | 0) == 1) {
   $$reg2mem147$0$phi = $$reg2mem147$0;
   $$reg2mem124$0$phi = $$reg2mem124$0;
   $$reg2mem174$0 = tempRet0;
   $$reg2mem147$0 = $$reg2mem147$0$phi;
   $$reg2mem124$0 = $$reg2mem124$0$phi;
   continue;
  }
  __THREW__ = 0;
  invoke_vii(74, HEAP32[$png_ptr >> 2] | 0, HEAP32[$info_ptr >> 2] | 0);
  $88 = __THREW__;
  __THREW__ = 0;
  if (($88 | 0) != 0 & (threwValue | 0) != 0) {
   $89 = _testSetjmp(HEAP32[$88 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
   if (!$89) _longjmp($88 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else $89 = -1;
  if (($89 | 0) == 1) {
   $$reg2mem147$0$phi = $$reg2mem147$0;
   $$reg2mem124$0$phi = $$reg2mem124$0;
   $$reg2mem174$0 = tempRet0;
   $$reg2mem147$0 = $$reg2mem147$0$phi;
   $$reg2mem124$0 = $$reg2mem124$0$phi;
   continue;
  }
  __THREW__ = 0;
  $93 = invoke_iii(18, HEAP32[$png_ptr >> 2] | 0, HEAP32[$info_ptr >> 2] | 0) | 0;
  $94 = __THREW__;
  __THREW__ = 0;
  if (($94 | 0) != 0 & (threwValue | 0) != 0) {
   $95 = _testSetjmp(HEAP32[$94 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
   if (!$95) _longjmp($94 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else $95 = -1;
  if (($95 | 0) == 1) {
   $$reg2mem147$0$phi = $$reg2mem147$0;
   $$reg2mem124$0$phi = $$reg2mem124$0;
   $$reg2mem174$0 = tempRet0;
   $$reg2mem147$0 = $$reg2mem147$0$phi;
   $$reg2mem124$0 = $$reg2mem124$0$phi;
   continue;
  }
  HEAP32[$bit_depth >> 2] = $93 & 255;
  __THREW__ = 0;
  $100 = invoke_iii(19, HEAP32[$png_ptr >> 2] | 0, HEAP32[$info_ptr >> 2] | 0) | 0;
  $101 = __THREW__;
  __THREW__ = 0;
  if (($101 | 0) != 0 & (threwValue | 0) != 0) {
   $102 = _testSetjmp(HEAP32[$101 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
   if (!$102) _longjmp($101 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else $102 = -1;
  if (($102 | 0) == 1) {
   $$reg2mem147$0$phi = $$reg2mem147$0;
   $$reg2mem124$0$phi = $$reg2mem124$0;
   $$reg2mem174$0 = tempRet0;
   $$reg2mem147$0 = $$reg2mem147$0$phi;
   $$reg2mem124$0 = $$reg2mem124$0$phi;
   continue;
  }
  $104 = $100 & 255;
  HEAP32[$color_type >> 2] = $104;
  if ($100 << 24 >> 24 == 3) {
   __THREW__ = 0;
   invoke_vi(87, HEAP32[$png_ptr >> 2] | 0);
   $107 = __THREW__;
   __THREW__ = 0;
   if (($107 | 0) != 0 & (threwValue | 0) != 0) {
    $108 = _testSetjmp(HEAP32[$107 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
    if (!$108) _longjmp($107 | 0, threwValue | 0);
    tempRet0 = threwValue;
   } else $108 = -1;
   if (($108 | 0) == 1) {
    $$reg2mem147$0$phi = $$reg2mem147$0;
    $$reg2mem124$0$phi = $$reg2mem124$0;
    $$reg2mem174$0 = tempRet0;
    $$reg2mem147$0 = $$reg2mem147$0$phi;
    $$reg2mem124$0 = $$reg2mem124$0$phi;
    continue;
   }
   $$reg2mem172$0 = HEAP32[$color_type >> 2] | 0;
  } else $$reg2mem172$0 = $104;
  if (($$reg2mem172$0 | 0) == 0 & (HEAP32[$bit_depth >> 2] | 0) < 8) {
   __THREW__ = 0;
   invoke_vi(88, HEAP32[$png_ptr >> 2] | 0);
   $114 = __THREW__;
   __THREW__ = 0;
   if (($114 | 0) != 0 & (threwValue | 0) != 0) {
    $115 = _testSetjmp(HEAP32[$114 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
    if (!$115) _longjmp($114 | 0, threwValue | 0);
    tempRet0 = threwValue;
   } else $115 = -1;
   if (($115 | 0) == 1) {
    $$reg2mem147$0$phi = $$reg2mem147$0;
    $$reg2mem124$0$phi = $$reg2mem124$0;
    $$reg2mem174$0 = tempRet0;
    $$reg2mem147$0 = $$reg2mem147$0$phi;
    $$reg2mem124$0 = $$reg2mem124$0$phi;
    continue;
   }
  }
  __THREW__ = 0;
  $119 = invoke_iiii(12, HEAP32[$png_ptr >> 2] | 0, HEAP32[$info_ptr >> 2] | 0, 16) | 0;
  $120 = __THREW__;
  __THREW__ = 0;
  if (($120 | 0) != 0 & (threwValue | 0) != 0) {
   $121 = _testSetjmp(HEAP32[$120 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
   if (!$121) _longjmp($120 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else $121 = -1;
  if (($121 | 0) == 1) {
   $$reg2mem147$0$phi = $$reg2mem147$0;
   $$reg2mem124$0$phi = $$reg2mem124$0;
   $$reg2mem174$0 = tempRet0;
   $$reg2mem147$0 = $$reg2mem147$0$phi;
   $$reg2mem124$0 = $$reg2mem124$0$phi;
   continue;
  }
  if ($119) {
   __THREW__ = 0;
   invoke_vi(89, HEAP32[$png_ptr >> 2] | 0);
   $125 = __THREW__;
   __THREW__ = 0;
   if (($125 | 0) != 0 & (threwValue | 0) != 0) {
    $126 = _testSetjmp(HEAP32[$125 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
    if (!$126) _longjmp($125 | 0, threwValue | 0);
    tempRet0 = threwValue;
   } else $126 = -1;
   if (($126 | 0) == 1) {
    $$reg2mem147$0$phi = $$reg2mem147$0;
    $$reg2mem124$0$phi = $$reg2mem124$0;
    $$reg2mem174$0 = tempRet0;
    $$reg2mem147$0 = $$reg2mem147$0$phi;
    $$reg2mem124$0 = $$reg2mem124$0$phi;
    continue;
   }
  }
  $128 = HEAP32[$bit_depth >> 2] | 0;
  if (($128 | 0) == 16) {
   __THREW__ = 0;
   invoke_vi(90, HEAP32[$png_ptr >> 2] | 0);
   $131 = __THREW__;
   __THREW__ = 0;
   if (($131 | 0) != 0 & (threwValue | 0) != 0) {
    $132 = _testSetjmp(HEAP32[$131 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
    if (!$132) _longjmp($131 | 0, threwValue | 0);
    tempRet0 = threwValue;
   } else $132 = -1;
   if (($132 | 0) == 1) {
    $$reg2mem147$0$phi = $$reg2mem147$0;
    $$reg2mem124$0$phi = $$reg2mem124$0;
    $$reg2mem174$0 = tempRet0;
    $$reg2mem147$0 = $$reg2mem147$0$phi;
    $$reg2mem124$0 = $$reg2mem124$0$phi;
    continue;
   }
  } else if (($128 | 0) < 8) {
   __THREW__ = 0;
   invoke_vi(91, HEAP32[$png_ptr >> 2] | 0);
   $136 = __THREW__;
   __THREW__ = 0;
   if (($136 | 0) != 0 & (threwValue | 0) != 0) {
    $137 = _testSetjmp(HEAP32[$136 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
    if (!$137) _longjmp($136 | 0, threwValue | 0);
    tempRet0 = threwValue;
   } else $137 = -1;
   if (($137 | 0) == 1) {
    $$reg2mem147$0$phi = $$reg2mem147$0;
    $$reg2mem124$0$phi = $$reg2mem124$0;
    $$reg2mem174$0 = tempRet0;
    $$reg2mem147$0 = $$reg2mem147$0$phi;
    $$reg2mem124$0 = $$reg2mem124$0$phi;
    continue;
   }
  }
  __THREW__ = 0;
  invoke_vii(75, HEAP32[$png_ptr >> 2] | 0, HEAP32[$info_ptr >> 2] | 0);
  $141 = __THREW__;
  __THREW__ = 0;
  if (($141 | 0) != 0 & (threwValue | 0) != 0) {
   $142 = _testSetjmp(HEAP32[$141 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
   if (!$142) _longjmp($141 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else $142 = -1;
  if (($142 | 0) == 1) {
   $$reg2mem147$0$phi = $$reg2mem147$0;
   $$reg2mem124$0$phi = $$reg2mem124$0;
   $$reg2mem174$0 = tempRet0;
   $$reg2mem147$0 = $$reg2mem147$0$phi;
   $$reg2mem124$0 = $$reg2mem124$0$phi;
   continue;
  }
  __THREW__ = 0;
  invoke_iiiiiiiiii(1, HEAP32[$png_ptr >> 2] | 0, HEAP32[$info_ptr >> 2] | 0, $temp_width | 0, $temp_height | 0, $bit_depth | 0, $color_type | 0, 0, 0, 0) | 0;
  $146 = __THREW__;
  __THREW__ = 0;
  if (($146 | 0) != 0 & (threwValue | 0) != 0) {
   $147 = _testSetjmp(HEAP32[$146 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
   if (!$147) _longjmp($146 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else $147 = -1;
  if (($147 | 0) == 1) {
   $$reg2mem147$0$phi = $$reg2mem147$0;
   $$reg2mem124$0$phi = $$reg2mem124$0;
   $$reg2mem174$0 = tempRet0;
   $$reg2mem147$0 = $$reg2mem147$0$phi;
   $$reg2mem124$0 = $$reg2mem124$0$phi;
   continue;
  }
  $149 = HEAP32[$color_type >> 2] | 0;
  if (($149 | 0) == 4) {
   $temp_format$0$reg2mem168$0 = 6410;
   $temp_internal_format$0$reg2mem170$0 = 2;
  } else if (($149 | 0) == 2) {
   $temp_format$0$reg2mem168$0 = 6407;
   $temp_internal_format$0$reg2mem170$0 = 3;
  } else if (($149 | 0) == 6) {
   $temp_format$0$reg2mem168$0 = 6408;
   $temp_internal_format$0$reg2mem170$0 = 4;
  } else if (!$149) {
   $temp_format$0$reg2mem168$0 = 6409;
   $temp_internal_format$0$reg2mem170$0 = 1;
  } else {
   __THREW__ = 0;
   invoke_viii(6, $png_ptr | 0, $info_ptr | 0, 0);
   $150 = __THREW__;
   __THREW__ = 0;
   if (($150 | 0) != 0 & (threwValue | 0) != 0) {
    $151 = _testSetjmp(HEAP32[$150 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
    if (!$151) _longjmp($150 | 0, threwValue | 0);
    tempRet0 = threwValue;
   } else $151 = -1;
   if (($151 | 0) == 1) {
    $$reg2mem147$0$phi = $$reg2mem147$0;
    $$reg2mem124$0$phi = $$reg2mem124$0;
    $$reg2mem174$0 = tempRet0;
    $$reg2mem147$0 = $$reg2mem147$0$phi;
    $$reg2mem124$0 = $$reg2mem124$0$phi;
    continue;
   }
   __THREW__ = 0;
   invoke_ii(332, $$reg2mem147$0 | 0) | 0;
   $153 = __THREW__;
   __THREW__ = 0;
   if (($153 | 0) != 0 & (threwValue | 0) != 0) {
    $154 = _testSetjmp(HEAP32[$153 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
    if (!$154) _longjmp($153 | 0, threwValue | 0);
    tempRet0 = threwValue;
   } else $154 = -1;
   if (($154 | 0) == 1) {
    $$reg2mem147$0$phi = $$reg2mem147$0;
    $$reg2mem124$0$phi = $$reg2mem124$0;
    $$reg2mem174$0 = tempRet0;
    $$reg2mem147$0 = $$reg2mem147$0$phi;
    $$reg2mem124$0 = $$reg2mem124$0$phi;
    continue;
   } else {
    label = 73;
    break;
   }
  }
  $159 = Math_imul(Math_imul(HEAP32[$temp_width >> 2] | 0, $temp_internal_format$0$reg2mem170$0) | 0, HEAP32[$temp_height >> 2] | 0) | 0;
  __THREW__ = 0;
  $160 = invoke_ii(334, $159 | 0) | 0;
  $161 = __THREW__;
  __THREW__ = 0;
  if (($161 | 0) != 0 & (threwValue | 0) != 0) {
   $162 = _testSetjmp(HEAP32[$161 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
   if (!$162) _longjmp($161 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else $162 = -1;
  if (($162 | 0) == 1) {
   $$reg2mem147$0$phi = $$reg2mem147$0;
   $$reg2mem124$0$phi = $$reg2mem124$0;
   $$reg2mem174$0 = tempRet0;
   $$reg2mem147$0 = $$reg2mem147$0$phi;
   $$reg2mem124$0 = $$reg2mem124$0$phi;
   continue;
  }
  __THREW__ = 0;
  $166 = invoke_ii(334, HEAP32[$temp_height >> 2] << 2 | 0) | 0;
  $167 = __THREW__;
  __THREW__ = 0;
  if (($167 | 0) != 0 & (threwValue | 0) != 0) {
   $168 = _testSetjmp(HEAP32[$167 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
   if (!$168) _longjmp($167 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else $168 = -1;
  if (($168 | 0) == 1) {
   $$reg2mem147$0$phi = $$reg2mem147$0;
   $$reg2mem124$0$phi = $$reg2mem124$0;
   $$reg2mem174$0 = tempRet0;
   $$reg2mem147$0 = $$reg2mem147$0$phi;
   $$reg2mem124$0 = $$reg2mem124$0$phi;
   continue;
  }
  $170 = HEAP32[$temp_height >> 2] | 0;
  if ($170) {
   $172 = HEAP32[$temp_width >> 2] | 0;
   $i$01$reg2mem$0 = 0;
   do {
    HEAP32[$166 + ($i$01$reg2mem$0 << 2) >> 2] = $160 + (Math_imul(Math_imul($i$01$reg2mem$0, $temp_internal_format$0$reg2mem170$0) | 0, $172) | 0);
    $i$01$reg2mem$0 = $i$01$reg2mem$0 + 1 | 0;
   } while ($i$01$reg2mem$0 >>> 0 < $170 >>> 0);
  }
  __THREW__ = 0;
  invoke_vii(76, HEAP32[$png_ptr >> 2] | 0, $166 | 0);
  $180 = __THREW__;
  __THREW__ = 0;
  if (($180 | 0) != 0 & (threwValue | 0) != 0) {
   $181 = _testSetjmp(HEAP32[$180 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
   if (!$181) _longjmp($180 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else $181 = -1;
  if (($181 | 0) == 1) {
   $$reg2mem147$0$phi = $$reg2mem147$0;
   $$reg2mem124$0$phi = $$reg2mem124$0;
   $$reg2mem174$0 = tempRet0;
   $$reg2mem147$0 = $$reg2mem147$0$phi;
   $$reg2mem124$0 = $$reg2mem124$0$phi;
   continue;
  }
  __THREW__ = 0;
  invoke_vii(77, HEAP32[$png_ptr >> 2] | 0, 0);
  $184 = __THREW__;
  __THREW__ = 0;
  if (($184 | 0) != 0 & (threwValue | 0) != 0) {
   $185 = _testSetjmp(HEAP32[$184 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
   if (!$185) _longjmp($184 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else $185 = -1;
  if (($185 | 0) == 1) {
   $$reg2mem147$0$phi = $$reg2mem147$0;
   $$reg2mem124$0$phi = $$reg2mem124$0;
   $$reg2mem174$0 = tempRet0;
   $$reg2mem147$0 = $$reg2mem147$0$phi;
   $$reg2mem124$0 = $$reg2mem124$0$phi;
   continue;
  }
  __THREW__ = 0;
  invoke_viii(6, $png_ptr | 0, $info_ptr | 0, 0);
  $187 = __THREW__;
  __THREW__ = 0;
  if (($187 | 0) != 0 & (threwValue | 0) != 0) {
   $188 = _testSetjmp(HEAP32[$187 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
   if (!$188) _longjmp($187 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else $188 = -1;
  if (($188 | 0) == 1) {
   $$reg2mem147$0$phi = $$reg2mem147$0;
   $$reg2mem124$0$phi = $$reg2mem124$0;
   $$reg2mem174$0 = tempRet0;
   $$reg2mem147$0 = $$reg2mem147$0$phi;
   $$reg2mem124$0 = $$reg2mem124$0$phi;
   continue;
  }
  __THREW__ = 0;
  invoke_vi(92, $166 | 0);
  $190 = __THREW__;
  __THREW__ = 0;
  if (($190 | 0) != 0 & (threwValue | 0) != 0) {
   $191 = _testSetjmp(HEAP32[$190 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
   if (!$191) _longjmp($190 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else $191 = -1;
  if (($191 | 0) == 1) {
   $$reg2mem147$0$phi = $$reg2mem147$0;
   $$reg2mem124$0$phi = $$reg2mem124$0;
   $$reg2mem174$0 = tempRet0;
   $$reg2mem147$0 = $$reg2mem147$0$phi;
   $$reg2mem124$0 = $$reg2mem124$0$phi;
   continue;
  }
  __THREW__ = 0;
  invoke_ii(332, $$reg2mem147$0 | 0) | 0;
  $193 = __THREW__;
  __THREW__ = 0;
  if (($193 | 0) != 0 & (threwValue | 0) != 0) {
   $194 = _testSetjmp(HEAP32[$193 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
   if (!$194) _longjmp($193 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else $194 = -1;
  if (($194 | 0) == 1) {
   $$reg2mem147$0$phi = $$reg2mem147$0;
   $$reg2mem124$0$phi = $$reg2mem124$0;
   $$reg2mem174$0 = tempRet0;
   $$reg2mem147$0 = $$reg2mem147$0$phi;
   $$reg2mem124$0 = $$reg2mem124$0$phi;
  } else {
   label = 84;
   break;
  }
 }
 if ((label | 0) == 43) {
  $$0$reg2mem$0 = -74;
  _free(_setjmpTable | 0);
  STACKTOP = sp;
  return $$0$reg2mem$0 | 0;
 } else if ((label | 0) == 73) {
  $$0$reg2mem$0 = -95;
  _free(_setjmpTable | 0);
  STACKTOP = sp;
  return $$0$reg2mem$0 | 0;
 } else if ((label | 0) == 84) {
  HEAP32[$width >> 2] = HEAP32[$temp_width >> 2];
  HEAP32[$height >> 2] = HEAP32[$temp_height >> 2];
  HEAP32[$format >> 2] = $temp_format$0$reg2mem168$0;
  HEAP32[$internal_format >> 2] = $temp_internal_format$0$reg2mem170$0;
  HEAP32[$data >> 2] = $160;
  $$0$reg2mem$0 = 0;
  _free(_setjmpTable | 0);
  STACKTOP = sp;
  return $$0$reg2mem$0 | 0;
 }
 return 0;
}

function __ZN7b2World8SolveTOIERK10b2TimeStep($this, $step) {
 $this = $this | 0;
 $step = $step | 0;
 var $$pre$phiZ2D = 0, $1 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0.0, $110 = 0.0, $113 = 0, $114 = 0.0, $118 = 0, $119 = 0.0, $122 = 0.0, $127 = 0, $128 = 0.0, $136 = 0.0, $139 = 0, $140 = 0.0, $144 = 0, $145 = 0.0, $148 = 0.0, $153 = 0, $154 = 0.0, $160 = 0, $162 = 0, $17 = 0, $172 = 0.0, $188 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $201 = 0, $202 = 0.0, $204 = 0, $206 = 0, $207 = 0.0, $21 = 0, $210 = 0.0, $213 = 0, $215 = 0, $216 = 0.0, $219 = 0.0, $22 = 0, $222 = 0, $224 = 0, $227 = 0, $228 = 0, $23 = 0, $232 = 0.0, $233 = 0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0.0, $24 = 0, $240 = 0, $241 = 0.0, $247 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0, $256 = 0, $257 = 0.0, $26 = 0, $261 = 0.0, $262 = 0, $264 = 0, $265 = 0.0, $267 = 0, $269 = 0, $27 = 0, $270 = 0.0, $273 = 0.0, $276 = 0, $278 = 0, $279 = 0.0, $28 = 0, $282 = 0.0, $285 = 0, $287 = 0, $29 = 0, $290 = 0, $291 = 0, $295 = 0.0, $296 = 0, $297 = 0.0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0.0, $303 = 0, $304 = 0.0, $31 = 0, $310 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0, $32 = 0, $320 = 0, $321 = 0, $323 = 0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0.0, $332 = 0.0, $334 = 0.0, $34 = 0, $344 = 0.0, $345 = 0.0, $346 = 0, $35 = 0, $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $355 = 0.0, $36 = 0, $365 = 0.0, $366 = 0.0, $367 = 0, $37 = 0, $371 = 0, $373 = 0, $379 = 0, $38 = 0, $381 = 0, $389 = 0, $39 = 0, $390 = 0, $393 = 0, $396 = 0, $397 = 0, $4 = 0, $40 = 0, $401 = 0, $41 = 0, $418 = 0, $42 = 0, $422 = 0, $43 = 0, $430 = 0, $431 = 0, $435 = 0, $44 = 0, $45 = 0, $455 = 0, $456 = 0, $460 = 0, $461 = 0.0, $465 = 0.0, $468 = 0, $469 = 0.0, $473 = 0, $474 = 0.0, $477 = 0.0, $480 = 0, $482 = 0, $483 = 0.0, $486 = 0.0, $489 = 0, $491 = 0, $494 = 0, $495 = 0, $499 = 0.0, $501 = 0.0, $505 = 0.0, $508 = 0.0, $514 = 0.0, $516 = 0.0, $517 = 0.0, $518 = 0.0, $519 = 0, $524 = 0, $528 = 0.0, $529 = 0.0, $53 = 0, $531 = 0.0, $535 = 0.0, $538 = 0.0, $54 = 0, $550 = 0.0, $551 = 0.0, $552 = 0, $559 = 0.0, $560 = 0.0, $562 = 0.0, $566 = 0.0, $569 = 0.0, $581 = 0.0, $582 = 0.0, $583 = 0, $588 = 0, $595 = 0, $607 = 0, $611 = 0, $620 = 0.0, $625 = 0, $629 = 0, $630 = 0, $641 = 0, $648 = 0, $65 = 0, $651 = 0, $67 = 0, $75 = 0, $77 = 0, $78 = 0, $79 = 0, $83 = 0, $88 = 0, $9 = 0, $alpha$0 = 0.0, $alpha$1 = 0.0, $alpha0$0 = 0.0, $b$093 = 0, $b$094 = 0, $backup = 0, $backup1 = 0, $backup2 = 0, $bodies = 0, $c$089 = 0, $c$090 = 0, $c1$037 = 0, $c1$040 = 0, $ce$048 = 0, $ce$049 = 0, $ce8$054 = 0, $ce8$055 = 0, $i$052 = 0, $i6$060 = 0, $input = 0, $island = 0, $minAlpha$038 = 0.0, $minAlpha$1 = 0.0, $minContact$039 = 0, $minContact$1 = 0, $output = 0, $subStep = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 $island = sp + 284 | 0;
 $input = sp + 152 | 0;
 $output = sp + 144 | 0;
 $backup1 = sp + 108 | 0;
 $backup2 = sp + 72 | 0;
 $bodies = sp + 64 | 0;
 $backup = sp + 24 | 0;
 $subStep = sp;
 $1 = $this + 102872 | 0;
 $2 = $this + 102944 | 0;
 __ZN8b2IslandC2EiiiP16b2StackAllocatorP17b2ContactListener($island, 64, 32, 0, $this + 68 | 0, HEAP32[$2 >> 2] | 0);
 $4 = $this + 102995 | 0;
 if (!(HEAP8[$4 >> 0] | 0)) $$pre$phiZ2D = $this + 102932 | 0; else {
  $b$093 = HEAP32[$this + 102952 >> 2] | 0;
  if ($b$093) {
   $b$094 = $b$093;
   do {
    $9 = $b$094 + 4 | 0;
    HEAP16[$9 >> 1] = HEAPU16[$9 >> 1] & 65534;
    HEAPF32[$b$094 + 60 >> 2] = 0.0;
    $b$094 = HEAP32[$b$094 + 96 >> 2] | 0;
   } while (($b$094 | 0) != 0);
  }
  $17 = $this + 102932 | 0;
  $c$089 = HEAP32[$17 >> 2] | 0;
  if (!$c$089) $$pre$phiZ2D = $17; else {
   $c$090 = $c$089;
   do {
    $45 = $c$090 + 4 | 0;
    HEAP32[$45 >> 2] = HEAP32[$45 >> 2] & -34;
    HEAP32[$c$090 + 128 >> 2] = 0;
    HEAPF32[$c$090 + 132 >> 2] = 1.0;
    $c$090 = HEAP32[$c$090 + 12 >> 2] | 0;
   } while (($c$090 | 0) != 0);
   $$pre$phiZ2D = $17;
  }
 }
 $19 = $island + 28 | 0;
 $20 = $island + 36 | 0;
 $21 = $island + 32 | 0;
 $22 = $island + 40 | 0;
 $23 = $island + 8 | 0;
 $24 = $island + 44 | 0;
 $25 = $island + 12 | 0;
 $26 = $bodies + 4 | 0;
 $27 = $subStep + 4 | 0;
 $28 = $subStep + 8 | 0;
 $29 = $subStep + 16 | 0;
 $30 = $step + 12 | 0;
 $31 = $subStep + 12 | 0;
 $32 = $subStep + 20 | 0;
 $33 = $this + 102994 | 0;
 $34 = $input + 16 | 0;
 $35 = $input + 20 | 0;
 $36 = $input + 24 | 0;
 $37 = $input + 44 | 0;
 $38 = $input + 48 | 0;
 $39 = $input + 52 | 0;
 $40 = $input + 28 | 0;
 $41 = $input + 56 | 0;
 $42 = $input + 92 | 0;
 $43 = $input + 128 | 0;
 $44 = $output + 4 | 0;
 L11 : while (1) {
  $c1$037 = HEAP32[$$pre$phiZ2D >> 2] | 0;
  if (!$c1$037) {
   label = 36;
   break;
  } else {
   $c1$040 = $c1$037;
   $minAlpha$038 = 1.0;
   $minContact$039 = 0;
  }
  while (1) {
   $53 = $c1$040 + 4 | 0;
   $54 = HEAP32[$53 >> 2] | 0;
   do if (!($54 & 4)) {
    $minAlpha$1 = $minAlpha$038;
    $minContact$1 = $minContact$039;
   } else if ((HEAP32[$c1$040 + 128 >> 2] | 0) > 8) {
    $minAlpha$1 = $minAlpha$038;
    $minContact$1 = $minContact$039;
   } else {
    if (!($54 & 32)) {
     $65 = HEAP32[$c1$040 + 48 >> 2] | 0;
     $67 = HEAP32[$c1$040 + 52 >> 2] | 0;
     if (HEAP8[$65 + 38 >> 0] | 0) {
      $minAlpha$1 = $minAlpha$038;
      $minContact$1 = $minContact$039;
      break;
     }
     if (HEAP8[$67 + 38 >> 0] | 0) {
      $minAlpha$1 = $minAlpha$038;
      $minContact$1 = $minContact$039;
      break;
     }
     $75 = HEAP32[$65 + 8 >> 2] | 0;
     $77 = HEAP32[$67 + 8 >> 2] | 0;
     $78 = HEAP32[$75 >> 2] | 0;
     $79 = HEAP32[$77 >> 2] | 0;
     if (!(($78 | 0) == 2 | ($79 | 0) == 2)) {
      label = 16;
      break L11;
     }
     $83 = HEAP16[$75 + 4 >> 1] | 0;
     $88 = HEAP16[$77 + 4 >> 1] | 0;
     if (!(($83 & 2) != 0 & ($78 | 0) != 0 | ($88 & 2) != 0 & ($79 | 0) != 0)) {
      $minAlpha$1 = $minAlpha$038;
      $minContact$1 = $minContact$039;
      break;
     }
     if (!(($83 & 8) != 0 | ($78 | 0) != 2 | (($88 & 8) != 0 | ($79 | 0) != 2))) {
      $minAlpha$1 = $minAlpha$038;
      $minContact$1 = $minContact$039;
      break;
     }
     $100 = $75 + 28 | 0;
     $101 = $75 + 60 | 0;
     $102 = +HEAPF32[$101 >> 2];
     $103 = $77 + 28 | 0;
     $104 = $77 + 60 | 0;
     $105 = +HEAPF32[$104 >> 2];
     if ($102 < $105) {
      if (!($102 < 1.0)) {
       label = 21;
       break L11;
      }
      $110 = ($105 - $102) / (1.0 - $102);
      $113 = $75 + 36 | 0;
      $114 = +HEAPF32[$113 >> 2];
      $118 = $75 + 40 | 0;
      $119 = +HEAPF32[$118 >> 2];
      $122 = $110 * (+HEAPF32[$75 + 48 >> 2] - $119);
      HEAPF32[$113 >> 2] = $114 + $110 * (+HEAPF32[$75 + 44 >> 2] - $114);
      HEAPF32[$118 >> 2] = $119 + $122;
      $127 = $75 + 52 | 0;
      $128 = +HEAPF32[$127 >> 2];
      HEAPF32[$127 >> 2] = $128 + $110 * (+HEAPF32[$75 + 56 >> 2] - $128);
      HEAPF32[$101 >> 2] = $105;
      $alpha0$0 = $105;
     } else if ($105 < $102) {
      if (!($105 < 1.0)) {
       label = 25;
       break L11;
      }
      $136 = ($102 - $105) / (1.0 - $105);
      $139 = $77 + 36 | 0;
      $140 = +HEAPF32[$139 >> 2];
      $144 = $77 + 40 | 0;
      $145 = +HEAPF32[$144 >> 2];
      $148 = $136 * (+HEAPF32[$77 + 48 >> 2] - $145);
      HEAPF32[$139 >> 2] = $140 + $136 * (+HEAPF32[$77 + 44 >> 2] - $140);
      HEAPF32[$144 >> 2] = $145 + $148;
      $153 = $77 + 52 | 0;
      $154 = +HEAPF32[$153 >> 2];
      HEAPF32[$153 >> 2] = $154 + $136 * (+HEAPF32[$77 + 56 >> 2] - $154);
      HEAPF32[$104 >> 2] = $102;
      $alpha0$0 = $102;
     } else $alpha0$0 = $102;
     if (!($alpha0$0 < 1.0)) {
      label = 28;
      break L11;
     }
     $160 = HEAP32[$c1$040 + 56 >> 2] | 0;
     $162 = HEAP32[$c1$040 + 60 >> 2] | 0;
     HEAP32[$34 >> 2] = 0;
     HEAP32[$35 >> 2] = 0;
     HEAPF32[$36 >> 2] = 0.0;
     HEAP32[$37 >> 2] = 0;
     HEAP32[$38 >> 2] = 0;
     HEAPF32[$39 >> 2] = 0.0;
     __ZN15b2DistanceProxy3SetEPK7b2Shapei($input, HEAP32[$65 + 12 >> 2] | 0, $160);
     __ZN15b2DistanceProxy3SetEPK7b2Shapei($40, HEAP32[$67 + 12 >> 2] | 0, $162);
     dest = $41 + 0 | 0;
     src = $100 + 0 | 0;
     stop = dest + 36 | 0;
     do {
      HEAP32[dest >> 2] = HEAP32[src >> 2];
      dest = dest + 4 | 0;
      src = src + 4 | 0;
     } while ((dest | 0) < (stop | 0));
     dest = $42 + 0 | 0;
     src = $103 + 0 | 0;
     stop = dest + 36 | 0;
     do {
      HEAP32[dest >> 2] = HEAP32[src >> 2];
      dest = dest + 4 | 0;
      src = src + 4 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAPF32[$43 >> 2] = 1.0;
     __Z14b2TimeOfImpactP11b2TOIOutputPK10b2TOIInput($output, $input);
     if ((HEAP32[$output >> 2] | 0) == 3) {
      $172 = $alpha0$0 + (1.0 - $alpha0$0) * +HEAPF32[$44 >> 2];
      $alpha$0 = $172 < 1.0 ? $172 : 1.0;
     } else $alpha$0 = 1.0;
     HEAPF32[$c1$040 + 132 >> 2] = $alpha$0;
     HEAP32[$53 >> 2] = HEAP32[$53 >> 2] | 32;
     $alpha$1 = $alpha$0;
    } else $alpha$1 = +HEAPF32[$c1$040 + 132 >> 2];
    if ($alpha$1 < $minAlpha$038) {
     $minAlpha$1 = $alpha$1;
     $minContact$1 = $c1$040;
    } else {
     $minAlpha$1 = $minAlpha$038;
     $minContact$1 = $minContact$039;
    }
   } while (0);
   $c1$040 = HEAP32[$c1$040 + 12 >> 2] | 0;
   if (!$c1$040) break; else {
    $minAlpha$038 = $minAlpha$1;
    $minContact$039 = $minContact$1;
   }
  }
  if (($minContact$1 | 0) == 0 | $minAlpha$1 > .9999988079071045) {
   label = 36;
   break;
  }
  $188 = HEAP32[(HEAP32[$minContact$1 + 48 >> 2] | 0) + 8 >> 2] | 0;
  $190 = HEAP32[(HEAP32[$minContact$1 + 52 >> 2] | 0) + 8 >> 2] | 0;
  $191 = $188 + 28 | 0;
  dest = $backup1 + 0 | 0;
  src = $191 + 0 | 0;
  stop = dest + 36 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $192 = $190 + 28 | 0;
  dest = $backup2 + 0 | 0;
  src = $192 + 0 | 0;
  stop = dest + 36 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $193 = $188 + 60 | 0;
  $194 = +HEAPF32[$193 >> 2];
  if (!($194 < 1.0)) {
   label = 38;
   break;
  }
  $198 = ($minAlpha$1 - $194) / (1.0 - $194);
  $199 = $188 + 44 | 0;
  $201 = $188 + 36 | 0;
  $202 = +HEAPF32[$201 >> 2];
  $204 = $188 + 48 | 0;
  $206 = $188 + 40 | 0;
  $207 = +HEAPF32[$206 >> 2];
  $210 = $198 * (+HEAPF32[$204 >> 2] - $207);
  HEAPF32[$201 >> 2] = $202 + $198 * (+HEAPF32[$199 >> 2] - $202);
  HEAPF32[$206 >> 2] = $207 + $210;
  $213 = $188 + 56 | 0;
  $215 = $188 + 52 | 0;
  $216 = +HEAPF32[$215 >> 2];
  $219 = $216 + $198 * (+HEAPF32[$213 >> 2] - $216);
  HEAPF32[$215 >> 2] = $219;
  HEAPF32[$193 >> 2] = $minAlpha$1;
  $222 = $188 + 36 | 0;
  $224 = HEAP32[$222 >> 2] | 0;
  $227 = HEAP32[$222 + 4 >> 2] | 0;
  $228 = $188 + 44 | 0;
  HEAP32[$228 >> 2] = $224;
  HEAP32[$228 + 4 >> 2] = $227;
  HEAPF32[$213 >> 2] = $219;
  $232 = +Math_sin(+$219);
  $233 = $188 + 20 | 0;
  HEAPF32[$233 >> 2] = $232;
  $234 = +Math_cos(+$219);
  $235 = $188 + 24 | 0;
  HEAPF32[$235 >> 2] = $234;
  $236 = $188 + 12 | 0;
  $237 = $188 + 28 | 0;
  $238 = +HEAPF32[$237 >> 2];
  $240 = $188 + 32 | 0;
  $241 = +HEAPF32[$240 >> 2];
  $247 = (HEAP32[tempDoublePtr >> 2] = $224, +HEAPF32[tempDoublePtr >> 2]) - ($234 * $238 - $232 * $241);
  $249 = (HEAP32[tempDoublePtr >> 2] = $227, +HEAPF32[tempDoublePtr >> 2]) - ($232 * $238 + $234 * $241);
  $250 = +$247;
  $251 = +$249;
  $252 = $236;
  HEAPF32[$252 >> 2] = $250;
  HEAPF32[$252 + 4 >> 2] = $251;
  $256 = $190 + 60 | 0;
  $257 = +HEAPF32[$256 >> 2];
  if (!($257 < 1.0)) {
   label = 40;
   break;
  }
  $261 = ($minAlpha$1 - $257) / (1.0 - $257);
  $262 = $190 + 44 | 0;
  $264 = $190 + 36 | 0;
  $265 = +HEAPF32[$264 >> 2];
  $267 = $190 + 48 | 0;
  $269 = $190 + 40 | 0;
  $270 = +HEAPF32[$269 >> 2];
  $273 = $261 * (+HEAPF32[$267 >> 2] - $270);
  HEAPF32[$264 >> 2] = $265 + $261 * (+HEAPF32[$262 >> 2] - $265);
  HEAPF32[$269 >> 2] = $270 + $273;
  $276 = $190 + 56 | 0;
  $278 = $190 + 52 | 0;
  $279 = +HEAPF32[$278 >> 2];
  $282 = $279 + $261 * (+HEAPF32[$276 >> 2] - $279);
  HEAPF32[$278 >> 2] = $282;
  HEAPF32[$256 >> 2] = $minAlpha$1;
  $285 = $190 + 36 | 0;
  $287 = HEAP32[$285 >> 2] | 0;
  $290 = HEAP32[$285 + 4 >> 2] | 0;
  $291 = $190 + 44 | 0;
  HEAP32[$291 >> 2] = $287;
  HEAP32[$291 + 4 >> 2] = $290;
  HEAPF32[$276 >> 2] = $282;
  $295 = +Math_sin(+$282);
  $296 = $190 + 20 | 0;
  HEAPF32[$296 >> 2] = $295;
  $297 = +Math_cos(+$282);
  $298 = $190 + 24 | 0;
  HEAPF32[$298 >> 2] = $297;
  $299 = $190 + 12 | 0;
  $300 = $190 + 28 | 0;
  $301 = +HEAPF32[$300 >> 2];
  $303 = $190 + 32 | 0;
  $304 = +HEAPF32[$303 >> 2];
  $310 = (HEAP32[tempDoublePtr >> 2] = $287, +HEAPF32[tempDoublePtr >> 2]) - ($297 * $301 - $295 * $304);
  $312 = (HEAP32[tempDoublePtr >> 2] = $290, +HEAPF32[tempDoublePtr >> 2]) - ($295 * $301 + $297 * $304);
  $313 = +$310;
  $314 = +$312;
  $315 = $299;
  HEAPF32[$315 >> 2] = $313;
  HEAPF32[$315 + 4 >> 2] = $314;
  __ZN9b2Contact6UpdateEP17b2ContactListener($minContact$1, HEAP32[$2 >> 2] | 0);
  $320 = $minContact$1 + 4 | 0;
  $321 = HEAP32[$320 >> 2] | 0;
  HEAP32[$320 >> 2] = $321 & -33;
  $323 = $minContact$1 + 128 | 0;
  HEAP32[$323 >> 2] = (HEAP32[$323 >> 2] | 0) + 1;
  if (($321 & 6 | 0) != 6) {
   HEAP32[$320 >> 2] = $321 & -37;
   dest = $191 + 0 | 0;
   src = $backup1 + 0 | 0;
   stop = dest + 36 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   dest = $192 + 0 | 0;
   src = $backup2 + 0 | 0;
   stop = dest + 36 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   $329 = +HEAPF32[$213 >> 2];
   $330 = +Math_sin(+$329);
   HEAPF32[$233 >> 2] = $330;
   $331 = +Math_cos(+$329);
   HEAPF32[$235 >> 2] = $331;
   $332 = +HEAPF32[$237 >> 2];
   $334 = +HEAPF32[$240 >> 2];
   $344 = +(+HEAPF32[$199 >> 2] - ($331 * $332 - $330 * $334));
   $345 = +(+HEAPF32[$204 >> 2] - ($330 * $332 + $331 * $334));
   $346 = $236;
   HEAPF32[$346 >> 2] = $344;
   HEAPF32[$346 + 4 >> 2] = $345;
   $350 = +HEAPF32[$276 >> 2];
   $351 = +Math_sin(+$350);
   HEAPF32[$296 >> 2] = $351;
   $352 = +Math_cos(+$350);
   HEAPF32[$298 >> 2] = $352;
   $353 = +HEAPF32[$300 >> 2];
   $355 = +HEAPF32[$303 >> 2];
   $365 = +(+HEAPF32[$262 >> 2] - ($352 * $353 - $351 * $355));
   $366 = +(+HEAPF32[$267 >> 2] - ($351 * $353 + $352 * $355));
   $367 = $299;
   HEAPF32[$367 >> 2] = $365;
   HEAPF32[$367 + 4 >> 2] = $366;
   continue;
  }
  $371 = $188 + 4 | 0;
  $373 = HEAPU16[$371 >> 1] | 0;
  if (!($373 & 2)) {
   HEAP16[$371 >> 1] = $373 | 2;
   HEAPF32[$188 + 144 >> 2] = 0.0;
  }
  $379 = $190 + 4 | 0;
  $381 = HEAPU16[$379 >> 1] | 0;
  if (!($381 & 2)) {
   HEAP16[$379 >> 1] = $381 | 2;
   HEAPF32[$190 + 144 >> 2] = 0.0;
  }
  HEAP32[$19 >> 2] = 0;
  HEAP32[$20 >> 2] = 0;
  HEAP32[$21 >> 2] = 0;
  if ((HEAP32[$22 >> 2] | 0) <= 0) {
   label = 48;
   break;
  }
  $389 = $188 + 8 | 0;
  HEAP32[$389 >> 2] = 0;
  $390 = HEAP32[$19 >> 2] | 0;
  HEAP32[(HEAP32[$23 >> 2] | 0) + ($390 << 2) >> 2] = $188;
  $393 = $390 + 1 | 0;
  HEAP32[$19 >> 2] = $393;
  if (($393 | 0) >= (HEAP32[$22 >> 2] | 0)) {
   label = 50;
   break;
  }
  $396 = $190 + 8 | 0;
  HEAP32[$396 >> 2] = $393;
  $397 = HEAP32[$19 >> 2] | 0;
  HEAP32[(HEAP32[$23 >> 2] | 0) + ($397 << 2) >> 2] = $190;
  HEAP32[$19 >> 2] = $397 + 1;
  $401 = HEAP32[$20 >> 2] | 0;
  if (($401 | 0) >= (HEAP32[$24 >> 2] | 0)) {
   label = 52;
   break;
  }
  HEAP32[$20 >> 2] = $401 + 1;
  HEAP32[(HEAP32[$25 >> 2] | 0) + ($401 << 2) >> 2] = $minContact$1;
  HEAP16[$371 >> 1] = HEAPU16[$371 >> 1] | 1;
  HEAP16[$379 >> 1] = HEAPU16[$379 >> 1] | 1;
  HEAP32[$320 >> 2] = HEAP32[$320 >> 2] | 1;
  HEAP32[$bodies >> 2] = $188;
  HEAP32[$26 >> 2] = $190;
  $418 = $188;
  $i$052 = 1;
  while (1) {
   L58 : do if ((HEAP32[$418 >> 2] | 0) == 2) {
    $ce$048 = HEAP32[$418 + 112 >> 2] | 0;
    if ($ce$048) {
     $422 = $418 + 4 | 0;
     $ce$049 = $ce$048;
     do {
      if ((HEAP32[$19 >> 2] | 0) == (HEAP32[$22 >> 2] | 0)) break L58;
      if ((HEAP32[$20 >> 2] | 0) == (HEAP32[$24 >> 2] | 0)) break L58;
      $430 = HEAP32[$ce$049 + 4 >> 2] | 0;
      $431 = $430 + 4 | 0;
      L65 : do if (!(HEAP32[$431 >> 2] & 1)) {
       $435 = HEAP32[$ce$049 >> 2] | 0;
       do if ((HEAP32[$435 >> 2] | 0) == 2) {
        if (HEAP16[$422 >> 1] & 8) break;
        if (!(HEAP16[$435 + 4 >> 1] & 8)) break L65;
       } while (0);
       if (HEAP8[(HEAP32[$430 + 48 >> 2] | 0) + 38 >> 0] | 0) break;
       if (HEAP8[(HEAP32[$430 + 52 >> 2] | 0) + 38 >> 0] | 0) break;
       $455 = $435 + 28 | 0;
       dest = $backup + 0 | 0;
       src = $455 + 0 | 0;
       stop = dest + 36 | 0;
       do {
        HEAP32[dest >> 2] = HEAP32[src >> 2];
        dest = dest + 4 | 0;
        src = src + 4 | 0;
       } while ((dest | 0) < (stop | 0));
       $456 = $435 + 4 | 0;
       if (!(HEAP16[$456 >> 1] & 1)) {
        $460 = $435 + 60 | 0;
        $461 = +HEAPF32[$460 >> 2];
        if (!($461 < 1.0)) {
         label = 67;
         break L11;
        }
        $465 = ($minAlpha$1 - $461) / (1.0 - $461);
        $468 = $435 + 36 | 0;
        $469 = +HEAPF32[$468 >> 2];
        $473 = $435 + 40 | 0;
        $474 = +HEAPF32[$473 >> 2];
        $477 = $465 * (+HEAPF32[$435 + 48 >> 2] - $474);
        HEAPF32[$468 >> 2] = $469 + $465 * (+HEAPF32[$435 + 44 >> 2] - $469);
        HEAPF32[$473 >> 2] = $474 + $477;
        $480 = $435 + 56 | 0;
        $482 = $435 + 52 | 0;
        $483 = +HEAPF32[$482 >> 2];
        $486 = $483 + $465 * (+HEAPF32[$480 >> 2] - $483);
        HEAPF32[$482 >> 2] = $486;
        HEAPF32[$460 >> 2] = $minAlpha$1;
        $489 = $435 + 36 | 0;
        $491 = HEAP32[$489 >> 2] | 0;
        $494 = HEAP32[$489 + 4 >> 2] | 0;
        $495 = $435 + 44 | 0;
        HEAP32[$495 >> 2] = $491;
        HEAP32[$495 + 4 >> 2] = $494;
        HEAPF32[$480 >> 2] = $486;
        $499 = +Math_sin(+$486);
        HEAPF32[$435 + 20 >> 2] = $499;
        $501 = +Math_cos(+$486);
        HEAPF32[$435 + 24 >> 2] = $501;
        $505 = +HEAPF32[$435 + 28 >> 2];
        $508 = +HEAPF32[$435 + 32 >> 2];
        $514 = (HEAP32[tempDoublePtr >> 2] = $491, +HEAPF32[tempDoublePtr >> 2]) - ($501 * $505 - $499 * $508);
        $516 = (HEAP32[tempDoublePtr >> 2] = $494, +HEAPF32[tempDoublePtr >> 2]) - ($499 * $505 + $501 * $508);
        $517 = +$514;
        $518 = +$516;
        $519 = $435 + 12 | 0;
        HEAPF32[$519 >> 2] = $517;
        HEAPF32[$519 + 4 >> 2] = $518;
       }
       __ZN9b2Contact6UpdateEP17b2ContactListener($430, HEAP32[$2 >> 2] | 0);
       $524 = HEAP32[$431 >> 2] | 0;
       if (!($524 & 4)) {
        dest = $455 + 0 | 0;
        src = $backup + 0 | 0;
        stop = dest + 36 | 0;
        do {
         HEAP32[dest >> 2] = HEAP32[src >> 2];
         dest = dest + 4 | 0;
         src = src + 4 | 0;
        } while ((dest | 0) < (stop | 0));
        $528 = +HEAPF32[$435 + 56 >> 2];
        $529 = +Math_sin(+$528);
        HEAPF32[$435 + 20 >> 2] = $529;
        $531 = +Math_cos(+$528);
        HEAPF32[$435 + 24 >> 2] = $531;
        $535 = +HEAPF32[$435 + 28 >> 2];
        $538 = +HEAPF32[$435 + 32 >> 2];
        $550 = +(+HEAPF32[$435 + 44 >> 2] - ($531 * $535 - $529 * $538));
        $551 = +(+HEAPF32[$435 + 48 >> 2] - ($529 * $535 + $531 * $538));
        $552 = $435 + 12 | 0;
        HEAPF32[$552 >> 2] = $550;
        HEAPF32[$552 + 4 >> 2] = $551;
        break;
       }
       if (!($524 & 2)) {
        dest = $455 + 0 | 0;
        src = $backup + 0 | 0;
        stop = dest + 36 | 0;
        do {
         HEAP32[dest >> 2] = HEAP32[src >> 2];
         dest = dest + 4 | 0;
         src = src + 4 | 0;
        } while ((dest | 0) < (stop | 0));
        $559 = +HEAPF32[$435 + 56 >> 2];
        $560 = +Math_sin(+$559);
        HEAPF32[$435 + 20 >> 2] = $560;
        $562 = +Math_cos(+$559);
        HEAPF32[$435 + 24 >> 2] = $562;
        $566 = +HEAPF32[$435 + 28 >> 2];
        $569 = +HEAPF32[$435 + 32 >> 2];
        $581 = +(+HEAPF32[$435 + 44 >> 2] - ($562 * $566 - $560 * $569));
        $582 = +(+HEAPF32[$435 + 48 >> 2] - ($560 * $566 + $562 * $569));
        $583 = $435 + 12 | 0;
        HEAPF32[$583 >> 2] = $581;
        HEAPF32[$583 + 4 >> 2] = $582;
        break;
       }
       HEAP32[$431 >> 2] = $524 | 1;
       $588 = HEAP32[$20 >> 2] | 0;
       if (($588 | 0) >= (HEAP32[$24 >> 2] | 0)) {
        label = 74;
        break L11;
       }
       HEAP32[$20 >> 2] = $588 + 1;
       HEAP32[(HEAP32[$25 >> 2] | 0) + ($588 << 2) >> 2] = $430;
       $595 = HEAPU16[$456 >> 1] | 0;
       if ($595 & 1) break;
       HEAP16[$456 >> 1] = $595 | 1;
       if ((HEAP32[$435 >> 2] | 0) != 0 & ($595 & 2 | 0) == 0) {
        HEAP16[$456 >> 1] = $595 | 3;
        HEAPF32[$435 + 144 >> 2] = 0.0;
       }
       $607 = HEAP32[$19 >> 2] | 0;
       if (($607 | 0) >= (HEAP32[$22 >> 2] | 0)) {
        label = 79;
        break L11;
       }
       HEAP32[$435 + 8 >> 2] = $607;
       $611 = HEAP32[$19 >> 2] | 0;
       HEAP32[(HEAP32[$23 >> 2] | 0) + ($611 << 2) >> 2] = $435;
       HEAP32[$19 >> 2] = $611 + 1;
      } while (0);
      $ce$049 = HEAP32[$ce$049 + 12 >> 2] | 0;
     } while (($ce$049 | 0) != 0);
    }
   } while (0);
   if (($i$052 | 0) >= 2) break;
   $418 = HEAP32[$bodies + ($i$052 << 2) >> 2] | 0;
   $i$052 = $i$052 + 1 | 0;
  }
  $620 = (1.0 - $minAlpha$1) * +HEAPF32[$step >> 2];
  HEAPF32[$subStep >> 2] = $620;
  HEAPF32[$27 >> 2] = 1.0 / $620;
  HEAPF32[$28 >> 2] = 1.0;
  HEAP32[$29 >> 2] = 20;
  HEAP32[$31 >> 2] = HEAP32[$30 >> 2];
  HEAP8[$32 >> 0] = 0;
  __ZN8b2Island8SolveTOIERK10b2TimeStepii($island, $subStep, HEAP32[$389 >> 2] | 0, HEAP32[$396 >> 2] | 0);
  $625 = HEAP32[$19 >> 2] | 0;
  if (($625 | 0) > 0) {
   $651 = $625;
   $i6$060 = 0;
   while (1) {
    $629 = HEAP32[(HEAP32[$23 >> 2] | 0) + ($i6$060 << 2) >> 2] | 0;
    $630 = $629 + 4 | 0;
    HEAP16[$630 >> 1] = HEAPU16[$630 >> 1] & 65534;
    if ((HEAP32[$629 >> 2] | 0) == 2) {
     __ZN6b2Body19SynchronizeFixturesEv($629);
     $ce8$054 = HEAP32[$629 + 112 >> 2] | 0;
     if ($ce8$054) {
      $ce8$055 = $ce8$054;
      do {
       $641 = (HEAP32[$ce8$055 + 4 >> 2] | 0) + 4 | 0;
       HEAP32[$641 >> 2] = HEAP32[$641 >> 2] & -34;
       $ce8$055 = HEAP32[$ce8$055 + 12 >> 2] | 0;
      } while (($ce8$055 | 0) != 0);
     }
     $648 = HEAP32[$19 >> 2] | 0;
    } else $648 = $651;
    $i6$060 = $i6$060 + 1 | 0;
    if (($i6$060 | 0) >= ($648 | 0)) break; else $651 = $648;
   }
  }
  __ZN16b2ContactManager15FindNewContactsEv($1);
  if (HEAP8[$33 >> 0] | 0) {
   label = 91;
   break;
  }
 }
 switch (label | 0) {
 case 16:
  {
   ___assert_fail(89488, 89272, 641, 92568);
   break;
  }
 case 21:
  {
   ___assert_fail(89544, 89688, 704, 89744);
   break;
  }
 case 25:
  {
   ___assert_fail(89544, 89688, 704, 89744);
   break;
  }
 case 28:
  {
   ___assert_fail(89544, 89272, 676, 92568);
   break;
  }
 case 36:
  {
   HEAP8[$4 >> 0] = 1;
   __ZN8b2IslandD2Ev($island);
   STACKTOP = sp;
   return;
  }
 case 38:
  {
   ___assert_fail(89544, 89688, 704, 89744);
   break;
  }
 case 40:
  {
   ___assert_fail(89544, 89688, 704, 89744);
   break;
  }
 case 48:
  {
   ___assert_fail(89896, 89784, 54, 89848);
   break;
  }
 case 50:
  {
   ___assert_fail(89896, 89784, 54, 89848);
   break;
  }
 case 52:
  {
   ___assert_fail(89856, 89784, 62, 89848);
   break;
  }
 case 67:
  {
   ___assert_fail(89544, 89688, 704, 89744);
   break;
  }
 case 74:
  {
   ___assert_fail(89856, 89784, 62, 89848);
   break;
  }
 case 79:
  {
   ___assert_fail(89896, 89784, 54, 89848);
   break;
  }
 case 91:
  {
   HEAP8[$4 >> 0] = 0;
   __ZN8b2IslandD2Ev($island);
   STACKTOP = sp;
   return;
  }
 }
}
function _statement($ls) {
 $ls = $ls | 0;
 var $$$i$i = 0, $$$i$i$i = 0, $$idx$val$idx$val$pre$i$i36 = 0, $$idx1$val$idx$val$idx$val$pre$i$i40 = 0, $$idx2$i$i32 = 0, $$pre = 0, $0 = 0, $1 = 0, $102 = 0, $112 = 0, $12 = 0, $120 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $130 = 0, $144 = 0, $146 = 0, $149 = 0, $15 = 0, $153 = 0, $157 = 0, $159 = 0, $16 = 0, $161 = 0, $163 = 0, $167 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $179 = 0, $18 = 0, $180 = 0, $182 = 0, $185 = 0, $188 = 0, $196 = 0, $2 = 0, $20 = 0, $200 = 0, $203 = 0, $21 = 0, $210 = 0, $217 = 0, $225 = 0, $226 = 0, $231 = 0, $235 = 0, $238 = 0, $240 = 0, $244 = 0, $245 = 0, $248 = 0, $270 = 0, $271 = 0, $272 = 0, $278 = 0, $281 = 0, $282 = 0, $286 = 0, $29 = 0, $290 = 0, $291 = 0, $294 = 0, $297 = 0, $306 = 0, $311 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $330 = 0, $331 = 0, $332 = 0, $334 = 0, $335 = 0, $340 = 0, $343 = 0, $346 = 0, $347 = 0, $352 = 0, $353 = 0, $355 = 0, $360 = 0, $362 = 0, $363 = 0, $37 = 0, $378 = 0, $379 = 0, $384 = 0, $385 = 0, $386 = 0, $388 = 0, $394 = 0, $398 = 0, $399 = 0, $4 = 0, $403 = 0, $41 = 0, $415 = 0, $430 = 0, $431 = 0, $439 = 0, $443 = 0, $448 = 0, $451 = 0, $46 = 0, $54 = 0, $6 = 0, $62 = 0, $66 = 0, $74 = 0, $82 = 0, $86 = 0, $9 = 0, $94 = 0, $e$i = 0, $e$i51 = 0, $e$i66 = 0, $first$0$i = 0, $i$0$ph1$i$i = 0, $i$02$i$i = 0, $ismethod$0$i$i = 0, $key$i$i$i = 0, $ls$idx = 0, $ls$idx$val = 0, $ls$idx$val$i = 0, $ls$idx$val$i$i = 0, $ls$idx$val$i$i$i = 0, $ls$idx$val$i$i$i4 = 0, $ls$idx$val$i$i12 = 0, $ls$idx$val$i$i15 = 0, $ls$idx$val$i29 = 0, $ls$idx1 = 0, $ls$idx1$val$i = 0, $ls$idx1$val$i110 = 0, $n$0$i$i$lcssa = 0, $n$0$i$i56$lcssa = 0, $n$0$i$i5693 = 0, $n$0$i$i82 = 0, $n$0$i$lcssa = 0, $n$0$i74 = 0, $nret$0$i = 0, $nvars$0$i$i$lcssa = 0, $nvars$0$i$i76 = 0, $nvars$0$i87 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer6 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $vararg_buffer6 = sp + 24 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $e$i66 = sp + 80 | 0;
 $e$i51 = sp + 64 | 0;
 $e$i = sp + 48 | 0;
 $key$i$i$i = sp + 32 | 0;
 $0 = $ls + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $ls$idx = $ls + 28 | 0;
 $ls$idx$val = HEAP32[$ls$idx >> 2] | 0;
 $ls$idx1 = $ls + 32 | 0;
 $2 = (HEAP32[$ls$idx1 >> 2] | 0) + 106 | 0;
 $4 = (HEAP16[$2 >> 1] | 0) + 1 << 16 >> 16;
 HEAP16[$2 >> 1] = $4;
 if (($4 & 65535) > 200) {
  $6 = $ls$idx$val + 8 | 0;
  $9 = HEAP32[(HEAP32[$6 >> 2] | 0) + 32 >> 2] | 0;
  $12 = HEAP32[(HEAP32[$ls$idx$val >> 2] | 0) + 36 >> 2] | 0;
  if (!$12) {
   $15 = 60600;
   HEAP32[$vararg_buffer1 >> 2] = 60416;
   $vararg_ptr4 = $vararg_buffer1 + 4 | 0;
   HEAP32[$vararg_ptr4 >> 2] = 200;
   $vararg_ptr5 = $vararg_buffer1 + 8 | 0;
   HEAP32[$vararg_ptr5 >> 2] = $15;
   $16 = _luaO_pushfstring($9, 60640, $vararg_buffer1) | 0;
   $17 = HEAP32[$6 >> 2] | 0;
   _luaX_syntaxerror($17, $16);
  }
  HEAP32[$vararg_buffer >> 2] = $12;
  $15 = _luaO_pushfstring($9, 60616, $vararg_buffer) | 0;
  HEAP32[$vararg_buffer1 >> 2] = 60416;
  $vararg_ptr4 = $vararg_buffer1 + 4 | 0;
  HEAP32[$vararg_ptr4 >> 2] = 200;
  $vararg_ptr5 = $vararg_buffer1 + 8 | 0;
  HEAP32[$vararg_ptr5 >> 2] = $15;
  $16 = _luaO_pushfstring($9, 60640, $vararg_buffer1) | 0;
  $17 = HEAP32[$6 >> 2] | 0;
  _luaX_syntaxerror($17, $16);
 }
 $18 = $ls + 12 | 0;
 L8 : do switch (HEAP32[$18 >> 2] | 0) {
 case 273:
  {
   $180 = _luaK_getlabel($ls$idx$val) | 0;
   HEAP8[$e$i51 + 14 >> 0] = 1;
   $182 = $ls$idx$val + 42 | 0;
   HEAP8[$e$i51 + 12 >> 0] = HEAP8[$182 >> 0] | 0;
   $185 = $ls$idx$val + 8 | 0;
   $188 = HEAP32[(HEAP32[$185 >> 2] | 0) + 48 >> 2] | 0;
   HEAP32[$e$i51 + 4 >> 2] = HEAP32[$188 + 28 >> 2];
   HEAP32[$e$i51 + 8 >> 2] = HEAP32[$188 + 16 >> 2];
   HEAP8[$e$i51 + 13 >> 0] = 0;
   $196 = $ls$idx$val + 12 | 0;
   HEAP32[$e$i51 >> 2] = HEAP32[$196 >> 2];
   HEAP32[$196 >> 2] = $e$i51;
   HEAP8[$e$i + 14 >> 0] = 0;
   $200 = $e$i + 12 | 0;
   HEAP8[$200 >> 0] = HEAP8[$182 >> 0] | 0;
   $203 = HEAP32[(HEAP32[$185 >> 2] | 0) + 48 >> 2] | 0;
   HEAP32[$e$i + 4 >> 2] = HEAP32[$203 + 28 >> 2];
   HEAP32[$e$i + 8 >> 2] = HEAP32[$203 + 16 >> 2];
   $210 = $e$i + 13 | 0;
   HEAP8[$210 >> 0] = 0;
   HEAP32[$e$i >> 2] = HEAP32[$196 >> 2];
   HEAP32[$196 >> 2] = $e$i;
   _luaX_next($ls);
   L10 : do {
    $ls$idx$val$i$i15 = HEAP32[$18 >> 2] | 0;
    switch ($ls$idx$val$i$i15 | 0) {
    case 277:
    case 289:
    case 262:
    case 261:
    case 260:
     {
      break L10;
      break;
     }
    default:
     {}
    }
    _statement($ls);
   } while (($ls$idx$val$i$i15 | 0) != 274);
   _check_match($ls, 277, 273, $1);
   _subexpr($ls, $e$i66, 0) | 0;
   if ((HEAP32[$e$i66 >> 2] | 0) == 1) HEAP32[$e$i66 >> 2] = 3;
   _luaK_goiftrue(HEAP32[$ls$idx >> 2] | 0, $e$i66);
   $217 = HEAP32[$e$i66 + 12 >> 2] | 0;
   if (HEAP8[$210 >> 0] | 0) _luaK_patchclose($ls$idx$val, $217, HEAPU8[$200 >> 0] | 0);
   _leaveblock($ls$idx$val);
   _luaK_patchlist($ls$idx$val, $217, $180);
   _leaveblock($ls$idx$val);
   break;
  }
 case 267:
  {
   HEAP32[$e$i51 >> 2] = -1;
   _test_then_block($ls, $e$i51);
   while (1) {
    $20 = HEAP32[$18 >> 2] | 0;
    if (($20 | 0) == 260) {
     label = 10;
     break;
    } else if (($20 | 0) != 261) break;
    _test_then_block($ls, $e$i51);
   }
   if ((label | 0) == 10) {
    _luaX_next($ls);
    $21 = HEAP32[$ls$idx >> 2] | 0;
    HEAP8[$e$i66 + 14 >> 0] = 0;
    HEAP8[$e$i66 + 12 >> 0] = HEAP8[$21 + 42 >> 0] | 0;
    $29 = HEAP32[(HEAP32[$21 + 8 >> 2] | 0) + 48 >> 2] | 0;
    HEAP32[$e$i66 + 4 >> 2] = HEAP32[$29 + 28 >> 2];
    HEAP32[$e$i66 + 8 >> 2] = HEAP32[$29 + 16 >> 2];
    HEAP8[$e$i66 + 13 >> 0] = 0;
    $37 = $21 + 12 | 0;
    HEAP32[$e$i66 >> 2] = HEAP32[$37 >> 2];
    HEAP32[$37 >> 2] = $e$i66;
    L26 : do {
     $ls$idx$val$i$i$i = HEAP32[$18 >> 2] | 0;
     switch ($ls$idx$val$i$i$i | 0) {
     case 277:
     case 289:
     case 262:
     case 261:
     case 260:
      {
       break L26;
       break;
      }
     default:
      {}
     }
     _statement($ls);
    } while (($ls$idx$val$i$i$i | 0) != 274);
    _leaveblock($21);
   }
   _check_match($ls, 262, 267, $1);
   _luaK_patchtohere($ls$idx$val, HEAP32[$e$i51 >> 2] | 0);
   break;
  }
 case 59:
  {
   _luaX_next($ls);
   break;
  }
 case 259:
  {
   _luaX_next($ls);
   $86 = HEAP32[$ls$idx >> 2] | 0;
   HEAP8[$e$i66 + 14 >> 0] = 0;
   HEAP8[$e$i66 + 12 >> 0] = HEAP8[$86 + 42 >> 0] | 0;
   $94 = HEAP32[(HEAP32[$86 + 8 >> 2] | 0) + 48 >> 2] | 0;
   HEAP32[$e$i66 + 4 >> 2] = HEAP32[$94 + 28 >> 2];
   HEAP32[$e$i66 + 8 >> 2] = HEAP32[$94 + 16 >> 2];
   HEAP8[$e$i66 + 13 >> 0] = 0;
   $102 = $86 + 12 | 0;
   HEAP32[$e$i66 >> 2] = HEAP32[$102 >> 2];
   HEAP32[$102 >> 2] = $e$i66;
   L33 : do {
    $ls$idx$val$i$i = HEAP32[$18 >> 2] | 0;
    switch ($ls$idx$val$i$i | 0) {
    case 277:
    case 289:
    case 262:
    case 261:
    case 260:
     {
      break L33;
      break;
     }
    default:
     {}
    }
    _statement($ls);
   } while (($ls$idx$val$i$i | 0) != 274);
   _leaveblock($86);
   _check_match($ls, 262, 259, $1);
   break;
  }
 case 265:
  {
   _luaX_next($ls);
   if ((HEAP32[$18 >> 2] | 0) != 292) _error_expected($ls, 292);
   $225 = HEAP32[$ls + 16 >> 2] | 0;
   _luaX_next($ls);
   $226 = HEAP32[$ls$idx >> 2] | 0;
   if (!(_singlevaraux($226, $225, $e$i66, 1) | 0)) {
    _singlevaraux($226, HEAP32[$ls + 56 >> 2] | 0, $e$i66, 1) | 0;
    $231 = _luaK_stringK(HEAP32[$ls$idx >> 2] | 0, $225) | 0;
    HEAP32[$key$i$i$i + 8 >> 2] = -1;
    HEAP32[$key$i$i$i + 12 >> 2] = -1;
    HEAP32[$key$i$i$i >> 2] = 4;
    HEAP32[$key$i$i$i + 4 >> 2] = $231;
    _luaK_indexed($226, $e$i66, $key$i$i$i);
   }
   while (1) {
    $235 = HEAP32[$18 >> 2] | 0;
    if (($235 | 0) == 58) {
     label = 70;
     break;
    } else if (($235 | 0) != 46) {
     $ismethod$0$i$i = 0;
     break;
    }
    _fieldsel($ls, $e$i66);
   }
   if ((label | 0) == 70) {
    _fieldsel($ls, $e$i66);
    $ismethod$0$i$i = 1;
   }
   _body($ls, $e$i51, $ismethod$0$i$i, $1);
   _luaK_storevar(HEAP32[$ls$idx >> 2] | 0, $e$i66, $e$i51);
   _luaK_fixline(HEAP32[$ls$idx >> 2] | 0, $1);
   break;
  }
 case 264:
  {
   HEAP8[$e$i51 + 14 >> 0] = 1;
   HEAP8[$e$i51 + 12 >> 0] = HEAP8[$ls$idx$val + 42 >> 0] | 0;
   $112 = HEAP32[(HEAP32[$ls$idx$val + 8 >> 2] | 0) + 48 >> 2] | 0;
   HEAP32[$e$i51 + 4 >> 2] = HEAP32[$112 + 28 >> 2];
   HEAP32[$e$i51 + 8 >> 2] = HEAP32[$112 + 16 >> 2];
   HEAP8[$e$i51 + 13 >> 0] = 0;
   $120 = $ls$idx$val + 12 | 0;
   HEAP32[$e$i51 >> 2] = HEAP32[$120 >> 2];
   HEAP32[$120 >> 2] = $e$i51;
   _luaX_next($ls);
   if ((HEAP32[$18 >> 2] | 0) != 292) _error_expected($ls, 292);
   $124 = $ls + 16 | 0;
   $125 = HEAP32[$124 >> 2] | 0;
   _luaX_next($ls);
   $126 = HEAP32[$18 >> 2] | 0;
   if (($126 | 0) == 61) {
    $127 = HEAP32[$ls$idx >> 2] | 0;
    $128 = $127 + 44 | 0;
    $130 = HEAPU8[$128 >> 0] | 0;
    _new_localvar($ls, _luaX_newstring($ls, 60840, 11) | 0);
    _new_localvar($ls, _luaX_newstring($ls, 60856, 11) | 0);
    _new_localvar($ls, _luaX_newstring($ls, 60872, 10) | 0);
    _new_localvar($ls, $125);
    if ((HEAP32[$18 >> 2] | 0) != 61) _error_expected($ls, 61);
    _luaX_next($ls);
    _subexpr($ls, $e$i66, 0) | 0;
    _luaK_exp2nextreg(HEAP32[$ls$idx >> 2] | 0, $e$i66);
    if ((HEAP32[$18 >> 2] | 0) != 44) _error_expected($ls, 44);
    _luaX_next($ls);
    _subexpr($ls, $e$i66, 0) | 0;
    _luaK_exp2nextreg(HEAP32[$ls$idx >> 2] | 0, $e$i66);
    if ((HEAP32[$18 >> 2] | 0) == 44) {
     _luaX_next($ls);
     _subexpr($ls, $e$i66, 0) | 0;
     _luaK_exp2nextreg(HEAP32[$ls$idx >> 2] | 0, $e$i66);
    } else {
     $144 = HEAPU8[$128 >> 0] | 0;
     _luaK_codek($127, $144, _luaK_intK($127, 1) | 0) | 0;
     _luaK_reserveregs($127, 1);
    }
    _forbody($ls, $130, $1, 1, 1);
   } else if (($126 | 0) == 268 | ($126 | 0) == 44) {
    $146 = HEAP32[$ls$idx >> 2] | 0;
    $149 = HEAPU8[$146 + 44 >> 0] | 0;
    _new_localvar($ls, _luaX_newstring($ls, 60792, 15) | 0);
    _new_localvar($ls, _luaX_newstring($ls, 60808, 11) | 0);
    _new_localvar($ls, _luaX_newstring($ls, 60824, 13) | 0);
    _new_localvar($ls, $125);
    $153 = HEAP32[$18 >> 2] | 0;
    do if (($153 | 0) == 44) {
     $nvars$0$i$i76 = 4;
     while (1) {
      _luaX_next($ls);
      if ((HEAP32[$18 >> 2] | 0) != 292) {
       label = 40;
       break;
      }
      $157 = HEAP32[$124 >> 2] | 0;
      _luaX_next($ls);
      _new_localvar($ls, $157);
      $159 = HEAP32[$18 >> 2] | 0;
      if (($159 | 0) == 44) $nvars$0$i$i76 = $nvars$0$i$i76 + 1 | 0; else {
       label = 42;
       break;
      }
     }
     if ((label | 0) == 40) _error_expected($ls, 292); else if ((label | 0) == 42) {
      $161 = $159;
      $nvars$0$i$i$lcssa = $nvars$0$i$i76 + -2 | 0;
      break;
     }
    } else {
     $161 = $153;
     $nvars$0$i$i$lcssa = 1;
    } while (0);
    if (($161 | 0) != 268) _error_expected($ls, 268);
    _luaX_next($ls);
    $163 = HEAP32[$0 >> 2] | 0;
    _subexpr($ls, $e$i66, 0) | 0;
    if ((HEAP32[$18 >> 2] | 0) == 44) {
     $n$0$i74 = 1;
     while (1) {
      _luaX_next($ls);
      _luaK_exp2nextreg(HEAP32[$ls$idx >> 2] | 0, $e$i66);
      _subexpr($ls, $e$i66, 0) | 0;
      $167 = $n$0$i74 + 1 | 0;
      if ((HEAP32[$18 >> 2] | 0) == 44) $n$0$i74 = $167; else {
       $n$0$i$lcssa = $167;
       break;
      }
     }
    } else $n$0$i$lcssa = 1;
    $ls$idx$val$i$i12 = HEAP32[$ls$idx >> 2] | 0;
    $170 = 3 - $n$0$i$lcssa | 0;
    $171 = HEAP32[$e$i66 >> 2] | 0;
    if (($171 | 0) == 14 | ($171 | 0) == 13) {
     $172 = $170 + 1 | 0;
     $$$i$i$i = ($172 | 0) < 0 ? 0 : $172;
     _luaK_setreturns($ls$idx$val$i$i12, $e$i66, $$$i$i$i);
     if (($$$i$i$i | 0) > 1) _luaK_reserveregs($ls$idx$val$i$i12, $$$i$i$i + -1 | 0);
    } else if (!$171) label = 51; else {
     _luaK_exp2nextreg($ls$idx$val$i$i12, $e$i66);
     label = 51;
    }
    if ((label | 0) == 51) if (($170 | 0) > 0) {
     $179 = HEAPU8[$ls$idx$val$i$i12 + 44 >> 0] | 0;
     _luaK_reserveregs($ls$idx$val$i$i12, $170);
     _luaK_nil($ls$idx$val$i$i12, $179, $170);
    }
    _luaK_checkstack($146, 3);
    _forbody($ls, $149, $163, $nvars$0$i$i$lcssa, 0);
   } else _luaX_syntaxerror($ls, 60768);
   _check_match($ls, 262, 264, $1);
   _leaveblock($ls$idx$val);
   break;
  }
 case 288:
  {
   _luaX_next($ls);
   if ((HEAP32[$18 >> 2] | 0) != 292) _error_expected($ls, 292);
   $322 = HEAP32[$ls + 16 >> 2] | 0;
   _luaX_next($ls);
   $323 = HEAP32[$ls$idx >> 2] | 0;
   $324 = $ls + 48 | 0;
   $325 = HEAP32[$324 >> 2] | 0;
   $326 = $325 + 24 | 0;
   $327 = $323 + 12 | 0;
   $330 = HEAP32[(HEAP32[$327 >> 2] | 0) + 4 >> 2] | 0;
   $331 = $325 + 28 | 0;
   $332 = HEAP32[$331 >> 2] | 0;
   L95 : do if (($330 | 0) < ($332 | 0)) {
    $334 = HEAP32[$326 >> 2] | 0;
    $i$02$i$i = $330;
    while (1) {
     $335 = $i$02$i$i + 1 | 0;
     if ((HEAP32[$334 + ($i$02$i$i << 4) >> 2] | 0) == ($322 | 0)) break;
     if (($335 | 0) < ($332 | 0)) $i$02$i$i = $335; else break L95;
    }
    $340 = $323 + 8 | 0;
    $343 = HEAP32[(HEAP32[$340 >> 2] | 0) + 32 >> 2] | 0;
    $346 = HEAP32[$334 + ($i$02$i$i << 4) + 8 >> 2] | 0;
    HEAP32[$vararg_buffer6 >> 2] = $322 + 24;
    HEAP32[$vararg_buffer6 + 4 >> 2] = $346;
    $347 = _luaO_pushfstring($343, 60728, $vararg_buffer6) | 0;
    _semerror(HEAP32[$340 >> 2] | 0, $347);
   } while (0);
   if ((HEAP32[$18 >> 2] | 0) != 288) _error_expected($ls, 288);
   _luaX_next($ls);
   $352 = HEAP32[$323 + 16 >> 2] | 0;
   $353 = HEAP32[$331 >> 2] | 0;
   $355 = $325 + 32 | 0;
   if (($353 | 0) < (HEAP32[$355 >> 2] | 0)) $362 = HEAP32[$326 >> 2] | 0; else {
    $360 = _luaM_growaux_(HEAP32[$ls$idx1 >> 2] | 0, HEAP32[$326 >> 2] | 0, $355, 16, 32767, 60368) | 0;
    HEAP32[$326 >> 2] = $360;
    $362 = $360;
   }
   HEAP32[$362 + ($353 << 4) >> 2] = $322;
   $363 = HEAP32[$326 >> 2] | 0;
   HEAP32[$363 + ($353 << 4) + 8 >> 2] = $1;
   HEAP8[$363 + ($353 << 4) + 12 >> 0] = HEAP8[(HEAP32[$ls$idx >> 2] | 0) + 42 >> 0] | 0;
   HEAP32[(HEAP32[$326 >> 2] | 0) + ($353 << 4) + 4 >> 2] = $352;
   HEAP32[$331 >> 2] = $353 + 1;
   L109 : while (1) {
    switch (HEAP32[$18 >> 2] | 0) {
    case 289:
    case 262:
    case 261:
    case 260:
     {
      label = 108;
      break L109;
      break;
     }
    case 288:
    case 59:
     break;
    default:
     break L109;
    }
    _statement($ls);
   }
   if ((label | 0) == 108) HEAP8[(HEAP32[$326 >> 2] | 0) + ($353 << 4) + 12 >> 0] = HEAP8[(HEAP32[$327 >> 2] | 0) + 12 >> 0] | 0;
   $378 = (HEAP32[$326 >> 2] | 0) + ($353 << 4) | 0;
   $379 = HEAP32[$324 >> 2] | 0;
   $384 = HEAP32[(HEAP32[(HEAP32[$ls$idx >> 2] | 0) + 12 >> 2] | 0) + 8 >> 2] | 0;
   $385 = $379 + 16 | 0;
   $386 = HEAP32[$385 >> 2] | 0;
   if (($384 | 0) < ($386 | 0)) {
    $388 = $379 + 12 | 0;
    $451 = $386;
    $i$0$ph1$i$i = $384;
    while (1) {
     $398 = $451;
     while (1) {
      if ((HEAP32[(HEAP32[$388 >> 2] | 0) + ($i$0$ph1$i$i << 4) >> 2] | 0) != (HEAP32[$378 >> 2] | 0)) break;
      _closegoto($ls, $i$0$ph1$i$i, $378);
      $394 = HEAP32[$385 >> 2] | 0;
      if (($i$0$ph1$i$i | 0) < ($394 | 0)) $398 = $394; else break L8;
     }
     $i$0$ph1$i$i = $i$0$ph1$i$i + 1 | 0;
     if (($i$0$ph1$i$i | 0) >= ($398 | 0)) break; else $451 = $398;
    }
   }
   break;
  }
 case 269:
  {
   _luaX_next($ls);
   $238 = HEAP32[$18 >> 2] | 0;
   if (($238 | 0) == 265) {
    _luaX_next($ls);
    $240 = HEAP32[$ls$idx >> 2] | 0;
    if ((HEAP32[$18 >> 2] | 0) == 292) {
     $244 = HEAP32[$ls + 16 >> 2] | 0;
     _luaX_next($ls);
     _new_localvar($ls, $244);
     $ls$idx$val$i = HEAP32[$ls$idx >> 2] | 0;
     $245 = $ls$idx$val$i + 42 | 0;
     $248 = (HEAPU8[$245 >> 0] | 0) + 1 | 0;
     HEAP8[$245 >> 0] = $248;
     HEAP32[(HEAP32[(HEAP32[$ls$idx$val$i >> 2] | 0) + 60 >> 2] | 0) + ((HEAP16[(HEAP32[HEAP32[(HEAP32[$ls$idx$val$i + 8 >> 2] | 0) + 48 >> 2] >> 2] | 0) + (($248 & 255) + -1 + (HEAP32[$ls$idx$val$i + 36 >> 2] | 0) << 1) >> 1] | 0) * 12 | 0) + 4 >> 2] = HEAP32[$ls$idx$val$i + 16 >> 2];
     _body($ls, $e$i66, 0, HEAP32[$0 >> 2] | 0);
     HEAP32[(HEAP32[(HEAP32[$240 >> 2] | 0) + 60 >> 2] | 0) + ((HEAP16[(HEAP32[HEAP32[(HEAP32[$240 + 8 >> 2] | 0) + 48 >> 2] >> 2] | 0) + ((HEAP32[$240 + 36 >> 2] | 0) + (HEAP32[$e$i66 + 4 >> 2] | 0) << 1) >> 1] | 0) * 12 | 0) + 4 >> 2] = HEAP32[$240 + 16 >> 2];
     break L8;
    } else _error_expected($ls, 292);
   }
   if (($238 | 0) != 292) _error_expected($ls, 292);
   $270 = $ls + 16 | 0;
   $nvars$0$i87 = 1;
   while (1) {
    $271 = HEAP32[$270 >> 2] | 0;
    _luaX_next($ls);
    _new_localvar($ls, $271);
    $272 = HEAP32[$18 >> 2] | 0;
    if (($272 | 0) == 61) {
     label = 81;
     break;
    } else if (($272 | 0) != 44) {
     label = 83;
     break;
    }
    _luaX_next($ls);
    if ((HEAP32[$18 >> 2] | 0) == 292) $nvars$0$i87 = $nvars$0$i87 + 1 | 0; else {
     label = 78;
     break;
    }
   }
   do if ((label | 0) == 78) _error_expected($ls, 292); else if ((label | 0) == 81) {
    _luaX_next($ls);
    _subexpr($ls, $e$i, 0) | 0;
    if ((HEAP32[$18 >> 2] | 0) == 44) {
     $n$0$i$i82 = 1;
     while (1) {
      _luaX_next($ls);
      _luaK_exp2nextreg(HEAP32[$ls$idx >> 2] | 0, $e$i);
      _subexpr($ls, $e$i, 0) | 0;
      $278 = $n$0$i$i82 + 1 | 0;
      if ((HEAP32[$18 >> 2] | 0) == 44) $n$0$i$i82 = $278; else {
       $n$0$i$i$lcssa = $278;
       break;
      }
     }
    } else $n$0$i$i$lcssa = 1;
    $$pre = HEAP32[$e$i >> 2] | 0;
    $ls$idx1$val$i = HEAP32[$ls$idx >> 2] | 0;
    $281 = $nvars$0$i87 - $n$0$i$i$lcssa | 0;
    if (!$$pre) {
     $286 = $281;
     $ls$idx1$val$i110 = $ls$idx1$val$i;
     label = 88;
     break;
    } else if (!(($$pre | 0) == 14 | ($$pre | 0) == 13)) {
     _luaK_exp2nextreg($ls$idx1$val$i, $e$i);
     $286 = $281;
     $ls$idx1$val$i110 = $ls$idx1$val$i;
     label = 88;
     break;
    }
    $282 = $281 + 1 | 0;
    $$$i$i = ($282 | 0) < 0 ? 0 : $282;
    _luaK_setreturns($ls$idx1$val$i, $e$i, $$$i$i);
    if (($$$i$i | 0) > 1) _luaK_reserveregs($ls$idx1$val$i, $$$i$i + -1 | 0);
   } else if ((label | 0) == 83) {
    HEAP32[$e$i >> 2] = 0;
    $286 = $nvars$0$i87;
    $ls$idx1$val$i110 = HEAP32[$ls$idx >> 2] | 0;
    label = 88;
   } while (0);
   if ((label | 0) == 88) if (($286 | 0) > 0) {
    $290 = HEAPU8[$ls$idx1$val$i110 + 44 >> 0] | 0;
    _luaK_reserveregs($ls$idx1$val$i110, $286);
    _luaK_nil($ls$idx1$val$i110, $290, $286);
   }
   $ls$idx$val$i29 = HEAP32[$ls$idx >> 2] | 0;
   $291 = $ls$idx$val$i29 + 42 | 0;
   $294 = (HEAPU8[$291 >> 0] | 0) + $nvars$0$i87 | 0;
   HEAP8[$291 >> 0] = $294;
   if ($nvars$0$i87) {
    $297 = $ls$idx$val$i29 + 16 | 0;
    $$idx2$i$i32 = $ls$idx$val$i29 + 36 | 0;
    $$idx$val$idx$val$pre$i$i36 = HEAP32[(HEAP32[$ls$idx$val$i29 >> 2] | 0) + 60 >> 2] | 0;
    $$idx1$val$idx$val$idx$val$pre$i$i40 = HEAP32[HEAP32[(HEAP32[$ls$idx$val$i29 + 8 >> 2] | 0) + 48 >> 2] >> 2] | 0;
    HEAP32[$$idx$val$idx$val$pre$i$i36 + ((HEAP16[$$idx1$val$idx$val$idx$val$pre$i$i40 + (($294 & 255) - $nvars$0$i87 + (HEAP32[$$idx2$i$i32 >> 2] | 0) << 1) >> 1] | 0) * 12 | 0) + 4 >> 2] = HEAP32[$297 >> 2];
    $306 = $nvars$0$i87 + -1 | 0;
    if ($306) {
     $311 = $306;
     do {
      HEAP32[$$idx$val$idx$val$pre$i$i36 + ((HEAP16[$$idx1$val$idx$val$idx$val$pre$i$i40 + ((HEAPU8[$291 >> 0] | 0) - $311 + (HEAP32[$$idx2$i$i32 >> 2] | 0) << 1) >> 1] | 0) * 12 | 0) + 4 >> 2] = HEAP32[$297 >> 2];
      $311 = $311 + -1 | 0;
     } while (($311 | 0) != 0);
    }
   }
   break;
  }
 case 278:
  {
   _luaX_next($ls);
   $41 = _luaK_getlabel($ls$idx$val) | 0;
   _subexpr($ls, $e$i66, 0) | 0;
   if ((HEAP32[$e$i66 >> 2] | 0) == 1) HEAP32[$e$i66 >> 2] = 3;
   _luaK_goiftrue(HEAP32[$ls$idx >> 2] | 0, $e$i66);
   $46 = HEAP32[$e$i66 + 12 >> 2] | 0;
   HEAP8[$e$i51 + 14 >> 0] = 1;
   HEAP8[$e$i51 + 12 >> 0] = HEAP8[$ls$idx$val + 42 >> 0] | 0;
   $54 = HEAP32[(HEAP32[$ls$idx$val + 8 >> 2] | 0) + 48 >> 2] | 0;
   HEAP32[$e$i51 + 4 >> 2] = HEAP32[$54 + 28 >> 2];
   HEAP32[$e$i51 + 8 >> 2] = HEAP32[$54 + 16 >> 2];
   HEAP8[$e$i51 + 13 >> 0] = 0;
   $62 = $ls$idx$val + 12 | 0;
   HEAP32[$e$i51 >> 2] = HEAP32[$62 >> 2];
   HEAP32[$62 >> 2] = $e$i51;
   if ((HEAP32[$18 >> 2] | 0) != 259) _error_expected($ls, 259);
   _luaX_next($ls);
   $66 = HEAP32[$ls$idx >> 2] | 0;
   HEAP8[$e$i66 + 14 >> 0] = 0;
   HEAP8[$e$i66 + 12 >> 0] = HEAP8[$66 + 42 >> 0] | 0;
   $74 = HEAP32[(HEAP32[$66 + 8 >> 2] | 0) + 48 >> 2] | 0;
   HEAP32[$e$i66 + 4 >> 2] = HEAP32[$74 + 28 >> 2];
   HEAP32[$e$i66 + 8 >> 2] = HEAP32[$74 + 16 >> 2];
   HEAP8[$e$i66 + 13 >> 0] = 0;
   $82 = $66 + 12 | 0;
   HEAP32[$e$i66 >> 2] = HEAP32[$82 >> 2];
   HEAP32[$82 >> 2] = $e$i66;
   L161 : do {
    $ls$idx$val$i$i$i4 = HEAP32[$18 >> 2] | 0;
    switch ($ls$idx$val$i$i$i4 | 0) {
    case 277:
    case 289:
    case 262:
    case 261:
    case 260:
     {
      break L161;
      break;
     }
    default:
     {}
    }
    _statement($ls);
   } while (($ls$idx$val$i$i$i4 | 0) != 274);
   _leaveblock($66);
   _luaK_patchlist($ls$idx$val, _luaK_jump($ls$idx$val) | 0, $41);
   _check_match($ls, 262, 278, $1);
   _leaveblock($ls$idx$val);
   _luaK_patchtohere($ls$idx$val, $46);
   break;
  }
 case 274:
  {
   _luaX_next($ls);
   $399 = HEAP32[$ls$idx >> 2] | 0;
   L166 : do switch (HEAP32[$18 >> 2] | 0) {
   case 59:
   case 277:
   case 289:
   case 262:
   case 261:
   case 260:
    {
     $first$0$i = 0;
     $nret$0$i = 0;
     break;
    }
   default:
    {
     _subexpr($ls, $e$i51, 0) | 0;
     if ((HEAP32[$18 >> 2] | 0) == 44) {
      $n$0$i$i5693 = 1;
      while (1) {
       _luaX_next($ls);
       _luaK_exp2nextreg(HEAP32[$ls$idx >> 2] | 0, $e$i51);
       _subexpr($ls, $e$i51, 0) | 0;
       $403 = $n$0$i$i5693 + 1 | 0;
       if ((HEAP32[$18 >> 2] | 0) == 44) $n$0$i$i5693 = $403; else {
        $n$0$i$i56$lcssa = $403;
        break;
       }
      }
     } else $n$0$i$i56$lcssa = 1;
     if (((HEAP32[$e$i51 >> 2] | 0) + -13 | 0) >>> 0 < 2) {
      _luaK_setreturns($399, $e$i51, -1);
      if ((HEAP32[$e$i51 >> 2] | 0) == 13 & ($n$0$i$i56$lcssa | 0) == 1) {
       $415 = (HEAP32[(HEAP32[$399 >> 2] | 0) + 48 >> 2] | 0) + (HEAP32[$e$i51 + 4 >> 2] << 2) | 0;
       HEAP32[$415 >> 2] = HEAP32[$415 >> 2] & -64 | 37;
      }
      $first$0$i = HEAPU8[$399 + 42 >> 0] | 0;
      $nret$0$i = -1;
      break L166;
     } else if (($n$0$i$i56$lcssa | 0) == 1) {
      $first$0$i = _luaK_exp2anyreg($399, $e$i51) | 0;
      $nret$0$i = 1;
      break L166;
     } else {
      _luaK_exp2nextreg($399, $e$i51);
      $first$0$i = HEAPU8[$399 + 42 >> 0] | 0;
      $nret$0$i = $n$0$i$i56$lcssa;
      break L166;
     }
    }
   } while (0);
   _luaK_ret($399, $first$0$i, $nret$0$i);
   if ((HEAP32[$18 >> 2] | 0) == 59) _luaX_next($ls);
   break;
  }
 case 266:
 case 258:
  {
   _gotostat($ls, _luaK_jump($ls$idx$val) | 0);
   break;
  }
 default:
  {
   $430 = $e$i66 + 4 | 0;
   _suffixedexp($ls, $430);
   $431 = HEAP32[$18 >> 2] | 0;
   if (($431 | 0) == 44 | ($431 | 0) == 61) {
    HEAP32[$e$i66 >> 2] = 0;
    _assignment($ls, $e$i66, 1);
    break L8;
   }
   if ((HEAP32[$430 >> 2] | 0) == 13) {
    $439 = (HEAP32[(HEAP32[$ls$idx$val >> 2] | 0) + 48 >> 2] | 0) + (HEAP32[$e$i66 + 8 >> 2] << 2) | 0;
    HEAP32[$439 >> 2] = HEAP32[$439 >> 2] & -8372225 | 16384;
    break L8;
   } else _luaX_syntaxerror($ls, 60400);
  }
 } while (0);
 $443 = HEAP32[$ls$idx >> 2] | 0;
 HEAP8[$443 + 44 >> 0] = HEAP8[$443 + 42 >> 0] | 0;
 $448 = (HEAP32[$ls$idx1 >> 2] | 0) + 106 | 0;
 HEAP16[$448 >> 1] = (HEAP16[$448 >> 1] | 0) + -1 << 16 >> 16;
 STACKTOP = sp;
 return;
}

function _match($ms, $s, $p) {
 $ms = $ms | 0;
 $s = $s | 0;
 $p = $p | 0;
 var $$$i36 = 0, $$$i4 = 0, $$$i44 = 0, $$$i52 = 0, $$$i7 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i25 = 0, $$0$i$i27 = 0, $$0$i$i32 = 0, $$0$i12 = 0, $$0$i15 = 0, $$0$i2 = 0, $$0$i5 = 0, $$0$ph$be = 0, $$0$ph125 = 0, $$01$be = 0, $$01$be$i = 0, $$01$be$i10 = 0, $$01$be$i39 = 0, $$01$be$i47 = 0, $$01$be$i55 = 0, $$01$i = 0, $$01$i20 = 0, $$01$i2970 = 0, $$01$ph$be = 0, $$01$ph124 = 0, $$01110 = 0, $$012$i = 0, $$012$i37 = 0, $$012$i45 = 0, $$012$i53 = 0, $$012$i8 = 0, $$013$i = 0, $$013$i$phi = 0, $$1 = 0, $$1$i = 0, $$1$i19 = 0, $$2 = 0, $$p$i = 0, $$p$i35 = 0, $$p$i43 = 0, $$p$i51 = 0, $$p$i6 = 0, $$pre$phi181Z2D = 0, $$pre180 = 0, $0 = 0, $10 = 0, $103 = 0, $11 = 0, $115 = 0, $116 = 0, $117 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $123 = 0, $124 = 0, $126 = 0, $127 = 0, $13 = 0, $132 = 0, $14 = 0, $141 = 0, $142 = 0, $144 = 0, $145 = 0, $146 = 0, $148 = 0, $149 = 0, $15 = 0, $151 = 0, $152 = 0, $157 = 0, $166 = 0, $167 = 0, $172 = 0, $174 = 0, $176 = 0, $182 = 0, $187 = 0, $19 = 0, $197 = 0, $199 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $218 = 0, $220 = 0, $221 = 0, $222 = 0, $224 = 0, $225 = 0, $227 = 0, $228 = 0, $233 = 0, $244 = 0, $246 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $253 = 0, $254 = 0, $255 = 0, $258 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $270 = 0, $271 = 0, $272 = 0, $274 = 0, $275 = 0, $277 = 0, $278 = 0, $283 = 0, $29 = 0, $294 = 0, $300 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $311 = 0, $312 = 0, $313 = 0, $315 = 0, $316 = 0, $318 = 0, $319 = 0, $324 = 0, $336 = 0, $342 = 0, $343 = 0, $35 = 0, $39 = 0, $5 = 0, $52 = 0, $53 = 0, $55 = 0, $57 = 0, $6 = 0, $61 = 0, $62 = 0, $64 = 0, $68 = 0, $72 = 0, $73 = 0, $75 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $86 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $cont$0$be$i = 0, $cont$04$i = 0, $i$0$i$lcssa = 0, $i$0$i$lcssa185 = 0, $i$0$i64 = 0, $i$1$i62 = 0, $level$0$i$i = 0, $level$0$in$i$i = 0, $ms$idx = 0, $ms$idx$val$i = 0, $ms$idx$val$i176 = 0, $ms$idx$val$i63 = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $vararg_buffer19 = sp + 80 | 0;
 $vararg_buffer17 = sp + 72 | 0;
 $vararg_buffer15 = sp + 64 | 0;
 $vararg_buffer13 = sp + 56 | 0;
 $vararg_buffer11 = sp + 48 | 0;
 $vararg_buffer9 = sp + 40 | 0;
 $vararg_buffer7 = sp + 32 | 0;
 $vararg_buffer5 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $0 = HEAP32[$ms >> 2] | 0;
 HEAP32[$ms >> 2] = $0 + -1;
 if (!$0) _luaL_error(HEAP32[$ms + 16 >> 2] | 0, 61816, sp) | 0;
 $5 = $ms + 12 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 L4 : do if (($6 | 0) == ($p | 0)) $$2 = $s; else {
  $ms$idx = $ms + 8 | 0;
  $8 = $ms + 16 | 0;
  $9 = $ms + 4 | 0;
  $10 = $ms + 20 | 0;
  $$0$ph125 = $s;
  $$01$ph124 = $p;
  $342 = $6;
  L6 : while (1) {
   $11 = $$0$ph125 + 1 | 0;
   $12 = $$0$ph125 + -1 | 0;
   $$01110 = $$01$ph124;
   $57 = $342;
   L8 : while (1) {
    $13 = HEAP8[$$01110 >> 0] | 0;
    $14 = $13 << 24 >> 24;
    L10 : do if (($14 | 0) == 37) {
     $61 = $$01110 + 1 | 0;
     $62 = HEAP8[$61 >> 0] | 0;
     switch ($62 << 24 >> 24 | 0) {
     case 102:
      break;
     case 98:
      {
       label = 25;
       break L8;
       break;
      }
     case 57:
     case 56:
     case 55:
     case 54:
     case 53:
     case 52:
     case 51:
     case 50:
     case 49:
     case 48:
      {
       label = 69;
       break L8;
       break;
      }
     default:
      {
       if (($61 | 0) == ($57 | 0)) _luaL_error(HEAP32[$8 >> 2] | 0, 61880, $vararg_buffer17) | 0;
       $$01$i = $$01110 + 2 | 0;
       $$pre$phi181Z2D = $61;
       label = 89;
       break L10;
      }
     }
     $86 = $$01110 + 2 | 0;
     if ((HEAP8[$86 >> 0] | 0) == 91) $92 = 91; else {
      _luaL_error(HEAP32[$8 >> 2] | 0, 61840, $vararg_buffer9) | 0;
      $92 = HEAP8[$86 >> 0] | 0;
     }
     $90 = $$01110 + 3 | 0;
     $91 = $92 << 24 >> 24;
     if (($91 | 0) == 37) {
      if (($90 | 0) == (HEAP32[$5 >> 2] | 0)) _luaL_error(HEAP32[$8 >> 2] | 0, 61880, $vararg_buffer11) | 0;
      $$01$i20 = $$01110 + 4 | 0;
     } else if (($91 | 0) == 91) {
      $$0$i15 = (HEAP8[$90 >> 0] | 0) == 94 ? $$01110 + 4 | 0 : $90;
      while (1) {
       if (($$0$i15 | 0) == (HEAP32[$5 >> 2] | 0)) _luaL_error(HEAP32[$8 >> 2] | 0, 61920, $vararg_buffer13) | 0;
       $103 = $$0$i15 + 1 | 0;
       if ((HEAP8[$$0$i15 >> 0] | 0) == 37) $$1$i19 = $103 >>> 0 < (HEAP32[$5 >> 2] | 0) >>> 0 ? $$0$i15 + 2 | 0 : $103; else $$1$i19 = $103;
       if ((HEAP8[$$1$i19 >> 0] | 0) == 93) break; else $$0$i15 = $$1$i19;
      }
      $$01$i20 = $$1$i19 + 1 | 0;
     } else $$01$i20 = $90;
     if (($$0$ph125 | 0) == (HEAP32[$9 >> 2] | 0)) $116 = 0; else $116 = HEAP8[$12 >> 0] | 0;
     $115 = $116 & 255;
     $117 = $$01$i20 + -1 | 0;
     $119 = (HEAP8[$90 >> 0] | 0) == 94;
     $$p$i6 = $119 ? $90 : $86;
     $120 = $119 & 1;
     $$$i7 = $120 ^ 1;
     $121 = $$p$i6 + 1 | 0;
     L40 : do if ($121 >>> 0 < $117 >>> 0) {
      $$012$i8 = $$p$i6;
      $124 = $121;
      while (1) {
       $123 = HEAP8[$124 >> 0] | 0;
       $126 = $$012$i8 + 2 | 0;
       $127 = HEAP8[$126 >> 0] | 0;
       do if ($123 << 24 >> 24 == 37) if (!(_match_class($115, $127 & 255) | 0)) $$01$be$i10 = $126; else {
        $$0$i12 = $$$i7;
        break L40;
       } else {
        if ($127 << 24 >> 24 == 45) {
         $132 = $$012$i8 + 3 | 0;
         if ($132 >>> 0 < $117 >>> 0) {
          if (($123 & 255) > ($116 & 255)) {
           $$01$be$i10 = $132;
           break;
          }
          if ((HEAPU8[$132 >> 0] | 0) < ($116 & 255)) {
           $$01$be$i10 = $132;
           break;
          } else {
           $$0$i12 = $$$i7;
           break L40;
          }
         }
        }
        if ($123 << 24 >> 24 == $116 << 24 >> 24) {
         $$0$i12 = $$$i7;
         break L40;
        } else $$01$be$i10 = $124;
       } while (0);
       $124 = $$01$be$i10 + 1 | 0;
       if ($124 >>> 0 >= $117 >>> 0) {
        $$0$i12 = $120;
        break;
       } else $$012$i8 = $$01$be$i10;
      }
     } else $$0$i12 = $120; while (0);
     if ($$0$i12) {
      $$2 = 0;
      break L4;
     }
     $141 = HEAP8[$$0$ph125 >> 0] | 0;
     $142 = $141 & 255;
     $144 = (HEAP8[$90 >> 0] | 0) == 94;
     $$p$i = $144 ? $90 : $86;
     $145 = $144 & 1;
     $$$i4 = $145 ^ 1;
     $146 = $$p$i + 1 | 0;
     L54 : do if ($146 >>> 0 < $117 >>> 0) {
      $$012$i = $$p$i;
      $149 = $146;
      while (1) {
       $148 = HEAP8[$149 >> 0] | 0;
       $151 = $$012$i + 2 | 0;
       $152 = HEAP8[$151 >> 0] | 0;
       do if ($148 << 24 >> 24 == 37) if (!(_match_class($142, $152 & 255) | 0)) $$01$be$i = $151; else {
        $$0$i5 = $$$i4;
        break L54;
       } else {
        if ($152 << 24 >> 24 == 45) {
         $157 = $$012$i + 3 | 0;
         if ($157 >>> 0 < $117 >>> 0) {
          if (($148 & 255) > ($141 & 255)) {
           $$01$be$i = $157;
           break;
          }
          if ((HEAPU8[$157 >> 0] | 0) < ($141 & 255)) {
           $$01$be$i = $157;
           break;
          } else {
           $$0$i5 = $$$i4;
           break L54;
          }
         }
        }
        if ($148 << 24 >> 24 == $141 << 24 >> 24) {
         $$0$i5 = $$$i4;
         break L54;
        } else $$01$be$i = $149;
       } while (0);
       $149 = $$01$be$i + 1 | 0;
       if ($149 >>> 0 >= $117 >>> 0) {
        $$0$i5 = $145;
        break;
       } else $$012$i = $$01$be$i;
      }
     } else $$0$i5 = $145; while (0);
     if (!$$0$i5) {
      $$2 = 0;
      break L4;
     } else $$01$be = $$01$i20;
    } else if (($14 | 0) == 40) {
     label = 7;
     break L6;
    } else if (($14 | 0) == 36) {
     $55 = $$01110 + 1 | 0;
     if (($55 | 0) == ($57 | 0)) {
      label = 23;
      break L6;
     } else {
      $$01$i = $55;
      $$pre$phi181Z2D = $55;
      label = 89;
     }
    } else if (($14 | 0) == 41) {
     label = 16;
     break L6;
    } else {
     $$pre180 = $$01110 + 1 | 0;
     if ($13 << 24 >> 24 == 91) {
      $$0$i2 = (HEAP8[$$pre180 >> 0] | 0) == 94 ? $$01110 + 2 | 0 : $$pre180;
      $197 = $57;
      while (1) {
       if (($$0$i2 | 0) == ($197 | 0)) _luaL_error(HEAP32[$8 >> 2] | 0, 61920, $vararg_buffer19) | 0;
       $199 = $$0$i2 + 1 | 0;
       if ((HEAP8[$$0$i2 >> 0] | 0) == 37) $$1$i = $199 >>> 0 < (HEAP32[$5 >> 2] | 0) >>> 0 ? $$0$i2 + 2 | 0 : $199; else $$1$i = $199;
       if ((HEAP8[$$1$i >> 0] | 0) == 93) break;
       $$0$i2 = $$1$i;
       $197 = HEAP32[$5 >> 2] | 0;
      }
      $$01$i = $$1$i + 1 | 0;
      $$pre$phi181Z2D = $$pre180;
      label = 89;
     } else {
      $$01$i = $$pre180;
      $$pre$phi181Z2D = $$pre180;
      label = 89;
     }
    } while (0);
    L80 : do if ((label | 0) == 89) {
     label = 0;
     do if ((HEAP32[$ms$idx >> 2] | 0) >>> 0 > $$0$ph125 >>> 0) {
      $210 = HEAP8[$$0$ph125 >> 0] | 0;
      $211 = $210 & 255;
      $212 = HEAP8[$$01110 >> 0] | 0;
      $213 = $212 << 24 >> 24;
      L85 : do if (($213 | 0) == 46) $249 = HEAP8[$$01$i >> 0] | 0; else if (($213 | 0) == 37) {
       $$0$i = _match_class($211, HEAPU8[$$pre$phi181Z2D >> 0] | 0) | 0;
       label = 104;
      } else if (($213 | 0) == 91) {
       $218 = $$01$i + -1 | 0;
       $220 = (HEAP8[$$pre$phi181Z2D >> 0] | 0) == 94;
       $$p$i35 = $220 ? $$pre$phi181Z2D : $$01110;
       $221 = $220 & 1;
       $$$i36 = $221 ^ 1;
       $222 = $$p$i35 + 1 | 0;
       if ($222 >>> 0 < $218 >>> 0) {
        $$012$i37 = $$p$i35;
        $225 = $222;
        while (1) {
         $224 = HEAP8[$225 >> 0] | 0;
         $227 = $$012$i37 + 2 | 0;
         $228 = HEAP8[$227 >> 0] | 0;
         do if ($224 << 24 >> 24 == 37) if (!(_match_class($211, $228 & 255) | 0)) $$01$be$i39 = $227; else {
          $$0$i = $$$i36;
          label = 104;
          break L85;
         } else {
          if ($228 << 24 >> 24 == 45) {
           $233 = $$012$i37 + 3 | 0;
           if ($233 >>> 0 < $218 >>> 0) {
            if (($224 & 255) > ($210 & 255)) {
             $$01$be$i39 = $233;
             break;
            }
            if ((HEAPU8[$233 >> 0] | 0) < ($210 & 255)) {
             $$01$be$i39 = $233;
             break;
            } else {
             $$0$i = $$$i36;
             label = 104;
             break L85;
            }
           }
          }
          if ($224 << 24 >> 24 == $210 << 24 >> 24) {
           $$0$i = $$$i36;
           label = 104;
           break L85;
          } else $$01$be$i39 = $225;
         } while (0);
         $225 = $$01$be$i39 + 1 | 0;
         if ($225 >>> 0 >= $218 >>> 0) {
          $$0$i = $221;
          label = 104;
          break;
         } else $$012$i37 = $$01$be$i39;
        }
       } else {
        $$0$i = $221;
        label = 104;
       }
      } else {
       $$0$i = $212 << 24 >> 24 == $210 << 24 >> 24 & 1;
       label = 104;
      } while (0);
      if ((label | 0) == 104) {
       label = 0;
       $244 = HEAP8[$$01$i >> 0] | 0;
       if (!$$0$i) {
        $343 = $244;
        break;
       } else $249 = $244;
      }
      $248 = $249 << 24 >> 24;
      if (($248 | 0) == 42) {
       label = 112;
       break L6;
      } else if (($248 | 0) == 43) {
       $$1 = $11;
       break L6;
      } else if (($248 | 0) == 45) {
       label = 109;
       break L6;
      } else if (($248 | 0) != 63) {
       $$0$ph$be = $11;
       $$01$ph$be = $$01$i;
       break L8;
      }
      $254 = $$01$i + 1 | 0;
      $255 = _match($ms, $11, $254) | 0;
      if (!$255) {
       $$01$be = $254;
       break L80;
      } else {
       $$2 = $255;
       break L4;
      }
     } else $343 = HEAP8[$$01$i >> 0] | 0; while (0);
     if (!($343 << 24 >> 24 == 45 | $343 << 24 >> 24 == 63 | $343 << 24 >> 24 == 42)) {
      $$2 = 0;
      break L4;
     }
     $$01$be = $$01$i + 1 | 0;
    } while (0);
    $246 = HEAP32[$5 >> 2] | 0;
    if (($$01$be | 0) == ($246 | 0)) {
     $$2 = $$0$ph125;
     break L4;
    } else {
     $$01110 = $$01$be;
     $57 = $246;
    }
   }
   if ((label | 0) == 25) {
    label = 0;
    $64 = $$01110 + 2 | 0;
    if (($57 + -1 | 0) >>> 0 <= $64 >>> 0) _luaL_error(HEAP32[$8 >> 2] | 0, 61952, $vararg_buffer7) | 0;
    $68 = HEAP8[$$0$ph125 >> 0] | 0;
    if ($68 << 24 >> 24 != (HEAP8[$64 >> 0] | 0)) {
     $$2 = 0;
     break L4;
    }
    $72 = HEAP8[$$01110 + 3 >> 0] | 0;
    $73 = HEAP32[$ms$idx >> 2] | 0;
    if ($11 >>> 0 < $73 >>> 0) {
     $$013$i = $$0$ph125;
     $76 = $11;
     $cont$04$i = 1;
    } else {
     $$2 = 0;
     break L4;
    }
    while (1) {
     $75 = HEAP8[$76 >> 0] | 0;
     if ($75 << 24 >> 24 == $72 << 24 >> 24) {
      $78 = $cont$04$i + -1 | 0;
      if (!$78) break; else $cont$0$be$i = $78;
     } else $cont$0$be$i = ($75 << 24 >> 24 == $68 << 24 >> 24 & 1) + $cont$04$i | 0;
     $80 = $76 + 1 | 0;
     if ($80 >>> 0 < $73 >>> 0) {
      $$013$i$phi = $76;
      $76 = $80;
      $cont$04$i = $cont$0$be$i;
      $$013$i = $$013$i$phi;
     } else {
      $$2 = 0;
      break L4;
     }
    }
    $$0$ph$be = $$013$i + 2 | 0;
    $$01$ph$be = $$01110 + 4 | 0;
   } else if ((label | 0) == 69) {
    label = 0;
    $166 = $62 & 255;
    $167 = $166 + -49 | 0;
    if (($167 | 0) < 0) label = 72; else if (($167 | 0) < (HEAP32[$10 >> 2] | 0)) {
     $172 = HEAP32[$ms + ($167 << 3) + 28 >> 2] | 0;
     if (($172 | 0) == -1) label = 72; else {
      $$0$i$i = $167;
      $182 = $172;
     }
    } else label = 72;
    if ((label | 0) == 72) {
     label = 0;
     $174 = HEAP32[$8 >> 2] | 0;
     HEAP32[$vararg_buffer15 >> 2] = $166 + -48;
     $176 = _luaL_error($174, 61760, $vararg_buffer15) | 0;
     $$0$i$i = $176;
     $182 = HEAP32[$ms + ($176 << 3) + 28 >> 2] | 0;
    }
    if (((HEAP32[$ms$idx >> 2] | 0) - $$0$ph125 | 0) >>> 0 < $182 >>> 0) {
     $$2 = 0;
     break L4;
    }
    if (_memcmp(HEAP32[$ms + ($$0$i$i << 3) + 24 >> 2] | 0, $$0$ph125, $182) | 0) {
     $$2 = 0;
     break L4;
    }
    $187 = $$0$ph125 + $182 | 0;
    if (!$187) {
     $$2 = 0;
     break L4;
    }
    $$0$ph$be = $187;
    $$01$ph$be = $$01110 + 2 | 0;
   }
   $342 = HEAP32[$5 >> 2] | 0;
   if (($$01$ph$be | 0) == ($342 | 0)) {
    $$2 = $$0$ph$be;
    break L4;
   } else {
    $$0$ph125 = $$0$ph$be;
    $$01$ph124 = $$01$ph$be;
   }
  }
  if ((label | 0) == 7) {
   $15 = $$01110 + 1 | 0;
   if ((HEAP8[$15 >> 0] | 0) == 41) {
    $19 = HEAP32[$10 >> 2] | 0;
    if (($19 | 0) > 31) _luaL_error(HEAP32[$8 >> 2] | 0, 61736, $vararg_buffer1) | 0;
    HEAP32[$ms + ($19 << 3) + 24 >> 2] = $$0$ph125;
    HEAP32[$ms + ($19 << 3) + 28 >> 2] = -2;
    HEAP32[$10 >> 2] = $19 + 1;
    $25 = _match($ms, $$0$ph125, $$01110 + 2 | 0) | 0;
    if ($25) {
     $$2 = $25;
     break;
    }
    HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + -1;
    $$2 = 0;
    break;
   } else {
    $29 = HEAP32[$10 >> 2] | 0;
    if (($29 | 0) > 31) _luaL_error(HEAP32[$8 >> 2] | 0, 61736, $vararg_buffer3) | 0;
    HEAP32[$ms + ($29 << 3) + 24 >> 2] = $$0$ph125;
    HEAP32[$ms + ($29 << 3) + 28 >> 2] = -1;
    HEAP32[$10 >> 2] = $29 + 1;
    $35 = _match($ms, $$0$ph125, $15) | 0;
    if ($35) {
     $$2 = $35;
     break;
    }
    HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + -1;
    $$2 = 0;
    break;
   }
  } else if ((label | 0) == 16) {
   $39 = $$01110 + 1 | 0;
   $level$0$in$i$i = HEAP32[$10 >> 2] | 0;
   while (1) {
    $level$0$i$i = $level$0$in$i$i + -1 | 0;
    if (($level$0$in$i$i | 0) <= 0) {
     label = 19;
     break;
    }
    if ((HEAP32[$ms + ($level$0$i$i << 3) + 28 >> 2] | 0) == -1) {
     $$0$i$i25 = $level$0$i$i;
     break;
    } else $level$0$in$i$i = $level$0$i$i;
   }
   if ((label | 0) == 19) $$0$i$i25 = _luaL_error(HEAP32[$8 >> 2] | 0, 62e3, $vararg_buffer5) | 0;
   $52 = $ms + ($$0$i$i25 << 3) + 28 | 0;
   HEAP32[$52 >> 2] = $$0$ph125 - (HEAP32[$ms + ($$0$i$i25 << 3) + 24 >> 2] | 0);
   $53 = _match($ms, $$0$ph125, $39) | 0;
   if ($53) {
    $$2 = $53;
    break;
   }
   HEAP32[$52 >> 2] = -1;
   $$2 = 0;
   break;
  } else if ((label | 0) == 23) {
   $$2 = ($$0$ph125 | 0) == (HEAP32[$ms$idx >> 2] | 0) ? $$0$ph125 : 0;
   break;
  } else if ((label | 0) == 109) {
   $250 = $$01$i + 1 | 0;
   $251 = _match($ms, $$0$ph125, $250) | 0;
   if ($251) {
    $$2 = $251;
    break;
   }
   $253 = $$01$i + -1 | 0;
   $$01$i2970 = $$0$ph125;
   while (1) {
    if ((HEAP32[$ms$idx >> 2] | 0) >>> 0 <= $$01$i2970 >>> 0) {
     $$2 = 0;
     break L4;
    }
    $303 = HEAP8[$$01$i2970 >> 0] | 0;
    $304 = $303 & 255;
    $305 = HEAP8[$$01110 >> 0] | 0;
    $306 = $305 << 24 >> 24;
    L152 : do if (($306 | 0) == 37) {
     $$0$i$i32 = _match_class($304, HEAPU8[$$pre$phi181Z2D >> 0] | 0) | 0;
     label = 147;
    } else if (($306 | 0) == 91) {
     $311 = (HEAP8[$$pre$phi181Z2D >> 0] | 0) == 94;
     $$p$i51 = $311 ? $$pre$phi181Z2D : $$01110;
     $312 = $311 & 1;
     $$$i52 = $312 ^ 1;
     $313 = $$p$i51 + 1 | 0;
     if ($313 >>> 0 < $253 >>> 0) {
      $$012$i53 = $$p$i51;
      $316 = $313;
      while (1) {
       $315 = HEAP8[$316 >> 0] | 0;
       $318 = $$012$i53 + 2 | 0;
       $319 = HEAP8[$318 >> 0] | 0;
       do if ($315 << 24 >> 24 == 37) if (!(_match_class($304, $319 & 255) | 0)) $$01$be$i55 = $318; else {
        $$0$i$i32 = $$$i52;
        label = 147;
        break L152;
       } else {
        if ($319 << 24 >> 24 == 45) {
         $324 = $$012$i53 + 3 | 0;
         if ($324 >>> 0 < $253 >>> 0) {
          if (($315 & 255) > ($303 & 255)) {
           $$01$be$i55 = $324;
           break;
          }
          if ((HEAPU8[$324 >> 0] | 0) < ($303 & 255)) {
           $$01$be$i55 = $324;
           break;
          } else {
           $$0$i$i32 = $$$i52;
           label = 147;
           break L152;
          }
         }
        }
        if ($315 << 24 >> 24 == $303 << 24 >> 24) {
         $$0$i$i32 = $$$i52;
         label = 147;
         break L152;
        } else $$01$be$i55 = $316;
       } while (0);
       $316 = $$01$be$i55 + 1 | 0;
       if ($316 >>> 0 >= $253 >>> 0) {
        $$0$i$i32 = $312;
        label = 147;
        break;
       } else $$012$i53 = $$01$be$i55;
      }
     } else {
      $$0$i$i32 = $312;
      label = 147;
     }
    } else if (($306 | 0) != 46) {
     $$0$i$i32 = $305 << 24 >> 24 == $303 << 24 >> 24 & 1;
     label = 147;
    } while (0);
    if ((label | 0) == 147) {
     label = 0;
     if (!$$0$i$i32) {
      $$2 = 0;
      break L4;
     }
    }
    $$01$i2970 = $$01$i2970 + 1 | 0;
    $336 = _match($ms, $$01$i2970, $250) | 0;
    if ($336) {
     $$2 = $336;
     break L4;
    }
   }
  } else if ((label | 0) == 112) $$1 = $$0$ph125;
  $ms$idx$val$i63 = HEAP32[$ms$idx >> 2] | 0;
  if ($ms$idx$val$i63 >>> 0 > $$1 >>> 0) {
   $258 = $$01$i + -1 | 0;
   $262 = $$1;
   $i$0$i64 = 0;
   $ms$idx$val$i176 = $ms$idx$val$i63;
   while (1) {
    $261 = HEAP8[$262 >> 0] | 0;
    $263 = $261 & 255;
    $264 = HEAP8[$$01110 >> 0] | 0;
    $265 = $264 << 24 >> 24;
    L183 : do if (($265 | 0) == 37) {
     $$0$i$i27 = _match_class($263, HEAPU8[$$pre$phi181Z2D >> 0] | 0) | 0;
     label = 129;
    } else if (($265 | 0) == 91) {
     $270 = (HEAP8[$$pre$phi181Z2D >> 0] | 0) == 94;
     $$p$i43 = $270 ? $$pre$phi181Z2D : $$01110;
     $271 = $270 & 1;
     $$$i44 = $271 ^ 1;
     $272 = $$p$i43 + 1 | 0;
     if ($272 >>> 0 < $258 >>> 0) {
      $$012$i45 = $$p$i43;
      $275 = $272;
      while (1) {
       $274 = HEAP8[$275 >> 0] | 0;
       $277 = $$012$i45 + 2 | 0;
       $278 = HEAP8[$277 >> 0] | 0;
       do if ($274 << 24 >> 24 == 37) if (!(_match_class($263, $278 & 255) | 0)) $$01$be$i47 = $277; else {
        $$0$i$i27 = $$$i44;
        label = 129;
        break L183;
       } else {
        if ($278 << 24 >> 24 == 45) {
         $283 = $$012$i45 + 3 | 0;
         if ($283 >>> 0 < $258 >>> 0) {
          if (($274 & 255) > ($261 & 255)) {
           $$01$be$i47 = $283;
           break;
          }
          if ((HEAPU8[$283 >> 0] | 0) < ($261 & 255)) {
           $$01$be$i47 = $283;
           break;
          } else {
           $$0$i$i27 = $$$i44;
           label = 129;
           break L183;
          }
         }
        }
        if ($274 << 24 >> 24 == $261 << 24 >> 24) {
         $$0$i$i27 = $$$i44;
         label = 129;
         break L183;
        } else $$01$be$i47 = $275;
       } while (0);
       $275 = $$01$be$i47 + 1 | 0;
       if ($275 >>> 0 >= $258 >>> 0) {
        $$0$i$i27 = $271;
        label = 129;
        break;
       } else $$012$i45 = $$01$be$i47;
      }
     } else {
      $$0$i$i27 = $271;
      label = 129;
     }
    } else if (($265 | 0) == 46) $ms$idx$val$i = $ms$idx$val$i176; else {
     $$0$i$i27 = $264 << 24 >> 24 == $261 << 24 >> 24 & 1;
     label = 129;
    } while (0);
    if ((label | 0) == 129) {
     label = 0;
     if (!$$0$i$i27) {
      $i$0$i$lcssa = $i$0$i64;
      break;
     }
     $ms$idx$val$i = HEAP32[$ms$idx >> 2] | 0;
    }
    $294 = $i$0$i64 + 1 | 0;
    $262 = $$1 + $294 | 0;
    if ($ms$idx$val$i >>> 0 <= $262 >>> 0) {
     $i$0$i$lcssa = $294;
     break;
    } else {
     $i$0$i64 = $294;
     $ms$idx$val$i176 = $ms$idx$val$i;
    }
   }
   if (($i$0$i$lcssa | 0) > -1) $i$0$i$lcssa185 = $i$0$i$lcssa; else {
    $$2 = 0;
    break;
   }
  } else $i$0$i$lcssa185 = 0;
  $260 = $$01$i + 1 | 0;
  $i$1$i62 = $i$0$i$lcssa185;
  while (1) {
   $300 = _match($ms, $$1 + $i$1$i62 | 0, $260) | 0;
   if ($300) {
    $$2 = $300;
    break L4;
   }
   if (($i$1$i62 | 0) > 0) $i$1$i62 = $i$1$i62 + -1 | 0; else {
    $$2 = 0;
    break;
   }
  }
 } while (0);
 HEAP32[$ms >> 2] = (HEAP32[$ms >> 2] | 0) + 1;
 STACKTOP = sp;
 return $$2 | 0;
}

function _png_init_read_transformations($png_ptr) {
 $png_ptr = $png_ptr | 0;
 var $$pre$i23 = 0, $0 = 0, $1 = 0, $106 = 0, $107 = 0, $110 = 0, $111 = 0, $121 = 0, $122 = 0, $123 = 0, $126 = 0, $128 = 0, $13 = 0, $134 = 0, $137 = 0, $140 = 0, $147 = 0, $153 = 0, $158 = 0, $163 = 0, $170 = 0, $177 = 0, $18 = 0, $184 = 0, $19 = 0, $198 = 0, $203 = 0, $208 = 0, $213 = 0, $218 = 0, $219 = 0, $231 = 0, $246 = 0, $25 = 0, $255 = 0, $263 = 0, $265 = 0, $266 = 0, $268 = 0, $272 = 0, $274 = 0, $279 = 0, $284 = 0, $288 = 0, $295 = 0, $298 = 0, $3 = 0, $302 = 0, $304 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $313 = 0, $317 = 0, $32 = 0, $33 = 0, $330 = 0, $331 = 0, $333 = 0, $337 = 0, $34 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $363 = 0, $366 = 0, $375 = 0, $38 = 0, $380 = 0, $389 = 0, $399 = 0, $4 = 0, $404 = 0, $413 = 0, $423 = 0, $428 = 0, $437 = 0, $443 = 0, $449 = 0, $458 = 0, $459 = 0, $46 = 0, $461 = 0, $464 = 0, $468 = 0, $470 = 0, $474 = 0, $475 = 0, $476 = 0, $482 = 0, $483 = 0, $487 = 0, $488 = 0, $489 = 0, $492 = 0, $5 = 0, $516 = 0, $52 = 0, $521 = 0, $532 = 0, $534 = 0, $535 = 0, $537 = 0, $538 = 0, $544 = 0, $550 = 0, $558 = 0, $559 = 0, $561 = 0, $566 = 0, $567 = 0, $569 = 0, $571 = 0, $572 = 0, $574 = 0, $575 = 0, $577 = 0, $578 = 0, $580 = 0, $582 = 0, $584 = 0, $586 = 0, $589 = 0, $59 = 0, $593 = 0, $596 = 0, $601 = 0, $607 = 0, $613 = 0, $618 = 0, $624 = 0, $63 = 0, $630 = 0, $635 = 0, $64 = 0, $643 = 0, $644 = 0, $646 = 0, $651 = 0, $652 = 0, $654 = 0, $656 = 0, $659 = 0, $661 = 0, $669 = 0, $67 = 0, $671 = 0, $673 = 0, $675 = 0, $683 = 0, $685 = 0, $687 = 0, $689 = 0, $696 = 0, $70 = 0, $71 = 0, $73 = 0, $78 = 0, $79 = 0, $83 = 0, $85 = 0, $89 = 0, $91 = 0, $back$sroa$0$0 = 0, $back$sroa$0$1 = 0, $back$sroa$1$0 = 0, $back$sroa$1$1 = 0, $back$sroa$2$0 = 0, $back$sroa$2$1 = 0, $back_1$sroa$0$0 = 0, $back_1$sroa$1$0 = 0, $back_1$sroa$2$0 = 0, $g$0 = 0, $g3$0 = 0, $gamma_correction$0 = 0, $gray$0$i = 0, $gs$0 = 0, $gs4$0 = 0, $gtest$i = 0, $i$010$i = 0, $i$039 = 0, $i1$05$i = 0, $i14$031 = 0, $i14$127 = 0, $i14$224 = 0, $i7$035 = 0, $i8$033 = 0, $input_has_transparency$09$i = 0, $input_has_transparency$1$i = 0, $input_has_transparency$2$ph$i = 0, $storemerge = 0, $trans_gray$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $gtest$i = sp;
 $0 = $png_ptr + 824 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $3 = $png_ptr + 488 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = ($4 | 0) != 0;
 do if (!$1) if ($5) {
  HEAP32[$0 >> 2] = _png_reciprocal($4) | 0;
  $gamma_correction$0 = 0;
  break;
 } else {
  HEAP32[$0 >> 2] = 1e5;
  HEAP32[$3 >> 2] = 1e5;
  $gamma_correction$0 = 0;
  break;
 } else {
  if (!$5) {
   HEAP32[$3 >> 2] = _png_reciprocal($1) | 0;
   $gamma_correction$0 = 0;
   break;
  }
  if (!(_png_muldiv($gtest$i, $1, $4, 1e5) | 0)) $gamma_correction$0 = 1; else $gamma_correction$0 = (_png_gamma_significant(HEAP32[$gtest$i >> 2] | 0) | 0) != 0;
 } while (0);
 $13 = $png_ptr + 898 | 0;
 HEAP16[$13 >> 1] = HEAPU16[$13 >> 1] | 1;
 $18 = $png_ptr + 216 | 0;
 $19 = HEAP32[$18 >> 2] | 0;
 $storemerge = $gamma_correction$0 ? $19 | 8192 : $19 & -8193;
 HEAP32[$18 >> 2] = $storemerge;
 if (($storemerge & 262272 | 0) == 262144) {
  HEAP32[$18 >> 2] = $storemerge & -41943297;
  $25 = $png_ptr + 212 | 0;
  HEAP32[$25 >> 2] = HEAP32[$25 >> 2] & -8193;
  HEAP16[$png_ptr + 428 >> 1] = 0;
 }
 $31 = (_png_gamma_significant(HEAP32[$3 >> 2] | 0) | 0) == 0;
 $32 = HEAP32[$18 >> 2] | 0;
 if ($31) {
  $33 = $32 & -8388609;
  HEAP32[$18 >> 2] = $33;
  $34 = $png_ptr + 212 | 0;
  HEAP32[$34 >> 2] = HEAP32[$34 >> 2] & -8193;
  $38 = $33;
 } else $38 = $32;
 if (!($38 & 6291456)) $$pre$i23 = $38; else {
  _png_colorspace_set_rgb_coefficients($png_ptr);
  $$pre$i23 = HEAP32[$18 >> 2] | 0;
 }
 if (!($$pre$i23 & 256)) {
  if (($$pre$i23 & 16512 | 0) == 16512) {
   $52 = HEAP16[$png_ptr + 454 >> 1] | 0;
   if ($52 << 16 >> 16 == (HEAP16[$png_ptr + 456 >> 1] | 0)) if ($52 << 16 >> 16 == (HEAP16[$png_ptr + 458 >> 1] | 0)) {
    $59 = $png_ptr + 208 | 0;
    HEAP32[$59 >> 2] = HEAP32[$59 >> 2] | 2048;
    HEAP16[$png_ptr + 460 >> 1] = $52;
   }
  }
 } else if (!(HEAP8[$png_ptr + 435 >> 0] & 2)) {
  $46 = $png_ptr + 208 | 0;
  HEAP32[$46 >> 2] = HEAP32[$46 >> 2] | 2048;
 }
 $63 = $png_ptr + 435 | 0;
 $64 = HEAP8[$63 >> 0] | 0;
 if ($64 << 24 >> 24 == 3) {
  $67 = HEAP16[$png_ptr + 428 >> 1] | 0;
  L43 : do if (!($67 << 16 >> 16)) {
   $696 = 0;
   $input_has_transparency$2$ph$i = 0;
   label = 28;
  } else {
   $70 = HEAP32[$png_ptr + 528 >> 2] | 0;
   $71 = $67 & 65535;
   $i$010$i = 0;
   $input_has_transparency$09$i = 0;
   while (1) {
    $73 = HEAP8[$70 + $i$010$i >> 0] | 0;
    if ($73 << 24 >> 24 == -1) $input_has_transparency$1$i = $input_has_transparency$09$i; else if (!($73 << 24 >> 24)) $input_has_transparency$1$i = 1; else {
     $107 = $67;
     $85 = $$pre$i23;
     break L43;
    }
    $i$010$i = $i$010$i + 1 | 0;
    if (($i$010$i | 0) >= ($71 | 0)) {
     $696 = $67;
     $input_has_transparency$2$ph$i = $input_has_transparency$1$i;
     label = 28;
     break;
    } else $input_has_transparency$09$i = $input_has_transparency$1$i;
   }
  } while (0);
  if ((label | 0) == 28) {
   $78 = $$pre$i23 & -8388609;
   HEAP32[$18 >> 2] = $78;
   $79 = $png_ptr + 212 | 0;
   HEAP32[$79 >> 2] = HEAP32[$79 >> 2] & -8193;
   if (!$input_has_transparency$2$ph$i) {
    $83 = $$pre$i23 & -8388993;
    HEAP32[$18 >> 2] = $83;
    $107 = $696;
    $85 = $83;
   } else {
    $107 = $696;
    $85 = $78;
   }
  }
  if (($85 & 4352 | 0) == 4352) {
   $89 = HEAPU8[$png_ptr + 452 >> 0] | 0;
   $91 = HEAP32[$png_ptr + 416 >> 2] | 0;
   HEAP16[$png_ptr + 454 >> 1] = HEAPU8[$91 + ($89 * 3 | 0) >> 0] | 0;
   HEAP16[$png_ptr + 456 >> 1] = HEAPU8[$91 + ($89 * 3 | 0) + 1 >> 0] | 0;
   HEAP16[$png_ptr + 458 >> 1] = HEAPU8[$91 + ($89 * 3 | 0) + 2 >> 0] | 0;
   if (($85 & 34078720 | 0) == 524288) {
    $106 = $107 & 65535;
    if (!($107 << 16 >> 16)) $158 = $85; else {
     $110 = HEAP32[$png_ptr + 528 >> 2] | 0;
     $i1$05$i = 0;
     do {
      $111 = $110 + $i1$05$i | 0;
      HEAP8[$111 >> 0] = HEAPU8[$111 >> 0] ^ 255;
      $i1$05$i = $i1$05$i + 1 | 0;
     } while (($i1$05$i | 0) < ($106 | 0));
     $158 = HEAP32[$18 >> 2] | 0;
    }
   } else $158 = $85;
  } else $158 = $85;
 } else {
  if (!($64 & 4)) {
   $121 = (HEAP16[$png_ptr + 428 >> 1] | 0) == 0;
   $122 = $$pre$i23 & -8388609;
   HEAP32[$18 >> 2] = $122;
   $123 = $png_ptr + 212 | 0;
   HEAP32[$123 >> 2] = HEAP32[$123 >> 2] & -8193;
   if ($121) {
    $126 = $$pre$i23 & -8388993;
    HEAP32[$18 >> 2] = $126;
    $128 = $126;
   } else $128 = $122;
  } else $128 = $$pre$i23;
  if (($128 & 4352 | 0) == 4352 & ($64 & 2) == 0) {
   $134 = HEAPU16[$png_ptr + 460 >> 1] | 0;
   $137 = HEAPU16[$png_ptr + 540 >> 1] | 0;
   $140 = HEAPU8[$png_ptr + 436 >> 0] | 0;
   if (($140 | 0) == 4) {
    $gray$0$i = $134 * 17 | 0;
    $trans_gray$0$i = $137 * 17 | 0;
   } else if (($140 | 0) == 2) {
    $gray$0$i = $134 * 85 | 0;
    $trans_gray$0$i = $137 * 85 | 0;
   } else if (($140 | 0) == 1) {
    $gray$0$i = $134 * 255 | 0;
    $trans_gray$0$i = $137 * 255 | 0;
   } else {
    $gray$0$i = $134;
    $trans_gray$0$i = $137;
   }
   $147 = $gray$0$i & 65535;
   HEAP16[$png_ptr + 458 >> 1] = $147;
   HEAP16[$png_ptr + 456 >> 1] = $147;
   HEAP16[$png_ptr + 454 >> 1] = $147;
   if (!($128 & 33554432)) {
    $153 = $trans_gray$0$i & 65535;
    HEAP16[$png_ptr + 538 >> 1] = $153;
    HEAP16[$png_ptr + 536 >> 1] = $153;
    HEAP16[$png_ptr + 534 >> 1] = $153;
    $158 = $128;
   } else $158 = $128;
  } else $158 = $128;
 }
 if (($158 & 896 | 0) == 640) if ((HEAP8[$png_ptr + 436 >> 0] | 0) != 16) {
  $163 = $png_ptr + 454 | 0;
  HEAP16[$163 >> 1] = (((HEAPU16[$163 >> 1] | 0) * 255 | 0) + 32895 | 0) >>> 16;
  $170 = $png_ptr + 456 | 0;
  HEAP16[$170 >> 1] = (((HEAPU16[$170 >> 1] | 0) * 255 | 0) + 32895 | 0) >>> 16;
  $177 = $png_ptr + 458 | 0;
  HEAP16[$177 >> 1] = (((HEAPU16[$177 >> 1] | 0) * 255 | 0) + 32895 | 0) >>> 16;
  $184 = $png_ptr + 460 | 0;
  HEAP16[$184 >> 1] = (((HEAPU16[$184 >> 1] | 0) * 255 | 0) + 32895 | 0) >>> 16;
 }
 if (($158 & 128 | 0) != 0 & ($158 & 67109888 | 0) != 0 & ($158 & 256 | 0) == 0) if ((HEAP8[$png_ptr + 436 >> 0] | 0) == 16) {
  $198 = $png_ptr + 454 | 0;
  HEAP16[$198 >> 1] = (HEAPU16[$198 >> 1] | 0) * 257;
  $203 = $png_ptr + 456 | 0;
  HEAP16[$203 >> 1] = (HEAPU16[$203 >> 1] | 0) * 257;
  $208 = $png_ptr + 458 | 0;
  HEAP16[$208 >> 1] = (HEAPU16[$208 >> 1] | 0) * 257;
  $213 = $png_ptr + 460 | 0;
  HEAP16[$213 >> 1] = (HEAPU16[$213 >> 1] | 0) * 257;
 }
 $218 = $png_ptr + 462 | 0;
 $219 = $png_ptr + 452 | 0;
 HEAP16[$218 + 0 >> 1] = HEAP16[$219 + 0 >> 1] | 0;
 HEAP16[$218 + 2 >> 1] = HEAP16[$219 + 2 >> 1] | 0;
 HEAP16[$218 + 4 >> 1] = HEAP16[$219 + 4 >> 1] | 0;
 HEAP16[$218 + 6 >> 1] = HEAP16[$219 + 6 >> 1] | 0;
 HEAP16[$218 + 8 >> 1] = HEAP16[$219 + 8 >> 1] | 0;
 do if (!($158 & 8192)) {
  if (!($158 & 6291456)) $231 = $158; else {
   if (_png_gamma_significant(HEAP32[$0 >> 2] | 0) | 0) {
    label = 65;
    break;
   }
   if (_png_gamma_significant(HEAP32[$3 >> 2] | 0) | 0) {
    label = 65;
    break;
   }
   $231 = HEAP32[$18 >> 2] | 0;
  }
  if ($231 & 128) {
   if (_png_gamma_significant(HEAP32[$0 >> 2] | 0) | 0) {
    label = 65;
    break;
   }
   if (_png_gamma_significant(HEAP32[$3 >> 2] | 0) | 0) {
    label = 65;
    break;
   }
   if ((HEAP8[$png_ptr + 446 >> 0] | 0) == 3) if (_png_gamma_significant(HEAP32[$png_ptr + 448 >> 2] | 0) | 0) {
    label = 65;
    break;
   }
  }
  $246 = HEAP32[$18 >> 2] | 0;
  if (!($246 & 8388608)) $561 = $246; else {
   if (_png_gamma_significant(HEAP32[$3 >> 2] | 0) | 0) {
    label = 65;
    break;
   }
   $561 = HEAP32[$18 >> 2] | 0;
  }
  if (!($561 & 128)) $646 = $561; else if ((HEAP8[$63 >> 0] | 0) == 3) {
   $566 = HEAP16[$png_ptr + 428 >> 1] | 0;
   $567 = $566 & 65535;
   $569 = HEAP32[$png_ptr + 416 >> 2] | 0;
   $571 = HEAP16[$png_ptr + 454 >> 1] | 0;
   $572 = $571 & 255;
   $574 = HEAP16[$png_ptr + 456 >> 1] | 0;
   $575 = $574 & 255;
   $577 = HEAP16[$png_ptr + 458 >> 1] | 0;
   $578 = $577 & 255;
   if (!($566 << 16 >> 16)) $644 = $561; else {
    $580 = $png_ptr + 528 | 0;
    $582 = $571 & 255;
    $584 = $574 & 255;
    $586 = $577 & 255;
    $i8$033 = 0;
    do {
     $589 = HEAP8[(HEAP32[$580 >> 2] | 0) + $i8$033 >> 0] | 0;
     if (!($589 << 24 >> 24)) {
      HEAP8[$569 + ($i8$033 * 3 | 0) >> 0] = $572;
      HEAP8[$569 + ($i8$033 * 3 | 0) + 1 >> 0] = $575;
      HEAP8[$569 + ($i8$033 * 3 | 0) + 2 >> 0] = $578;
     } else if ($589 << 24 >> 24 != -1) {
      $593 = $569 + ($i8$033 * 3 | 0) | 0;
      $596 = $589 & 255;
      $601 = (Math_imul($596 ^ 255, $582) | 0) + 128 + (Math_imul(HEAPU8[$593 >> 0] | 0, $596) | 0) | 0;
      HEAP8[$593 >> 0] = (($601 >>> 8 & 255) + $601 | 0) >>> 8;
      $607 = $569 + ($i8$033 * 3 | 0) + 1 | 0;
      $613 = HEAPU8[(HEAP32[$580 >> 2] | 0) + $i8$033 >> 0] | 0;
      $618 = (Math_imul($613, HEAPU8[$607 >> 0] | 0) | 0) + 128 + (Math_imul($613 ^ 255, $584) | 0) | 0;
      HEAP8[$607 >> 0] = (($618 >>> 8 & 255) + $618 | 0) >>> 8;
      $624 = $569 + ($i8$033 * 3 | 0) + 2 | 0;
      $630 = HEAPU8[(HEAP32[$580 >> 2] | 0) + $i8$033 >> 0] | 0;
      $635 = (Math_imul($630, HEAPU8[$624 >> 0] | 0) | 0) + 128 + (Math_imul($630 ^ 255, $586) | 0) | 0;
      HEAP8[$624 >> 0] = (($635 >>> 8 & 255) + $635 | 0) >>> 8;
     }
     $i8$033 = $i8$033 + 1 | 0;
    } while (($i8$033 | 0) < ($567 | 0));
    $644 = HEAP32[$18 >> 2] | 0;
   }
   $643 = $644 & -129;
   HEAP32[$18 >> 2] = $643;
   $646 = $643;
  } else $646 = $561;
 } else label = 65; while (0);
 do if ((label | 0) == 65) {
  _png_build_gamma_table($png_ptr, HEAPU8[$png_ptr + 436 >> 0] | 0);
  $255 = HEAP32[$18 >> 2] | 0;
  if (!($255 & 128)) {
   if ((HEAP8[$63 >> 0] | 0) != 3) {
    $646 = $255;
    break;
   }
   if (!(($255 & 4096 | 0) == 0 | ($255 & 6291456 | 0) == 0)) {
    $646 = $255;
    break;
   }
   $532 = HEAP32[$png_ptr + 416 >> 2] | 0;
   $534 = HEAP16[$png_ptr + 420 >> 1] | 0;
   $535 = $534 & 65535;
   if (!($534 << 16 >> 16)) $559 = $255; else {
    $537 = $png_ptr + 492 | 0;
    $i7$035 = 0;
    do {
     $538 = $532 + ($i7$035 * 3 | 0) | 0;
     HEAP8[$538 >> 0] = HEAP8[(HEAP32[$537 >> 2] | 0) + (HEAPU8[$538 >> 0] | 0) >> 0] | 0;
     $544 = $532 + ($i7$035 * 3 | 0) + 1 | 0;
     HEAP8[$544 >> 0] = HEAP8[(HEAP32[$537 >> 2] | 0) + (HEAPU8[$544 >> 0] | 0) >> 0] | 0;
     $550 = $532 + ($i7$035 * 3 | 0) + 2 | 0;
     HEAP8[$550 >> 0] = HEAP8[(HEAP32[$537 >> 2] | 0) + (HEAPU8[$550 >> 0] | 0) >> 0] | 0;
     $i7$035 = $i7$035 + 1 | 0;
    } while (($i7$035 | 0) < ($535 | 0));
    $559 = HEAP32[$18 >> 2] | 0;
   }
   $558 = $559 & -8193;
   HEAP32[$18 >> 2] = $558;
   $646 = $558;
   break;
  }
  if ($255 & 6291456) _png_warning($png_ptr, 75008);
  if ((HEAP8[$63 >> 0] | 0) != 3) {
   $459 = $png_ptr + 446 | 0;
   $461 = HEAPU8[$459 >> 0] | 0;
   if (($461 | 0) == 1) {
    $g3$0 = HEAP32[$3 >> 2] | 0;
    $gs4$0 = 1e5;
   } else if (($461 | 0) == 2) {
    $464 = _png_reciprocal(HEAP32[$0 >> 2] | 0) | 0;
    $g3$0 = $464;
    $gs4$0 = _png_reciprocal2(HEAP32[$0 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
   } else if (($461 | 0) == 3) {
    $468 = $png_ptr + 448 | 0;
    $470 = _png_reciprocal(HEAP32[$468 >> 2] | 0) | 0;
    $g3$0 = $470;
    $gs4$0 = _png_reciprocal2(HEAP32[$468 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
   } else _png_error($png_ptr, 75064);
   $474 = _png_gamma_significant($g3$0) | 0;
   $475 = _png_gamma_significant($gs4$0) | 0;
   $476 = ($474 | 0) != 0;
   if ($476) HEAP16[$png_ptr + 470 >> 1] = _png_gamma_correct($png_ptr, HEAPU16[$png_ptr + 460 >> 1] | 0, $g3$0) | 0;
   $482 = ($475 | 0) != 0;
   if ($482) {
    $483 = $png_ptr + 460 | 0;
    HEAP16[$483 >> 1] = _png_gamma_correct($png_ptr, HEAPU16[$483 >> 1] | 0, $gs4$0) | 0;
   }
   $487 = $png_ptr + 454 | 0;
   $488 = HEAP16[$487 >> 1] | 0;
   $489 = $png_ptr + 456 | 0;
   if ($488 << 16 >> 16 == (HEAP16[$489 >> 1] | 0)) {
    $492 = $png_ptr + 458 | 0;
    if ($488 << 16 >> 16 == (HEAP16[$492 >> 1] | 0)) if ($488 << 16 >> 16 == (HEAP16[$png_ptr + 460 >> 1] | 0)) {
     $521 = HEAP16[$png_ptr + 470 >> 1] | 0;
     HEAP16[$png_ptr + 468 >> 1] = $521;
     HEAP16[$png_ptr + 466 >> 1] = $521;
     HEAP16[$png_ptr + 464 >> 1] = $521;
     HEAP16[$492 >> 1] = $488;
     HEAP16[$489 >> 1] = $488;
     HEAP16[$487 >> 1] = $488;
    } else label = 103; else label = 103;
   } else label = 103;
   if ((label | 0) == 103) {
    if ($476) {
     HEAP16[$png_ptr + 464 >> 1] = _png_gamma_correct($png_ptr, $488 & 65535, $g3$0) | 0;
     HEAP16[$png_ptr + 466 >> 1] = _png_gamma_correct($png_ptr, HEAPU16[$489 >> 1] | 0, $g3$0) | 0;
     HEAP16[$png_ptr + 468 >> 1] = _png_gamma_correct($png_ptr, HEAPU16[$png_ptr + 458 >> 1] | 0, $g3$0) | 0;
    }
    if ($482) {
     HEAP16[$487 >> 1] = _png_gamma_correct($png_ptr, HEAPU16[$487 >> 1] | 0, $gs4$0) | 0;
     HEAP16[$489 >> 1] = _png_gamma_correct($png_ptr, HEAPU16[$489 >> 1] | 0, $gs4$0) | 0;
     $516 = $png_ptr + 458 | 0;
     HEAP16[$516 >> 1] = _png_gamma_correct($png_ptr, HEAPU16[$516 >> 1] | 0, $gs4$0) | 0;
    }
   }
   HEAP8[$459 >> 0] = 1;
   $646 = HEAP32[$18 >> 2] | 0;
   break;
  }
  $263 = HEAP32[$png_ptr + 416 >> 2] | 0;
  $265 = HEAP16[$png_ptr + 420 >> 1] | 0;
  $266 = $265 & 65535;
  $268 = HEAP8[$png_ptr + 446 >> 0] | 0;
  do if ($268 << 24 >> 24 == 2) {
   $272 = HEAPU16[$png_ptr + 454 >> 1] | 0;
   $274 = HEAP32[$png_ptr + 492 >> 2] | 0;
   $279 = HEAPU16[$png_ptr + 456 >> 1] | 0;
   $284 = HEAPU16[$png_ptr + 458 >> 1] | 0;
   $288 = HEAP32[$png_ptr + 504 >> 2] | 0;
   $back$sroa$0$1 = HEAP8[$274 + $272 >> 0] | 0;
   $back$sroa$1$1 = HEAP8[$274 + $279 >> 0] | 0;
   $back$sroa$2$1 = HEAP8[$274 + $284 >> 0] | 0;
   $back_1$sroa$0$0 = HEAP8[$288 + $272 >> 0] | 0;
   $back_1$sroa$1$0 = HEAP8[$288 + $279 >> 0] | 0;
   $back_1$sroa$2$0 = HEAP8[$288 + $284 >> 0] | 0;
  } else {
   $295 = $268 & 255;
   if (($295 | 0) == 3) {
    $302 = $png_ptr + 448 | 0;
    $304 = _png_reciprocal(HEAP32[$302 >> 2] | 0) | 0;
    $g$0 = $304;
    $gs$0 = _png_reciprocal2(HEAP32[$302 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
   } else if (($295 | 0) == 1) {
    $g$0 = HEAP32[$3 >> 2] | 0;
    $gs$0 = 1e5;
   } else if (($295 | 0) == 2) {
    $298 = _png_reciprocal(HEAP32[$0 >> 2] | 0) | 0;
    $g$0 = $298;
    $gs$0 = _png_reciprocal2(HEAP32[$0 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
   } else {
    $g$0 = 1e5;
    $gs$0 = 1e5;
   }
   $309 = (_png_gamma_significant($gs$0) | 0) == 0;
   $310 = $png_ptr + 454 | 0;
   $311 = HEAP16[$310 >> 1] | 0;
   if ($309) {
    $back$sroa$0$0 = $311 & 255;
    $back$sroa$1$0 = HEAP16[$png_ptr + 456 >> 1] & 255;
    $back$sroa$2$0 = HEAP16[$png_ptr + 458 >> 1] & 255;
   } else {
    $313 = _png_gamma_8bit_correct($311 & 65535, $gs$0) | 0;
    $317 = _png_gamma_8bit_correct(HEAPU16[$png_ptr + 456 >> 1] | 0, $gs$0) | 0;
    $back$sroa$0$0 = $313;
    $back$sroa$1$0 = $317;
    $back$sroa$2$0 = _png_gamma_8bit_correct(HEAPU16[$png_ptr + 458 >> 1] | 0, $gs$0) | 0;
   }
   $330 = (_png_gamma_significant($g$0) | 0) == 0;
   $331 = HEAP16[$310 >> 1] | 0;
   if ($330) {
    $back$sroa$0$1 = $back$sroa$0$0;
    $back$sroa$1$1 = $back$sroa$1$0;
    $back$sroa$2$1 = $back$sroa$2$0;
    $back_1$sroa$0$0 = $331 & 255;
    $back_1$sroa$1$0 = HEAP16[$png_ptr + 456 >> 1] & 255;
    $back_1$sroa$2$0 = HEAP16[$png_ptr + 458 >> 1] & 255;
    break;
   } else {
    $333 = _png_gamma_8bit_correct($331 & 65535, $g$0) | 0;
    $337 = _png_gamma_8bit_correct(HEAPU16[$png_ptr + 456 >> 1] | 0, $g$0) | 0;
    $back$sroa$0$1 = $back$sroa$0$0;
    $back$sroa$1$1 = $back$sroa$1$0;
    $back$sroa$2$1 = $back$sroa$2$0;
    $back_1$sroa$0$0 = $333;
    $back_1$sroa$1$0 = $337;
    $back_1$sroa$2$0 = _png_gamma_8bit_correct(HEAPU16[$png_ptr + 458 >> 1] | 0, $g$0) | 0;
    break;
   }
  } while (0);
  if ($265 << 16 >> 16) {
   $350 = $png_ptr + 428 | 0;
   $351 = $png_ptr + 528 | 0;
   $352 = $png_ptr + 504 | 0;
   $353 = $back_1$sroa$0$0 & 255;
   $354 = $png_ptr + 500 | 0;
   $355 = $back_1$sroa$1$0 & 255;
   $356 = $back_1$sroa$2$0 & 255;
   $357 = $png_ptr + 492 | 0;
   $i$039 = 0;
   do {
    do if (($i$039 | 0) < (HEAPU16[$350 >> 1] | 0)) {
     $363 = HEAP8[(HEAP32[$351 >> 2] | 0) + $i$039 >> 0] | 0;
     if ($363 << 24 >> 24 == -1) label = 88; else {
      $366 = $263 + ($i$039 * 3 | 0) | 0;
      if (!($363 << 24 >> 24)) {
       HEAP8[$366 >> 0] = $back$sroa$0$1;
       HEAP8[$263 + ($i$039 * 3 | 0) + 1 >> 0] = $back$sroa$1$1;
       HEAP8[$263 + ($i$039 * 3 | 0) + 2 >> 0] = $back$sroa$2$1;
       break;
      } else {
       $375 = $363 & 255;
       $380 = (Math_imul($375 ^ 255, $353) | 0) + 128 + (Math_imul(HEAPU8[(HEAP32[$352 >> 2] | 0) + (HEAPU8[$366 >> 0] | 0) >> 0] | 0, $375) | 0) | 0;
       HEAP8[$366 >> 0] = HEAP8[(HEAP32[$354 >> 2] | 0) + ((($380 >>> 8 & 255) + $380 | 0) >>> 8 & 255) >> 0] | 0;
       $389 = $263 + ($i$039 * 3 | 0) + 1 | 0;
       $399 = HEAPU8[(HEAP32[$351 >> 2] | 0) + $i$039 >> 0] | 0;
       $404 = (Math_imul($399, HEAPU8[(HEAP32[$352 >> 2] | 0) + (HEAPU8[$389 >> 0] | 0) >> 0] | 0) | 0) + 128 + (Math_imul($399 ^ 255, $355) | 0) | 0;
       HEAP8[$389 >> 0] = HEAP8[(HEAP32[$354 >> 2] | 0) + ((($404 >>> 8 & 255) + $404 | 0) >>> 8 & 255) >> 0] | 0;
       $413 = $263 + ($i$039 * 3 | 0) + 2 | 0;
       $423 = HEAPU8[(HEAP32[$351 >> 2] | 0) + $i$039 >> 0] | 0;
       $428 = (Math_imul($423, HEAPU8[(HEAP32[$352 >> 2] | 0) + (HEAPU8[$413 >> 0] | 0) >> 0] | 0) | 0) + 128 + (Math_imul($423 ^ 255, $356) | 0) | 0;
       HEAP8[$413 >> 0] = HEAP8[(HEAP32[$354 >> 2] | 0) + ((($428 >>> 8 & 255) + $428 | 0) >>> 8 & 255) >> 0] | 0;
       break;
      }
     }
    } else label = 88; while (0);
    if ((label | 0) == 88) {
     label = 0;
     $437 = $263 + ($i$039 * 3 | 0) | 0;
     HEAP8[$437 >> 0] = HEAP8[(HEAP32[$357 >> 2] | 0) + (HEAPU8[$437 >> 0] | 0) >> 0] | 0;
     $443 = $263 + ($i$039 * 3 | 0) + 1 | 0;
     HEAP8[$443 >> 0] = HEAP8[(HEAP32[$357 >> 2] | 0) + (HEAPU8[$443 >> 0] | 0) >> 0] | 0;
     $449 = $263 + ($i$039 * 3 | 0) + 2 | 0;
     HEAP8[$449 >> 0] = HEAP8[(HEAP32[$357 >> 2] | 0) + (HEAPU8[$449 >> 0] | 0) >> 0] | 0;
    }
    $i$039 = $i$039 + 1 | 0;
   } while (($i$039 | 0) < ($266 | 0));
  }
  $458 = HEAP32[$18 >> 2] & -8321;
  HEAP32[$18 >> 2] = $458;
  $646 = $458;
 } while (0);
 if (($646 & 4104 | 0) != 8) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP8[$63 >> 0] | 0) != 3) {
  STACKTOP = sp;
  return;
 }
 $651 = HEAP16[$png_ptr + 420 >> 1] | 0;
 $652 = $651 & 65535;
 $654 = HEAP8[$png_ptr + 516 >> 0] | 0;
 $656 = 8 - ($654 & 255) | 0;
 HEAP32[$18 >> 2] = $646 & -9;
 if (!($654 << 24 >> 24 == 0 | ($656 | 0) < 1 | $651 << 16 >> 16 == 0)) {
  $659 = $png_ptr + 416 | 0;
  $i14$031 = 0;
  do {
   $661 = (HEAP32[$659 >> 2] | 0) + ($i14$031 * 3 | 0) | 0;
   HEAP8[$661 >> 0] = (HEAPU8[$661 >> 0] | 0) >>> $656;
   $i14$031 = $i14$031 + 1 | 0;
  } while (($i14$031 | 0) < ($652 | 0));
 }
 $669 = HEAP8[$png_ptr + 517 >> 0] | 0;
 $671 = 8 - ($669 & 255) | 0;
 if (!($669 << 24 >> 24 == 0 | ($671 | 0) < 1 | $651 << 16 >> 16 == 0)) {
  $673 = $png_ptr + 416 | 0;
  $i14$127 = 0;
  do {
   $675 = (HEAP32[$673 >> 2] | 0) + ($i14$127 * 3 | 0) + 1 | 0;
   HEAP8[$675 >> 0] = (HEAPU8[$675 >> 0] | 0) >>> $671;
   $i14$127 = $i14$127 + 1 | 0;
  } while (($i14$127 | 0) < ($652 | 0));
 }
 $683 = HEAP8[$png_ptr + 518 >> 0] | 0;
 $685 = 8 - ($683 & 255) | 0;
 if ($683 << 24 >> 24 == 0 | ($685 | 0) < 1 | $651 << 16 >> 16 == 0) {
  STACKTOP = sp;
  return;
 }
 $687 = $png_ptr + 416 | 0;
 $i14$224 = 0;
 do {
  $689 = (HEAP32[$687 >> 2] | 0) + ($i14$224 * 3 | 0) + 2 | 0;
  HEAP8[$689 >> 0] = (HEAPU8[$689 >> 0] | 0) >>> $685;
  $i14$224 = $i14$224 + 1 | 0;
 } while (($i14$224 | 0) < ($652 | 0));
 STACKTOP = sp;
 return;
}

function _mz_zip_reader_read_central_dir($pZip, $flags) {
 $pZip = $pZip | 0;
 $flags = $flags | 0;
 var $$$i$i = 0, $$$i19$i = 0, $$$i38$i = 0, $$$i57$i = 0, $$0 = 0, $$extract$t34 = 0, $$extract$t37 = 0, $$idx$val$i = 0, $$idx1$val$i = 0, $$idx2$val$i = 0, $$idx3$val$i = 0, $$idx4$val$i = 0, $$idx5$val$i = 0, $$idx6$val$i = 0, $$idx7$val$i = 0, $$sum4$i$i = 0, $$sum4$i12$i = 0, $$sum4$i31$i = 0, $$sum4$i50$i = 0, $$sum6$i$i = 0, $$sum6$i13$i = 0, $$sum6$i32$i = 0, $$sum6$i51$i = 0, $1 = 0, $107 = 0, $113 = 0, $114 = 0, $116 = 0, $125 = 0, $126 = 0, $13 = 0, $131 = 0, $137 = 0, $14 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $149 = 0, $156 = 0, $161 = 0, $162 = 0, $163 = 0, $167 = 0, $174 = 0, $177 = 0, $178 = 0, $179 = 0, $183 = 0, $189 = 0, $19 = 0, $191 = 0, $194 = 0, $195 = 0, $196 = 0, $2 = 0, $20 = 0, $200 = 0, $206 = 0, $208 = 0, $21 = 0, $219 = 0, $22 = 0, $220 = 0, $23 = 0, $266 = 0, $284 = 0, $29 = 0, $31 = 0, $316 = 0, $336 = 0, $337 = 0, $339 = 0, $340 = 0, $341 = 0, $346 = 0, $35 = 0, $378 = 0, $383 = 0, $385 = 0, $387 = 0, $389 = 0, $392 = 0, $395 = 0, $396 = 0, $4 = 0, $403 = 0, $405 = 0, $413 = 0, $421 = 0, $422 = 0, $423 = 0, $425 = 0, $428 = 0, $429 = 0, $432 = 0, $433 = 0, $436 = 0, $440 = 0, $446 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $453 = 0, $455 = 0, $463 = 0, $471 = 0, $472 = 0, $473 = 0, $475 = 0, $478 = 0, $479 = 0, $482 = 0, $483 = 0, $486 = 0, $490 = 0, $501 = 0, $502 = 0, $505 = 0, $506 = 0, $513 = 0, $515 = 0, $523 = 0, $531 = 0, $532 = 0, $533 = 0, $535 = 0, $538 = 0, $539 = 0, $542 = 0, $543 = 0, $546 = 0, $550 = 0, $556 = 0, $558 = 0, $559 = 0, $560 = 0, $562 = 0, $564 = 0, $572 = 0, $580 = 0, $581 = 0, $582 = 0, $584 = 0, $587 = 0, $588 = 0, $591 = 0, $592 = 0, $595 = 0, $599 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $71 = 0, $73 = 0, $76 = 0, $77 = 0, $78 = 0, $84 = 0, $85 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $buf_u32 = 0, $end$03$i = 0, $end$04$i = 0, $i$025 = 0, $i1$021 = 0, $l$1$i$i = 0, $l$1$i22$i = 0, $l$1$i41$i = 0, $l$1$i60$i = 0, $n2$022 = 0, $p$023 = 0, $pL$0$lcssa$i$i = 0, $pL$0$lcssa$i$ph$i = 0, $pL$0$lcssa$i21$i = 0, $pL$0$lcssa$i21$ph$i = 0, $pL$0$lcssa$i40$i = 0, $pL$0$lcssa$i40$ph$i = 0, $pL$0$lcssa$i59$i = 0, $pL$0$lcssa$i59$ph$i = 0, $pL$03$i$i = 0, $pL$03$i16$i = 0, $pL$03$i35$i = 0, $pL$03$i54$i = 0, $pR$02$i$i = 0, $pR$02$i17$i = 0, $pR$02$i36$i = 0, $pR$02$i55$i = 0, $pZip$idx$val = 0, $pZip$idx10$val = 0, $r$1$i$i = 0, $r$1$i23$i = 0, $r$1$i42$i = 0, $r$1$i61$i = 0, $root$09$i = 0, $root2$02$i = 0, $start$012$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4096 | 0;
 $buf_u32 = sp;
 $1 = ($flags & 2048 | 0) == 0;
 $2 = $pZip;
 $4 = HEAP32[$2 >> 2] | 0;
 $7 = HEAP32[$2 + 4 >> 2] | 0;
 if ($7 >>> 0 < 0 | ($7 | 0) == 0 & $4 >>> 0 < 22) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $13 = _i64Add($4 | 0, $7 | 0, -4096, -1) | 0;
 $14 = tempRet0;
 $19 = ($14 | 0) > 0 | ($14 | 0) == 0 & $13 >>> 0 > 0;
 $20 = $19 ? $13 : 0;
 $21 = $19 ? $14 : 0;
 $22 = _i64Subtract($4 | 0, $7 | 0, $20 | 0, $21 | 0) | 0;
 $23 = tempRet0;
 $$extract$t34 = $23 >>> 0 > 0 | ($23 | 0) == 0 & $22 >>> 0 > 4096 ? 4096 : $22;
 $29 = $pZip + 44 | 0;
 $31 = $pZip + 52 | 0;
 if ((FUNCTION_TABLE_iiiiii[HEAP32[$29 >> 2] & 15](HEAP32[$31 >> 2] | 0, $20, $21, $buf_u32, $$extract$t34) | 0) == ($$extract$t34 | 0)) {
  $$extract$t37 = $$extract$t34;
  $60 = $20;
  $61 = $21;
 } else {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 L6 : while (1) {
  $35 = $$extract$t37 + -4 | 0;
  if (($35 | 0) > -1) {
   $i$025 = $35;
   while (1) {
    if (((HEAPU8[$buf_u32 + ($i$025 + 1) >> 0] | 0) << 8 | (HEAPU8[$buf_u32 + $i$025 >> 0] | 0) | (HEAPU8[$buf_u32 + ($i$025 + 2) >> 0] | 0) << 16 | (HEAPU8[$buf_u32 + ($i$025 + 3) >> 0] | 0) << 24 | 0) == 101010256) {
     label = 6;
     break L6;
    }
    if (($i$025 | 0) > 0) $i$025 = $i$025 + -1 | 0; else break;
   }
  }
  if (($60 | 0) == 0 & ($61 | 0) == 0) {
   $$0 = 0;
   label = 91;
   break;
  }
  $71 = $pZip;
  $73 = HEAP32[$71 >> 2] | 0;
  $76 = HEAP32[$71 + 4 >> 2] | 0;
  $77 = _i64Subtract($73 | 0, $76 | 0, $60 | 0, $61 | 0) | 0;
  $78 = tempRet0;
  if ($78 >>> 0 > 0 | ($78 | 0) == 0 & $77 >>> 0 > 65556) {
   $$0 = 0;
   label = 91;
   break;
  }
  $84 = _i64Add($60 | 0, $61 | 0, -4093, -1) | 0;
  $85 = tempRet0;
  $90 = ($85 | 0) > 0 | ($85 | 0) == 0 & $84 >>> 0 > 0;
  $91 = $90 ? $84 : 0;
  $92 = $90 ? $85 : 0;
  $93 = _i64Subtract($73 | 0, $76 | 0, $91 | 0, $92 | 0) | 0;
  $94 = tempRet0;
  $$extract$t37 = $94 >>> 0 > 0 | ($94 | 0) == 0 & $93 >>> 0 > 4096 ? 4096 : $93;
  if ((FUNCTION_TABLE_iiiiii[HEAP32[$29 >> 2] & 15](HEAP32[$31 >> 2] | 0, $91, $92, $buf_u32, $$extract$t37) | 0) != ($$extract$t37 | 0)) {
   $$0 = 0;
   label = 91;
   break;
  } else {
   $60 = $91;
   $61 = $92;
  }
 }
 if ((label | 0) == 6) {
  $62 = _i64Add($i$025 | 0, (($i$025 | 0) < 0) << 31 >> 31 | 0, $60 | 0, $61 | 0) | 0;
  if ((FUNCTION_TABLE_iiiiii[HEAP32[$29 >> 2] & 15](HEAP32[$31 >> 2] | 0, $62, tempRet0, $buf_u32, 22) | 0) != 22) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  if ((HEAP32[$buf_u32 >> 2] | 0) != 101010256) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $107 = HEAP16[$buf_u32 + 10 >> 1] | 0;
  $113 = (($107 & 65535) >>> 8 & 65535) << 8 | $107 & 255;
  $114 = $pZip + 16 | 0;
  HEAP32[$114 >> 2] = $113;
  $116 = HEAP16[$buf_u32 + 8 >> 1] | 0;
  if (($113 | 0) != ((($116 & 65535) >>> 8 & 65535) << 8 | $116 & 255 | 0)) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $125 = HEAP32[$buf_u32 + 4 >> 2] | 0;
  $126 = $125 & 65535;
  $131 = $125 >>> 24 << 8 | $125 >>> 16 & 255;
  if ($131 | $126) if (!(($126 | 0) == 1 & ($131 | 0) == 1)) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $137 = HEAP32[$buf_u32 + 12 >> 2] | 0;
  if ($137 >>> 0 < ($113 * 46 | 0) >>> 0) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $141 = HEAP32[$buf_u32 + 16 >> 2] | 0;
  $142 = _i64Add($141 | 0, 0, $137 | 0, 0) | 0;
  $143 = tempRet0;
  $144 = $pZip;
  $149 = HEAP32[$144 + 4 >> 2] | 0;
  if ($143 >>> 0 > $149 >>> 0 | (($143 | 0) == ($149 | 0) ? $142 >>> 0 > (HEAP32[$144 >> 2] | 0) >>> 0 : 0)) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $156 = $pZip + 8 | 0;
  HEAP32[$156 >> 2] = $141;
  HEAP32[$156 + 4 >> 2] = 0;
  L36 : do if (!$113) $pZip$idx$val = 0; else {
   $161 = $pZip + 56 | 0;
   $162 = HEAP32[$161 >> 2] | 0;
   $163 = $162 + 8 | 0;
   do if ((HEAP32[$163 >> 2] | 0) >>> 0 < $137 >>> 0) {
    $167 = HEAP32[$162 + 12 >> 2] | 0;
    if (!$167) ___assert_fail(94504, 94472, 2998, 94528);
    $174 = FUNCTION_TABLE_iiiii[HEAP32[$pZip + 36 >> 2] & 7](HEAP32[$pZip + 40 >> 2] | 0, HEAP32[$162 >> 2] | 0, $167, $137) | 0;
    if (!$174) {
     $$0 = 0;
     STACKTOP = sp;
     return $$0 | 0;
    } else {
     HEAP32[$162 >> 2] = $174;
     HEAP32[$163 >> 2] = $137;
     $179 = HEAP32[$161 >> 2] | 0;
     break;
    }
   } else $179 = $162; while (0);
   HEAP32[$162 + 4 >> 2] = $137;
   $177 = HEAP32[$114 >> 2] | 0;
   $178 = $179 + 24 | 0;
   do if ((HEAP32[$178 >> 2] | 0) >>> 0 < $177 >>> 0) {
    $183 = HEAP32[$179 + 28 >> 2] | 0;
    if (!$183) ___assert_fail(94504, 94472, 2998, 94528);
    $189 = $179 + 16 | 0;
    $191 = FUNCTION_TABLE_iiiii[HEAP32[$pZip + 36 >> 2] & 7](HEAP32[$pZip + 40 >> 2] | 0, HEAP32[$189 >> 2] | 0, $183, $177) | 0;
    if (!$191) {
     $$0 = 0;
     STACKTOP = sp;
     return $$0 | 0;
    } else {
     HEAP32[$189 >> 2] = $191;
     HEAP32[$178 >> 2] = $177;
     break;
    }
   } while (0);
   HEAP32[$179 + 20 >> 2] = $177;
   if ($1) {
    $194 = HEAP32[$161 >> 2] | 0;
    $195 = HEAP32[$114 >> 2] | 0;
    $196 = $194 + 40 | 0;
    do if ((HEAP32[$196 >> 2] | 0) >>> 0 < $195 >>> 0) {
     $200 = HEAP32[$194 + 44 >> 2] | 0;
     if (!$200) ___assert_fail(94504, 94472, 2998, 94528);
     $206 = $194 + 32 | 0;
     $208 = FUNCTION_TABLE_iiiii[HEAP32[$pZip + 36 >> 2] & 7](HEAP32[$pZip + 40 >> 2] | 0, HEAP32[$206 >> 2] | 0, $200, $195) | 0;
     if (!$208) {
      $$0 = 0;
      STACKTOP = sp;
      return $$0 | 0;
     } else {
      HEAP32[$206 >> 2] = $208;
      HEAP32[$196 >> 2] = $195;
      break;
     }
    } while (0);
    HEAP32[$194 + 36 >> 2] = $195;
   }
   if ((FUNCTION_TABLE_iiiiii[HEAP32[$29 >> 2] & 15](HEAP32[$31 >> 2] | 0, $141, 0, HEAP32[HEAP32[$161 >> 2] >> 2] | 0, $137) | 0) != ($137 | 0)) {
    $$0 = 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
   if (!(HEAP32[$114 >> 2] | 0)) $pZip$idx$val = 0; else {
    $219 = HEAP32[$161 >> 2] | 0;
    $220 = HEAP32[$219 >> 2] | 0;
    $i1$021 = 0;
    $n2$022 = $137;
    $p$023 = $220;
    while (1) {
     if ($n2$022 >>> 0 < 46) {
      $$0 = 0;
      label = 91;
      break;
     }
     if (((HEAPU8[$p$023 + 1 >> 0] | 0) << 8 | (HEAPU8[$p$023 >> 0] | 0) | (HEAPU8[$p$023 + 2 >> 0] | 0) << 16 | (HEAPU8[$p$023 + 3 >> 0] | 0) << 24 | 0) != 33639248) {
      $$0 = 0;
      label = 91;
      break;
     }
     HEAP32[(HEAP32[$219 + 16 >> 2] | 0) + ($i1$021 << 2) >> 2] = $p$023 - $220;
     if ($1) HEAP32[(HEAP32[$219 + 32 >> 2] | 0) + ($i1$021 << 2) >> 2] = $i1$021;
     $266 = (HEAPU8[$p$023 + 21 >> 0] | 0) << 8 | (HEAPU8[$p$023 + 20 >> 0] | 0) | (HEAPU8[$p$023 + 22 >> 0] | 0) << 16 | (HEAPU8[$p$023 + 23 >> 0] | 0) << 24;
     $284 = (HEAPU8[$p$023 + 25 >> 0] | 0) << 8 | (HEAPU8[$p$023 + 24 >> 0] | 0) | (HEAPU8[$p$023 + 26 >> 0] | 0) << 16 | (HEAPU8[$p$023 + 27 >> 0] | 0) << 24;
     if (!(($284 | 0) == ($266 | 0) ? 1 : ((HEAPU8[$p$023 + 11 >> 0] | 0) << 8 | (HEAPU8[$p$023 + 10 >> 0] | 0) | (HEAPU8[$p$023 + 12 >> 0] | 0) << 16 | (HEAPU8[$p$023 + 13 >> 0] | 0) << 24 | 0) != 0)) {
      $$0 = 0;
      label = 91;
      break;
     }
     if (($284 | 0) != 0 & ($266 | 0) == 0 | ($284 | 0) == -1 | ($266 | 0) == -1) {
      $$0 = 0;
      label = 91;
      break;
     }
     $316 = (HEAPU8[$p$023 + 35 >> 0] | 0) << 8 | (HEAPU8[$p$023 + 34 >> 0] | 0);
     if (($316 | 0) != ($126 | 0) & ($316 | 0) != 1) {
      $$0 = 0;
      label = 91;
      break;
     }
     $336 = (HEAPU8[$p$023 + 43 >> 0] | 0) << 8 | (HEAPU8[$p$023 + 42 >> 0] | 0) | (HEAPU8[$p$023 + 44 >> 0] | 0) << 16 | (HEAPU8[$p$023 + 45 >> 0] | 0) << 24;
     $337 = _i64Add($266 | 0, 0, 30, 0) | 0;
     $339 = _i64Add($337 | 0, tempRet0 | 0, $336 | 0, 0) | 0;
     $340 = tempRet0;
     $341 = $pZip;
     $346 = HEAP32[$341 + 4 >> 2] | 0;
     if ($340 >>> 0 > $346 >>> 0 | (($340 | 0) == ($346 | 0) ? $339 >>> 0 > (HEAP32[$341 >> 2] | 0) >>> 0 : 0)) {
      $$0 = 0;
      label = 91;
      break;
     }
     $378 = ((HEAPU8[$p$023 + 29 >> 0] | 0) << 8 | (HEAPU8[$p$023 + 28 >> 0] | 0)) + 46 + ((HEAPU8[$p$023 + 31 >> 0] | 0) << 8 | (HEAPU8[$p$023 + 30 >> 0] | 0)) + ((HEAPU8[$p$023 + 33 >> 0] | 0) << 8 | (HEAPU8[$p$023 + 32 >> 0] | 0)) | 0;
     if ($378 >>> 0 > $n2$022 >>> 0) {
      $$0 = 0;
      label = 91;
      break;
     }
     $i1$021 = $i1$021 + 1 | 0;
     $383 = HEAP32[$114 >> 2] | 0;
     if ($i1$021 >>> 0 >= $383 >>> 0) {
      $pZip$idx$val = $383;
      break L36;
     } else {
      $n2$022 = $n2$022 - $378 | 0;
      $p$023 = $p$023 + $378 | 0;
     }
    }
    if ((label | 0) == 91) {
     STACKTOP = sp;
     return $$0 | 0;
    }
   }
  } while (0);
  if (!$1) {
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $pZip$idx10$val = HEAP32[$pZip + 56 >> 2] | 0;
  $385 = $pZip$idx10$val + 16 | 0;
  $387 = HEAP32[$pZip$idx10$val + 32 >> 2] | 0;
  $389 = $pZip$idx$val + -2 >> 1;
  if (($389 | 0) > -1) {
   $start$012$i = $389;
   while (1) {
    $392 = $start$012$i << 1 | 1;
    L100 : do if (($392 | 0) < ($pZip$idx$val | 0)) {
     $396 = $392;
     $root$09$i = $start$012$i;
     do {
      $395 = $396 + 1 | 0;
      do if (($395 | 0) < ($pZip$idx$val | 0)) {
       $$idx6$val$i = HEAP32[$pZip$idx10$val >> 2] | 0;
       $$idx7$val$i = HEAP32[$385 >> 2] | 0;
       $403 = HEAP32[$$idx7$val$i + (HEAP32[$387 + ($396 << 2) >> 2] << 2) >> 2] | 0;
       $405 = HEAP32[$$idx7$val$i + (HEAP32[$387 + ($395 << 2) >> 2] << 2) >> 2] | 0;
       $413 = (HEAPU8[$$idx6$val$i + ($403 + 29) >> 0] | 0) << 8 | (HEAPU8[$$idx6$val$i + ($403 + 28) >> 0] | 0);
       $421 = (HEAPU8[$$idx6$val$i + ($405 + 29) >> 0] | 0) << 8 | (HEAPU8[$$idx6$val$i + ($405 + 28) >> 0] | 0);
       $$sum4$i$i = $403 + 46 | 0;
       $422 = $$idx6$val$i + $$sum4$i$i | 0;
       $423 = $413 >>> 0 < $421 >>> 0;
       $$sum6$i$i = ($423 ? $413 : $421) + $$sum4$i$i | 0;
       $425 = $$idx6$val$i + $$sum6$i$i | 0;
       if (($$sum4$i$i | 0) < ($$sum6$i$i | 0)) {
        $pL$03$i$i = $422;
        $pR$02$i$i = $$idx6$val$i + ($405 + 46) | 0;
        while (1) {
         $428 = HEAP8[$pL$03$i$i >> 0] | 0;
         $429 = $428 & 255;
         $$$i$i = ($428 + -65 & 255) < 26 ? $429 + 32 | 0 : $429;
         $432 = HEAP8[$pR$02$i$i >> 0] | 0;
         $433 = $432 & 255;
         $436 = ($432 + -65 & 255) < 26 ? $433 + 32 | 0 : $433;
         if (($436 ^ $$$i$i) & 255) {
          $pL$0$lcssa$i$ph$i = $pL$03$i$i;
          break;
         }
         $440 = $pL$03$i$i + 1 | 0;
         if ($440 >>> 0 < $425 >>> 0) {
          $pL$03$i$i = $440;
          $pR$02$i$i = $pR$02$i$i + 1 | 0;
         } else {
          $pL$0$lcssa$i$ph$i = $440;
          break;
         }
        }
        $l$1$i$i = $$$i$i & 255;
        $pL$0$lcssa$i$i = $pL$0$lcssa$i$ph$i;
        $r$1$i$i = $436 & 255;
       } else {
        $l$1$i$i = 0;
        $pL$0$lcssa$i$i = $422;
        $r$1$i$i = 0;
       }
       if (($pL$0$lcssa$i$i | 0) == ($425 | 0)) {
        $$idx4$val$i = $$idx6$val$i;
        $$idx5$val$i = $$idx7$val$i;
        $446 = $423;
        break;
       }
       $$idx4$val$i = $$idx6$val$i;
       $$idx5$val$i = $$idx7$val$i;
       $446 = $l$1$i$i >>> 0 < $r$1$i$i >>> 0;
      } else {
       $$idx4$val$i = HEAP32[$pZip$idx10$val >> 2] | 0;
       $$idx5$val$i = HEAP32[$385 >> 2] | 0;
       $446 = 0;
      } while (0);
      $448 = $387 + ($root$09$i << 2) | 0;
      $root$09$i = ($446 & 1) + $396 | 0;
      $449 = HEAP32[$448 >> 2] | 0;
      $450 = $387 + ($root$09$i << 2) | 0;
      $451 = HEAP32[$450 >> 2] | 0;
      $453 = HEAP32[$$idx5$val$i + ($449 << 2) >> 2] | 0;
      $455 = HEAP32[$$idx5$val$i + ($451 << 2) >> 2] | 0;
      $463 = (HEAPU8[$$idx4$val$i + ($453 + 29) >> 0] | 0) << 8 | (HEAPU8[$$idx4$val$i + ($453 + 28) >> 0] | 0);
      $471 = (HEAPU8[$$idx4$val$i + ($455 + 29) >> 0] | 0) << 8 | (HEAPU8[$$idx4$val$i + ($455 + 28) >> 0] | 0);
      $$sum4$i50$i = $453 + 46 | 0;
      $472 = $$idx4$val$i + $$sum4$i50$i | 0;
      $473 = $463 >>> 0 < $471 >>> 0;
      $$sum6$i51$i = ($473 ? $463 : $471) + $$sum4$i50$i | 0;
      $475 = $$idx4$val$i + $$sum6$i51$i | 0;
      if (($$sum4$i50$i | 0) < ($$sum6$i51$i | 0)) {
       $pL$03$i54$i = $472;
       $pR$02$i55$i = $$idx4$val$i + ($455 + 46) | 0;
       while (1) {
        $478 = HEAP8[$pL$03$i54$i >> 0] | 0;
        $479 = $478 & 255;
        $$$i57$i = ($478 + -65 & 255) < 26 ? $479 + 32 | 0 : $479;
        $482 = HEAP8[$pR$02$i55$i >> 0] | 0;
        $483 = $482 & 255;
        $486 = ($482 + -65 & 255) < 26 ? $483 + 32 | 0 : $483;
        if (($486 ^ $$$i57$i) & 255) {
         $pL$0$lcssa$i59$ph$i = $pL$03$i54$i;
         break;
        }
        $490 = $pL$03$i54$i + 1 | 0;
        if ($490 >>> 0 < $475 >>> 0) {
         $pL$03$i54$i = $490;
         $pR$02$i55$i = $pR$02$i55$i + 1 | 0;
        } else {
         $pL$0$lcssa$i59$ph$i = $490;
         break;
        }
       }
       $l$1$i60$i = $$$i57$i & 255;
       $pL$0$lcssa$i59$i = $pL$0$lcssa$i59$ph$i;
       $r$1$i61$i = $486 & 255;
      } else {
       $l$1$i60$i = 0;
       $pL$0$lcssa$i59$i = $472;
       $r$1$i61$i = 0;
      }
      if (($pL$0$lcssa$i59$i | 0) == ($475 | 0)) {
       if (!$473) break L100;
      } else if ($l$1$i60$i >>> 0 >= $r$1$i61$i >>> 0) break L100;
      HEAP32[$448 >> 2] = $451;
      HEAP32[$450 >> 2] = $449;
      $396 = $root$09$i << 1 | 1;
     } while (($396 | 0) < ($pZip$idx$val | 0));
    } while (0);
    if (($start$012$i | 0) > 0) $start$012$i = $start$012$i + -1 | 0; else break;
   }
  }
  $end$03$i = $pZip$idx$val + -1 | 0;
  if (($end$03$i | 0) <= 0) {
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $end$04$i = $end$03$i;
  while (1) {
   $501 = $387 + ($end$04$i << 2) | 0;
   $502 = HEAP32[$501 >> 2] | 0;
   HEAP32[$501 >> 2] = HEAP32[$387 >> 2];
   HEAP32[$387 >> 2] = $502;
   L133 : do if (($end$04$i | 0) > 1) {
    $506 = 1;
    $root2$02$i = 0;
    do {
     $505 = $506 + 1 | 0;
     do if (($505 | 0) < ($end$04$i | 0)) {
      $$idx2$val$i = HEAP32[$pZip$idx10$val >> 2] | 0;
      $$idx3$val$i = HEAP32[$385 >> 2] | 0;
      $513 = HEAP32[$$idx3$val$i + (HEAP32[$387 + ($506 << 2) >> 2] << 2) >> 2] | 0;
      $515 = HEAP32[$$idx3$val$i + (HEAP32[$387 + ($505 << 2) >> 2] << 2) >> 2] | 0;
      $523 = (HEAPU8[$$idx2$val$i + ($513 + 29) >> 0] | 0) << 8 | (HEAPU8[$$idx2$val$i + ($513 + 28) >> 0] | 0);
      $531 = (HEAPU8[$$idx2$val$i + ($515 + 29) >> 0] | 0) << 8 | (HEAPU8[$$idx2$val$i + ($515 + 28) >> 0] | 0);
      $$sum4$i31$i = $513 + 46 | 0;
      $532 = $$idx2$val$i + $$sum4$i31$i | 0;
      $533 = $523 >>> 0 < $531 >>> 0;
      $$sum6$i32$i = ($533 ? $523 : $531) + $$sum4$i31$i | 0;
      $535 = $$idx2$val$i + $$sum6$i32$i | 0;
      if (($$sum4$i31$i | 0) < ($$sum6$i32$i | 0)) {
       $pL$03$i35$i = $532;
       $pR$02$i36$i = $$idx2$val$i + ($515 + 46) | 0;
       while (1) {
        $538 = HEAP8[$pL$03$i35$i >> 0] | 0;
        $539 = $538 & 255;
        $$$i38$i = ($538 + -65 & 255) < 26 ? $539 + 32 | 0 : $539;
        $542 = HEAP8[$pR$02$i36$i >> 0] | 0;
        $543 = $542 & 255;
        $546 = ($542 + -65 & 255) < 26 ? $543 + 32 | 0 : $543;
        if (($546 ^ $$$i38$i) & 255) {
         $pL$0$lcssa$i40$ph$i = $pL$03$i35$i;
         break;
        }
        $550 = $pL$03$i35$i + 1 | 0;
        if ($550 >>> 0 < $535 >>> 0) {
         $pL$03$i35$i = $550;
         $pR$02$i36$i = $pR$02$i36$i + 1 | 0;
        } else {
         $pL$0$lcssa$i40$ph$i = $550;
         break;
        }
       }
       $l$1$i41$i = $$$i38$i & 255;
       $pL$0$lcssa$i40$i = $pL$0$lcssa$i40$ph$i;
       $r$1$i42$i = $546 & 255;
      } else {
       $l$1$i41$i = 0;
       $pL$0$lcssa$i40$i = $532;
       $r$1$i42$i = 0;
      }
      if (($pL$0$lcssa$i40$i | 0) == ($535 | 0)) {
       $556 = $533;
       break;
      }
      $556 = $l$1$i41$i >>> 0 < $r$1$i42$i >>> 0;
     } else $556 = 0; while (0);
     $558 = $387 + ($root2$02$i << 2) | 0;
     $root2$02$i = ($556 & 1) + $506 | 0;
     $559 = $387 + ($root2$02$i << 2) | 0;
     $560 = HEAP32[$559 >> 2] | 0;
     $$idx$val$i = HEAP32[$pZip$idx10$val >> 2] | 0;
     $$idx1$val$i = HEAP32[$385 >> 2] | 0;
     $562 = HEAP32[$$idx1$val$i + ($502 << 2) >> 2] | 0;
     $564 = HEAP32[$$idx1$val$i + ($560 << 2) >> 2] | 0;
     $572 = (HEAPU8[$$idx$val$i + ($562 + 29) >> 0] | 0) << 8 | (HEAPU8[$$idx$val$i + ($562 + 28) >> 0] | 0);
     $580 = (HEAPU8[$$idx$val$i + ($564 + 29) >> 0] | 0) << 8 | (HEAPU8[$$idx$val$i + ($564 + 28) >> 0] | 0);
     $$sum4$i12$i = $562 + 46 | 0;
     $581 = $$idx$val$i + $$sum4$i12$i | 0;
     $582 = $572 >>> 0 < $580 >>> 0;
     $$sum6$i13$i = ($582 ? $572 : $580) + $$sum4$i12$i | 0;
     $584 = $$idx$val$i + $$sum6$i13$i | 0;
     if (($$sum4$i12$i | 0) < ($$sum6$i13$i | 0)) {
      $pL$03$i16$i = $581;
      $pR$02$i17$i = $$idx$val$i + ($564 + 46) | 0;
      while (1) {
       $587 = HEAP8[$pL$03$i16$i >> 0] | 0;
       $588 = $587 & 255;
       $$$i19$i = ($587 + -65 & 255) < 26 ? $588 + 32 | 0 : $588;
       $591 = HEAP8[$pR$02$i17$i >> 0] | 0;
       $592 = $591 & 255;
       $595 = ($591 + -65 & 255) < 26 ? $592 + 32 | 0 : $592;
       if (($595 ^ $$$i19$i) & 255) {
        $pL$0$lcssa$i21$ph$i = $pL$03$i16$i;
        break;
       }
       $599 = $pL$03$i16$i + 1 | 0;
       if ($599 >>> 0 < $584 >>> 0) {
        $pL$03$i16$i = $599;
        $pR$02$i17$i = $pR$02$i17$i + 1 | 0;
       } else {
        $pL$0$lcssa$i21$ph$i = $599;
        break;
       }
      }
      $l$1$i22$i = $$$i19$i & 255;
      $pL$0$lcssa$i21$i = $pL$0$lcssa$i21$ph$i;
      $r$1$i23$i = $595 & 255;
     } else {
      $l$1$i22$i = 0;
      $pL$0$lcssa$i21$i = $581;
      $r$1$i23$i = 0;
     }
     if (($pL$0$lcssa$i21$i | 0) == ($584 | 0)) {
      if (!$582) break L133;
     } else if ($l$1$i22$i >>> 0 >= $r$1$i23$i >>> 0) break L133;
     HEAP32[$558 >> 2] = $560;
     HEAP32[$559 >> 2] = $502;
     $506 = $root2$02$i << 1 | 1;
    } while (($506 | 0) < ($end$04$i | 0));
   } while (0);
   $end$04$i = $end$04$i + -1 | 0;
   if (($end$04$i | 0) <= 0) {
    $$0 = 1;
    break;
   }
  }
  STACKTOP = sp;
  return $$0 | 0;
 } else if ((label | 0) == 91) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _inverse_mdct($buffer, $n, $f, $blocktype) {
 $buffer = $buffer | 0;
 $n = $n | 0;
 $f = $f | 0;
 $blocktype = $blocktype | 0;
 var $$0$i3 = 0, $$pre$phiZ2D = 0, $$sum$i = 0, $0 = 0, $1 = 0, $107 = 0.0, $109 = 0.0, $110 = 0.0, $111 = 0, $113 = 0, $115 = 0.0, $124 = 0, $14 = 0, $16 = 0, $175 = 0, $176 = 0, $177 = 0, $179 = 0, $18 = 0, $180 = 0, $187 = 0, $19 = 0, $190 = 0, $193 = 0, $194 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $201 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $212 = 0, $213 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $221 = 0, $222 = 0, $223 = 0.0, $225 = 0.0, $227 = 0.0, $229 = 0.0, $23 = 0, $231 = 0.0, $233 = 0.0, $235 = 0.0, $237 = 0.0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0, $244 = 0.0, $245 = 0, $247 = 0.0, $257 = 0, $258 = 0.0, $259 = 0, $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0, $263 = 0.0, $264 = 0, $266 = 0.0, $276 = 0, $277 = 0.0, $278 = 0, $279 = 0.0, $280 = 0.0, $281 = 0, $282 = 0.0, $283 = 0, $285 = 0.0, $295 = 0, $296 = 0.0, $297 = 0, $298 = 0.0, $299 = 0.0, $3 = 0, $300 = 0, $301 = 0.0, $302 = 0, $304 = 0.0, $32 = 0, $323 = 0.0, $325 = 0, $328 = 0.0, $329 = 0, $330 = 0.0, $331 = 0.0, $332 = 0, $333 = 0.0, $334 = 0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0, $34 = 0, $340 = 0.0, $341 = 0, $342 = 0.0, $343 = 0.0, $344 = 0, $345 = 0.0, $346 = 0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $350 = 0.0, $352 = 0.0, $354 = 0.0, $355 = 0, $356 = 0.0, $357 = 0, $358 = 0.0, $359 = 0.0, $360 = 0, $361 = 0.0, $362 = 0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0, $368 = 0.0, $369 = 0, $370 = 0.0, $371 = 0.0, $372 = 0, $373 = 0.0, $374 = 0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0.0, $380 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0.0, $389 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0.0, $399 = 0.0, $4 = 0, $400 = 0.0, $401 = 0.0, $402 = 0.0, $405 = 0.0, $408 = 0.0, $409 = 0.0, $410 = 0.0, $418 = 0, $419 = 0, $422 = 0, $425 = 0, $443 = 0, $464 = 0.0, $465 = 0, $466 = 0.0, $467 = 0.0, $468 = 0, $469 = 0.0, $470 = 0, $471 = 0.0, $472 = 0.0, $474 = 0.0, $476 = 0.0, $478 = 0.0, $481 = 0.0, $482 = 0.0, $483 = 0.0, $488 = 0, $489 = 0.0, $490 = 0.0, $491 = 0.0, $492 = 0, $493 = 0.0, $494 = 0, $495 = 0.0, $496 = 0.0, $498 = 0.0, $501 = 0.0, $503 = 0.0, $506 = 0.0, $507 = 0.0, $508 = 0.0, $517 = 0, $526 = 0.0, $528 = 0.0, $53 = 0, $531 = 0.0, $533 = 0.0, $535 = 0.0, $539 = 0.0, $544 = 0.0, $546 = 0.0, $549 = 0.0, $551 = 0.0, $553 = 0.0, $557 = 0.0, $564 = 0.0, $566 = 0.0, $569 = 0.0, $571 = 0.0, $573 = 0.0, $577 = 0.0, $58 = 0, $583 = 0.0, $585 = 0.0, $588 = 0.0, $589 = 0.0, $591 = 0.0, $595 = 0.0, $6 = 0, $75 = 0, $8 = 0, $81 = 0.0, $83 = 0.0, $84 = 0.0, $87 = 0.0, $9 = 0, $93 = 0, $96 = 0, $A0$025$us = 0, $AA$0$lcssa = 0, $AA$051 = 0, $AA$145 = 0, $AA1$041 = 0, $B$010 = 0, $C$012 = 0, $bitrev$018 = 0, $d$0$lcssa = 0, $d$053 = 0, $d$147 = 0, $d0$040 = 0, $d05$019 = 0, $d09$06 = 0, $d1$039 = 0, $d110$07 = 0, $d16$020 = 0, $d2$08 = 0, $d3$09 = 0, $d7$013 = 0, $e$052 = 0, $e$146 = 0, $e0$038 = 0, $e1$037 = 0, $e11$011 = 0, $e8$014 = 0, $ee0$02$i$us = 0, $ee2$03$i$us = 0, $i$01$i$us = 0, $i$032 = 0, $i_off$024$us = 0, $l$0$lcssa = 0, $l$035 = 0, $l$128 = 0, $r$023$us = 0, $scevgep61 = 0, $z$01$i = 0, sp = 0, $l$035$looptemp = 0;
 sp = STACKTOP;
 $0 = $n >> 1;
 $1 = $n >> 2;
 $2 = $n >> 3;
 $3 = $f + 108 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $6 = HEAP32[$f + 96 >> 2] | 0;
 $8 = $0 << 2;
 if (!$6) {
  $14 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * $8 | 0) + 15 & -16) | 0;
  $19 = $14;
 } else {
  $9 = $4 - $8 | 0;
  if (($9 | 0) < (HEAP32[$f + 104 >> 2] | 0)) $19 = 0; else {
   HEAP32[$3 >> 2] = $9;
   $19 = $6 + $9 | 0;
  }
 }
 $16 = HEAP32[$f + ($blocktype << 2) + 1084 >> 2] | 0;
 $18 = $19 + ($0 + -2 << 2) | 0;
 $20 = $buffer + ($0 << 2) | 0;
 if (!$0) {
  $AA$0$lcssa = $16;
  $d$0$lcssa = $18;
 } else {
  $23 = ($0 << 2) + -16 | 0;
  $24 = $23 >>> 4;
  $26 = ($24 << 1) + 2 | 0;
  $scevgep61 = $19 + ($23 - ($24 << 3)) | 0;
  $AA$051 = $16;
  $d$053 = $18;
  $e$052 = $buffer;
  while (1) {
   $32 = $e$052 + 8 | 0;
   $34 = $AA$051 + 4 | 0;
   HEAPF32[$d$053 + 4 >> 2] = +HEAPF32[$e$052 >> 2] * +HEAPF32[$AA$051 >> 2] - +HEAPF32[$32 >> 2] * +HEAPF32[$34 >> 2];
   HEAPF32[$d$053 >> 2] = +HEAPF32[$e$052 >> 2] * +HEAPF32[$34 >> 2] + +HEAPF32[$32 >> 2] * +HEAPF32[$AA$051 >> 2];
   $e$052 = $e$052 + 16 | 0;
   if (($e$052 | 0) == ($20 | 0)) break; else {
    $AA$051 = $AA$051 + 8 | 0;
    $d$053 = $d$053 + -8 | 0;
   }
  }
  $AA$0$lcssa = $16 + ($26 << 2) | 0;
  $d$0$lcssa = $scevgep61;
 }
 if ($d$0$lcssa >>> 0 >= $19 >>> 0) {
  $AA$145 = $AA$0$lcssa;
  $d$147 = $d$0$lcssa;
  $e$146 = $buffer + ($0 + -3 << 2) | 0;
  while (1) {
   $53 = $e$146 + 8 | 0;
   $58 = $AA$145 + 4 | 0;
   HEAPF32[$d$147 + 4 >> 2] = +HEAPF32[$e$146 >> 2] * +HEAPF32[$58 >> 2] - +HEAPF32[$53 >> 2] * +HEAPF32[$AA$145 >> 2];
   HEAPF32[$d$147 >> 2] = -(+HEAPF32[$e$146 >> 2] * +HEAPF32[$AA$145 >> 2]) - +HEAPF32[$53 >> 2] * +HEAPF32[$58 >> 2];
   $d$147 = $d$147 + -8 | 0;
   if ($d$147 >>> 0 < $19 >>> 0) break; else {
    $AA$145 = $AA$145 + 8 | 0;
    $e$146 = $e$146 + -16 | 0;
   }
  }
 }
 $75 = $0 + -8 | 0;
 if (($75 | 0) >= 0) {
  $AA1$041 = $16 + ($75 << 2) | 0;
  $d0$040 = $buffer + ($1 << 2) | 0;
  $d1$039 = $buffer;
  $e0$038 = $19 + ($1 << 2) | 0;
  $e1$037 = $19;
  while (1) {
   $81 = +HEAPF32[$e0$038 + 4 >> 2];
   $83 = +HEAPF32[$e1$037 + 4 >> 2];
   $84 = $81 - $83;
   $87 = +HEAPF32[$e0$038 >> 2] - +HEAPF32[$e1$037 >> 2];
   HEAPF32[$d0$040 + 4 >> 2] = $81 + $83;
   HEAPF32[$d0$040 >> 2] = +HEAPF32[$e0$038 >> 2] + +HEAPF32[$e1$037 >> 2];
   $93 = $AA1$041 + 16 | 0;
   $96 = $AA1$041 + 20 | 0;
   HEAPF32[$d1$039 + 4 >> 2] = $84 * +HEAPF32[$93 >> 2] - $87 * +HEAPF32[$96 >> 2];
   HEAPF32[$d1$039 >> 2] = $87 * +HEAPF32[$93 >> 2] + $84 * +HEAPF32[$96 >> 2];
   $107 = +HEAPF32[$e0$038 + 12 >> 2];
   $109 = +HEAPF32[$e1$037 + 12 >> 2];
   $110 = $107 - $109;
   $111 = $e0$038 + 8 | 0;
   $113 = $e1$037 + 8 | 0;
   $115 = +HEAPF32[$111 >> 2] - +HEAPF32[$113 >> 2];
   HEAPF32[$d0$040 + 12 >> 2] = $107 + $109;
   HEAPF32[$d0$040 + 8 >> 2] = +HEAPF32[$111 >> 2] + +HEAPF32[$113 >> 2];
   $124 = $AA1$041 + 4 | 0;
   HEAPF32[$d1$039 + 12 >> 2] = $110 * +HEAPF32[$AA1$041 >> 2] - $115 * +HEAPF32[$124 >> 2];
   HEAPF32[$d1$039 + 8 >> 2] = $115 * +HEAPF32[$AA1$041 >> 2] + $110 * +HEAPF32[$124 >> 2];
   $AA1$041 = $AA1$041 + -32 | 0;
   if ($AA1$041 >>> 0 < $16 >>> 0) break; else {
    $d0$040 = $d0$040 + 16 | 0;
    $d1$039 = $d1$039 + 16 | 0;
    $e0$038 = $e0$038 + 16 | 0;
    $e1$037 = $e1$037 + 16 | 0;
   }
  }
 }
 do if (($n | 0) < 16384) {
  if (($n | 0) < 16) {
   $$0$i3 = HEAP8[79416 + $n >> 0] | 0;
   break;
  }
  if (($n | 0) < 512) {
   $$0$i3 = (HEAP8[79416 + ($n >> 5) >> 0] | 0) + 5 | 0;
   break;
  } else {
   $$0$i3 = (HEAP8[79416 + ($n >> 10) >> 0] | 0) + 10 | 0;
   break;
  }
 } else {
  if (($n | 0) >= 16777216) {
   if (($n | 0) >= 536870912) {
    $$0$i3 = 0;
    break;
   }
   $$0$i3 = (HEAP8[79416 + ($n >> 25) >> 0] | 0) + 25 | 0;
   break;
  }
  if (($n | 0) < 524288) {
   $$0$i3 = (HEAP8[79416 + ($n >> 15) >> 0] | 0) + 15 | 0;
   break;
  } else {
   $$0$i3 = (HEAP8[79416 + ($n >> 20) >> 0] | 0) + 20 | 0;
   break;
  }
 } while (0);
 $175 = $n >> 4;
 $176 = $0 + -1 | 0;
 $177 = 0 - $2 | 0;
 _imdct_step3_iter0_loop($175, $buffer, $176, $177, $16);
 _imdct_step3_iter0_loop($175, $buffer, $176 - $1 | 0, $177, $16);
 $179 = $n >> 5;
 $180 = 0 - $175 | 0;
 _imdct_step3_inner_r_loop($179, $buffer, $176, $180, $16, 16);
 _imdct_step3_inner_r_loop($179, $buffer, $176 - $2 | 0, $180, $16, 16);
 _imdct_step3_inner_r_loop($179, $buffer, $176 - ($2 << 1) | 0, $180, $16, 16);
 _imdct_step3_inner_r_loop($179, $buffer, $176 + (Math_imul($2, -3) | 0) | 0, $180, $16, 16);
 $187 = $$0$i3 + -4 >> 1;
 if (($187 | 0) > 2) {
  $l$035 = 2;
  do {
   $193 = $n >> $l$035 + 2;
   $l$035$looptemp = $l$035;
   $l$035 = $l$035 + 1 | 0;
   $194 = 1 << $l$035;
   if (($194 | 0) > 0) {
    $198 = $n >> $l$035$looptemp + 4;
    $199 = 0 - ($193 >> 1) | 0;
    $201 = 1 << $l$035$looptemp + 3;
    $i$032 = 0;
    do {
     _imdct_step3_inner_r_loop($198, $buffer, $176 - (Math_imul($i$032, $193) | 0) | 0, $199, $16, $201);
     $i$032 = $i$032 + 1 | 0;
    } while (($i$032 | 0) != ($194 | 0));
   }
  } while (($l$035 | 0) != ($187 | 0));
  $l$0$lcssa = $187;
 } else $l$0$lcssa = 2;
 $190 = $$0$i3 + -7 | 0;
 if (($l$0$lcssa | 0) < ($190 | 0)) {
  $l$128 = $l$0$lcssa;
  do {
   $207 = $n >> $l$128 + 2;
   $208 = $l$128 + 3 | 0;
   $209 = 1 << $208;
   $210 = $207 >> 1;
   $212 = $n >> $l$128 + 6;
   $l$128 = $l$128 + 1 | 0;
   $213 = 1 << $l$128;
   if (($212 | 0) > 0) {
    $215 = $209 + 1 | 0;
    $216 = $209 << 1;
    $217 = $216 | 1;
    $218 = 3 << $208;
    $219 = $218 + 1 | 0;
    $221 = 0 - $207 | 0;
    $222 = $209 << 2;
    if (($213 | 0) > 0) {
     $A0$025$us = $16;
     $i_off$024$us = $176;
     $r$023$us = $212;
     while (1) {
      $223 = +HEAPF32[$A0$025$us >> 2];
      $225 = +HEAPF32[$A0$025$us + 4 >> 2];
      $227 = +HEAPF32[$A0$025$us + ($209 << 2) >> 2];
      $229 = +HEAPF32[$A0$025$us + ($215 << 2) >> 2];
      $231 = +HEAPF32[$A0$025$us + ($216 << 2) >> 2];
      $233 = +HEAPF32[$A0$025$us + ($217 << 2) >> 2];
      $235 = +HEAPF32[$A0$025$us + ($218 << 2) >> 2];
      $237 = +HEAPF32[$A0$025$us + ($219 << 2) >> 2];
      $ee0$02$i$us = $buffer + ($i_off$024$us << 2) | 0;
      $ee2$03$i$us = $buffer + ($i_off$024$us - $210 << 2) | 0;
      $i$01$i$us = $213;
      while (1) {
       $240 = +HEAPF32[$ee0$02$i$us >> 2];
       $241 = +HEAPF32[$ee2$03$i$us >> 2];
       $242 = $240 - $241;
       $243 = $ee0$02$i$us + -4 | 0;
       $244 = +HEAPF32[$243 >> 2];
       $245 = $ee2$03$i$us + -4 | 0;
       $247 = $244 - +HEAPF32[$245 >> 2];
       HEAPF32[$ee0$02$i$us >> 2] = $240 + $241;
       HEAPF32[$243 >> 2] = $244 + +HEAPF32[$245 >> 2];
       HEAPF32[$ee2$03$i$us >> 2] = $223 * $242 - $225 * $247;
       HEAPF32[$245 >> 2] = $225 * $242 + $223 * $247;
       $257 = $ee0$02$i$us + -8 | 0;
       $258 = +HEAPF32[$257 >> 2];
       $259 = $ee2$03$i$us + -8 | 0;
       $260 = +HEAPF32[$259 >> 2];
       $261 = $258 - $260;
       $262 = $ee0$02$i$us + -12 | 0;
       $263 = +HEAPF32[$262 >> 2];
       $264 = $ee2$03$i$us + -12 | 0;
       $266 = $263 - +HEAPF32[$264 >> 2];
       HEAPF32[$257 >> 2] = $258 + $260;
       HEAPF32[$262 >> 2] = $263 + +HEAPF32[$264 >> 2];
       HEAPF32[$259 >> 2] = $227 * $261 - $229 * $266;
       HEAPF32[$264 >> 2] = $229 * $261 + $227 * $266;
       $276 = $ee0$02$i$us + -16 | 0;
       $277 = +HEAPF32[$276 >> 2];
       $278 = $ee2$03$i$us + -16 | 0;
       $279 = +HEAPF32[$278 >> 2];
       $280 = $277 - $279;
       $281 = $ee0$02$i$us + -20 | 0;
       $282 = +HEAPF32[$281 >> 2];
       $283 = $ee2$03$i$us + -20 | 0;
       $285 = $282 - +HEAPF32[$283 >> 2];
       HEAPF32[$276 >> 2] = $277 + $279;
       HEAPF32[$281 >> 2] = $282 + +HEAPF32[$283 >> 2];
       HEAPF32[$278 >> 2] = $231 * $280 - $233 * $285;
       HEAPF32[$283 >> 2] = $233 * $280 + $231 * $285;
       $295 = $ee0$02$i$us + -24 | 0;
       $296 = +HEAPF32[$295 >> 2];
       $297 = $ee2$03$i$us + -24 | 0;
       $298 = +HEAPF32[$297 >> 2];
       $299 = $296 - $298;
       $300 = $ee0$02$i$us + -28 | 0;
       $301 = +HEAPF32[$300 >> 2];
       $302 = $ee2$03$i$us + -28 | 0;
       $304 = $301 - +HEAPF32[$302 >> 2];
       HEAPF32[$295 >> 2] = $296 + $298;
       HEAPF32[$300 >> 2] = $301 + +HEAPF32[$302 >> 2];
       HEAPF32[$297 >> 2] = $235 * $299 - $237 * $304;
       HEAPF32[$302 >> 2] = $237 * $299 + $235 * $304;
       $i$01$i$us = $i$01$i$us + -1 | 0;
       if (($i$01$i$us | 0) <= 0) break; else {
        $ee0$02$i$us = $ee0$02$i$us + ($221 << 2) | 0;
        $ee2$03$i$us = $ee2$03$i$us + ($221 << 2) | 0;
       }
      }
      $r$023$us = $r$023$us + -1 | 0;
      if (($r$023$us | 0) <= 0) break; else {
       $A0$025$us = $A0$025$us + ($222 << 2) | 0;
       $i_off$024$us = $i_off$024$us + -8 | 0;
      }
     }
    }
   }
  } while (($l$128 | 0) != ($190 | 0));
 }
 $323 = +HEAPF32[$16 + ($2 << 2) >> 2];
 $$sum$i = $176 - ($179 << 4) | 0;
 $325 = $buffer + ($$sum$i << 2) | 0;
 if (($$sum$i | 0) < ($176 | 0)) {
  $z$01$i = $buffer + ($176 << 2) | 0;
  do {
   $328 = +HEAPF32[$z$01$i >> 2];
   $329 = $z$01$i + -32 | 0;
   $330 = +HEAPF32[$329 >> 2];
   $331 = $328 - $330;
   $332 = $z$01$i + -4 | 0;
   $333 = +HEAPF32[$332 >> 2];
   $334 = $z$01$i + -36 | 0;
   $335 = +HEAPF32[$334 >> 2];
   $336 = $333 - $335;
   $337 = $328 + $330;
   $338 = $333 + $335;
   $339 = $z$01$i + -8 | 0;
   $340 = +HEAPF32[$339 >> 2];
   $341 = $z$01$i + -40 | 0;
   $342 = +HEAPF32[$341 >> 2];
   $343 = $340 - $342;
   $344 = $z$01$i + -12 | 0;
   $345 = +HEAPF32[$344 >> 2];
   $346 = $z$01$i + -44 | 0;
   $347 = +HEAPF32[$346 >> 2];
   $348 = $345 - $347;
   $349 = $340 + $342;
   $350 = $345 + $347;
   $352 = $323 * ($343 + $348);
   $354 = $323 * ($348 - $343);
   $355 = $z$01$i + -48 | 0;
   $356 = +HEAPF32[$355 >> 2];
   $357 = $z$01$i + -16 | 0;
   $358 = +HEAPF32[$357 >> 2];
   $359 = $356 - $358;
   $360 = $z$01$i + -20 | 0;
   $361 = +HEAPF32[$360 >> 2];
   $362 = $z$01$i + -52 | 0;
   $363 = +HEAPF32[$362 >> 2];
   $364 = $361 - $363;
   $365 = $356 + $358;
   $366 = $361 + $363;
   $367 = $z$01$i + -56 | 0;
   $368 = +HEAPF32[$367 >> 2];
   $369 = $z$01$i + -24 | 0;
   $370 = +HEAPF32[$369 >> 2];
   $371 = $368 - $370;
   $372 = $z$01$i + -28 | 0;
   $373 = +HEAPF32[$372 >> 2];
   $374 = $z$01$i + -60 | 0;
   $375 = +HEAPF32[$374 >> 2];
   $376 = $373 - $375;
   $377 = $368 + $370;
   $378 = $373 + $375;
   $380 = $323 * ($371 + $376);
   $382 = $323 * ($371 - $376);
   $383 = $337 - $365;
   $384 = $337 + $365;
   $385 = $349 + $377;
   $386 = $349 - $377;
   HEAPF32[$z$01$i >> 2] = $384 + $385;
   HEAPF32[$339 >> 2] = $384 - $385;
   $389 = $350 - $378;
   HEAPF32[$357 >> 2] = $383 + $389;
   HEAPF32[$369 >> 2] = $383 - $389;
   $392 = $338 - $366;
   $393 = $338 + $366;
   $394 = $350 + $378;
   HEAPF32[$332 >> 2] = $393 + $394;
   HEAPF32[$344 >> 2] = $393 - $394;
   HEAPF32[$360 >> 2] = $392 - $386;
   HEAPF32[$372 >> 2] = $392 + $386;
   $399 = $331 - $364;
   $400 = $331 + $364;
   $401 = $352 + $380;
   $402 = $352 - $380;
   HEAPF32[$329 >> 2] = $400 + $401;
   HEAPF32[$341 >> 2] = $400 - $401;
   $405 = $354 - $382;
   HEAPF32[$355 >> 2] = $399 + $405;
   HEAPF32[$367 >> 2] = $399 - $405;
   $408 = $336 - $359;
   $409 = $336 + $359;
   $410 = $354 + $382;
   HEAPF32[$334 >> 2] = $409 + $410;
   HEAPF32[$346 >> 2] = $409 - $410;
   HEAPF32[$362 >> 2] = $408 - $402;
   HEAPF32[$374 >> 2] = $408 + $402;
   $z$01$i = $z$01$i + -64 | 0;
  } while ($z$01$i >>> 0 > $325 >>> 0);
 }
 $418 = $19 + ($1 + -4 << 2) | 0;
 $419 = $0 + -4 | 0;
 if ($418 >>> 0 < $19 >>> 0) $$pre$phiZ2D = $19 + ($419 << 2) | 0; else {
  $422 = $19 + ($419 << 2) | 0;
  $bitrev$018 = HEAP32[$f + ($blocktype << 2) + 1116 >> 2] | 0;
  $d05$019 = $418;
  $d16$020 = $422;
  while (1) {
   $425 = HEAPU16[$bitrev$018 >> 1] | 0;
   HEAPF32[$d16$020 + 12 >> 2] = +HEAPF32[$buffer + ($425 << 2) >> 2];
   HEAPF32[$d16$020 + 8 >> 2] = +HEAPF32[$buffer + ($425 + 1 << 2) >> 2];
   HEAPF32[$d05$019 + 12 >> 2] = +HEAPF32[$buffer + ($425 + 2 << 2) >> 2];
   HEAPF32[$d05$019 + 8 >> 2] = +HEAPF32[$buffer + ($425 + 3 << 2) >> 2];
   $443 = HEAPU16[$bitrev$018 + 2 >> 1] | 0;
   HEAPF32[$d16$020 + 4 >> 2] = +HEAPF32[$buffer + ($443 << 2) >> 2];
   HEAPF32[$d16$020 >> 2] = +HEAPF32[$buffer + ($443 + 1 << 2) >> 2];
   HEAPF32[$d05$019 + 4 >> 2] = +HEAPF32[$buffer + ($443 + 2 << 2) >> 2];
   HEAPF32[$d05$019 >> 2] = +HEAPF32[$buffer + ($443 + 3 << 2) >> 2];
   $d05$019 = $d05$019 + -16 | 0;
   if ($d05$019 >>> 0 < $19 >>> 0) {
    $$pre$phiZ2D = $422;
    break;
   } else {
    $bitrev$018 = $bitrev$018 + 4 | 0;
    $d16$020 = $d16$020 + -16 | 0;
   }
  }
 }
 if ($19 >>> 0 < $$pre$phiZ2D >>> 0) {
  $C$012 = HEAP32[$f + ($blocktype << 2) + 1100 >> 2] | 0;
  $d7$013 = $19;
  $e8$014 = $$pre$phiZ2D;
  while (1) {
   $464 = +HEAPF32[$d7$013 >> 2];
   $465 = $e8$014 + 8 | 0;
   $466 = +HEAPF32[$465 >> 2];
   $467 = $464 - $466;
   $468 = $d7$013 + 4 | 0;
   $469 = +HEAPF32[$468 >> 2];
   $470 = $e8$014 + 12 | 0;
   $471 = +HEAPF32[$470 >> 2];
   $472 = $469 + $471;
   $474 = +HEAPF32[$C$012 + 4 >> 2];
   $476 = +HEAPF32[$C$012 >> 2];
   $478 = $467 * $474 + $472 * $476;
   $481 = $474 * $472 - $467 * $476;
   $482 = $464 + $466;
   $483 = $469 - $471;
   HEAPF32[$d7$013 >> 2] = $482 + $478;
   HEAPF32[$468 >> 2] = $483 + $481;
   HEAPF32[$465 >> 2] = $482 - $478;
   HEAPF32[$470 >> 2] = $481 - $483;
   $488 = $d7$013 + 8 | 0;
   $489 = +HEAPF32[$488 >> 2];
   $490 = +HEAPF32[$e8$014 >> 2];
   $491 = $489 - $490;
   $492 = $d7$013 + 12 | 0;
   $493 = +HEAPF32[$492 >> 2];
   $494 = $e8$014 + 4 | 0;
   $495 = +HEAPF32[$494 >> 2];
   $496 = $493 + $495;
   $498 = +HEAPF32[$C$012 + 12 >> 2];
   $501 = +HEAPF32[$C$012 + 8 >> 2];
   $503 = $491 * $498 + $496 * $501;
   $506 = $498 * $496 - $491 * $501;
   $507 = $489 + $490;
   $508 = $493 - $495;
   HEAPF32[$488 >> 2] = $507 + $503;
   HEAPF32[$492 >> 2] = $508 + $506;
   HEAPF32[$e8$014 >> 2] = $507 - $503;
   HEAPF32[$494 >> 2] = $506 - $508;
   $d7$013 = $d7$013 + 16 | 0;
   $e8$014 = $e8$014 + -16 | 0;
   if ($d7$013 >>> 0 >= $e8$014 >>> 0) break; else $C$012 = $C$012 + 16 | 0;
  }
 }
 $517 = $19 + ($75 << 2) | 0;
 if ($517 >>> 0 < $19 >>> 0) {
  HEAP32[$3 >> 2] = $4;
  STACKTOP = sp;
  return;
 }
 $B$010 = (HEAP32[$f + ($blocktype << 2) + 1092 >> 2] | 0) + ($75 << 2) | 0;
 $d09$06 = $buffer;
 $d110$07 = $buffer + ($419 << 2) | 0;
 $d2$08 = $20;
 $d3$09 = $buffer + ($n + -4 << 2) | 0;
 $e11$011 = $517;
 while (1) {
  $526 = +HEAPF32[$e11$011 + 24 >> 2];
  $528 = +HEAPF32[$B$010 + 28 >> 2];
  $531 = +HEAPF32[$e11$011 + 28 >> 2];
  $533 = +HEAPF32[$B$010 + 24 >> 2];
  $535 = $526 * $528 - $531 * $533;
  $539 = -($526 * $533) - $528 * $531;
  HEAPF32[$d09$06 >> 2] = $535;
  HEAPF32[$d110$07 + 12 >> 2] = -$535;
  HEAPF32[$d2$08 >> 2] = $539;
  HEAPF32[$d3$09 + 12 >> 2] = $539;
  $544 = +HEAPF32[$e11$011 + 16 >> 2];
  $546 = +HEAPF32[$B$010 + 20 >> 2];
  $549 = +HEAPF32[$e11$011 + 20 >> 2];
  $551 = +HEAPF32[$B$010 + 16 >> 2];
  $553 = $544 * $546 - $549 * $551;
  $557 = -($544 * $551) - $546 * $549;
  HEAPF32[$d09$06 + 4 >> 2] = $553;
  HEAPF32[$d110$07 + 8 >> 2] = -$553;
  HEAPF32[$d2$08 + 4 >> 2] = $557;
  HEAPF32[$d3$09 + 8 >> 2] = $557;
  $564 = +HEAPF32[$e11$011 + 8 >> 2];
  $566 = +HEAPF32[$B$010 + 12 >> 2];
  $569 = +HEAPF32[$e11$011 + 12 >> 2];
  $571 = +HEAPF32[$B$010 + 8 >> 2];
  $573 = $564 * $566 - $569 * $571;
  $577 = -($564 * $571) - $566 * $569;
  HEAPF32[$d09$06 + 8 >> 2] = $573;
  HEAPF32[$d110$07 + 4 >> 2] = -$573;
  HEAPF32[$d2$08 + 8 >> 2] = $577;
  HEAPF32[$d3$09 + 4 >> 2] = $577;
  $583 = +HEAPF32[$e11$011 >> 2];
  $585 = +HEAPF32[$B$010 + 4 >> 2];
  $588 = +HEAPF32[$e11$011 + 4 >> 2];
  $589 = +HEAPF32[$B$010 >> 2];
  $591 = $583 * $585 - $588 * $589;
  $595 = -($583 * $589) - $585 * $588;
  HEAPF32[$d09$06 + 12 >> 2] = $591;
  HEAPF32[$d110$07 >> 2] = -$591;
  HEAPF32[$d2$08 + 12 >> 2] = $595;
  HEAPF32[$d3$09 >> 2] = $595;
  $e11$011 = $e11$011 + -32 | 0;
  if ($e11$011 >>> 0 < $19 >>> 0) break; else {
   $B$010 = $B$010 + -32 | 0;
   $d09$06 = $d09$06 + 16 | 0;
   $d110$07 = $d110$07 + -16 | 0;
   $d2$08 = $d2$08 + 16 | 0;
   $d3$09 = $d3$09 + -16 | 0;
  }
 }
 HEAP32[$3 >> 2] = $4;
 STACKTOP = sp;
 return;
}

function _vorbis_decode_packet($f, $len, $p_left, $p_right) {
 $f = $f | 0;
 $len = $len | 0;
 $p_left = $p_left | 0;
 $p_right = $p_right | 0;
 var $$0 = 0, $$01$i = 0, $$pr$i$i$i = 0, $$pre62$i = 0, $$pre8 = 0, $10 = 0, $105 = 0, $108 = 0, $111 = 0, $112 = 0, $116 = 0, $119 = 0, $120 = 0, $126 = 0, $129 = 0, $13 = 0, $130 = 0, $15 = 0, $152 = 0, $154 = 0, $157 = 0, $16 = 0, $160 = 0, $166 = 0, $17 = 0, $172 = 0, $176 = 0, $18 = 0, $181 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $19 = 0, $2 = 0, $21 = 0, $217 = 0, $219 = 0, $22 = 0, $220 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $233 = 0, $234 = 0, $235 = 0, $238 = 0, $24 = 0, $242 = 0, $25 = 0, $253 = 0, $255 = 0, $26 = 0, $263 = 0, $273 = 0, $277 = 0, $284 = 0, $288 = 0, $290 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $3 = 0, $30 = 0, $301 = 0, $306 = 0, $307 = 0, $308 = 0.0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0, $318 = 0, $324 = 0, $326 = 0, $333 = 0, $337 = 0, $34 = 0, $340 = 0, $343 = 0, $345 = 0, $349 = 0, $351 = 0, $356 = 0, $359 = 0, $360 = 0, $361 = 0, $363 = 0, $365 = 0, $368 = 0, $372 = 0, $376 = 0, $378 = 0, $379 = 0, $380 = 0, $384 = 0, $39 = 0, $390 = 0.0, $391 = 0, $4 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $419 = 0, $422 = 0, $430 = 0, $437 = 0, $438 = 0, $440 = 0, $446 = 0, $448 = 0, $456 = 0, $457 = 0, $458 = 0, $463 = 0, $469 = 0, $47 = 0, $474 = 0, $482 = 0, $49 = 0, $5 = 0, $59 = 0, $6 = 0, $64 = 0, $66 = 0, $67 = 0, $69 = 0, $70 = 0, $72 = 0, $74 = 0, $77 = 0, $81 = 0, $84 = 0, $85 = 0, $91 = 0, $94 = 0, $95 = 0, $a2$0$i = 0.0, $ch$0$lcssa$i = 0, $ch$020$i = 0, $ch$1$i = 0, $cval$0$i = 0, $cval$2$ph$i = 0, $cval$235$i = 0, $do_not_decode$i = 0, $err$05$i$i$i = 0, $i$055$i = 0, $i$129$i = 0, $i$226$i = 0, $i$317$in$i = 0, $i$411$i = 0, $i$59$i = 0, $j$01$i$i = 0, $j$042$i = 0, $j$147$i = 0, $j$251$i = 0, $j$321$i = 0, $j$413$i = 0, $k$037$i = 0, $lx$0$lcssa$i$i = 0, $lx$03$i$i = 0, $lx$1$i$i = 0, $ly$0$lcssa$i$i = 0, $ly$04$i$i = 0, $ly$1$i$i = 0, $m2$0$i = 0.0, $mode = 0, $offset$041$i = 0, $offset$1$lcssa$i = 0, $offset$136$i = 0, $phitmp$i = 0, $q$02$i$i = 0, $really_zero_channel$i = 0, $residue_buffers$i = 0, $right_end = 0, $step2_flag$i = 0, $temp$0$i = 0, $temp$1$i = 0, $x$03$i$i$i = 0, $x$06$i$i$i = 0, $y$04$i$i$i = 0, $zero_channel$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2640 | 0;
 $zero_channel$i = sp + 1104 | 0;
 $really_zero_channel$i = sp + 80 | 0;
 $step2_flag$i = sp + 2384 | 0;
 $residue_buffers$i = sp + 16 | 0;
 $do_not_decode$i = sp + 2128 | 0;
 $mode = sp + 8 | 0;
 $right_end = sp;
 if (!(_vorbis_decode_initial($f, $p_left, sp + 4 | 0, $p_right, $right_end, $mode) | 0)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $2 = HEAP32[$mode >> 2] | 0;
 $3 = HEAP32[$p_left >> 2] | 0;
 $4 = HEAP32[$p_right >> 2] | 0;
 $5 = HEAP32[$right_end >> 2] | 0;
 $6 = $f + ($2 * 6 | 0) + 428 | 0;
 $10 = HEAP32[$f + (HEAPU8[$6 >> 0] << 2) + 120 >> 2] | 0;
 $13 = HEAPU8[$f + ($2 * 6 | 0) + 429 >> 0] | 0;
 $15 = HEAP32[$f + 420 >> 2] | 0;
 $16 = $10 >> 1;
 $17 = 0 - $16 | 0;
 $18 = $f + 4 | 0;
 $19 = HEAP32[$18 >> 2] | 0;
 L4 : do if (($19 | 0) > 0) {
  $21 = $15 + ($13 * 40 | 0) + 4 | 0;
  $22 = $f + 276 | 0;
  $23 = $f + 1412 | 0;
  $24 = $step2_flag$i + 1 | 0;
  $25 = $f + 140 | 0;
  $26 = $f + 1408 | 0;
  $i$055$i = 0;
  while (1) {
   $30 = HEAPU8[(HEAP32[$21 >> 2] | 0) + ($i$055$i * 3 | 0) + 2 >> 0] | 0;
   $31 = $zero_channel$i + ($i$055$i << 2) | 0;
   HEAP32[$31 >> 2] = 0;
   $34 = HEAPU8[$15 + ($13 * 40 | 0) + $30 + 9 >> 0] | 0;
   if (!(HEAP16[$f + ($34 << 1) + 148 >> 1] | 0)) break;
   $39 = HEAP32[$22 >> 2] | 0;
   if (!(_get_bits($f, 1) | 0)) label = 48; else {
    $47 = HEAP32[79496 + ((HEAPU8[$39 + ($34 * 1596 | 0) + 1588 >> 0] | 0) + -1 << 2) >> 2] | 0;
    $49 = HEAP32[$f + ($i$055$i << 2) + 1012 >> 2] | 0;
    $phitmp$i = (HEAP8[79416 + ($47 >> 5) >> 0] | 0) + 4 | 0;
    HEAP16[$49 >> 1] = _get_bits($f, $phitmp$i) | 0;
    HEAP16[$49 + 2 >> 1] = _get_bits($f, $phitmp$i) | 0;
    $59 = $39 + ($34 * 1596 | 0) | 0;
    if (HEAP8[$59 >> 0] | 0) {
     $j$042$i = 0;
     $offset$041$i = 2;
     while (1) {
      $64 = HEAPU8[$39 + ($34 * 1596 | 0) + $j$042$i + 1 >> 0] | 0;
      $66 = HEAP8[$39 + ($34 * 1596 | 0) + $64 + 33 >> 0] | 0;
      $67 = $66 & 255;
      $69 = HEAP8[$39 + ($34 * 1596 | 0) + $64 + 49 >> 0] | 0;
      $70 = $69 & 255;
      $72 = (1 << $70) + -1 | 0;
      if (!($69 << 24 >> 24)) $cval$2$ph$i = 0; else {
       $74 = HEAP32[$25 >> 2] | 0;
       $77 = HEAPU8[$39 + ($34 * 1596 | 0) + $64 + 65 >> 0] | 0;
       if ((HEAP32[$23 >> 2] | 0) < 10) _prep_huffman($f);
       $81 = HEAP32[$26 >> 2] | 0;
       $84 = HEAP16[$74 + ($77 * 2096 | 0) + (($81 & 1023) << 1) + 36 >> 1] | 0;
       $85 = $84 << 16 >> 16;
       if ($84 << 16 >> 16 > -1) {
        $91 = HEAPU8[(HEAP32[$74 + ($77 * 2096 | 0) + 8 >> 2] | 0) + $85 >> 0] | 0;
        HEAP32[$26 >> 2] = $81 >>> $91;
        $94 = (HEAP32[$23 >> 2] | 0) - $91 | 0;
        $95 = ($94 | 0) < 0;
        HEAP32[$23 >> 2] = $95 ? 0 : $94;
        $cval$0$i = $95 ? -1 : $85;
       } else $cval$0$i = _codebook_decode_scalar_raw($f, $74 + ($77 * 2096 | 0) | 0) | 0;
       if (!(HEAP8[$74 + ($77 * 2096 | 0) + 23 >> 0] | 0)) $cval$2$ph$i = $cval$0$i; else $cval$2$ph$i = HEAP32[(HEAP32[$74 + ($77 * 2096 | 0) + 2088 >> 2] | 0) + ($cval$0$i << 2) >> 2] | 0;
      }
      if (!($66 << 24 >> 24)) $offset$1$lcssa$i = $offset$041$i; else {
       $105 = $67 >>> 0 > 1;
       $cval$235$i = $cval$2$ph$i;
       $k$037$i = 0;
       $offset$136$i = $offset$041$i;
       while (1) {
        $108 = HEAP16[$39 + ($34 * 1596 | 0) + ($64 << 4) + (($cval$235$i & $72) << 1) + 82 >> 1] | 0;
        $cval$235$i = $cval$235$i >> $70;
        if ($108 << 16 >> 16 > -1) {
         $111 = $108 << 16 >> 16;
         $112 = HEAP32[$25 >> 2] | 0;
         if ((HEAP32[$23 >> 2] | 0) < 10) _prep_huffman($f);
         $116 = HEAP32[$26 >> 2] | 0;
         $119 = HEAP16[$112 + ($111 * 2096 | 0) + (($116 & 1023) << 1) + 36 >> 1] | 0;
         $120 = $119 << 16 >> 16;
         if ($119 << 16 >> 16 > -1) {
          $126 = HEAPU8[(HEAP32[$112 + ($111 * 2096 | 0) + 8 >> 2] | 0) + $120 >> 0] | 0;
          HEAP32[$26 >> 2] = $116 >>> $126;
          $129 = (HEAP32[$23 >> 2] | 0) - $126 | 0;
          $130 = ($129 | 0) < 0;
          HEAP32[$23 >> 2] = $130 ? 0 : $129;
          $temp$0$i = $130 ? -1 : $120;
         } else $temp$0$i = _codebook_decode_scalar_raw($f, $112 + ($111 * 2096 | 0) | 0) | 0;
         if (!(HEAP8[$112 + ($111 * 2096 | 0) + 23 >> 0] | 0)) $temp$1$i = $temp$0$i; else $temp$1$i = HEAP32[(HEAP32[$112 + ($111 * 2096 | 0) + 2088 >> 2] | 0) + ($temp$0$i << 2) >> 2] | 0;
         HEAP16[$49 + ($offset$136$i << 1) >> 1] = $temp$1$i;
        } else HEAP16[$49 + ($offset$136$i << 1) >> 1] = 0;
        $k$037$i = $k$037$i + 1 | 0;
        if (($k$037$i | 0) >= ($67 | 0)) break; else $offset$136$i = $offset$136$i + 1 | 0;
       }
       $offset$1$lcssa$i = ($105 ? $67 : 1) + $offset$041$i | 0;
      }
      $j$042$i = $j$042$i + 1 | 0;
      if (($j$042$i | 0) >= (HEAPU8[$59 >> 0] | 0)) break; else $offset$041$i = $offset$1$lcssa$i;
     }
    }
    if ((HEAP32[$23 >> 2] | 0) == -1) label = 48; else {
     HEAP8[$24 >> 0] = 1;
     HEAP8[$step2_flag$i >> 0] = 1;
     $152 = HEAP32[$39 + ($34 * 1596 | 0) + 1592 >> 2] | 0;
     if (($152 | 0) > 2) {
      $154 = $47 + 65535 | 0;
      $j$147$i = 2;
      do {
       $157 = HEAPU8[$39 + ($34 * 1596 | 0) + ($j$147$i << 1) + 1088 >> 0] | 0;
       $160 = HEAPU8[$39 + ($34 * 1596 | 0) + ($j$147$i << 1) + 1089 >> 0] | 0;
       $166 = HEAPU16[$39 + ($34 * 1596 | 0) + ($157 << 1) + 338 >> 1] | 0;
       $172 = HEAP16[$49 + ($157 << 1) >> 1] | 0;
       $176 = (HEAP16[$49 + ($160 << 1) >> 1] | 0) - $172 | 0;
       $181 = (Math_imul(($176 | 0) > -1 ? $176 : 0 - $176 | 0, (HEAPU16[$39 + ($34 * 1596 | 0) + ($j$147$i << 1) + 338 >> 1] | 0) - $166 | 0) | 0) / ((HEAPU16[$39 + ($34 * 1596 | 0) + ($160 << 1) + 338 >> 1] | 0) - $166 | 0) | 0;
       $184 = (($176 | 0) < 0 ? 0 - $181 | 0 : $181) + $172 | 0;
       $185 = $49 + ($j$147$i << 1) | 0;
       $186 = HEAP16[$185 >> 1] | 0;
       $187 = $186 << 16 >> 16;
       $188 = $47 - $184 | 0;
       do if (!($186 << 16 >> 16)) {
        HEAP8[$step2_flag$i + $j$147$i >> 0] = 0;
        HEAP16[$185 >> 1] = $184;
       } else {
        HEAP8[$step2_flag$i + $160 >> 0] = 1;
        HEAP8[$step2_flag$i + $157 >> 0] = 1;
        HEAP8[$step2_flag$i + $j$147$i >> 0] = 1;
        if (($187 | 0) < ((($188 | 0) < ($184 | 0) ? $188 : $184) << 1 | 0)) if (!($187 & 1)) {
         HEAP16[$185 >> 1] = $184 + ($187 >>> 1);
         break;
        } else {
         HEAP16[$185 >> 1] = $184 - (($187 + 1 | 0) >>> 1);
         break;
        } else if (($188 | 0) > ($184 | 0)) {
         HEAP16[$185 >> 1] = $186;
         break;
        } else {
         HEAP16[$185 >> 1] = $154 - $187;
         break;
        }
       } while (0);
       $j$147$i = $j$147$i + 1 | 0;
      } while (($j$147$i | 0) != ($152 | 0));
     }
     if (($152 | 0) > 0) {
      $j$251$i = 0;
      do {
       if (!(HEAP8[$step2_flag$i + $j$251$i >> 0] | 0)) HEAP16[$49 + ($j$251$i << 1) >> 1] = -1;
       $j$251$i = $j$251$i + 1 | 0;
      } while (($j$251$i | 0) != ($152 | 0));
     }
    }
   }
   if ((label | 0) == 48) {
    label = 0;
    HEAP32[$31 >> 2] = 1;
   }
   $i$055$i = $i$055$i + 1 | 0;
   $217 = HEAP32[$18 >> 2] | 0;
   if (($i$055$i | 0) >= ($217 | 0)) {
    $228 = $217;
    break L4;
   }
  }
  HEAP32[$f + 116 >> 2] = 21;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else $228 = $19; while (0);
 $219 = $f + 96 | 0;
 $220 = HEAP32[$219 >> 2] | 0;
 if ($220) if ((HEAP32[$f + 100 >> 2] | 0) != (HEAP32[$f + 108 >> 2] | 0)) ___assert_fail(79512, 78904, 3316, 79568);
 _memcpy($really_zero_channel$i | 0, $zero_channel$i | 0, $228 << 2 | 0) | 0;
 $229 = $15 + ($13 * 40 | 0) | 0;
 $230 = HEAP16[$229 >> 1] | 0;
 if ($230 << 16 >> 16) {
  $233 = HEAP32[$15 + ($13 * 40 | 0) + 4 >> 2] | 0;
  $234 = $230 & 65535;
  $i$129$i = 0;
  do {
   $242 = $zero_channel$i + (HEAPU8[$233 + ($i$129$i * 3 | 0) >> 0] << 2) | 0;
   $$pre8 = HEAP8[$233 + ($i$129$i * 3 | 0) + 1 >> 0] | 0;
   if (!(HEAP32[$242 >> 2] | 0)) label = 59; else if (!(HEAP32[$zero_channel$i + (($$pre8 & 255) << 2) >> 2] | 0)) label = 59;
   if ((label | 0) == 59) {
    label = 0;
    HEAP32[$zero_channel$i + (($$pre8 & 255) << 2) >> 2] = 0;
    HEAP32[$242 >> 2] = 0;
   }
   $i$129$i = $i$129$i + 1 | 0;
  } while (($i$129$i | 0) < ($234 | 0));
 }
 $235 = $15 + ($13 * 40 | 0) + 8 | 0;
 if (!(HEAP8[$235 >> 0] | 0)) $277 = $220; else {
  $238 = $15 + ($13 * 40 | 0) + 4 | 0;
  $253 = $228;
  $i$226$i = 0;
  while (1) {
   if (($253 | 0) > 0) {
    $255 = HEAP32[$238 >> 2] | 0;
    $ch$020$i = 0;
    $j$321$i = 0;
    while (1) {
     if ((HEAPU8[$255 + ($j$321$i * 3 | 0) + 2 >> 0] | 0) == ($i$226$i | 0)) {
      $263 = $do_not_decode$i + $ch$020$i | 0;
      if (!(HEAP32[$zero_channel$i + ($j$321$i << 2) >> 2] | 0)) {
       HEAP8[$263 >> 0] = 0;
       HEAP32[$residue_buffers$i + ($ch$020$i << 2) >> 2] = HEAP32[$f + ($j$321$i << 2) + 816 >> 2];
      } else {
       HEAP8[$263 >> 0] = 1;
       HEAP32[$residue_buffers$i + ($ch$020$i << 2) >> 2] = 0;
      }
      $ch$1$i = $ch$020$i + 1 | 0;
     } else $ch$1$i = $ch$020$i;
     $j$321$i = $j$321$i + 1 | 0;
     if (($j$321$i | 0) == ($253 | 0)) {
      $ch$0$lcssa$i = $ch$1$i;
      break;
     } else $ch$020$i = $ch$1$i;
    }
   } else $ch$0$lcssa$i = 0;
   _decode_residue($f, $residue_buffers$i, $ch$0$lcssa$i, $16, HEAPU8[$15 + ($13 * 40 | 0) + $i$226$i + 24 >> 0] | 0, $do_not_decode$i);
   $273 = $i$226$i + 1 | 0;
   if (($273 | 0) >= (HEAPU8[$235 >> 0] | 0)) break;
   $253 = HEAP32[$18 >> 2] | 0;
   $i$226$i = $273;
  }
  $277 = HEAP32[$219 >> 2] | 0;
 }
 if ($277) if ((HEAP32[$f + 100 >> 2] | 0) != (HEAP32[$f + 108 >> 2] | 0)) ___assert_fail(79512, 78904, 3348, 79568);
 $284 = HEAP16[$229 >> 1] | 0;
 if ($284 << 16 >> 16) {
  $288 = ($16 | 0) > 0;
  $$pre62$i = HEAP32[$15 + ($13 * 40 | 0) + 4 >> 2] | 0;
  $i$317$in$i = $284 & 65535;
  do {
   $i$317$in$i = $i$317$in$i + -1 | 0;
   $301 = HEAP32[$f + (HEAPU8[$$pre62$i + ($i$317$in$i * 3 | 0) >> 0] << 2) + 816 >> 2] | 0;
   $306 = HEAP32[$f + (HEAPU8[$$pre62$i + ($i$317$in$i * 3 | 0) + 1 >> 0] << 2) + 816 >> 2] | 0;
   if ($288) {
    $j$413$i = 0;
    do {
     $307 = $301 + ($j$413$i << 2) | 0;
     $308 = +HEAPF32[$307 >> 2];
     $310 = $306 + ($j$413$i << 2) | 0;
     $311 = +HEAPF32[$310 >> 2];
     $312 = $311 > 0.0;
     do if ($308 > 0.0) if ($312) {
      $a2$0$i = $308 - $311;
      $m2$0$i = $308;
      break;
     } else {
      $a2$0$i = $308;
      $m2$0$i = $308 + $311;
      break;
     } else if ($312) {
      $a2$0$i = $308 + $311;
      $m2$0$i = $308;
      break;
     } else {
      $a2$0$i = $308;
      $m2$0$i = $308 - $311;
      break;
     } while (0);
     HEAPF32[$307 >> 2] = $m2$0$i;
     HEAPF32[$310 >> 2] = $a2$0$i;
     $j$413$i = $j$413$i + 1 | 0;
    } while (($j$413$i | 0) != ($16 | 0));
   }
  } while (($i$317$in$i | 0) > 0);
 }
 $290 = HEAP32[$18 >> 2] | 0;
 if (($290 | 0) > 0) {
  $292 = $15 + ($13 * 40 | 0) + 4 | 0;
  $293 = $f + 116 | 0;
  $294 = $f + 276 | 0;
  $295 = ~$16;
  $296 = $16 << 2;
  $482 = $290;
  $i$411$i = 0;
  while (1) {
   $324 = HEAP32[$f + ($i$411$i << 2) + 816 >> 2] | 0;
   do if (!(HEAP32[$really_zero_channel$i + ($i$411$i << 2) >> 2] | 0)) {
    $326 = HEAP32[$f + ($i$411$i << 2) + 1012 >> 2] | 0;
    $333 = HEAPU8[(HEAPU8[(HEAP32[$292 >> 2] | 0) + ($i$411$i * 3 | 0) + 2 >> 0] | 0) + ($15 + ($13 * 40 | 0)) + 9 >> 0] | 0;
    if (!(HEAP16[$f + ($333 << 1) + 148 >> 1] | 0)) {
     HEAP32[$293 >> 2] = 21;
     $318 = $482;
     break;
    }
    $337 = HEAP32[$294 >> 2] | 0;
    $340 = $337 + ($333 * 1596 | 0) + 1588 | 0;
    $343 = Math_imul(HEAPU8[$340 >> 0] | 0, HEAP16[$326 >> 1] | 0) | 0;
    $345 = HEAP32[$337 + ($333 * 1596 | 0) + 1592 >> 2] | 0;
    if (($345 | 0) > 1) {
     $lx$03$i$i = 0;
     $ly$04$i$i = $343;
     $q$02$i$i = 1;
     while (1) {
      $349 = HEAPU8[$337 + ($333 * 1596 | 0) + $q$02$i$i + 838 >> 0] | 0;
      $351 = HEAP16[$326 + ($349 << 1) >> 1] | 0;
      if ($351 << 16 >> 16 > -1) {
       $356 = Math_imul(HEAPU8[$340 >> 0] | 0, $351 << 16 >> 16) | 0;
       $359 = HEAPU16[$337 + ($333 * 1596 | 0) + ($349 << 1) + 338 >> 1] | 0;
       $360 = $356 - $ly$04$i$i | 0;
       $361 = $359 - $lx$03$i$i | 0;
       $363 = ($360 | 0) / ($361 | 0) | 0;
       $365 = $360 >> 31 | 1;
       $368 = (($360 | 0) > -1 ? $360 : 0 - $360 | 0) - (Math_imul(($363 | 0) > -1 ? $363 : 0 - $363 | 0, $361) | 0) | 0;
       $372 = $324 + ($lx$03$i$i << 2) | 0;
       HEAPF32[$372 >> 2] = +HEAPF32[79640 + ($ly$04$i$i << 2) >> 2] * +HEAPF32[$372 >> 2];
       $x$03$i$i$i = $lx$03$i$i + 1 | 0;
       if (($x$03$i$i$i | 0) < ((($359 | 0) > ($16 | 0) ? $16 : $359) | 0)) {
        $376 = ~$359;
        $378 = ~(($295 | 0) > ($376 | 0) ? $295 : $376);
        $err$05$i$i$i = 0;
        $x$06$i$i$i = $x$03$i$i$i;
        $y$04$i$i$i = $ly$04$i$i;
        while (1) {
         $379 = $err$05$i$i$i + $368 | 0;
         $380 = ($379 | 0) < ($361 | 0);
         $y$04$i$i$i = $y$04$i$i$i + $363 + ($380 ? 0 : $365) | 0;
         $384 = $324 + ($x$06$i$i$i << 2) | 0;
         HEAPF32[$384 >> 2] = +HEAPF32[79640 + ($y$04$i$i$i << 2) >> 2] * +HEAPF32[$384 >> 2];
         $x$06$i$i$i = $x$06$i$i$i + 1 | 0;
         if (($x$06$i$i$i | 0) == ($378 | 0)) {
          $lx$1$i$i = $359;
          $ly$1$i$i = $356;
          break;
         } else $err$05$i$i$i = $379 - ($380 ? 0 : $361) | 0;
        }
       } else {
        $lx$1$i$i = $359;
        $ly$1$i$i = $356;
       }
      } else {
       $lx$1$i$i = $lx$03$i$i;
       $ly$1$i$i = $ly$04$i$i;
      }
      $q$02$i$i = $q$02$i$i + 1 | 0;
      if (($q$02$i$i | 0) == ($345 | 0)) {
       $lx$0$lcssa$i$i = $lx$1$i$i;
       $ly$0$lcssa$i$i = $ly$1$i$i;
       break;
      } else {
       $lx$03$i$i = $lx$1$i$i;
       $ly$04$i$i = $ly$1$i$i;
      }
     }
    } else {
     $lx$0$lcssa$i$i = 0;
     $ly$0$lcssa$i$i = $343;
    }
    if (($lx$0$lcssa$i$i | 0) < ($16 | 0)) {
     $390 = +HEAPF32[79640 + ($ly$0$lcssa$i$i << 2) >> 2];
     $j$01$i$i = $lx$0$lcssa$i$i;
     do {
      $391 = $324 + ($j$01$i$i << 2) | 0;
      HEAPF32[$391 >> 2] = $390 * +HEAPF32[$391 >> 2];
      $j$01$i$i = $j$01$i$i + 1 | 0;
     } while (($j$01$i$i | 0) != ($16 | 0));
     $318 = $482;
    } else $318 = $482;
   } else {
    _memset($324 | 0, 0, $296 | 0) | 0;
    $318 = HEAP32[$18 >> 2] | 0;
   } while (0);
   $i$411$i = $i$411$i + 1 | 0;
   if (($i$411$i | 0) >= ($318 | 0)) break; else $482 = $318;
  }
  if (($318 | 0) > 0) {
   $i$59$i = 0;
   do {
    _inverse_mdct(HEAP32[$f + ($i$59$i << 2) + 816 >> 2] | 0, $10, $f, HEAPU8[$6 >> 0] | 0);
    $i$59$i = $i$59$i + 1 | 0;
   } while (($i$59$i | 0) < (HEAP32[$18 >> 2] | 0));
  }
 }
 $404 = $f + 1392 | 0;
 $405 = $f + 1400 | 0;
 $406 = $f + 1416 | 0;
 $407 = $f + 32 | 0;
 $408 = $f + 20 | 0;
 $409 = $f + 112 | 0;
 $410 = $f + 40 | 0;
 while (1) {
  $411 = HEAP8[$404 >> 0] | 0;
  if (!($411 << 24 >> 24)) {
   if (HEAP32[$405 >> 2] | 0) break;
   if (!(_next_segment($f) | 0)) break;
   $$pr$i$i$i = HEAP8[$404 >> 0] | 0;
   if (!($$pr$i$i$i << 24 >> 24)) {
    label = 110;
    break;
   } else $419 = $$pr$i$i$i;
  } else $419 = $411;
  HEAP8[$404 >> 0] = $419 + -1 << 24 >> 24;
  HEAP32[$406 >> 2] = (HEAP32[$406 >> 2] | 0) + 1;
  $422 = HEAP32[$407 >> 2] | 0;
  if (!$422) {
   if ((_fgetc(HEAP32[$408 >> 2] | 0) | 0) != -1) continue;
   HEAP32[$409 >> 2] = 1;
   continue;
  }
  if ($422 >>> 0 < (HEAP32[$410 >> 2] | 0) >>> 0) {
   HEAP32[$407 >> 2] = $422 + 1;
   continue;
  } else {
   HEAP32[$409 >> 2] = 1;
   continue;
  }
 }
 if ((label | 0) == 110) ___assert_fail(79096, 78904, 1503, 79120);
 $430 = $f + 1393 | 0;
 if (!(HEAP8[$430 >> 0] | 0)) {
  $437 = $f + 1428 | 0;
  $438 = HEAP32[$437 >> 2] | 0;
  if (!$438) $$01$i = $3; else {
   $440 = $438 + $3 | 0;
   HEAP32[$p_left >> 2] = $440;
   HEAP32[$437 >> 2] = 0;
   $$01$i = $440;
  }
 } else {
  HEAP32[$f + 1076 >> 2] = $17;
  HEAP32[$f + 1428 >> 2] = $10 - $5;
  HEAP32[$f + 1080 >> 2] = 1;
  HEAP8[$430 >> 0] = 0;
  $$01$i = $3;
 }
 $446 = $f + 1080 | 0;
 $448 = (HEAP32[$446 >> 2] | 0) == 0;
 if ((HEAP32[$f + 1404 >> 2] | 0) == (HEAP32[$f + 1420 >> 2] | 0)) {
  if (!$448) if (HEAP8[$f + 1391 >> 0] & 4) {
   $456 = (HEAP32[$f + 1424 >> 2] | 0) + ($5 - $10) | 0;
   $457 = $f + 1076 | 0;
   $458 = HEAP32[$457 >> 2] | 0;
   if ($456 >>> 0 < ($458 + $5 | 0) >>> 0) {
    $463 = ($456 >>> 0 < $458 >>> 0 ? 0 : $456 - $458 | 0) + $$01$i | 0;
    HEAP32[$len >> 2] = $463;
    HEAP32[$457 >> 2] = (HEAP32[$457 >> 2] | 0) + $463;
    $$0 = 1;
    STACKTOP = sp;
    return $$0 | 0;
   }
  }
  $469 = $$01$i - $16 + (HEAP32[$f + 1424 >> 2] | 0) | 0;
  HEAP32[$f + 1076 >> 2] = $469;
  HEAP32[$446 >> 2] = 1;
  $474 = $469;
  label = 129;
 } else if (!$448) {
  $474 = HEAP32[$f + 1076 >> 2] | 0;
  label = 129;
 }
 if ((label | 0) == 129) HEAP32[$f + 1076 >> 2] = $4 - $$01$i + $474;
 if (HEAP32[$219 >> 2] | 0) if ((HEAP32[$f + 100 >> 2] | 0) != (HEAP32[$f + 108 >> 2] | 0)) ___assert_fail(79512, 78904, 3457, 79568);
 HEAP32[$len >> 2] = $5;
 $$0 = 1;
 STACKTOP = sp;
 return $$0 | 0;
}

function _font_draw($font, $text, $x, $y, $align) {
 $font = $font | 0;
 $text = $text | 0;
 $x = +$x;
 $y = +$y;
 $align = $align | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $108 = 0, $11 = 0, $118 = 0.0, $119 = 0.0, $120 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $126 = 0.0, $127 = 0.0, $130 = 0.0, $134 = 0.0, $136 = 0.0, $138 = 0.0, $139 = 0.0, $140 = 0.0, $142 = 0.0, $143 = 0.0, $146 = 0.0, $150 = 0.0, $152 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $162 = 0.0, $166 = 0.0, $168 = 0.0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $174 = 0.0, $175 = 0.0, $178 = 0.0, $18 = 0, $182 = 0.0, $184 = 0.0, $185 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $191 = 0.0, $192 = 0.0, $195 = 0.0, $199 = 0.0, $2 = 0, $201 = 0.0, $202 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $208 = 0.0, $209 = 0.0, $212 = 0.0, $216 = 0.0, $218 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $224 = 0.0, $225 = 0.0, $228 = 0.0, $232 = 0.0, $234 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $240 = 0.0, $241 = 0.0, $244 = 0.0, $248 = 0.0, $250 = 0, $257 = 0.0, $259 = 0.0, $260 = 0.0, $261 = 0.0, $263 = 0.0, $264 = 0.0, $267 = 0.0, $271 = 0.0, $281 = 0, $282 = 0, $283 = 0, $29 = 0.0, $296 = 0, $298 = 0.0, $30 = 0, $302 = 0, $306 = 0, $308 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $317 = 0.0, $318 = 0.0, $32 = 0, $321 = 0.0, $325 = 0.0, $327 = 0, $33 = 0, $335 = 0, $34 = 0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $349 = 0.0, $35 = 0, $350 = 0.0, $351 = 0.0, $353 = 0.0, $354 = 0.0, $357 = 0.0, $36 = 0, $361 = 0.0, $363 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $369 = 0.0, $37 = 0, $370 = 0.0, $373 = 0.0, $377 = 0.0, $379 = 0.0, $38 = 0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $385 = 0.0, $386 = 0.0, $389 = 0.0, $393 = 0.0, $395 = 0.0, $397 = 0.0, $398 = 0.0, $399 = 0.0, $40 = 0, $401 = 0.0, $402 = 0.0, $405 = 0.0, $409 = 0.0, $411 = 0.0, $412 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $418 = 0.0, $419 = 0.0, $422 = 0.0, $426 = 0.0, $428 = 0.0, $429 = 0.0, $431 = 0.0, $432 = 0.0, $433 = 0.0, $435 = 0.0, $436 = 0.0, $439 = 0.0, $443 = 0.0, $445 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0.0, $451 = 0.0, $452 = 0.0, $455 = 0.0, $459 = 0.0, $461 = 0.0, $463 = 0.0, $464 = 0.0, $465 = 0.0, $467 = 0.0, $468 = 0.0, $471 = 0.0, $475 = 0.0, $477 = 0, $484 = 0.0, $486 = 0.0, $487 = 0.0, $488 = 0.0, $490 = 0.0, $491 = 0.0, $494 = 0.0, $498 = 0.0, $50 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $69 = 0, $7 = 0, $71 = 0.0, $75 = 0, $79 = 0, $81 = 0.0, $83 = 0.0, $84 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $90 = 0.0, $91 = 0.0, $94 = 0.0, $98 = 0.0, $a = 0, $b = 0, $g = 0, $line_height = 0, $line_width = 0, $q = 0, $r = 0, $state = 0, $textend = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 68 | 0;
 $2 = sp + 64 | 0;
 $textend = sp + 60 | 0;
 $r = sp + 56 | 0;
 $g = sp + 52 | 0;
 $b = sp + 48 | 0;
 $a = sp + 44 | 0;
 $state = sp + 40 | 0;
 $line_width = sp + 36 | 0;
 $line_height = sp + 32 | 0;
 $q = sp;
 HEAP32[$0 >> 2] = $text;
 HEAPF32[$1 >> 2] = $x;
 HEAPF32[$2 >> 2] = $y;
 if (!$font) ___assert_fail(7864, 5736, 161, 5792);
 if (!$text) ___assert_fail(56352, 5736, 162, 5792);
 $7 = HEAP32[$font + 8 >> 2] | 0;
 $10 = (HEAP32[$font + 12 >> 2] | 0) + $7 | 0;
 $11 = $font + 4 | 0;
 HEAPF32[$2 >> 2] = +HEAPF32[$11 >> 2] * 3.0 * .25 + $y;
 $16 = _display_get_draw_from() | 0;
 _display_draw_from(HEAP32[$font >> 2] | 0);
 HEAP32[$textend >> 2] = $text;
 _display_get_color($r, $g, $b);
 _display_get_alpha($a);
 $18 = _push_parser() | 0;
 HEAP32[$state >> 2] = $18;
 if (!$18) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$18 + 8 >> 2] = HEAP32[$r >> 2];
 HEAP32[$18 + 12 >> 2] = HEAP32[$g >> 2];
 HEAP32[$18 + 16 >> 2] = HEAP32[$b >> 2];
 HEAP32[$18 + 20 >> 2] = HEAP32[$a >> 2];
 if (_parse($state, $0, $textend) | 0) {
  $29 = +(~~$x | 0);
  $30 = $font + 20 | 0;
  $31 = $q + 4 | 0;
  $32 = $q + 8 | 0;
  $33 = $q + 12 | 0;
  $34 = $q + 16 | 0;
  $35 = $q + 20 | 0;
  $36 = $q + 24 | 0;
  $37 = $q + 28 | 0;
  $38 = ($align | 0) == 1;
  do {
   $40 = HEAP32[$state >> 2] | 0;
   _display_set_color(HEAP32[$40 + 8 >> 2] | 0, HEAP32[$40 + 12 >> 2] | 0, HEAP32[$40 + 16 >> 2] | 0);
   _display_set_alpha(HEAP32[(HEAP32[$state >> 2] | 0) + 20 >> 2] | 0);
   $50 = HEAP32[$0 >> 2] | 0;
   if (($50 | 0) == ($text | 0)) label = 11; else if ((HEAP8[$50 + -1 >> 0] & -2) << 24 >> 24 != 124) label = 11;
   do if ((label | 0) == 11) {
    label = 0;
    _font_get_textsize($font, $50, $line_width, $line_height, 1);
    if (($align | 0) == 2) {
     HEAPF32[$1 >> 2] = $29 - +HEAPF32[$line_width >> 2] * .5;
     break;
    } else if (($align | 0) == 3) {
     HEAPF32[$1 >> 2] = $29 - +HEAPF32[$line_width >> 2];
     break;
    } else break;
   } while (0);
   $60 = HEAP32[$0 >> 2] | 0;
   L22 : do if ($60 >>> 0 < (HEAP32[$textend >> 2] | 0) >>> 0) {
    if ($38) {
     $64 = $60;
     while (1) {
      $63 = HEAP8[$64 >> 0] | 0;
      $65 = $63 & 255;
      if ($63 << 24 >> 24 == 10) {
       _font_get_textsize($font, $64 + 1 | 0, $line_width, $line_height, 1);
       HEAPF32[$1 >> 2] = $29;
       HEAPF32[$2 >> 2] = +HEAPF32[$line_height >> 2] + +HEAPF32[$2 >> 2];
      } else if (($65 | 0) >= ($7 | 0) & ($65 | 0) < ($10 | 0)) {
       $69 = HEAP32[$state >> 2] | 0;
       $71 = +HEAPF32[$69 + 4 >> 2];
       _stbtt_GetBakedQuad(HEAP32[$30 >> 2] | 0, $65 - $7 | 0, $1, $2, $q, +HEAPF32[$69 >> 2]);
       $75 = HEAP32[$state >> 2] | 0;
       if (!(HEAP8[$75 + 25 >> 0] | 0)) $108 = $75; else {
        _display_set_color(0, 0, 0);
        $79 = HEAP32[$state >> 2] | 0;
        $81 = +HEAPF32[$79 + 40 >> 2];
        $83 = +HEAPF32[$79 + 44 >> 2];
        $84 = +HEAPF32[$q >> 2];
        $86 = +HEAPF32[$32 >> 2];
        $87 = +HEAPF32[$33 >> 2];
        $88 = +HEAPF32[$34 >> 2];
        $90 = +HEAPF32[$36 >> 2];
        $91 = +HEAPF32[$37 >> 2];
        $94 = $83 + +HEAPF32[$31 >> 2];
        $98 = $83 + +HEAPF32[$35 >> 2];
        _display_draw_quad($86, $87, $90, $87, $90, $91, $86, $91, $81 + ($71 + $84), $94, $81 + ($71 + $88), $94, $81 + $88, $98, $81 + $84, $98);
        $100 = HEAP32[$state >> 2] | 0;
        _display_set_color(HEAP32[$100 + 8 >> 2] | 0, HEAP32[$100 + 12 >> 2] | 0, HEAP32[$100 + 16 >> 2] | 0);
        $108 = HEAP32[$state >> 2] | 0;
       }
       if (HEAP8[$108 + 24 >> 0] | 0) {
        _display_set_color(HEAP32[$108 + 28 >> 2] | 0, HEAP32[$108 + 32 >> 2] | 0, HEAP32[$108 + 36 >> 2] | 0);
        $118 = +HEAPF32[$11 >> 2] * .03999999910593033;
        $119 = $118 * 0.0;
        $120 = +HEAPF32[$q >> 2];
        $122 = +HEAPF32[$32 >> 2];
        $123 = +HEAPF32[$33 >> 2];
        $124 = +HEAPF32[$34 >> 2];
        $126 = +HEAPF32[$36 >> 2];
        $127 = +HEAPF32[$37 >> 2];
        $130 = +HEAPF32[$31 >> 2] + $119;
        $134 = $119 + +HEAPF32[$35 >> 2];
        _display_draw_quad($122, $123, $126, $123, $126, $127, $122, $127, $71 + $120 - $118, $130, $71 + $124 - $118, $130, $124 - $118, $134, $120 - $118, $134);
        $136 = +HEAPF32[$q >> 2];
        $138 = +HEAPF32[$32 >> 2];
        $139 = +HEAPF32[$33 >> 2];
        $140 = +HEAPF32[$34 >> 2];
        $142 = +HEAPF32[$36 >> 2];
        $143 = +HEAPF32[$37 >> 2];
        $146 = $119 + +HEAPF32[$31 >> 2];
        $150 = $119 + +HEAPF32[$35 >> 2];
        _display_draw_quad($138, $139, $142, $139, $142, $143, $138, $143, $118 + ($71 + $136), $146, $118 + ($71 + $140), $146, $118 + $140, $150, $118 + $136, $150);
        $152 = +HEAPF32[$q >> 2];
        $154 = +HEAPF32[$32 >> 2];
        $155 = +HEAPF32[$33 >> 2];
        $156 = +HEAPF32[$34 >> 2];
        $158 = +HEAPF32[$36 >> 2];
        $159 = +HEAPF32[$37 >> 2];
        $162 = +HEAPF32[$31 >> 2] - $118;
        $166 = +HEAPF32[$35 >> 2] - $118;
        _display_draw_quad($154, $155, $158, $155, $158, $159, $154, $159, $119 + ($71 + $152), $162, $119 + ($71 + $156), $162, $119 + $156, $166, $119 + $152, $166);
        $168 = +HEAPF32[$q >> 2];
        $170 = +HEAPF32[$32 >> 2];
        $171 = +HEAPF32[$33 >> 2];
        $172 = +HEAPF32[$34 >> 2];
        $174 = +HEAPF32[$36 >> 2];
        $175 = +HEAPF32[$37 >> 2];
        $178 = $118 + +HEAPF32[$31 >> 2];
        $182 = $118 + +HEAPF32[$35 >> 2];
        _display_draw_quad($170, $171, $174, $171, $174, $175, $170, $175, $119 + ($71 + $168), $178, $119 + ($71 + $172), $178, $119 + $172, $182, $119 + $168, $182);
        $184 = $118 * .7071067690849304;
        $185 = +HEAPF32[$q >> 2];
        $187 = +HEAPF32[$32 >> 2];
        $188 = +HEAPF32[$33 >> 2];
        $189 = +HEAPF32[$34 >> 2];
        $191 = +HEAPF32[$36 >> 2];
        $192 = +HEAPF32[$37 >> 2];
        $195 = $184 + +HEAPF32[$31 >> 2];
        $199 = $184 + +HEAPF32[$35 >> 2];
        _display_draw_quad($187, $188, $191, $188, $191, $192, $187, $192, $184 + ($71 + $185), $195, $184 + ($71 + $189), $195, $184 + $189, $199, $184 + $185, $199);
        $201 = $118 * -.7071067690849304;
        $202 = +HEAPF32[$q >> 2];
        $204 = +HEAPF32[$32 >> 2];
        $205 = +HEAPF32[$33 >> 2];
        $206 = +HEAPF32[$34 >> 2];
        $208 = +HEAPF32[$36 >> 2];
        $209 = +HEAPF32[$37 >> 2];
        $212 = $184 + +HEAPF32[$31 >> 2];
        $216 = $184 + +HEAPF32[$35 >> 2];
        _display_draw_quad($204, $205, $208, $205, $208, $209, $204, $209, $201 + ($71 + $202), $212, $201 + ($71 + $206), $212, $201 + $206, $216, $201 + $202, $216);
        $218 = +HEAPF32[$q >> 2];
        $220 = +HEAPF32[$32 >> 2];
        $221 = +HEAPF32[$33 >> 2];
        $222 = +HEAPF32[$34 >> 2];
        $224 = +HEAPF32[$36 >> 2];
        $225 = +HEAPF32[$37 >> 2];
        $228 = $201 + +HEAPF32[$31 >> 2];
        $232 = $201 + +HEAPF32[$35 >> 2];
        _display_draw_quad($220, $221, $224, $221, $224, $225, $220, $225, $201 + ($71 + $218), $228, $201 + ($71 + $222), $228, $201 + $222, $232, $201 + $218, $232);
        $234 = +HEAPF32[$q >> 2];
        $236 = +HEAPF32[$32 >> 2];
        $237 = +HEAPF32[$33 >> 2];
        $238 = +HEAPF32[$34 >> 2];
        $240 = +HEAPF32[$36 >> 2];
        $241 = +HEAPF32[$37 >> 2];
        $244 = $201 + +HEAPF32[$31 >> 2];
        $248 = $201 + +HEAPF32[$35 >> 2];
        _display_draw_quad($236, $237, $240, $237, $240, $241, $236, $241, $184 + ($71 + $234), $244, $184 + ($71 + $238), $244, $184 + $238, $248, $184 + $234, $248);
        $250 = HEAP32[$state >> 2] | 0;
        _display_set_color(HEAP32[$250 + 8 >> 2] | 0, HEAP32[$250 + 12 >> 2] | 0, HEAP32[$250 + 16 >> 2] | 0);
       }
       $257 = +HEAPF32[$q >> 2];
       $259 = +HEAPF32[$32 >> 2];
       $260 = +HEAPF32[$33 >> 2];
       $261 = +HEAPF32[$34 >> 2];
       $263 = +HEAPF32[$36 >> 2];
       $264 = +HEAPF32[$37 >> 2];
       $267 = +HEAPF32[$31 >> 2] + 0.0;
       $271 = +HEAPF32[$35 >> 2] + 0.0;
       _display_draw_quad($259, $260, $263, $260, $263, $264, $259, $264, $71 + $257 + 0.0, $267, $71 + $261 + 0.0, $267, $261 + 0.0, $271, $257 + 0.0, $271);
      }
      $64 = (HEAP32[$0 >> 2] | 0) + 1 | 0;
      HEAP32[$0 >> 2] = $64;
      if ($64 >>> 0 >= (HEAP32[$textend >> 2] | 0) >>> 0) break L22;
     }
    } else $282 = $60;
    do {
     $281 = HEAP8[$282 >> 0] | 0;
     $283 = $281 & 255;
     if ($281 << 24 >> 24 == 10) {
      _font_get_textsize($font, $282 + 1 | 0, $line_width, $line_height, 1);
      if (($align | 0) == 2) HEAPF32[$1 >> 2] = $29 - +HEAPF32[$line_width >> 2] * .5; else if (($align | 0) == 3) HEAPF32[$1 >> 2] = $29 - +HEAPF32[$line_width >> 2];
      HEAPF32[$2 >> 2] = +HEAPF32[$line_height >> 2] + +HEAPF32[$2 >> 2];
     } else if (($283 | 0) >= ($7 | 0) & ($283 | 0) < ($10 | 0)) {
      $296 = HEAP32[$state >> 2] | 0;
      $298 = +HEAPF32[$296 + 4 >> 2];
      _stbtt_GetBakedQuad(HEAP32[$30 >> 2] | 0, $283 - $7 | 0, $1, $2, $q, +HEAPF32[$296 >> 2]);
      $302 = HEAP32[$state >> 2] | 0;
      if (!(HEAP8[$302 + 25 >> 0] | 0)) $335 = $302; else {
       _display_set_color(0, 0, 0);
       $306 = HEAP32[$state >> 2] | 0;
       $308 = +HEAPF32[$306 + 40 >> 2];
       $310 = +HEAPF32[$306 + 44 >> 2];
       $311 = +HEAPF32[$q >> 2];
       $313 = +HEAPF32[$32 >> 2];
       $314 = +HEAPF32[$33 >> 2];
       $315 = +HEAPF32[$34 >> 2];
       $317 = +HEAPF32[$36 >> 2];
       $318 = +HEAPF32[$37 >> 2];
       $321 = $310 + +HEAPF32[$31 >> 2];
       $325 = $310 + +HEAPF32[$35 >> 2];
       _display_draw_quad($313, $314, $317, $314, $317, $318, $313, $318, $308 + ($298 + $311), $321, $308 + ($298 + $315), $321, $308 + $315, $325, $308 + $311, $325);
       $327 = HEAP32[$state >> 2] | 0;
       _display_set_color(HEAP32[$327 + 8 >> 2] | 0, HEAP32[$327 + 12 >> 2] | 0, HEAP32[$327 + 16 >> 2] | 0);
       $335 = HEAP32[$state >> 2] | 0;
      }
      if (HEAP8[$335 + 24 >> 0] | 0) {
       _display_set_color(HEAP32[$335 + 28 >> 2] | 0, HEAP32[$335 + 32 >> 2] | 0, HEAP32[$335 + 36 >> 2] | 0);
       $345 = +HEAPF32[$11 >> 2] * .03999999910593033;
       $346 = $345 * 0.0;
       $347 = +HEAPF32[$q >> 2];
       $349 = +HEAPF32[$32 >> 2];
       $350 = +HEAPF32[$33 >> 2];
       $351 = +HEAPF32[$34 >> 2];
       $353 = +HEAPF32[$36 >> 2];
       $354 = +HEAPF32[$37 >> 2];
       $357 = +HEAPF32[$31 >> 2] + $346;
       $361 = $346 + +HEAPF32[$35 >> 2];
       _display_draw_quad($349, $350, $353, $350, $353, $354, $349, $354, $298 + $347 - $345, $357, $298 + $351 - $345, $357, $351 - $345, $361, $347 - $345, $361);
       $363 = +HEAPF32[$q >> 2];
       $365 = +HEAPF32[$32 >> 2];
       $366 = +HEAPF32[$33 >> 2];
       $367 = +HEAPF32[$34 >> 2];
       $369 = +HEAPF32[$36 >> 2];
       $370 = +HEAPF32[$37 >> 2];
       $373 = $346 + +HEAPF32[$31 >> 2];
       $377 = $346 + +HEAPF32[$35 >> 2];
       _display_draw_quad($365, $366, $369, $366, $369, $370, $365, $370, $345 + ($298 + $363), $373, $345 + ($298 + $367), $373, $345 + $367, $377, $345 + $363, $377);
       $379 = +HEAPF32[$q >> 2];
       $381 = +HEAPF32[$32 >> 2];
       $382 = +HEAPF32[$33 >> 2];
       $383 = +HEAPF32[$34 >> 2];
       $385 = +HEAPF32[$36 >> 2];
       $386 = +HEAPF32[$37 >> 2];
       $389 = +HEAPF32[$31 >> 2] - $345;
       $393 = +HEAPF32[$35 >> 2] - $345;
       _display_draw_quad($381, $382, $385, $382, $385, $386, $381, $386, $346 + ($298 + $379), $389, $346 + ($298 + $383), $389, $346 + $383, $393, $346 + $379, $393);
       $395 = +HEAPF32[$q >> 2];
       $397 = +HEAPF32[$32 >> 2];
       $398 = +HEAPF32[$33 >> 2];
       $399 = +HEAPF32[$34 >> 2];
       $401 = +HEAPF32[$36 >> 2];
       $402 = +HEAPF32[$37 >> 2];
       $405 = $345 + +HEAPF32[$31 >> 2];
       $409 = $345 + +HEAPF32[$35 >> 2];
       _display_draw_quad($397, $398, $401, $398, $401, $402, $397, $402, $346 + ($298 + $395), $405, $346 + ($298 + $399), $405, $346 + $399, $409, $346 + $395, $409);
       $411 = $345 * .7071067690849304;
       $412 = +HEAPF32[$q >> 2];
       $414 = +HEAPF32[$32 >> 2];
       $415 = +HEAPF32[$33 >> 2];
       $416 = +HEAPF32[$34 >> 2];
       $418 = +HEAPF32[$36 >> 2];
       $419 = +HEAPF32[$37 >> 2];
       $422 = $411 + +HEAPF32[$31 >> 2];
       $426 = $411 + +HEAPF32[$35 >> 2];
       _display_draw_quad($414, $415, $418, $415, $418, $419, $414, $419, $411 + ($298 + $412), $422, $411 + ($298 + $416), $422, $411 + $416, $426, $411 + $412, $426);
       $428 = $345 * -.7071067690849304;
       $429 = +HEAPF32[$q >> 2];
       $431 = +HEAPF32[$32 >> 2];
       $432 = +HEAPF32[$33 >> 2];
       $433 = +HEAPF32[$34 >> 2];
       $435 = +HEAPF32[$36 >> 2];
       $436 = +HEAPF32[$37 >> 2];
       $439 = $411 + +HEAPF32[$31 >> 2];
       $443 = $411 + +HEAPF32[$35 >> 2];
       _display_draw_quad($431, $432, $435, $432, $435, $436, $431, $436, $428 + ($298 + $429), $439, $428 + ($298 + $433), $439, $428 + $433, $443, $428 + $429, $443);
       $445 = +HEAPF32[$q >> 2];
       $447 = +HEAPF32[$32 >> 2];
       $448 = +HEAPF32[$33 >> 2];
       $449 = +HEAPF32[$34 >> 2];
       $451 = +HEAPF32[$36 >> 2];
       $452 = +HEAPF32[$37 >> 2];
       $455 = $428 + +HEAPF32[$31 >> 2];
       $459 = $428 + +HEAPF32[$35 >> 2];
       _display_draw_quad($447, $448, $451, $448, $451, $452, $447, $452, $428 + ($298 + $445), $455, $428 + ($298 + $449), $455, $428 + $449, $459, $428 + $445, $459);
       $461 = +HEAPF32[$q >> 2];
       $463 = +HEAPF32[$32 >> 2];
       $464 = +HEAPF32[$33 >> 2];
       $465 = +HEAPF32[$34 >> 2];
       $467 = +HEAPF32[$36 >> 2];
       $468 = +HEAPF32[$37 >> 2];
       $471 = $428 + +HEAPF32[$31 >> 2];
       $475 = $428 + +HEAPF32[$35 >> 2];
       _display_draw_quad($463, $464, $467, $464, $467, $468, $463, $468, $411 + ($298 + $461), $471, $411 + ($298 + $465), $471, $411 + $465, $475, $411 + $461, $475);
       $477 = HEAP32[$state >> 2] | 0;
       _display_set_color(HEAP32[$477 + 8 >> 2] | 0, HEAP32[$477 + 12 >> 2] | 0, HEAP32[$477 + 16 >> 2] | 0);
      }
      $484 = +HEAPF32[$q >> 2];
      $486 = +HEAPF32[$32 >> 2];
      $487 = +HEAPF32[$33 >> 2];
      $488 = +HEAPF32[$34 >> 2];
      $490 = +HEAPF32[$36 >> 2];
      $491 = +HEAPF32[$37 >> 2];
      $494 = +HEAPF32[$31 >> 2] + 0.0;
      $498 = +HEAPF32[$35 >> 2] + 0.0;
      _display_draw_quad($486, $487, $490, $487, $490, $491, $486, $491, $298 + $484 + 0.0, $494, $298 + $488 + 0.0, $494, $488 + 0.0, $498, $484 + 0.0, $498);
     }
     $282 = (HEAP32[$0 >> 2] | 0) + 1 | 0;
     HEAP32[$0 >> 2] = $282;
    } while ($282 >>> 0 < (HEAP32[$textend >> 2] | 0) >>> 0);
   } while (0);
  } while (_parse($state, $0, $textend) | 0);
 }
 _pop_parser();
 _display_set_color(HEAP32[$r >> 2] | 0, HEAP32[$g >> 2] | 0, HEAP32[$b >> 2] | 0);
 _display_set_alpha(HEAP32[$a >> 2] | 0);
 _display_draw_from($16);
 STACKTOP = sp;
 return;
}
function __ZNSt3__16__sortIRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_($__first, $__last, $__comp) {
 $__first = $__first | 0;
 $__last = $__last | 0;
 $__comp = $__comp | 0;
 var $$0 = 0, $$0$ph = 0, $$01$ph = 0, $0 = 0, $1 = 0, $100 = 0, $104 = 0, $110 = 0, $112 = 0, $115 = 0, $116 = 0, $12 = 0, $121 = 0, $122 = 0, $126 = 0, $13 = 0, $132 = 0, $133 = 0, $134 = 0, $137 = 0, $139 = 0, $142 = 0, $143 = 0, $148 = 0, $149 = 0, $153 = 0, $159 = 0, $161 = 0, $164 = 0, $165 = 0, $170 = 0, $171 = 0, $175 = 0, $18 = 0, $181 = 0, $183 = 0, $186 = 0, $187 = 0, $19 = 0, $192 = 0, $193 = 0, $197 = 0, $2 = 0, $203 = 0, $205 = 0, $208 = 0, $209 = 0, $214 = 0, $215 = 0, $219 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $233 = 0, $235 = 0, $238 = 0, $239 = 0, $244 = 0, $245 = 0, $249 = 0, $253 = 0, $256 = 0, $258 = 0, $261 = 0, $262 = 0, $267 = 0, $268 = 0, $27 = 0, $272 = 0, $276 = 0, $279 = 0, $281 = 0, $284 = 0, $285 = 0, $29 = 0, $290 = 0, $291 = 0, $295 = 0, $3 = 0, $302 = 0, $304 = 0, $307 = 0, $308 = 0, $31 = 0, $313 = 0, $314 = 0, $318 = 0, $32 = 0, $324 = 0, $326 = 0, $327 = 0, $329 = 0, $332 = 0, $333 = 0, $338 = 0, $339 = 0, $34 = 0, $343 = 0, $349 = 0, $351 = 0, $354 = 0, $355 = 0, $360 = 0, $361 = 0, $365 = 0, $369 = 0, $37 = 0, $371 = 0, $374 = 0, $375 = 0, $38 = 0, $380 = 0, $381 = 0, $385 = 0, $389 = 0, $394 = 0, $395 = 0, $399 = 0, $4 = 0, $405 = 0, $407 = 0, $410 = 0, $411 = 0, $416 = 0, $417 = 0, $421 = 0, $429 = 0, $43 = 0, $433 = 0, $437 = 0, $439 = 0, $44 = 0, $442 = 0, $443 = 0, $448 = 0, $449 = 0, $453 = 0, $460 = 0, $465 = 0, $467 = 0, $470 = 0, $471 = 0, $476 = 0, $477 = 0, $48 = 0, $481 = 0, $487 = 0, $489 = 0, $492 = 0, $493 = 0, $498 = 0, $499 = 0, $503 = 0, $508 = 0, $512 = 0, $517 = 0, $519 = 0, $522 = 0, $523 = 0, $528 = 0, $529 = 0, $533 = 0, $54 = 0, $542 = 0, $544 = 0, $547 = 0, $548 = 0, $553 = 0, $554 = 0, $558 = 0, $56 = 0, $564 = 0, $565 = 0, $567 = 0, $59 = 0, $60 = 0, $65 = 0, $66 = 0, $7 = 0, $70 = 0, $74 = 0, $76 = 0, $79 = 0, $80 = 0, $85 = 0, $86 = 0, $9 = 0, $90 = 0, $94 = 0, $99 = 0, $__i$09 = 0, $__i$1 = 0, $__i$2 = 0, $__i$2$ph = 0, $__i$3 = 0, $__i$3$ph = 0, $__i$4 = 0, $__j$0 = 0, $__j$1$ph = 0, $__j$2 = 0, $__j$3 = 0, $__j$4$ph = 0, $__j$5 = 0, $__m$0$ph = 0, $__m$2 = 0, $__n_swaps$0 = 0, $__n_swaps$3 = 0, $__n_swaps$4$ph = 0, $__n_swaps$5 = 0, $__n_swaps$6 = 0, label = 0;
 $$0$ph = $__first;
 $$01$ph = $__last;
 L1 : while (1) {
  $0 = $$01$ph;
  $1 = $$01$ph + -8 | 0;
  $$0 = $$0$ph;
  L3 : while (1) {
   $2 = $$0;
   $3 = $0 - $2 | 0;
   $4 = $3 >> 3;
   switch ($4 | 0) {
   case 4:
    {
     label = 14;
     break L1;
     break;
    }
   case 2:
    {
     label = 4;
     break L1;
     break;
    }
   case 5:
    {
     label = 15;
     break L1;
     break;
    }
   case 3:
    {
     label = 6;
     break L1;
     break;
    }
   case 1:
   case 0:
    {
     label = 67;
     break L1;
     break;
    }
   default:
    {}
   }
   if (($3 | 0) < 248) {
    label = 21;
    break L1;
   }
   $225 = ($4 | 0) / 2 | 0;
   $226 = $$0 + ($225 << 3) | 0;
   do if (($3 | 0) > 7992) {
    $227 = ($4 | 0) / 4 | 0;
    $228 = $$0 + ($227 << 3) | 0;
    $229 = $$0 + ($227 + $225 << 3) | 0;
    $230 = __ZNSt3__17__sort4IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_T_($$0, $228, $226, $229, $__comp) | 0;
    if (FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($1, $229) | 0) {
     $233 = $229;
     $235 = HEAP32[$233 >> 2] | 0;
     $238 = HEAP32[$233 + 4 >> 2] | 0;
     $239 = $1;
     $244 = HEAP32[$239 + 4 >> 2] | 0;
     $245 = $229;
     HEAP32[$245 >> 2] = HEAP32[$239 >> 2];
     HEAP32[$245 + 4 >> 2] = $244;
     $249 = $1;
     HEAP32[$249 >> 2] = $235;
     HEAP32[$249 + 4 >> 2] = $238;
     $253 = $230 + 1 | 0;
     if (FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($229, $226) | 0) {
      $256 = $226;
      $258 = HEAP32[$256 >> 2] | 0;
      $261 = HEAP32[$256 + 4 >> 2] | 0;
      $262 = $229;
      $267 = HEAP32[$262 + 4 >> 2] | 0;
      $268 = $226;
      HEAP32[$268 >> 2] = HEAP32[$262 >> 2];
      HEAP32[$268 + 4 >> 2] = $267;
      $272 = $229;
      HEAP32[$272 >> 2] = $258;
      HEAP32[$272 + 4 >> 2] = $261;
      $276 = $230 + 2 | 0;
      if (FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($226, $228) | 0) {
       $279 = $228;
       $281 = HEAP32[$279 >> 2] | 0;
       $284 = HEAP32[$279 + 4 >> 2] | 0;
       $285 = $226;
       $290 = HEAP32[$285 + 4 >> 2] | 0;
       $291 = $228;
       HEAP32[$291 >> 2] = HEAP32[$285 >> 2];
       HEAP32[$291 + 4 >> 2] = $290;
       $295 = $226;
       HEAP32[$295 >> 2] = $281;
       HEAP32[$295 + 4 >> 2] = $284;
       if (FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($228, $$0) | 0) {
        $302 = $$0;
        $304 = HEAP32[$302 >> 2] | 0;
        $307 = HEAP32[$302 + 4 >> 2] | 0;
        $308 = $228;
        $313 = HEAP32[$308 + 4 >> 2] | 0;
        $314 = $$0;
        HEAP32[$314 >> 2] = HEAP32[$308 >> 2];
        HEAP32[$314 + 4 >> 2] = $313;
        $318 = $228;
        HEAP32[$318 >> 2] = $304;
        HEAP32[$318 + 4 >> 2] = $307;
        $__n_swaps$0 = $230 + 4 | 0;
       } else $__n_swaps$0 = $230 + 3 | 0;
      } else $__n_swaps$0 = $276;
     } else $__n_swaps$0 = $253;
    } else $__n_swaps$0 = $230;
   } else {
    $324 = FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($226, $$0) | 0;
    $326 = FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($1, $226) | 0;
    if (!$324) {
     if (!$326) {
      $__n_swaps$0 = 0;
      break;
     }
     $327 = $226;
     $329 = HEAP32[$327 >> 2] | 0;
     $332 = HEAP32[$327 + 4 >> 2] | 0;
     $333 = $1;
     $338 = HEAP32[$333 + 4 >> 2] | 0;
     $339 = $226;
     HEAP32[$339 >> 2] = HEAP32[$333 >> 2];
     HEAP32[$339 + 4 >> 2] = $338;
     $343 = $1;
     HEAP32[$343 >> 2] = $329;
     HEAP32[$343 + 4 >> 2] = $332;
     if (!(FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($226, $$0) | 0)) {
      $__n_swaps$0 = 1;
      break;
     }
     $349 = $$0;
     $351 = HEAP32[$349 >> 2] | 0;
     $354 = HEAP32[$349 + 4 >> 2] | 0;
     $355 = $226;
     $360 = HEAP32[$355 + 4 >> 2] | 0;
     $361 = $$0;
     HEAP32[$361 >> 2] = HEAP32[$355 >> 2];
     HEAP32[$361 + 4 >> 2] = $360;
     $365 = $226;
     HEAP32[$365 >> 2] = $351;
     HEAP32[$365 + 4 >> 2] = $354;
     $__n_swaps$0 = 2;
     break;
    }
    $369 = $$0;
    $371 = HEAP32[$369 >> 2] | 0;
    $374 = HEAP32[$369 + 4 >> 2] | 0;
    if ($326) {
     $375 = $1;
     $380 = HEAP32[$375 + 4 >> 2] | 0;
     $381 = $$0;
     HEAP32[$381 >> 2] = HEAP32[$375 >> 2];
     HEAP32[$381 + 4 >> 2] = $380;
     $385 = $1;
     HEAP32[$385 >> 2] = $371;
     HEAP32[$385 + 4 >> 2] = $374;
     $__n_swaps$0 = 1;
     break;
    }
    $389 = $226;
    $394 = HEAP32[$389 + 4 >> 2] | 0;
    $395 = $$0;
    HEAP32[$395 >> 2] = HEAP32[$389 >> 2];
    HEAP32[$395 + 4 >> 2] = $394;
    $399 = $226;
    HEAP32[$399 >> 2] = $371;
    HEAP32[$399 + 4 >> 2] = $374;
    if (FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($1, $226) | 0) {
     $405 = $226;
     $407 = HEAP32[$405 >> 2] | 0;
     $410 = HEAP32[$405 + 4 >> 2] | 0;
     $411 = $1;
     $416 = HEAP32[$411 + 4 >> 2] | 0;
     $417 = $226;
     HEAP32[$417 >> 2] = HEAP32[$411 >> 2];
     HEAP32[$417 + 4 >> 2] = $416;
     $421 = $1;
     HEAP32[$421 >> 2] = $407;
     HEAP32[$421 + 4 >> 2] = $410;
     $__n_swaps$0 = 2;
    } else $__n_swaps$0 = 1;
   } while (0);
   do if (FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($$0, $226) | 0) {
    $__j$3 = $1;
    $__n_swaps$3 = $__n_swaps$0;
   } else {
    $__j$0 = $1;
    while (1) {
     $__j$0 = $__j$0 + -8 | 0;
     if (($$0 | 0) == ($__j$0 | 0)) break;
     if (FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($__j$0, $226) | 0) {
      label = 50;
      break;
     }
    }
    if ((label | 0) == 50) {
     label = 0;
     $487 = $$0;
     $489 = HEAP32[$487 >> 2] | 0;
     $492 = HEAP32[$487 + 4 >> 2] | 0;
     $493 = $__j$0;
     $498 = HEAP32[$493 + 4 >> 2] | 0;
     $499 = $$0;
     HEAP32[$499 >> 2] = HEAP32[$493 >> 2];
     HEAP32[$499 + 4 >> 2] = $498;
     $503 = $__j$0;
     HEAP32[$503 >> 2] = $489;
     HEAP32[$503 + 4 >> 2] = $492;
     $__j$3 = $__j$0;
     $__n_swaps$3 = $__n_swaps$0 + 1 | 0;
     break;
    }
    $429 = $$0 + 8 | 0;
    if (FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($$0, $1) | 0) $__i$1 = $429; else {
     if (($429 | 0) == ($1 | 0)) {
      label = 67;
      break L1;
     } else $__i$09 = $429;
     while (1) {
      $433 = $__i$09 + 8 | 0;
      if (FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($$0, $__i$09) | 0) break;
      if (($433 | 0) == ($1 | 0)) {
       label = 67;
       break L1;
      } else $__i$09 = $433;
     }
     $437 = $__i$09;
     $439 = HEAP32[$437 >> 2] | 0;
     $442 = HEAP32[$437 + 4 >> 2] | 0;
     $443 = $1;
     $448 = HEAP32[$443 + 4 >> 2] | 0;
     $449 = $__i$09;
     HEAP32[$449 >> 2] = HEAP32[$443 >> 2];
     HEAP32[$449 + 4 >> 2] = $448;
     $453 = $1;
     HEAP32[$453 >> 2] = $439;
     HEAP32[$453 + 4 >> 2] = $442;
     $__i$1 = $433;
    }
    if (($__i$1 | 0) == ($1 | 0)) {
     label = 67;
     break L1;
    } else {
     $__i$2$ph = $__i$1;
     $__j$1$ph = $1;
    }
    while (1) {
     $__i$2 = $__i$2$ph;
     while (1) {
      $460 = $__i$2 + 8 | 0;
      if (FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($$0, $__i$2) | 0) {
       $__j$2 = $__j$1$ph;
       break;
      } else $__i$2 = $460;
     }
     do $__j$2 = $__j$2 + -8 | 0; while (FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($$0, $__j$2) | 0);
     if ($__i$2 >>> 0 >= $__j$2 >>> 0) {
      $$0 = $__i$2;
      continue L3;
     }
     $465 = $__i$2;
     $467 = HEAP32[$465 >> 2] | 0;
     $470 = HEAP32[$465 + 4 >> 2] | 0;
     $471 = $__j$2;
     $476 = HEAP32[$471 + 4 >> 2] | 0;
     $477 = $__i$2;
     HEAP32[$477 >> 2] = HEAP32[$471 >> 2];
     HEAP32[$477 + 4 >> 2] = $476;
     $481 = $__j$2;
     HEAP32[$481 >> 2] = $467;
     HEAP32[$481 + 4 >> 2] = $470;
     $__i$2$ph = $460;
     $__j$1$ph = $__j$2;
    }
   } while (0);
   $508 = $$0 + 8 | 0;
   L47 : do if ($508 >>> 0 < $__j$3 >>> 0) {
    $__i$3$ph = $508;
    $__j$4$ph = $__j$3;
    $__m$0$ph = $226;
    $__n_swaps$4$ph = $__n_swaps$3;
    while (1) {
     $__i$3 = $__i$3$ph;
     while (1) {
      $512 = $__i$3 + 8 | 0;
      if (FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($__i$3, $__m$0$ph) | 0) $__i$3 = $512; else {
       $__j$5 = $__j$4$ph;
       break;
      }
     }
     do $__j$5 = $__j$5 + -8 | 0; while (!(FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($__j$5, $__m$0$ph) | 0));
     if ($__i$3 >>> 0 > $__j$5 >>> 0) {
      $__i$4 = $__i$3;
      $__m$2 = $__m$0$ph;
      $__n_swaps$5 = $__n_swaps$4$ph;
      break L47;
     }
     $517 = $__i$3;
     $519 = HEAP32[$517 >> 2] | 0;
     $522 = HEAP32[$517 + 4 >> 2] | 0;
     $523 = $__j$5;
     $528 = HEAP32[$523 + 4 >> 2] | 0;
     $529 = $__i$3;
     HEAP32[$529 >> 2] = HEAP32[$523 >> 2];
     HEAP32[$529 + 4 >> 2] = $528;
     $533 = $__j$5;
     HEAP32[$533 >> 2] = $519;
     HEAP32[$533 + 4 >> 2] = $522;
     $__i$3$ph = $512;
     $__j$4$ph = $__j$5;
     $__m$0$ph = ($__m$0$ph | 0) == ($__i$3 | 0) ? $__j$5 : $__m$0$ph;
     $__n_swaps$4$ph = $__n_swaps$4$ph + 1 | 0;
    }
   } else {
    $__i$4 = $508;
    $__m$2 = $226;
    $__n_swaps$5 = $__n_swaps$3;
   } while (0);
   if (($__i$4 | 0) == ($__m$2 | 0)) $__n_swaps$6 = $__n_swaps$5; else if (FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($__m$2, $__i$4) | 0) {
    $542 = $__i$4;
    $544 = HEAP32[$542 >> 2] | 0;
    $547 = HEAP32[$542 + 4 >> 2] | 0;
    $548 = $__m$2;
    $553 = HEAP32[$548 + 4 >> 2] | 0;
    $554 = $__i$4;
    HEAP32[$554 >> 2] = HEAP32[$548 >> 2];
    HEAP32[$554 + 4 >> 2] = $553;
    $558 = $__m$2;
    HEAP32[$558 >> 2] = $544;
    HEAP32[$558 + 4 >> 2] = $547;
    $__n_swaps$6 = $__n_swaps$5 + 1 | 0;
   } else $__n_swaps$6 = $__n_swaps$5;
   if (!$__n_swaps$6) {
    $564 = __ZNSt3__127__insertion_sort_incompleteIRPFbRK6b2PairS3_EPS1_EEbT0_S8_T_($$0, $__i$4, $__comp) | 0;
    $565 = $__i$4 + 8 | 0;
    if (__ZNSt3__127__insertion_sort_incompleteIRPFbRK6b2PairS3_EPS1_EEbT0_S8_T_($565, $$01$ph, $__comp) | 0) {
     label = 62;
     break;
    }
    if ($564) {
     $$0 = $565;
     continue;
    }
   }
   $567 = $__i$4;
   if (($567 - $2 | 0) >= ($0 - $567 | 0)) {
    label = 66;
    break;
   }
   __ZNSt3__16__sortIRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_($$0, $__i$4, $__comp);
   $$0 = $__i$4 + 8 | 0;
  }
  if ((label | 0) == 62) {
   label = 0;
   if ($564) {
    label = 67;
    break;
   } else {
    $$0$ph = $$0;
    $$01$ph = $__i$4;
    continue;
   }
  } else if ((label | 0) == 66) {
   label = 0;
   __ZNSt3__16__sortIRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_($__i$4 + 8 | 0, $$01$ph, $__comp);
   $$0$ph = $$0;
   $$01$ph = $__i$4;
   continue;
  }
 }
 if ((label | 0) == 4) {
  if (!(FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($1, $$0) | 0)) return;
  $7 = $$0;
  $9 = HEAP32[$7 >> 2] | 0;
  $12 = HEAP32[$7 + 4 >> 2] | 0;
  $13 = $1;
  $18 = HEAP32[$13 + 4 >> 2] | 0;
  $19 = $$0;
  HEAP32[$19 >> 2] = HEAP32[$13 >> 2];
  HEAP32[$19 + 4 >> 2] = $18;
  $23 = $1;
  HEAP32[$23 >> 2] = $9;
  HEAP32[$23 + 4 >> 2] = $12;
  return;
 } else if ((label | 0) == 6) {
  $27 = $$0 + 8 | 0;
  $29 = FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($27, $$0) | 0;
  $31 = FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($1, $27) | 0;
  if (!$29) {
   if (!$31) return;
   $32 = $27;
   $34 = HEAP32[$32 >> 2] | 0;
   $37 = HEAP32[$32 + 4 >> 2] | 0;
   $38 = $1;
   $43 = HEAP32[$38 + 4 >> 2] | 0;
   $44 = $27;
   HEAP32[$44 >> 2] = HEAP32[$38 >> 2];
   HEAP32[$44 + 4 >> 2] = $43;
   $48 = $1;
   HEAP32[$48 >> 2] = $34;
   HEAP32[$48 + 4 >> 2] = $37;
   if (!(FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($27, $$0) | 0)) return;
   $54 = $$0;
   $56 = HEAP32[$54 >> 2] | 0;
   $59 = HEAP32[$54 + 4 >> 2] | 0;
   $60 = $27;
   $65 = HEAP32[$60 + 4 >> 2] | 0;
   $66 = $$0;
   HEAP32[$66 >> 2] = HEAP32[$60 >> 2];
   HEAP32[$66 + 4 >> 2] = $65;
   $70 = $27;
   HEAP32[$70 >> 2] = $56;
   HEAP32[$70 + 4 >> 2] = $59;
   return;
  }
  $74 = $$0;
  $76 = HEAP32[$74 >> 2] | 0;
  $79 = HEAP32[$74 + 4 >> 2] | 0;
  if ($31) {
   $80 = $1;
   $85 = HEAP32[$80 + 4 >> 2] | 0;
   $86 = $$0;
   HEAP32[$86 >> 2] = HEAP32[$80 >> 2];
   HEAP32[$86 + 4 >> 2] = $85;
   $90 = $1;
   HEAP32[$90 >> 2] = $76;
   HEAP32[$90 + 4 >> 2] = $79;
   return;
  }
  $94 = $27;
  $99 = HEAP32[$94 + 4 >> 2] | 0;
  $100 = $$0;
  HEAP32[$100 >> 2] = HEAP32[$94 >> 2];
  HEAP32[$100 + 4 >> 2] = $99;
  $104 = $27;
  HEAP32[$104 >> 2] = $76;
  HEAP32[$104 + 4 >> 2] = $79;
  if (!(FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($1, $27) | 0)) return;
  $110 = $27;
  $112 = HEAP32[$110 >> 2] | 0;
  $115 = HEAP32[$110 + 4 >> 2] | 0;
  $116 = $1;
  $121 = HEAP32[$116 + 4 >> 2] | 0;
  $122 = $27;
  HEAP32[$122 >> 2] = HEAP32[$116 >> 2];
  HEAP32[$122 + 4 >> 2] = $121;
  $126 = $1;
  HEAP32[$126 >> 2] = $112;
  HEAP32[$126 + 4 >> 2] = $115;
  return;
 } else if ((label | 0) == 14) {
  __ZNSt3__17__sort4IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_T_($$0, $$0 + 8 | 0, $$0 + 16 | 0, $1, $__comp) | 0;
  return;
 } else if ((label | 0) == 15) {
  $132 = $$0 + 8 | 0;
  $133 = $$0 + 16 | 0;
  $134 = $$0 + 24 | 0;
  __ZNSt3__17__sort4IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_T_($$0, $132, $133, $134, $__comp) | 0;
  if (!(FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($1, $134) | 0)) return;
  $137 = $134;
  $139 = HEAP32[$137 >> 2] | 0;
  $142 = HEAP32[$137 + 4 >> 2] | 0;
  $143 = $1;
  $148 = HEAP32[$143 + 4 >> 2] | 0;
  $149 = $134;
  HEAP32[$149 >> 2] = HEAP32[$143 >> 2];
  HEAP32[$149 + 4 >> 2] = $148;
  $153 = $1;
  HEAP32[$153 >> 2] = $139;
  HEAP32[$153 + 4 >> 2] = $142;
  if (!(FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($134, $133) | 0)) return;
  $159 = $133;
  $161 = HEAP32[$159 >> 2] | 0;
  $164 = HEAP32[$159 + 4 >> 2] | 0;
  $165 = $134;
  $170 = HEAP32[$165 + 4 >> 2] | 0;
  $171 = $133;
  HEAP32[$171 >> 2] = HEAP32[$165 >> 2];
  HEAP32[$171 + 4 >> 2] = $170;
  $175 = $134;
  HEAP32[$175 >> 2] = $161;
  HEAP32[$175 + 4 >> 2] = $164;
  if (!(FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($133, $132) | 0)) return;
  $181 = $132;
  $183 = HEAP32[$181 >> 2] | 0;
  $186 = HEAP32[$181 + 4 >> 2] | 0;
  $187 = $133;
  $192 = HEAP32[$187 + 4 >> 2] | 0;
  $193 = $132;
  HEAP32[$193 >> 2] = HEAP32[$187 >> 2];
  HEAP32[$193 + 4 >> 2] = $192;
  $197 = $133;
  HEAP32[$197 >> 2] = $183;
  HEAP32[$197 + 4 >> 2] = $186;
  if (!(FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($132, $$0) | 0)) return;
  $203 = $$0;
  $205 = HEAP32[$203 >> 2] | 0;
  $208 = HEAP32[$203 + 4 >> 2] | 0;
  $209 = $132;
  $214 = HEAP32[$209 + 4 >> 2] | 0;
  $215 = $$0;
  HEAP32[$215 >> 2] = HEAP32[$209 >> 2];
  HEAP32[$215 + 4 >> 2] = $214;
  $219 = $132;
  HEAP32[$219 >> 2] = $205;
  HEAP32[$219 + 4 >> 2] = $208;
  return;
 } else if ((label | 0) == 21) {
  __ZNSt3__118__insertion_sort_3IRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_($$0, $$01$ph, $__comp);
  return;
 } else if ((label | 0) == 67) return;
}

function _DumpFunction($f, $psource, $D) {
 $f = $f | 0;
 $psource = $psource | 0;
 $D = $D | 0;
 var $$ph44 = 0, $0 = 0, $1 = 0, $106 = 0, $109 = 0, $116 = 0, $119 = 0, $126 = 0, $127 = 0, $129 = 0, $13 = 0, $131 = 0, $134 = 0, $136 = 0, $139 = 0, $147 = 0, $149 = 0, $15 = 0, $156 = 0, $157 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $168 = 0, $173 = 0, $175 = 0, $178 = 0, $183 = 0, $189 = 0, $195 = 0, $196 = 0, $2 = 0, $202 = 0, $205 = 0, $217 = 0, $23 = 0, $230 = 0, $232 = 0, $233 = 0, $234 = 0, $241 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $249 = 0, $25 = 0, $254 = 0, $256 = 0, $258 = 0, $26 = 0, $263 = 0, $266 = 0, $267 = 0, $276 = 0, $277 = 0, $287 = 0, $288 = 0, $290 = 0, $293 = 0, $295 = 0, $3 = 0, $303 = 0, $308 = 0, $309 = 0, $316 = 0, $318 = 0, $319 = 0, $320 = 0, $323 = 0, $325 = 0, $33 = 0, $330 = 0, $333 = 0, $345 = 0, $358 = 0, $359 = 0, $36 = 0, $362 = 0, $367 = 0, $369 = 0, $371 = 0, $376 = 0, $381 = 0, $382 = 0, $389 = 0, $39 = 0, $391 = 0, $392 = 0, $393 = 0, $396 = 0, $398 = 0, $4 = 0, $40 = 0, $403 = 0, $406 = 0, $418 = 0, $431 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $440 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $56 = 0, $6 = 0, $63 = 0, $64 = 0, $7 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $86 = 0, $89 = 0, $9 = 0, $96 = 0, $99 = 0, $i$0$i43 = 0, $i$010$i = 0, $i$023$i = 0, $i$03$i = 0, $i$122$i = 0, $size$i = 0, $size$i$i13 = 0, $size$i6$i = 0, $storemerge = 0, $storemerge41 = 0, $storemerge42 = 0, $x$i$i = 0, $x$i1$i = 0, $x$i11$i = 0, $x$i14$i = 0, $x$i16$i = 0, $x$i18$i = 0, $x$i28 = 0, $x$i3$i = 0, $x$i31 = 0, $x$i34 = 0, $x$i37 = 0, $x$i5$i = 0, $x$i7$i = 0, $x$i9$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $x$i37 = sp + 64 | 0;
 $x$i34 = sp + 63 | 0;
 $x$i31 = sp + 62 | 0;
 $x$i28 = sp + 61 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 44 | 0;
 $x$i7$i = sp + 60 | 0;
 $x$i5$i = sp + 59 | 0;
 $x$i3$i = sp + 58 | 0;
 $size$i$i13 = sp + 40 | 0;
 $2 = sp + 36 | 0;
 $3 = sp + 32 | 0;
 $x$i1$i = sp + 57 | 0;
 $4 = sp + 28 | 0;
 $5 = sp + 24 | 0;
 $size$i = sp + 20 | 0;
 $x$i18$i = sp + 16 | 0;
 $x$i16$i = sp + 56 | 0;
 $x$i14$i = sp + 55 | 0;
 $x$i11$i = sp + 54 | 0;
 $x$i9$i = sp + 53 | 0;
 $x$i$i = sp + 52 | 0;
 $size$i6$i = sp + 12 | 0;
 $6 = sp + 8 | 0;
 $7 = sp + 4 | 0;
 $8 = sp;
 $9 = $D + 12 | 0;
 do if (!(HEAP32[$9 >> 2] | 0)) {
  $13 = HEAP32[$f + 72 >> 2] | 0;
  if (($13 | 0) == ($psource | 0)) label = 3; else {
   if (!$13) {
    HEAP8[$x$i31 >> 0] = 0;
    $25 = $D + 16 | 0;
    $26 = HEAP32[$25 >> 2] | 0;
    if ($26) {
     $79 = $26;
     break;
    }
    $33 = FUNCTION_TABLE_iiiii[HEAP32[$D + 4 >> 2] & 7](HEAP32[$D >> 2] | 0, $x$i31, 1, HEAP32[$D + 8 >> 2] | 0) | 0;
    HEAP32[$25 >> 2] = $33;
    $79 = $33;
    break;
   }
   $36 = (HEAP32[$13 + 12 >> 2] | 0) + 1 | 0;
   HEAP32[$size$i >> 2] = $36;
   if ($36 >>> 0 < 255) {
    HEAP8[$x$i34 >> 0] = $36;
    $39 = $D + 16 | 0;
    $40 = HEAP32[$39 >> 2] | 0;
    if ($40) {
     $79 = $40;
     break;
    }
    $47 = FUNCTION_TABLE_iiiii[HEAP32[$D + 4 >> 2] & 7](HEAP32[$D >> 2] | 0, $x$i34, 1, HEAP32[$D + 8 >> 2] | 0) | 0;
    HEAP32[$39 >> 2] = $47;
    $64 = $47;
   } else {
    HEAP8[$x$i37 >> 0] = -1;
    $48 = $D + 16 | 0;
    $49 = HEAP32[$48 >> 2] | 0;
    if ($49) {
     $79 = $49;
     break;
    }
    $56 = FUNCTION_TABLE_iiiii[HEAP32[$D + 4 >> 2] & 7](HEAP32[$D >> 2] | 0, $x$i37, 1, HEAP32[$D + 8 >> 2] | 0) | 0;
    HEAP32[$48 >> 2] = $56;
    if ($56) {
     $79 = $56;
     break;
    }
    $63 = FUNCTION_TABLE_iiiii[HEAP32[$D + 4 >> 2] & 7](HEAP32[$D >> 2] | 0, $size$i, 4, HEAP32[$D + 8 >> 2] | 0) | 0;
    HEAP32[$48 >> 2] = $63;
    $64 = $63;
   }
   if (!$64) {
    $75 = FUNCTION_TABLE_iiiii[HEAP32[$D + 4 >> 2] & 7](HEAP32[$D >> 2] | 0, $13 + 24 | 0, (HEAP32[$size$i >> 2] | 0) + -1 | 0, HEAP32[$D + 8 >> 2] | 0) | 0;
    HEAP32[$D + 16 >> 2] = $75;
    $79 = $75;
   } else $79 = $64;
  }
 } else label = 3; while (0);
 if ((label | 0) == 3) {
  HEAP8[$x$i28 >> 0] = 0;
  $15 = $D + 16 | 0;
  $16 = HEAP32[$15 >> 2] | 0;
  if (!$16) {
   $23 = FUNCTION_TABLE_iiiii[HEAP32[$D + 4 >> 2] & 7](HEAP32[$D >> 2] | 0, $x$i28, 1, HEAP32[$D + 8 >> 2] | 0) | 0;
   HEAP32[$15 >> 2] = $23;
   $79 = $23;
  } else $79 = $16;
 }
 HEAP32[$0 >> 2] = HEAP32[$f + 36 >> 2];
 $78 = $D + 16 | 0;
 if (!$79) {
  $86 = FUNCTION_TABLE_iiiii[HEAP32[$D + 4 >> 2] & 7](HEAP32[$D >> 2] | 0, $0, 4, HEAP32[$D + 8 >> 2] | 0) | 0;
  HEAP32[$78 >> 2] = $86;
  $89 = $86;
 } else $89 = $79;
 HEAP32[$0 >> 2] = HEAP32[$f + 40 >> 2];
 if (!$89) {
  $96 = FUNCTION_TABLE_iiiii[HEAP32[$D + 4 >> 2] & 7](HEAP32[$D >> 2] | 0, $0, 4, HEAP32[$D + 8 >> 2] | 0) | 0;
  HEAP32[$78 >> 2] = $96;
  $99 = $96;
 } else $99 = $89;
 HEAP8[$0 >> 0] = HEAP8[$f + 6 >> 0] | 0;
 if (!$99) {
  $106 = FUNCTION_TABLE_iiiii[HEAP32[$D + 4 >> 2] & 7](HEAP32[$D >> 2] | 0, $0, 1, HEAP32[$D + 8 >> 2] | 0) | 0;
  HEAP32[$78 >> 2] = $106;
  $109 = $106;
 } else $109 = $99;
 HEAP8[$0 >> 0] = HEAP8[$f + 7 >> 0] | 0;
 if (!$109) {
  $116 = FUNCTION_TABLE_iiiii[HEAP32[$D + 4 >> 2] & 7](HEAP32[$D >> 2] | 0, $0, 1, HEAP32[$D + 8 >> 2] | 0) | 0;
  HEAP32[$78 >> 2] = $116;
  $119 = $116;
 } else $119 = $109;
 HEAP8[$0 >> 0] = HEAP8[$f + 8 >> 0] | 0;
 if (!$119) {
  $126 = FUNCTION_TABLE_iiiii[HEAP32[$D + 4 >> 2] & 7](HEAP32[$D >> 2] | 0, $0, 1, HEAP32[$D + 8 >> 2] | 0) | 0;
  HEAP32[$78 >> 2] = $126;
  $129 = $126;
 } else $129 = $119;
 $127 = $f + 20 | 0;
 HEAP32[$5 >> 2] = HEAP32[$127 >> 2];
 if (!$129) {
  $131 = $D + 4 | 0;
  $134 = $D + 8 | 0;
  $136 = FUNCTION_TABLE_iiiii[HEAP32[$131 >> 2] & 7](HEAP32[$D >> 2] | 0, $5, 4, HEAP32[$134 >> 2] | 0) | 0;
  HEAP32[$78 >> 2] = $136;
  if (!$136) {
   $147 = FUNCTION_TABLE_iiiii[HEAP32[$131 >> 2] & 7](HEAP32[$D >> 2] | 0, HEAP32[$f + 48 >> 2] | 0, HEAP32[$127 >> 2] << 2, HEAP32[$134 >> 2] | 0) | 0;
   HEAP32[$78 >> 2] = $147;
   $149 = HEAP32[$f + 16 >> 2] | 0;
   HEAP32[$4 >> 2] = $149;
   if (!$147) {
    $156 = FUNCTION_TABLE_iiiii[HEAP32[$D + 4 >> 2] & 7](HEAP32[$D >> 2] | 0, $4, 4, HEAP32[$D + 8 >> 2] | 0) | 0;
    HEAP32[$78 >> 2] = $156;
    $157 = $149;
    $433 = $156;
   } else {
    $157 = $149;
    $433 = $147;
   }
  } else {
   $$ph44 = $136;
   label = 28;
  }
 } else {
  $$ph44 = $129;
  label = 28;
 }
 if ((label | 0) == 28) {
  $139 = HEAP32[$f + 16 >> 2] | 0;
  HEAP32[$4 >> 2] = $139;
  $157 = $139;
  $433 = $$ph44;
 }
 L42 : do if (($157 | 0) > 0) {
  $159 = $f + 44 | 0;
  $160 = $D + 4 | 0;
  $161 = $D + 8 | 0;
  $168 = $433;
  $i$010$i = 0;
  while (1) {
   $162 = HEAP32[$159 >> 2] | 0;
   $163 = $162 + ($i$010$i << 3) | 0;
   $164 = $162 + ($i$010$i << 3) + 4 | 0;
   $165 = HEAP32[$164 >> 2] | 0;
   HEAP8[$0 >> 0] = $165 & 63;
   if (!$168) {
    $173 = FUNCTION_TABLE_iiiii[HEAP32[$160 >> 2] & 7](HEAP32[$D >> 2] | 0, $0, 1, HEAP32[$161 >> 2] | 0) | 0;
    HEAP32[$78 >> 2] = $173;
    $175 = HEAP32[$164 >> 2] | 0;
    $178 = $173;
   } else {
    $175 = $165;
    $178 = $168;
   }
   L49 : do switch ($175 & 63 | 0) {
   case 19:
    {
     HEAP32[$2 >> 2] = HEAP32[$163 >> 2];
     if (!$178) {
      $195 = FUNCTION_TABLE_iiiii[HEAP32[$160 >> 2] & 7](HEAP32[$D >> 2] | 0, $2, 4, HEAP32[$161 >> 2] | 0) | 0;
      HEAP32[$78 >> 2] = $195;
      $434 = $195;
     } else $434 = $178;
     break;
    }
   case 4:
   case 20:
    {
     $196 = HEAP32[$163 >> 2] | 0;
     if (!$196) {
      HEAP8[$x$i3$i >> 0] = 0;
      if ($178) {
       $434 = $178;
       break L49;
      }
      $202 = FUNCTION_TABLE_iiiii[HEAP32[$160 >> 2] & 7](HEAP32[$D >> 2] | 0, $x$i3$i, 1, HEAP32[$161 >> 2] | 0) | 0;
      HEAP32[$78 >> 2] = $202;
      $434 = $202;
      break L49;
     }
     $205 = (HEAP32[$196 + 12 >> 2] | 0) + 1 | 0;
     HEAP32[$size$i$i13 >> 2] = $205;
     if ($205 >>> 0 < 255) {
      HEAP8[$x$i5$i >> 0] = $205;
      if ($178) {
       $434 = $178;
       break L49;
      }
      $storemerge42 = FUNCTION_TABLE_iiiii[HEAP32[$160 >> 2] & 7](HEAP32[$D >> 2] | 0, $x$i5$i, 1, HEAP32[$161 >> 2] | 0) | 0;
     } else {
      HEAP8[$x$i7$i >> 0] = -1;
      if ($178) {
       $434 = $178;
       break L49;
      }
      $217 = FUNCTION_TABLE_iiiii[HEAP32[$160 >> 2] & 7](HEAP32[$D >> 2] | 0, $x$i7$i, 1, HEAP32[$161 >> 2] | 0) | 0;
      HEAP32[$78 >> 2] = $217;
      if ($217) {
       $434 = $217;
       break L49;
      }
      $storemerge42 = FUNCTION_TABLE_iiiii[HEAP32[$160 >> 2] & 7](HEAP32[$D >> 2] | 0, $size$i$i13, 4, HEAP32[$161 >> 2] | 0) | 0;
     }
     HEAP32[$78 >> 2] = $storemerge42;
     if (!$storemerge42) {
      $230 = FUNCTION_TABLE_iiiii[HEAP32[$160 >> 2] & 7](HEAP32[$D >> 2] | 0, $196 + 24 | 0, (HEAP32[$size$i$i13 >> 2] | 0) + -1 | 0, HEAP32[$161 >> 2] | 0) | 0;
      HEAP32[$78 >> 2] = $230;
      $434 = $230;
     } else $434 = $storemerge42;
     break;
    }
   case 1:
    {
     HEAP8[$x$i1$i >> 0] = HEAP32[$163 >> 2];
     if (!$178) {
      $183 = FUNCTION_TABLE_iiiii[HEAP32[$160 >> 2] & 7](HEAP32[$D >> 2] | 0, $x$i1$i, 1, HEAP32[$161 >> 2] | 0) | 0;
      HEAP32[$78 >> 2] = $183;
      $434 = $183;
     } else $434 = $178;
     break;
    }
   case 3:
    {
     HEAPF32[$3 >> 2] = +HEAPF32[$163 >> 2];
     if (!$178) {
      $189 = FUNCTION_TABLE_iiiii[HEAP32[$160 >> 2] & 7](HEAP32[$D >> 2] | 0, $3, 4, HEAP32[$161 >> 2] | 0) | 0;
      HEAP32[$78 >> 2] = $189;
      $434 = $189;
     } else $434 = $178;
     break;
    }
   default:
    $434 = $178;
   } while (0);
   $i$010$i = $i$010$i + 1 | 0;
   if (($i$010$i | 0) == ($157 | 0)) {
    $234 = $434;
    break L42;
   } else $168 = $434;
  }
 } else $234 = $433; while (0);
 $232 = $f + 12 | 0;
 $233 = HEAP32[$232 >> 2] | 0;
 HEAP32[$1 >> 2] = $233;
 if (!$234) {
  $241 = FUNCTION_TABLE_iiiii[HEAP32[$D + 4 >> 2] & 7](HEAP32[$D >> 2] | 0, $1, 4, HEAP32[$D + 8 >> 2] | 0) | 0;
  HEAP32[$78 >> 2] = $241;
  $435 = $241;
 } else $435 = $234;
 if (($233 | 0) > 0) {
  $243 = $f + 64 | 0;
  $244 = $D + 4 | 0;
  $245 = $D + 8 | 0;
  $249 = $435;
  $i$03$i = 0;
  while (1) {
   $246 = HEAP32[$243 >> 2] | 0;
   HEAP8[$0 >> 0] = HEAP8[$246 + ($i$03$i << 3) + 4 >> 0] | 0;
   if (!$249) {
    $254 = FUNCTION_TABLE_iiiii[HEAP32[$244 >> 2] & 7](HEAP32[$D >> 2] | 0, $0, 1, HEAP32[$245 >> 2] | 0) | 0;
    HEAP32[$78 >> 2] = $254;
    $256 = HEAP32[$243 >> 2] | 0;
    $258 = $254;
   } else {
    $256 = $246;
    $258 = $249;
   }
   HEAP8[$0 >> 0] = HEAP8[$256 + ($i$03$i << 3) + 5 >> 0] | 0;
   if (!$258) {
    $263 = FUNCTION_TABLE_iiiii[HEAP32[$244 >> 2] & 7](HEAP32[$D >> 2] | 0, $0, 1, HEAP32[$245 >> 2] | 0) | 0;
    HEAP32[$78 >> 2] = $263;
    $436 = $263;
   } else $436 = $258;
   $i$03$i = $i$03$i + 1 | 0;
   if (($i$03$i | 0) == ($233 | 0)) {
    $267 = $436;
    break;
   } else $249 = $436;
  }
 } else $267 = $435;
 $266 = HEAP32[$f + 28 >> 2] | 0;
 HEAP32[$0 >> 2] = $266;
 if (!$267) HEAP32[$78 >> 2] = FUNCTION_TABLE_iiiii[HEAP32[$D + 4 >> 2] & 7](HEAP32[$D >> 2] | 0, $0, 4, HEAP32[$D + 8 >> 2] | 0) | 0;
 if (($266 | 0) > 0) {
  $276 = $f + 52 | 0;
  $277 = $f + 72 | 0;
  $i$0$i43 = 0;
  do {
   _DumpFunction(HEAP32[(HEAP32[$276 >> 2] | 0) + ($i$0$i43 << 2) >> 2] | 0, HEAP32[$277 >> 2] | 0, $D);
   $i$0$i43 = $i$0$i43 + 1 | 0;
  } while (($i$0$i43 | 0) != ($266 | 0));
 }
 if (!(HEAP32[$9 >> 2] | 0)) $287 = HEAP32[$f + 24 >> 2] | 0; else $287 = 0;
 HEAP32[$8 >> 2] = $287;
 $288 = HEAP32[$78 >> 2] | 0;
 if (!$288) {
  $290 = $D + 4 | 0;
  $293 = $D + 8 | 0;
  $295 = FUNCTION_TABLE_iiiii[HEAP32[$290 >> 2] & 7](HEAP32[$D >> 2] | 0, $8, 4, HEAP32[$293 >> 2] | 0) | 0;
  HEAP32[$78 >> 2] = $295;
  if (!$295) {
   $303 = FUNCTION_TABLE_iiiii[HEAP32[$290 >> 2] & 7](HEAP32[$D >> 2] | 0, HEAP32[$f + 56 >> 2] | 0, $287 << 2, HEAP32[$293 >> 2] | 0) | 0;
   HEAP32[$78 >> 2] = $303;
   $309 = $303;
  } else $309 = $295;
 } else $309 = $288;
 if (!(HEAP32[$9 >> 2] | 0)) $308 = HEAP32[$f + 32 >> 2] | 0; else $308 = 0;
 HEAP32[$7 >> 2] = $308;
 if (!$309) {
  $316 = FUNCTION_TABLE_iiiii[HEAP32[$D + 4 >> 2] & 7](HEAP32[$D >> 2] | 0, $7, 4, HEAP32[$D + 8 >> 2] | 0) | 0;
  HEAP32[$78 >> 2] = $316;
  $437 = $316;
 } else $437 = $309;
 if (($308 | 0) > 0) {
  $318 = $f + 60 | 0;
  $319 = $D + 4 | 0;
  $320 = $D + 8 | 0;
  $325 = $437;
  $i$023$i = 0;
  while (1) {
   $323 = HEAP32[(HEAP32[$318 >> 2] | 0) + ($i$023$i * 12 | 0) >> 2] | 0;
   do if (!$323) {
    HEAP8[$x$i$i >> 0] = 0;
    if ($325) {
     $362 = $325;
     break;
    }
    $330 = FUNCTION_TABLE_iiiii[HEAP32[$319 >> 2] & 7](HEAP32[$D >> 2] | 0, $x$i$i, 1, HEAP32[$320 >> 2] | 0) | 0;
    HEAP32[$78 >> 2] = $330;
    $362 = $330;
   } else {
    $333 = (HEAP32[$323 + 12 >> 2] | 0) + 1 | 0;
    HEAP32[$x$i18$i >> 2] = $333;
    if ($333 >>> 0 < 255) {
     HEAP8[$x$i9$i >> 0] = $333;
     if ($325) {
      $362 = $325;
      break;
     }
     $storemerge41 = FUNCTION_TABLE_iiiii[HEAP32[$319 >> 2] & 7](HEAP32[$D >> 2] | 0, $x$i9$i, 1, HEAP32[$320 >> 2] | 0) | 0;
    } else {
     HEAP8[$x$i11$i >> 0] = -1;
     if ($325) {
      $362 = $325;
      break;
     }
     $345 = FUNCTION_TABLE_iiiii[HEAP32[$319 >> 2] & 7](HEAP32[$D >> 2] | 0, $x$i11$i, 1, HEAP32[$320 >> 2] | 0) | 0;
     HEAP32[$78 >> 2] = $345;
     if ($345) {
      $362 = $345;
      break;
     }
     $storemerge41 = FUNCTION_TABLE_iiiii[HEAP32[$319 >> 2] & 7](HEAP32[$D >> 2] | 0, $x$i18$i, 4, HEAP32[$320 >> 2] | 0) | 0;
    }
    HEAP32[$78 >> 2] = $storemerge41;
    if ($storemerge41) {
     $362 = $storemerge41;
     break;
    }
    $358 = FUNCTION_TABLE_iiiii[HEAP32[$319 >> 2] & 7](HEAP32[$D >> 2] | 0, $323 + 24 | 0, (HEAP32[$x$i18$i >> 2] | 0) + -1 | 0, HEAP32[$320 >> 2] | 0) | 0;
    HEAP32[$78 >> 2] = $358;
    $362 = $358;
   } while (0);
   $359 = HEAP32[$318 >> 2] | 0;
   HEAP32[$x$i18$i >> 2] = HEAP32[$359 + ($i$023$i * 12 | 0) + 4 >> 2];
   if (!$362) {
    $367 = FUNCTION_TABLE_iiiii[HEAP32[$319 >> 2] & 7](HEAP32[$D >> 2] | 0, $x$i18$i, 4, HEAP32[$320 >> 2] | 0) | 0;
    HEAP32[$78 >> 2] = $367;
    $369 = HEAP32[$318 >> 2] | 0;
    $371 = $367;
   } else {
    $369 = $359;
    $371 = $362;
   }
   HEAP32[$x$i18$i >> 2] = HEAP32[$369 + ($i$023$i * 12 | 0) + 8 >> 2];
   if (!$371) {
    $376 = FUNCTION_TABLE_iiiii[HEAP32[$319 >> 2] & 7](HEAP32[$D >> 2] | 0, $x$i18$i, 4, HEAP32[$320 >> 2] | 0) | 0;
    HEAP32[$78 >> 2] = $376;
    $438 = $376;
   } else $438 = $371;
   $i$023$i = $i$023$i + 1 | 0;
   if (($i$023$i | 0) == ($308 | 0)) {
    $382 = $438;
    break;
   } else $325 = $438;
  }
 } else $382 = $437;
 if (!(HEAP32[$9 >> 2] | 0)) $381 = HEAP32[$232 >> 2] | 0; else $381 = 0;
 HEAP32[$6 >> 2] = $381;
 if (!$382) {
  $389 = FUNCTION_TABLE_iiiii[HEAP32[$D + 4 >> 2] & 7](HEAP32[$D >> 2] | 0, $6, 4, HEAP32[$D + 8 >> 2] | 0) | 0;
  HEAP32[$78 >> 2] = $389;
  $439 = $389;
 } else $439 = $382;
 if (($381 | 0) <= 0) {
  STACKTOP = sp;
  return;
 }
 $391 = $f + 64 | 0;
 $392 = $D + 4 | 0;
 $393 = $D + 8 | 0;
 $398 = $439;
 $i$122$i = 0;
 while (1) {
  $396 = HEAP32[(HEAP32[$391 >> 2] | 0) + ($i$122$i << 3) >> 2] | 0;
  do if (!$396) {
   HEAP8[$x$i14$i >> 0] = 0;
   if ($398) {
    $440 = $398;
    break;
   }
   $403 = FUNCTION_TABLE_iiiii[HEAP32[$392 >> 2] & 7](HEAP32[$D >> 2] | 0, $x$i14$i, 1, HEAP32[$393 >> 2] | 0) | 0;
   HEAP32[$78 >> 2] = $403;
   $440 = $403;
  } else {
   $406 = (HEAP32[$396 + 12 >> 2] | 0) + 1 | 0;
   HEAP32[$size$i6$i >> 2] = $406;
   if ($406 >>> 0 < 255) {
    HEAP8[$x$i16$i >> 0] = $406;
    if ($398) {
     $440 = $398;
     break;
    }
    $storemerge = FUNCTION_TABLE_iiiii[HEAP32[$392 >> 2] & 7](HEAP32[$D >> 2] | 0, $x$i16$i, 1, HEAP32[$393 >> 2] | 0) | 0;
   } else {
    HEAP8[$x$i18$i >> 0] = -1;
    if ($398) {
     $440 = $398;
     break;
    }
    $418 = FUNCTION_TABLE_iiiii[HEAP32[$392 >> 2] & 7](HEAP32[$D >> 2] | 0, $x$i18$i, 1, HEAP32[$393 >> 2] | 0) | 0;
    HEAP32[$78 >> 2] = $418;
    if ($418) {
     $440 = $418;
     break;
    }
    $storemerge = FUNCTION_TABLE_iiiii[HEAP32[$392 >> 2] & 7](HEAP32[$D >> 2] | 0, $size$i6$i, 4, HEAP32[$393 >> 2] | 0) | 0;
   }
   HEAP32[$78 >> 2] = $storemerge;
   if ($storemerge) {
    $440 = $storemerge;
    break;
   }
   $431 = FUNCTION_TABLE_iiiii[HEAP32[$392 >> 2] & 7](HEAP32[$D >> 2] | 0, $396 + 24 | 0, (HEAP32[$size$i6$i >> 2] | 0) + -1 | 0, HEAP32[$393 >> 2] | 0) | 0;
   HEAP32[$78 >> 2] = $431;
   $440 = $431;
  } while (0);
  $i$122$i = $i$122$i + 1 | 0;
  if (($i$122$i | 0) == ($381 | 0)) break; else $398 = $440;
 }
 STACKTOP = sp;
 return;
}

function _stbtt_GetGlyphShape($info, $glyph_index, $pvertices) {
 $info = $info | 0;
 $glyph_index = $glyph_index | 0;
 $pvertices = $pvertices | 0;
 var $$0 = 0, $$sum1 = 0, $$sum2 = 0, $$sum6 = 0, $1 = 0, $109 = 0, $11 = 0, $111 = 0, $113 = 0, $114 = 0, $116 = 0, $117 = 0, $12 = 0, $121 = 0, $124 = 0, $125 = 0, $132 = 0, $14 = 0, $16 = 0, $165 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $198 = 0, $2 = 0, $206 = 0, $212 = 0, $248 = 0.0, $27 = 0, $30 = 0, $323 = 0.0, $327 = 0.0, $328 = 0, $330 = 0, $331 = 0, $333 = 0, $335 = 0.0, $337 = 0.0, $349 = 0, $351 = 0, $353 = 0.0, $355 = 0.0, $368 = 0, $370 = 0, $373 = 0, $378 = 0, $38 = 0, $381 = 0, $39 = 0, $49 = 0, $52 = 0, $59 = 0, $79 = 0, $82 = 0, $89 = 0, $comp$043 = 0, $comp$1 = 0, $comp$2 = 0, $comp_verts = 0, $cx$014 = 0, $cx$1 = 0, $cy$015 = 0, $cy$1 = 0, $flagcount$035 = 0, $flagcount$1 = 0, $flags$036 = 0, $flags$1 = 0, $i$034 = 0, $i$132 = 0, $i$228 = 0, $i$323 = 0, $i$4 = 0, $i$5 = 0, $i2$038 = 0, $j$022 = 0, $j$1 = 0, $mtx$sroa$0$0 = 0.0, $mtx$sroa$1$0 = 0.0, $mtx$sroa$2$0 = 0.0, $mtx$sroa$3$0 = 0.0, $mtx$sroa$4$0 = 0.0, $mtx$sroa$5$0 = 0.0, $next_move$021 = 0, $next_move$1 = 0, $num_vertices$024 = 0, $num_vertices$1 = 0, $num_vertices$3 = 0, $num_vertices$444 = 0, $num_vertices$5 = 0, $num_vertices$6 = 0, $points$033 = 0, $points$1 = 0, $points$231 = 0, $points$3 = 0, $points$427 = 0, $points$5 = 0, $scx$018 = 0, $scx$1 = 0, $scx$2 = 0, $scy$019 = 0, $scy$1 = 0, $scy$2 = 0, $start_off$013 = 0, $start_off$1 = 0, $sx$016 = 0, $sx$1 = 0, $sx$2 = 0, $sy$017 = 0, $sy$1 = 0, $sy$2 = 0, $vertices$045 = 0, $vertices$1 = 0, $vertices$2 = 0, $was_off$020 = 0, $was_off$1 = 0, $x$030 = 0, $x$1 = 0, $y$026 = 0, $y$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $comp_verts = sp;
 $1 = HEAP32[$info + 4 >> 2] | 0;
 $2 = _stbtt__GetGlyfOffset($info, $glyph_index) | 0;
 HEAP32[$pvertices >> 2] = 0;
 if (($2 | 0) < 0) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $11 = HEAPU8[$1 + $2 >> 0] << 8 | HEAPU8[$1 + ($2 + 1) >> 0];
 $12 = $11 & 65535;
 L4 : do if ($12 << 16 >> 16 > 0) {
  $$sum1 = $2 + 10 | 0;
  $14 = $11 << 16 >> 15;
  $$sum2 = $14 + $$sum1 | 0;
  $16 = HEAP8[$1 + $$sum2 >> 0] | 0;
  $18 = HEAP8[$1 + ($$sum2 + 1) >> 0] | 0;
  $27 = (HEAPU8[$1 + ($$sum2 + -2) >> 0] << 8 | HEAPU8[$1 + ($$sum2 + -1) >> 0]) + 1 | 0;
  $30 = _malloc(($27 + $14 | 0) * 10 | 0) | 0;
  if (!$30) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $flagcount$035 = 0;
  $flags$036 = 0;
  $i$034 = 0;
  $points$033 = $1 + ($$sum2 + 2 + (($16 & 255) << 8 | $18 & 255)) | 0;
  while (1) {
   if (!($flagcount$035 << 24 >> 24)) {
    $38 = $points$033 + 1 | 0;
    $39 = HEAP8[$points$033 >> 0] | 0;
    if (!($39 & 8)) {
     $flagcount$1 = 0;
     $flags$1 = $39;
     $points$1 = $38;
    } else {
     $flagcount$1 = HEAP8[$38 >> 0] | 0;
     $flags$1 = $39;
     $points$1 = $points$033 + 2 | 0;
    }
   } else {
    $flagcount$1 = $flagcount$035 + -1 << 24 >> 24;
    $flags$1 = $flags$036;
    $points$1 = $points$033;
   }
   HEAP8[$30 + (($i$034 + $14 | 0) * 10 | 0) + 8 >> 0] = $flags$1;
   $i$034 = $i$034 + 1 | 0;
   if (($i$034 | 0) >= ($27 | 0)) {
    $i$132 = 0;
    $points$231 = $points$1;
    $x$030 = 0;
    break;
   } else {
    $flagcount$035 = $flagcount$1;
    $flags$036 = $flags$1;
    $points$033 = $points$1;
   }
  }
  while (1) {
   $49 = $i$132 + $14 | 0;
   $52 = HEAPU8[$30 + ($49 * 10 | 0) + 8 >> 0] | 0;
   if (!($52 & 2)) if (!($52 & 16)) {
    $points$3 = $points$231 + 2 | 0;
    $x$1 = ((HEAPU8[$points$231 >> 0] << 8 | HEAPU8[$points$231 + 1 >> 0]) << 16 >> 16) + $x$030 | 0;
   } else {
    $points$3 = $points$231;
    $x$1 = $x$030;
   } else {
    $59 = HEAPU8[$points$231 >> 0] | 0;
    $points$3 = $points$231 + 1 | 0;
    $x$1 = (($52 & 16 | 0) != 0 ? $59 : 0 - $59 | 0) + $x$030 | 0;
   }
   HEAP16[$30 + ($49 * 10 | 0) >> 1] = $x$1;
   $i$132 = $i$132 + 1 | 0;
   if (($i$132 | 0) >= ($27 | 0)) {
    $i$228 = 0;
    $points$427 = $points$3;
    $y$026 = 0;
    break;
   } else {
    $points$231 = $points$3;
    $x$030 = $x$1;
   }
  }
  while (1) {
   $79 = $i$228 + $14 | 0;
   $82 = HEAPU8[$30 + ($79 * 10 | 0) + 8 >> 0] | 0;
   if (!($82 & 4)) if (!($82 & 32)) {
    $points$5 = $points$427 + 2 | 0;
    $y$1 = ((HEAPU8[$points$427 >> 0] << 8 | HEAPU8[$points$427 + 1 >> 0]) << 16 >> 16) + $y$026 | 0;
   } else {
    $points$5 = $points$427;
    $y$1 = $y$026;
   } else {
    $89 = HEAPU8[$points$427 >> 0] | 0;
    $points$5 = $points$427 + 1 | 0;
    $y$1 = (($82 & 32 | 0) != 0 ? $89 : 0 - $89 | 0) + $y$026 | 0;
   }
   HEAP16[$30 + ($79 * 10 | 0) + 2 >> 1] = $y$1;
   $i$228 = $i$228 + 1 | 0;
   if (($i$228 | 0) >= ($27 | 0)) {
    $cx$014 = 0;
    $cy$015 = 0;
    $i$323 = 0;
    $j$022 = 0;
    $next_move$021 = 0;
    $num_vertices$024 = 0;
    $scx$018 = 0;
    $scy$019 = 0;
    $start_off$013 = 0;
    $sx$016 = 0;
    $sy$017 = 0;
    $was_off$020 = 0;
    break;
   } else {
    $points$427 = $points$5;
    $y$026 = $y$1;
   }
  }
  while (1) {
   $109 = $i$323 + $14 | 0;
   $111 = HEAP8[$30 + ($109 * 10 | 0) + 8 >> 0] | 0;
   $113 = HEAP16[$30 + ($109 * 10 | 0) >> 1] | 0;
   $114 = $113 << 16 >> 16;
   $116 = HEAP16[$30 + ($109 * 10 | 0) + 2 >> 1] | 0;
   $117 = $116 << 16 >> 16;
   do if (($next_move$021 | 0) == ($i$323 | 0)) {
    if (!$i$323) $num_vertices$1 = $num_vertices$024; else $num_vertices$1 = _stbtt__close_shape($30, $num_vertices$024, $was_off$020, $start_off$013, $sx$016, $sy$017, $scx$018, $scy$019, $cx$014, $cy$015) | 0;
    $121 = $111 & 1;
    $124 = ($121 ^ 1) & 255;
    do if (!($121 << 24 >> 24)) {
     $125 = $109 + 1 | 0;
     $132 = HEAP16[$30 + ($125 * 10 | 0) >> 1] | 0;
     if (!(HEAP8[$30 + ($125 * 10 | 0) + 8 >> 0] & 1)) {
      $i$4 = $i$323;
      $scx$1 = $114;
      $scy$1 = $117;
      $sx$1 = $132 + $114 >> 1;
      $sy$1 = (HEAP16[$30 + ($125 * 10 | 0) + 2 >> 1] | 0) + $117 >> 1;
      break;
     } else {
      $i$4 = $i$323 + 1 | 0;
      $scx$1 = $114;
      $scy$1 = $117;
      $sx$1 = $132;
      $sy$1 = HEAP16[$30 + ($125 * 10 | 0) + 2 >> 1] | 0;
      break;
     }
    } else {
     $i$4 = $i$323;
     $scx$1 = $scx$018;
     $scy$1 = $scy$019;
     $sx$1 = $114;
     $sy$1 = $117;
    } while (0);
    HEAP8[$30 + ($num_vertices$1 * 10 | 0) + 8 >> 0] = 1;
    HEAP16[$30 + ($num_vertices$1 * 10 | 0) >> 1] = $sx$1;
    HEAP16[$30 + ($num_vertices$1 * 10 | 0) + 2 >> 1] = $sy$1;
    HEAP16[$30 + ($num_vertices$1 * 10 | 0) + 4 >> 1] = 0;
    HEAP16[$30 + ($num_vertices$1 * 10 | 0) + 6 >> 1] = 0;
    $$sum6 = ($j$022 << 1) + $$sum1 | 0;
    $cx$1 = $cx$014;
    $cy$1 = $cy$015;
    $i$5 = $i$4;
    $j$1 = $j$022 + 1 | 0;
    $next_move$1 = (HEAPU8[$1 + $$sum6 >> 0] << 8 | HEAPU8[$1 + ($$sum6 + 1) >> 0]) + 1 | 0;
    $num_vertices$3 = $num_vertices$1 + 1 | 0;
    $scx$2 = $scx$1;
    $scy$2 = $scy$1;
    $start_off$1 = $124;
    $sx$2 = $sx$1;
    $sy$2 = $sy$1;
    $was_off$1 = 0;
   } else {
    $165 = ($was_off$020 | 0) != 0;
    if (!($111 & 1)) {
     if (!$165) {
      $cx$1 = $114;
      $cy$1 = $117;
      $i$5 = $i$323;
      $j$1 = $j$022;
      $next_move$1 = $next_move$021;
      $num_vertices$3 = $num_vertices$024;
      $scx$2 = $scx$018;
      $scy$2 = $scy$019;
      $start_off$1 = $start_off$013;
      $sx$2 = $sx$016;
      $sy$2 = $sy$017;
      $was_off$1 = 1;
      break;
     }
     HEAP8[$30 + ($num_vertices$024 * 10 | 0) + 8 >> 0] = 3;
     HEAP16[$30 + ($num_vertices$024 * 10 | 0) >> 1] = ($114 + $cx$014 | 0) >>> 1;
     HEAP16[$30 + ($num_vertices$024 * 10 | 0) + 2 >> 1] = ($117 + $cy$015 | 0) >>> 1;
     HEAP16[$30 + ($num_vertices$024 * 10 | 0) + 4 >> 1] = $cx$014;
     HEAP16[$30 + ($num_vertices$024 * 10 | 0) + 6 >> 1] = $cy$015;
     $cx$1 = $114;
     $cy$1 = $117;
     $i$5 = $i$323;
     $j$1 = $j$022;
     $next_move$1 = $next_move$021;
     $num_vertices$3 = $num_vertices$024 + 1 | 0;
     $scx$2 = $scx$018;
     $scy$2 = $scy$019;
     $start_off$1 = $start_off$013;
     $sx$2 = $sx$016;
     $sy$2 = $sy$017;
     $was_off$1 = 1;
     break;
    }
    $180 = $num_vertices$024 + 1 | 0;
    $181 = $30 + ($num_vertices$024 * 10 | 0) | 0;
    $182 = $30 + ($num_vertices$024 * 10 | 0) + 8 | 0;
    if ($165) {
     HEAP8[$182 >> 0] = 3;
     HEAP16[$181 >> 1] = $113;
     HEAP16[$30 + ($num_vertices$024 * 10 | 0) + 2 >> 1] = $116;
     HEAP16[$30 + ($num_vertices$024 * 10 | 0) + 4 >> 1] = $cx$014;
     HEAP16[$30 + ($num_vertices$024 * 10 | 0) + 6 >> 1] = $cy$015;
     $cx$1 = $cx$014;
     $cy$1 = $cy$015;
     $i$5 = $i$323;
     $j$1 = $j$022;
     $next_move$1 = $next_move$021;
     $num_vertices$3 = $180;
     $scx$2 = $scx$018;
     $scy$2 = $scy$019;
     $start_off$1 = $start_off$013;
     $sx$2 = $sx$016;
     $sy$2 = $sy$017;
     $was_off$1 = 0;
     break;
    } else {
     HEAP8[$182 >> 0] = 2;
     HEAP16[$181 >> 1] = $113;
     HEAP16[$30 + ($num_vertices$024 * 10 | 0) + 2 >> 1] = $116;
     HEAP16[$30 + ($num_vertices$024 * 10 | 0) + 4 >> 1] = 0;
     HEAP16[$30 + ($num_vertices$024 * 10 | 0) + 6 >> 1] = 0;
     $cx$1 = $cx$014;
     $cy$1 = $cy$015;
     $i$5 = $i$323;
     $j$1 = $j$022;
     $next_move$1 = $next_move$021;
     $num_vertices$3 = $180;
     $scx$2 = $scx$018;
     $scy$2 = $scy$019;
     $start_off$1 = $start_off$013;
     $sx$2 = $sx$016;
     $sy$2 = $sy$017;
     $was_off$1 = 0;
     break;
    }
   } while (0);
   $i$323 = $i$5 + 1 | 0;
   if (($i$323 | 0) >= ($27 | 0)) break; else {
    $cx$014 = $cx$1;
    $cy$015 = $cy$1;
    $j$022 = $j$1;
    $next_move$021 = $next_move$1;
    $num_vertices$024 = $num_vertices$3;
    $scx$018 = $scx$2;
    $scy$019 = $scy$2;
    $start_off$013 = $start_off$1;
    $sx$016 = $sx$2;
    $sy$017 = $sy$2;
    $was_off$020 = $was_off$1;
   }
  }
  $num_vertices$6 = _stbtt__close_shape($30, $num_vertices$3, $was_off$1, $start_off$1, $sx$2, $sy$2, $scx$2, $scy$2, $cx$1, $cy$1) | 0;
  $vertices$2 = $30;
 } else {
  if ($12 << 16 >> 16 != -1) {
   if ($12 << 16 >> 16 >= 0) {
    $num_vertices$6 = 0;
    $vertices$2 = 0;
    break;
   }
   ___assert_fail(81008, 81016, 1261, 81128);
  }
  $comp$043 = $1 + ($2 + 10) | 0;
  $num_vertices$444 = 0;
  $vertices$045 = 0;
  while (1) {
   HEAP32[$comp_verts >> 2] = 0;
   $198 = HEAPU8[$comp$043 + 1 >> 0] | 0;
   $206 = HEAPU8[$comp$043 + 2 >> 0] << 8 | HEAPU8[$comp$043 + 3 >> 0];
   if (!($198 & 2)) {
    label = 42;
    break;
   }
   $212 = HEAP8[$comp$043 + 4 >> 0] | 0;
   if (!($198 & 1)) {
    $comp$1 = $comp$043 + 6 | 0;
    $mtx$sroa$4$0 = +($212 << 24 >> 24);
    $mtx$sroa$5$0 = +(HEAP8[$comp$043 + 5 >> 0] | 0);
   } else {
    $comp$1 = $comp$043 + 8 | 0;
    $mtx$sroa$4$0 = +(((HEAPU8[$comp$043 + 5 >> 0] | ($212 & 255) << 8) & 65535) << 16 >> 16);
    $mtx$sroa$5$0 = +(((HEAPU8[$comp$043 + 6 >> 0] << 8 | HEAPU8[$comp$043 + 7 >> 0]) & 65535) << 16 >> 16);
   }
   do if (!($198 & 8)) {
    if ($198 & 64) {
     $comp$2 = $comp$1 + 4 | 0;
     $mtx$sroa$0$0 = +(((HEAPU8[$comp$1 >> 0] << 8 | HEAPU8[$comp$1 + 1 >> 0]) & 65535) << 16 >> 16) * .00006103515625;
     $mtx$sroa$1$0 = 0.0;
     $mtx$sroa$2$0 = 0.0;
     $mtx$sroa$3$0 = +(((HEAPU8[$comp$1 + 2 >> 0] << 8 | HEAPU8[$comp$1 + 3 >> 0]) & 65535) << 16 >> 16) * .00006103515625;
     break;
    }
    if (!($198 & 128)) {
     $comp$2 = $comp$1;
     $mtx$sroa$0$0 = 1.0;
     $mtx$sroa$1$0 = 0.0;
     $mtx$sroa$2$0 = 0.0;
     $mtx$sroa$3$0 = 1.0;
    } else {
     $comp$2 = $comp$1 + 8 | 0;
     $mtx$sroa$0$0 = +(((HEAPU8[$comp$1 >> 0] << 8 | HEAPU8[$comp$1 + 1 >> 0]) & 65535) << 16 >> 16) * .00006103515625;
     $mtx$sroa$1$0 = +(((HEAPU8[$comp$1 + 2 >> 0] << 8 | HEAPU8[$comp$1 + 3 >> 0]) & 65535) << 16 >> 16) * .00006103515625;
     $mtx$sroa$2$0 = +(((HEAPU8[$comp$1 + 4 >> 0] << 8 | HEAPU8[$comp$1 + 5 >> 0]) & 65535) << 16 >> 16) * .00006103515625;
     $mtx$sroa$3$0 = +(((HEAPU8[$comp$1 + 6 >> 0] << 8 | HEAPU8[$comp$1 + 7 >> 0]) & 65535) << 16 >> 16) * .00006103515625;
    }
   } else {
    $248 = +(((HEAPU8[$comp$1 >> 0] << 8 | HEAPU8[$comp$1 + 1 >> 0]) & 65535) << 16 >> 16) * .00006103515625;
    $comp$2 = $comp$1 + 2 | 0;
    $mtx$sroa$0$0 = $248;
    $mtx$sroa$1$0 = 0.0;
    $mtx$sroa$2$0 = 0.0;
    $mtx$sroa$3$0 = $248;
   } while (0);
   $323 = +Math_sqrt(+($mtx$sroa$1$0 * $mtx$sroa$1$0 + $mtx$sroa$0$0 * $mtx$sroa$0$0));
   $327 = +Math_sqrt(+($mtx$sroa$3$0 * $mtx$sroa$3$0 + $mtx$sroa$2$0 * $mtx$sroa$2$0));
   $328 = _stbtt_GetGlyphShape($info, $206, $comp_verts) | 0;
   if (($328 | 0) > 0) {
    $330 = HEAP32[$comp_verts >> 2] | 0;
    $i2$038 = 0;
    do {
     $331 = $330 + ($i2$038 * 10 | 0) | 0;
     $333 = $330 + ($i2$038 * 10 | 0) + 2 | 0;
     $335 = +(HEAP16[$331 >> 1] | 0);
     $337 = +(HEAP16[$333 >> 1] | 0);
     HEAP16[$331 >> 1] = ~~($323 * ($mtx$sroa$4$0 + ($mtx$sroa$0$0 * $335 + $mtx$sroa$2$0 * $337)));
     HEAP16[$333 >> 1] = ~~($327 * ($mtx$sroa$5$0 + ($mtx$sroa$1$0 * $335 + $mtx$sroa$3$0 * $337)));
     $349 = $330 + ($i2$038 * 10 | 0) + 4 | 0;
     $351 = $330 + ($i2$038 * 10 | 0) + 6 | 0;
     $353 = +(HEAP16[$349 >> 1] | 0);
     $355 = +(HEAP16[$351 >> 1] | 0);
     HEAP16[$349 >> 1] = ~~($323 * ($mtx$sroa$4$0 + ($mtx$sroa$0$0 * $353 + $mtx$sroa$2$0 * $355)));
     HEAP16[$351 >> 1] = ~~($327 * ($mtx$sroa$5$0 + ($mtx$sroa$1$0 * $353 + $mtx$sroa$3$0 * $355)));
     $i2$038 = $i2$038 + 1 | 0;
    } while (($i2$038 | 0) != ($328 | 0));
    $368 = $328 + $num_vertices$444 | 0;
    $370 = _malloc($368 * 10 | 0) | 0;
    if (!$370) break;
    if (($num_vertices$444 | 0) > 0) _memcpy($370 | 0, $vertices$045 | 0, $num_vertices$444 * 10 | 0) | 0;
    $378 = HEAP32[$comp_verts >> 2] | 0;
    _memcpy($370 + ($num_vertices$444 * 10 | 0) | 0, $378 | 0, $328 * 10 | 0) | 0;
    if (!$vertices$045) $381 = $378; else {
     _free($vertices$045);
     $381 = HEAP32[$comp_verts >> 2] | 0;
    }
    _free($381);
    $num_vertices$5 = $368;
    $vertices$1 = $370;
   } else {
    $num_vertices$5 = $num_vertices$444;
    $vertices$1 = $vertices$045;
   }
   if (!($198 & 32)) {
    $num_vertices$6 = $num_vertices$5;
    $vertices$2 = $vertices$1;
    break L4;
   } else {
    $comp$043 = $comp$2;
    $num_vertices$444 = $num_vertices$5;
    $vertices$045 = $vertices$1;
   }
  }
  if ((label | 0) == 42) ___assert_fail(81008, 81016, 1208, 81128);
  if ($vertices$045) _free($vertices$045);
  $373 = HEAP32[$comp_verts >> 2] | 0;
  if (!$373) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  _free($373);
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 } while (0);
 HEAP32[$pvertices >> 2] = $vertices$2;
 $$0 = $num_vertices$6;
 STACKTOP = sp;
 return $$0 | 0;
}

function _strstr($h, $n) {
 $h = $h | 0;
 $n = $n | 0;
 var $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$0$lcssa$i14 = 0, $$01$i = 0, $$02$i = 0, $$02$i10 = 0, $$03$i = 0, $$03$us$i = 0, $$lcssa$i = 0, $$lcssa$i13 = 0, $$lcssa$i6 = 0, $$lcssa198 = 0, $$lcssa201 = 0, $$lcssa204 = 0, $$lcssa218 = 0, $$lcssa221 = 0, $$lcssa224 = 0, $$lcssa239 = 0, $$mem$0$us$i = 0, $$pr$i = 0, $$pr$us$i = 0, $0 = 0, $106 = 0, $110 = 0, $113 = 0, $12 = 0, $120 = 0, $127 = 0, $129 = 0, $130 = 0, $137 = 0, $146 = 0, $148 = 0, $149 = 0, $156 = 0, $160 = 0, $164 = 0, $166 = 0, $17 = 0, $170 = 0, $174 = 0, $175 = 0, $177 = 0, $179 = 0, $182 = 0, $189 = 0, $200 = 0, $201 = 0, $208 = 0, $229 = 0, $23 = 0, $232 = 0, $233 = 0, $240 = 0, $251 = 0, $256 = 0, $26 = 0, $27 = 0, $27$phi = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $3 = 0, $32 = 0, $34 = 0, $35 = 0, $38 = 0, $47 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $63 = 0, $66 = 0, $67 = 0, $8 = 0, $81 = 0, $9 = 0, $92 = 0, $95 = 0, $96 = 0, $99 = 0, $byteset$i = 0, $hw$0$in2$i = 0, $hw$03$i = 0, $hw$03$i9 = 0, $ip$0$ph$lcssa$i = 0, $ip$0$ph$lcssa147$i = 0, $ip$0$ph76$i = 0, $ip$1$ip$0$i = 0, $ip$1$ph$lcssa$i = 0, $ip$1$ph55$i = 0, $jp$0$ph13$ph70$i = 0, $jp$0$ph1365$i = 0, $jp$0$ph1365$i$lcssa = 0, $jp$0$ph1365$i$lcssa$lcssa = 0, $jp$0$ph77$i = 0, $jp$1$ph56$i = 0, $jp$1$ph9$ph49$i = 0, $jp$1$ph944$i = 0, $jp$1$ph944$i$lcssa = 0, $jp$1$ph944$i$lcssa$lcssa = 0, $k$059$i = 0, $k$139$i = 0, $k$338$i = 0, $k$338$i$lcssa = 0, $k$338$us$i = 0, $k$338$us$i$lcssa = 0, $k$4$i = 0, $k$4$us$i = 0, $l$080$i = 0, $l$080$i$lcssa238 = 0, $mem$0$us$i = 0, $p$0$ph$ph$lcssa32$i = 0, $p$0$ph$ph$lcssa32151$i = 0, $p$0$ph$ph71$i = 0, $p$1$p$0$i = 0, $p$1$ph$ph$lcssa23$i = 0, $p$1$ph$ph50$i = 0, $p$3155$i = 0, $shift$i = 0, $z$0$i = 0, $z$0$us$i = 0, $z$1$i = 0, $z$1$us$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056 | 0;
 $byteset$i = sp + 1024 | 0;
 $shift$i = sp;
 $0 = HEAP8[$n >> 0] | 0;
 if (!($0 << 24 >> 24)) {
  $$0 = $h;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $3 = _strchr($h, $0 << 24 >> 24) | 0;
 if (!$3) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $6 = HEAP8[$n + 1 >> 0] | 0;
 if (!($6 << 24 >> 24)) {
  $$0 = $3;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $8 = $3 + 1 | 0;
 $9 = HEAP8[$8 >> 0] | 0;
 if (!($9 << 24 >> 24)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $12 = HEAP8[$n + 2 >> 0] | 0;
 if (!($12 << 24 >> 24)) {
  $17 = $6 & 255 | ($0 & 255) << 8;
  $$01$i = $8;
  $27 = $3;
  $275 = $9;
  $hw$0$in2$i = HEAPU8[$3 >> 0] << 8 | $9 & 255;
  while (1) {
   $23 = $hw$0$in2$i & 65535;
   if (($23 | 0) == ($17 | 0)) {
    $$lcssa$i = $27;
    $32 = $275;
    break;
   }
   $26 = $27 + 2 | 0;
   $28 = HEAP8[$26 >> 0] | 0;
   if (!($28 << 24 >> 24)) {
    $$lcssa$i = $$01$i;
    $32 = 0;
    break;
   } else {
    $27$phi = $$01$i;
    $$01$i = $26;
    $275 = $28;
    $hw$0$in2$i = $28 & 255 | $23 << 8;
    $27 = $27$phi;
   }
  }
  $$0 = $32 << 24 >> 24 == 0 ? 0 : $$lcssa$i;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $34 = $3 + 2 | 0;
 $35 = HEAP8[$34 >> 0] | 0;
 if (!($35 << 24 >> 24)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $38 = HEAP8[$n + 3 >> 0] | 0;
 if (!($38 << 24 >> 24)) {
  $47 = ($6 & 255) << 16 | ($0 & 255) << 24 | ($12 & 255) << 8;
  $56 = ($35 & 255) << 8 | ($9 & 255) << 16 | HEAPU8[$3 >> 0] << 24;
  if (($56 | 0) == ($47 | 0)) {
   $$0$lcssa$i = $34;
   $$lcssa$i6 = 0;
  } else {
   $$02$i = $34;
   $hw$03$i = $56;
   while (1) {
    $58 = $$02$i + 1 | 0;
    $59 = HEAP8[$58 >> 0] | 0;
    $hw$03$i = ($59 & 255 | $hw$03$i) << 8;
    $63 = $59 << 24 >> 24 == 0;
    if ($63 | ($hw$03$i | 0) == ($47 | 0)) {
     $$0$lcssa$i = $58;
     $$lcssa$i6 = $63;
     break;
    } else $$02$i = $58;
   }
  }
  $$0 = $$lcssa$i6 ? 0 : $$0$lcssa$i + -2 | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $66 = $3 + 3 | 0;
 $67 = HEAP8[$66 >> 0] | 0;
 if (!($67 << 24 >> 24)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!(HEAP8[$n + 4 >> 0] | 0)) {
  $81 = ($6 & 255) << 16 | ($0 & 255) << 24 | ($12 & 255) << 8 | $38 & 255;
  $92 = ($35 & 255) << 8 | ($9 & 255) << 16 | $67 & 255 | HEAPU8[$3 >> 0] << 24;
  if (($92 | 0) == ($81 | 0)) {
   $$0$lcssa$i14 = $66;
   $$lcssa$i13 = 0;
  } else {
   $$02$i10 = $66;
   $hw$03$i9 = $92;
   while (1) {
    $95 = $$02$i10 + 1 | 0;
    $96 = HEAP8[$95 >> 0] | 0;
    $hw$03$i9 = $96 & 255 | $hw$03$i9 << 8;
    $99 = $96 << 24 >> 24 == 0;
    if ($99 | ($hw$03$i9 | 0) == ($81 | 0)) {
     $$0$lcssa$i14 = $95;
     $$lcssa$i13 = $99;
     break;
    } else $$02$i10 = $95;
   }
  }
  $$0 = $$lcssa$i13 ? 0 : $$0$lcssa$i14 + -3 | 0;
  STACKTOP = sp;
  return $$0 | 0;
 };
 HEAP32[$byteset$i + 0 >> 2] = 0;
 HEAP32[$byteset$i + 4 >> 2] = 0;
 HEAP32[$byteset$i + 8 >> 2] = 0;
 HEAP32[$byteset$i + 12 >> 2] = 0;
 HEAP32[$byteset$i + 16 >> 2] = 0;
 HEAP32[$byteset$i + 20 >> 2] = 0;
 HEAP32[$byteset$i + 24 >> 2] = 0;
 HEAP32[$byteset$i + 28 >> 2] = 0;
 $106 = $0;
 $l$080$i = 0;
 while (1) {
  if (!(HEAP8[$3 + $l$080$i >> 0] | 0)) {
   $$0$i = 0;
   break;
  }
  $110 = $byteset$i + ((($106 & 255) >>> 5 & 255) << 2) | 0;
  HEAP32[$110 >> 2] = HEAP32[$110 >> 2] | 1 << ($106 & 31);
  $113 = $l$080$i + 1 | 0;
  HEAP32[$shift$i + (($106 & 255) << 2) >> 2] = $113;
  $106 = HEAP8[$n + $113 >> 0] | 0;
  if (!($106 << 24 >> 24)) {
   $$lcssa239 = $113;
   $l$080$i$lcssa238 = $l$080$i;
   label = 23;
   break;
  } else $l$080$i = $113;
 }
 L46 : do if ((label | 0) == 23) {
  L48 : do if ($$lcssa239 >>> 0 > 1) {
   $276 = 1;
   $ip$0$ph76$i = -1;
   $jp$0$ph77$i = 0;
   L49 : while (1) {
    $277 = $276;
    $jp$0$ph13$ph70$i = $jp$0$ph77$i;
    $p$0$ph$ph71$i = 1;
    while (1) {
     $278 = $277;
     $jp$0$ph1365$i = $jp$0$ph13$ph70$i;
     L53 : while (1) {
      $129 = $278;
      $k$059$i = 1;
      while (1) {
       $127 = HEAP8[$n + ($k$059$i + $ip$0$ph76$i) >> 0] | 0;
       $130 = HEAP8[$n + $129 >> 0] | 0;
       if ($127 << 24 >> 24 != $130 << 24 >> 24) {
        $$lcssa218 = $129;
        $$lcssa221 = $127;
        $$lcssa224 = $130;
        $jp$0$ph1365$i$lcssa = $jp$0$ph1365$i;
        break L53;
       }
       if (($k$059$i | 0) == ($p$0$ph$ph71$i | 0)) break;
       $k$059$i = $k$059$i + 1 | 0;
       $129 = $k$059$i + $jp$0$ph1365$i | 0;
       if ($129 >>> 0 >= $$lcssa239 >>> 0) {
        $ip$0$ph$lcssa$i = $ip$0$ph76$i;
        $p$0$ph$ph$lcssa32$i = $p$0$ph$ph71$i;
        break L49;
       }
      }
      $jp$0$ph1365$i = $jp$0$ph1365$i + $p$0$ph$ph71$i | 0;
      $278 = $jp$0$ph1365$i + 1 | 0;
      if ($278 >>> 0 >= $$lcssa239 >>> 0) {
       $ip$0$ph$lcssa$i = $ip$0$ph76$i;
       $p$0$ph$ph$lcssa32$i = $p$0$ph$ph71$i;
       break L49;
      }
     }
     $137 = $$lcssa218 - $ip$0$ph76$i | 0;
     if (($$lcssa221 & 255) <= ($$lcssa224 & 255)) {
      $jp$0$ph1365$i$lcssa$lcssa = $jp$0$ph1365$i$lcssa;
      break;
     }
     $120 = $$lcssa218 + 1 | 0;
     if ($120 >>> 0 < $$lcssa239 >>> 0) {
      $277 = $120;
      $jp$0$ph13$ph70$i = $$lcssa218;
      $p$0$ph$ph71$i = $137;
     } else {
      $ip$0$ph$lcssa$i = $ip$0$ph76$i;
      $p$0$ph$ph$lcssa32$i = $137;
      break L49;
     }
    }
    $276 = $jp$0$ph1365$i$lcssa$lcssa + 2 | 0;
    if ($276 >>> 0 >= $$lcssa239 >>> 0) {
     $ip$0$ph$lcssa$i = $jp$0$ph1365$i$lcssa$lcssa;
     $p$0$ph$ph$lcssa32$i = 1;
     break;
    } else {
     $ip$0$ph76$i = $jp$0$ph1365$i$lcssa$lcssa;
     $jp$0$ph77$i = $jp$0$ph1365$i$lcssa$lcssa + 1 | 0;
    }
   }
   $279 = 1;
   $ip$1$ph55$i = -1;
   $jp$1$ph56$i = 0;
   while (1) {
    $281 = $279;
    $jp$1$ph9$ph49$i = $jp$1$ph56$i;
    $p$1$ph$ph50$i = 1;
    while (1) {
     $280 = $281;
     $jp$1$ph944$i = $jp$1$ph9$ph49$i;
     L68 : while (1) {
      $148 = $280;
      $k$139$i = 1;
      while (1) {
       $146 = HEAP8[$n + ($k$139$i + $ip$1$ph55$i) >> 0] | 0;
       $149 = HEAP8[$n + $148 >> 0] | 0;
       if ($146 << 24 >> 24 != $149 << 24 >> 24) {
        $$lcssa198 = $148;
        $$lcssa201 = $146;
        $$lcssa204 = $149;
        $jp$1$ph944$i$lcssa = $jp$1$ph944$i;
        break L68;
       }
       if (($k$139$i | 0) == ($p$1$ph$ph50$i | 0)) break;
       $k$139$i = $k$139$i + 1 | 0;
       $148 = $k$139$i + $jp$1$ph944$i | 0;
       if ($148 >>> 0 >= $$lcssa239 >>> 0) {
        $ip$0$ph$lcssa147$i = $ip$0$ph$lcssa$i;
        $ip$1$ph$lcssa$i = $ip$1$ph55$i;
        $p$0$ph$ph$lcssa32151$i = $p$0$ph$ph$lcssa32$i;
        $p$1$ph$ph$lcssa23$i = $p$1$ph$ph50$i;
        break L48;
       }
      }
      $jp$1$ph944$i = $jp$1$ph944$i + $p$1$ph$ph50$i | 0;
      $280 = $jp$1$ph944$i + 1 | 0;
      if ($280 >>> 0 >= $$lcssa239 >>> 0) {
       $ip$0$ph$lcssa147$i = $ip$0$ph$lcssa$i;
       $ip$1$ph$lcssa$i = $ip$1$ph55$i;
       $p$0$ph$ph$lcssa32151$i = $p$0$ph$ph$lcssa32$i;
       $p$1$ph$ph$lcssa23$i = $p$1$ph$ph50$i;
       break L48;
      }
     }
     $156 = $$lcssa198 - $ip$1$ph55$i | 0;
     if (($$lcssa201 & 255) >= ($$lcssa204 & 255)) {
      $jp$1$ph944$i$lcssa$lcssa = $jp$1$ph944$i$lcssa;
      break;
     }
     $160 = $$lcssa198 + 1 | 0;
     if ($160 >>> 0 < $$lcssa239 >>> 0) {
      $281 = $160;
      $jp$1$ph9$ph49$i = $$lcssa198;
      $p$1$ph$ph50$i = $156;
     } else {
      $ip$0$ph$lcssa147$i = $ip$0$ph$lcssa$i;
      $ip$1$ph$lcssa$i = $ip$1$ph55$i;
      $p$0$ph$ph$lcssa32151$i = $p$0$ph$ph$lcssa32$i;
      $p$1$ph$ph$lcssa23$i = $156;
      break L48;
     }
    }
    $279 = $jp$1$ph944$i$lcssa$lcssa + 2 | 0;
    if ($279 >>> 0 >= $$lcssa239 >>> 0) {
     $ip$0$ph$lcssa147$i = $ip$0$ph$lcssa$i;
     $ip$1$ph$lcssa$i = $jp$1$ph944$i$lcssa$lcssa;
     $p$0$ph$ph$lcssa32151$i = $p$0$ph$ph$lcssa32$i;
     $p$1$ph$ph$lcssa23$i = 1;
     break;
    } else {
     $ip$1$ph55$i = $jp$1$ph944$i$lcssa$lcssa;
     $jp$1$ph56$i = $jp$1$ph944$i$lcssa$lcssa + 1 | 0;
    }
   }
  } else {
   $ip$0$ph$lcssa147$i = -1;
   $ip$1$ph$lcssa$i = -1;
   $p$0$ph$ph$lcssa32151$i = 1;
   $p$1$ph$ph$lcssa23$i = 1;
  } while (0);
  $164 = ($ip$1$ph$lcssa$i + 1 | 0) >>> 0 > ($ip$0$ph$lcssa147$i + 1 | 0) >>> 0;
  $p$1$p$0$i = $164 ? $p$1$ph$ph$lcssa23$i : $p$0$ph$ph$lcssa32151$i;
  $ip$1$ip$0$i = $164 ? $ip$1$ph$lcssa$i : $ip$0$ph$lcssa147$i;
  $166 = $ip$1$ip$0$i + 1 | 0;
  if (!(_memcmp($n, $n + $p$1$p$0$i | 0, $166) | 0)) {
   $174 = $$lcssa239 - $p$1$p$0$i | 0;
   $175 = $$lcssa239 | 63;
   if (($$lcssa239 | 0) == ($p$1$p$0$i | 0)) {
    $232 = $175;
    $p$3155$i = $$lcssa239;
   } else {
    $$03$us$i = $3;
    $mem$0$us$i = 0;
    $z$0$us$i = $3;
    L81 : while (1) {
     $179 = $$03$us$i;
     do if (($z$0$us$i - $179 | 0) >>> 0 < $$lcssa239 >>> 0) {
      $182 = _memchr($z$0$us$i, 0, $175) | 0;
      if (!$182) {
       $z$1$us$i = $z$0$us$i + $175 | 0;
       break;
      } else if (($182 - $179 | 0) >>> 0 < $$lcssa239 >>> 0) {
       $$0$i = 0;
       break L46;
      } else {
       $z$1$us$i = $182;
       break;
      }
     } else $z$1$us$i = $z$0$us$i; while (0);
     $189 = HEAP8[$$03$us$i + $l$080$i$lcssa238 >> 0] | 0;
     if (!(1 << ($189 & 31) & HEAP32[$byteset$i + ((($189 & 255) >>> 5 & 255) << 2) >> 2])) {
      $$03$us$i = $$03$us$i + $$lcssa239 | 0;
      $mem$0$us$i = 0;
      $z$0$us$i = $z$1$us$i;
      continue;
     }
     $200 = HEAP32[$shift$i + (($189 & 255) << 2) >> 2] | 0;
     $201 = $$lcssa239 - $200 | 0;
     if (($$lcssa239 | 0) != ($200 | 0)) {
      $$03$us$i = $$03$us$i + (($mem$0$us$i | 0) != 0 & $201 >>> 0 < $p$1$p$0$i >>> 0 ? $174 : $201) | 0;
      $mem$0$us$i = 0;
      $z$0$us$i = $z$1$us$i;
      continue;
     }
     $$mem$0$us$i = $166 >>> 0 > $mem$0$us$i >>> 0 ? $166 : $mem$0$us$i;
     $208 = HEAP8[$n + $$mem$0$us$i >> 0] | 0;
     L95 : do if (!($208 << 24 >> 24)) $k$4$us$i = $166; else {
      $$pr$us$i = $208;
      $k$338$us$i = $$mem$0$us$i;
      while (1) {
       if ($$pr$us$i << 24 >> 24 != (HEAP8[$$03$us$i + $k$338$us$i >> 0] | 0)) {
        $k$338$us$i$lcssa = $k$338$us$i;
        break;
       }
       $k$338$us$i = $k$338$us$i + 1 | 0;
       $$pr$us$i = HEAP8[$n + $k$338$us$i >> 0] | 0;
       if (!($$pr$us$i << 24 >> 24)) {
        $k$4$us$i = $166;
        break L95;
       }
      }
      $$03$us$i = $$03$us$i + ($k$338$us$i$lcssa - $ip$1$ip$0$i) | 0;
      $mem$0$us$i = 0;
      $z$0$us$i = $z$1$us$i;
      continue L81;
     } while (0);
     do {
      if ($k$4$us$i >>> 0 <= $mem$0$us$i >>> 0) {
       $$0$i = $$03$us$i;
       break L46;
      }
      $k$4$us$i = $k$4$us$i + -1 | 0;
     } while ((HEAP8[$n + $k$4$us$i >> 0] | 0) == (HEAP8[$$03$us$i + $k$4$us$i >> 0] | 0));
     $$03$us$i = $$03$us$i + $p$1$p$0$i | 0;
     $mem$0$us$i = $174;
     $z$0$us$i = $z$1$us$i;
    }
   }
  } else {
   $170 = $$lcssa239 - $ip$1$ip$0$i + -1 | 0;
   $232 = $$lcssa239 | 63;
   $p$3155$i = ($ip$1$ip$0$i >>> 0 > $170 >>> 0 ? $ip$1$ip$0$i : $170) + 1 | 0;
  }
  $177 = $n + $166 | 0;
  $$03$i = $3;
  $z$0$i = $3;
  L106 : while (1) {
   $229 = $$03$i;
   do if (($z$0$i - $229 | 0) >>> 0 < $$lcssa239 >>> 0) {
    $233 = _memchr($z$0$i, 0, $232) | 0;
    if (!$233) {
     $z$1$i = $z$0$i + $232 | 0;
     break;
    } else if (($233 - $229 | 0) >>> 0 < $$lcssa239 >>> 0) {
     $$0$i = 0;
     break L46;
    } else {
     $z$1$i = $233;
     break;
    }
   } else $z$1$i = $z$0$i; while (0);
   $240 = HEAP8[$$03$i + $l$080$i$lcssa238 >> 0] | 0;
   if (!(1 << ($240 & 31) & HEAP32[$byteset$i + ((($240 & 255) >>> 5 & 255) << 2) >> 2])) {
    $$03$i = $$03$i + $$lcssa239 | 0;
    $z$0$i = $z$1$i;
    continue;
   }
   $251 = HEAP32[$shift$i + (($240 & 255) << 2) >> 2] | 0;
   if (($$lcssa239 | 0) != ($251 | 0)) {
    $$03$i = $$03$i + ($$lcssa239 - $251) | 0;
    $z$0$i = $z$1$i;
    continue;
   }
   $256 = HEAP8[$177 >> 0] | 0;
   L120 : do if (!($256 << 24 >> 24)) $k$4$i = $166; else {
    $$pr$i = $256;
    $k$338$i = $166;
    while (1) {
     if ($$pr$i << 24 >> 24 != (HEAP8[$$03$i + $k$338$i >> 0] | 0)) {
      $k$338$i$lcssa = $k$338$i;
      break;
     }
     $k$338$i = $k$338$i + 1 | 0;
     $$pr$i = HEAP8[$n + $k$338$i >> 0] | 0;
     if (!($$pr$i << 24 >> 24)) {
      $k$4$i = $166;
      break L120;
     }
    }
    $$03$i = $$03$i + ($k$338$i$lcssa - $ip$1$ip$0$i) | 0;
    $z$0$i = $z$1$i;
    continue L106;
   } while (0);
   do {
    if (!$k$4$i) {
     $$0$i = $$03$i;
     break L46;
    }
    $k$4$i = $k$4$i + -1 | 0;
   } while ((HEAP8[$n + $k$4$i >> 0] | 0) == (HEAP8[$$03$i + $k$4$i >> 0] | 0));
   $$03$i = $$03$i + $p$3155$i | 0;
   $z$0$i = $z$1$i;
  }
 } while (0);
 $$0 = $$0$i;
 STACKTOP = sp;
 return $$0 | 0;
}

function _inflate_fast($strm, $start) {
 $strm = $strm | 0;
 $start = $start | 0;
 var $$in = 0, $$in4 = 0, $$lcssa = 0, $$lcssa20 = 0, $$lcssa36 = 0, $$lcssa38 = 0, $$lcssa40 = 0, $1 = 0, $10 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $109 = 0, $11 = 0, $110 = 0, $112 = 0, $116 = 0, $117 = 0, $119 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $134 = 0, $139 = 0, $14 = 0, $141 = 0, $142 = 0, $150 = 0, $151 = 0, $153 = 0, $154 = 0, $161 = 0, $168 = 0, $170 = 0, $171 = 0, $18 = 0, $185 = 0, $187 = 0, $188 = 0, $193 = 0, $197 = 0, $2 = 0, $20 = 0, $206 = 0, $208 = 0, $214 = 0, $218 = 0, $22 = 0, $220 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $25 = 0, $253 = 0, $255 = 0, $257 = 0, $260 = 0, $278 = 0, $28 = 0, $30 = 0, $34 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $55 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $67 = 0, $69 = 0, $7 = 0, $71 = 0, $72 = 0, $74 = 0, $76 = 0, $8 = 0, $81 = 0, $96 = 0, $bits$0 = 0, $bits$1 = 0, $bits$3 = 0, $bits$4 = 0, $bits$5 = 0, $bits$7 = 0, $bits$8 = 0, $bits$9 = 0, $from$0 = 0, $from$1 = 0, $from$2 = 0, $from$3 = 0, $from$4$lcssa = 0, $from$4$ph = 0, $from$464 = 0, $from$5 = 0, $here$sroa$0$0 = 0, $here$sroa$0$029 = 0, $here$sroa$2$0 = 0, $here$sroa$2$0$lcssa$off0 = 0, $here$sroa$2$031 = 0, $here$sroa$2$032 = 0, $here$sroa$2$1 = 0, $here$sroa$2$1$lcssa = 0, $here$sroa$2$147 = 0, $here$sroa$2$148 = 0, $hold$0 = 0, $hold$1 = 0, $hold$3 = 0, $hold$4 = 0, $hold$5 = 0, $hold$7 = 0, $hold$8 = 0, $hold$9 = 0, $in$0 = 0, $in$1 = 0, $in$2 = 0, $in$3 = 0, $in$4 = 0, $in$5 = 0, $in$6 = 0, $in$7 = 0, $len$0 = 0, $len$1$lcssa = 0, $len$1$ph = 0, $len$163 = 0, $len$2 = 0, $op$0 = 0, $op$1 = 0, $op$2 = 0, $op$3 = 0, $out$0 = 0, $out$1 = 0, $out$2 = 0, $out$3 = 0, $out$4 = 0, $out$5$lcssa = 0, $out$5$ph = 0, $out$562 = 0, $out$6 = 0, $out$7 = 0, $out$8 = 0, $scevgep110 = 0, label = 0;
 $1 = HEAP32[$strm + 28 >> 2] | 0;
 $2 = HEAP32[$strm >> 2] | 0;
 $4 = $strm + 4 | 0;
 $6 = $2 + ((HEAP32[$4 >> 2] | 0) + -6) | 0;
 $7 = $strm + 12 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 $10 = $strm + 16 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 $14 = $8 + ($11 + -258) | 0;
 $18 = HEAP32[$1 + 44 >> 2] | 0;
 $20 = HEAP32[$1 + 48 >> 2] | 0;
 $22 = HEAP32[$1 + 52 >> 2] | 0;
 $23 = $1 + 56 | 0;
 $25 = $1 + 60 | 0;
 $28 = HEAP32[$1 + 76 >> 2] | 0;
 $30 = HEAP32[$1 + 80 >> 2] | 0;
 $34 = (1 << HEAP32[$1 + 84 >> 2]) + -1 | 0;
 $38 = (1 << HEAP32[$1 + 88 >> 2]) + -1 | 0;
 $39 = $8 + ($11 + ~$start) | 0;
 $40 = $1 + 7104 | 0;
 $41 = $22 + -1 | 0;
 $42 = ($20 | 0) == 0;
 $43 = (HEAP32[$1 + 40 >> 2] | 0) + -1 | 0;
 $44 = $43 + $20 | 0;
 $45 = $20 + -1 | 0;
 $46 = $39 + -1 | 0;
 $47 = $39 - $20 | 0;
 $bits$0 = HEAP32[$25 >> 2] | 0;
 $hold$0 = HEAP32[$23 >> 2] | 0;
 $in$0 = $2 + -1 | 0;
 $out$0 = $8 + -1 | 0;
 L1 : while (1) {
  if ($bits$0 >>> 0 < 15) {
   $55 = $in$0 + 2 | 0;
   $bits$1 = $bits$0 + 16 | 0;
   $hold$1 = ((HEAPU8[$in$0 + 1 >> 0] | 0) << $bits$0) + $hold$0 + ((HEAPU8[$55 >> 0] | 0) << $bits$0 + 8) | 0;
   $in$1 = $55;
  } else {
   $bits$1 = $bits$0;
   $hold$1 = $hold$0;
   $in$1 = $in$0;
  }
  $61 = $hold$1 & $34;
  $here$sroa$0$029 = HEAP8[$28 + ($61 << 2) >> 0] | 0;
  $here$sroa$2$031 = HEAP16[$28 + ($61 << 2) + 2 >> 1] | 0;
  $62 = HEAPU8[$28 + ($61 << 2) + 1 >> 0] | 0;
  $63 = $hold$1 >>> $62;
  $64 = $bits$1 - $62 | 0;
  do if (!($here$sroa$0$029 << 24 >> 24)) {
   $$lcssa = $63;
   $$lcssa20 = $64;
   $here$sroa$2$0$lcssa$off0 = $here$sroa$2$031 & 255;
   label = 7;
  } else {
   $69 = $here$sroa$0$029 & 255;
   $74 = $64;
   $81 = $63;
   $here$sroa$2$032 = $here$sroa$2$031;
   while (1) {
    if ($69 & 16) break;
    if ($69 & 64) {
     label = 55;
     break L1;
    }
    $242 = ($81 & (1 << $69) + -1) + ($here$sroa$2$032 & 65535) | 0;
    $here$sroa$0$0 = HEAP8[$28 + ($242 << 2) >> 0] | 0;
    $here$sroa$2$0 = HEAP16[$28 + ($242 << 2) + 2 >> 1] | 0;
    $243 = HEAPU8[$28 + ($242 << 2) + 1 >> 0] | 0;
    $244 = $81 >>> $243;
    $245 = $74 - $243 | 0;
    if (!($here$sroa$0$0 << 24 >> 24)) {
     label = 6;
     break;
    } else {
     $69 = $here$sroa$0$0 & 255;
     $74 = $245;
     $81 = $244;
     $here$sroa$2$032 = $here$sroa$2$0;
    }
   }
   if ((label | 0) == 6) {
    label = 0;
    $$lcssa = $244;
    $$lcssa20 = $245;
    $here$sroa$2$0$lcssa$off0 = $here$sroa$2$0 & 255;
    label = 7;
    break;
   }
   $71 = $here$sroa$2$032 & 65535;
   $72 = $69 & 15;
   if (!$72) {
    $bits$4 = $74;
    $hold$4 = $81;
    $in$3 = $in$1;
    $len$0 = $71;
   } else {
    if ($74 >>> 0 < $72 >>> 0) {
     $76 = $in$1 + 1 | 0;
     $bits$3 = $74 + 8 | 0;
     $hold$3 = ((HEAPU8[$76 >> 0] | 0) << $74) + $81 | 0;
     $in$2 = $76;
    } else {
     $bits$3 = $74;
     $hold$3 = $81;
     $in$2 = $in$1;
    }
    $bits$4 = $bits$3 - $72 | 0;
    $hold$4 = $hold$3 >>> $72;
    $in$3 = $in$2;
    $len$0 = ($hold$3 & (1 << $72) + -1) + $71 | 0;
   }
   if ($bits$4 >>> 0 < 15) {
    $96 = $in$3 + 2 | 0;
    $bits$5 = $bits$4 + 16 | 0;
    $hold$5 = ((HEAPU8[$in$3 + 1 >> 0] | 0) << $bits$4) + $hold$4 + ((HEAPU8[$96 >> 0] | 0) << $bits$4 + 8) | 0;
    $in$4 = $96;
   } else {
    $bits$5 = $bits$4;
    $hold$5 = $hold$4;
    $in$4 = $in$3;
   }
   $102 = $hold$5 & $38;
   $here$sroa$2$147 = HEAP16[$30 + ($102 << 2) + 2 >> 1] | 0;
   $103 = HEAPU8[$30 + ($102 << 2) + 1 >> 0] | 0;
   $104 = $hold$5 >>> $103;
   $105 = $bits$5 - $103 | 0;
   $106 = HEAPU8[$30 + ($102 << 2) >> 0] | 0;
   if (!($106 & 16)) {
    $220 = $106;
    $226 = $104;
    $231 = $105;
    $here$sroa$2$148 = $here$sroa$2$147;
    while (1) {
     if ($220 & 64) {
      label = 52;
      break L1;
     }
     $227 = ($226 & (1 << $220) + -1) + ($here$sroa$2$148 & 65535) | 0;
     $here$sroa$2$1 = HEAP16[$30 + ($227 << 2) + 2 >> 1] | 0;
     $228 = HEAPU8[$30 + ($227 << 2) + 1 >> 0] | 0;
     $229 = $226 >>> $228;
     $230 = $231 - $228 | 0;
     $232 = HEAPU8[$30 + ($227 << 2) >> 0] | 0;
     if (!($232 & 16)) {
      $220 = $232;
      $226 = $229;
      $231 = $230;
      $here$sroa$2$148 = $here$sroa$2$1;
     } else {
      $$lcssa36 = $229;
      $$lcssa38 = $230;
      $$lcssa40 = $232;
      $here$sroa$2$1$lcssa = $here$sroa$2$1;
      break;
     }
    }
   } else {
    $$lcssa36 = $104;
    $$lcssa38 = $105;
    $$lcssa40 = $106;
    $here$sroa$2$1$lcssa = $here$sroa$2$147;
   }
   $109 = $here$sroa$2$1$lcssa & 65535;
   $110 = $$lcssa40 & 15;
   if ($$lcssa38 >>> 0 < $110 >>> 0) {
    $112 = $in$4 + 1 | 0;
    $116 = ((HEAPU8[$112 >> 0] | 0) << $$lcssa38) + $$lcssa36 | 0;
    $117 = $$lcssa38 + 8 | 0;
    if ($117 >>> 0 < $110 >>> 0) {
     $119 = $in$4 + 2 | 0;
     $bits$7 = $$lcssa38 + 16 | 0;
     $hold$7 = ((HEAPU8[$119 >> 0] | 0) << $117) + $116 | 0;
     $in$5 = $119;
    } else {
     $bits$7 = $117;
     $hold$7 = $116;
     $in$5 = $112;
    }
   } else {
    $bits$7 = $$lcssa38;
    $hold$7 = $$lcssa36;
    $in$5 = $in$4;
   }
   $128 = ($hold$7 & (1 << $110) + -1) + $109 | 0;
   $129 = $hold$7 >>> $110;
   $130 = $bits$7 - $110 | 0;
   $131 = $out$0;
   $132 = $131 - $39 | 0;
   if ($128 >>> 0 <= $132 >>> 0) {
    $from$5 = $out$0 + (0 - $128) | 0;
    $len$2 = $len$0;
    $out$6 = $out$0;
    while (1) {
     HEAP8[$out$6 + 1 >> 0] = HEAP8[$from$5 + 1 >> 0] | 0;
     HEAP8[$out$6 + 2 >> 0] = HEAP8[$from$5 + 2 >> 0] | 0;
     $206 = $from$5 + 3 | 0;
     $208 = $out$6 + 3 | 0;
     HEAP8[$208 >> 0] = HEAP8[$206 >> 0] | 0;
     $len$2 = $len$2 + -3 | 0;
     if ($len$2 >>> 0 <= 2) break; else {
      $from$5 = $206;
      $out$6 = $208;
     }
    }
    if (!$len$2) {
     $bits$8 = $130;
     $hold$8 = $129;
     $in$6 = $in$5;
     $out$7 = $208;
     break;
    }
    $214 = $out$6 + 4 | 0;
    HEAP8[$214 >> 0] = HEAP8[$from$5 + 4 >> 0] | 0;
    if ($len$2 >>> 0 <= 1) {
     $bits$8 = $130;
     $hold$8 = $129;
     $in$6 = $in$5;
     $out$7 = $214;
     break;
    }
    $218 = $out$6 + 5 | 0;
    HEAP8[$218 >> 0] = HEAP8[$from$5 + 5 >> 0] | 0;
    $bits$8 = $130;
    $hold$8 = $129;
    $in$6 = $in$5;
    $out$7 = $218;
    break;
   }
   $134 = $128 - $132 | 0;
   if ($134 >>> 0 > $18 >>> 0) if (HEAP32[$40 >> 2] | 0) {
    label = 22;
    break L1;
   }
   do if ($42) {
    $139 = $22 + ($43 - $134) | 0;
    if ($134 >>> 0 < $len$0 >>> 0) {
     $141 = $len$0 - $134 | 0;
     $142 = $128 - $131 | 0;
     $from$0 = $139;
     $op$0 = $134;
     $out$1 = $out$0;
     do {
      $from$0 = $from$0 + 1 | 0;
      $out$1 = $out$1 + 1 | 0;
      HEAP8[$out$1 >> 0] = HEAP8[$from$0 >> 0] | 0;
      $op$0 = $op$0 + -1 | 0;
     } while (($op$0 | 0) != 0);
     $from$4$ph = $out$0 + ($46 + $142 + (1 - $128)) | 0;
     $len$1$ph = $141;
     $out$5$ph = $out$0 + ($39 + $142) | 0;
    } else {
     $from$4$ph = $139;
     $len$1$ph = $len$0;
     $out$5$ph = $out$0;
    }
   } else {
    if ($20 >>> 0 >= $134 >>> 0) {
     $168 = $22 + ($45 - $134) | 0;
     if ($134 >>> 0 >= $len$0 >>> 0) {
      $from$4$ph = $168;
      $len$1$ph = $len$0;
      $out$5$ph = $out$0;
      break;
     }
     $170 = $len$0 - $134 | 0;
     $171 = $128 - $131 | 0;
     $from$3 = $168;
     $op$3 = $134;
     $out$4 = $out$0;
     do {
      $from$3 = $from$3 + 1 | 0;
      $out$4 = $out$4 + 1 | 0;
      HEAP8[$out$4 >> 0] = HEAP8[$from$3 >> 0] | 0;
      $op$3 = $op$3 + -1 | 0;
     } while (($op$3 | 0) != 0);
     $from$4$ph = $out$0 + ($46 + $171 + (1 - $128)) | 0;
     $len$1$ph = $170;
     $out$5$ph = $out$0 + ($39 + $171) | 0;
     break;
    }
    $150 = $22 + ($44 - $134) | 0;
    $151 = $134 - $20 | 0;
    if ($151 >>> 0 < $len$0 >>> 0) {
     $153 = $len$0 - $151 | 0;
     $154 = $128 - $131 | 0;
     $from$1 = $150;
     $op$1 = $151;
     $out$2 = $out$0;
     do {
      $from$1 = $from$1 + 1 | 0;
      $out$2 = $out$2 + 1 | 0;
      HEAP8[$out$2 >> 0] = HEAP8[$from$1 >> 0] | 0;
      $op$1 = $op$1 + -1 | 0;
     } while (($op$1 | 0) != 0);
     $scevgep110 = $out$0 + ($47 + $154) | 0;
     if ($20 >>> 0 < $153 >>> 0) {
      $161 = $153 - $20 | 0;
      $from$2 = $41;
      $op$2 = $20;
      $out$3 = $scevgep110;
      do {
       $from$2 = $from$2 + 1 | 0;
       $out$3 = $out$3 + 1 | 0;
       HEAP8[$out$3 >> 0] = HEAP8[$from$2 >> 0] | 0;
       $op$2 = $op$2 + -1 | 0;
      } while (($op$2 | 0) != 0);
      $from$4$ph = $out$0 + ($46 + $154 + (1 - $128)) | 0;
      $len$1$ph = $161;
      $out$5$ph = $out$0 + ($39 + $154) | 0;
     } else {
      $from$4$ph = $41;
      $len$1$ph = $153;
      $out$5$ph = $scevgep110;
     }
    } else {
     $from$4$ph = $150;
     $len$1$ph = $len$0;
     $out$5$ph = $out$0;
    }
   } while (0);
   if ($len$1$ph >>> 0 > 2) {
    $from$464 = $from$4$ph;
    $len$163 = $len$1$ph;
    $out$562 = $out$5$ph;
    while (1) {
     HEAP8[$out$562 + 1 >> 0] = HEAP8[$from$464 + 1 >> 0] | 0;
     HEAP8[$out$562 + 2 >> 0] = HEAP8[$from$464 + 2 >> 0] | 0;
     $185 = $from$464 + 3 | 0;
     $187 = $out$562 + 3 | 0;
     HEAP8[$187 >> 0] = HEAP8[$185 >> 0] | 0;
     $188 = $len$163 + -3 | 0;
     if ($188 >>> 0 > 2) {
      $from$464 = $185;
      $len$163 = $188;
      $out$562 = $187;
     } else {
      $from$4$lcssa = $185;
      $len$1$lcssa = $188;
      $out$5$lcssa = $187;
      break;
     }
    }
   } else {
    $from$4$lcssa = $from$4$ph;
    $len$1$lcssa = $len$1$ph;
    $out$5$lcssa = $out$5$ph;
   }
   if (!$len$1$lcssa) {
    $bits$8 = $130;
    $hold$8 = $129;
    $in$6 = $in$5;
    $out$7 = $out$5$lcssa;
   } else {
    $193 = $out$5$lcssa + 1 | 0;
    HEAP8[$193 >> 0] = HEAP8[$from$4$lcssa + 1 >> 0] | 0;
    if ($len$1$lcssa >>> 0 > 1) {
     $197 = $out$5$lcssa + 2 | 0;
     HEAP8[$197 >> 0] = HEAP8[$from$4$lcssa + 2 >> 0] | 0;
     $bits$8 = $130;
     $hold$8 = $129;
     $in$6 = $in$5;
     $out$7 = $197;
    } else {
     $bits$8 = $130;
     $hold$8 = $129;
     $in$6 = $in$5;
     $out$7 = $193;
    }
   }
  } while (0);
  if ((label | 0) == 7) {
   label = 0;
   $67 = $out$0 + 1 | 0;
   HEAP8[$67 >> 0] = $here$sroa$2$0$lcssa$off0;
   $bits$8 = $$lcssa20;
   $hold$8 = $$lcssa;
   $in$6 = $in$1;
   $out$7 = $67;
  }
  if ($in$6 >>> 0 < $6 >>> 0 & $out$7 >>> 0 < $14 >>> 0) {
   $bits$0 = $bits$8;
   $hold$0 = $hold$8;
   $in$0 = $in$6;
   $out$0 = $out$7;
  } else {
   $bits$9 = $bits$8;
   $hold$9 = $hold$8;
   $in$7 = $in$6;
   $out$8 = $out$7;
   break;
  }
 }
 do if ((label | 0) == 22) {
  HEAP32[$strm + 24 >> 2] = 105688;
  HEAP32[$1 >> 2] = 29;
  $bits$9 = $130;
  $hold$9 = $129;
  $in$7 = $in$5;
  $out$8 = $out$0;
 } else if ((label | 0) == 52) {
  HEAP32[$strm + 24 >> 2] = 105720;
  HEAP32[$1 >> 2] = 29;
  $bits$9 = $231;
  $hold$9 = $226;
  $in$7 = $in$4;
  $out$8 = $out$0;
 } else if ((label | 0) == 55) if (!($69 & 32)) {
  HEAP32[$strm + 24 >> 2] = 105744;
  HEAP32[$1 >> 2] = 29;
  $bits$9 = $74;
  $hold$9 = $81;
  $in$7 = $in$1;
  $out$8 = $out$0;
  break;
 } else {
  HEAP32[$1 >> 2] = 11;
  $bits$9 = $74;
  $hold$9 = $81;
  $in$7 = $in$1;
  $out$8 = $out$0;
  break;
 } while (0);
 $253 = $bits$9 >>> 3;
 $255 = $in$7 + (0 - $253) | 0;
 $257 = $bits$9 - ($253 << 3) | 0;
 $260 = (1 << $257) + -1 & $hold$9;
 HEAP32[$strm >> 2] = $in$7 + (1 - $253);
 HEAP32[$7 >> 2] = $out$8 + 1;
 if ($255 >>> 0 < $6 >>> 0) $$in4 = $6 - $255 | 0; else $$in4 = $6 - $255 | 0;
 HEAP32[$4 >> 2] = $$in4 + 5;
 if ($out$8 >>> 0 < $14 >>> 0) {
  $$in = $14 - $out$8 | 0;
  $278 = $$in + 257 | 0;
  HEAP32[$10 >> 2] = $278;
  HEAP32[$23 >> 2] = $260;
  HEAP32[$25 >> 2] = $257;
  return;
 } else {
  $$in = $14 - $out$8 | 0;
  $278 = $$in + 257 | 0;
  HEAP32[$10 >> 2] = $278;
  HEAP32[$23 >> 2] = $260;
  HEAP32[$25 >> 2] = $257;
  return;
 }
}

function _singlestep($L) {
 $L = $L | 0;
 var $$0 = 0, $$0$i$i$i = 0, $$02$i$i = 0, $$02$i20$i = 0, $$pre$pre$i = 0, $0 = 0, $1 = 0, $104 = 0, $108 = 0, $109 = 0, $11 = 0, $120 = 0, $122 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $130 = 0, $131 = 0, $132 = 0, $134 = 0, $137 = 0, $142 = 0, $155 = 0, $166 = 0, $171 = 0, $173 = 0, $174 = 0, $176 = 0, $179 = 0, $180 = 0, $186 = 0, $192 = 0, $2 = 0, $204 = 0, $209 = 0, $211 = 0, $212 = 0, $214 = 0, $217 = 0, $218 = 0, $22 = 0, $224 = 0, $230 = 0, $244 = 0, $249 = 0, $250 = 0, $252 = 0, $254 = 0, $266 = 0, $267 = 0, $268 = 0, $270 = 0, $271 = 0, $272 = 0, $275 = 0, $279 = 0, $280 = 0, $281 = 0, $283 = 0, $284 = 0, $285 = 0, $288 = 0, $292 = 0, $293 = 0, $295 = 0, $296 = 0, $297 = 0, $300 = 0, $306 = 0, $319 = 0, $320 = 0, $321 = 0, $323 = 0, $329 = 0, $335 = 0, $338 = 0, $344 = 0, $346 = 0, $35 = 0, $350 = 0, $352 = 0, $353 = 0, $40 = 0, $46 = 0, $47 = 0, $49 = 0, $60 = 0, $65 = 0, $66 = 0, $68 = 0, $71 = 0, $75 = 0, $8 = 0, $81 = 0, $84 = 0, $87 = 0, $9 = 0, $92 = 0, $99 = 0, $changed$0$ph$i$i = 0, $changed$0$ph$i10$i = 0, $i$0$i$i = 0, $i$02$i = 0, $i$04$i = 0, $lastnext$0$ph4$us$i$i = 0, $lastnext$02$us$us$i$i = 0, $lastnext$02$us$us$i$i$phi = 0, $n$01$i$i = 0, $n$01$i22$i = 0, $next$0$i$i = 0, $next$0$i13$i = 0, $next$0$ph$i$i = 0, $next$0$ph$i11$i = 0, $o$01$i$i = 0, $o$01$i$i2 = 0, $o$02$i$i = 0, $o$02$i$i3 = 0, $p$0$ph3$us$i$i = 0, $p$0$ph6$i$i = 0, $uv$01$i$i = 0, $uv$02$i$i = 0, label = 0, $next$0$i$i$looptemp = 0, $next$0$i13$i$looptemp = 0;
 $0 = $L + 12 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $1 + 49 | 0;
 switch (HEAPU8[$2 >> 0] | 0) {
 case 1:
  {
   $40 = $1 + 64 | 0;
   if (!(HEAP32[$40 >> 2] | 0)) $46 = $1; else {
    do _propagatemark($1); while ((HEAP32[$40 >> 2] | 0) != 0);
    $46 = HEAP32[$0 >> 2] | 0;
   }
   $47 = HEAP32[$46 + 68 >> 2] | 0;
   HEAP8[$46 + 49 >> 0] = 8;
   $49 = $46 + 16 | 0;
   HEAP32[$49 >> 2] = 0;
   if ($L) if (HEAP8[$L + 5 >> 0] & 3) _reallymarkobject($46, $L);
   if (HEAP32[$46 + 40 >> 2] & 64) {
    $60 = HEAP32[$46 + 36 >> 2] | 0;
    if (HEAP8[$60 + 5 >> 0] & 3) _reallymarkobject($46, $60);
   }
   _markmt($46);
   $65 = $46 + 92 | 0;
   $66 = HEAP32[$65 >> 2] | 0;
   L16 : do if ($66) {
    $352 = $66;
    $p$0$ph6$i$i = $65;
    do {
     $71 = $352;
     while (1) {
      $75 = $71 + 32 | 0;
      if (!(HEAP8[$71 + 5 >> 0] & 7)) if (HEAP32[$75 >> 2] | 0) break;
      $81 = $71 + 40 | 0;
      HEAP32[$p$0$ph6$i$i >> 2] = HEAP32[$81 >> 2];
      HEAP32[$81 >> 2] = $71;
      $uv$01$i$i = HEAP32[$75 >> 2] | 0;
      if ($uv$01$i$i) {
       $uv$02$i$i = $uv$01$i$i;
       do {
        $84 = $uv$02$i$i + 12 | 0;
        if (HEAP32[$84 >> 2] | 0) {
         $87 = HEAP32[$uv$02$i$i >> 2] | 0;
         if (HEAP32[$87 + 4 >> 2] & 64) {
          $92 = HEAP32[$87 >> 2] | 0;
          if (HEAP8[$92 + 5 >> 0] & 3) _reallymarkobject($46, $92);
         }
         HEAP32[$84 >> 2] = 0;
        }
        $uv$02$i$i = HEAP32[$uv$02$i$i + 8 >> 2] | 0;
       } while (($uv$02$i$i | 0) != 0);
      }
      $68 = HEAP32[$p$0$ph6$i$i >> 2] | 0;
      if (!$68) break L16; else $71 = $68;
     }
     $p$0$ph6$i$i = $71 + 40 | 0;
     $352 = HEAP32[$p$0$ph6$i$i >> 2] | 0;
    } while (($352 | 0) != 0);
   } while (0);
   $99 = $46 + 64 | 0;
   if (HEAP32[$99 >> 2] | 0) do _propagatemark($46); while ((HEAP32[$99 >> 2] | 0) != 0);
   $104 = HEAP32[$49 >> 2] | 0;
   HEAP32[$99 >> 2] = $47;
   if ($47) do _propagatemark($46); while ((HEAP32[$99 >> 2] | 0) != 0);
   HEAP32[$49 >> 2] = 0;
   $108 = $46 + 76 | 0;
   while (1) {
    $109 = HEAP32[$108 >> 2] | 0;
    HEAP32[$108 >> 2] = 0;
    $changed$0$ph$i$i = 0;
    $next$0$ph$i$i = $109;
    L47 : while (1) {
     $next$0$i$i = $next$0$ph$i$i;
     do {
      if (!$next$0$i$i) break L47;
      $next$0$i$i$looptemp = $next$0$i$i;
      $next$0$i$i = HEAP32[$next$0$i$i + 28 >> 2] | 0;
     } while ((_traverseephemeron($46, $next$0$i$i$looptemp) | 0) == 0);
     if (!(HEAP32[$99 >> 2] | 0)) {
      $changed$0$ph$i$i = 1;
      $next$0$ph$i$i = $next$0$i$i;
      continue;
     }
     while (1) {
      _propagatemark($46);
      if (!(HEAP32[$99 >> 2] | 0)) {
       $changed$0$ph$i$i = 1;
       $next$0$ph$i$i = $next$0$i$i;
       continue L47;
      }
     }
    }
    if (!$changed$0$ph$i$i) break;
   }
   $120 = $46 + 72 | 0;
   _clearvalues($46, HEAP32[$120 >> 2] | 0, 0);
   $122 = $46 + 80 | 0;
   _clearvalues($46, HEAP32[$122 >> 2] | 0, 0);
   $124 = HEAP32[$120 >> 2] | 0;
   $125 = HEAP32[$122 >> 2] | 0;
   $126 = HEAP32[$49 >> 2] | 0;
   $127 = $46 + 84 | 0;
   $$0$i$i$i = $127;
   while (1) {
    $128 = HEAP32[$$0$i$i$i >> 2] | 0;
    if (!$128) break; else $$0$i$i$i = $128;
   }
   $130 = $126 + $104 | 0;
   $131 = $46 + 60 | 0;
   $132 = HEAP32[$131 >> 2] | 0;
   L60 : do if ($132) {
    $353 = $132;
    $lastnext$0$ph4$us$i$i = $$0$i$i$i;
    $p$0$ph3$us$i$i = $131;
    while (1) {
     $137 = $353;
     $lastnext$02$us$us$i$i = $lastnext$0$ph4$us$i$i;
     while (1) {
      $134 = HEAP32[$137 >> 2] | 0;
      if (!(HEAP8[$137 + 5 >> 0] & 3)) break;
      HEAP32[$p$0$ph3$us$i$i >> 2] = $134;
      HEAP32[$137 >> 2] = HEAP32[$lastnext$02$us$us$i$i >> 2];
      HEAP32[$lastnext$02$us$us$i$i >> 2] = $137;
      $142 = HEAP32[$p$0$ph3$us$i$i >> 2] | 0;
      if (!$142) break L60; else {
       $lastnext$02$us$us$i$i$phi = $137;
       $137 = $142;
       $lastnext$02$us$us$i$i = $lastnext$02$us$us$i$i$phi;
      }
     }
     if (!$134) break; else {
      $353 = $134;
      $lastnext$0$ph4$us$i$i = $lastnext$02$us$us$i$i;
      $p$0$ph3$us$i$i = $137;
     }
    }
   } while (0);
   HEAP32[$46 + 108 >> 2] = 1;
   $o$01$i$i2 = HEAP32[$127 >> 2] | 0;
   if ($o$01$i$i2) {
    $o$02$i$i3 = $o$01$i$i2;
    do {
     if (HEAP8[$o$02$i$i3 + 5 >> 0] & 3) _reallymarkobject($46, $o$02$i$i3);
     $o$02$i$i3 = HEAP32[$o$02$i$i3 >> 2] | 0;
    } while (($o$02$i$i3 | 0) != 0);
   }
   if (HEAP32[$99 >> 2] | 0) do _propagatemark($46); while ((HEAP32[$99 >> 2] | 0) != 0);
   HEAP32[$49 >> 2] = 0;
   while (1) {
    $155 = HEAP32[$108 >> 2] | 0;
    HEAP32[$108 >> 2] = 0;
    $changed$0$ph$i10$i = 0;
    $next$0$ph$i11$i = $155;
    L81 : while (1) {
     $next$0$i13$i = $next$0$ph$i11$i;
     do {
      if (!$next$0$i13$i) break L81;
      $next$0$i13$i$looptemp = $next$0$i13$i;
      $next$0$i13$i = HEAP32[$next$0$i13$i + 28 >> 2] | 0;
     } while ((_traverseephemeron($46, $next$0$i13$i$looptemp) | 0) == 0);
     if (!(HEAP32[$99 >> 2] | 0)) {
      $changed$0$ph$i10$i = 1;
      $next$0$ph$i11$i = $next$0$i13$i;
      continue;
     }
     while (1) {
      _propagatemark($46);
      if (!(HEAP32[$99 >> 2] | 0)) {
       $changed$0$ph$i10$i = 1;
       $next$0$ph$i11$i = $next$0$i13$i;
       continue L81;
      }
     }
    }
    if (!$changed$0$ph$i10$i) break;
   }
   $166 = HEAP32[$108 >> 2] | 0;
   if ($166) {
    $$02$i$i = $166;
    do {
     $171 = 1 << HEAPU8[$$02$i$i + 7 >> 0];
     $173 = HEAP32[$$02$i$i + 16 >> 2] | 0;
     $174 = $173 + ($171 * 20 | 0) | 0;
     if (($171 | 0) > 0) {
      $n$01$i$i = $173;
      do {
       $176 = $n$01$i$i + 4 | 0;
       do if (HEAP32[$176 >> 2] | 0) {
        $179 = $n$01$i$i + 12 | 0;
        $180 = HEAP32[$179 >> 2] | 0;
        if ($180 & 64) {
         $186 = HEAP32[$n$01$i$i + 8 >> 2] | 0;
         if (($180 & 15 | 0) == 4) {
          if (!$186) break;
          if (!(HEAP8[$186 + 5 >> 0] & 3)) break;
          _reallymarkobject($46, $186);
          break;
         } else {
          $192 = $186 + 5 | 0;
          if (!(HEAP8[$192 >> 0] & 3)) break;
          HEAP32[$176 >> 2] = 0;
          if (!(HEAP8[$192 >> 0] & 3)) break;
          HEAP32[$179 >> 2] = 10;
          break;
         }
        }
       } while (0);
       $n$01$i$i = $n$01$i$i + 20 | 0;
      } while ($n$01$i$i >>> 0 < $174 >>> 0);
     }
     $$02$i$i = HEAP32[$$02$i$i + 28 >> 2] | 0;
    } while (($$02$i$i | 0) != 0);
   }
   $204 = HEAP32[$122 >> 2] | 0;
   if ($204) {
    $$02$i20$i = $204;
    do {
     $209 = 1 << HEAPU8[$$02$i20$i + 7 >> 0];
     $211 = HEAP32[$$02$i20$i + 16 >> 2] | 0;
     $212 = $211 + ($209 * 20 | 0) | 0;
     if (($209 | 0) > 0) {
      $n$01$i22$i = $211;
      do {
       $214 = $n$01$i22$i + 4 | 0;
       do if (HEAP32[$214 >> 2] | 0) {
        $217 = $n$01$i22$i + 12 | 0;
        $218 = HEAP32[$217 >> 2] | 0;
        if ($218 & 64) {
         $224 = HEAP32[$n$01$i22$i + 8 >> 2] | 0;
         if (($218 & 15 | 0) == 4) {
          if (!$224) break;
          if (!(HEAP8[$224 + 5 >> 0] & 3)) break;
          _reallymarkobject($46, $224);
          break;
         } else {
          $230 = $224 + 5 | 0;
          if (!(HEAP8[$230 >> 0] & 3)) break;
          HEAP32[$214 >> 2] = 0;
          if (!(HEAP8[$230 >> 0] & 3)) break;
          HEAP32[$217 >> 2] = 10;
          break;
         }
        }
       } while (0);
       $n$01$i22$i = $n$01$i22$i + 20 | 0;
      } while ($n$01$i22$i >>> 0 < $212 >>> 0);
     }
     $$02$i20$i = HEAP32[$$02$i20$i + 28 >> 2] | 0;
    } while (($$02$i20$i | 0) != 0);
   }
   _clearvalues($46, HEAP32[$120 >> 2] | 0, $124);
   _clearvalues($46, HEAP32[$122 >> 2] | 0, $125);
   $244 = $46 + 48 | 0;
   HEAP8[$244 >> 0] = HEAPU8[$244 >> 0] ^ 3;
   $249 = HEAP32[$49 >> 2] | 0;
   $250 = HEAP32[$0 >> 2] | 0;
   HEAP8[$250 + 49 >> 0] = 2;
   $252 = $250 + 52 | 0;
   $i$0$i$i = 0;
   do {
    $i$0$i$i = $i$0$i$i + 1 | 0;
    $254 = _sweeplist($L, $252, 1) | 0;
   } while (($254 | 0) == ($252 | 0));
   HEAP32[$250 + 56 >> 2] = $254;
   HEAP32[$1 + 20 >> 2] = (HEAP32[$1 + 12 >> 2] | 0) + (HEAP32[$1 + 8 >> 2] | 0);
   $$0 = $130 + $249 + ($i$0$i$i * 6 | 0) | 0;
   return $$0 | 0;
  }
 case 0:
  {
   $35 = $1 + 16 | 0;
   HEAP32[$35 >> 2] = 0;
   _propagatemark($1);
   if (!(HEAP32[$1 + 64 >> 2] | 0)) HEAP8[$2 >> 0] = 1;
   $$0 = HEAP32[$35 >> 2] | 0;
   return $$0 | 0;
  }
 case 7:
  {
   $8 = $1 + 16 | 0;
   HEAP32[$8 >> 2] = HEAP32[$1 + 32 >> 2] << 2;
   $9 = $1 + 64 | 0;
   HEAP32[$9 + 0 >> 2] = 0;
   HEAP32[$9 + 4 >> 2] = 0;
   HEAP32[$9 + 8 >> 2] = 0;
   HEAP32[$9 + 12 >> 2] = 0;
   HEAP32[$9 + 16 >> 2] = 0;
   $11 = HEAP32[$1 + 124 >> 2] | 0;
   if ($11) if (HEAP8[$11 + 5 >> 0] & 3) _reallymarkobject($1, $11);
   if (HEAP32[$1 + 40 >> 2] & 64) {
    $22 = HEAP32[$1 + 36 >> 2] | 0;
    if (HEAP8[$22 + 5 >> 0] & 3) _reallymarkobject($1, $22);
   }
   _markmt($1);
   $o$01$i$i = HEAP32[$1 + 84 >> 2] | 0;
   if ($o$01$i$i) {
    $o$02$i$i = $o$01$i$i;
    do {
     if (HEAP8[$o$02$i$i + 5 >> 0] & 3) _reallymarkobject($1, $o$02$i$i);
     $o$02$i$i = HEAP32[$o$02$i$i >> 2] | 0;
    } while (($o$02$i$i | 0) != 0);
   }
   HEAP8[$2 >> 0] = 0;
   $$0 = HEAP32[$8 >> 2] | 0;
   return $$0 | 0;
  }
 case 2:
  {
   $266 = $1 + 60 | 0;
   $267 = $1 + 56 | 0;
   $268 = HEAP32[$267 >> 2] | 0;
   if ($268) {
    $270 = $1 + 12 | 0;
    $271 = HEAP32[$270 >> 2] | 0;
    $272 = _sweeplist($L, $268, 83) | 0;
    HEAP32[$267 >> 2] = $272;
    $275 = $1 + 20 | 0;
    HEAP32[$275 >> 2] = (HEAP32[$270 >> 2] | 0) - $271 + (HEAP32[$275 >> 2] | 0);
    if ($272) {
     $$0 = 498;
     return $$0 | 0;
    }
   }
   HEAP8[$2 >> 0] = 3;
   HEAP32[$267 >> 2] = $266;
   $$0 = 0;
   return $$0 | 0;
  }
 case 3:
  {
   $279 = $1 + 84 | 0;
   $280 = $1 + 56 | 0;
   $281 = HEAP32[$280 >> 2] | 0;
   if ($281) {
    $283 = $1 + 12 | 0;
    $284 = HEAP32[$283 >> 2] | 0;
    $285 = _sweeplist($L, $281, 83) | 0;
    HEAP32[$280 >> 2] = $285;
    $288 = $1 + 20 | 0;
    HEAP32[$288 >> 2] = (HEAP32[$283 >> 2] | 0) - $284 + (HEAP32[$288 >> 2] | 0);
    if ($285) {
     $$0 = 498;
     return $$0 | 0;
    }
   }
   HEAP8[$2 >> 0] = 4;
   HEAP32[$280 >> 2] = $279;
   $$0 = 0;
   return $$0 | 0;
  }
 case 4:
  {
   $292 = $1 + 56 | 0;
   $293 = HEAP32[$292 >> 2] | 0;
   if ($293) {
    $295 = $1 + 12 | 0;
    $296 = HEAP32[$295 >> 2] | 0;
    $297 = _sweeplist($L, $293, 83) | 0;
    HEAP32[$292 >> 2] = $297;
    $300 = $1 + 20 | 0;
    HEAP32[$300 >> 2] = (HEAP32[$295 >> 2] | 0) - $296 + (HEAP32[$300 >> 2] | 0);
    if ($297) {
     $$0 = 498;
     return $$0 | 0;
    }
   }
   HEAP8[$2 >> 0] = 5;
   HEAP32[$292 >> 2] = 0;
   $$0 = 0;
   return $$0 | 0;
  }
 case 5:
  {
   $306 = (HEAP32[$1 + 124 >> 2] | 0) + 5 | 0;
   HEAP8[$306 >> 0] = HEAPU8[$1 + 48 >> 0] & 3 | HEAPU8[$306 >> 0] & 248;
   if ((HEAP8[$1 + 50 >> 0] | 0) != 1) {
    $319 = $1 + 12 | 0;
    $320 = HEAP32[$319 >> 2] | 0;
    $321 = $1 + 96 | 0;
    $323 = $1 + 104 | 0;
    HEAP32[$321 >> 2] = _luaM_realloc_($L, HEAP32[$321 >> 2] | 0, HEAP32[$323 >> 2] | 0, 0) | 0;
    HEAP32[$323 >> 2] = 0;
    $329 = HEAP32[$1 + 32 >> 2] | 0;
    if ((HEAP32[$1 + 28 >> 2] | 0) < (($329 | 0) / 4 | 0 | 0)) _luaS_resize($L, ($329 | 0) / 2 | 0);
    $335 = $1 + 20 | 0;
    HEAP32[$335 >> 2] = (HEAP32[$319 >> 2] | 0) - $320 + (HEAP32[$335 >> 2] | 0);
   }
   HEAP8[$2 >> 0] = 6;
   $$0 = 0;
   return $$0 | 0;
  }
 case 6:
  {
   $338 = $1 + 84 | 0;
   if (HEAP32[$338 >> 2] | 0) if ((HEAP8[$1 + 50 >> 0] | 0) != 1) {
    $$pre$pre$i = $1 + 108 | 0;
    $i$04$i = 0;
    while (1) {
     $344 = HEAP32[$$pre$pre$i >> 2] | 0;
     if ($i$04$i >>> 0 >= $344 >>> 0) {
      label = 119;
      break;
     }
     _GCTM($L, 1);
     $346 = $i$04$i + 1 | 0;
     if (!(HEAP32[$338 >> 2] | 0)) {
      $350 = 0;
      $i$02$i = $346;
      break;
     } else $i$04$i = $346;
    }
    if ((label | 0) == 119) {
     $350 = $344 << 1;
     $i$02$i = $i$04$i;
    }
    HEAP32[$$pre$pre$i >> 2] = $350;
    $$0 = $i$02$i * 6 | 0;
    return $$0 | 0;
   }
   HEAP8[$2 >> 0] = 7;
   $$0 = 0;
   return $$0 | 0;
  }
 default:
  {
   $$0 = 0;
   return $$0 | 0;
  }
 }
 return 0;
}

function __ZN8b2Island5SolveEP9b2ProfileRK10b2TimeStepRK6b2Vec2b($this, $profile, $step, $gravity, $allowSleep) {
 $this = $this | 0;
 $profile = $profile | 0;
 $step = $step | 0;
 $gravity = $gravity | 0;
 $allowSleep = $allowSleep | 0;
 var $$ = 0, $$pre$phi77Z2D = 0, $$pre$phiZ2D = 0, $0 = 0.0, $1 = 0, $10 = 0, $102 = 0, $104 = 0, $106 = 0, $109 = 0, $119 = 0, $12 = 0, $122 = 0, $125 = 0, $134 = 0, $137 = 0, $14 = 0, $142 = 0, $156 = 0, $157 = 0, $158 = 0, $164 = 0.0, $165 = 0.0, $167 = 0.0, $169 = 0, $17 = 0, $170 = 0, $176 = 0.0, $177 = 0.0, $179 = 0.0, $180 = 0.0, $181 = 0.0, $184 = 0.0, $187 = 0.0, $19 = 0.0, $190 = 0.0, $196 = 0.0, $199 = 0.0, $201 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0, $21 = 0, $216 = 0.0, $217 = 0.0, $218 = 0, $227 = 0, $230 = 0, $234 = 0, $239 = 0, $249 = 0, $252 = 0, $256 = 0, $258 = 0, $261 = 0, $262 = 0, $268 = 0.0, $27 = 0.0, $273 = 0, $278 = 0, $279 = 0, $28 = 0.0, $287 = 0.0, $289 = 0.0, $293 = 0.0, $296 = 0.0, $30 = 0.0, $302 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0, $317 = 0, $318 = 0, $32 = 0, $323 = 0, $326 = 0, $328 = 0, $337 = 0, $344 = 0, $345 = 0, $347 = 0, $349 = 0, $357 = 0.0, $361 = 0.0, $364 = 0.0, $369 = 0, $371 = 0.0, $377 = 0, $380 = 0, $381 = 0, $387 = 0, $4 = 0, $40 = 0.0, $46 = 0.0, $5 = 0, $6 = 0, $7 = 0, $70 = 0.0, $81 = 0, $89 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $contactSolver = 0, $contactSolverDef = 0, $i$02$i = 0, $i$068 = 0, $i1$063 = 0, $i10$030 = 0, $i11$020 = 0, $i12$016 = 0, $i14$013 = 0, $i2$056 = 0, $i3$042 = 0, $i9$037 = 0, $impulse$i = 0, $j$01$i = 0, $j$050 = 0, $jointsOkay$0$off0$lcssa = 0, $jointsOkay$0$off029 = 0, $minSleepTime$0$lcssa = 0.0, $minSleepTime$015 = 0.0, $minSleepTime$1 = 0.0, $positionSolved$0$off0 = 0, $solverData = 0, $timer = 0, $w$0 = 0.0, $w7$0 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $impulse$i = sp + 128 | 0;
 $timer = sp + 148 | 0;
 $solverData = sp + 96 | 0;
 $contactSolverDef = sp + 52 | 0;
 $contactSolver = sp;
 $0 = +HEAPF32[$step >> 2];
 $1 = $this + 28 | 0;
 if ((HEAP32[$1 >> 2] | 0) > 0) {
  $4 = $this + 8 | 0;
  $5 = $gravity + 4 | 0;
  $6 = $this + 20 | 0;
  $7 = $this + 24 | 0;
  $i$068 = 0;
  do {
   $10 = HEAP32[(HEAP32[$4 >> 2] | 0) + ($i$068 << 2) >> 2] | 0;
   $12 = $10 + 44 | 0;
   $14 = HEAP32[$12 >> 2] | 0;
   $17 = HEAP32[$12 + 4 >> 2] | 0;
   $19 = +HEAPF32[$10 + 56 >> 2];
   $21 = $10 + 64 | 0;
   $27 = +HEAPF32[$21 >> 2];
   $28 = +HEAPF32[$21 + 4 >> 2];
   $30 = +HEAPF32[$10 + 72 >> 2];
   $32 = $10 + 36 | 0;
   HEAP32[$32 >> 2] = $14;
   HEAP32[$32 + 4 >> 2] = $17;
   HEAPF32[$10 + 52 >> 2] = $19;
   if ((HEAP32[$10 >> 2] | 0) == 2) {
    $40 = +HEAPF32[$10 + 140 >> 2];
    $46 = +HEAPF32[$10 + 120 >> 2];
    $70 = 1.0 / ($0 * +HEAPF32[$10 + 132 >> 2] + 1.0);
    $90 = ($27 + $0 * ($40 * +HEAPF32[$gravity >> 2] + $46 * +HEAPF32[$10 + 76 >> 2])) * $70;
    $92 = ($28 + $0 * ($40 * +HEAPF32[$5 >> 2] + $46 * +HEAPF32[$10 + 80 >> 2])) * $70;
    $w$0 = ($30 + $0 * +HEAPF32[$10 + 128 >> 2] * +HEAPF32[$10 + 84 >> 2]) * (1.0 / ($0 * +HEAPF32[$10 + 136 >> 2] + 1.0));
   } else {
    $90 = $27;
    $92 = $28;
    $w$0 = $30;
   }
   $81 = (HEAP32[$6 >> 2] | 0) + ($i$068 * 12 | 0) | 0;
   HEAP32[$81 >> 2] = $14;
   HEAP32[$81 + 4 >> 2] = $17;
   HEAPF32[(HEAP32[$6 >> 2] | 0) + ($i$068 * 12 | 0) + 8 >> 2] = $19;
   $89 = +$90;
   $91 = +$92;
   $93 = (HEAP32[$7 >> 2] | 0) + ($i$068 * 12 | 0) | 0;
   HEAPF32[$93 >> 2] = $89;
   HEAPF32[$93 + 4 >> 2] = $91;
   HEAPF32[(HEAP32[$7 >> 2] | 0) + ($i$068 * 12 | 0) + 8 >> 2] = $w$0;
   $i$068 = $i$068 + 1 | 0;
  } while (($i$068 | 0) < (HEAP32[$1 >> 2] | 0));
  $$pre$phi77Z2D = $7;
  $$pre$phiZ2D = $6;
 } else {
  $$pre$phi77Z2D = $this + 24 | 0;
  $$pre$phiZ2D = $this + 20 | 0;
 };
 HEAP32[$solverData + 0 >> 2] = HEAP32[$step + 0 >> 2];
 HEAP32[$solverData + 4 >> 2] = HEAP32[$step + 4 >> 2];
 HEAP32[$solverData + 8 >> 2] = HEAP32[$step + 8 >> 2];
 HEAP32[$solverData + 12 >> 2] = HEAP32[$step + 12 >> 2];
 HEAP32[$solverData + 16 >> 2] = HEAP32[$step + 16 >> 2];
 HEAP32[$solverData + 20 >> 2] = HEAP32[$step + 20 >> 2];
 $102 = HEAP32[$$pre$phiZ2D >> 2] | 0;
 HEAP32[$solverData + 24 >> 2] = $102;
 $104 = HEAP32[$$pre$phi77Z2D >> 2] | 0;
 HEAP32[$solverData + 28 >> 2] = $104;
 HEAP32[$contactSolverDef + 0 >> 2] = HEAP32[$step + 0 >> 2];
 HEAP32[$contactSolverDef + 4 >> 2] = HEAP32[$step + 4 >> 2];
 HEAP32[$contactSolverDef + 8 >> 2] = HEAP32[$step + 8 >> 2];
 HEAP32[$contactSolverDef + 12 >> 2] = HEAP32[$step + 12 >> 2];
 HEAP32[$contactSolverDef + 16 >> 2] = HEAP32[$step + 16 >> 2];
 HEAP32[$contactSolverDef + 20 >> 2] = HEAP32[$step + 20 >> 2];
 $106 = $this + 12 | 0;
 HEAP32[$contactSolverDef + 24 >> 2] = HEAP32[$106 >> 2];
 $109 = $this + 36 | 0;
 HEAP32[$contactSolverDef + 28 >> 2] = HEAP32[$109 >> 2];
 HEAP32[$contactSolverDef + 32 >> 2] = $102;
 HEAP32[$contactSolverDef + 36 >> 2] = $104;
 HEAP32[$contactSolverDef + 40 >> 2] = HEAP32[$this >> 2];
 __ZN15b2ContactSolverC2EP18b2ContactSolverDef($contactSolver, $contactSolverDef);
 __ZN15b2ContactSolver29InitializeVelocityConstraintsEv($contactSolver);
 if (HEAP8[$step + 20 >> 0] | 0) __ZN15b2ContactSolver9WarmStartEv($contactSolver);
 $119 = $this + 32 | 0;
 if ((HEAP32[$119 >> 2] | 0) > 0) {
  $122 = $this + 16 | 0;
  $i1$063 = 0;
  do {
   $125 = HEAP32[(HEAP32[$122 >> 2] | 0) + ($i1$063 << 2) >> 2] | 0;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$125 >> 2] | 0) + 32 >> 2] & 127]($125, $solverData);
   $i1$063 = $i1$063 + 1 | 0;
  } while (($i1$063 | 0) < (HEAP32[$119 >> 2] | 0));
 }
 HEAPF32[$profile + 12 >> 2] = +__ZNK7b2Timer15GetMillisecondsEv($timer);
 $134 = $step + 12 | 0;
 if ((HEAP32[$134 >> 2] | 0) > 0) {
  $137 = $this + 16 | 0;
  $i2$056 = 0;
  do {
   if ((HEAP32[$119 >> 2] | 0) > 0) {
    $j$050 = 0;
    do {
     $142 = HEAP32[(HEAP32[$137 >> 2] | 0) + ($j$050 << 2) >> 2] | 0;
     FUNCTION_TABLE_vii[HEAP32[(HEAP32[$142 >> 2] | 0) + 36 >> 2] & 127]($142, $solverData);
     $j$050 = $j$050 + 1 | 0;
    } while (($j$050 | 0) < (HEAP32[$119 >> 2] | 0));
   }
   __ZN15b2ContactSolver24SolveVelocityConstraintsEv($contactSolver);
   $i2$056 = $i2$056 + 1 | 0;
  } while (($i2$056 | 0) < (HEAP32[$134 >> 2] | 0));
 }
 __ZN15b2ContactSolver13StoreImpulsesEv($contactSolver);
 HEAPF32[$profile + 16 >> 2] = +__ZNK7b2Timer15GetMillisecondsEv($timer);
 if ((HEAP32[$1 >> 2] | 0) > 0) {
  $169 = HEAP32[$$pre$phi77Z2D >> 2] | 0;
  $i3$042 = 0;
  do {
   $156 = HEAP32[$$pre$phiZ2D >> 2] | 0;
   $157 = $156 + ($i3$042 * 12 | 0) | 0;
   $158 = $157;
   $164 = +HEAPF32[$158 >> 2];
   $165 = +HEAPF32[$158 + 4 >> 2];
   $167 = +HEAPF32[$156 + ($i3$042 * 12 | 0) + 8 >> 2];
   $170 = $169 + ($i3$042 * 12 | 0) | 0;
   $176 = +HEAPF32[$170 >> 2];
   $177 = +HEAPF32[$170 + 4 >> 2];
   $179 = +HEAPF32[$169 + ($i3$042 * 12 | 0) + 8 >> 2];
   $180 = $0 * $176;
   $181 = $0 * $177;
   $184 = $180 * $180 + $181 * $181;
   if ($184 > 4.0) {
    $187 = 2.0 / +Math_sqrt(+$184);
    $199 = $176 * $187;
    $201 = $177 * $187;
   } else {
    $199 = $176;
    $201 = $177;
   }
   $190 = $0 * $179;
   if ($190 * $190 > 2.4674012660980225) {
    if ($190 > 0.0) $196 = $190; else $196 = -$190;
    $w7$0 = $179 * (1.5707963705062866 / $196);
   } else $w7$0 = $179;
   $206 = +($164 + $0 * $199);
   $207 = +($165 + $0 * $201);
   $208 = $157;
   HEAPF32[$208 >> 2] = $206;
   HEAPF32[$208 + 4 >> 2] = $207;
   HEAPF32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + ($i3$042 * 12 | 0) + 8 >> 2] = $167 + $0 * $w7$0;
   $216 = +$199;
   $217 = +$201;
   $218 = (HEAP32[$$pre$phi77Z2D >> 2] | 0) + ($i3$042 * 12 | 0) | 0;
   HEAPF32[$218 >> 2] = $216;
   HEAPF32[$218 + 4 >> 2] = $217;
   $169 = HEAP32[$$pre$phi77Z2D >> 2] | 0;
   HEAPF32[$169 + ($i3$042 * 12 | 0) + 8 >> 2] = $w7$0;
   $i3$042 = $i3$042 + 1 | 0;
  } while (($i3$042 | 0) < (HEAP32[$1 >> 2] | 0));
 }
 $227 = $step + 16 | 0;
 L41 : do if ((HEAP32[$227 >> 2] | 0) > 0) {
  $230 = $this + 16 | 0;
  $i9$037 = 0;
  while (1) {
   $234 = __ZN15b2ContactSolver24SolvePositionConstraintsEv($contactSolver) | 0;
   if ((HEAP32[$119 >> 2] | 0) > 0) {
    $i10$030 = 0;
    $jointsOkay$0$off029 = 1;
    while (1) {
     $239 = HEAP32[(HEAP32[$230 >> 2] | 0) + ($i10$030 << 2) >> 2] | 0;
     $$ = $jointsOkay$0$off029 & (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$239 >> 2] | 0) + 40 >> 2] & 31]($239, $solverData) | 0);
     $i10$030 = $i10$030 + 1 | 0;
     if (($i10$030 | 0) >= (HEAP32[$119 >> 2] | 0)) {
      $jointsOkay$0$off0$lcssa = $$;
      break;
     } else $jointsOkay$0$off029 = $$;
    }
   } else $jointsOkay$0$off0$lcssa = 1;
   $i9$037 = $i9$037 + 1 | 0;
   if ($234 & $jointsOkay$0$off0$lcssa) {
    $positionSolved$0$off0 = 0;
    break L41;
   }
   if (($i9$037 | 0) >= (HEAP32[$227 >> 2] | 0)) {
    $positionSolved$0$off0 = 1;
    break;
   }
  }
 } else $positionSolved$0$off0 = 1; while (0);
 if ((HEAP32[$1 >> 2] | 0) > 0) {
  $249 = $this + 8 | 0;
  $i11$020 = 0;
  do {
   $252 = HEAP32[(HEAP32[$249 >> 2] | 0) + ($i11$020 << 2) >> 2] | 0;
   $256 = (HEAP32[$$pre$phiZ2D >> 2] | 0) + ($i11$020 * 12 | 0) | 0;
   $258 = HEAP32[$256 >> 2] | 0;
   $261 = HEAP32[$256 + 4 >> 2] | 0;
   $262 = $252 + 44 | 0;
   HEAP32[$262 >> 2] = $258;
   HEAP32[$262 + 4 >> 2] = $261;
   $268 = +HEAPF32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + ($i11$020 * 12 | 0) + 8 >> 2];
   HEAPF32[$252 + 56 >> 2] = $268;
   $273 = (HEAP32[$$pre$phi77Z2D >> 2] | 0) + ($i11$020 * 12 | 0) | 0;
   $278 = HEAP32[$273 + 4 >> 2] | 0;
   $279 = $252 + 64 | 0;
   HEAP32[$279 >> 2] = HEAP32[$273 >> 2];
   HEAP32[$279 + 4 >> 2] = $278;
   HEAPF32[$252 + 72 >> 2] = +HEAPF32[(HEAP32[$$pre$phi77Z2D >> 2] | 0) + ($i11$020 * 12 | 0) + 8 >> 2];
   $287 = +Math_sin(+$268);
   HEAPF32[$252 + 20 >> 2] = $287;
   $289 = +Math_cos(+$268);
   HEAPF32[$252 + 24 >> 2] = $289;
   $293 = +HEAPF32[$252 + 28 >> 2];
   $296 = +HEAPF32[$252 + 32 >> 2];
   $302 = (HEAP32[tempDoublePtr >> 2] = $258, +HEAPF32[tempDoublePtr >> 2]) - ($289 * $293 - $287 * $296);
   $304 = (HEAP32[tempDoublePtr >> 2] = $261, +HEAPF32[tempDoublePtr >> 2]) - ($287 * $293 + $289 * $296);
   $305 = +$302;
   $306 = +$304;
   $307 = $252 + 12 | 0;
   HEAPF32[$307 >> 2] = $305;
   HEAPF32[$307 + 4 >> 2] = $306;
   $i11$020 = $i11$020 + 1 | 0;
  } while (($i11$020 | 0) < (HEAP32[$1 >> 2] | 0));
 }
 HEAPF32[$profile + 20 >> 2] = +__ZNK7b2Timer15GetMillisecondsEv($timer);
 $317 = HEAP32[$contactSolver + 40 >> 2] | 0;
 $318 = $this + 4 | 0;
 if (HEAP32[$318 >> 2] | 0) if ((HEAP32[$109 >> 2] | 0) > 0) {
  $323 = $impulse$i + 16 | 0;
  $i$02$i = 0;
  do {
   $326 = HEAP32[(HEAP32[$106 >> 2] | 0) + ($i$02$i << 2) >> 2] | 0;
   $328 = HEAP32[$317 + ($i$02$i * 156 | 0) + 148 >> 2] | 0;
   HEAP32[$323 >> 2] = $328;
   if (($328 | 0) > 0) {
    $j$01$i = 0;
    do {
     HEAPF32[$impulse$i + ($j$01$i << 2) >> 2] = +HEAPF32[$317 + ($i$02$i * 156 | 0) + ($j$01$i * 36 | 0) + 16 >> 2];
     HEAPF32[$impulse$i + ($j$01$i << 2) + 8 >> 2] = +HEAPF32[$317 + ($i$02$i * 156 | 0) + ($j$01$i * 36 | 0) + 20 >> 2];
     $j$01$i = $j$01$i + 1 | 0;
    } while (($j$01$i | 0) != ($328 | 0));
   }
   $337 = HEAP32[$318 >> 2] | 0;
   FUNCTION_TABLE_viii[HEAP32[(HEAP32[$337 >> 2] | 0) + 20 >> 2] & 15]($337, $326, $impulse$i);
   $i$02$i = $i$02$i + 1 | 0;
  } while (($i$02$i | 0) < (HEAP32[$109 >> 2] | 0));
 }
 if (!$allowSleep) {
  __ZN15b2ContactSolverD2Ev($contactSolver);
  STACKTOP = sp;
  return;
 }
 $344 = HEAP32[$1 >> 2] | 0;
 $345 = ($344 | 0) > 0;
 if ($345) {
  $347 = HEAP32[$this + 8 >> 2] | 0;
  $i12$016 = 0;
  $minSleepTime$015 = 3402823466385288598117041.0e14;
  while (1) {
   $349 = HEAP32[$347 + ($i12$016 << 2) >> 2] | 0;
   do if (!(HEAP32[$349 >> 2] | 0)) $minSleepTime$1 = $minSleepTime$015; else {
    if (HEAP16[$349 + 4 >> 1] & 4) {
     $357 = +HEAPF32[$349 + 72 >> 2];
     if (!($357 * $357 > .001218469929881394)) {
      $361 = +HEAPF32[$349 + 64 >> 2];
      $364 = +HEAPF32[$349 + 68 >> 2];
      if (!($361 * $361 + $364 * $364 > 9.999999747378752e-05)) {
       $369 = $349 + 144 | 0;
       $371 = $0 + +HEAPF32[$369 >> 2];
       HEAPF32[$369 >> 2] = $371;
       $minSleepTime$1 = $minSleepTime$015 < $371 ? $minSleepTime$015 : $371;
       break;
      }
     }
    }
    HEAPF32[$349 + 144 >> 2] = 0.0;
    $minSleepTime$1 = 0.0;
   } while (0);
   $i12$016 = $i12$016 + 1 | 0;
   if (($i12$016 | 0) >= ($344 | 0)) {
    $minSleepTime$0$lcssa = $minSleepTime$1;
    break;
   } else $minSleepTime$015 = $minSleepTime$1;
  }
 } else $minSleepTime$0$lcssa = 3402823466385288598117041.0e14;
 if (!($minSleepTime$0$lcssa >= .5) | $positionSolved$0$off0 | $345 ^ 1) {
  __ZN15b2ContactSolverD2Ev($contactSolver);
  STACKTOP = sp;
  return;
 }
 $377 = $this + 8 | 0;
 $i14$013 = 0;
 do {
  $380 = HEAP32[(HEAP32[$377 >> 2] | 0) + ($i14$013 << 2) >> 2] | 0;
  $381 = $380 + 4 | 0;
  HEAP16[$381 >> 1] = HEAPU16[$381 >> 1] & 65533;
  HEAPF32[$380 + 144 >> 2] = 0.0;
  $387 = $380 + 64 | 0;
  HEAP32[$387 + 0 >> 2] = 0;
  HEAP32[$387 + 4 >> 2] = 0;
  HEAP32[$387 + 8 >> 2] = 0;
  HEAP32[$387 + 12 >> 2] = 0;
  HEAP32[$387 + 16 >> 2] = 0;
  HEAP32[$387 + 20 >> 2] = 0;
  $i14$013 = $i14$013 + 1 | 0;
 } while (($i14$013 | 0) < (HEAP32[$1 >> 2] | 0));
 __ZN15b2ContactSolverD2Ev($contactSolver);
 STACKTOP = sp;
 return;
}

function _mz_zip_reader_extract_to_callback($pZip, $file_index, $pCallback, $pOpaque, $flags) {
 $pZip = $pZip | 0;
 $file_index = $file_index | 0;
 $pCallback = $pCallback | 0;
 $pOpaque = $pOpaque | 0;
 $flags = $flags | 0;
 var $$0 = 0, $$0$i19 = 0, $$014$i = 0, $$014$i14 = 0, $$014$i6 = 0, $$023$i = 0, $$023$i15 = 0, $$023$i7 = 0, $100 = 0, $106 = 0, $109 = 0, $116 = 0, $117 = 0, $123 = 0, $125 = 0, $127 = 0, $130 = 0, $138 = 0, $14 = 0, $140 = 0, $143 = 0, $144 = 0, $146 = 0, $151 = 0, $152 = 0, $154 = 0, $157 = 0, $160 = 0, $167 = 0, $172 = 0, $181 = 0, $183 = 0, $184 = 0, $186 = 0, $189 = 0, $190 = 0, $191 = 0, $194 = 0, $195 = 0, $2 = 0, $200 = 0, $206 = 0, $211 = 0, $218 = 0, $221 = 0, $222 = 0, $229 = 0, $230 = 0, $240 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $248 = 0, $25 = 0, $250 = 0, $258 = 0, $26 = 0, $260 = 0, $263 = 0, $264 = 0, $265 = 0, $268 = 0, $269 = 0, $274 = 0, $275 = 0, $276 = 0, $278 = 0, $280 = 0, $281 = 0, $283 = 0, $287 = 0, $288 = 0, $289 = 0, $292 = 0, $295 = 0, $297 = 0, $3 = 0, $306 = 0, $311 = 0, $321 = 0, $322 = 0, $323 = 0, $328 = 0, $338 = 0, $344 = 0, $346 = 0, $36 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $45 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $55 = 0, $58 = 0, $59 = 0, $61 = 0, $68 = 0, $77 = 0, $85 = 0, $86 = 0, $87 = 0, $89 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $crcu32$0$lcssa$i9 = 0, $crcu32$05$i = 0, $crcu32$05$i13 = 0, $crcu32$05$i5 = 0, $file_crc32$127 = 0, $file_crc32$2 = 0, $file_crc32$3 = 0, $file_crc32$4 = 0, $file_crc32$6 = 0, $file_stat = 0, $in_buf_size = 0, $inflator = 0, $local_header_u32 = 0, $out_buf_size = 0, $pRead_buf$0 = 0, $pWrite_buf$0 = 0, $pWrite_buf$024 = 0, $status$2 = 0, $status$3 = 0, label = 0, sp = 0, $186$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 11616 | 0;
 $file_stat = sp;
 $local_header_u32 = sp + 11576 | 0;
 $inflator = sp + 584 | 0;
 $in_buf_size = sp + 580 | 0;
 $out_buf_size = sp + 576 | 0;
 if (!(_mz_zip_reader_file_stat($pZip, $file_index, $file_stat) | 0)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $2 = $file_stat + 24 | 0;
 $3 = $2;
 if ((HEAP32[$3 >> 2] | 0) == 0 & (HEAP32[$3 + 4 >> 2] | 0) == 0) {
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ($pZip) {
  $14 = HEAP32[$pZip + 56 >> 2] | 0;
  if ($14) if ((HEAP32[$pZip + 16 >> 2] | 0) >>> 0 > $file_index >>> 0) if ((HEAP32[$pZip + 20 >> 2] | 0) == 1) {
   $25 = HEAP32[(HEAP32[$14 + 16 >> 2] | 0) + ($file_index << 2) >> 2] | 0;
   $26 = HEAP32[$14 >> 2] | 0;
   if ($26 + $25 | 0) {
    $36 = HEAPU8[$26 + ($25 + 29) >> 0] << 8 | HEAPU8[$26 + ($25 + 28) >> 0];
    if ($36) if ((HEAP8[$26 + ($25 + 45 + $36) >> 0] | 0) == 47) {
     $$0 = 1;
     STACKTOP = sp;
     return $$0 | 0;
    }
    if (HEAP8[$26 + ($25 + 38) >> 0] & 16) {
     $$0 = 1;
     STACKTOP = sp;
     return $$0 | 0;
    }
   }
  }
 }
 $45 = HEAP32[$file_stat + 12 >> 2] | 0;
 $49 = $45 >>> 16 & 65535;
 if ($45 & 33) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $50 = $flags & 1024;
 $51 = ($50 | 0) != 0;
 if (!$51) if (!($49 << 16 >> 16 == 8 | $49 << 16 >> 16 == 0)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $53 = $file_stat + 48 | 0;
 $55 = HEAP32[$53 >> 2] | 0;
 $58 = HEAP32[$53 + 4 >> 2] | 0;
 $59 = $pZip + 44 | 0;
 $61 = $pZip + 52 | 0;
 if ((FUNCTION_TABLE_iiiiii[HEAP32[$59 >> 2] & 15](HEAP32[$61 >> 2] | 0, $55, $58, $local_header_u32, 30) | 0) != 30) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ((HEAP32[$local_header_u32 >> 2] | 0) != 67324752) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $68 = HEAP16[$local_header_u32 + 26 >> 1] | 0;
 $77 = HEAP16[$local_header_u32 + 28 >> 1] | 0;
 $85 = _i64Add(((($68 & 65535) >>> 8 & 65535) << 8 | $68 & 255) + 30 + ((($77 & 65535) >>> 8 & 65535) << 8 | $77 & 255) | 0, 0, $55 | 0, $58 | 0) | 0;
 $86 = tempRet0;
 $87 = $2;
 $89 = HEAP32[$87 >> 2] | 0;
 $92 = HEAP32[$87 + 4 >> 2] | 0;
 $93 = _i64Add($85 | 0, $86 | 0, $89 | 0, $92 | 0) | 0;
 $94 = tempRet0;
 $95 = $pZip;
 $100 = HEAP32[$95 + 4 >> 2] | 0;
 if ($94 >>> 0 > $100 >>> 0 | (($94 | 0) == ($100 | 0) ? $93 >>> 0 > (HEAP32[$95 >> 2] | 0) >>> 0 : 0)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $106 = $pZip + 56 | 0;
 $109 = HEAP32[(HEAP32[$106 >> 2] | 0) + 52 >> 2] | 0;
 do if (!$109) {
  $116 = $92 >>> 0 < 0 | ($92 | 0) == 0 & $89 >>> 0 < 65536;
  $117 = $116 ? $89 : 65536;
  $123 = FUNCTION_TABLE_iiii[HEAP32[$pZip + 28 >> 2] & 31](HEAP32[$pZip + 40 >> 2] | 0, 1, $117) | 0;
  if (!$123) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else {
   $125 = $2;
   $127 = HEAP32[$125 >> 2] | 0;
   $130 = HEAP32[$125 + 4 >> 2] | 0;
   $138 = $127;
   $140 = $130;
   $144 = $130;
   $146 = $127;
   $181 = $116 ? $92 : 0;
   $184 = $117;
   $367 = 0;
   $368 = 0;
   $pRead_buf$0 = $123;
   break;
  }
 } else {
  $138 = 0;
  $140 = 0;
  $144 = $92;
  $146 = $89;
  $181 = $92;
  $184 = $89;
  $367 = $89;
  $368 = $92;
  $pRead_buf$0 = $109 + $85 | 0;
 } while (0);
 L42 : do if ($51) label = 23; else if (!(HEAP16[$file_stat + 14 >> 1] | 0)) label = 23; else {
  HEAP32[$inflator >> 2] = 0;
  $240 = FUNCTION_TABLE_iiii[HEAP32[$pZip + 28 >> 2] & 31](HEAP32[$pZip + 40 >> 2] | 0, 1, 32768) | 0;
  if (!$240) {
   $pWrite_buf$024 = 0;
   $status$3 = -1;
  } else {
   $242 = $file_stat + 32 | 0;
   $244 = 0;
   $248 = $367;
   $250 = $368;
   $258 = $140;
   $260 = $138;
   $268 = $85;
   $269 = $86;
   $297 = 0;
   $369 = 0;
   $370 = 0;
   $file_crc32$3 = 0;
   while (1) {
    $243 = $244 & 32767;
    $245 = $240 + $243 | 0;
    $246 = _i64Subtract(32768, 0, $243 | 0, 0) | 0;
    HEAP32[$out_buf_size >> 2] = $246;
    if (($248 | 0) == 0 & ($250 | 0) == 0) if (!(HEAP32[(HEAP32[$106 >> 2] | 0) + 52 >> 2] | 0)) {
     $263 = $181 >>> 0 < $258 >>> 0 | ($181 | 0) == ($258 | 0) & $184 >>> 0 < $260 >>> 0;
     $264 = $263 ? $184 : $260;
     $265 = $263 ? $181 : $258;
     if (!((FUNCTION_TABLE_iiiiii[HEAP32[$59 >> 2] & 15](HEAP32[$61 >> 2] | 0, $268, $269, $pRead_buf$0, $264) | 0) == ($264 | 0) & 0 == ($265 | 0))) {
      $pWrite_buf$024 = $240;
      $status$3 = -1;
      break L42;
     }
     $274 = _i64Add($268 | 0, $269 | 0, $264 | 0, $265 | 0) | 0;
     $275 = tempRet0;
     $276 = _i64Subtract($260 | 0, $258 | 0, $264 | 0, $265 | 0) | 0;
     $278 = $264;
     $280 = 0;
     $281 = $276;
     $283 = tempRet0;
     $289 = $265;
     $292 = 0;
     $371 = $274;
     $372 = $275;
    } else {
     $278 = 0;
     $280 = $369;
     $281 = $260;
     $283 = $258;
     $289 = 0;
     $292 = $370;
     $371 = $268;
     $372 = $269;
    } else {
     $278 = $248;
     $280 = $369;
     $281 = $260;
     $283 = $258;
     $289 = $250;
     $292 = $370;
     $371 = $268;
     $372 = $269;
    }
    HEAP32[$in_buf_size >> 2] = $278;
    $287 = _tinfl_decompress($inflator, $pRead_buf$0 + $280 | 0, $in_buf_size, $240, $245, $out_buf_size, ($281 | 0) != 0 | ($283 | 0) != 0 ? 2 : 0) | 0;
    $288 = HEAP32[$in_buf_size >> 2] | 0;
    $248 = _i64Subtract($278 | 0, $289 | 0, $288 | 0, 0) | 0;
    $250 = tempRet0;
    $369 = _i64Add($288 | 0, 0, $280 | 0, $292 | 0) | 0;
    $370 = tempRet0;
    $295 = HEAP32[$out_buf_size >> 2] | 0;
    if (!$295) {
     $373 = $244;
     $374 = $297;
     $file_crc32$4 = $file_crc32$3;
    } else {
     if ((FUNCTION_TABLE_iiiiii[$pCallback & 15]($pOpaque, $244, $297, $245, $295) | 0) != ($295 | 0)) {
      $pWrite_buf$024 = $240;
      $status$3 = -1;
      break L42;
     }
     if (!$245) $$0$i19 = 0; else {
      $$014$i14 = $295;
      $$023$i15 = $245;
      $crcu32$05$i13 = ~$file_crc32$3;
      while (1) {
       $$014$i14 = $$014$i14 + -1 | 0;
       $306 = HEAPU8[$$023$i15 >> 0] | 0;
       $311 = HEAP32[93856 + ((($306 ^ $crcu32$05$i13) & 15) << 2) >> 2] ^ $crcu32$05$i13 >>> 4;
       $crcu32$05$i13 = $311 >>> 4 ^ HEAP32[93856 + (($311 & 15 ^ $306 >>> 4) << 2) >> 2];
       if (!$$014$i14) break; else $$023$i15 = $$023$i15 + 1 | 0;
      }
      $$0$i19 = ~$crcu32$05$i13;
     }
     $321 = _i64Add($295 | 0, 0, $244 | 0, $297 | 0) | 0;
     $322 = tempRet0;
     $323 = $242;
     $328 = HEAP32[$323 + 4 >> 2] | 0;
     if ($322 >>> 0 > $328 >>> 0 | (($322 | 0) == ($328 | 0) ? $321 >>> 0 > (HEAP32[$323 >> 2] | 0) >>> 0 : 0)) {
      $pWrite_buf$024 = $240;
      $status$3 = -1;
      break L42;
     } else {
      $373 = $321;
      $374 = $322;
      $file_crc32$4 = $$0$i19;
     }
    }
    if (($287 + -1 | 0) >>> 0 >= 2) {
     $344 = $373;
     $346 = $374;
     $file_crc32$6 = $file_crc32$4;
     $pWrite_buf$0 = $240;
     $status$2 = $287;
     label = 52;
     break;
    } else {
     $244 = $373;
     $258 = $283;
     $260 = $281;
     $268 = $371;
     $269 = $372;
     $297 = $374;
     $file_crc32$3 = $file_crc32$4;
    }
   }
  }
 } while (0);
 L63 : do if ((label | 0) == 23) {
  if (HEAP32[(HEAP32[$106 >> 2] | 0) + 52 >> 2] | 0) {
   if ($144 >>> 0 > 0 | ($144 | 0) == 0 & $146 >>> 0 > 4294967295) {
    $$0 = 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $151 = FUNCTION_TABLE_iiiiii[$pCallback & 15]($pOpaque, 0, 0, $pRead_buf$0, $146) | 0;
   $152 = $2;
   $154 = HEAP32[$152 >> 2] | 0;
   $157 = HEAP32[$152 + 4 >> 2] | 0;
   $160 = ($151 | 0) != ($154 | 0) | 0 != ($157 | 0);
   if ($160 | $51) {
    $344 = $154;
    $346 = $157;
    $file_crc32$6 = 0;
    $pWrite_buf$0 = 0;
    $status$2 = $160 << 31 >> 31;
    label = 52;
    break;
   }
   if (($pRead_buf$0 | 0) == 0 | ($151 | 0) == 0) {
    $344 = $154;
    $346 = $157;
    $file_crc32$6 = 0;
    $pWrite_buf$0 = 0;
    $status$2 = 0;
    label = 52;
    break;
   } else {
    $$014$i = $151;
    $$023$i = $pRead_buf$0;
    $crcu32$05$i = -1;
   }
   while (1) {
    $$014$i = $$014$i + -1 | 0;
    $167 = HEAPU8[$$023$i >> 0] | 0;
    $172 = HEAP32[93856 + ((($167 ^ $crcu32$05$i) & 15) << 2) >> 2] ^ $crcu32$05$i >>> 4;
    $crcu32$05$i = $172 >>> 4 ^ HEAP32[93856 + (($172 & 15 ^ $167 >>> 4) << 2) >> 2];
    if (!$$014$i) break; else $$023$i = $$023$i + 1 | 0;
   }
   $344 = $154;
   $346 = $157;
   $file_crc32$6 = ~$crcu32$05$i;
   $pWrite_buf$0 = 0;
   $status$2 = 0;
   label = 52;
   break;
  }
  if (($138 | 0) == 0 & ($140 | 0) == 0) {
   $344 = 0;
   $346 = 0;
   $file_crc32$6 = 0;
   $pWrite_buf$0 = 0;
   $status$2 = 0;
   label = 52;
  } else {
   $143 = ($pRead_buf$0 | 0) == 0;
   $183 = $140;
   $186 = $138;
   $194 = $85;
   $195 = $86;
   $221 = 0;
   $222 = 0;
   $file_crc32$127 = 0;
   while (1) {
    $189 = $181 >>> 0 < $183 >>> 0 | ($181 | 0) == ($183 | 0) & $184 >>> 0 < $186 >>> 0;
    $190 = $189 ? $184 : $186;
    $191 = $189 ? $181 : $183;
    if (!((FUNCTION_TABLE_iiiiii[HEAP32[$59 >> 2] & 15](HEAP32[$61 >> 2] | 0, $194, $195, $pRead_buf$0, $190) | 0) == ($190 | 0) & 0 == ($191 | 0))) {
     $pWrite_buf$024 = 0;
     $status$3 = -1;
     break L63;
    }
    if ($51 | $143) $file_crc32$2 = $51 ? $file_crc32$127 : 0; else {
     $200 = ~$file_crc32$127;
     if (!$190) $crcu32$0$lcssa$i9 = $200; else {
      $$014$i6 = $190;
      $$023$i7 = $pRead_buf$0;
      $crcu32$05$i5 = $200;
      while (1) {
       $$014$i6 = $$014$i6 + -1 | 0;
       $206 = HEAPU8[$$023$i7 >> 0] | 0;
       $211 = HEAP32[93856 + ((($206 ^ $crcu32$05$i5) & 15) << 2) >> 2] ^ $crcu32$05$i5 >>> 4;
       $218 = $211 >>> 4 ^ HEAP32[93856 + (($211 & 15 ^ $206 >>> 4) << 2) >> 2];
       if (!$$014$i6) {
        $crcu32$0$lcssa$i9 = $218;
        break;
       } else {
        $$023$i7 = $$023$i7 + 1 | 0;
        $crcu32$05$i5 = $218;
       }
      }
     }
     $file_crc32$2 = ~$crcu32$0$lcssa$i9;
    }
    if (!((FUNCTION_TABLE_iiiiii[$pCallback & 15]($pOpaque, $221, $222, $pRead_buf$0, $190) | 0) == ($190 | 0) & 0 == ($191 | 0))) {
     $pWrite_buf$024 = 0;
     $status$3 = -1;
     break L63;
    }
    $194 = _i64Add($194 | 0, $195 | 0, $190 | 0, $191 | 0) | 0;
    $195 = tempRet0;
    $229 = _i64Add($190 | 0, $191 | 0, $221 | 0, $222 | 0) | 0;
    $230 = tempRet0;
    $186$looptemp = $186;
    $186 = _i64Subtract($186 | 0, $183 | 0, $190 | 0, $191 | 0) | 0;
    if (($186$looptemp | 0) == ($190 | 0) & ($183 | 0) == ($191 | 0)) {
     $344 = $229;
     $346 = $230;
     $file_crc32$6 = $file_crc32$2;
     $pWrite_buf$0 = 0;
     $status$2 = 0;
     label = 52;
     break;
    } else {
     $183 = tempRet0;
     $221 = $229;
     $222 = $230;
     $file_crc32$127 = $file_crc32$2;
    }
   }
  }
 } while (0);
 do if ((label | 0) == 52) if (!($status$2 | $50)) {
  $338 = $file_stat + 32 | 0;
  if (($344 | 0) == (HEAP32[$338 >> 2] | 0) ? ($346 | 0) == (HEAP32[$338 + 4 >> 2] | 0) : 0) if (($file_crc32$6 | 0) == (HEAP32[$file_stat + 20 >> 2] | 0)) {
   $pWrite_buf$024 = $pWrite_buf$0;
   $status$3 = $status$2;
   break;
  }
  $pWrite_buf$024 = $pWrite_buf$0;
  $status$3 = -1;
 } else {
  $pWrite_buf$024 = $pWrite_buf$0;
  $status$3 = $status$2;
 } while (0);
 if (!(HEAP32[(HEAP32[$106 >> 2] | 0) + 52 >> 2] | 0)) FUNCTION_TABLE_vii[HEAP32[$pZip + 32 >> 2] & 127](HEAP32[$pZip + 40 >> 2] | 0, $pRead_buf$0);
 if ($pWrite_buf$024) FUNCTION_TABLE_vii[HEAP32[$pZip + 32 >> 2] & 127](HEAP32[$pZip + 40 >> 2] | 0, $pWrite_buf$024);
 $$0 = ($status$3 | 0) == 0 & 1;
 STACKTOP = sp;
 return $$0 | 0;
}

function _propagatemark($g) {
 $g = $g | 0;
 var $$lcssa$i = 0, $$lcssa$i11 = 0, $$lcssa$i3 = 0, $$ph8$i = 0, $$ph9$i = 0, $$pr$pre$i = 0, $$pr7$i = 0, $0 = 0, $1 = 0, $10 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $110 = 0, $111 = 0, $117 = 0, $12 = 0, $124 = 0, $125 = 0, $127 = 0, $128 = 0, $13 = 0, $130 = 0, $133 = 0, $141 = 0, $147 = 0, $149 = 0, $168 = 0, $174 = 0, $175 = 0, $178 = 0, $180 = 0, $182 = 0, $192 = 0, $199 = 0, $2 = 0, $205 = 0, $206 = 0, $21 = 0, $214 = 0, $220 = 0, $221 = 0, $225 = 0, $227 = 0, $233 = 0, $234 = 0, $236 = 0, $237 = 0, $243 = 0, $248 = 0, $250 = 0, $257 = 0, $262 = 0, $268 = 0, $279 = 0, $280 = 0, $287 = 0, $293 = 0, $294 = 0, $296 = 0, $297 = 0, $298 = 0, $300 = 0, $301 = 0, $307 = 0, $314 = 0, $315 = 0, $316 = 0, $318 = 0, $321 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $333 = 0, $336 = 0, $34 = 0, $344 = 0, $347 = 0, $355 = 0, $36 = 0, $363 = 0, $367 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $45 = 0, $47 = 0, $48 = 0, $52 = 0, $54 = 0, $57 = 0, $60 = 0, $68 = 0, $74 = 0, $79 = 0, $93 = 0, $96 = 0, $98 = 0, $hasclears$0$lcssa$i$i = 0, $hasclears$04$i$i = 0, $hasclears$1$i$i = 0, $i$01$i = 0, $i$01$i1 = 0, $i$018$i = 0, $i$03$i$i = 0, $i$113$i = 0, $i$28$i = 0, $i$35$i = 0, $n$01$i$i = 0, $n$02$i$i = 0, $o$0$lcssa$i = 0, $o$02$i = 0, $o$11$i = 0, $size$0 = 0, label = 0;
 $0 = $g + 64 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $1 + 5 | 0;
 HEAP8[$2 >> 0] = HEAPU8[$2 >> 0] | 4;
 switch (HEAPU8[$1 + 4 >> 0] | 0) {
 case 38:
  {
   HEAP32[$0 >> 2] = HEAP32[$1 + 8 >> 2];
   $205 = $1 + 6 | 0;
   $206 = HEAP8[$205 >> 0] | 0;
   if (!($206 << 24 >> 24)) $$lcssa$i3 = $206 & 255; else {
    $371 = $206;
    $i$01$i1 = 0;
    while (1) {
     if (!(HEAP32[$1 + ($i$01$i1 << 3) + 20 >> 2] & 64)) $221 = $371; else {
      $214 = HEAP32[$1 + ($i$01$i1 << 3) + 16 >> 2] | 0;
      if (!(HEAP8[$214 + 5 >> 0] & 3)) $221 = $371; else {
       _reallymarkobject($g, $214);
       $221 = HEAP8[$205 >> 0] | 0;
      }
     }
     $i$01$i1 = $i$01$i1 + 1 | 0;
     $220 = $221 & 255;
     if (($i$01$i1 | 0) >= ($220 | 0)) {
      $$lcssa$i3 = $220;
      break;
     } else $371 = $221;
    }
   }
   $size$0 = ($$lcssa$i3 << 3) + 16 | 0;
   break;
  }
 case 9:
  {
   HEAP32[$0 >> 2] = HEAP32[$1 + 76 >> 2];
   $279 = $1 + 68 | 0;
   $280 = HEAP32[$279 >> 2] | 0;
   if ($280) if (HEAP8[$280 + 5 >> 0] & 3) HEAP32[$279 >> 2] = 0;
   $287 = HEAP32[$1 + 72 >> 2] | 0;
   if ($287) if (HEAP8[$287 + 5 >> 0] & 3) _reallymarkobject($g, $287);
   $293 = $1 + 16 | 0;
   $294 = HEAP32[$293 >> 2] | 0;
   if (($294 | 0) > 0) {
    $296 = $1 + 44 | 0;
    $373 = $294;
    $i$018$i = 0;
    while (1) {
     $301 = HEAP32[$296 >> 2] | 0;
     if (!(HEAP32[$301 + ($i$018$i << 3) + 4 >> 2] & 64)) $314 = $373; else {
      $307 = HEAP32[$301 + ($i$018$i << 3) >> 2] | 0;
      if (!(HEAP8[$307 + 5 >> 0] & 3)) $314 = $373; else {
       _reallymarkobject($g, $307);
       $314 = HEAP32[$293 >> 2] | 0;
      }
     }
     $i$018$i = $i$018$i + 1 | 0;
     if (($i$018$i | 0) >= ($314 | 0)) break; else $373 = $314;
    }
   }
   $297 = $1 + 12 | 0;
   $298 = HEAP32[$297 >> 2] | 0;
   if (($298 | 0) > 0) {
    $300 = $1 + 64 | 0;
    $374 = $298;
    $i$113$i = 0;
    while (1) {
     $321 = HEAP32[(HEAP32[$300 >> 2] | 0) + ($i$113$i << 3) >> 2] | 0;
     if (!$321) $329 = $374; else if (!(HEAP8[$321 + 5 >> 0] & 3)) $329 = $374; else {
      _reallymarkobject($g, $321);
      $329 = HEAP32[$297 >> 2] | 0;
     }
     $i$113$i = $i$113$i + 1 | 0;
     if (($i$113$i | 0) >= ($329 | 0)) break; else $374 = $329;
    }
   }
   $315 = $1 + 28 | 0;
   $316 = HEAP32[$315 >> 2] | 0;
   if (($316 | 0) > 0) {
    $318 = $1 + 52 | 0;
    $376 = $316;
    $i$28$i = 0;
    while (1) {
     $336 = HEAP32[(HEAP32[$318 >> 2] | 0) + ($i$28$i << 2) >> 2] | 0;
     if (!$336) $344 = $376; else if (!(HEAP8[$336 + 5 >> 0] & 3)) $344 = $376; else {
      _reallymarkobject($g, $336);
      $344 = HEAP32[$315 >> 2] | 0;
     }
     $i$28$i = $i$28$i + 1 | 0;
     if (($i$28$i | 0) >= ($344 | 0)) {
      $375 = $344;
      break;
     } else $376 = $344;
    }
   } else $375 = $316;
   $330 = $1 + 32 | 0;
   $331 = HEAP32[$330 >> 2] | 0;
   if (($331 | 0) > 0) {
    $333 = $1 + 60 | 0;
    $377 = $331;
    $i$35$i = 0;
    while (1) {
     $347 = HEAP32[(HEAP32[$333 >> 2] | 0) + ($i$35$i * 12 | 0) >> 2] | 0;
     if (!$347) $355 = $377; else if (!(HEAP8[$347 + 5 >> 0] & 3)) $355 = $377; else {
      _reallymarkobject($g, $347);
      $355 = HEAP32[$330 >> 2] | 0;
     }
     $i$35$i = $i$35$i + 1 | 0;
     if (($i$35$i | 0) >= ($355 | 0)) break; else $377 = $355;
    }
    $$lcssa$i11 = $355;
    $363 = HEAP32[$315 >> 2] | 0;
   } else {
    $$lcssa$i11 = $331;
    $363 = $375;
   }
   $size$0 = ($$lcssa$i11 * 12 | 0) + 80 + ((HEAP32[$1 + 20 >> 2] | 0) + $363 + (HEAP32[$1 + 24 >> 2] | 0) << 2) + ((HEAP32[$297 >> 2] | 0) + (HEAP32[$293 >> 2] | 0) << 3) | 0;
   break;
  }
 case 5:
  {
   $10 = $1 + 28 | 0;
   HEAP32[$0 >> 2] = HEAP32[$10 >> 2];
   $12 = $1 + 24 | 0;
   $13 = HEAP32[$12 >> 2] | 0;
   do if (!$13) label = 34; else {
    if (!(HEAP8[$13 + 6 >> 0] & 8)) {
     $21 = _luaT_gettm($13, 3, HEAP32[$g + 148 >> 2] | 0) | 0;
     $$pr$pre$i = HEAP32[$12 >> 2] | 0;
     if (!$$pr$pre$i) $$ph9$i = $21; else {
      $$ph8$i = $21;
      $$pr7$i = $$pr$pre$i;
      label = 5;
     }
    } else {
     $$ph8$i = 0;
     $$pr7$i = $13;
     label = 5;
    }
    if ((label | 0) == 5) if (!(HEAP8[$$pr7$i + 5 >> 0] & 3)) $$ph9$i = $$ph8$i; else {
     _reallymarkobject($g, $$pr7$i);
     $$ph9$i = $$ph8$i;
    }
    if (!$$ph9$i) label = 34; else if ((HEAP32[$$ph9$i + 4 >> 2] & 15 | 0) == 4) {
     $33 = (HEAP32[$$ph9$i >> 2] | 0) + 24 | 0;
     $34 = _strchr($33, 107) | 0;
     $36 = ($34 | 0) != 0;
     $37 = (_strchr($33, 118) | 0) == 0;
     if ($37 & ($36 ^ 1)) label = 34; else {
      HEAP8[$2 >> 0] = HEAPU8[$2 >> 0] & 251;
      if ($36) if ($37) {
       _traverseephemeron($g, $1) | 0;
       break;
      } else {
       $98 = $g + 80 | 0;
       HEAP32[$10 >> 2] = HEAP32[$98 >> 2];
       HEAP32[$98 >> 2] = $1;
       break;
      }
      $45 = 1 << HEAPU8[$1 + 7 >> 0];
      $47 = HEAP32[$1 + 16 >> 2] | 0;
      $48 = $47 + ($45 * 20 | 0) | 0;
      $52 = (HEAP32[$1 + 8 >> 2] | 0) != 0 & 1;
      if (($45 | 0) > 0) {
       $hasclears$04$i$i = $52;
       $n$02$i$i = $47;
       while (1) {
        $54 = $n$02$i$i + 4 | 0;
        $57 = $n$02$i$i + 12 | 0;
        $60 = (HEAP32[$57 >> 2] & 64 | 0) == 0;
        do if (!(HEAP32[$54 >> 2] | 0)) if ($60) $hasclears$1$i$i = $hasclears$04$i$i; else if (!(HEAP8[(HEAP32[$n$02$i$i + 8 >> 2] | 0) + 5 >> 0] & 3)) $hasclears$1$i$i = $hasclears$04$i$i; else {
         HEAP32[$57 >> 2] = 10;
         $hasclears$1$i$i = $hasclears$04$i$i;
        } else {
         if (!$60) {
          $68 = HEAP32[$n$02$i$i + 8 >> 2] | 0;
          if (HEAP8[$68 + 5 >> 0] & 3) _reallymarkobject($g, $68);
         }
         if (!$hasclears$04$i$i) {
          $74 = HEAP32[$54 >> 2] | 0;
          if (!($74 & 64)) $hasclears$1$i$i = 0; else {
           $79 = HEAP32[$n$02$i$i >> 2] | 0;
           if (($74 & 15 | 0) != 4) {
            $hasclears$1$i$i = (HEAP8[$79 + 5 >> 0] & 3) != 0 & 1;
            break;
           }
           if (!$79) $hasclears$1$i$i = 0; else if (!(HEAP8[$79 + 5 >> 0] & 3)) $hasclears$1$i$i = 0; else {
            _reallymarkobject($g, $79);
            $hasclears$1$i$i = 0;
           }
          }
         } else $hasclears$1$i$i = $hasclears$04$i$i;
        } while (0);
        $n$02$i$i = $n$02$i$i + 20 | 0;
        if ($n$02$i$i >>> 0 >= $48 >>> 0) {
         $hasclears$0$lcssa$i$i = $hasclears$1$i$i;
         break;
        } else $hasclears$04$i$i = $hasclears$1$i$i;
       }
      } else $hasclears$0$lcssa$i$i = $52;
      if (!(HEAP8[$g + 49 >> 0] | 0)) {
       $93 = $g + 68 | 0;
       HEAP32[$10 >> 2] = HEAP32[$93 >> 2];
       HEAP32[$93 >> 2] = $1;
       break;
      }
      if ($hasclears$0$lcssa$i$i) {
       $96 = $g + 72 | 0;
       HEAP32[$10 >> 2] = HEAP32[$96 >> 2];
       HEAP32[$96 >> 2] = $1;
      }
     }
    } else label = 34;
   } while (0);
   if ((label | 0) == 34) {
    $104 = $1 + 16 | 0;
    $105 = HEAP32[$104 >> 2] | 0;
    $106 = $105 + ((1 << HEAPU8[$1 + 7 >> 0]) * 20 | 0) | 0;
    $107 = $1 + 8 | 0;
    $108 = HEAP32[$107 >> 2] | 0;
    if (!$108) $125 = $105; else {
     $110 = $1 + 12 | 0;
     $370 = $108;
     $i$03$i$i = 0;
     while (1) {
      $111 = HEAP32[$110 >> 2] | 0;
      if (!(HEAP32[$111 + ($i$03$i$i << 3) + 4 >> 2] & 64)) $124 = $370; else {
       $117 = HEAP32[$111 + ($i$03$i$i << 3) >> 2] | 0;
       if (!(HEAP8[$117 + 5 >> 0] & 3)) $124 = $370; else {
        _reallymarkobject($g, $117);
        $124 = HEAP32[$107 >> 2] | 0;
       }
      }
      $i$03$i$i = $i$03$i$i + 1 | 0;
      if ($i$03$i$i >>> 0 >= $124 >>> 0) break; else $370 = $124;
     }
     $125 = HEAP32[$104 >> 2] | 0;
    }
    if ($125 >>> 0 < $106 >>> 0) {
     $n$01$i$i = $125;
     do {
      $127 = $n$01$i$i + 4 | 0;
      $128 = HEAP32[$127 >> 2] | 0;
      $130 = $n$01$i$i + 12 | 0;
      $133 = (HEAP32[$130 >> 2] & 64 | 0) == 0;
      if (!$128) {
       if (!$133) if (HEAP8[(HEAP32[$n$01$i$i + 8 >> 2] | 0) + 5 >> 0] & 3) HEAP32[$130 >> 2] = 10;
      } else {
       if ($133) $147 = $128; else {
        $141 = HEAP32[$n$01$i$i + 8 >> 2] | 0;
        if (!(HEAP8[$141 + 5 >> 0] & 3)) $147 = $128; else {
         _reallymarkobject($g, $141);
         $147 = HEAP32[$127 >> 2] | 0;
        }
       }
       if ($147 & 64) {
        $149 = HEAP32[$n$01$i$i >> 2] | 0;
        if (HEAP8[$149 + 5 >> 0] & 3) _reallymarkobject($g, $149);
       }
      }
      $n$01$i$i = $n$01$i$i + 20 | 0;
     } while ($n$01$i$i >>> 0 < $106 >>> 0);
    }
   }
   $size$0 = (HEAP32[$1 + 8 >> 2] << 3) + 32 + (20 << HEAPU8[$1 + 7 >> 0]) | 0;
   break;
  }
 case 6:
  {
   HEAP32[$0 >> 2] = HEAP32[$1 + 8 >> 2];
   $168 = HEAP32[$1 + 12 >> 2] | 0;
   if ($168) if (HEAP8[$168 + 5 >> 0] & 3) _reallymarkobject($g, $168);
   $174 = $1 + 6 | 0;
   $175 = HEAP8[$174 >> 0] | 0;
   if (!($175 << 24 >> 24)) $$lcssa$i = $175 & 255; else {
    $178 = $g + 49 | 0;
    $i$01$i = 0;
    do {
     $180 = HEAP32[$1 + ($i$01$i << 2) + 16 >> 2] | 0;
     do if ($180) {
      $182 = HEAP32[$180 >> 2] | 0;
      if (($182 | 0) != ($180 + 8 | 0)) if ((HEAP8[$178 >> 0] | 0) != 8) {
       HEAP32[$180 + 12 >> 2] = 1;
       break;
      }
      if (HEAP32[$182 + 4 >> 2] & 64) {
       $192 = HEAP32[$182 >> 2] | 0;
       if (HEAP8[$192 + 5 >> 0] & 3) _reallymarkobject($g, $192);
      }
     } while (0);
     $i$01$i = $i$01$i + 1 | 0;
     $199 = HEAPU8[$174 >> 0] | 0;
    } while (($i$01$i | 0) < ($199 | 0));
    $$lcssa$i = $199;
   }
   $size$0 = ($$lcssa$i << 2) + 16 | 0;
   break;
  }
 case 8:
  {
   $225 = $1 + 36 | 0;
   HEAP32[$0 >> 2] = HEAP32[$225 >> 2];
   $227 = $g + 68 | 0;
   HEAP32[$225 >> 2] = HEAP32[$227 >> 2];
   HEAP32[$227 >> 2] = $1;
   HEAP8[$2 >> 0] = HEAPU8[$2 >> 0] & 251;
   $233 = $1 + 28 | 0;
   $234 = HEAP32[$233 >> 2] | 0;
   if (!$234) $size$0 = 1; else {
    $236 = $1 + 8 | 0;
    $237 = HEAP32[$236 >> 2] | 0;
    if ($234 >>> 0 < $237 >>> 0) {
     $372 = $237;
     $o$02$i = $234;
     while (1) {
      if (!(HEAP32[$o$02$i + 4 >> 2] & 64)) $250 = $372; else {
       $243 = HEAP32[$o$02$i >> 2] | 0;
       if (!(HEAP8[$243 + 5 >> 0] & 3)) $250 = $372; else {
        _reallymarkobject($g, $243);
        $250 = HEAP32[$236 >> 2] | 0;
       }
      }
      $248 = $o$02$i + 8 | 0;
      if ($248 >>> 0 < $250 >>> 0) {
       $372 = $250;
       $o$02$i = $248;
      } else {
       $o$0$lcssa$i = $248;
       break;
      }
     }
    } else $o$0$lcssa$i = $234;
    if ((HEAP8[$g + 49 >> 0] | 0) == 8) {
     $257 = (HEAP32[$233 >> 2] | 0) + (HEAP32[$1 + 92 >> 2] << 3) | 0;
     if ($o$0$lcssa$i >>> 0 < $257 >>> 0) {
      $o$11$i = $o$0$lcssa$i;
      do {
       HEAP32[$o$11$i + 4 >> 2] = 0;
       $o$11$i = $o$11$i + 8 | 0;
      } while ($o$11$i >>> 0 < $257 >>> 0);
     }
     $262 = $1 + 40 | 0;
     if ((HEAP32[$262 >> 2] | 0) == ($1 | 0)) if (HEAP32[$1 + 32 >> 2] | 0) {
      $268 = $g + 92 | 0;
      HEAP32[$262 >> 2] = HEAP32[$268 >> 2];
      HEAP32[$268 >> 2] = $1;
     }
    } else if ((HEAP8[$g + 50 >> 0] | 0) != 1) _luaD_shrinkstack($1);
    $size$0 = (HEAP32[$1 + 92 >> 2] << 3) + 112 | 0;
   }
   break;
  }
 default:
  return;
 }
 $367 = $g + 16 | 0;
 HEAP32[$367 >> 2] = (HEAP32[$367 >> 2] | 0) + $size$0;
 return;
}

function _free($mem) {
 $mem = $mem | 0;
 var $$lcssa = 0, $$pre$phi60Z2D = 0, $$pre$phi62Z2D = 0, $$pre$phiZ2D = 0, $$sum2 = 0, $1 = 0, $103 = 0, $104 = 0, $111 = 0, $112 = 0, $12 = 0, $120 = 0, $128 = 0, $133 = 0, $134 = 0, $137 = 0, $139 = 0, $14 = 0, $141 = 0, $15 = 0, $156 = 0, $161 = 0, $163 = 0, $166 = 0, $169 = 0, $172 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $19 = 0, $191 = 0, $192 = 0, $2 = 0, $201 = 0, $206 = 0, $210 = 0, $216 = 0, $22 = 0, $231 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $24 = 0, $240 = 0, $241 = 0, $247 = 0, $252 = 0, $253 = 0, $256 = 0, $258 = 0, $26 = 0, $261 = 0, $266 = 0, $272 = 0, $276 = 0, $277 = 0, $284 = 0, $293 = 0, $296 = 0, $301 = 0, $308 = 0, $309 = 0, $310 = 0, $318 = 0, $39 = 0, $44 = 0, $46 = 0, $49 = 0, $5 = 0, $51 = 0, $54 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $66 = 0, $67 = 0, $72 = 0, $73 = 0, $8 = 0, $82 = 0, $87 = 0, $9 = 0, $91 = 0, $97 = 0, $F16$0 = 0, $I18$0 = 0, $K19$054 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$053 = 0, $T$053$lcssa = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0;
 if (!$mem) return;
 $1 = $mem + -8 | 0;
 $2 = HEAP32[26670] | 0;
 if ($1 >>> 0 < $2 >>> 0) _abort();
 $5 = HEAP32[$mem + -4 >> 2] | 0;
 $6 = $5 & 3;
 if (($6 | 0) == 1) _abort();
 $8 = $5 & -8;
 $9 = $mem + ($8 + -8) | 0;
 do if (!($5 & 1)) {
  $12 = HEAP32[$1 >> 2] | 0;
  if (!$6) return;
  $$sum2 = -8 - $12 | 0;
  $14 = $mem + $$sum2 | 0;
  $15 = $12 + $8 | 0;
  if ($14 >>> 0 < $2 >>> 0) _abort();
  if (($14 | 0) == (HEAP32[26671] | 0)) {
   $103 = $mem + ($8 + -4) | 0;
   $104 = HEAP32[$103 >> 2] | 0;
   if (($104 & 3 | 0) != 3) {
    $p$0 = $14;
    $psize$0 = $15;
    break;
   }
   HEAP32[26668] = $15;
   HEAP32[$103 >> 2] = $104 & -2;
   HEAP32[$mem + ($$sum2 + 4) >> 2] = $15 | 1;
   HEAP32[$9 >> 2] = $15;
   return;
  }
  $19 = $12 >>> 3;
  if ($12 >>> 0 < 256) {
   $22 = HEAP32[$mem + ($$sum2 + 8) >> 2] | 0;
   $24 = HEAP32[$mem + ($$sum2 + 12) >> 2] | 0;
   $26 = 106704 + ($19 << 1 << 2) | 0;
   if (($22 | 0) != ($26 | 0)) {
    if ($22 >>> 0 < $2 >>> 0) _abort();
    if ((HEAP32[$22 + 12 >> 2] | 0) != ($14 | 0)) _abort();
   }
   if (($24 | 0) == ($22 | 0)) {
    HEAP32[26666] = HEAP32[26666] & ~(1 << $19);
    $p$0 = $14;
    $psize$0 = $15;
    break;
   }
   if (($24 | 0) == ($26 | 0)) $$pre$phi62Z2D = $24 + 8 | 0; else {
    if ($24 >>> 0 < $2 >>> 0) _abort();
    $39 = $24 + 8 | 0;
    if ((HEAP32[$39 >> 2] | 0) == ($14 | 0)) $$pre$phi62Z2D = $39; else _abort();
   }
   HEAP32[$22 + 12 >> 2] = $24;
   HEAP32[$$pre$phi62Z2D >> 2] = $22;
   $p$0 = $14;
   $psize$0 = $15;
   break;
  }
  $44 = HEAP32[$mem + ($$sum2 + 24) >> 2] | 0;
  $46 = HEAP32[$mem + ($$sum2 + 12) >> 2] | 0;
  do if (($46 | 0) == ($14 | 0)) {
   $57 = $mem + ($$sum2 + 20) | 0;
   $58 = HEAP32[$57 >> 2] | 0;
   if (!$58) {
    $60 = $mem + ($$sum2 + 16) | 0;
    $61 = HEAP32[$60 >> 2] | 0;
    if (!$61) {
     $R$1 = 0;
     break;
    } else {
     $R$0 = $61;
     $RP$0 = $60;
    }
   } else {
    $R$0 = $58;
    $RP$0 = $57;
   }
   while (1) {
    $63 = $R$0 + 20 | 0;
    $64 = HEAP32[$63 >> 2] | 0;
    if ($64) {
     $R$0 = $64;
     $RP$0 = $63;
     continue;
    }
    $66 = $R$0 + 16 | 0;
    $67 = HEAP32[$66 >> 2] | 0;
    if (!$67) {
     $R$0$lcssa = $R$0;
     $RP$0$lcssa = $RP$0;
     break;
    } else {
     $R$0 = $67;
     $RP$0 = $66;
    }
   }
   if ($RP$0$lcssa >>> 0 < $2 >>> 0) _abort(); else {
    HEAP32[$RP$0$lcssa >> 2] = 0;
    $R$1 = $R$0$lcssa;
    break;
   }
  } else {
   $49 = HEAP32[$mem + ($$sum2 + 8) >> 2] | 0;
   if ($49 >>> 0 < $2 >>> 0) _abort();
   $51 = $49 + 12 | 0;
   if ((HEAP32[$51 >> 2] | 0) != ($14 | 0)) _abort();
   $54 = $46 + 8 | 0;
   if ((HEAP32[$54 >> 2] | 0) == ($14 | 0)) {
    HEAP32[$51 >> 2] = $46;
    HEAP32[$54 >> 2] = $49;
    $R$1 = $46;
    break;
   } else _abort();
  } while (0);
  if (!$44) {
   $p$0 = $14;
   $psize$0 = $15;
  } else {
   $72 = HEAP32[$mem + ($$sum2 + 28) >> 2] | 0;
   $73 = 106968 + ($72 << 2) | 0;
   if (($14 | 0) == (HEAP32[$73 >> 2] | 0)) {
    HEAP32[$73 >> 2] = $R$1;
    if (!$R$1) {
     HEAP32[26667] = HEAP32[26667] & ~(1 << $72);
     $p$0 = $14;
     $psize$0 = $15;
     break;
    }
   } else {
    if ($44 >>> 0 < (HEAP32[26670] | 0) >>> 0) _abort();
    $82 = $44 + 16 | 0;
    if ((HEAP32[$82 >> 2] | 0) == ($14 | 0)) HEAP32[$82 >> 2] = $R$1; else HEAP32[$44 + 20 >> 2] = $R$1;
    if (!$R$1) {
     $p$0 = $14;
     $psize$0 = $15;
     break;
    }
   }
   $87 = HEAP32[26670] | 0;
   if ($R$1 >>> 0 < $87 >>> 0) _abort();
   HEAP32[$R$1 + 24 >> 2] = $44;
   $91 = HEAP32[$mem + ($$sum2 + 16) >> 2] | 0;
   do if ($91) if ($91 >>> 0 < $87 >>> 0) _abort(); else {
    HEAP32[$R$1 + 16 >> 2] = $91;
    HEAP32[$91 + 24 >> 2] = $R$1;
    break;
   } while (0);
   $97 = HEAP32[$mem + ($$sum2 + 20) >> 2] | 0;
   if (!$97) {
    $p$0 = $14;
    $psize$0 = $15;
   } else if ($97 >>> 0 < (HEAP32[26670] | 0) >>> 0) _abort(); else {
    HEAP32[$R$1 + 20 >> 2] = $97;
    HEAP32[$97 + 24 >> 2] = $R$1;
    $p$0 = $14;
    $psize$0 = $15;
    break;
   }
  }
 } else {
  $p$0 = $1;
  $psize$0 = $8;
 } while (0);
 if ($p$0 >>> 0 >= $9 >>> 0) _abort();
 $111 = $mem + ($8 + -4) | 0;
 $112 = HEAP32[$111 >> 2] | 0;
 if (!($112 & 1)) _abort();
 if (!($112 & 2)) {
  if (($9 | 0) == (HEAP32[26672] | 0)) {
   $120 = (HEAP32[26669] | 0) + $psize$0 | 0;
   HEAP32[26669] = $120;
   HEAP32[26672] = $p$0;
   HEAP32[$p$0 + 4 >> 2] = $120 | 1;
   if (($p$0 | 0) != (HEAP32[26671] | 0)) return;
   HEAP32[26671] = 0;
   HEAP32[26668] = 0;
   return;
  }
  if (($9 | 0) == (HEAP32[26671] | 0)) {
   $128 = (HEAP32[26668] | 0) + $psize$0 | 0;
   HEAP32[26668] = $128;
   HEAP32[26671] = $p$0;
   HEAP32[$p$0 + 4 >> 2] = $128 | 1;
   HEAP32[$p$0 + $128 >> 2] = $128;
   return;
  }
  $133 = ($112 & -8) + $psize$0 | 0;
  $134 = $112 >>> 3;
  do if ($112 >>> 0 < 256) {
   $137 = HEAP32[$mem + $8 >> 2] | 0;
   $139 = HEAP32[$mem + ($8 | 4) >> 2] | 0;
   $141 = 106704 + ($134 << 1 << 2) | 0;
   if (($137 | 0) != ($141 | 0)) {
    if ($137 >>> 0 < (HEAP32[26670] | 0) >>> 0) _abort();
    if ((HEAP32[$137 + 12 >> 2] | 0) != ($9 | 0)) _abort();
   }
   if (($139 | 0) == ($137 | 0)) {
    HEAP32[26666] = HEAP32[26666] & ~(1 << $134);
    break;
   }
   if (($139 | 0) == ($141 | 0)) $$pre$phi60Z2D = $139 + 8 | 0; else {
    if ($139 >>> 0 < (HEAP32[26670] | 0) >>> 0) _abort();
    $156 = $139 + 8 | 0;
    if ((HEAP32[$156 >> 2] | 0) == ($9 | 0)) $$pre$phi60Z2D = $156; else _abort();
   }
   HEAP32[$137 + 12 >> 2] = $139;
   HEAP32[$$pre$phi60Z2D >> 2] = $137;
  } else {
   $161 = HEAP32[$mem + ($8 + 16) >> 2] | 0;
   $163 = HEAP32[$mem + ($8 | 4) >> 2] | 0;
   do if (($163 | 0) == ($9 | 0)) {
    $175 = $mem + ($8 + 12) | 0;
    $176 = HEAP32[$175 >> 2] | 0;
    if (!$176) {
     $178 = $mem + ($8 + 8) | 0;
     $179 = HEAP32[$178 >> 2] | 0;
     if (!$179) {
      $R7$1 = 0;
      break;
     } else {
      $R7$0 = $179;
      $RP9$0 = $178;
     }
    } else {
     $R7$0 = $176;
     $RP9$0 = $175;
    }
    while (1) {
     $181 = $R7$0 + 20 | 0;
     $182 = HEAP32[$181 >> 2] | 0;
     if ($182) {
      $R7$0 = $182;
      $RP9$0 = $181;
      continue;
     }
     $184 = $R7$0 + 16 | 0;
     $185 = HEAP32[$184 >> 2] | 0;
     if (!$185) {
      $R7$0$lcssa = $R7$0;
      $RP9$0$lcssa = $RP9$0;
      break;
     } else {
      $R7$0 = $185;
      $RP9$0 = $184;
     }
    }
    if ($RP9$0$lcssa >>> 0 < (HEAP32[26670] | 0) >>> 0) _abort(); else {
     HEAP32[$RP9$0$lcssa >> 2] = 0;
     $R7$1 = $R7$0$lcssa;
     break;
    }
   } else {
    $166 = HEAP32[$mem + $8 >> 2] | 0;
    if ($166 >>> 0 < (HEAP32[26670] | 0) >>> 0) _abort();
    $169 = $166 + 12 | 0;
    if ((HEAP32[$169 >> 2] | 0) != ($9 | 0)) _abort();
    $172 = $163 + 8 | 0;
    if ((HEAP32[$172 >> 2] | 0) == ($9 | 0)) {
     HEAP32[$169 >> 2] = $163;
     HEAP32[$172 >> 2] = $166;
     $R7$1 = $163;
     break;
    } else _abort();
   } while (0);
   if ($161) {
    $191 = HEAP32[$mem + ($8 + 20) >> 2] | 0;
    $192 = 106968 + ($191 << 2) | 0;
    if (($9 | 0) == (HEAP32[$192 >> 2] | 0)) {
     HEAP32[$192 >> 2] = $R7$1;
     if (!$R7$1) {
      HEAP32[26667] = HEAP32[26667] & ~(1 << $191);
      break;
     }
    } else {
     if ($161 >>> 0 < (HEAP32[26670] | 0) >>> 0) _abort();
     $201 = $161 + 16 | 0;
     if ((HEAP32[$201 >> 2] | 0) == ($9 | 0)) HEAP32[$201 >> 2] = $R7$1; else HEAP32[$161 + 20 >> 2] = $R7$1;
     if (!$R7$1) break;
    }
    $206 = HEAP32[26670] | 0;
    if ($R7$1 >>> 0 < $206 >>> 0) _abort();
    HEAP32[$R7$1 + 24 >> 2] = $161;
    $210 = HEAP32[$mem + ($8 + 8) >> 2] | 0;
    do if ($210) if ($210 >>> 0 < $206 >>> 0) _abort(); else {
     HEAP32[$R7$1 + 16 >> 2] = $210;
     HEAP32[$210 + 24 >> 2] = $R7$1;
     break;
    } while (0);
    $216 = HEAP32[$mem + ($8 + 12) >> 2] | 0;
    if ($216) if ($216 >>> 0 < (HEAP32[26670] | 0) >>> 0) _abort(); else {
     HEAP32[$R7$1 + 20 >> 2] = $216;
     HEAP32[$216 + 24 >> 2] = $R7$1;
     break;
    }
   }
  } while (0);
  HEAP32[$p$0 + 4 >> 2] = $133 | 1;
  HEAP32[$p$0 + $133 >> 2] = $133;
  if (($p$0 | 0) == (HEAP32[26671] | 0)) {
   HEAP32[26668] = $133;
   return;
  } else $psize$1 = $133;
 } else {
  HEAP32[$111 >> 2] = $112 & -2;
  HEAP32[$p$0 + 4 >> 2] = $psize$0 | 1;
  HEAP32[$p$0 + $psize$0 >> 2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 if ($psize$1 >>> 0 < 256) {
  $233 = $231 << 1;
  $234 = 106704 + ($233 << 2) | 0;
  $235 = HEAP32[26666] | 0;
  $236 = 1 << $231;
  if (!($235 & $236)) {
   HEAP32[26666] = $235 | $236;
   $$pre$phiZ2D = 106704 + ($233 + 2 << 2) | 0;
   $F16$0 = $234;
  } else {
   $240 = 106704 + ($233 + 2 << 2) | 0;
   $241 = HEAP32[$240 >> 2] | 0;
   if ($241 >>> 0 < (HEAP32[26670] | 0) >>> 0) _abort(); else {
    $$pre$phiZ2D = $240;
    $F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $p$0;
  HEAP32[$F16$0 + 12 >> 2] = $p$0;
  HEAP32[$p$0 + 8 >> 2] = $F16$0;
  HEAP32[$p$0 + 12 >> 2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 if (!$247) $I18$0 = 0; else if ($psize$1 >>> 0 > 16777215) $I18$0 = 31; else {
  $252 = ($247 + 1048320 | 0) >>> 16 & 8;
  $253 = $247 << $252;
  $256 = ($253 + 520192 | 0) >>> 16 & 4;
  $258 = $253 << $256;
  $261 = ($258 + 245760 | 0) >>> 16 & 2;
  $266 = 14 - ($256 | $252 | $261) + ($258 << $261 >>> 15) | 0;
  $I18$0 = $psize$1 >>> ($266 + 7 | 0) & 1 | $266 << 1;
 }
 $272 = 106968 + ($I18$0 << 2) | 0;
 HEAP32[$p$0 + 28 >> 2] = $I18$0;
 HEAP32[$p$0 + 20 >> 2] = 0;
 HEAP32[$p$0 + 16 >> 2] = 0;
 $276 = HEAP32[26667] | 0;
 $277 = 1 << $I18$0;
 L199 : do if (!($276 & $277)) {
  HEAP32[26667] = $276 | $277;
  HEAP32[$272 >> 2] = $p$0;
  HEAP32[$p$0 + 24 >> 2] = $272;
  HEAP32[$p$0 + 12 >> 2] = $p$0;
  HEAP32[$p$0 + 8 >> 2] = $p$0;
 } else {
  $284 = HEAP32[$272 >> 2] | 0;
  if (($I18$0 | 0) == 31) $293 = 0; else $293 = 25 - ($I18$0 >>> 1) | 0;
  L205 : do if ((HEAP32[$284 + 4 >> 2] & -8 | 0) == ($psize$1 | 0)) $T$0$lcssa = $284; else {
   $K19$054 = $psize$1 << $293;
   $T$053 = $284;
   while (1) {
    $301 = $T$053 + ($K19$054 >>> 31 << 2) + 16 | 0;
    $296 = HEAP32[$301 >> 2] | 0;
    if (!$296) {
     $$lcssa = $301;
     $T$053$lcssa = $T$053;
     break;
    }
    if ((HEAP32[$296 + 4 >> 2] & -8 | 0) == ($psize$1 | 0)) {
     $T$0$lcssa = $296;
     break L205;
    } else {
     $K19$054 = $K19$054 << 1;
     $T$053 = $296;
    }
   }
   if ($$lcssa >>> 0 < (HEAP32[26670] | 0) >>> 0) _abort(); else {
    HEAP32[$$lcssa >> 2] = $p$0;
    HEAP32[$p$0 + 24 >> 2] = $T$053$lcssa;
    HEAP32[$p$0 + 12 >> 2] = $p$0;
    HEAP32[$p$0 + 8 >> 2] = $p$0;
    break L199;
   }
  } while (0);
  $308 = $T$0$lcssa + 8 | 0;
  $309 = HEAP32[$308 >> 2] | 0;
  $310 = HEAP32[26670] | 0;
  if ($T$0$lcssa >>> 0 >= $310 >>> 0 & $309 >>> 0 >= $310 >>> 0) {
   HEAP32[$309 + 12 >> 2] = $p$0;
   HEAP32[$308 >> 2] = $p$0;
   HEAP32[$p$0 + 8 >> 2] = $309;
   HEAP32[$p$0 + 12 >> 2] = $T$0$lcssa;
   HEAP32[$p$0 + 24 >> 2] = 0;
   break;
  } else _abort();
 } while (0);
 $318 = (HEAP32[26674] | 0) + -1 | 0;
 HEAP32[26674] = $318;
 if (!$318) $sp$0$in$i = 107120 | 0; else return;
 while (1) {
  $sp$0$i = HEAP32[$sp$0$in$i >> 2] | 0;
  if (!$sp$0$i) break; else $sp$0$in$i = $sp$0$i + 8 | 0;
 }
 HEAP32[26674] = -1;
 return;
}

function _stbtt_Rasterize($result, $flatness_in_pixels, $vertices, $num_verts, $scale_x, $scale_y, $shift_x, $shift_y, $x_off, $y_off, $invert, $userdata) {
 $result = $result | 0;
 $flatness_in_pixels = +$flatness_in_pixels;
 $vertices = $vertices | 0;
 $num_verts = $num_verts | 0;
 $scale_x = +$scale_x;
 $scale_y = +$scale_y;
 $shift_x = +$shift_x;
 $shift_y = +$shift_y;
 $x_off = $x_off | 0;
 $y_off = $y_off | 0;
 $invert = $invert | 0;
 $userdata = $userdata | 0;
 var $$032$i$i = 0, $$04$i$i$i = 0, $$124$i$i = 0, $$2$lcssa$i$i = 0, $$212$i$i = 0, $$sum2$i = 0, $$sum3$i = 0, $101 = 0, $102 = 0, $107 = 0, $110 = 0, $112 = 0, $115 = 0, $118 = 0, $12 = 0, $121 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $127 = 0.0, $13 = 0, $143 = 0, $151 = 0, $154 = 0, $157 = 0, $158 = 0, $163 = 0, $164 = 0, $169 = 0, $170 = 0, $172 = 0, $177 = 0, $178 = 0, $18 = 0, $182 = 0, $191 = 0, $20 = 0.0, $201 = 0, $210 = 0, $22 = 0, $226 = 0, $230 = 0, $234 = 0, $235 = 0, $236 = 0, $27 = 0.0, $29 = 0.0, $3 = 0, $31 = 0, $42 = 0.0, $5 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $64 = 0, $7 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $78 = 0.0, $79 = 0, $82 = 0, $9 = 0, $90 = 0, $99 = 0, $a$0$i = 0, $active$i$i = 0, $b$0$i = 0, $changed$0$i$i = 0, $changed$1$i$i = 0, $i$0$i$i$i = 0, $i$021$i = 0, $i$11$i$i$i = 0, $i$116$i = 0, $j$0$i$i$i = 0, $j$012$i = 0, $j$012$i$phi = 0, $j$030$i$i = 0, $k$013$i = 0, $m$015$i = 0, $n$0$lcssa$i = 0, $n$022$i = 0, $n$1$lcssa$i = 0, $n$117$i = 0, $n$2$lcssa$i = 0, $n$214$i = 0, $n$3$i = 0, $p$0$i$i = 0, $s$022$i$i = 0, $scanline$0$i$i = 0, $scanline_data$i$i = 0, $step$0$ph17$i$i = 0, $step$1$i$i = 0, $w$03$i$i$i = 0, $winding_count = 0, $winding_lengths = 0, $x0$02$i$i$i = 0, $x0$1$i$i$i = 0, $y$031$i$i = 0, $y$123$i$i = 0, label = 0, sp = 0, $w$03$i$i$i$looptemp = 0, $230$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528 | 0;
 $active$i$i = sp + 8 | 0;
 $scanline_data$i$i = sp + 16 | 0;
 $winding_count = sp + 4 | 0;
 $winding_lengths = sp;
 $3 = _stbtt_FlattenCurves($vertices, $num_verts, $flatness_in_pixels / ($scale_x > $scale_y ? $scale_y : $scale_x), $winding_lengths, $winding_count, 0) | 0;
 if (!$3) {
  STACKTOP = sp;
  return;
 }
 $5 = HEAP32[$winding_lengths >> 2] | 0;
 $6 = HEAP32[$winding_count >> 2] | 0;
 $7 = ($invert | 0) != 0;
 if ($7) $42 = -$scale_y; else $42 = $scale_y;
 $9 = $result + 4 | 0;
 $12 = (HEAP32[$9 >> 2] | 0) < 8 ? 15 : 5;
 $13 = ($6 | 0) > 0;
 if ($13) {
  $i$021$i = 0;
  $n$022$i = 0;
  do {
   $n$022$i = (HEAP32[$5 + ($i$021$i << 2) >> 2] | 0) + $n$022$i | 0;
   $i$021$i = $i$021$i + 1 | 0;
  } while (($i$021$i | 0) != ($6 | 0));
  $n$0$lcssa$i = ($n$022$i * 20 | 0) + 20 | 0;
 } else $n$0$lcssa$i = 20;
 $18 = _malloc($n$0$lcssa$i) | 0;
 if (!$18) $234 = $5; else {
  if ($13) {
   $20 = +($12 | 0);
   $i$116$i = 0;
   $m$015$i = 0;
   $n$117$i = 0;
   while (1) {
    $22 = HEAP32[$5 + ($i$116$i << 2) >> 2] | 0;
    if (($22 | 0) > 0) {
     $j$012$i = $22 + -1 | 0;
     $k$013$i = 0;
     $n$214$i = $n$117$i;
     while (1) {
      $27 = +HEAPF32[$3 + ($j$012$i + $m$015$i << 3) + 4 >> 2];
      $29 = +HEAPF32[$3 + ($k$013$i + $m$015$i << 3) + 4 >> 2];
      if ($27 == $29) $n$3$i = $n$214$i; else {
       $31 = $18 + ($n$214$i * 20 | 0) + 16 | 0;
       HEAP32[$31 >> 2] = 0;
       if ($7) if ($27 > $29) label = 16; else {
        $a$0$i = $k$013$i;
        $b$0$i = $j$012$i;
       } else if ($27 < $29) label = 16; else {
        $a$0$i = $k$013$i;
        $b$0$i = $j$012$i;
       }
       if ((label | 0) == 16) {
        label = 0;
        HEAP32[$31 >> 2] = 1;
        $a$0$i = $j$012$i;
        $b$0$i = $k$013$i;
       }
       $$sum2$i = $a$0$i + $m$015$i | 0;
       HEAPF32[$18 + ($n$214$i * 20 | 0) >> 2] = +HEAPF32[$3 + ($$sum2$i << 3) >> 2] * $scale_x + $shift_x;
       HEAPF32[$18 + ($n$214$i * 20 | 0) + 4 >> 2] = $20 * ($42 * +HEAPF32[$3 + ($$sum2$i << 3) + 4 >> 2]) + $shift_y;
       $$sum3$i = $b$0$i + $m$015$i | 0;
       HEAPF32[$18 + ($n$214$i * 20 | 0) + 8 >> 2] = +HEAPF32[$3 + ($$sum3$i << 3) >> 2] * $scale_x + $shift_x;
       HEAPF32[$18 + ($n$214$i * 20 | 0) + 12 >> 2] = $20 * ($42 * +HEAPF32[$3 + ($$sum3$i << 3) + 4 >> 2]) + $shift_y;
       $n$3$i = $n$214$i + 1 | 0;
      }
      $58 = $k$013$i + 1 | 0;
      if (($58 | 0) == ($22 | 0)) {
       $n$2$lcssa$i = $n$3$i;
       break;
      } else {
       $j$012$i$phi = $k$013$i;
       $k$013$i = $58;
       $n$214$i = $n$3$i;
       $j$012$i = $j$012$i$phi;
      }
     }
    } else $n$2$lcssa$i = $n$117$i;
    $m$015$i = $22 + $m$015$i | 0;
    $i$116$i = $i$116$i + 1 | 0;
    if (($i$116$i | 0) == ($6 | 0)) {
     $n$1$lcssa$i = $n$2$lcssa$i;
     break;
    } else $n$117$i = $n$2$lcssa$i;
   }
  } else $n$1$lcssa$i = 0;
  _qsort($18, $n$1$lcssa$i, 20, 25);
  HEAP32[$active$i$i >> 2] = 0;
  $60 = 255 / ($12 >>> 0) | 0;
  $61 = HEAP32[$result >> 2] | 0;
  if (($61 | 0) > 512) $scanline$0$i$i = _malloc($61) | 0; else $scanline$0$i$i = $scanline_data$i$i;
  $64 = HEAP32[$9 >> 2] | 0;
  HEAPF32[$18 + ($n$1$lcssa$i * 20 | 0) + 4 >> 2] = +($12 | 0) * +($64 + $y_off | 0) + 1.0;
  do if (($64 | 0) > 0) {
   $73 = $result + 12 | 0;
   $74 = $result + 8 | 0;
   $75 = $x_off << 10;
   $$032$i$i = $18;
   $235 = 0;
   $76 = $61;
   $j$030$i$i = 0;
   $y$031$i$i = Math_imul($12, $y_off) | 0;
   L38 : while (1) {
    _memset($scanline$0$i$i | 0, 0, $76 | 0) | 0;
    $$124$i$i = $$032$i$i;
    $79 = $235;
    $s$022$i$i = 0;
    $y$123$i$i = $y$031$i$i;
    while (1) {
     $78 = +($y$123$i$i | 0) + .5;
     L42 : do if (!$79) {
      $changed$0$i$i = 0;
      $step$1$i$i = $active$i$i;
     } else {
      $236 = $79;
      $step$0$ph17$i$i = $active$i$i;
      while (1) {
       $82 = $236;
       while (1) {
        if (!(+HEAPF32[$82 + 8 >> 2] <= $78)) break;
        HEAP32[$step$0$ph17$i$i >> 2] = HEAP32[$82 + 12 >> 2];
        if (!(HEAP32[$82 + 16 >> 2] | 0)) {
         label = 30;
         break L38;
        }
        _free($82);
        $90 = HEAP32[$step$0$ph17$i$i >> 2] | 0;
        if (!$90) {
         $changed$0$i$i = 0;
         $step$1$i$i = $active$i$i;
         break L42;
        } else $82 = $90;
       }
       HEAP32[$82 >> 2] = (HEAP32[$82 >> 2] | 0) + (HEAP32[$82 + 4 >> 2] | 0);
       $step$0$ph17$i$i = $82 + 12 | 0;
       $236 = HEAP32[$step$0$ph17$i$i >> 2] | 0;
       if (!$236) {
        $changed$0$i$i = 0;
        $step$1$i$i = $active$i$i;
        break;
       }
      }
     } while (0);
     while (1) {
      $99 = HEAP32[$step$1$i$i >> 2] | 0;
      if ($99) {
       $101 = $99 + 12 | 0;
       $102 = HEAP32[$101 >> 2] | 0;
       if ($102) {
        if ((HEAP32[$99 >> 2] | 0) > (HEAP32[$102 >> 2] | 0)) {
         $107 = $102 + 12 | 0;
         HEAP32[$101 >> 2] = HEAP32[$107 >> 2];
         HEAP32[$107 >> 2] = $99;
         HEAP32[$step$1$i$i >> 2] = $102;
         $110 = $102;
         $changed$1$i$i = 1;
        } else {
         $110 = $99;
         $changed$1$i$i = $changed$0$i$i;
        }
        $changed$0$i$i = $changed$1$i$i;
        $step$1$i$i = $110 + 12 | 0;
        continue;
       }
      }
      if (!$changed$0$i$i) break; else {
       $changed$0$i$i = 0;
       $step$1$i$i = $active$i$i;
      }
     }
     $112 = $$124$i$i + 4 | 0;
     if (!(+HEAPF32[$112 >> 2] <= $78)) $$2$lcssa$i$i = $$124$i$i; else {
      $$212$i$i = $$124$i$i;
      $125 = $112;
      while (1) {
       $115 = $$212$i$i + 12 | 0;
       do if (+HEAPF32[$115 >> 2] > $78) {
        $118 = _malloc(20) | 0;
        $121 = +HEAPF32[$$212$i$i >> 2];
        $123 = +HEAPF32[$115 >> 2];
        $124 = +HEAPF32[$125 >> 2];
        $127 = (+HEAPF32[$$212$i$i + 8 >> 2] - $121) / ($123 - $124);
        if (!($124 <= $78)) {
         label = 42;
         break L38;
        }
        if (!$118) $154 = 0; else {
         if ($127 < 0.0) HEAP32[$118 + 4 >> 2] = 0 - ~~+Math_floor(+($127 * -1024.0)); else HEAP32[$118 + 4 >> 2] = ~~+Math_floor(+($127 * 1024.0));
         $143 = ~~+Math_floor(+(($121 + $127 * ($78 - $124)) * 1024.0)) - $75 | 0;
         HEAP32[$118 >> 2] = $143;
         HEAPF32[$118 + 8 >> 2] = $123;
         HEAP32[$118 + 12 >> 2] = 0;
         HEAP32[$118 + 16 >> 2] = (HEAP32[$$212$i$i + 16 >> 2] | 0) != 0 ? 1 : -1;
         $154 = $143;
        }
        $151 = HEAP32[$active$i$i >> 2] | 0;
        if (!$151) {
         HEAP32[$active$i$i >> 2] = $118;
         break;
        }
        if (($154 | 0) < (HEAP32[$151 >> 2] | 0)) {
         HEAP32[$118 + 12 >> 2] = $151;
         HEAP32[$active$i$i >> 2] = $118;
         break;
        } else $p$0$i$i = $151;
        while (1) {
         $157 = $p$0$i$i + 12 | 0;
         $158 = HEAP32[$157 >> 2] | 0;
         if (!$158) {
          $163 = 0;
          break;
         }
         if ((HEAP32[$158 >> 2] | 0) < ($154 | 0)) $p$0$i$i = $158; else {
          $163 = $158;
          break;
         }
        }
        HEAP32[$118 + 12 >> 2] = $163;
        HEAP32[$157 >> 2] = $118;
       } while (0);
       $164 = $$212$i$i + 20 | 0;
       $125 = $$212$i$i + 24 | 0;
       if (!(+HEAPF32[$125 >> 2] <= $78)) {
        $$2$lcssa$i$i = $164;
        break;
       } else $$212$i$i = $164;
      }
     }
     $79 = HEAP32[$active$i$i >> 2] | 0;
     $169 = ($79 | 0) == 0;
     if (!$169) {
      $170 = HEAP32[$result >> 2] | 0;
      $$04$i$i$i = $79;
      $w$03$i$i$i = 0;
      $x0$02$i$i$i = 0;
      while (1) {
       $172 = HEAP32[$$04$i$i$i >> 2] | 0;
       $w$03$i$i$i$looptemp = $w$03$i$i$i;
       $w$03$i$i$i = (HEAP32[$$04$i$i$i + 16 >> 2] | 0) + $w$03$i$i$i | 0;
       do if (!$w$03$i$i$i$looptemp) $x0$1$i$i$i = $172; else if (!$w$03$i$i$i) {
        $177 = $x0$02$i$i$i >> 10;
        $178 = $172 >> 10;
        if (($177 | 0) < ($170 | 0) & ($178 | 0) > -1) {
         if (($177 | 0) == ($178 | 0)) {
          $182 = $scanline$0$i$i + $177 | 0;
          HEAP8[$182 >> 0] = (HEAPU8[$182 >> 0] | 0) + ((Math_imul($172 - $x0$02$i$i$i | 0, $60) | 0) >>> 10);
          $x0$1$i$i$i = $x0$02$i$i$i;
          break;
         }
         if (($177 | 0) > -1) {
          $191 = $scanline$0$i$i + $177 | 0;
          HEAP8[$191 >> 0] = (HEAPU8[$191 >> 0] | 0) + ((Math_imul(1024 - ($x0$02$i$i$i & 1023) | 0, $60) | 0) >>> 10);
          $i$0$i$i$i = $177 + 1 | 0;
         } else $i$0$i$i$i = 0;
         if (($178 | 0) < ($170 | 0)) {
          $201 = $scanline$0$i$i + $178 | 0;
          HEAP8[$201 >> 0] = (HEAPU8[$201 >> 0] | 0) + ((Math_imul($172 & 1023, $60) | 0) >>> 10);
          $j$0$i$i$i = $178;
         } else $j$0$i$i$i = $170;
         if (($i$0$i$i$i | 0) < ($j$0$i$i$i | 0)) $i$11$i$i$i = $i$0$i$i$i; else {
          $x0$1$i$i$i = $x0$02$i$i$i;
          break;
         }
         do {
          $210 = $scanline$0$i$i + $i$11$i$i$i | 0;
          HEAP8[$210 >> 0] = (HEAPU8[$210 >> 0] | 0) + $60;
          $i$11$i$i$i = $i$11$i$i$i + 1 | 0;
         } while (($i$11$i$i$i | 0) != ($j$0$i$i$i | 0));
         $x0$1$i$i$i = $x0$02$i$i$i;
        } else $x0$1$i$i$i = $x0$02$i$i$i;
       } else $x0$1$i$i$i = $x0$02$i$i$i; while (0);
       $$04$i$i$i = HEAP32[$$04$i$i$i + 12 >> 2] | 0;
       if (!$$04$i$i$i) break; else $x0$02$i$i$i = $x0$1$i$i$i;
      }
     }
     $y$123$i$i = $y$123$i$i + 1 | 0;
     $s$022$i$i = $s$022$i$i + 1 | 0;
     if (($s$022$i$i | 0) >= ($12 | 0)) break; else $$124$i$i = $$2$lcssa$i$i;
    }
    _memcpy((HEAP32[$73 >> 2] | 0) + (Math_imul(HEAP32[$74 >> 2] | 0, $j$030$i$i) | 0) | 0, $scanline$0$i$i | 0, HEAP32[$result >> 2] | 0) | 0;
    $226 = $j$030$i$i + 1 | 0;
    if (($226 | 0) >= (HEAP32[$9 >> 2] | 0)) {
     label = 24;
     break;
    }
    $$032$i$i = $$2$lcssa$i$i;
    $235 = $79;
    $76 = HEAP32[$result >> 2] | 0;
    $j$030$i$i = $226;
    $y$031$i$i = $y$123$i$i;
   }
   if ((label | 0) == 24) {
    if ($169) break; else $230 = $79;
    do {
     $230$looptemp = $230;
     $230 = HEAP32[$230 + 12 >> 2] | 0;
     _free($230$looptemp);
    } while (($230 | 0) != 0);
    HEAP32[$active$i$i >> 2] = 0;
    break;
   } else if ((label | 0) == 30) ___assert_fail(81208, 81016, 1499, 81224); else if ((label | 0) == 42) ___assert_fail(81256, 81016, 1410, 81280);
  } while (0);
  if (($scanline$0$i$i | 0) != ($scanline_data$i$i | 0)) _free($scanline$0$i$i);
  _free($18);
  $234 = HEAP32[$winding_lengths >> 2] | 0;
 }
 _free($234);
 _free($3);
 STACKTOP = sp;
 return;
}
function __Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput($output, $cache, $input) {
 $output = $output | 0;
 $cache = $cache | 0;
 $input = $input | 0;
 var $$0$i4 = 0.0, $$pr$pre = 0, $101 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $108 = 0, $11 = 0.0, $12 = 0, $121 = 0.0, $122 = 0, $124 = 0, $128 = 0.0, $13 = 0, $131 = 0.0, $134 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0, $147 = 0.0, $150 = 0.0, $151 = 0, $152 = 0, $154 = 0, $16 = 0.0, $167 = 0.0, $168 = 0, $170 = 0, $175 = 0.0, $178 = 0.0, $18 = 0.0, $181 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0, $199 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0, $205 = 0, $208 = 0, $209 = 0, $21 = 0, $214 = 0, $22 = 0, $223 = 0, $226 = 0, $229 = 0.0, $23 = 0.0, $230 = 0, $232 = 0, $234 = 0.0, $239 = 0, $241 = 0, $244 = 0.0, $247 = 0.0, $25 = 0.0, $253 = 0.0, $256 = 0.0, $26 = 0, $27 = 0, $28 = 0, $283 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $29 = 0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $3 = 0, $30 = 0, $300 = 0.0, $302 = 0.0, $306 = 0.0, $308 = 0.0, $31 = 0, $32 = 0, $323 = 0.0, $324 = 0.0, $325 = 0, $329 = 0, $33 = 0, $34 = 0, $4 = 0, $42 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $62 = 0.0, $66 = 0.0, $69 = 0.0, $7 = 0, $78 = 0.0, $79 = 0.0, $81 = 0.0, $82 = 0.0, $9 = 0.0, $90 = 0.0, $92 = 0.0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $bestIndex$0$lcssa$i1332 = 0, $bestIndex$0$lcssa$i31 = 0, $bestIndex$03$i = 0, $bestIndex$03$i8 = 0, $bestValue$01$i = 0.0, $bestValue$01$i10 = 0.0, $i$01$i = 0, $i$02$i = 0, $i$02$i9 = 0, $i$034 = 0, $i1$035 = 0, $iter$045 = 0, $iter$1 = 0, $saveA = 0, $saveB = 0, $simplex = 0, $transformA = 0, $transformB = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $transformA = sp + 152 | 0;
 $transformB = sp + 136 | 0;
 $simplex = sp + 24 | 0;
 $saveA = sp + 12 | 0;
 $saveB = sp;
 HEAP32[20528] = (HEAP32[20528] | 0) + 1;
 $3 = $input + 56 | 0;
 HEAP32[$transformA + 0 >> 2] = HEAP32[$3 + 0 >> 2];
 HEAP32[$transformA + 4 >> 2] = HEAP32[$3 + 4 >> 2];
 HEAP32[$transformA + 8 >> 2] = HEAP32[$3 + 8 >> 2];
 HEAP32[$transformA + 12 >> 2] = HEAP32[$3 + 12 >> 2];
 $4 = $input + 72 | 0;
 HEAP32[$transformB + 0 >> 2] = HEAP32[$4 + 0 >> 2];
 HEAP32[$transformB + 4 >> 2] = HEAP32[$4 + 4 >> 2];
 HEAP32[$transformB + 8 >> 2] = HEAP32[$4 + 8 >> 2];
 HEAP32[$transformB + 12 >> 2] = HEAP32[$4 + 12 >> 2];
 __ZN9b2Simplex9ReadCacheEPK14b2SimplexCachePK15b2DistanceProxyRK11b2TransformS5_S8_($simplex, $cache, $input, $transformA, $input + 28 | 0, $transformB);
 $5 = $simplex + 108 | 0;
 $6 = $simplex + 16 | 0;
 $7 = $simplex + 20 | 0;
 $9 = +HEAPF32[$transformA + 12 >> 2];
 $11 = +HEAPF32[$transformA + 8 >> 2];
 $12 = $input + 16 | 0;
 $13 = $input + 20 | 0;
 $14 = +HEAPF32[$transformA >> 2];
 $16 = +HEAPF32[$transformA + 4 >> 2];
 $18 = +HEAPF32[$transformB + 12 >> 2];
 $20 = +HEAPF32[$transformB + 8 >> 2];
 $21 = $input + 44 | 0;
 $22 = $input + 48 | 0;
 $23 = +HEAPF32[$transformB >> 2];
 $25 = +HEAPF32[$transformB + 4 >> 2];
 $26 = $simplex + 52 | 0;
 $27 = $simplex + 56 | 0;
 $28 = $simplex + 16 | 0;
 $29 = $simplex + 36 | 0;
 $30 = $simplex + 52 | 0;
 $31 = $simplex + 24 | 0;
 $32 = $simplex + 60 | 0;
 $33 = HEAP32[$5 >> 2] | 0;
 $iter$045 = 0;
 L1 : while (1) {
  $34 = ($33 | 0) > 0;
  if ($34) {
   $i$034 = 0;
   do {
    HEAP32[$saveA + ($i$034 << 2) >> 2] = HEAP32[$simplex + ($i$034 * 36 | 0) + 28 >> 2];
    HEAP32[$saveB + ($i$034 << 2) >> 2] = HEAP32[$simplex + ($i$034 * 36 | 0) + 32 >> 2];
    $i$034 = $i$034 + 1 | 0;
   } while (($i$034 | 0) != ($33 | 0));
  }
  do if (($33 | 0) == 3) {
   __ZN9b2Simplex6Solve3Ev($simplex);
   $$pr$pre = HEAP32[$5 >> 2] | 0;
   if (($$pr$pre | 0) == 1) label = 14; else if (!$$pr$pre) {
    label = 12;
    break L1;
   } else if (($$pr$pre | 0) == 3) {
    $iter$1 = $iter$045;
    label = 39;
    break L1;
   } else if (($$pr$pre | 0) == 2) label = 15; else {
    label = 13;
    break L1;
   }
  } else if (($33 | 0) == 1) label = 14; else if (($33 | 0) == 2) {
   $42 = $28;
   $48 = +HEAPF32[$42 >> 2];
   $49 = +HEAPF32[$42 + 4 >> 2];
   $50 = $30;
   $56 = +HEAPF32[$50 >> 2];
   $57 = +HEAPF32[$50 + 4 >> 2];
   $58 = $56 - $48;
   $59 = $57 - $49;
   $62 = $48 * $58 + $49 * $59;
   if ($62 >= -0.0) {
    HEAPF32[$31 >> 2] = 1.0;
    HEAP32[$5 >> 2] = 1;
    label = 14;
    break;
   }
   $66 = $56 * $58 + $57 * $59;
   if (!($66 <= 0.0)) {
    $69 = 1.0 / ($66 - $62);
    HEAPF32[$31 >> 2] = $66 * $69;
    HEAPF32[$32 >> 2] = -($62 * $69);
    HEAP32[$5 >> 2] = 2;
    label = 15;
    break;
   } else {
    HEAPF32[$32 >> 2] = 1.0;
    HEAP32[$5 >> 2] = 1;
    dest = $simplex + 0 | 0;
    src = $29 + 0 | 0;
    stop = dest + 36 | 0;
    do {
     HEAP32[dest >> 2] = HEAP32[src >> 2];
     dest = dest + 4 | 0;
     src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    label = 14;
    break;
   }
  } else {
   label = 10;
   break L1;
  } while (0);
  do if ((label | 0) == 14) {
   label = 0;
   $90 = -+HEAPF32[$6 >> 2];
   $92 = -+HEAPF32[$7 >> 2];
   $96 = 1;
  } else if ((label | 0) == 15) {
   label = 0;
   $78 = +HEAPF32[$6 >> 2];
   $79 = +HEAPF32[$26 >> 2] - $78;
   $81 = +HEAPF32[$7 >> 2];
   $82 = +HEAPF32[$27 >> 2] - $81;
   if ($78 * $82 - $79 * $81 > 0.0) {
    $90 = -$82;
    $92 = $79;
    $96 = 2;
    break;
   } else {
    $90 = $82;
    $92 = -$79;
    $96 = 2;
    break;
   }
  } while (0);
  if ($92 * $92 + $90 * $90 < 1.4210854715202004e-14) {
   $iter$1 = $iter$045;
   label = 39;
   break;
  }
  $95 = $simplex + ($96 * 36 | 0) | 0;
  $97 = -$90;
  $98 = -$92;
  $101 = $9 * $97 + $11 * $98;
  $104 = $9 * $98 - $11 * $97;
  $105 = HEAP32[$12 >> 2] | 0;
  $106 = HEAP32[$13 >> 2] | 0;
  if (($106 | 0) > 1) {
   $bestIndex$03$i = 0;
   $bestValue$01$i = $104 * +HEAPF32[$105 + 4 >> 2] + $101 * +HEAPF32[$105 >> 2];
   $i$02$i = 1;
   while (1) {
    $121 = $101 * +HEAPF32[$105 + ($i$02$i << 3) >> 2] + $104 * +HEAPF32[$105 + ($i$02$i << 3) + 4 >> 2];
    $122 = $121 > $bestValue$01$i;
    $bestIndex$03$i = $122 ? $i$02$i : $bestIndex$03$i;
    $i$02$i = $i$02$i + 1 | 0;
    if (($i$02$i | 0) == ($106 | 0)) break; else $bestValue$01$i = $122 ? $121 : $bestValue$01$i;
   }
   $124 = $simplex + ($96 * 36 | 0) + 28 | 0;
   HEAP32[$124 >> 2] = $bestIndex$03$i;
   if (($bestIndex$03$i | 0) > -1) {
    $209 = $124;
    $bestIndex$0$lcssa$i31 = $bestIndex$03$i;
   } else {
    label = 25;
    break;
   }
  } else {
   $108 = $simplex + ($96 * 36 | 0) + 28 | 0;
   HEAP32[$108 >> 2] = 0;
   $209 = $108;
   $bestIndex$0$lcssa$i31 = 0;
  }
  if (($106 | 0) <= ($bestIndex$0$lcssa$i31 | 0)) {
   label = 25;
   break;
  }
  $128 = +HEAPF32[$105 + ($bestIndex$0$lcssa$i31 << 3) >> 2];
  $131 = +HEAPF32[$105 + ($bestIndex$0$lcssa$i31 << 3) + 4 >> 2];
  $134 = $14 + ($9 * $128 - $11 * $131);
  $139 = +$134;
  $140 = +($128 * $11 + $9 * $131 + $16);
  $141 = $95;
  HEAPF32[$141 >> 2] = $139;
  HEAPF32[$141 + 4 >> 2] = $140;
  $147 = $90 * $18 + $92 * $20;
  $150 = $92 * $18 - $90 * $20;
  $151 = HEAP32[$21 >> 2] | 0;
  $152 = HEAP32[$22 >> 2] | 0;
  if (($152 | 0) > 1) {
   $bestIndex$03$i8 = 0;
   $bestValue$01$i10 = $150 * +HEAPF32[$151 + 4 >> 2] + $147 * +HEAPF32[$151 >> 2];
   $i$02$i9 = 1;
   while (1) {
    $167 = $147 * +HEAPF32[$151 + ($i$02$i9 << 3) >> 2] + $150 * +HEAPF32[$151 + ($i$02$i9 << 3) + 4 >> 2];
    $168 = $167 > $bestValue$01$i10;
    $bestIndex$03$i8 = $168 ? $i$02$i9 : $bestIndex$03$i8;
    $i$02$i9 = $i$02$i9 + 1 | 0;
    if (($i$02$i9 | 0) == ($152 | 0)) break; else $bestValue$01$i10 = $168 ? $167 : $bestValue$01$i10;
   }
   $170 = $simplex + ($96 * 36 | 0) + 32 | 0;
   HEAP32[$170 >> 2] = $bestIndex$03$i8;
   if (($bestIndex$03$i8 | 0) > -1) {
    $214 = $170;
    $bestIndex$0$lcssa$i1332 = $bestIndex$03$i8;
   } else {
    label = 32;
    break;
   }
  } else {
   $154 = $simplex + ($96 * 36 | 0) + 32 | 0;
   HEAP32[$154 >> 2] = 0;
   $214 = $154;
   $bestIndex$0$lcssa$i1332 = 0;
  }
  if (($152 | 0) <= ($bestIndex$0$lcssa$i1332 | 0)) {
   label = 32;
   break;
  }
  $175 = +HEAPF32[$151 + ($bestIndex$0$lcssa$i1332 << 3) >> 2];
  $178 = +HEAPF32[$151 + ($bestIndex$0$lcssa$i1332 << 3) + 4 >> 2];
  $181 = $23 + ($18 * $175 - $20 * $178);
  $186 = +$181;
  $187 = +($175 * $20 + $18 * $178 + $25);
  $188 = $simplex + ($96 * 36 | 0) + 8 | 0;
  HEAPF32[$188 >> 2] = $186;
  HEAPF32[$188 + 4 >> 2] = $187;
  $199 = +($181 - $134);
  $200 = +(+HEAPF32[$simplex + ($96 * 36 | 0) + 12 >> 2] - +HEAPF32[$simplex + ($96 * 36 | 0) + 4 >> 2]);
  $201 = $simplex + ($96 * 36 | 0) + 16 | 0;
  HEAPF32[$201 >> 2] = $199;
  HEAPF32[$201 + 4 >> 2] = $200;
  $205 = $iter$045 + 1 | 0;
  HEAP32[20530] = (HEAP32[20530] | 0) + 1;
  if ($34) {
   $208 = HEAP32[$209 >> 2] | 0;
   $i1$035 = 0;
   do {
    if (($208 | 0) == (HEAP32[$saveA + ($i1$035 << 2) >> 2] | 0)) if ((HEAP32[$214 >> 2] | 0) == (HEAP32[$saveB + ($i1$035 << 2) >> 2] | 0)) {
     $iter$1 = $205;
     label = 39;
     break L1;
    }
    $i1$035 = $i1$035 + 1 | 0;
   } while (($i1$035 | 0) < ($33 | 0));
  }
  $33 = (HEAP32[$5 >> 2] | 0) + 1 | 0;
  HEAP32[$5 >> 2] = $33;
  if (($205 | 0) >= 20) {
   $iter$1 = $205;
   label = 39;
   break;
  } else $iter$045 = $205;
 }
 if ((label | 0) == 10) ___assert_fail(90768, 82176, 498, 82240); else if ((label | 0) == 12) ___assert_fail(90768, 82176, 195, 82296); else if ((label | 0) == 13) ___assert_fail(90768, 82176, 208, 82296); else if ((label | 0) == 25) ___assert_fail(90792, 90824, 103, 90888); else if ((label | 0) == 32) ___assert_fail(90792, 90824, 103, 90888); else if ((label | 0) == 39) {
  $223 = HEAP32[20532] | 0;
  HEAP32[20532] = ($223 | 0) > ($iter$1 | 0) ? $223 : $iter$1;
  $226 = $output + 8 | 0;
  __ZNK9b2Simplex16GetWitnessPointsEP6b2Vec2S1_($simplex, $output, $226);
  $229 = +HEAPF32[$output >> 2] - +HEAPF32[$226 >> 2];
  $230 = $output + 4 | 0;
  $232 = $output + 12 | 0;
  $234 = +HEAPF32[$230 >> 2] - +HEAPF32[$232 >> 2];
  $239 = $output + 16 | 0;
  HEAPF32[$239 >> 2] = +Math_sqrt(+($229 * $229 + $234 * $234));
  HEAP32[$output + 20 >> 2] = $iter$1;
  $241 = HEAP32[$5 >> 2] | 0;
  if (!$241) ___assert_fail(90768, 82176, 247, 82256); else if (($241 | 0) == 1) $$0$i4 = 0.0; else if (($241 | 0) == 3) {
   $253 = +HEAPF32[$6 >> 2];
   $256 = +HEAPF32[$7 >> 2];
   $$0$i4 = (+HEAPF32[$26 >> 2] - $253) * (+HEAPF32[$simplex + 92 >> 2] - $256) - (+HEAPF32[$27 >> 2] - $256) * (+HEAPF32[$simplex + 88 >> 2] - $253);
  } else if (($241 | 0) == 2) {
   $244 = +HEAPF32[$6 >> 2] - +HEAPF32[$26 >> 2];
   $247 = +HEAPF32[$7 >> 2] - +HEAPF32[$27 >> 2];
   $$0$i4 = +Math_sqrt(+($244 * $244 + $247 * $247));
  } else ___assert_fail(90768, 82176, 260, 82256);
  HEAPF32[$cache >> 2] = $$0$i4;
  HEAP16[$cache + 4 >> 1] = $241;
  $i$01$i = 0;
  do {
   HEAP8[$cache + $i$01$i + 6 >> 0] = HEAP32[$simplex + ($i$01$i * 36 | 0) + 28 >> 2];
   HEAP8[$cache + $i$01$i + 9 >> 0] = HEAP32[$simplex + ($i$01$i * 36 | 0) + 32 >> 2];
   $i$01$i = $i$01$i + 1 | 0;
  } while (($i$01$i | 0) < ($241 | 0));
  if (!(HEAP8[$input + 88 >> 0] | 0)) {
   STACKTOP = sp;
   return;
  }
  $283 = +HEAPF32[$input + 24 >> 2];
  $285 = +HEAPF32[$input + 52 >> 2];
  $286 = +HEAPF32[$239 >> 2];
  $287 = $283 + $285;
  if (!($286 > $287 & $286 > 1.1920928955078125e-07)) {
   $323 = +((+HEAPF32[$output >> 2] + +HEAPF32[$226 >> 2]) * .5);
   $324 = +((+HEAPF32[$230 >> 2] + +HEAPF32[$232 >> 2]) * .5);
   $325 = $output;
   HEAPF32[$325 >> 2] = $323;
   HEAPF32[$325 + 4 >> 2] = $324;
   $329 = $226;
   HEAPF32[$329 >> 2] = $323;
   HEAPF32[$329 + 4 >> 2] = $324;
   HEAPF32[$239 >> 2] = 0.0;
   STACKTOP = sp;
   return;
  }
  HEAPF32[$239 >> 2] = $286 - $287;
  $291 = +HEAPF32[$226 >> 2];
  $292 = +HEAPF32[$output >> 2];
  $293 = $291 - $292;
  $294 = +HEAPF32[$232 >> 2];
  $295 = +HEAPF32[$230 >> 2];
  $296 = $294 - $295;
  $300 = +Math_sqrt(+($293 * $293 + $296 * $296));
  if ($300 < 1.1920928955078125e-07) {
   $306 = $293;
   $308 = $296;
  } else {
   $302 = 1.0 / $300;
   $306 = $293 * $302;
   $308 = $296 * $302;
  }
  HEAPF32[$output >> 2] = $283 * $306 + $292;
  HEAPF32[$230 >> 2] = $283 * $308 + $295;
  HEAPF32[$226 >> 2] = $291 - $285 * $306;
  HEAPF32[$232 >> 2] = $294 - $285 * $308;
  STACKTOP = sp;
  return;
 }
}

function __ZN13b2DynamicTree7BalanceEi($this, $iA) {
 $this = $this | 0;
 $iA = $iA | 0;
 var $$0 = 0, $10 = 0, $105 = 0.0, $107 = 0.0, $11 = 0, $111 = 0.0, $113 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0, $122 = 0, $123 = 0, $126 = 0, $127 = 0, $131 = 0.0, $132 = 0.0, $134 = 0.0, $136 = 0.0, $138 = 0.0, $14 = 0, $141 = 0.0, $142 = 0.0, $143 = 0, $149 = 0.0, $151 = 0.0, $155 = 0.0, $157 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0, $166 = 0.0, $170 = 0.0, $172 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0, $18 = 0, $183 = 0.0, $185 = 0.0, $189 = 0.0, $19 = 0, $191 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $204 = 0, $205 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $219 = 0, $22 = 0, $221 = 0, $222 = 0, $224 = 0, $227 = 0, $230 = 0, $232 = 0, $236 = 0.0, $237 = 0.0, $239 = 0.0, $24 = 0, $241 = 0.0, $243 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0, $254 = 0.0, $256 = 0.0, $26 = 0, $260 = 0.0, $262 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0, $27 = 0, $271 = 0.0, $275 = 0.0, $277 = 0.0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0, $288 = 0.0, $29 = 0, $290 = 0.0, $294 = 0.0, $296 = 0.0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0, $305 = 0, $306 = 0, $309 = 0, $31 = 0, $310 = 0, $314 = 0.0, $315 = 0.0, $317 = 0.0, $319 = 0.0, $321 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0, $332 = 0.0, $334 = 0.0, $338 = 0.0, $340 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0, $349 = 0.0, $353 = 0.0, $355 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0, $360 = 0, $366 = 0.0, $368 = 0.0, $372 = 0.0, $374 = 0.0, $377 = 0.0, $378 = 0.0, $379 = 0, $38 = 0, $383 = 0, $384 = 0, $387 = 0, $388 = 0, $39 = 0, $4 = 0, $41 = 0, $44 = 0, $47 = 0, $49 = 0, $5 = 0, $53 = 0.0, $54 = 0.0, $56 = 0.0, $58 = 0.0, $60 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $7 = 0, $71 = 0.0, $73 = 0.0, $77 = 0.0, $79 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $88 = 0.0, $92 = 0.0, $94 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, $storemerge$in = 0, $storemerge1$in = 0;
 if (($iA | 0) == -1) ___assert_fail(90328, 90016, 379, 90344);
 $2 = HEAP32[$this + 4 >> 2] | 0;
 $3 = $2 + ($iA * 36 | 0) | 0;
 $4 = $2 + ($iA * 36 | 0) + 24 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 if (($5 | 0) == -1) {
  $$0 = $iA;
  return $$0 | 0;
 }
 $7 = $2 + ($iA * 36 | 0) + 32 | 0;
 if ((HEAP32[$7 >> 2] | 0) < 2) {
  $$0 = $iA;
  return $$0 | 0;
 }
 $10 = $2 + ($iA * 36 | 0) + 28 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 if (($5 | 0) <= -1) ___assert_fail(90352, 90016, 389, 90344);
 $14 = HEAP32[$this + 12 >> 2] | 0;
 if (($5 | 0) >= ($14 | 0)) ___assert_fail(90352, 90016, 389, 90344);
 if (!(($11 | 0) > -1 & ($11 | 0) < ($14 | 0))) ___assert_fail(90384, 90016, 390, 90344);
 $18 = $2 + ($5 * 36 | 0) | 0;
 $19 = $2 + ($11 * 36 | 0) | 0;
 $20 = $2 + ($11 * 36 | 0) + 32 | 0;
 $22 = $2 + ($5 * 36 | 0) + 32 | 0;
 $24 = (HEAP32[$20 >> 2] | 0) - (HEAP32[$22 >> 2] | 0) | 0;
 if (($24 | 0) > 1) {
  $26 = $2 + ($11 * 36 | 0) + 24 | 0;
  $27 = HEAP32[$26 >> 2] | 0;
  $28 = $2 + ($11 * 36 | 0) + 28 | 0;
  $29 = HEAP32[$28 >> 2] | 0;
  $30 = $2 + ($27 * 36 | 0) | 0;
  $31 = $2 + ($29 * 36 | 0) | 0;
  if (!(($27 | 0) > -1 & ($27 | 0) < ($14 | 0))) ___assert_fail(90416, 90016, 404, 90344);
  if (!(($29 | 0) > -1 & ($29 | 0) < ($14 | 0))) ___assert_fail(90448, 90016, 405, 90344);
  HEAP32[$26 >> 2] = $iA;
  $36 = $2 + ($iA * 36 | 0) + 20 | 0;
  $38 = $2 + ($11 * 36 | 0) + 20 | 0;
  HEAP32[$38 >> 2] = HEAP32[$36 >> 2];
  HEAP32[$36 >> 2] = $11;
  $39 = HEAP32[$38 >> 2] | 0;
  do if (($39 | 0) == -1) HEAP32[$this >> 2] = $11; else {
   $41 = $2 + ($39 * 36 | 0) + 24 | 0;
   if ((HEAP32[$41 >> 2] | 0) == ($iA | 0)) {
    HEAP32[$41 >> 2] = $11;
    break;
   }
   $44 = $2 + ($39 * 36 | 0) + 28 | 0;
   if ((HEAP32[$44 >> 2] | 0) == ($iA | 0)) {
    HEAP32[$44 >> 2] = $11;
    break;
   } else ___assert_fail(90480, 90016, 421, 90344);
  } while (0);
  $47 = $2 + ($27 * 36 | 0) + 32 | 0;
  $49 = $2 + ($29 * 36 | 0) + 32 | 0;
  if ((HEAP32[$47 >> 2] | 0) > (HEAP32[$49 >> 2] | 0)) {
   HEAP32[$28 >> 2] = $27;
   HEAP32[$10 >> 2] = $29;
   HEAP32[$2 + ($29 * 36 | 0) + 20 >> 2] = $iA;
   $53 = +HEAPF32[$18 >> 2];
   $54 = +HEAPF32[$31 >> 2];
   $56 = $53 < $54 ? $53 : $54;
   $58 = +HEAPF32[$2 + ($5 * 36 | 0) + 4 >> 2];
   $60 = +HEAPF32[$2 + ($29 * 36 | 0) + 4 >> 2];
   $63 = +$56;
   $64 = +($58 < $60 ? $58 : $60);
   $65 = $3;
   HEAPF32[$65 >> 2] = $63;
   HEAPF32[$65 + 4 >> 2] = $64;
   $71 = +HEAPF32[$2 + ($5 * 36 | 0) + 8 >> 2];
   $73 = +HEAPF32[$2 + ($29 * 36 | 0) + 8 >> 2];
   $77 = +HEAPF32[$2 + ($5 * 36 | 0) + 12 >> 2];
   $79 = +HEAPF32[$2 + ($29 * 36 | 0) + 12 >> 2];
   $82 = +($71 > $73 ? $71 : $73);
   $83 = +($77 > $79 ? $77 : $79);
   $84 = $2 + ($iA * 36 | 0) + 8 | 0;
   HEAPF32[$84 >> 2] = $82;
   HEAPF32[$84 + 4 >> 2] = $83;
   $88 = +HEAPF32[$30 >> 2];
   $92 = +HEAPF32[$2 + ($iA * 36 | 0) + 4 >> 2];
   $94 = +HEAPF32[$2 + ($27 * 36 | 0) + 4 >> 2];
   $97 = +($56 < $88 ? $56 : $88);
   $98 = +($92 < $94 ? $92 : $94);
   $99 = $19;
   HEAPF32[$99 >> 2] = $97;
   HEAPF32[$99 + 4 >> 2] = $98;
   $105 = +HEAPF32[$2 + ($iA * 36 | 0) + 8 >> 2];
   $107 = +HEAPF32[$2 + ($27 * 36 | 0) + 8 >> 2];
   $111 = +HEAPF32[$2 + ($iA * 36 | 0) + 12 >> 2];
   $113 = +HEAPF32[$2 + ($27 * 36 | 0) + 12 >> 2];
   $116 = +($105 > $107 ? $105 : $107);
   $117 = +($111 > $113 ? $111 : $113);
   $118 = $2 + ($11 * 36 | 0) + 8 | 0;
   HEAPF32[$118 >> 2] = $116;
   HEAPF32[$118 + 4 >> 2] = $117;
   $122 = HEAP32[$22 >> 2] | 0;
   $123 = HEAP32[$49 >> 2] | 0;
   $126 = (($122 | 0) > ($123 | 0) ? $122 : $123) + 1 | 0;
   HEAP32[$7 >> 2] = $126;
   $127 = HEAP32[$47 >> 2] | 0;
   $storemerge1$in = ($126 | 0) > ($127 | 0) ? $126 : $127;
  } else {
   HEAP32[$28 >> 2] = $29;
   HEAP32[$10 >> 2] = $27;
   HEAP32[$2 + ($27 * 36 | 0) + 20 >> 2] = $iA;
   $131 = +HEAPF32[$18 >> 2];
   $132 = +HEAPF32[$30 >> 2];
   $134 = $131 < $132 ? $131 : $132;
   $136 = +HEAPF32[$2 + ($5 * 36 | 0) + 4 >> 2];
   $138 = +HEAPF32[$2 + ($27 * 36 | 0) + 4 >> 2];
   $141 = +$134;
   $142 = +($136 < $138 ? $136 : $138);
   $143 = $3;
   HEAPF32[$143 >> 2] = $141;
   HEAPF32[$143 + 4 >> 2] = $142;
   $149 = +HEAPF32[$2 + ($5 * 36 | 0) + 8 >> 2];
   $151 = +HEAPF32[$2 + ($27 * 36 | 0) + 8 >> 2];
   $155 = +HEAPF32[$2 + ($5 * 36 | 0) + 12 >> 2];
   $157 = +HEAPF32[$2 + ($27 * 36 | 0) + 12 >> 2];
   $160 = +($149 > $151 ? $149 : $151);
   $161 = +($155 > $157 ? $155 : $157);
   $162 = $2 + ($iA * 36 | 0) + 8 | 0;
   HEAPF32[$162 >> 2] = $160;
   HEAPF32[$162 + 4 >> 2] = $161;
   $166 = +HEAPF32[$31 >> 2];
   $170 = +HEAPF32[$2 + ($iA * 36 | 0) + 4 >> 2];
   $172 = +HEAPF32[$2 + ($29 * 36 | 0) + 4 >> 2];
   $175 = +($134 < $166 ? $134 : $166);
   $176 = +($170 < $172 ? $170 : $172);
   $177 = $19;
   HEAPF32[$177 >> 2] = $175;
   HEAPF32[$177 + 4 >> 2] = $176;
   $183 = +HEAPF32[$2 + ($iA * 36 | 0) + 8 >> 2];
   $185 = +HEAPF32[$2 + ($29 * 36 | 0) + 8 >> 2];
   $189 = +HEAPF32[$2 + ($iA * 36 | 0) + 12 >> 2];
   $191 = +HEAPF32[$2 + ($29 * 36 | 0) + 12 >> 2];
   $194 = +($183 > $185 ? $183 : $185);
   $195 = +($189 > $191 ? $189 : $191);
   $196 = $2 + ($11 * 36 | 0) + 8 | 0;
   HEAPF32[$196 >> 2] = $194;
   HEAPF32[$196 + 4 >> 2] = $195;
   $200 = HEAP32[$22 >> 2] | 0;
   $201 = HEAP32[$47 >> 2] | 0;
   $204 = (($200 | 0) > ($201 | 0) ? $200 : $201) + 1 | 0;
   HEAP32[$7 >> 2] = $204;
   $205 = HEAP32[$49 >> 2] | 0;
   $storemerge1$in = ($204 | 0) > ($205 | 0) ? $204 : $205;
  }
  HEAP32[$20 >> 2] = $storemerge1$in + 1;
  $$0 = $11;
  return $$0 | 0;
 }
 if (($24 | 0) >= -1) {
  $$0 = $iA;
  return $$0 | 0;
 }
 $209 = $2 + ($5 * 36 | 0) + 24 | 0;
 $210 = HEAP32[$209 >> 2] | 0;
 $211 = $2 + ($5 * 36 | 0) + 28 | 0;
 $212 = HEAP32[$211 >> 2] | 0;
 $213 = $2 + ($210 * 36 | 0) | 0;
 $214 = $2 + ($212 * 36 | 0) | 0;
 if (!(($210 | 0) > -1 & ($210 | 0) < ($14 | 0))) ___assert_fail(90512, 90016, 464, 90344);
 if (!(($212 | 0) > -1 & ($212 | 0) < ($14 | 0))) ___assert_fail(90544, 90016, 465, 90344);
 HEAP32[$209 >> 2] = $iA;
 $219 = $2 + ($iA * 36 | 0) + 20 | 0;
 $221 = $2 + ($5 * 36 | 0) + 20 | 0;
 HEAP32[$221 >> 2] = HEAP32[$219 >> 2];
 HEAP32[$219 >> 2] = $5;
 $222 = HEAP32[$221 >> 2] | 0;
 do if (($222 | 0) == -1) HEAP32[$this >> 2] = $5; else {
  $224 = $2 + ($222 * 36 | 0) + 24 | 0;
  if ((HEAP32[$224 >> 2] | 0) == ($iA | 0)) {
   HEAP32[$224 >> 2] = $5;
   break;
  }
  $227 = $2 + ($222 * 36 | 0) + 28 | 0;
  if ((HEAP32[$227 >> 2] | 0) == ($iA | 0)) {
   HEAP32[$227 >> 2] = $5;
   break;
  } else ___assert_fail(90576, 90016, 481, 90344);
 } while (0);
 $230 = $2 + ($210 * 36 | 0) + 32 | 0;
 $232 = $2 + ($212 * 36 | 0) + 32 | 0;
 if ((HEAP32[$230 >> 2] | 0) > (HEAP32[$232 >> 2] | 0)) {
  HEAP32[$211 >> 2] = $210;
  HEAP32[$4 >> 2] = $212;
  HEAP32[$2 + ($212 * 36 | 0) + 20 >> 2] = $iA;
  $236 = +HEAPF32[$19 >> 2];
  $237 = +HEAPF32[$214 >> 2];
  $239 = $236 < $237 ? $236 : $237;
  $241 = +HEAPF32[$2 + ($11 * 36 | 0) + 4 >> 2];
  $243 = +HEAPF32[$2 + ($212 * 36 | 0) + 4 >> 2];
  $246 = +$239;
  $247 = +($241 < $243 ? $241 : $243);
  $248 = $3;
  HEAPF32[$248 >> 2] = $246;
  HEAPF32[$248 + 4 >> 2] = $247;
  $254 = +HEAPF32[$2 + ($11 * 36 | 0) + 8 >> 2];
  $256 = +HEAPF32[$2 + ($212 * 36 | 0) + 8 >> 2];
  $260 = +HEAPF32[$2 + ($11 * 36 | 0) + 12 >> 2];
  $262 = +HEAPF32[$2 + ($212 * 36 | 0) + 12 >> 2];
  $265 = +($254 > $256 ? $254 : $256);
  $266 = +($260 > $262 ? $260 : $262);
  $267 = $2 + ($iA * 36 | 0) + 8 | 0;
  HEAPF32[$267 >> 2] = $265;
  HEAPF32[$267 + 4 >> 2] = $266;
  $271 = +HEAPF32[$213 >> 2];
  $275 = +HEAPF32[$2 + ($iA * 36 | 0) + 4 >> 2];
  $277 = +HEAPF32[$2 + ($210 * 36 | 0) + 4 >> 2];
  $280 = +($239 < $271 ? $239 : $271);
  $281 = +($275 < $277 ? $275 : $277);
  $282 = $18;
  HEAPF32[$282 >> 2] = $280;
  HEAPF32[$282 + 4 >> 2] = $281;
  $288 = +HEAPF32[$2 + ($iA * 36 | 0) + 8 >> 2];
  $290 = +HEAPF32[$2 + ($210 * 36 | 0) + 8 >> 2];
  $294 = +HEAPF32[$2 + ($iA * 36 | 0) + 12 >> 2];
  $296 = +HEAPF32[$2 + ($210 * 36 | 0) + 12 >> 2];
  $299 = +($288 > $290 ? $288 : $290);
  $300 = +($294 > $296 ? $294 : $296);
  $301 = $2 + ($5 * 36 | 0) + 8 | 0;
  HEAPF32[$301 >> 2] = $299;
  HEAPF32[$301 + 4 >> 2] = $300;
  $305 = HEAP32[$20 >> 2] | 0;
  $306 = HEAP32[$232 >> 2] | 0;
  $309 = (($305 | 0) > ($306 | 0) ? $305 : $306) + 1 | 0;
  HEAP32[$7 >> 2] = $309;
  $310 = HEAP32[$230 >> 2] | 0;
  $storemerge$in = ($309 | 0) > ($310 | 0) ? $309 : $310;
 } else {
  HEAP32[$211 >> 2] = $212;
  HEAP32[$4 >> 2] = $210;
  HEAP32[$2 + ($210 * 36 | 0) + 20 >> 2] = $iA;
  $314 = +HEAPF32[$19 >> 2];
  $315 = +HEAPF32[$213 >> 2];
  $317 = $314 < $315 ? $314 : $315;
  $319 = +HEAPF32[$2 + ($11 * 36 | 0) + 4 >> 2];
  $321 = +HEAPF32[$2 + ($210 * 36 | 0) + 4 >> 2];
  $324 = +$317;
  $325 = +($319 < $321 ? $319 : $321);
  $326 = $3;
  HEAPF32[$326 >> 2] = $324;
  HEAPF32[$326 + 4 >> 2] = $325;
  $332 = +HEAPF32[$2 + ($11 * 36 | 0) + 8 >> 2];
  $334 = +HEAPF32[$2 + ($210 * 36 | 0) + 8 >> 2];
  $338 = +HEAPF32[$2 + ($11 * 36 | 0) + 12 >> 2];
  $340 = +HEAPF32[$2 + ($210 * 36 | 0) + 12 >> 2];
  $343 = +($332 > $334 ? $332 : $334);
  $344 = +($338 > $340 ? $338 : $340);
  $345 = $2 + ($iA * 36 | 0) + 8 | 0;
  HEAPF32[$345 >> 2] = $343;
  HEAPF32[$345 + 4 >> 2] = $344;
  $349 = +HEAPF32[$214 >> 2];
  $353 = +HEAPF32[$2 + ($iA * 36 | 0) + 4 >> 2];
  $355 = +HEAPF32[$2 + ($212 * 36 | 0) + 4 >> 2];
  $358 = +($317 < $349 ? $317 : $349);
  $359 = +($353 < $355 ? $353 : $355);
  $360 = $18;
  HEAPF32[$360 >> 2] = $358;
  HEAPF32[$360 + 4 >> 2] = $359;
  $366 = +HEAPF32[$2 + ($iA * 36 | 0) + 8 >> 2];
  $368 = +HEAPF32[$2 + ($212 * 36 | 0) + 8 >> 2];
  $372 = +HEAPF32[$2 + ($iA * 36 | 0) + 12 >> 2];
  $374 = +HEAPF32[$2 + ($212 * 36 | 0) + 12 >> 2];
  $377 = +($366 > $368 ? $366 : $368);
  $378 = +($372 > $374 ? $372 : $374);
  $379 = $2 + ($5 * 36 | 0) + 8 | 0;
  HEAPF32[$379 >> 2] = $377;
  HEAPF32[$379 + 4 >> 2] = $378;
  $383 = HEAP32[$20 >> 2] | 0;
  $384 = HEAP32[$230 >> 2] | 0;
  $387 = (($383 | 0) > ($384 | 0) ? $383 : $384) + 1 | 0;
  HEAP32[$7 >> 2] = $387;
  $388 = HEAP32[$232 >> 2] | 0;
  $storemerge$in = ($387 | 0) > ($388 | 0) ? $387 : $388;
 }
 HEAP32[$22 >> 2] = $storemerge$in + 1;
 $$0 = $5;
 return $$0 | 0;
}

function _exp2reg($fs, $e, $reg) {
 $fs = $fs | 0;
 $e = $e | 0;
 $reg = $reg | 0;
 var $$0$i$i = 0, $$0$i$i$us = 0, $$0$i$i21 = 0, $$0$i$i21$us = 0, $$0$i$i46 = 0, $$0$i$i61 = 0, $$014$i = 0, $$014$i12 = 0, $$02$i = 0, $$02$i$us = 0, $$02$i42 = 0, $$pre1$i63 = 0, $$pre93 = 0, $100 = 0, $102 = 0, $104 = 0, $105 = 0, $107 = 0, $11 = 0, $110 = 0, $112 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $129 = 0, $130 = 0, $132 = 0, $137 = 0, $138 = 0, $14 = 0, $144 = 0, $153 = 0, $16 = 0, $163 = 0, $173 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $181 = 0, $186 = 0, $187 = 0, $193 = 0, $195 = 0, $2 = 0, $206 = 0, $215 = 0, $216 = 0, $218 = 0, $223 = 0, $224 = 0, $230 = 0, $238 = 0, $241 = 0, $242 = 0, $248 = 0, $25 = 0, $251 = 0, $252 = 0, $258 = 0, $26 = 0, $27 = 0, $30 = 0, $33 = 0, $39 = 0, $4 = 0, $43 = 0, $49 = 0, $52 = 0, $58 = 0, $6 = 0, $62 = 0, $69 = 0, $70 = 0, $73 = 0, $74 = 0, $76 = 0, $79 = 0, $8 = 0, $81 = 0, $9 = 0, $90 = 0, $92 = 0, $93 = 0, $95 = 0, $98 = 0, $fs$idx$val$idx$val$i = 0, $fs$idx$val$idx$val$i$i = 0, $fs$idx$val$idx$val$i$i31 = 0, $fs$idx$val$idx$val$i45$pre = 0, $fs$idx$val$idx$val$i5$us$pre = 0, $fs$idx2$val$idx$val$i = 0, $fs$idx2$val$idx$val$i10 = 0, $list$0$i = 0, $list$0$i$i = 0, $list$0$i$i33 = 0, $p_f$0 = 0, $p_t$0 = 0, $storemerge = 0, $storemerge$i = 0, $storemerge$i66 = 0, $storemerge95 = 0, $storemerge96 = 0, label = 0;
 _discharge2reg($fs, $e, $reg);
 $2 = $e + 8 | 0;
 do if ((HEAP32[$e >> 2] | 0) == 11) {
  $4 = HEAP32[$e + 4 >> 2] | 0;
  if (($4 | 0) != -1) {
   $6 = HEAP32[$2 >> 2] | 0;
   if (($6 | 0) == -1) {
    HEAP32[$2 >> 2] = $4;
    break;
   }
   $fs$idx$val$idx$val$i = HEAP32[(HEAP32[$fs >> 2] | 0) + 48 >> 2] | 0;
   $list$0$i = $6;
   while (1) {
    $8 = $fs$idx$val$idx$val$i + ($list$0$i << 2) | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $11 = ($9 >>> 14) + -131071 | 0;
    if (($11 | 0) == -1) break;
    $14 = $list$0$i + 1 + $11 | 0;
    if (($14 | 0) == -1) break; else $list$0$i = $14;
   }
   $16 = $4 + ~$list$0$i | 0;
   if (((($16 | 0) > -1 ? $16 : 0 - $16 | 0) | 0) > 131071) _luaX_syntaxerror(HEAP32[$fs + 8 >> 2] | 0, 65576); else {
    HEAP32[$8 >> 2] = ($16 << 14) + 2147467264 | $9 & 16383;
    break;
   }
  }
 } while (0);
 $25 = HEAP32[$2 >> 2] | 0;
 $26 = $e + 12 | 0;
 $27 = HEAP32[$26 >> 2] | 0;
 if (($25 | 0) == ($27 | 0)) {
  HEAP32[$2 >> 2] = -1;
  HEAP32[$26 >> 2] = -1;
  $258 = $e + 4 | 0;
  HEAP32[$258 >> 2] = $reg;
  HEAP32[$e >> 2] = 7;
  return;
 }
 L18 : do if (($25 | 0) == -1) label = 20; else {
  $fs$idx2$val$idx$val$i = HEAP32[(HEAP32[$fs >> 2] | 0) + 48 >> 2] | 0;
  $$014$i = $25;
  while (1) {
   $30 = $fs$idx2$val$idx$val$i + ($$014$i << 2) | 0;
   if (($$014$i | 0) > 0) {
    $33 = HEAP32[$fs$idx2$val$idx$val$i + ($$014$i + -1 << 2) >> 2] | 0;
    if ((HEAP8[59568 + ($33 & 63) >> 0] | 0) < 0) $39 = $33; else label = 16;
   } else label = 16;
   if ((label | 0) == 16) {
    label = 0;
    $39 = HEAP32[$30 >> 2] | 0;
   }
   if (($39 & 63 | 0) != 35) {
    label = 28;
    break L18;
   }
   $43 = ((HEAP32[$30 >> 2] | 0) >>> 14) + -131071 | 0;
   if (($43 | 0) == -1) {
    label = 20;
    break L18;
   }
   $$014$i = $$014$i + 1 + $43 | 0;
   if (($$014$i | 0) == -1) {
    label = 20;
    break;
   }
  }
 } while (0);
 L29 : do if ((label | 0) == 20) if (($27 | 0) == -1) {
  $p_f$0 = -1;
  $p_t$0 = -1;
 } else {
  $fs$idx2$val$idx$val$i10 = HEAP32[(HEAP32[$fs >> 2] | 0) + 48 >> 2] | 0;
  $$014$i12 = $27;
  while (1) {
   $49 = $fs$idx2$val$idx$val$i10 + ($$014$i12 << 2) | 0;
   if (($$014$i12 | 0) > 0) {
    $52 = HEAP32[$fs$idx2$val$idx$val$i10 + ($$014$i12 + -1 << 2) >> 2] | 0;
    if ((HEAP8[59568 + ($52 & 63) >> 0] | 0) < 0) $58 = $52; else label = 24;
   } else label = 24;
   if ((label | 0) == 24) {
    label = 0;
    $58 = HEAP32[$49 >> 2] | 0;
   }
   if (($58 & 63 | 0) != 35) {
    label = 28;
    break L29;
   }
   $62 = ((HEAP32[$49 >> 2] | 0) >>> 14) + -131071 | 0;
   if (($62 | 0) == -1) {
    $p_f$0 = -1;
    $p_t$0 = -1;
    break L29;
   }
   $$014$i12 = $$014$i12 + 1 + $62 | 0;
   if (($$014$i12 | 0) == -1) {
    $p_f$0 = -1;
    $p_t$0 = -1;
    break;
   }
  }
 } while (0);
 do if ((label | 0) == 28) {
  $$pre93 = $fs + 24 | 0;
  do if ((HEAP32[$e >> 2] | 0) == 11) $100 = -1; else {
   $69 = HEAP32[$$pre93 >> 2] | 0;
   HEAP32[$$pre93 >> 2] = -1;
   $70 = _luaK_code($fs, 2147450910) | 0;
   if (($69 | 0) == -1) $100 = $70; else if (($70 | 0) == -1) $100 = $69; else {
    $fs$idx$val$idx$val$i$i = HEAP32[(HEAP32[$fs >> 2] | 0) + 48 >> 2] | 0;
    $list$0$i$i = $70;
    while (1) {
     $73 = $fs$idx$val$idx$val$i$i + ($list$0$i$i << 2) | 0;
     $74 = HEAP32[$73 >> 2] | 0;
     $76 = ($74 >>> 14) + -131071 | 0;
     if (($76 | 0) == -1) break;
     $79 = $list$0$i$i + 1 + $76 | 0;
     if (($79 | 0) == -1) break; else $list$0$i$i = $79;
    }
    $81 = $69 + ~$list$0$i$i | 0;
    if (((($81 | 0) > -1 ? $81 : 0 - $81 | 0) | 0) > 131071) _luaX_syntaxerror(HEAP32[$fs + 8 >> 2] | 0, 65576); else {
     HEAP32[$73 >> 2] = ($81 << 14) + 2147467264 | $74 & 16383;
     $100 = $70;
     break;
    }
   }
  } while (0);
  $90 = $fs + 16 | 0;
  $92 = $fs + 20 | 0;
  HEAP32[$92 >> 2] = HEAP32[$90 >> 2];
  $93 = $reg << 6;
  $95 = _luaK_code($fs, $93 | 16387) | 0;
  HEAP32[$92 >> 2] = HEAP32[$90 >> 2];
  $98 = _luaK_code($fs, $93 | 8388611) | 0;
  HEAP32[$92 >> 2] = HEAP32[$90 >> 2];
  if (($100 | 0) == -1) {
   $p_f$0 = $95;
   $p_t$0 = $98;
  } else {
   $102 = HEAP32[$$pre93 >> 2] | 0;
   if (($102 | 0) == -1) {
    HEAP32[$$pre93 >> 2] = $100;
    $p_f$0 = $95;
    $p_t$0 = $98;
    break;
   }
   $fs$idx$val$idx$val$i$i31 = HEAP32[(HEAP32[$fs >> 2] | 0) + 48 >> 2] | 0;
   $list$0$i$i33 = $102;
   while (1) {
    $104 = $fs$idx$val$idx$val$i$i31 + ($list$0$i$i33 << 2) | 0;
    $105 = HEAP32[$104 >> 2] | 0;
    $107 = ($105 >>> 14) + -131071 | 0;
    if (($107 | 0) == -1) break;
    $110 = $list$0$i$i33 + 1 + $107 | 0;
    if (($110 | 0) == -1) break; else $list$0$i$i33 = $110;
   }
   $112 = $100 + ~$list$0$i$i33 | 0;
   if (((($112 | 0) > -1 ? $112 : 0 - $112 | 0) | 0) > 131071) _luaX_syntaxerror(HEAP32[$fs + 8 >> 2] | 0, 65576); else {
    HEAP32[$104 >> 2] = ($112 << 14) + 2147467264 | $105 & 16383;
    $p_f$0 = $95;
    $p_t$0 = $98;
    break;
   }
  }
 } while (0);
 $122 = HEAP32[$fs + 16 >> 2] | 0;
 HEAP32[$fs + 20 >> 2] = $122;
 $124 = HEAP32[$26 >> 2] | 0;
 L67 : do if (($124 | 0) != -1) {
  $126 = ($reg | 0) == 255;
  $128 = $reg << 6 & 16320;
  $fs$idx$val$idx$val$i45$pre = HEAP32[(HEAP32[$fs >> 2] | 0) + 48 >> 2] | 0;
  $$02$i42 = $124;
  while (1) {
   $129 = $fs$idx$val$idx$val$i45$pre + ($$02$i42 << 2) | 0;
   $130 = HEAP32[$129 >> 2] | 0;
   $132 = ($130 >>> 14) + -131071 | 0;
   if (($132 | 0) == -1) $$0$i$i46 = -1; else $$0$i$i46 = $$02$i42 + 1 + $132 | 0;
   if (($$02$i42 | 0) > 0) {
    $137 = $fs$idx$val$idx$val$i45$pre + ($$02$i42 + -1 << 2) | 0;
    $138 = HEAP32[$137 >> 2] | 0;
    if ((HEAP8[59568 + ($138 & 63) >> 0] | 0) < 0) {
     $$0$i$i61 = $137;
     $144 = $138;
    } else label = 52;
   } else label = 52;
   if ((label | 0) == 52) {
    label = 0;
    $$0$i$i61 = $129;
    $144 = $130;
   }
   if (($144 & 63 | 0) == 35) {
    $$pre1$i63 = $144 >>> 23;
    if ($126 | ($$pre1$i63 | 0) == ($reg | 0)) $storemerge$i66 = $144 & 8372224 | $$pre1$i63 << 6 | 34; else $storemerge$i66 = $144 & -16321 | $128;
    HEAP32[$$0$i$i61 >> 2] = $storemerge$i66;
    $153 = $122 + ~$$02$i42 | 0;
    if (((($153 | 0) > -1 ? $153 : 0 - $153 | 0) | 0) > 131071) {
     label = 58;
     break;
    }
    $storemerge = HEAP32[$129 >> 2] & 16383 | ($153 << 14) + 2147467264;
   } else {
    $163 = $p_f$0 + ~$$02$i42 | 0;
    if (((($163 | 0) > -1 ? $163 : 0 - $163 | 0) | 0) > 131071) {
     label = 61;
     break;
    }
    $storemerge = $130 & 16383 | ($163 << 14) + 2147467264;
   }
   HEAP32[$129 >> 2] = $storemerge;
   if (($$0$i$i46 | 0) == -1) break L67; else $$02$i42 = $$0$i$i46;
  }
  if ((label | 0) == 58) _luaX_syntaxerror(HEAP32[$fs + 8 >> 2] | 0, 65576); else if ((label | 0) == 61) _luaX_syntaxerror(HEAP32[$fs + 8 >> 2] | 0, 65576);
 } while (0);
 $173 = HEAP32[$2 >> 2] | 0;
 if (($173 | 0) == -1) {
  HEAP32[$2 >> 2] = -1;
  HEAP32[$26 >> 2] = -1;
  $258 = $e + 4 | 0;
  HEAP32[$258 >> 2] = $reg;
  HEAP32[$e >> 2] = 7;
  return;
 }
 $176 = $reg << 6;
 $177 = $176 & 16320;
 $fs$idx$val$idx$val$i5$us$pre = HEAP32[(HEAP32[$fs >> 2] | 0) + 48 >> 2] | 0;
 if (($reg | 0) == 255) {
  $$02$i$us = $173;
  while (1) {
   $178 = $fs$idx$val$idx$val$i5$us$pre + ($$02$i$us << 2) | 0;
   $179 = HEAP32[$178 >> 2] | 0;
   $181 = ($179 >>> 14) + -131071 | 0;
   if (($181 | 0) == -1) $$0$i$i$us = -1; else $$0$i$i$us = $$02$i$us + 1 + $181 | 0;
   if (($$02$i$us | 0) > 0) {
    $186 = $fs$idx$val$idx$val$i5$us$pre + ($$02$i$us + -1 << 2) | 0;
    $187 = HEAP32[$186 >> 2] | 0;
    if ((HEAP8[59568 + ($187 & 63) >> 0] | 0) < 0) {
     $$0$i$i21$us = $186;
     $193 = $187;
    } else label = 70;
   } else label = 70;
   if ((label | 0) == 70) {
    label = 0;
    $$0$i$i21$us = $178;
    $193 = $179;
   }
   if (($193 & 63 | 0) == 35) {
    HEAP32[$$0$i$i21$us >> 2] = $193 & 8372224 | $193 >>> 23 << 6 | 34;
    $206 = $122 + ~$$02$i$us | 0;
    if (((($206 | 0) > -1 ? $206 : 0 - $206 | 0) | 0) > 131071) {
     label = 87;
     break;
    }
    $storemerge96 = HEAP32[$178 >> 2] & 16383 | ($206 << 14) + 2147467264;
   } else {
    $195 = $p_t$0 + ~$$02$i$us | 0;
    if (((($195 | 0) > -1 ? $195 : 0 - $195 | 0) | 0) > 131071) {
     label = 90;
     break;
    }
    $storemerge96 = $179 & 16383 | ($195 << 14) + 2147467264;
   }
   HEAP32[$178 >> 2] = $storemerge96;
   if (($$0$i$i$us | 0) == -1) {
    label = 93;
    break;
   } else $$02$i$us = $$0$i$i$us;
  }
  if ((label | 0) == 87) {
   $241 = $fs + 8 | 0;
   $242 = HEAP32[$241 >> 2] | 0;
   _luaX_syntaxerror($242, 65576);
  } else if ((label | 0) == 90) {
   $251 = $fs + 8 | 0;
   $252 = HEAP32[$251 >> 2] | 0;
   _luaX_syntaxerror($252, 65576);
  } else if ((label | 0) == 93) {
   HEAP32[$2 >> 2] = -1;
   HEAP32[$26 >> 2] = -1;
   $258 = $e + 4 | 0;
   HEAP32[$258 >> 2] = $reg;
   HEAP32[$e >> 2] = 7;
   return;
  }
 } else $$02$i = $173;
 while (1) {
  $215 = $fs$idx$val$idx$val$i5$us$pre + ($$02$i << 2) | 0;
  $216 = HEAP32[$215 >> 2] | 0;
  $218 = ($216 >>> 14) + -131071 | 0;
  if (($218 | 0) == -1) $$0$i$i = -1; else $$0$i$i = $$02$i + 1 + $218 | 0;
  if (($$02$i | 0) > 0) {
   $223 = $fs$idx$val$idx$val$i5$us$pre + ($$02$i + -1 << 2) | 0;
   $224 = HEAP32[$223 >> 2] | 0;
   if ((HEAP8[59568 + ($224 & 63) >> 0] | 0) < 0) {
    $$0$i$i21 = $223;
    $230 = $224;
   } else label = 81;
  } else label = 81;
  if ((label | 0) == 81) {
   label = 0;
   $$0$i$i21 = $215;
   $230 = $216;
  }
  if (($230 & 63 | 0) == 35) {
   if (($230 >>> 23 | 0) == ($reg | 0)) $storemerge$i = $230 & 8372224 | $176 | 34; else $storemerge$i = $230 & -16321 | $177;
   HEAP32[$$0$i$i21 >> 2] = $storemerge$i;
   $238 = $122 + ~$$02$i | 0;
   if (((($238 | 0) > -1 ? $238 : 0 - $238 | 0) | 0) > 131071) {
    label = 87;
    break;
   }
   $storemerge95 = HEAP32[$215 >> 2] & 16383 | ($238 << 14) + 2147467264;
  } else {
   $248 = $p_t$0 + ~$$02$i | 0;
   if (((($248 | 0) > -1 ? $248 : 0 - $248 | 0) | 0) > 131071) {
    label = 90;
    break;
   }
   $storemerge95 = $216 & 16383 | ($248 << 14) + 2147467264;
  }
  HEAP32[$215 >> 2] = $storemerge95;
  if (($$0$i$i | 0) == -1) {
   label = 93;
   break;
  } else $$02$i = $$0$i$i;
 }
 if ((label | 0) == 87) {
  $241 = $fs + 8 | 0;
  $242 = HEAP32[$241 >> 2] | 0;
  _luaX_syntaxerror($242, 65576);
 } else if ((label | 0) == 90) {
  $251 = $fs + 8 | 0;
  $252 = HEAP32[$251 >> 2] | 0;
  _luaX_syntaxerror($252, 65576);
 } else if ((label | 0) == 93) {
  HEAP32[$2 >> 2] = -1;
  HEAP32[$26 >> 2] = -1;
  $258 = $e + 4 | 0;
  HEAP32[$258 >> 2] = $reg;
  HEAP32[$e >> 2] = 7;
  return;
 }
}

function _dispose_chunk($p, $psize) {
 $p = $p | 0;
 $psize = $psize | 0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$pre$phi51Z2D = 0, $$pre$phi53Z2D = 0, $$pre$phiZ2D = 0, $$sum18 = 0, $$sum21 = 0, $0 = 0, $10 = 0, $100 = 0, $106 = 0, $108 = 0, $109 = 0, $11 = 0, $115 = 0, $123 = 0, $128 = 0, $129 = 0, $132 = 0, $134 = 0, $136 = 0, $149 = 0, $15 = 0, $154 = 0, $156 = 0, $159 = 0, $161 = 0, $164 = 0, $167 = 0, $168 = 0, $170 = 0, $171 = 0, $173 = 0, $174 = 0, $176 = 0, $177 = 0, $18 = 0, $182 = 0, $183 = 0, $192 = 0, $197 = 0, $2 = 0, $20 = 0, $201 = 0, $207 = 0, $22 = 0, $222 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $231 = 0, $232 = 0, $238 = 0, $243 = 0, $244 = 0, $247 = 0, $249 = 0, $252 = 0, $257 = 0, $263 = 0, $267 = 0, $268 = 0, $275 = 0, $284 = 0, $287 = 0, $292 = 0, $299 = 0, $300 = 0, $301 = 0, $35 = 0, $40 = 0, $42 = 0, $45 = 0, $47 = 0, $5 = 0, $50 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $59 = 0, $60 = 0, $62 = 0, $63 = 0, $68 = 0, $69 = 0, $78 = 0, $83 = 0, $87 = 0, $9 = 0, $93 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $K20$045 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$044 = 0, $T$044$lcssa = 0;
 $0 = $p + $psize | 0;
 $2 = HEAP32[$p + 4 >> 2] | 0;
 do if (!($2 & 1)) {
  $5 = HEAP32[$p >> 2] | 0;
  if (!($2 & 3)) return;
  $9 = $p + (0 - $5) | 0;
  $10 = $5 + $psize | 0;
  $11 = HEAP32[26670] | 0;
  if ($9 >>> 0 < $11 >>> 0) _abort();
  if (($9 | 0) == (HEAP32[26671] | 0)) {
   $99 = $p + ($psize + 4) | 0;
   $100 = HEAP32[$99 >> 2] | 0;
   if (($100 & 3 | 0) != 3) {
    $$0 = $9;
    $$02 = $10;
    break;
   }
   HEAP32[26668] = $10;
   HEAP32[$99 >> 2] = $100 & -2;
   HEAP32[$p + (4 - $5) >> 2] = $10 | 1;
   HEAP32[$0 >> 2] = $10;
   return;
  }
  $15 = $5 >>> 3;
  if ($5 >>> 0 < 256) {
   $18 = HEAP32[$p + (8 - $5) >> 2] | 0;
   $20 = HEAP32[$p + (12 - $5) >> 2] | 0;
   $22 = 106704 + ($15 << 1 << 2) | 0;
   if (($18 | 0) != ($22 | 0)) {
    if ($18 >>> 0 < $11 >>> 0) _abort();
    if ((HEAP32[$18 + 12 >> 2] | 0) != ($9 | 0)) _abort();
   }
   if (($20 | 0) == ($18 | 0)) {
    HEAP32[26666] = HEAP32[26666] & ~(1 << $15);
    $$0 = $9;
    $$02 = $10;
    break;
   }
   if (($20 | 0) == ($22 | 0)) $$pre$phi53Z2D = $20 + 8 | 0; else {
    if ($20 >>> 0 < $11 >>> 0) _abort();
    $35 = $20 + 8 | 0;
    if ((HEAP32[$35 >> 2] | 0) == ($9 | 0)) $$pre$phi53Z2D = $35; else _abort();
   }
   HEAP32[$18 + 12 >> 2] = $20;
   HEAP32[$$pre$phi53Z2D >> 2] = $18;
   $$0 = $9;
   $$02 = $10;
   break;
  }
  $40 = HEAP32[$p + (24 - $5) >> 2] | 0;
  $42 = HEAP32[$p + (12 - $5) >> 2] | 0;
  do if (($42 | 0) == ($9 | 0)) {
   $$sum18 = 16 - $5 | 0;
   $53 = $p + ($$sum18 + 4) | 0;
   $54 = HEAP32[$53 >> 2] | 0;
   if (!$54) {
    $56 = $p + $$sum18 | 0;
    $57 = HEAP32[$56 >> 2] | 0;
    if (!$57) {
     $R$1 = 0;
     break;
    } else {
     $R$0 = $57;
     $RP$0 = $56;
    }
   } else {
    $R$0 = $54;
    $RP$0 = $53;
   }
   while (1) {
    $59 = $R$0 + 20 | 0;
    $60 = HEAP32[$59 >> 2] | 0;
    if ($60) {
     $R$0 = $60;
     $RP$0 = $59;
     continue;
    }
    $62 = $R$0 + 16 | 0;
    $63 = HEAP32[$62 >> 2] | 0;
    if (!$63) {
     $R$0$lcssa = $R$0;
     $RP$0$lcssa = $RP$0;
     break;
    } else {
     $R$0 = $63;
     $RP$0 = $62;
    }
   }
   if ($RP$0$lcssa >>> 0 < $11 >>> 0) _abort(); else {
    HEAP32[$RP$0$lcssa >> 2] = 0;
    $R$1 = $R$0$lcssa;
    break;
   }
  } else {
   $45 = HEAP32[$p + (8 - $5) >> 2] | 0;
   if ($45 >>> 0 < $11 >>> 0) _abort();
   $47 = $45 + 12 | 0;
   if ((HEAP32[$47 >> 2] | 0) != ($9 | 0)) _abort();
   $50 = $42 + 8 | 0;
   if ((HEAP32[$50 >> 2] | 0) == ($9 | 0)) {
    HEAP32[$47 >> 2] = $42;
    HEAP32[$50 >> 2] = $45;
    $R$1 = $42;
    break;
   } else _abort();
  } while (0);
  if (!$40) {
   $$0 = $9;
   $$02 = $10;
  } else {
   $68 = HEAP32[$p + (28 - $5) >> 2] | 0;
   $69 = 106968 + ($68 << 2) | 0;
   if (($9 | 0) == (HEAP32[$69 >> 2] | 0)) {
    HEAP32[$69 >> 2] = $R$1;
    if (!$R$1) {
     HEAP32[26667] = HEAP32[26667] & ~(1 << $68);
     $$0 = $9;
     $$02 = $10;
     break;
    }
   } else {
    if ($40 >>> 0 < (HEAP32[26670] | 0) >>> 0) _abort();
    $78 = $40 + 16 | 0;
    if ((HEAP32[$78 >> 2] | 0) == ($9 | 0)) HEAP32[$78 >> 2] = $R$1; else HEAP32[$40 + 20 >> 2] = $R$1;
    if (!$R$1) {
     $$0 = $9;
     $$02 = $10;
     break;
    }
   }
   $83 = HEAP32[26670] | 0;
   if ($R$1 >>> 0 < $83 >>> 0) _abort();
   HEAP32[$R$1 + 24 >> 2] = $40;
   $$sum21 = 16 - $5 | 0;
   $87 = HEAP32[$p + $$sum21 >> 2] | 0;
   do if ($87) if ($87 >>> 0 < $83 >>> 0) _abort(); else {
    HEAP32[$R$1 + 16 >> 2] = $87;
    HEAP32[$87 + 24 >> 2] = $R$1;
    break;
   } while (0);
   $93 = HEAP32[$p + ($$sum21 + 4) >> 2] | 0;
   if (!$93) {
    $$0 = $9;
    $$02 = $10;
   } else if ($93 >>> 0 < (HEAP32[26670] | 0) >>> 0) _abort(); else {
    HEAP32[$R$1 + 20 >> 2] = $93;
    HEAP32[$93 + 24 >> 2] = $R$1;
    $$0 = $9;
    $$02 = $10;
    break;
   }
  }
 } else {
  $$0 = $p;
  $$02 = $psize;
 } while (0);
 $106 = HEAP32[26670] | 0;
 if ($0 >>> 0 < $106 >>> 0) _abort();
 $108 = $p + ($psize + 4) | 0;
 $109 = HEAP32[$108 >> 2] | 0;
 if (!($109 & 2)) {
  if (($0 | 0) == (HEAP32[26672] | 0)) {
   $115 = (HEAP32[26669] | 0) + $$02 | 0;
   HEAP32[26669] = $115;
   HEAP32[26672] = $$0;
   HEAP32[$$0 + 4 >> 2] = $115 | 1;
   if (($$0 | 0) != (HEAP32[26671] | 0)) return;
   HEAP32[26671] = 0;
   HEAP32[26668] = 0;
   return;
  }
  if (($0 | 0) == (HEAP32[26671] | 0)) {
   $123 = (HEAP32[26668] | 0) + $$02 | 0;
   HEAP32[26668] = $123;
   HEAP32[26671] = $$0;
   HEAP32[$$0 + 4 >> 2] = $123 | 1;
   HEAP32[$$0 + $123 >> 2] = $123;
   return;
  }
  $128 = ($109 & -8) + $$02 | 0;
  $129 = $109 >>> 3;
  do if ($109 >>> 0 < 256) {
   $132 = HEAP32[$p + ($psize + 8) >> 2] | 0;
   $134 = HEAP32[$p + ($psize + 12) >> 2] | 0;
   $136 = 106704 + ($129 << 1 << 2) | 0;
   if (($132 | 0) != ($136 | 0)) {
    if ($132 >>> 0 < $106 >>> 0) _abort();
    if ((HEAP32[$132 + 12 >> 2] | 0) != ($0 | 0)) _abort();
   }
   if (($134 | 0) == ($132 | 0)) {
    HEAP32[26666] = HEAP32[26666] & ~(1 << $129);
    break;
   }
   if (($134 | 0) == ($136 | 0)) $$pre$phi51Z2D = $134 + 8 | 0; else {
    if ($134 >>> 0 < $106 >>> 0) _abort();
    $149 = $134 + 8 | 0;
    if ((HEAP32[$149 >> 2] | 0) == ($0 | 0)) $$pre$phi51Z2D = $149; else _abort();
   }
   HEAP32[$132 + 12 >> 2] = $134;
   HEAP32[$$pre$phi51Z2D >> 2] = $132;
  } else {
   $154 = HEAP32[$p + ($psize + 24) >> 2] | 0;
   $156 = HEAP32[$p + ($psize + 12) >> 2] | 0;
   do if (($156 | 0) == ($0 | 0)) {
    $167 = $p + ($psize + 20) | 0;
    $168 = HEAP32[$167 >> 2] | 0;
    if (!$168) {
     $170 = $p + ($psize + 16) | 0;
     $171 = HEAP32[$170 >> 2] | 0;
     if (!$171) {
      $R7$1 = 0;
      break;
     } else {
      $R7$0 = $171;
      $RP9$0 = $170;
     }
    } else {
     $R7$0 = $168;
     $RP9$0 = $167;
    }
    while (1) {
     $173 = $R7$0 + 20 | 0;
     $174 = HEAP32[$173 >> 2] | 0;
     if ($174) {
      $R7$0 = $174;
      $RP9$0 = $173;
      continue;
     }
     $176 = $R7$0 + 16 | 0;
     $177 = HEAP32[$176 >> 2] | 0;
     if (!$177) {
      $R7$0$lcssa = $R7$0;
      $RP9$0$lcssa = $RP9$0;
      break;
     } else {
      $R7$0 = $177;
      $RP9$0 = $176;
     }
    }
    if ($RP9$0$lcssa >>> 0 < $106 >>> 0) _abort(); else {
     HEAP32[$RP9$0$lcssa >> 2] = 0;
     $R7$1 = $R7$0$lcssa;
     break;
    }
   } else {
    $159 = HEAP32[$p + ($psize + 8) >> 2] | 0;
    if ($159 >>> 0 < $106 >>> 0) _abort();
    $161 = $159 + 12 | 0;
    if ((HEAP32[$161 >> 2] | 0) != ($0 | 0)) _abort();
    $164 = $156 + 8 | 0;
    if ((HEAP32[$164 >> 2] | 0) == ($0 | 0)) {
     HEAP32[$161 >> 2] = $156;
     HEAP32[$164 >> 2] = $159;
     $R7$1 = $156;
     break;
    } else _abort();
   } while (0);
   if ($154) {
    $182 = HEAP32[$p + ($psize + 28) >> 2] | 0;
    $183 = 106968 + ($182 << 2) | 0;
    if (($0 | 0) == (HEAP32[$183 >> 2] | 0)) {
     HEAP32[$183 >> 2] = $R7$1;
     if (!$R7$1) {
      HEAP32[26667] = HEAP32[26667] & ~(1 << $182);
      break;
     }
    } else {
     if ($154 >>> 0 < (HEAP32[26670] | 0) >>> 0) _abort();
     $192 = $154 + 16 | 0;
     if ((HEAP32[$192 >> 2] | 0) == ($0 | 0)) HEAP32[$192 >> 2] = $R7$1; else HEAP32[$154 + 20 >> 2] = $R7$1;
     if (!$R7$1) break;
    }
    $197 = HEAP32[26670] | 0;
    if ($R7$1 >>> 0 < $197 >>> 0) _abort();
    HEAP32[$R7$1 + 24 >> 2] = $154;
    $201 = HEAP32[$p + ($psize + 16) >> 2] | 0;
    do if ($201) if ($201 >>> 0 < $197 >>> 0) _abort(); else {
     HEAP32[$R7$1 + 16 >> 2] = $201;
     HEAP32[$201 + 24 >> 2] = $R7$1;
     break;
    } while (0);
    $207 = HEAP32[$p + ($psize + 20) >> 2] | 0;
    if ($207) if ($207 >>> 0 < (HEAP32[26670] | 0) >>> 0) _abort(); else {
     HEAP32[$R7$1 + 20 >> 2] = $207;
     HEAP32[$207 + 24 >> 2] = $R7$1;
     break;
    }
   }
  } while (0);
  HEAP32[$$0 + 4 >> 2] = $128 | 1;
  HEAP32[$$0 + $128 >> 2] = $128;
  if (($$0 | 0) == (HEAP32[26671] | 0)) {
   HEAP32[26668] = $128;
   return;
  } else $$1 = $128;
 } else {
  HEAP32[$108 >> 2] = $109 & -2;
  HEAP32[$$0 + 4 >> 2] = $$02 | 1;
  HEAP32[$$0 + $$02 >> 2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 if ($$1 >>> 0 < 256) {
  $224 = $222 << 1;
  $225 = 106704 + ($224 << 2) | 0;
  $226 = HEAP32[26666] | 0;
  $227 = 1 << $222;
  if (!($226 & $227)) {
   HEAP32[26666] = $226 | $227;
   $$pre$phiZ2D = 106704 + ($224 + 2 << 2) | 0;
   $F16$0 = $225;
  } else {
   $231 = 106704 + ($224 + 2 << 2) | 0;
   $232 = HEAP32[$231 >> 2] | 0;
   if ($232 >>> 0 < (HEAP32[26670] | 0) >>> 0) _abort(); else {
    $$pre$phiZ2D = $231;
    $F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$0;
  HEAP32[$F16$0 + 12 >> 2] = $$0;
  HEAP32[$$0 + 8 >> 2] = $F16$0;
  HEAP32[$$0 + 12 >> 2] = $225;
  return;
 }
 $238 = $$1 >>> 8;
 if (!$238) $I19$0 = 0; else if ($$1 >>> 0 > 16777215) $I19$0 = 31; else {
  $243 = ($238 + 1048320 | 0) >>> 16 & 8;
  $244 = $238 << $243;
  $247 = ($244 + 520192 | 0) >>> 16 & 4;
  $249 = $244 << $247;
  $252 = ($249 + 245760 | 0) >>> 16 & 2;
  $257 = 14 - ($247 | $243 | $252) + ($249 << $252 >>> 15) | 0;
  $I19$0 = $$1 >>> ($257 + 7 | 0) & 1 | $257 << 1;
 }
 $263 = 106968 + ($I19$0 << 2) | 0;
 HEAP32[$$0 + 28 >> 2] = $I19$0;
 HEAP32[$$0 + 20 >> 2] = 0;
 HEAP32[$$0 + 16 >> 2] = 0;
 $267 = HEAP32[26667] | 0;
 $268 = 1 << $I19$0;
 if (!($267 & $268)) {
  HEAP32[26667] = $267 | $268;
  HEAP32[$263 >> 2] = $$0;
  HEAP32[$$0 + 24 >> 2] = $263;
  HEAP32[$$0 + 12 >> 2] = $$0;
  HEAP32[$$0 + 8 >> 2] = $$0;
  return;
 }
 $275 = HEAP32[$263 >> 2] | 0;
 if (($I19$0 | 0) == 31) $284 = 0; else $284 = 25 - ($I19$0 >>> 1) | 0;
 L194 : do if ((HEAP32[$275 + 4 >> 2] & -8 | 0) == ($$1 | 0)) $T$0$lcssa = $275; else {
  $K20$045 = $$1 << $284;
  $T$044 = $275;
  while (1) {
   $292 = $T$044 + ($K20$045 >>> 31 << 2) + 16 | 0;
   $287 = HEAP32[$292 >> 2] | 0;
   if (!$287) {
    $$lcssa = $292;
    $T$044$lcssa = $T$044;
    break;
   }
   if ((HEAP32[$287 + 4 >> 2] & -8 | 0) == ($$1 | 0)) {
    $T$0$lcssa = $287;
    break L194;
   } else {
    $K20$045 = $K20$045 << 1;
    $T$044 = $287;
   }
  }
  if ($$lcssa >>> 0 < (HEAP32[26670] | 0) >>> 0) _abort();
  HEAP32[$$lcssa >> 2] = $$0;
  HEAP32[$$0 + 24 >> 2] = $T$044$lcssa;
  HEAP32[$$0 + 12 >> 2] = $$0;
  HEAP32[$$0 + 8 >> 2] = $$0;
  return;
 } while (0);
 $299 = $T$0$lcssa + 8 | 0;
 $300 = HEAP32[$299 >> 2] | 0;
 $301 = HEAP32[26670] | 0;
 if (!($T$0$lcssa >>> 0 >= $301 >>> 0 & $300 >>> 0 >= $301 >>> 0)) _abort();
 HEAP32[$300 + 12 >> 2] = $$0;
 HEAP32[$299 >> 2] = $$0;
 HEAP32[$$0 + 8 >> 2] = $300;
 HEAP32[$$0 + 12 >> 2] = $T$0$lcssa;
 HEAP32[$$0 + 24 >> 2] = 0;
 return;
}

function _initialize_keys_mapping() {
 var $0 = 0;
 $0 = _dlua_get_lua_state() | 0;
 _lua_createtable($0, 0, 118);
 _lua_pushnumber($0, 8.0);
 _lua_pushlstring($0, 22840, 9) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 9.0);
 _lua_pushlstring($0, 22856, 3) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1180.0);
 _lua_pushlstring($0, 22864, 5) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 13.0);
 _lua_pushlstring($0, 67680, 6) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1096.0);
 _lua_pushlstring($0, 22872, 5) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 27.0);
 _lua_pushlstring($0, 22880, 6) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 32.0);
 _lua_pushlstring($0, 22888, 5) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 33.0);
 _lua_pushlstring($0, 22896, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 34.0);
 _lua_pushlstring($0, 22904, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 35.0);
 _lua_pushlstring($0, 22912, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 36.0);
 _lua_pushlstring($0, 22920, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 38.0);
 _lua_pushlstring($0, 22928, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 39.0);
 _lua_pushlstring($0, 22936, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 40.0);
 _lua_pushlstring($0, 22944, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 41.0);
 _lua_pushlstring($0, 22952, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 42.0);
 _lua_pushlstring($0, 22960, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 43.0);
 _lua_pushlstring($0, 22968, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 44.0);
 _lua_pushlstring($0, 22976, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 45.0);
 _lua_pushlstring($0, 22984, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 46.0);
 _lua_pushlstring($0, 107776, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 47.0);
 _lua_pushlstring($0, 58832, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 48.0);
 _lua_pushlstring($0, 81008, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 49.0);
 _lua_pushlstring($0, 22992, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 50.0);
 _lua_pushlstring($0, 23e3, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 51.0);
 _lua_pushlstring($0, 23008, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 52.0);
 _lua_pushlstring($0, 23016, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 53.0);
 _lua_pushlstring($0, 23024, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 54.0);
 _lua_pushlstring($0, 23032, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 55.0);
 _lua_pushlstring($0, 23040, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 56.0);
 _lua_pushlstring($0, 23048, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 57.0);
 _lua_pushlstring($0, 23056, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 58.0);
 _lua_pushlstring($0, 23064, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 59.0);
 _lua_pushlstring($0, 23072, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 60.0);
 _lua_pushlstring($0, 23080, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 61.0);
 _lua_pushlstring($0, 23088, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 62.0);
 _lua_pushlstring($0, 23096, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 63.0);
 _lua_pushlstring($0, 59048, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 64.0);
 _lua_pushlstring($0, 23104, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 91.0);
 _lua_pushlstring($0, 23112, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 92.0);
 _lua_pushlstring($0, 23120, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 93.0);
 _lua_pushlstring($0, 23128, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 94.0);
 _lua_pushlstring($0, 23136, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 95.0);
 _lua_pushlstring($0, 58920, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 96.0);
 _lua_pushlstring($0, 23144, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 97.0);
 _lua_pushlstring($0, 23152, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 98.0);
 _lua_pushlstring($0, 23160, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 99.0);
 _lua_pushlstring($0, 23168, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 100.0);
 _lua_pushlstring($0, 23176, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 101.0);
 _lua_pushlstring($0, 23184, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 102.0);
 _lua_pushlstring($0, 58712, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 103.0);
 _lua_pushlstring($0, 23192, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 104.0);
 _lua_pushlstring($0, 23200, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 105.0);
 _lua_pushlstring($0, 23208, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 106.0);
 _lua_pushlstring($0, 23216, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 107.0);
 _lua_pushlstring($0, 66560, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 108.0);
 _lua_pushlstring($0, 23224, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 109.0);
 _lua_pushlstring($0, 23232, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 110.0);
 _lua_pushlstring($0, 62728, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 111.0);
 _lua_pushlstring($0, 23240, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 112.0);
 _lua_pushlstring($0, 23248, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 113.0);
 _lua_pushlstring($0, 23256, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 114.0);
 _lua_pushlstring($0, 59072, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 115.0);
 _lua_pushlstring($0, 23264, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 116.0);
 _lua_pushlstring($0, 23272, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 117.0);
 _lua_pushlstring($0, 23280, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 118.0);
 _lua_pushlstring($0, 23288, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 119.0);
 _lua_pushlstring($0, 57296, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 120.0);
 _lua_pushlstring($0, 23296, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 121.0);
 _lua_pushlstring($0, 23304, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 122.0);
 _lua_pushlstring($0, 23312, 1) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 127.0);
 _lua_pushlstring($0, 23320, 6) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1122.0);
 _lua_pushlstring($0, 23328, 3) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1113.0);
 _lua_pushlstring($0, 23336, 3) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1114.0);
 _lua_pushlstring($0, 23344, 3) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1115.0);
 _lua_pushlstring($0, 23352, 3) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1116.0);
 _lua_pushlstring($0, 23360, 3) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1117.0);
 _lua_pushlstring($0, 23368, 3) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1118.0);
 _lua_pushlstring($0, 23376, 3) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1119.0);
 _lua_pushlstring($0, 23384, 3) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1120.0);
 _lua_pushlstring($0, 23392, 3) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1121.0);
 _lua_pushlstring($0, 23400, 3) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1123.0);
 _lua_pushlstring($0, 23408, 3) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1108.0);
 _lua_pushlstring($0, 23416, 3) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1109.0);
 _lua_pushlstring($0, 23424, 3) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1110.0);
 _lua_pushlstring($0, 23432, 3) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1111.0);
 _lua_pushlstring($0, 23440, 3) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1112.0);
 _lua_pushlstring($0, 23448, 5) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1127.0);
 _lua_pushlstring($0, 23456, 6) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1106.0);
 _lua_pushlstring($0, 23464, 2) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1105.0);
 _lua_pushlstring($0, 23472, 4) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1103.0);
 _lua_pushlstring($0, 23480, 5) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1104.0);
 _lua_pushlstring($0, 23488, 4) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1105.0);
 _lua_pushlstring($0, 23472, 4) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1097.0);
 _lua_pushlstring($0, 62544, 6) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1098.0);
 _lua_pushlstring($0, 23496, 4) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1101.0);
 _lua_pushlstring($0, 67584, 3) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1099.0);
 _lua_pushlstring($0, 23504, 7) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1102.0);
 _lua_pushlstring($0, 23512, 9) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1082.0);
 _lua_pushlstring($0, 23528, 2) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1083.0);
 _lua_pushlstring($0, 23536, 2) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1084.0);
 _lua_pushlstring($0, 23544, 2) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1085.0);
 _lua_pushlstring($0, 23552, 2) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1086.0);
 _lua_pushlstring($0, 23560, 2) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1087.0);
 _lua_pushlstring($0, 23568, 2) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1088.0);
 _lua_pushlstring($0, 23576, 2) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1089.0);
 _lua_pushlstring($0, 23584, 2) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1090.0);
 _lua_pushlstring($0, 23592, 2) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1091.0);
 _lua_pushlstring($0, 23600, 3) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1092.0);
 _lua_pushlstring($0, 23608, 3) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1093.0);
 _lua_pushlstring($0, 23616, 3) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1128.0);
 _lua_pushlstring($0, 23624, 3) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1129.0);
 _lua_pushlstring($0, 23632, 3) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1130.0);
 _lua_pushlstring($0, 23640, 3) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1081.0);
 _lua_pushlstring($0, 23648, 9) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1253.0);
 _lua_pushlstring($0, 23664, 11) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1249.0);
 _lua_pushlstring($0, 23680, 10) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1252.0);
 _lua_pushlstring($0, 23696, 10) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1248.0);
 _lua_pushlstring($0, 23712, 9) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1254.0);
 _lua_pushlstring($0, 23728, 9) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1250.0);
 _lua_pushlstring($0, 23744, 8) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1255.0);
 _lua_pushlstring($0, 23760, 10) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1251.0);
 _lua_pushlstring($0, 23776, 9) | 0;
 _lua_settable($0, -3);
 _lua_pushnumber($0, 1281.0);
 _lua_pushlstring($0, 23792, 6) | 0;
 _lua_settable($0, -3);
 HEAP32[5950] = _luaL_ref($0, -1001e3) | 0;
 return;
}

function __ZN11b2GearJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $$in = 0.0, $$pn = 0.0, $1 = 0, $105 = 0.0, $106 = 0.0, $108 = 0.0, $11 = 0, $110 = 0.0, $112 = 0, $118 = 0.0, $119 = 0.0, $121 = 0.0, $123 = 0.0, $125 = 0, $13 = 0, $131 = 0.0, $132 = 0.0, $134 = 0.0, $136 = 0.0, $138 = 0, $14 = 0, $144 = 0.0, $145 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0, $16 = 0, $160 = 0.0, $167 = 0.0, $170 = 0.0, $172 = 0.0, $175 = 0.0, $179 = 0.0, $18 = 0, $184 = 0.0, $19 = 0, $194 = 0.0, $199 = 0.0, $20 = 0, $207 = 0.0, $208 = 0.0, $209 = 0, $215 = 0.0, $219 = 0.0, $22 = 0, $228 = 0.0, $235 = 0.0, $242 = 0.0, $245 = 0.0, $247 = 0.0, $250 = 0.0, $253 = 0.0, $258 = 0.0, $268 = 0.0, $27 = 0, $273 = 0.0, $28 = 0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0, $294 = 0.0, $299 = 0.0, $3 = 0, $312 = 0.0, $316 = 0, $317 = 0.0, $318 = 0.0, $32 = 0, $320 = 0.0, $322 = 0.0, $327 = 0.0, $329 = 0.0, $331 = 0.0, $333 = 0.0, $338 = 0.0, $34 = 0, $340 = 0.0, $347 = 0.0, $349 = 0.0, $356 = 0.0, $358 = 0, $359 = 0, $360 = 0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0, $379 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0.0, $388 = 0.0, $389 = 0.0, $39 = 0, $390 = 0.0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0.0, $401 = 0.0, $402 = 0.0, $403 = 0.0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $44 = 0, $46 = 0, $51 = 0, $52 = 0, $58 = 0, $6 = 0, $60 = 0, $63 = 0, $64 = 0, $69 = 0.0, $72 = 0.0, $75 = 0.0, $78 = 0.0, $8 = 0, $81 = 0.0, $84 = 0.0, $87 = 0.0, $9 = 0, $90 = 0.0, $93 = 0, $95 = 0.0, $96 = 0, $97 = 0, $99 = 0, $storemerge6 = 0.0, $wA$0 = 0.0, $wB$0 = 0.0, $wC$0 = 0.0, $wD$0 = 0.0;
 $1 = HEAP32[$this + 48 >> 2] | 0;
 $3 = HEAP32[$1 + 8 >> 2] | 0;
 $4 = $this + 160 | 0;
 HEAP32[$4 >> 2] = $3;
 $6 = HEAP32[$this + 52 >> 2] | 0;
 $8 = HEAP32[$6 + 8 >> 2] | 0;
 $9 = $this + 164 | 0;
 HEAP32[$9 >> 2] = $8;
 $11 = HEAP32[$this + 84 >> 2] | 0;
 $13 = HEAP32[$11 + 8 >> 2] | 0;
 $14 = $this + 168 | 0;
 HEAP32[$14 >> 2] = $13;
 $16 = HEAP32[$this + 88 >> 2] | 0;
 $18 = HEAP32[$16 + 8 >> 2] | 0;
 $19 = $this + 172 | 0;
 HEAP32[$19 >> 2] = $18;
 $20 = $this + 176 | 0;
 $22 = $1 + 28 | 0;
 $27 = HEAP32[$22 + 4 >> 2] | 0;
 $28 = $20;
 HEAP32[$28 >> 2] = HEAP32[$22 >> 2];
 HEAP32[$28 + 4 >> 2] = $27;
 $32 = $this + 184 | 0;
 $34 = $6 + 28 | 0;
 $39 = HEAP32[$34 + 4 >> 2] | 0;
 $40 = $32;
 HEAP32[$40 >> 2] = HEAP32[$34 >> 2];
 HEAP32[$40 + 4 >> 2] = $39;
 $44 = $this + 192 | 0;
 $46 = $11 + 28 | 0;
 $51 = HEAP32[$46 + 4 >> 2] | 0;
 $52 = $44;
 HEAP32[$52 >> 2] = HEAP32[$46 >> 2];
 HEAP32[$52 + 4 >> 2] = $51;
 $58 = $16 + 28 | 0;
 $60 = HEAP32[$58 >> 2] | 0;
 $63 = HEAP32[$58 + 4 >> 2] | 0;
 $64 = $this + 200 | 0;
 HEAP32[$64 >> 2] = $60;
 HEAP32[$64 + 4 >> 2] = $63;
 $69 = +HEAPF32[$1 + 120 >> 2];
 HEAPF32[$this + 208 >> 2] = $69;
 $72 = +HEAPF32[$6 + 120 >> 2];
 HEAPF32[$this + 212 >> 2] = $72;
 $75 = +HEAPF32[$11 + 120 >> 2];
 HEAPF32[$this + 216 >> 2] = $75;
 $78 = +HEAPF32[$16 + 120 >> 2];
 HEAPF32[$this + 220 >> 2] = $78;
 $81 = +HEAPF32[$1 + 128 >> 2];
 HEAPF32[$this + 224 >> 2] = $81;
 $84 = +HEAPF32[$6 + 128 >> 2];
 HEAPF32[$this + 228 >> 2] = $84;
 $87 = +HEAPF32[$11 + 128 >> 2];
 HEAPF32[$this + 232 >> 2] = $87;
 $90 = +HEAPF32[$16 + 128 >> 2];
 HEAPF32[$this + 236 >> 2] = $90;
 $93 = HEAP32[$data + 24 >> 2] | 0;
 $95 = +HEAPF32[$93 + ($3 * 12 | 0) + 8 >> 2];
 $96 = $data + 28 | 0;
 $97 = HEAP32[$96 >> 2] | 0;
 $99 = $97 + ($3 * 12 | 0) | 0;
 $105 = +HEAPF32[$99 >> 2];
 $106 = +HEAPF32[$99 + 4 >> 2];
 $108 = +HEAPF32[$97 + ($3 * 12 | 0) + 8 >> 2];
 $110 = +HEAPF32[$93 + ($8 * 12 | 0) + 8 >> 2];
 $112 = $97 + ($8 * 12 | 0) | 0;
 $118 = +HEAPF32[$112 >> 2];
 $119 = +HEAPF32[$112 + 4 >> 2];
 $121 = +HEAPF32[$97 + ($8 * 12 | 0) + 8 >> 2];
 $123 = +HEAPF32[$93 + ($13 * 12 | 0) + 8 >> 2];
 $125 = $97 + ($13 * 12 | 0) | 0;
 $131 = +HEAPF32[$125 >> 2];
 $132 = +HEAPF32[$125 + 4 >> 2];
 $134 = +HEAPF32[$97 + ($13 * 12 | 0) + 8 >> 2];
 $136 = +HEAPF32[$93 + ($18 * 12 | 0) + 8 >> 2];
 $138 = $97 + ($18 * 12 | 0) | 0;
 $144 = +HEAPF32[$138 >> 2];
 $145 = +HEAPF32[$138 + 4 >> 2];
 $147 = +HEAPF32[$97 + ($18 * 12 | 0) + 8 >> 2];
 $148 = +Math_sin(+$95);
 $149 = +Math_cos(+$95);
 $150 = +Math_sin(+$110);
 $151 = +Math_cos(+$110);
 $152 = +Math_sin(+$123);
 $153 = +Math_cos(+$123);
 $154 = +Math_sin(+$136);
 $155 = +Math_cos(+$136);
 $156 = $this + 272 | 0;
 HEAPF32[$156 >> 2] = 0.0;
 $160 = (HEAP32[tempDoublePtr >> 2] = $60, +HEAPF32[tempDoublePtr >> 2]);
 if ((HEAP32[$this + 76 >> 2] | 0) == 1) {
  HEAPF32[$this + 240 >> 2] = 0.0;
  HEAPF32[$this + 244 >> 2] = 0.0;
  HEAPF32[$this + 256 >> 2] = 1.0;
  HEAPF32[$this + 264 >> 2] = 1.0;
  $$in = $81 + $87;
  $320 = 0.0;
  $322 = 0.0;
  $327 = 1.0;
  $347 = 1.0;
 } else {
  $167 = +HEAPF32[$this + 124 >> 2];
  $170 = +HEAPF32[$this + 128 >> 2];
  $172 = $153 * $167 - $152 * $170;
  $175 = $152 * $167 + $153 * $170;
  $179 = +HEAPF32[$this + 108 >> 2] - +HEAPF32[$44 >> 2];
  $184 = +HEAPF32[$this + 112 >> 2] - +HEAPF32[$this + 196 >> 2];
  $194 = +HEAPF32[$this + 92 >> 2] - +HEAPF32[$20 >> 2];
  $199 = +HEAPF32[$this + 96 >> 2] - +HEAPF32[$this + 180 >> 2];
  $207 = +$172;
  $208 = +$175;
  $209 = $this + 240 | 0;
  HEAPF32[$209 >> 2] = $207;
  HEAPF32[$209 + 4 >> 2] = $208;
  $215 = $175 * ($153 * $179 - $152 * $184) - $172 * ($152 * $179 + $153 * $184);
  HEAPF32[$this + 264 >> 2] = $215;
  $219 = $175 * ($149 * $194 - $148 * $199) - $172 * ($148 * $194 + $149 * $199);
  HEAPF32[$this + 256 >> 2] = $219;
  $$in = $75 + $69 + $215 * ($87 * $215) + $219 * ($81 * $219);
  $320 = $172;
  $322 = $175;
  $327 = $219;
  $347 = $215;
 }
 $228 = $$in + 0.0;
 HEAPF32[$156 >> 2] = $228;
 if ((HEAP32[$this + 80 >> 2] | 0) == 1) {
  HEAPF32[$this + 248 >> 2] = 0.0;
  HEAPF32[$this + 252 >> 2] = 0.0;
  $235 = +HEAPF32[$this + 152 >> 2];
  HEAPF32[$this + 260 >> 2] = $235;
  HEAPF32[$this + 268 >> 2] = $235;
  $$pn = $235 * $235 * ($84 + $90);
  $331 = 0.0;
  $333 = 0.0;
  $338 = $235;
  $356 = $235;
 } else {
  $242 = +HEAPF32[$this + 132 >> 2];
  $245 = +HEAPF32[$this + 136 >> 2];
  $247 = $155 * $242 - $154 * $245;
  $250 = $154 * $242 + $155 * $245;
  $253 = +HEAPF32[$this + 116 >> 2] - $160;
  $258 = +HEAPF32[$this + 120 >> 2] - +HEAPF32[$this + 204 >> 2];
  $268 = +HEAPF32[$this + 100 >> 2] - +HEAPF32[$32 >> 2];
  $273 = +HEAPF32[$this + 104 >> 2] - +HEAPF32[$this + 188 >> 2];
  $282 = +HEAPF32[$this + 152 >> 2];
  $283 = $247 * $282;
  $284 = $250 * $282;
  $285 = +$283;
  $286 = +$284;
  $287 = $this + 248 | 0;
  HEAPF32[$287 >> 2] = $285;
  HEAPF32[$287 + 4 >> 2] = $286;
  $294 = ($250 * ($155 * $253 - $154 * $258) - $247 * ($154 * $253 + $155 * $258)) * $282;
  HEAPF32[$this + 268 >> 2] = $294;
  $299 = $282 * ($250 * ($151 * $268 - $150 * $273) - $247 * ($150 * $268 + $151 * $273));
  HEAPF32[$this + 260 >> 2] = $299;
  $$pn = $282 * $282 * ($78 + $72) + $294 * ($90 * $294) + $299 * ($299 * $84);
  $331 = $283;
  $333 = $284;
  $338 = $299;
  $356 = $294;
 }
 $storemerge6 = $228 + $$pn;
 HEAPF32[$156 >> 2] = $storemerge6;
 if ($storemerge6 > 0.0) $312 = 1.0 / $storemerge6; else $312 = 0.0;
 HEAPF32[$156 >> 2] = $312;
 $316 = $this + 156 | 0;
 if (!(HEAP8[$data + 20 >> 0] | 0)) {
  HEAPF32[$316 >> 2] = 0.0;
  $362 = $105;
  $364 = $106;
  $375 = $118;
  $377 = $119;
  $388 = $131;
  $390 = $132;
  $401 = $144;
  $403 = $145;
  $wA$0 = $108;
  $wB$0 = $121;
  $wC$0 = $134;
  $wD$0 = $147;
  $358 = HEAP32[$4 >> 2] | 0;
  $359 = HEAP32[$96 >> 2] | 0;
  $360 = $359 + ($358 * 12 | 0) | 0;
  $361 = +$362;
  $363 = +$364;
  $365 = $360;
  $366 = $365;
  HEAPF32[$366 >> 2] = $361;
  $367 = $365 + 4 | 0;
  $368 = $367;
  HEAPF32[$368 >> 2] = $363;
  $369 = HEAP32[$4 >> 2] | 0;
  $370 = HEAP32[$96 >> 2] | 0;
  $371 = $370 + ($369 * 12 | 0) + 8 | 0;
  HEAPF32[$371 >> 2] = $wA$0;
  $372 = HEAP32[$9 >> 2] | 0;
  $373 = $370 + ($372 * 12 | 0) | 0;
  $374 = +$375;
  $376 = +$377;
  $378 = $373;
  $379 = $378;
  HEAPF32[$379 >> 2] = $374;
  $380 = $378 + 4 | 0;
  $381 = $380;
  HEAPF32[$381 >> 2] = $376;
  $382 = HEAP32[$9 >> 2] | 0;
  $383 = HEAP32[$96 >> 2] | 0;
  $384 = $383 + ($382 * 12 | 0) + 8 | 0;
  HEAPF32[$384 >> 2] = $wB$0;
  $385 = HEAP32[$14 >> 2] | 0;
  $386 = $383 + ($385 * 12 | 0) | 0;
  $387 = +$388;
  $389 = +$390;
  $391 = $386;
  $392 = $391;
  HEAPF32[$392 >> 2] = $387;
  $393 = $391 + 4 | 0;
  $394 = $393;
  HEAPF32[$394 >> 2] = $389;
  $395 = HEAP32[$14 >> 2] | 0;
  $396 = HEAP32[$96 >> 2] | 0;
  $397 = $396 + ($395 * 12 | 0) + 8 | 0;
  HEAPF32[$397 >> 2] = $wC$0;
  $398 = HEAP32[$19 >> 2] | 0;
  $399 = $396 + ($398 * 12 | 0) | 0;
  $400 = +$401;
  $402 = +$403;
  $404 = $399;
  $405 = $404;
  HEAPF32[$405 >> 2] = $400;
  $406 = $404 + 4 | 0;
  $407 = $406;
  HEAPF32[$407 >> 2] = $402;
  $408 = HEAP32[$19 >> 2] | 0;
  $409 = HEAP32[$96 >> 2] | 0;
  $410 = $409 + ($408 * 12 | 0) + 8 | 0;
  HEAPF32[$410 >> 2] = $wD$0;
  return;
 } else {
  $317 = +HEAPF32[$316 >> 2];
  $318 = $69 * $317;
  $329 = $317 * $72;
  $340 = $317 * $75;
  $349 = $317 * $78;
  $362 = $105 + $320 * $318;
  $364 = $106 + $318 * $322;
  $375 = $118 + $331 * $329;
  $377 = $119 + $329 * $333;
  $388 = $131 - $320 * $340;
  $390 = $132 - $322 * $340;
  $401 = $144 - $331 * $349;
  $403 = $145 - $333 * $349;
  $wA$0 = $108 + $317 * $81 * $327;
  $wB$0 = $121 + $317 * $84 * $338;
  $wC$0 = $134 - $317 * $87 * $347;
  $wD$0 = $147 - $317 * $90 * $356;
  $358 = HEAP32[$4 >> 2] | 0;
  $359 = HEAP32[$96 >> 2] | 0;
  $360 = $359 + ($358 * 12 | 0) | 0;
  $361 = +$362;
  $363 = +$364;
  $365 = $360;
  $366 = $365;
  HEAPF32[$366 >> 2] = $361;
  $367 = $365 + 4 | 0;
  $368 = $367;
  HEAPF32[$368 >> 2] = $363;
  $369 = HEAP32[$4 >> 2] | 0;
  $370 = HEAP32[$96 >> 2] | 0;
  $371 = $370 + ($369 * 12 | 0) + 8 | 0;
  HEAPF32[$371 >> 2] = $wA$0;
  $372 = HEAP32[$9 >> 2] | 0;
  $373 = $370 + ($372 * 12 | 0) | 0;
  $374 = +$375;
  $376 = +$377;
  $378 = $373;
  $379 = $378;
  HEAPF32[$379 >> 2] = $374;
  $380 = $378 + 4 | 0;
  $381 = $380;
  HEAPF32[$381 >> 2] = $376;
  $382 = HEAP32[$9 >> 2] | 0;
  $383 = HEAP32[$96 >> 2] | 0;
  $384 = $383 + ($382 * 12 | 0) + 8 | 0;
  HEAPF32[$384 >> 2] = $wB$0;
  $385 = HEAP32[$14 >> 2] | 0;
  $386 = $383 + ($385 * 12 | 0) | 0;
  $387 = +$388;
  $389 = +$390;
  $391 = $386;
  $392 = $391;
  HEAPF32[$392 >> 2] = $387;
  $393 = $391 + 4 | 0;
  $394 = $393;
  HEAPF32[$394 >> 2] = $389;
  $395 = HEAP32[$14 >> 2] | 0;
  $396 = HEAP32[$96 >> 2] | 0;
  $397 = $396 + ($395 * 12 | 0) + 8 | 0;
  HEAPF32[$397 >> 2] = $wC$0;
  $398 = HEAP32[$19 >> 2] | 0;
  $399 = $396 + ($398 * 12 | 0) | 0;
  $400 = +$401;
  $402 = +$403;
  $404 = $399;
  $405 = $404;
  HEAPF32[$405 >> 2] = $400;
  $406 = $404 + 4 | 0;
  $407 = $406;
  HEAPF32[$407 >> 2] = $402;
  $408 = HEAP32[$19 >> 2] | 0;
  $409 = HEAP32[$96 >> 2] | 0;
  $410 = $409 + ($408 * 12 | 0) + 8 | 0;
  HEAPF32[$410 >> 2] = $wD$0;
  return;
 }
}

function _json_append_data($l, $current_depth, $json) {
 $l = $l | 0;
 $current_depth = $current_depth | 0;
 $json = $json | 0;
 var $100 = 0, $106 = 0, $114 = 0, $115 = 0, $123 = 0, $137 = 0, $145 = 0, $146 = 0, $15 = 0, $156 = 0, $157 = 0, $16 = 0, $19 = 0, $2 = 0, $30 = 0.0, $38 = 0, $4 = 0, $41 = 0, $44 = 0, $59 = 0, $69 = 0, $78 = 0, $8 = 0, $86 = 0, $9 = 0, $97 = 0, $comma$0$i2641 = 0, $comma$0$i40 = 0, $comma$1$i = 0, $comma$1$i33 = 0, $i$0$i42 = 0, $items$0$lcssa$i = 0, $items$06$i = 0, $max$0$lcssa$i = 0, $max$05$i = 0, $max$1$i = 0, $s$idx$i$i$i = 0, $s$idx$i$i$i20 = 0, $s$idx1$i$i = 0, $s$idx1$i$i$i = 0, $s$idx1$i$i$i22 = 0, $s$idx1$i$i15 = 0, $s$idx1$i$i9 = 0, $s$idx1$val$i$i = 0, $s$idx1$val$i$i$i = 0, $s$idx1$val$i$i$i23 = 0, $s$idx1$val$i$i10 = 0, $s$idx1$val$i$i10$i = 0, $s$idx1$val$i$i10$i37 = 0, $s$idx1$val$i$i16 = 0, $s$idx1$val$i$i16$i = 0, $s$idx1$val$i$i21$i = 0, $s$idx1$val$i$i27$i = 0, $s$idx1$val$i$i4$i = 0, $s$idx1$val$i$i4$i30 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer9 = sp + 24 | 0;
 $vararg_buffer5 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 switch (_lua_type($l, -1) | 0) {
 case 5:
  {
   $19 = $current_depth + 1 | 0;
   if ((HEAP32[17294] | 0) < ($19 | 0)) label = 13; else if (!(_lua_checkstack($l, 3) | 0)) label = 13;
   if ((label | 0) == 13) {
    if (!(HEAP32[17297] | 0)) _strbuf_free($json);
    HEAP32[$vararg_buffer >> 2] = $19;
    _luaL_error($l, 70040, $vararg_buffer) | 0;
   }
   _lua_pushnil($l);
   L11 : do if (!(_lua_next($l, -2) | 0)) {
    $items$0$lcssa$i = 0;
    $max$0$lcssa$i = 0;
    label = 24;
   } else {
    $items$06$i = 0;
    $max$05$i = 0;
    while (1) {
     if ((_lua_type($l, -2) | 0) != 3) break;
     $30 = +_lua_tonumberx($l, -2, 0);
     if (!($30 != 0.0)) break;
     if (!(+Math_floor(+$30) == $30 & $30 >= 1.0)) break;
     if ($30 > +($max$05$i | 0)) $max$1$i = ~~$30; else $max$1$i = $max$05$i;
     $38 = $items$06$i + 1 | 0;
     _lua_settop($l, -2);
     if (!(_lua_next($l, -2) | 0)) {
      $items$0$lcssa$i = $38;
      $max$0$lcssa$i = $max$1$i;
      label = 24;
      break L11;
     } else {
      $items$06$i = $38;
      $max$05$i = $max$1$i;
     }
    }
    _lua_settop($l, -3);
   } while (0);
   do if ((label | 0) == 24) {
    $41 = HEAP32[17292] | 0;
    if (($41 | 0) > 0) {
     $44 = ($max$0$lcssa$i | 0) > (Math_imul($41, $items$0$lcssa$i) | 0);
     if ($44 & ($max$0$lcssa$i | 0) > (HEAP32[17293] | 0)) {
      if (HEAP32[17291] | 0) break;
      if (!(HEAP32[17297] | 0)) _strbuf_free($json);
      HEAP32[$vararg_buffer1 >> 2] = _lua_typename($l, _lua_type($l, -1) | 0) | 0;
      HEAP32[$vararg_buffer1 + 4 >> 2] = 70008;
      _luaL_error($l, 69944, $vararg_buffer1) | 0;
      break;
     }
    }
    if (($max$0$lcssa$i | 0) > 0) {
     $s$idx$i$i$i20 = $json + 4 | 0;
     $s$idx1$i$i$i22 = $json + 8 | 0;
     $s$idx1$val$i$i$i23 = HEAP32[$s$idx1$i$i$i22 >> 2] | 0;
     if (((HEAP32[$s$idx$i$i$i20 >> 2] | 0) + -1 - $s$idx1$val$i$i$i23 | 0) < 1) {
      _strbuf_resize($json, $s$idx1$val$i$i$i23 + 1 | 0);
      $59 = HEAP32[$s$idx1$i$i$i22 >> 2] | 0;
     } else $59 = $s$idx1$val$i$i$i23;
     HEAP32[$s$idx1$i$i$i22 >> 2] = $59 + 1;
     HEAP8[(HEAP32[$json >> 2] | 0) + $59 >> 0] = 91;
     if (($max$0$lcssa$i | 0) >= 1) {
      $comma$0$i2641 = 0;
      $i$0$i42 = 1;
      while (1) {
       if (!$comma$0$i2641) $comma$1$i33 = 1; else {
        $s$idx1$val$i$i4$i30 = HEAP32[$s$idx1$i$i$i22 >> 2] | 0;
        if (((HEAP32[$s$idx$i$i$i20 >> 2] | 0) + -1 - $s$idx1$val$i$i4$i30 | 0) < 1) {
         _strbuf_resize($json, $s$idx1$val$i$i4$i30 + 1 | 0);
         $69 = HEAP32[$s$idx1$i$i$i22 >> 2] | 0;
        } else $69 = $s$idx1$val$i$i4$i30;
        HEAP32[$s$idx1$i$i$i22 >> 2] = $69 + 1;
        HEAP8[(HEAP32[$json >> 2] | 0) + $69 >> 0] = 44;
        $comma$1$i33 = $comma$0$i2641;
       }
       _lua_rawgeti($l, -1, $i$0$i42) | 0;
       _json_append_data($l, $19, $json);
       _lua_settop($l, -2);
       if (($i$0$i42 | 0) == ($max$0$lcssa$i | 0)) break; else {
        $comma$0$i2641 = $comma$1$i33;
        $i$0$i42 = $i$0$i42 + 1 | 0;
       }
      }
     }
     $s$idx1$val$i$i10$i37 = HEAP32[$s$idx1$i$i$i22 >> 2] | 0;
     if (((HEAP32[$s$idx$i$i$i20 >> 2] | 0) + -1 - $s$idx1$val$i$i10$i37 | 0) < 1) {
      _strbuf_resize($json, $s$idx1$val$i$i10$i37 + 1 | 0);
      $78 = HEAP32[$s$idx1$i$i$i22 >> 2] | 0;
     } else $78 = $s$idx1$val$i$i10$i37;
     HEAP32[$s$idx1$i$i$i22 >> 2] = $78 + 1;
     HEAP8[(HEAP32[$json >> 2] | 0) + $78 >> 0] = 93;
     STACKTOP = sp;
     return;
    }
   } while (0);
   $s$idx$i$i$i = $json + 4 | 0;
   $s$idx1$i$i$i = $json + 8 | 0;
   $s$idx1$val$i$i$i = HEAP32[$s$idx1$i$i$i >> 2] | 0;
   if (((HEAP32[$s$idx$i$i$i >> 2] | 0) + -1 - $s$idx1$val$i$i$i | 0) < 1) {
    _strbuf_resize($json, $s$idx1$val$i$i$i + 1 | 0);
    $86 = HEAP32[$s$idx1$i$i$i >> 2] | 0;
   } else $86 = $s$idx1$val$i$i$i;
   HEAP32[$s$idx1$i$i$i >> 2] = $86 + 1;
   HEAP8[(HEAP32[$json >> 2] | 0) + $86 >> 0] = 123;
   _lua_pushnil($l);
   if (_lua_next($l, -2) | 0) {
    $comma$0$i40 = 0;
    while (1) {
     if (!$comma$0$i40) $comma$1$i = 1; else {
      $s$idx1$val$i$i4$i = HEAP32[$s$idx1$i$i$i >> 2] | 0;
      if (((HEAP32[$s$idx$i$i$i >> 2] | 0) + -1 - $s$idx1$val$i$i4$i | 0) < 1) {
       _strbuf_resize($json, $s$idx1$val$i$i4$i + 1 | 0);
       $97 = HEAP32[$s$idx1$i$i$i >> 2] | 0;
      } else $97 = $s$idx1$val$i$i4$i;
      HEAP32[$s$idx1$i$i$i >> 2] = $97 + 1;
      HEAP8[(HEAP32[$json >> 2] | 0) + $97 >> 0] = 44;
      $comma$1$i = $comma$0$i40;
     }
     $100 = _lua_type($l, -2) | 0;
     if (($100 | 0) == 3) {
      $s$idx1$val$i$i10$i = HEAP32[$s$idx1$i$i$i >> 2] | 0;
      if (((HEAP32[$s$idx$i$i$i >> 2] | 0) + -1 - $s$idx1$val$i$i10$i | 0) < 1) {
       _strbuf_resize($json, $s$idx1$val$i$i10$i + 1 | 0);
       $106 = HEAP32[$s$idx1$i$i$i >> 2] | 0;
      } else $106 = $s$idx1$val$i$i10$i;
      HEAP32[$s$idx1$i$i$i >> 2] = $106 + 1;
      HEAP8[(HEAP32[$json >> 2] | 0) + $106 >> 0] = 34;
      _json_append_number($l, $json, -2);
      $s$idx1$val$i$i16$i = HEAP32[$s$idx1$i$i$i >> 2] | 0;
      if (((HEAP32[$s$idx$i$i$i >> 2] | 0) + -1 - $s$idx1$val$i$i16$i | 0) < 2) {
       _strbuf_resize($json, $s$idx1$val$i$i16$i + 2 | 0);
       $115 = HEAP32[$s$idx1$i$i$i >> 2] | 0;
      } else $115 = $s$idx1$val$i$i16$i;
      $114 = (HEAP32[$json >> 2] | 0) + $115 | 0;
      HEAP8[$114 >> 0] = 34;
      HEAP8[$114 + 1 >> 0] = 58;
      HEAP32[$s$idx1$i$i$i >> 2] = (HEAP32[$s$idx1$i$i$i >> 2] | 0) + 2;
     } else if (($100 | 0) == 4) {
      _json_append_string($l, $json, -2);
      $s$idx1$val$i$i21$i = HEAP32[$s$idx1$i$i$i >> 2] | 0;
      if (((HEAP32[$s$idx$i$i$i >> 2] | 0) + -1 - $s$idx1$val$i$i21$i | 0) < 1) {
       _strbuf_resize($json, $s$idx1$val$i$i21$i + 1 | 0);
       $123 = HEAP32[$s$idx1$i$i$i >> 2] | 0;
      } else $123 = $s$idx1$val$i$i21$i;
      HEAP32[$s$idx1$i$i$i >> 2] = $123 + 1;
      HEAP8[(HEAP32[$json >> 2] | 0) + $123 >> 0] = 58;
     } else {
      if (!(HEAP32[17297] | 0)) _strbuf_free($json);
      HEAP32[$vararg_buffer5 >> 2] = _lua_typename($l, _lua_type($l, -2) | 0) | 0;
      HEAP32[$vararg_buffer5 + 4 >> 2] = 69968;
      _luaL_error($l, 69944, $vararg_buffer5) | 0;
     }
     _json_append_data($l, $19, $json);
     _lua_settop($l, -2);
     if (!(_lua_next($l, -2) | 0)) break; else $comma$0$i40 = $comma$1$i;
    }
   }
   $s$idx1$val$i$i27$i = HEAP32[$s$idx1$i$i$i >> 2] | 0;
   if (((HEAP32[$s$idx$i$i$i >> 2] | 0) + -1 - $s$idx1$val$i$i27$i | 0) < 1) {
    _strbuf_resize($json, $s$idx1$val$i$i27$i + 1 | 0);
    $137 = HEAP32[$s$idx1$i$i$i >> 2] | 0;
   } else $137 = $s$idx1$val$i$i27$i;
   HEAP32[$s$idx1$i$i$i >> 2] = $137 + 1;
   HEAP8[(HEAP32[$json >> 2] | 0) + $137 >> 0] = 125;
   STACKTOP = sp;
   return;
  }
 case 4:
  {
   _json_append_string($l, $json, -1);
   STACKTOP = sp;
   return;
  }
 case 3:
  {
   _json_append_number($l, $json, -1);
   STACKTOP = sp;
   return;
  }
 case 1:
  {
   $2 = (_lua_toboolean($l, -1) | 0) == 0;
   $s$idx1$i$i9 = $json + 8 | 0;
   $s$idx1$val$i$i10 = HEAP32[$s$idx1$i$i9 >> 2] | 0;
   $4 = (HEAP32[$json + 4 >> 2] | 0) + -1 - $s$idx1$val$i$i10 | 0;
   if ($2) {
    if (($4 | 0) < 5) {
     _strbuf_resize($json, $s$idx1$val$i$i10 + 5 | 0);
     $16 = HEAP32[$s$idx1$i$i9 >> 2] | 0;
    } else $16 = $s$idx1$val$i$i10;
    $15 = (HEAP32[$json >> 2] | 0) + $16 | 0;
    HEAP8[$15 + 0 >> 0] = HEAP8[90768] | 0;
    HEAP8[$15 + 1 >> 0] = HEAP8[90769] | 0;
    HEAP8[$15 + 2 >> 0] = HEAP8[90770] | 0;
    HEAP8[$15 + 3 >> 0] = HEAP8[90771] | 0;
    HEAP8[$15 + 4 >> 0] = HEAP8[90772] | 0;
    HEAP32[$s$idx1$i$i9 >> 2] = (HEAP32[$s$idx1$i$i9 >> 2] | 0) + 5;
    STACKTOP = sp;
    return;
   } else {
    if (($4 | 0) < 4) {
     _strbuf_resize($json, $s$idx1$val$i$i10 + 4 | 0);
     $9 = HEAP32[$s$idx1$i$i9 >> 2] | 0;
    } else $9 = $s$idx1$val$i$i10;
    $8 = (HEAP32[$json >> 2] | 0) + $9 | 0;
    HEAP8[$8 >> 0] = 116;
    HEAP8[$8 + 1 >> 0] = 114;
    HEAP8[$8 + 2 >> 0] = 117;
    HEAP8[$8 + 3 >> 0] = 101;
    HEAP32[$s$idx1$i$i9 >> 2] = (HEAP32[$s$idx1$i$i9 >> 2] | 0) + 4;
    STACKTOP = sp;
    return;
   }
   break;
  }
 case 0:
  {
   $s$idx1$i$i15 = $json + 8 | 0;
   $s$idx1$val$i$i16 = HEAP32[$s$idx1$i$i15 >> 2] | 0;
   if (((HEAP32[$json + 4 >> 2] | 0) + -1 - $s$idx1$val$i$i16 | 0) < 4) {
    _strbuf_resize($json, $s$idx1$val$i$i16 + 4 | 0);
    $146 = HEAP32[$s$idx1$i$i15 >> 2] | 0;
   } else $146 = $s$idx1$val$i$i16;
   $145 = (HEAP32[$json >> 2] | 0) + $146 | 0;
   HEAP8[$145 >> 0] = 110;
   HEAP8[$145 + 1 >> 0] = 117;
   HEAP8[$145 + 2 >> 0] = 108;
   HEAP8[$145 + 3 >> 0] = 108;
   HEAP32[$s$idx1$i$i15 >> 2] = (HEAP32[$s$idx1$i$i15 >> 2] | 0) + 4;
   STACKTOP = sp;
   return;
  }
 case 2:
  {
   if (!(_lua_touserdata($l, -1) | 0)) {
    $s$idx1$i$i = $json + 8 | 0;
    $s$idx1$val$i$i = HEAP32[$s$idx1$i$i >> 2] | 0;
    if (((HEAP32[$json + 4 >> 2] | 0) + -1 - $s$idx1$val$i$i | 0) < 4) {
     _strbuf_resize($json, $s$idx1$val$i$i + 4 | 0);
     $157 = HEAP32[$s$idx1$i$i >> 2] | 0;
    } else $157 = $s$idx1$val$i$i;
    $156 = (HEAP32[$json >> 2] | 0) + $157 | 0;
    HEAP8[$156 >> 0] = 110;
    HEAP8[$156 + 1 >> 0] = 117;
    HEAP8[$156 + 2 >> 0] = 108;
    HEAP8[$156 + 3 >> 0] = 108;
    HEAP32[$s$idx1$i$i >> 2] = (HEAP32[$s$idx1$i$i >> 2] | 0) + 4;
    STACKTOP = sp;
    return;
   }
   break;
  }
 default:
  {}
 }
 if (!(HEAP32[17297] | 0)) _strbuf_free($json);
 HEAP32[$vararg_buffer9 >> 2] = _lua_typename($l, _lua_type($l, -1) | 0) | 0;
 HEAP32[$vararg_buffer9 + 4 >> 2] = 69920;
 _luaL_error($l, 69944, $vararg_buffer9) | 0;
 STACKTOP = sp;
 return;
}

function _json_next_token($json, $token) {
 $json = $json | 0;
 $token = $token | 0;
 var $$0$i2$ph$i$i = 0, $$lcssa23 = 0, $0 = 0, $1 = 0, $10 = 0, $102 = 0, $11 = 0, $113 = 0, $12 = 0, $15 = 0, $156 = 0, $158 = 0, $164 = 0, $17 = 0, $177 = 0, $178 = 0, $179 = 0, $184 = 0, $186 = 0, $188 = 0, $19 = 0, $199 = 0, $2 = 0, $200 = 0, $201 = 0, $204 = 0, $224 = 0, $23 = 0, $250 = 0, $251 = 0, $252 = 0, $255 = 0, $269 = 0, $283 = 0, $31 = 0, $34 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $52 = 0, $56 = 0, $60 = 0, $61 = 0, $64 = 0, $68 = 0, $7 = 0, $79 = 0, $9 = 0, $94 = 0, $95 = 0, $98 = 0, $ch$0$i = 0, $codepoint$0$i$i = 0, $endptr$i3 = 0, $escape_len$0$i$i = 0, $i$01$i$i$i = 0, $i$01$i4$i$i = 0, $p$0$i = 0, $p$0$i6 = 0, $utf8$sroa$0$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $endptr$i3 = sp + 8 | 0;
 $utf8$sroa$0$i$i = sp;
 $0 = $json + 12 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $json + 4 | 0;
 $4 = HEAP8[HEAP32[$2 >> 2] >> 0] | 0;
 $7 = HEAP32[$1 + (($4 & 255) << 2) >> 2] | 0;
 HEAP32[$token >> 2] = $7;
 $9 = HEAP32[$2 >> 2] | 0;
 if (($7 | 0) == 11) {
  $11 = $9;
  while (1) {
   $10 = $11 + 1 | 0;
   HEAP32[$2 >> 2] = $10;
   $12 = HEAP8[$10 >> 0] | 0;
   $15 = HEAP32[$1 + (($12 & 255) << 2) >> 2] | 0;
   HEAP32[$token >> 2] = $15;
   $17 = HEAP32[$2 >> 2] | 0;
   if (($15 | 0) == 11) $11 = $17; else {
    $$lcssa23 = $12;
    $19 = $17;
    $283 = $15;
    break;
   }
  }
 } else {
  $$lcssa23 = $4;
  $19 = $9;
  $283 = $7;
 }
 $23 = $token + 4 | 0;
 HEAP32[$23 >> 2] = $19 - (HEAP32[$json >> 2] | 0);
 if (($283 | 0) == 12) {
  HEAP32[$token >> 2] = 12;
  HEAP32[$23 >> 2] = (HEAP32[$2 >> 2] | 0) - (HEAP32[$json >> 2] | 0);
  HEAP32[$token + 8 >> 2] = 69712;
  STACKTOP = sp;
  return;
 } else if (($283 | 0) == 10) {
  STACKTOP = sp;
  return;
 } else if (($283 | 0) == 13) {
  if ($$lcssa23 << 24 >> 24 == 34) {
   $31 = HEAP32[$0 >> 2] | 0;
   if ((HEAP8[$19 >> 0] | 0) != 34) ___assert_fail(69752, 69776, 962, 69808);
   $34 = $19 + 1 | 0;
   HEAP32[$2 >> 2] = $34;
   $35 = $json + 8 | 0;
   HEAP32[(HEAP32[$35 >> 2] | 0) + 8 >> 2] = 0;
   $38 = $endptr$i3 + 4 | 0;
   $39 = $endptr$i3 + 8 | 0;
   $40 = $endptr$i3 + 12 | 0;
   $41 = $utf8$sroa$0$i$i + 1 | 0;
   $42 = $utf8$sroa$0$i$i + 2 | 0;
   $43 = $utf8$sroa$0$i$i + 3 | 0;
   $45 = $34;
   L17 : while (1) {
    $44 = HEAP8[$45 >> 0] | 0;
    do if ($44 << 24 >> 24 == 34) {
     label = 43;
     break L17;
    } else if ($44 << 24 >> 24 == 92) {
     $52 = $45 + 1 | 0;
     $56 = HEAP8[$31 + (HEAPU8[$52 >> 0] | 0) + 1024 >> 0] | 0;
     if ($56 << 24 >> 24 == 117) $i$01$i$i$i = 0; else if (!($56 << 24 >> 24)) {
      label = 40;
      break L17;
     } else {
      HEAP32[$2 >> 2] = $52;
      $ch$0$i = $56;
      break;
     }
     do {
      $60 = HEAP8[$45 + ($i$01$i$i$i + 2) >> 0] | 0;
      $61 = $60 << 24 >> 24;
      if (($60 + -48 & 255) < 10) $68 = $61 + -48 | 0; else {
       $64 = $61 | 32;
       $68 = ($64 + -97 | 0) >>> 0 < 6 ? $64 + -87 | 0 : -1;
      }
      HEAP32[$endptr$i3 + ($i$01$i$i$i << 2) >> 2] = $68;
      $i$01$i$i$i = $i$01$i$i$i + 1 | 0;
      if (($68 | 0) < 0) {
       label = 39;
       break L17;
      }
     } while (($i$01$i$i$i | 0) < 4);
     $79 = (HEAP32[$38 >> 2] << 8) + (HEAP32[$endptr$i3 >> 2] << 12) + (HEAP32[$39 >> 2] << 4) + (HEAP32[$40 >> 2] | 0) | 0;
     if (($79 | 0) < 0) {
      label = 39;
      break L17;
     }
     if (($79 & 63488 | 0) == 55296) {
      if ($79 & 1024) {
       label = 39;
       break L17;
      }
      if ((HEAP8[$45 + 6 >> 0] | 0) != 92) {
       label = 39;
       break L17;
      }
      if ((HEAP8[$45 + 7 >> 0] | 0) == 117) $i$01$i4$i$i = 0; else {
       label = 39;
       break L17;
      }
      do {
       $94 = HEAP8[$45 + ($i$01$i4$i$i + 8) >> 0] | 0;
       $95 = $94 << 24 >> 24;
       if (($94 + -48 & 255) < 10) $102 = $95 + -48 | 0; else {
        $98 = $95 | 32;
        $102 = ($98 + -97 | 0) >>> 0 < 6 ? $98 + -87 | 0 : -1;
       }
       HEAP32[$endptr$i3 + ($i$01$i4$i$i << 2) >> 2] = $102;
       $i$01$i4$i$i = $i$01$i4$i$i + 1 | 0;
       if (($102 | 0) < 0) {
        label = 39;
        break L17;
       }
      } while (($i$01$i4$i$i | 0) < 4);
      $113 = (HEAP32[$38 >> 2] << 8) + (HEAP32[$endptr$i3 >> 2] << 12) + (HEAP32[$39 >> 2] << 4) + (HEAP32[$40 >> 2] | 0) | 0;
      if (($113 & -2147419136 | 0) != 56320) {
       label = 39;
       break L17;
      }
      $codepoint$0$i$i = ($113 & 1023 | $79 << 10 & 1047552) + 65536 | 0;
      $escape_len$0$i$i = 12;
     } else {
      $codepoint$0$i$i = $79;
      $escape_len$0$i$i = 6;
     }
     do if (($codepoint$0$i$i | 0) < 128) {
      HEAP8[$utf8$sroa$0$i$i >> 0] = $codepoint$0$i$i;
      $$0$i2$ph$i$i = 1;
     } else {
      if (($codepoint$0$i$i | 0) < 2048) {
       HEAP8[$utf8$sroa$0$i$i >> 0] = $codepoint$0$i$i >>> 6 | 192;
       HEAP8[$41 >> 0] = $codepoint$0$i$i & 63 | 128;
       $$0$i2$ph$i$i = 2;
       break;
      }
      if (($codepoint$0$i$i | 0) < 65536) {
       HEAP8[$utf8$sroa$0$i$i >> 0] = $codepoint$0$i$i >>> 12 | 224;
       HEAP8[$41 >> 0] = $codepoint$0$i$i >>> 6 & 63 | 128;
       HEAP8[$42 >> 0] = $codepoint$0$i$i & 63 | 128;
       $$0$i2$ph$i$i = 3;
       break;
      }
      if (($codepoint$0$i$i | 0) >= 2097152) {
       label = 39;
       break L17;
      }
      HEAP8[$utf8$sroa$0$i$i >> 0] = $codepoint$0$i$i >>> 18 | 240;
      HEAP8[$41 >> 0] = $codepoint$0$i$i >>> 12 & 63 | 128;
      HEAP8[$42 >> 0] = $codepoint$0$i$i >>> 6 & 63 | 128;
      HEAP8[$43 >> 0] = $codepoint$0$i$i & 63 | 128;
      $$0$i2$ph$i$i = 4;
     } while (0);
     $156 = HEAP32[$35 >> 2] | 0;
     $158 = $156 + 8 | 0;
     _memcpy((HEAP32[$156 >> 2] | 0) + (HEAP32[$158 >> 2] | 0) | 0, $utf8$sroa$0$i$i | 0, $$0$i2$ph$i$i | 0) | 0;
     HEAP32[$158 >> 2] = (HEAP32[$158 >> 2] | 0) + $$0$i2$ph$i$i;
     $164 = (HEAP32[$2 >> 2] | 0) + $escape_len$0$i$i | 0;
     HEAP32[$2 >> 2] = $164;
     $45 = $164;
     continue L17;
    } else if (!($44 << 24 >> 24)) {
     label = 11;
     break L17;
    } else $ch$0$i = $44; while (0);
    $177 = HEAP32[$35 >> 2] | 0;
    $178 = $177 + 8 | 0;
    $179 = HEAP32[$178 >> 2] | 0;
    HEAP32[$178 >> 2] = $179 + 1;
    HEAP8[(HEAP32[$177 >> 2] | 0) + $179 >> 0] = $ch$0$i;
    $184 = (HEAP32[$2 >> 2] | 0) + 1 | 0;
    HEAP32[$2 >> 2] = $184;
    $45 = $184;
   }
   if ((label | 0) == 11) {
    HEAP32[$token >> 2] = 12;
    HEAP32[$23 >> 2] = (HEAP32[$2 >> 2] | 0) - (HEAP32[$json >> 2] | 0);
    HEAP32[$token + 8 >> 2] = 69832;
    STACKTOP = sp;
    return;
   } else if ((label | 0) == 39) {
    HEAP32[$token >> 2] = 12;
    HEAP32[$23 >> 2] = (HEAP32[$2 >> 2] | 0) - (HEAP32[$json >> 2] | 0);
    HEAP32[$token + 8 >> 2] = 69864;
    STACKTOP = sp;
    return;
   } else if ((label | 0) == 40) {
    HEAP32[$token >> 2] = 12;
    HEAP32[$23 >> 2] = (HEAP32[$2 >> 2] | 0) - (HEAP32[$json >> 2] | 0);
    HEAP32[$token + 8 >> 2] = 69896;
    STACKTOP = sp;
    return;
   } else if ((label | 0) == 43) {
    HEAP32[$2 >> 2] = $45 + 1;
    $186 = HEAP32[$35 >> 2] | 0;
    HEAP8[(HEAP32[$186 >> 2] | 0) + (HEAP32[$186 + 8 >> 2] | 0) >> 0] = 0;
    HEAP32[$token >> 2] = 4;
    $188 = HEAP32[$35 >> 2] | 0;
    HEAP32[$token + 16 >> 2] = HEAP32[$188 + 8 >> 2];
    HEAP32[$token + 8 >> 2] = HEAP32[$188 >> 2];
    STACKTOP = sp;
    return;
   }
  } else if ($$lcssa23 << 24 >> 24 != 45) if (($$lcssa23 + -48 & 255) >= 10) {
   if (!(_strncmp($19, 69744, 4) | 0)) {
    HEAP32[$token >> 2] = 6;
    HEAP32[$token + 8 >> 2] = 1;
    HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 4;
    STACKTOP = sp;
    return;
   }
   if (!(_strncmp($19, 90768, 5) | 0)) {
    HEAP32[$token >> 2] = 6;
    HEAP32[$token + 8 >> 2] = 0;
    HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 5;
    STACKTOP = sp;
    return;
   }
   if (!(_strncmp($19, 69256, 4) | 0)) {
    HEAP32[$token >> 2] = 7;
    HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 4;
    STACKTOP = sp;
    return;
   }
   L81 : do if (HEAP32[(HEAP32[$0 >> 2] | 0) + 1336 >> 2] | 0) {
    $250 = HEAP8[$19 >> 0] | 0;
    if ($250 << 24 >> 24 == 45) {
     $251 = $19 + 1 | 0;
     $252 = HEAP8[$251 >> 0] | 0;
     $p$0$i6 = $251;
     label = 66;
    } else if ($250 << 24 >> 24 != 43) {
     $252 = $250;
     $p$0$i6 = $19;
     label = 66;
    }
    do if ((label | 0) == 66) {
     if ($252 << 24 >> 24 == 48) {
      $255 = HEAP8[$p$0$i6 + 1 >> 0] | 0;
      if (($255 << 24 >> 24 | 32 | 0) == 120 | ($255 + -48 & 255) < 10) break; else break L81;
     }
     if ($252 << 24 >> 24 < 58) break L81;
     if (_strncasecmp($p$0$i6, 107728, 3) | 0) if (_strncasecmp($p$0$i6, 107744, 3) | 0) break L81;
    } while (0);
    HEAP32[$token >> 2] = 5;
    HEAPF64[$token + 8 >> 3] = +_fpconv_strtod(HEAP32[$2 >> 2] | 0, $utf8$sroa$0$i$i);
    $269 = HEAP32[$utf8$sroa$0$i$i >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) == ($269 | 0)) {
     HEAP32[$token >> 2] = 12;
     HEAP32[$23 >> 2] = (HEAP32[$2 >> 2] | 0) - (HEAP32[$json >> 2] | 0);
     HEAP32[$token + 8 >> 2] = 69728;
     STACKTOP = sp;
     return;
    } else {
     HEAP32[$2 >> 2] = $269;
     STACKTOP = sp;
     return;
    }
   } while (0);
   HEAP32[$token >> 2] = 12;
   HEAP32[$23 >> 2] = (HEAP32[$2 >> 2] | 0) - (HEAP32[$json >> 2] | 0);
   HEAP32[$token + 8 >> 2] = 69712;
   STACKTOP = sp;
   return;
  }
  L101 : do if (!(HEAP32[(HEAP32[$0 >> 2] | 0) + 1336 >> 2] | 0)) {
   $199 = HEAP8[$19 >> 0] | 0;
   if ($199 << 24 >> 24 == 45) {
    $200 = $19 + 1 | 0;
    $201 = HEAP8[$200 >> 0] | 0;
    $p$0$i = $200;
    label = 48;
   } else if ($199 << 24 >> 24 != 43) {
    $201 = $199;
    $p$0$i = $19;
    label = 48;
   }
   do if ((label | 0) == 48) {
    if ($201 << 24 >> 24 == 48) {
     $204 = HEAP8[$p$0$i + 1 >> 0] | 0;
     if (($204 << 24 >> 24 | 32 | 0) == 120 | ($204 + -48 & 255) < 10) break; else break L101;
    }
    if ($201 << 24 >> 24 < 58) break L101;
    if (_strncasecmp($p$0$i, 107728, 3) | 0) if (_strncasecmp($p$0$i, 107744, 3) | 0) break L101;
   } while (0);
   HEAP32[$token >> 2] = 12;
   HEAP32[$23 >> 2] = (HEAP32[$2 >> 2] | 0) - (HEAP32[$json >> 2] | 0);
   HEAP32[$token + 8 >> 2] = 69728;
   STACKTOP = sp;
   return;
  } while (0);
  HEAP32[$token >> 2] = 5;
  HEAPF64[$token + 8 >> 3] = +_fpconv_strtod(HEAP32[$2 >> 2] | 0, $endptr$i3);
  $224 = HEAP32[$endptr$i3 >> 2] | 0;
  if ((HEAP32[$2 >> 2] | 0) == ($224 | 0)) {
   HEAP32[$token >> 2] = 12;
   HEAP32[$23 >> 2] = (HEAP32[$2 >> 2] | 0) - (HEAP32[$json >> 2] | 0);
   HEAP32[$token + 8 >> 2] = 69728;
   STACKTOP = sp;
   return;
  } else {
   HEAP32[$2 >> 2] = $224;
   STACKTOP = sp;
   return;
  }
 } else {
  HEAP32[$2 >> 2] = $19 + 1;
  STACKTOP = sp;
  return;
 }
}

function __ZN9b2Fixture4DumpEi($this, $bodyIndex) {
 $this = $this | 0;
 $bodyIndex = $bodyIndex | 0;
 var $$lcssa = 0, $$lcssa2 = 0, $100 = 0, $105 = 0.0, $21 = 0, $23 = 0, $32 = 0.0, $36 = 0, $41 = 0.0, $47 = 0.0, $48 = 0, $53 = 0.0, $59 = 0.0, $66 = 0, $67 = 0, $69 = 0, $72 = 0.0, $75 = 0.0, $77 = 0, $79 = 0, $81 = 0, $83 = 0, $84 = 0, $87 = 0.0, $90 = 0.0, $92 = 0, $94 = 0, $99 = 0.0, $i$01 = 0, $i4$03 = 0, $vararg_buffer1 = 0, $vararg_buffer101 = 0, $vararg_buffer103 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer3 = 0, $vararg_buffer32 = 0, $vararg_buffer35 = 0, $vararg_buffer39 = 0, $vararg_buffer43 = 0, $vararg_buffer47 = 0, $vararg_buffer51 = 0, $vararg_buffer54 = 0, $vararg_buffer57 = 0, $vararg_buffer59 = 0, $vararg_buffer6 = 0, $vararg_buffer62 = 0, $vararg_buffer67 = 0, $vararg_buffer70 = 0, $vararg_buffer72 = 0, $vararg_buffer75 = 0, $vararg_buffer80 = 0, $vararg_buffer83 = 0, $vararg_buffer87 = 0, $vararg_buffer9 = 0, $vararg_buffer91 = 0, $vararg_buffer94 = 0, $vararg_buffer97 = 0, $vararg_buffer99 = 0, $vararg_ptr29 = 0, $vararg_ptr38 = 0, $vararg_ptr42 = 0, $vararg_ptr46 = 0, $vararg_ptr50 = 0, $vararg_ptr65 = 0, $vararg_ptr66 = 0, $vararg_ptr78 = 0, $vararg_ptr79 = 0, $vararg_ptr86 = 0, $vararg_ptr90 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368 | 0;
 $vararg_buffer103 = sp + 360 | 0;
 $vararg_buffer101 = sp + 352 | 0;
 $vararg_buffer99 = sp + 344 | 0;
 $vararg_buffer97 = sp + 336 | 0;
 $vararg_buffer94 = sp + 328 | 0;
 $vararg_buffer91 = sp + 320 | 0;
 $vararg_buffer87 = sp + 304 | 0;
 $vararg_buffer83 = sp + 288 | 0;
 $vararg_buffer80 = sp + 280 | 0;
 $vararg_buffer75 = sp + 256 | 0;
 $vararg_buffer72 = sp + 248 | 0;
 $vararg_buffer70 = sp + 240 | 0;
 $vararg_buffer67 = sp + 232 | 0;
 $vararg_buffer62 = sp + 208 | 0;
 $vararg_buffer59 = sp + 200 | 0;
 $vararg_buffer57 = sp + 192 | 0;
 $vararg_buffer54 = sp + 184 | 0;
 $vararg_buffer51 = sp + 176 | 0;
 $vararg_buffer47 = sp + 160 | 0;
 $vararg_buffer43 = sp + 144 | 0;
 $vararg_buffer39 = sp + 128 | 0;
 $vararg_buffer35 = sp + 112 | 0;
 $vararg_buffer32 = sp + 104 | 0;
 $vararg_buffer26 = sp + 80 | 0;
 $vararg_buffer23 = sp + 72 | 0;
 $vararg_buffer21 = sp + 64 | 0;
 $vararg_buffer18 = sp + 56 | 0;
 $vararg_buffer15 = sp + 48 | 0;
 $vararg_buffer12 = sp + 40 | 0;
 $vararg_buffer9 = sp + 32 | 0;
 $vararg_buffer6 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 __Z5b2LogPKcz(88136, sp);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 16 >> 2];
 HEAP32[$vararg_buffer1 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(88160, $vararg_buffer1);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 20 >> 2];
 HEAP32[$vararg_buffer3 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer3 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(88192, $vararg_buffer3);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this >> 2];
 HEAP32[$vararg_buffer6 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer6 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(88224, $vararg_buffer6);
 HEAP32[$vararg_buffer9 >> 2] = HEAPU8[$this + 38 >> 0];
 __Z5b2LogPKcz(88256, $vararg_buffer9);
 HEAP32[$vararg_buffer12 >> 2] = HEAPU16[$this + 32 >> 1];
 __Z5b2LogPKcz(88288, $vararg_buffer12);
 HEAP32[$vararg_buffer15 >> 2] = HEAPU16[$this + 34 >> 1];
 __Z5b2LogPKcz(88336, $vararg_buffer15);
 HEAP32[$vararg_buffer18 >> 2] = HEAP16[$this + 36 >> 1];
 __Z5b2LogPKcz(88376, $vararg_buffer18);
 $21 = HEAP32[$this + 12 >> 2] | 0;
 $23 = HEAP32[$21 + 4 >> 2] | 0;
 if (($23 | 0) == 1) {
  __Z5b2LogPKcz(88520, sp + 96 | 0);
  HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$21 + 8 >> 2];
  HEAP32[$vararg_buffer32 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_buffer32 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  __Z5b2LogPKcz(88448, $vararg_buffer32);
  $36 = $21 + 28 | 0;
  $41 = +HEAPF32[$36 + 4 >> 2];
  HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$36 >> 2];
  HEAP32[$vararg_buffer35 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_buffer35 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $vararg_ptr38 = $vararg_buffer35 + 8 | 0;
  HEAPF64[tempDoublePtr >> 3] = $41;
  HEAP32[$vararg_ptr38 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_ptr38 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  __Z5b2LogPKcz(88544, $vararg_buffer35);
  $47 = +HEAPF32[$21 + 16 >> 2];
  HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$21 + 12 >> 2];
  HEAP32[$vararg_buffer39 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_buffer39 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $vararg_ptr42 = $vararg_buffer39 + 8 | 0;
  HEAPF64[tempDoublePtr >> 3] = $47;
  HEAP32[$vararg_ptr42 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_ptr42 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  __Z5b2LogPKcz(88592, $vararg_buffer39);
  $48 = $21 + 20 | 0;
  $53 = +HEAPF32[$48 + 4 >> 2];
  HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$48 >> 2];
  HEAP32[$vararg_buffer43 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_buffer43 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $vararg_ptr46 = $vararg_buffer43 + 8 | 0;
  HEAPF64[tempDoublePtr >> 3] = $53;
  HEAP32[$vararg_ptr46 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_ptr46 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  __Z5b2LogPKcz(88640, $vararg_buffer43);
  $59 = +HEAPF32[$21 + 40 >> 2];
  HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$21 + 36 >> 2];
  HEAP32[$vararg_buffer47 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_buffer47 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $vararg_ptr50 = $vararg_buffer47 + 8 | 0;
  HEAPF64[tempDoublePtr >> 3] = $59;
  HEAP32[$vararg_ptr50 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_ptr50 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  __Z5b2LogPKcz(88688, $vararg_buffer47);
  HEAP32[$vararg_buffer51 >> 2] = HEAPU8[$21 + 44 >> 0];
  __Z5b2LogPKcz(88736, $vararg_buffer51);
  HEAP32[$vararg_buffer54 >> 2] = HEAPU8[$21 + 45 >> 0];
  __Z5b2LogPKcz(88776, $vararg_buffer54);
 } else if (($23 | 0) == 3) {
  __Z5b2LogPKcz(88936, $vararg_buffer70);
  $79 = $21 + 16 | 0;
  HEAP32[$vararg_buffer72 >> 2] = HEAP32[$79 >> 2];
  __Z5b2LogPKcz(88848, $vararg_buffer72);
  $81 = HEAP32[$79 >> 2] | 0;
  if (($81 | 0) > 0) {
   $83 = $21 + 12 | 0;
   $i4$03 = 0;
   do {
    $84 = HEAP32[$83 >> 2] | 0;
    $87 = +HEAPF32[$84 + ($i4$03 << 3) >> 2];
    $90 = +HEAPF32[$84 + ($i4$03 << 3) + 4 >> 2];
    HEAP32[$vararg_buffer75 >> 2] = $i4$03;
    $vararg_ptr78 = $vararg_buffer75 + 8 | 0;
    HEAPF64[tempDoublePtr >> 3] = $87;
    HEAP32[$vararg_ptr78 >> 2] = HEAP32[tempDoublePtr >> 2];
    HEAP32[$vararg_ptr78 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    $vararg_ptr79 = $vararg_buffer75 + 16 | 0;
    HEAPF64[tempDoublePtr >> 3] = $90;
    HEAP32[$vararg_ptr79 >> 2] = HEAP32[tempDoublePtr >> 2];
    HEAP32[$vararg_ptr79 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    __Z5b2LogPKcz(88872, $vararg_buffer75);
    $i4$03 = $i4$03 + 1 | 0;
    $92 = HEAP32[$79 >> 2] | 0;
   } while (($i4$03 | 0) < ($92 | 0));
   $$lcssa2 = $92;
  } else $$lcssa2 = $81;
  HEAP32[$vararg_buffer80 >> 2] = $$lcssa2;
  __Z5b2LogPKcz(88968, $vararg_buffer80);
  $94 = $21 + 20 | 0;
  $99 = +HEAPF32[$94 + 4 >> 2];
  HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$94 >> 2];
  HEAP32[$vararg_buffer83 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_buffer83 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $vararg_ptr86 = $vararg_buffer83 + 8 | 0;
  HEAPF64[tempDoublePtr >> 3] = $99;
  HEAP32[$vararg_ptr86 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_ptr86 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  __Z5b2LogPKcz(89e3, $vararg_buffer83);
  $100 = $21 + 28 | 0;
  $105 = +HEAPF32[$100 + 4 >> 2];
  HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$100 >> 2];
  HEAP32[$vararg_buffer87 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_buffer87 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $vararg_ptr90 = $vararg_buffer87 + 8 | 0;
  HEAPF64[tempDoublePtr >> 3] = $105;
  HEAP32[$vararg_ptr90 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_ptr90 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  __Z5b2LogPKcz(89048, $vararg_buffer87);
  HEAP32[$vararg_buffer91 >> 2] = HEAPU8[$21 + 36 >> 0];
  __Z5b2LogPKcz(89096, $vararg_buffer91);
  HEAP32[$vararg_buffer94 >> 2] = HEAPU8[$21 + 37 >> 0];
  __Z5b2LogPKcz(89136, $vararg_buffer94);
 } else if (!$23) {
  __Z5b2LogPKcz(88416, $vararg_buffer21);
  HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$21 + 8 >> 2];
  HEAP32[$vararg_buffer23 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_buffer23 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  __Z5b2LogPKcz(88448, $vararg_buffer23);
  $32 = +HEAPF32[$21 + 16 >> 2];
  HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$21 + 12 >> 2];
  HEAP32[$vararg_buffer26 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_buffer26 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $vararg_ptr29 = $vararg_buffer26 + 8 | 0;
  HEAPF64[tempDoublePtr >> 3] = $32;
  HEAP32[$vararg_ptr29 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_ptr29 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  __Z5b2LogPKcz(88480, $vararg_buffer26);
 } else if (($23 | 0) == 2) {
  __Z5b2LogPKcz(88816, $vararg_buffer57);
  HEAP32[$vararg_buffer59 >> 2] = 8;
  __Z5b2LogPKcz(88848, $vararg_buffer59);
  $66 = $21 + 148 | 0;
  $67 = HEAP32[$66 >> 2] | 0;
  if (($67 | 0) > 0) {
   $69 = $21 + 20 | 0;
   $i$01 = 0;
   do {
    $72 = +HEAPF32[$69 + ($i$01 << 3) >> 2];
    $75 = +HEAPF32[$69 + ($i$01 << 3) + 4 >> 2];
    HEAP32[$vararg_buffer62 >> 2] = $i$01;
    $vararg_ptr65 = $vararg_buffer62 + 8 | 0;
    HEAPF64[tempDoublePtr >> 3] = $72;
    HEAP32[$vararg_ptr65 >> 2] = HEAP32[tempDoublePtr >> 2];
    HEAP32[$vararg_ptr65 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    $vararg_ptr66 = $vararg_buffer62 + 16 | 0;
    HEAPF64[tempDoublePtr >> 3] = $75;
    HEAP32[$vararg_ptr66 >> 2] = HEAP32[tempDoublePtr >> 2];
    HEAP32[$vararg_ptr66 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    __Z5b2LogPKcz(88872, $vararg_buffer62);
    $i$01 = $i$01 + 1 | 0;
    $77 = HEAP32[$66 >> 2] | 0;
   } while (($i$01 | 0) < ($77 | 0));
   $$lcssa = $77;
  } else $$lcssa = $67;
  HEAP32[$vararg_buffer67 >> 2] = $$lcssa;
  __Z5b2LogPKcz(88912, $vararg_buffer67);
 } else {
  STACKTOP = sp;
  return;
 }
 __Z5b2LogPKcz(89176, $vararg_buffer97);
 __Z5b2LogPKcz(89184, $vararg_buffer99);
 __Z5b2LogPKcz(89176, $vararg_buffer101);
 HEAP32[$vararg_buffer103 >> 2] = $bodyIndex;
 __Z5b2LogPKcz(89208, $vararg_buffer103);
 STACKTOP = sp;
 return;
}

function __ZNSt3__127__insertion_sort_incompleteIRPFbRK6b2PairS3_EPS1_EEbT0_S8_T_($__first, $__last, $__comp) {
 $__first = $__first | 0;
 $__last = $__last | 0;
 $__comp = $__comp | 0;
 var $$0 = 0, $100 = 0, $101 = 0, $105 = 0, $111 = 0, $113 = 0, $116 = 0, $117 = 0, $12 = 0, $122 = 0, $123 = 0, $127 = 0, $13 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $140 = 0, $142 = 0, $145 = 0, $146 = 0, $151 = 0, $152 = 0, $156 = 0, $162 = 0, $164 = 0, $167 = 0, $168 = 0, $173 = 0, $174 = 0, $178 = 0, $18 = 0, $184 = 0, $186 = 0, $189 = 0, $19 = 0, $190 = 0, $195 = 0, $196 = 0, $200 = 0, $206 = 0, $208 = 0, $211 = 0, $212 = 0, $217 = 0, $218 = 0, $222 = 0, $226 = 0, $227 = 0, $229 = 0, $23 = 0, $231 = 0, $232 = 0, $234 = 0, $237 = 0, $238 = 0, $243 = 0, $244 = 0, $248 = 0, $254 = 0, $256 = 0, $259 = 0, $260 = 0, $265 = 0, $266 = 0, $27 = 0, $270 = 0, $274 = 0, $276 = 0, $279 = 0, $28 = 0, $280 = 0, $285 = 0, $286 = 0, $290 = 0, $294 = 0, $299 = 0, $30 = 0, $300 = 0, $304 = 0, $310 = 0, $312 = 0, $315 = 0, $316 = 0, $32 = 0, $321 = 0, $322 = 0, $326 = 0, $33 = 0, $330 = 0, $334 = 0, $339 = 0, $340 = 0, $344 = 0, $349 = 0, $35 = 0, $350 = 0, $356 = 0, $358 = 0, $363 = 0, $364 = 0, $368 = 0, $372 = 0, $38 = 0, $39 = 0, $44 = 0, $45 = 0, $49 = 0, $5 = 0, $55 = 0, $57 = 0, $60 = 0, $61 = 0, $66 = 0, $67 = 0, $7 = 0, $71 = 0, $75 = 0, $77 = 0, $80 = 0, $81 = 0, $86 = 0, $87 = 0, $9 = 0, $91 = 0, $95 = 0, $__count$05 = 0, $__count$1 = 0, $__i$06 = 0, $__j$04 = 0, $__j$04$phi = 0, $__j$1 = 0, $__j$1$phi = 0, $__k$0 = 0, $__t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__t = sp;
 switch ($__last - $__first >> 3 | 0) {
 case 3:
  {
   $27 = $__first + 8 | 0;
   $28 = $__last + -8 | 0;
   $30 = FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($27, $__first) | 0;
   $32 = FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($28, $27) | 0;
   if (!$30) {
    if (!$32) {
     $$0 = 1;
     STACKTOP = sp;
     return $$0 | 0;
    }
    $33 = $27;
    $35 = HEAP32[$33 >> 2] | 0;
    $38 = HEAP32[$33 + 4 >> 2] | 0;
    $39 = $28;
    $44 = HEAP32[$39 + 4 >> 2] | 0;
    $45 = $27;
    HEAP32[$45 >> 2] = HEAP32[$39 >> 2];
    HEAP32[$45 + 4 >> 2] = $44;
    $49 = $28;
    HEAP32[$49 >> 2] = $35;
    HEAP32[$49 + 4 >> 2] = $38;
    if (!(FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($27, $__first) | 0)) {
     $$0 = 1;
     STACKTOP = sp;
     return $$0 | 0;
    }
    $55 = $__first;
    $57 = HEAP32[$55 >> 2] | 0;
    $60 = HEAP32[$55 + 4 >> 2] | 0;
    $61 = $27;
    $66 = HEAP32[$61 + 4 >> 2] | 0;
    $67 = $__first;
    HEAP32[$67 >> 2] = HEAP32[$61 >> 2];
    HEAP32[$67 + 4 >> 2] = $66;
    $71 = $27;
    HEAP32[$71 >> 2] = $57;
    HEAP32[$71 + 4 >> 2] = $60;
    $$0 = 1;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $75 = $__first;
   $77 = HEAP32[$75 >> 2] | 0;
   $80 = HEAP32[$75 + 4 >> 2] | 0;
   if ($32) {
    $81 = $28;
    $86 = HEAP32[$81 + 4 >> 2] | 0;
    $87 = $__first;
    HEAP32[$87 >> 2] = HEAP32[$81 >> 2];
    HEAP32[$87 + 4 >> 2] = $86;
    $91 = $28;
    HEAP32[$91 >> 2] = $77;
    HEAP32[$91 + 4 >> 2] = $80;
    $$0 = 1;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $95 = $27;
   $100 = HEAP32[$95 + 4 >> 2] | 0;
   $101 = $__first;
   HEAP32[$101 >> 2] = HEAP32[$95 >> 2];
   HEAP32[$101 + 4 >> 2] = $100;
   $105 = $27;
   HEAP32[$105 >> 2] = $77;
   HEAP32[$105 + 4 >> 2] = $80;
   if (!(FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($28, $27) | 0)) {
    $$0 = 1;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $111 = $27;
   $113 = HEAP32[$111 >> 2] | 0;
   $116 = HEAP32[$111 + 4 >> 2] | 0;
   $117 = $28;
   $122 = HEAP32[$117 + 4 >> 2] | 0;
   $123 = $27;
   HEAP32[$123 >> 2] = HEAP32[$117 >> 2];
   HEAP32[$123 + 4 >> 2] = $122;
   $127 = $28;
   HEAP32[$127 >> 2] = $113;
   HEAP32[$127 + 4 >> 2] = $116;
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 1:
 case 0:
  {
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 2:
  {
   $5 = $__last + -8 | 0;
   if (!(FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($5, $__first) | 0)) {
    $$0 = 1;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $7 = $__first;
   $9 = HEAP32[$7 >> 2] | 0;
   $12 = HEAP32[$7 + 4 >> 2] | 0;
   $13 = $5;
   $18 = HEAP32[$13 + 4 >> 2] | 0;
   $19 = $__first;
   HEAP32[$19 >> 2] = HEAP32[$13 >> 2];
   HEAP32[$19 + 4 >> 2] = $18;
   $23 = $5;
   HEAP32[$23 >> 2] = $9;
   HEAP32[$23 + 4 >> 2] = $12;
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 4:
  {
   __ZNSt3__17__sort4IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_T_($__first, $__first + 8 | 0, $__first + 16 | 0, $__last + -8 | 0, $__comp) | 0;
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 5:
  {
   $134 = $__first + 8 | 0;
   $135 = $__first + 16 | 0;
   $136 = $__first + 24 | 0;
   $137 = $__last + -8 | 0;
   __ZNSt3__17__sort4IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_T_($__first, $134, $135, $136, $__comp) | 0;
   if (!(FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($137, $136) | 0)) {
    $$0 = 1;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $140 = $136;
   $142 = HEAP32[$140 >> 2] | 0;
   $145 = HEAP32[$140 + 4 >> 2] | 0;
   $146 = $137;
   $151 = HEAP32[$146 + 4 >> 2] | 0;
   $152 = $136;
   HEAP32[$152 >> 2] = HEAP32[$146 >> 2];
   HEAP32[$152 + 4 >> 2] = $151;
   $156 = $137;
   HEAP32[$156 >> 2] = $142;
   HEAP32[$156 + 4 >> 2] = $145;
   if (!(FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($136, $135) | 0)) {
    $$0 = 1;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $162 = $135;
   $164 = HEAP32[$162 >> 2] | 0;
   $167 = HEAP32[$162 + 4 >> 2] | 0;
   $168 = $136;
   $173 = HEAP32[$168 + 4 >> 2] | 0;
   $174 = $135;
   HEAP32[$174 >> 2] = HEAP32[$168 >> 2];
   HEAP32[$174 + 4 >> 2] = $173;
   $178 = $136;
   HEAP32[$178 >> 2] = $164;
   HEAP32[$178 + 4 >> 2] = $167;
   if (!(FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($135, $134) | 0)) {
    $$0 = 1;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $184 = $134;
   $186 = HEAP32[$184 >> 2] | 0;
   $189 = HEAP32[$184 + 4 >> 2] | 0;
   $190 = $135;
   $195 = HEAP32[$190 + 4 >> 2] | 0;
   $196 = $134;
   HEAP32[$196 >> 2] = HEAP32[$190 >> 2];
   HEAP32[$196 + 4 >> 2] = $195;
   $200 = $135;
   HEAP32[$200 >> 2] = $186;
   HEAP32[$200 + 4 >> 2] = $189;
   if (!(FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($134, $__first) | 0)) {
    $$0 = 1;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $206 = $__first;
   $208 = HEAP32[$206 >> 2] | 0;
   $211 = HEAP32[$206 + 4 >> 2] | 0;
   $212 = $134;
   $217 = HEAP32[$212 + 4 >> 2] | 0;
   $218 = $__first;
   HEAP32[$218 >> 2] = HEAP32[$212 >> 2];
   HEAP32[$218 + 4 >> 2] = $217;
   $222 = $134;
   HEAP32[$222 >> 2] = $208;
   HEAP32[$222 + 4 >> 2] = $211;
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  }
 default:
  {
   $226 = $__first + 16 | 0;
   $227 = $__first + 8 | 0;
   $229 = FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($227, $__first) | 0;
   $231 = FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($226, $227) | 0;
   do if ($229) {
    $274 = $__first;
    $276 = HEAP32[$274 >> 2] | 0;
    $279 = HEAP32[$274 + 4 >> 2] | 0;
    if ($231) {
     $280 = $226;
     $285 = HEAP32[$280 + 4 >> 2] | 0;
     $286 = $__first;
     HEAP32[$286 >> 2] = HEAP32[$280 >> 2];
     HEAP32[$286 + 4 >> 2] = $285;
     $290 = $226;
     HEAP32[$290 >> 2] = $276;
     HEAP32[$290 + 4 >> 2] = $279;
     break;
    }
    $294 = $227;
    $299 = HEAP32[$294 + 4 >> 2] | 0;
    $300 = $__first;
    HEAP32[$300 >> 2] = HEAP32[$294 >> 2];
    HEAP32[$300 + 4 >> 2] = $299;
    $304 = $227;
    HEAP32[$304 >> 2] = $276;
    HEAP32[$304 + 4 >> 2] = $279;
    if (FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($226, $227) | 0) {
     $310 = $227;
     $312 = HEAP32[$310 >> 2] | 0;
     $315 = HEAP32[$310 + 4 >> 2] | 0;
     $316 = $226;
     $321 = HEAP32[$316 + 4 >> 2] | 0;
     $322 = $227;
     HEAP32[$322 >> 2] = HEAP32[$316 >> 2];
     HEAP32[$322 + 4 >> 2] = $321;
     $326 = $226;
     HEAP32[$326 >> 2] = $312;
     HEAP32[$326 + 4 >> 2] = $315;
    }
   } else if ($231) {
    $232 = $227;
    $234 = HEAP32[$232 >> 2] | 0;
    $237 = HEAP32[$232 + 4 >> 2] | 0;
    $238 = $226;
    $243 = HEAP32[$238 + 4 >> 2] | 0;
    $244 = $227;
    HEAP32[$244 >> 2] = HEAP32[$238 >> 2];
    HEAP32[$244 + 4 >> 2] = $243;
    $248 = $226;
    HEAP32[$248 >> 2] = $234;
    HEAP32[$248 + 4 >> 2] = $237;
    if (FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($227, $__first) | 0) {
     $254 = $__first;
     $256 = HEAP32[$254 >> 2] | 0;
     $259 = HEAP32[$254 + 4 >> 2] | 0;
     $260 = $227;
     $265 = HEAP32[$260 + 4 >> 2] | 0;
     $266 = $__first;
     HEAP32[$266 >> 2] = HEAP32[$260 >> 2];
     HEAP32[$266 + 4 >> 2] = $265;
     $270 = $227;
     HEAP32[$270 >> 2] = $256;
     HEAP32[$270 + 4 >> 2] = $259;
    }
   } while (0);
   $330 = $__first + 24 | 0;
   if (($330 | 0) == ($__last | 0)) {
    $$0 = 1;
    STACKTOP = sp;
    return $$0 | 0;
   } else {
    $__count$05 = 0;
    $__i$06 = $330;
    $__j$04 = $226;
   }
   while (1) {
    if (FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($__i$06, $__j$04) | 0) {
     $334 = $__i$06;
     $339 = HEAP32[$334 + 4 >> 2] | 0;
     $340 = $__t;
     HEAP32[$340 >> 2] = HEAP32[$334 >> 2];
     HEAP32[$340 + 4 >> 2] = $339;
     $__j$1 = $__i$06;
     $__k$0 = $__j$04;
     while (1) {
      $344 = $__k$0;
      $349 = HEAP32[$344 + 4 >> 2] | 0;
      $350 = $__j$1;
      HEAP32[$350 >> 2] = HEAP32[$344 >> 2];
      HEAP32[$350 + 4 >> 2] = $349;
      if (($__k$0 | 0) == ($__first | 0)) break;
      $356 = $__k$0 + -8 | 0;
      if (FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($__t, $356) | 0) {
       $__j$1$phi = $__k$0;
       $__k$0 = $356;
       $__j$1 = $__j$1$phi;
      } else break;
     }
     $358 = $__t;
     $363 = HEAP32[$358 + 4 >> 2] | 0;
     $364 = $__k$0;
     HEAP32[$364 >> 2] = HEAP32[$358 >> 2];
     HEAP32[$364 + 4 >> 2] = $363;
     $368 = $__count$05 + 1 | 0;
     if (($368 | 0) == 8) break; else $__count$1 = $368;
    } else $__count$1 = $__count$05;
    $372 = $__i$06 + 8 | 0;
    if (($372 | 0) == ($__last | 0)) {
     $$0 = 1;
     label = 34;
     break;
    } else {
     $__j$04$phi = $__i$06;
     $__count$05 = $__count$1;
     $__i$06 = $372;
     $__j$04 = $__j$04$phi;
    }
   }
   if ((label | 0) == 34) {
    STACKTOP = sp;
    return $$0 | 0;
   }
   $$0 = ($__i$06 + 8 | 0) == ($__last | 0);
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 return 0;
}

function _luaD_precall($L, $func, $nresults) {
 $L = $L | 0;
 $func = $func | 0;
 $nresults = $nresults | 0;
 var $$$$i = 0, $$$$i$i = 0, $$$$i4 = 0, $$$$i9 = 0, $$$i = 0, $$$i$i = 0, $$$i3 = 0, $$$i8 = 0, $$0 = 0, $$0$i = 0, $$1$i = 0, $$25$i = 0, $$idx$val = 0, $$pn = 0, $$pre$phi$iZ2D = 0, $$pre3$i = 0, $$sum$i = 0, $$sum$i16 = 0, $0 = 0, $1 = 0, $10 = 0, $103 = 0, $105 = 0, $107 = 0, $108 = 0, $113 = 0, $115 = 0, $117 = 0, $122 = 0, $123 = 0, $127 = 0, $128 = 0, $132 = 0, $134 = 0, $135 = 0, $141 = 0, $143 = 0, $145 = 0, $147 = 0, $150 = 0, $152 = 0, $159 = 0, $16 = 0, $160 = 0, $166 = 0, $168 = 0, $173 = 0, $174 = 0, $181 = 0, $183 = 0, $188 = 0, $189 = 0, $19 = 0, $197 = 0, $2 = 0, $200 = 0, $203 = 0, $209 = 0, $213 = 0, $214 = 0, $227 = 0, $23 = 0, $24 = 0, $247 = 0, $250 = 0, $254 = 0, $255 = 0, $259 = 0, $260 = 0, $261 = 0, $266 = 0, $269 = 0, $274 = 0, $275 = 0, $28 = 0, $281 = 0, $282 = 0, $287 = 0, $288 = 0, $3 = 0, $31 = 0, $34 = 0, $4 = 0, $48 = 0, $5 = 0, $52 = 0, $55 = 0, $56 = 0, $58 = 0, $6 = 0, $66 = 0, $69 = 0, $7 = 0, $74 = 0, $76 = 0, $83 = 0, $84 = 0, $89 = 0, $90 = 0, $94 = 0, $base$0 = 0, $f$0 = 0, $f$0$in = 0, $func$tr = 0, $hook$0$i = 0, $i$03$i = 0, $i$11$i = 0, $n$0$lcssa = 0, $n$017 = 0, $p$01$i = 0, $res$04$i = 0, $res$1$lcssa$i = 0, $res$12$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0, $p$01$i$looptemp = 0, $132$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer5 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $0 = $L + 28 | 0;
 $1 = $L + 24 | 0;
 $2 = $L + 8 | 0;
 $3 = $L + 92 | 0;
 $func$tr = $func;
 while (1) {
  $4 = HEAP32[$0 >> 2] | 0;
  $5 = $func$tr;
  $6 = $4;
  $7 = $5 - $6 | 0;
  $10 = HEAP32[$func$tr + 4 >> 2] & 63;
  if (($10 | 0) == 6) {
   label = 31;
   break;
  } else if (($10 | 0) == 22) {
   label = 3;
   break;
  } else if (($10 | 0) == 38) {
   label = 4;
   break;
  }
  $247 = HEAP32[$2 >> 2] | 0;
  if (((HEAP32[$1 >> 2] | 0) - $247 | 0) < 16) {
   $250 = HEAP32[$3 >> 2] | 0;
   if (($250 | 0) > 1e6) {
    label = 63;
    break;
   }
   $254 = ($247 - $6 >> 3) + 6 | 0;
   $255 = $250 << 1;
   $$$i8 = ($255 | 0) > 1e6 ? 1e6 : $255;
   $$$$i9 = ($$$i8 | 0) < ($254 | 0) ? $254 : $$$i8;
   if (($$$$i9 | 0) > 1e6) {
    label = 65;
    break;
   }
   _luaD_reallocstack($L, $$$$i9);
   $260 = HEAP32[$0 >> 2] | 0;
  } else $260 = $4;
  $259 = $260 + $7 | 0;
  $261 = _luaT_gettmbyobj($L, $259, 23) | 0;
  if ((HEAP32[$261 + 4 >> 2] & 15 | 0) != 6) {
   label = 68;
   break;
  }
  $266 = HEAP32[$2 >> 2] | 0;
  if ($266 >>> 0 > $259 >>> 0) {
   $p$01$i = $266;
   do {
    $p$01$i$looptemp = $p$01$i;
    $p$01$i = $p$01$i + -8 | 0;
    $269 = $p$01$i;
    $274 = HEAP32[$269 + 4 >> 2] | 0;
    $275 = $p$01$i$looptemp;
    HEAP32[$275 >> 2] = HEAP32[$269 >> 2];
    HEAP32[$275 + 4 >> 2] = $274;
   } while ($p$01$i >>> 0 > $259 >>> 0);
   $281 = HEAP32[$2 >> 2] | 0;
  } else $281 = $266;
  HEAP32[$2 >> 2] = $281 + 8;
  $282 = $261;
  $287 = HEAP32[$282 + 4 >> 2] | 0;
  $288 = $259;
  HEAP32[$288 >> 2] = HEAP32[$282 >> 2];
  HEAP32[$288 + 4 >> 2] = $287;
  $func$tr = $259;
 }
 if ((label | 0) == 3) $f$0$in = $func$tr; else if ((label | 0) == 4) $f$0$in = (HEAP32[$func$tr >> 2] | 0) + 12 | 0; else if ((label | 0) == 31) {
  $103 = HEAP32[(HEAP32[$func$tr >> 2] | 0) + 12 >> 2] | 0;
  $105 = HEAP32[$2 >> 2] | 0;
  $107 = $105 - $5 >> 3;
  $108 = $107 + -1 | 0;
  $113 = $103 + 8 | 0;
  $115 = HEAPU8[$113 >> 0] | 0;
  do if (((HEAP32[$1 >> 2] | 0) - $105 >> 3 | 0) <= ($115 | 0)) {
   $117 = HEAP32[$3 >> 2] | 0;
   if (($117 | 0) > 1e6) _luaD_throw($L, 6);
   $122 = $115 + 5 + ($105 - $6 >> 3) | 0;
   $123 = $117 << 1;
   $$$i3 = ($123 | 0) > 1e6 ? 1e6 : $123;
   $$$$i4 = ($$$i3 | 0) < ($122 | 0) ? $122 : $$$i3;
   if (($$$$i4 | 0) > 1e6) {
    _luaD_reallocstack($L, 1000200);
    _luaG_runerror($L, 56208, $vararg_buffer1);
   } else {
    _luaD_reallocstack($L, $$$$i4);
    break;
   }
  } while (0);
  $127 = $103 + 6 | 0;
  $128 = HEAP8[$127 >> 0] | 0;
  if (($107 | 0) > ($128 & 255 | 0)) {
   $$idx$val = $128;
   $n$0$lcssa = $108;
  } else {
   $132 = HEAP32[$2 >> 2] | 0;
   $n$017 = $108;
   while (1) {
    $132$looptemp = $132;
    $132 = $132 + 8 | 0;
    HEAP32[$2 >> 2] = $132;
    HEAP32[$132$looptemp + 4 >> 2] = 0;
    $134 = $n$017 + 1 | 0;
    $135 = HEAP8[$127 >> 0] | 0;
    if (($134 | 0) >= ($135 & 255 | 0)) {
     $$idx$val = $135;
     $n$0$lcssa = $134;
     break;
    } else $n$017 = $134;
   }
  }
  if (!(HEAP8[$103 + 7 >> 0] | 0)) {
   $141 = HEAP32[$0 >> 2] | 0;
   $$pn = $141;
   $base$0 = $141 + ($7 + 8) | 0;
  } else {
   $143 = $$idx$val & 255;
   $145 = HEAP32[$2 >> 2] | 0;
   $147 = $145;
   $150 = HEAPU8[$113 >> 0] | 0;
   do if (((HEAP32[$1 >> 2] | 0) - $147 >> 3 | 0) > ($150 | 0)) $166 = $145; else {
    $152 = HEAP32[$3 >> 2] | 0;
    if (($152 | 0) > 1e6) _luaD_throw($L, 6);
    $159 = $150 + 5 + ($147 - (HEAP32[$0 >> 2] | 0) >> 3) | 0;
    $160 = $152 << 1;
    $$$i$i = ($160 | 0) > 1e6 ? 1e6 : $160;
    $$$$i$i = ($$$i$i | 0) < ($159 | 0) ? $159 : $$$i$i;
    if (($$$$i$i | 0) > 1e6) {
     _luaD_reallocstack($L, 1000200);
     _luaG_runerror($L, 56208, $vararg_buffer3);
    } else {
     _luaD_reallocstack($L, $$$$i$i);
     $166 = HEAP32[$2 >> 2] | 0;
     break;
    }
   } while (0);
   if ($$idx$val << 24 >> 24) {
    HEAP32[$2 >> 2] = $166 + 8;
    $$sum$i16 = 0 - $n$0$lcssa | 0;
    $168 = $166 + ($$sum$i16 << 3) | 0;
    $173 = HEAP32[$168 + 4 >> 2] | 0;
    $174 = $166;
    HEAP32[$174 >> 2] = HEAP32[$168 >> 2];
    HEAP32[$174 + 4 >> 2] = $173;
    HEAP32[$166 + ($$sum$i16 << 3) + 4 >> 2] = 0;
    if (($$idx$val & 255) > 1) {
     $181 = 1;
     do {
      $$pre3$i = HEAP32[$2 >> 2] | 0;
      HEAP32[$2 >> 2] = $$pre3$i + 8;
      $$sum$i = $181 - $n$0$lcssa | 0;
      $183 = $166 + ($$sum$i << 3) | 0;
      $188 = HEAP32[$183 + 4 >> 2] | 0;
      $189 = $$pre3$i;
      HEAP32[$189 >> 2] = HEAP32[$183 >> 2];
      HEAP32[$189 + 4 >> 2] = $188;
      HEAP32[$166 + ($$sum$i << 3) + 4 >> 2] = 0;
      $181 = $181 + 1 | 0;
     } while (($181 | 0) < ($143 | 0));
    }
   }
   $$pn = HEAP32[$0 >> 2] | 0;
   $base$0 = $166;
  }
  $197 = $L + 16 | 0;
  $200 = HEAP32[(HEAP32[$197 >> 2] | 0) + 12 >> 2] | 0;
  if (!$200) $203 = _luaE_extendCI($L) | 0; else $203 = $200;
  HEAP32[$197 >> 2] = $203;
  HEAP16[$203 + 32 >> 1] = $nresults;
  HEAP32[$203 >> 2] = $$pn + $7;
  HEAP32[$203 + 16 >> 2] = $base$0;
  $209 = $base$0 + (HEAPU8[$113 >> 0] << 3) | 0;
  HEAP32[$203 + 4 >> 2] = $209;
  $213 = $203 + 20 | 0;
  HEAP32[$213 >> 2] = HEAP32[$103 + 48 >> 2];
  $214 = $203 + 34 | 0;
  HEAP8[$214 >> 0] = 2;
  HEAP32[$2 >> 2] = $209;
  if ((HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 12 >> 2] | 0) > 0) _luaC_step($L);
  if (!(HEAP8[$L + 108 >> 0] & 1)) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  HEAP32[$213 >> 2] = (HEAP32[$213 >> 2] | 0) + 4;
  $227 = HEAP32[$203 + 8 >> 2] | 0;
  if (!(HEAP8[$227 + 34 >> 0] & 2)) $hook$0$i = 0; else if ((HEAP32[(HEAP32[$227 + 20 >> 2] | 0) + -4 >> 2] & 63 | 0) == 37) {
   HEAP8[$214 >> 0] = HEAPU8[$214 >> 0] | 32;
   $hook$0$i = 4;
  } else $hook$0$i = 0;
  _luaD_hook($L, $hook$0$i, -1);
  HEAP32[$213 >> 2] = (HEAP32[$213 >> 2] | 0) + -4;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else if ((label | 0) == 63) _luaD_throw($L, 6); else if ((label | 0) == 65) {
  _luaD_reallocstack($L, 1000200);
  _luaG_runerror($L, 56208, $vararg_buffer5);
 } else if ((label | 0) == 68) _luaG_typeerror($L, $259, 66600);
 $f$0 = HEAP32[$f$0$in >> 2] | 0;
 $16 = HEAP32[$2 >> 2] | 0;
 do if (((HEAP32[$1 >> 2] | 0) - $16 | 0) < 168) {
  $19 = HEAP32[$3 >> 2] | 0;
  if (($19 | 0) > 1e6) _luaD_throw($L, 6);
  $23 = ($16 - $6 >> 3) + 25 | 0;
  $24 = $19 << 1;
  $$$i = ($24 | 0) > 1e6 ? 1e6 : $24;
  $$$$i = ($$$i | 0) < ($23 | 0) ? $23 : $$$i;
  if (($$$$i | 0) > 1e6) {
   _luaD_reallocstack($L, 1000200);
   _luaG_runerror($L, 56208, $vararg_buffer);
  } else {
   _luaD_reallocstack($L, $$$$i);
   break;
  }
 } while (0);
 $28 = $L + 16 | 0;
 $31 = HEAP32[(HEAP32[$28 >> 2] | 0) + 12 >> 2] | 0;
 if (!$31) $34 = _luaE_extendCI($L) | 0; else $34 = $31;
 HEAP32[$28 >> 2] = $34;
 HEAP16[$34 + 32 >> 1] = $nresults;
 HEAP32[$34 >> 2] = (HEAP32[$0 >> 2] | 0) + $7;
 HEAP32[$34 + 4 >> 2] = (HEAP32[$2 >> 2] | 0) + 160;
 HEAP8[$34 + 34 >> 0] = 0;
 if ((HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 12 >> 2] | 0) > 0) _luaC_step($L);
 $48 = $L + 108 | 0;
 if (HEAP8[$48 >> 0] & 1) _luaD_hook($L, 0, -1);
 $52 = FUNCTION_TABLE_ii[$f$0 & 511]($L) | 0;
 $55 = (HEAP32[$2 >> 2] | 0) + (0 - $52 << 3) | 0;
 $56 = HEAP32[$28 >> 2] | 0;
 $58 = HEAPU8[$48 >> 0] | 0;
 if (!($58 & 6)) {
  $$1$i = $55;
  $$pre$phi$iZ2D = $56 + 8 | 0;
 } else {
  if (!($58 & 2)) $$0$i = $55; else {
   $66 = $55 - (HEAP32[$0 >> 2] | 0) | 0;
   _luaD_hook($L, 1, -1);
   $$0$i = (HEAP32[$0 >> 2] | 0) + $66 | 0;
  }
  $69 = $56 + 8 | 0;
  HEAP32[$L + 20 >> 2] = HEAP32[(HEAP32[$69 >> 2] | 0) + 20 >> 2];
  $$1$i = $$0$i;
  $$pre$phi$iZ2D = $69;
 }
 $74 = HEAP32[$56 >> 2] | 0;
 $76 = HEAP16[$56 + 32 >> 1] | 0;
 HEAP32[$28 >> 2] = HEAP32[$$pre$phi$iZ2D >> 2];
 L94 : do if (!($76 << 16 >> 16)) $res$1$lcssa$i = $74; else {
  $$25$i = $$1$i;
  $i$03$i = $76 << 16 >> 16;
  $res$04$i = $74;
  while (1) {
   if ($$25$i >>> 0 >= (HEAP32[$2 >> 2] | 0) >>> 0) break;
   $83 = $res$04$i + 8 | 0;
   $84 = $$25$i;
   $89 = HEAP32[$84 + 4 >> 2] | 0;
   $90 = $res$04$i;
   HEAP32[$90 >> 2] = HEAP32[$84 >> 2];
   HEAP32[$90 + 4 >> 2] = $89;
   $94 = $i$03$i + -1 | 0;
   if (!$94) {
    $res$1$lcssa$i = $83;
    break L94;
   }
   $$25$i = $$25$i + 8 | 0;
   $i$03$i = $94;
   $res$04$i = $83;
  }
  if (($i$03$i | 0) > 0) {
   $i$11$i = $i$03$i;
   $res$12$i = $res$04$i;
   while (1) {
    $i$11$i = $i$11$i + -1 | 0;
    HEAP32[$res$12$i + 4 >> 2] = 0;
    if (($i$11$i | 0) <= 0) break; else $res$12$i = $res$12$i + 8 | 0;
   }
   $res$1$lcssa$i = $res$04$i + ($i$03$i << 3) | 0;
  } else $res$1$lcssa$i = $res$04$i;
 } while (0);
 HEAP32[$2 >> 2] = $res$1$lcssa$i;
 $$0 = 1;
 STACKTOP = sp;
 return $$0 | 0;
}

function _read_numeral($ls, $seminfo) {
 $ls = $ls | 0;
 $seminfo = $seminfo | 0;
 var $$0 = 0, $$in$i = 0, $$in$i$i = 0, $$in$i1$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $103 = 0, $104 = 0, $107 = 0, $110 = 0, $113 = 0, $115 = 0, $116 = 0, $117 = 0, $120 = 0, $121 = 0, $126 = 0, $128 = 0, $133 = 0, $134 = 0, $135 = 0, $137 = 0, $138 = 0, $14 = 0, $141 = 0, $144 = 0, $147 = 0, $149 = 0, $150 = 0, $151 = 0, $154 = 0, $155 = 0, $161 = 0, $162 = 0, $163 = 0, $165 = 0, $166 = 0, $167 = 0, $169 = 0, $17 = 0, $172 = 0, $174 = 0, $176 = 0, $177 = 0, $178 = 0, $181 = 0, $182 = 0, $188 = 0, $19 = 0, $191 = 0, $193 = 0, $195 = 0, $196 = 0, $197 = 0, $199 = 0, $2 = 0, $20 = 0, $201 = 0, $202 = 0, $205 = 0, $21 = 0, $213 = 0, $216 = 0, $218 = 0, $22 = 0, $220 = 0, $221 = 0, $224 = 0, $232 = 0, $234 = 0, $236 = 0, $237 = 0, $240 = 0, $249 = 0, $25 = 0, $26 = 0, $3 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $4 = 0, $41 = 0, $45 = 0, $48 = 0, $50 = 0, $51 = 0, $52 = 0, $55 = 0, $56 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $66 = 0, $7 = 0, $71 = 0, $72 = 0, $73 = 0, $75 = 0, $76 = 0, $79 = 0, $82 = 0, $85 = 0, $87 = 0, $88 = 0, $89 = 0, $92 = 0, $93 = 0, $98 = 0, $99 = 0, $expo$0$ph = 0, $obj = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $obj = sp;
 $0 = HEAP32[$ls >> 2] | 0;
 $1 = $ls + 40 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $2 + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $6 = $2 + 8 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 do if (($4 + 1 | 0) >>> 0 > $7 >>> 0) if ($7 >>> 0 > 1073741822) _lexerror($ls, 67216, 0); else {
  $10 = $7 << 1;
  $14 = _luaM_realloc_(HEAP32[$ls + 32 >> 2] | 0, HEAP32[$2 >> 2] | 0, $7, $10) | 0;
  HEAP32[$2 >> 2] = $14;
  HEAP32[$6 >> 2] = $10;
  $17 = HEAP32[$3 >> 2] | 0;
  $19 = $14;
  break;
 } else {
  $17 = $4;
  $19 = HEAP32[$2 >> 2] | 0;
 } while (0);
 HEAP32[$3 >> 2] = $17 + 1;
 HEAP8[$19 + $17 >> 0] = $0;
 $20 = $ls + 36 | 0;
 $21 = HEAP32[$20 >> 2] | 0;
 $22 = HEAP32[$21 >> 2] | 0;
 HEAP32[$21 >> 2] = $22 + -1;
 if (!$22) $31 = _luaZ_fill($21) | 0; else {
  $25 = $21 + 4 | 0;
  $26 = HEAP32[$25 >> 2] | 0;
  HEAP32[$25 >> 2] = $26 + 1;
  $31 = HEAPU8[$26 >> 0] | 0;
 }
 HEAP32[$ls >> 2] = $31;
 if (($0 | 0) == 48) if (($31 | 0) == 88 | ($31 | 0) == 120) {
  $33 = HEAP32[$1 >> 2] | 0;
  $34 = $33 + 4 | 0;
  $35 = HEAP32[$34 >> 2] | 0;
  $37 = $33 + 8 | 0;
  $38 = HEAP32[$37 >> 2] | 0;
  do if (($35 + 1 | 0) >>> 0 > $38 >>> 0) if ($38 >>> 0 > 1073741822) _lexerror($ls, 67216, 0); else {
   $41 = $38 << 1;
   $45 = _luaM_realloc_(HEAP32[$ls + 32 >> 2] | 0, HEAP32[$33 >> 2] | 0, $38, $41) | 0;
   HEAP32[$33 >> 2] = $45;
   HEAP32[$37 >> 2] = $41;
   $48 = HEAP32[$34 >> 2] | 0;
   $50 = $45;
   break;
  } else {
   $48 = $35;
   $50 = HEAP32[$33 >> 2] | 0;
  } while (0);
  HEAP32[$34 >> 2] = $48 + 1;
  HEAP8[$50 + $48 >> 0] = $31;
  $51 = HEAP32[$20 >> 2] | 0;
  $52 = HEAP32[$51 >> 2] | 0;
  HEAP32[$51 >> 2] = $52 + -1;
  if (!$52) $61 = _luaZ_fill($51) | 0; else {
   $55 = $51 + 4 | 0;
   $56 = HEAP32[$55 >> 2] | 0;
   HEAP32[$55 >> 2] = $56 + 1;
   $61 = HEAPU8[$56 >> 0] | 0;
  }
  HEAP32[$ls >> 2] = $61;
  $249 = $61;
  $expo$0$ph = 67184;
 } else {
  $249 = $31;
  $expo$0$ph = 67176;
 } else {
  $249 = $31;
  $expo$0$ph = 67176;
 }
 $62 = $ls + 32 | 0;
 $63 = $expo$0$ph + 1 | 0;
 $66 = $249;
 L27 : while (1) {
  if (($66 | 0) == (HEAP8[$expo$0$ph >> 0] | 0)) label = 23; else if (($66 | 0) == (HEAP8[$63 >> 0] | 0)) label = 23; else $128 = $66;
  if ((label | 0) == 23) {
   label = 0;
   $71 = HEAP32[$1 >> 2] | 0;
   $72 = $71 + 4 | 0;
   $73 = HEAP32[$72 >> 2] | 0;
   $75 = $71 + 8 | 0;
   $76 = HEAP32[$75 >> 2] | 0;
   if (($73 + 1 | 0) >>> 0 > $76 >>> 0) {
    if ($76 >>> 0 > 1073741822) {
     label = 26;
     break;
    }
    $79 = $76 << 1;
    $82 = _luaM_realloc_(HEAP32[$62 >> 2] | 0, HEAP32[$71 >> 2] | 0, $76, $79) | 0;
    HEAP32[$71 >> 2] = $82;
    HEAP32[$75 >> 2] = $79;
    $85 = HEAP32[$72 >> 2] | 0;
    $87 = $82;
   } else {
    $85 = $73;
    $87 = HEAP32[$71 >> 2] | 0;
   }
   HEAP32[$72 >> 2] = $85 + 1;
   HEAP8[$87 + $85 >> 0] = $66;
   $88 = HEAP32[$20 >> 2] | 0;
   $89 = HEAP32[$88 >> 2] | 0;
   HEAP32[$88 >> 2] = $89 + -1;
   if (!$89) $98 = _luaZ_fill($88) | 0; else {
    $92 = $88 + 4 | 0;
    $93 = HEAP32[$92 >> 2] | 0;
    HEAP32[$92 >> 2] = $93 + 1;
    $98 = HEAPU8[$93 >> 0] | 0;
   }
   HEAP32[$ls >> 2] = $98;
   if (($98 | 0) == 43 | ($98 | 0) == 45) {
    $99 = HEAP32[$1 >> 2] | 0;
    $100 = $99 + 4 | 0;
    $101 = HEAP32[$100 >> 2] | 0;
    $103 = $99 + 8 | 0;
    $104 = HEAP32[$103 >> 2] | 0;
    if (($101 + 1 | 0) >>> 0 > $104 >>> 0) {
     if ($104 >>> 0 > 1073741822) {
      label = 35;
      break;
     }
     $107 = $104 << 1;
     $110 = _luaM_realloc_(HEAP32[$62 >> 2] | 0, HEAP32[$99 >> 2] | 0, $104, $107) | 0;
     HEAP32[$99 >> 2] = $110;
     HEAP32[$103 >> 2] = $107;
     $113 = HEAP32[$100 >> 2] | 0;
     $115 = $110;
    } else {
     $113 = $101;
     $115 = HEAP32[$99 >> 2] | 0;
    }
    HEAP32[$100 >> 2] = $113 + 1;
    HEAP8[$115 + $113 >> 0] = $98;
    $116 = HEAP32[$20 >> 2] | 0;
    $117 = HEAP32[$116 >> 2] | 0;
    HEAP32[$116 >> 2] = $117 + -1;
    if (!$117) $126 = _luaZ_fill($116) | 0; else {
     $120 = $116 + 4 | 0;
     $121 = HEAP32[$120 >> 2] | 0;
     HEAP32[$120 >> 2] = $121 + 1;
     $126 = HEAPU8[$121 >> 0] | 0;
    }
    HEAP32[$ls >> 2] = $126;
    $128 = $126;
   } else $128 = $98;
  }
  do if (!(HEAP8[$128 + 65881 >> 0] & 16)) {
   $161 = HEAP32[$1 >> 2] | 0;
   $162 = $161 + 4 | 0;
   $163 = HEAP32[$162 >> 2] | 0;
   $165 = $161 + 8 | 0;
   $166 = HEAP32[$165 >> 2] | 0;
   $167 = ($163 + 1 | 0) >>> 0 > $166 >>> 0;
   if (($128 | 0) != 46) {
    label = 60;
    break L27;
   }
   if ($167) {
    if ($166 >>> 0 > 1073741822) {
     label = 54;
     break L27;
    }
    $169 = $166 << 1;
    $172 = _luaM_realloc_(HEAP32[$62 >> 2] | 0, HEAP32[$161 >> 2] | 0, $166, $169) | 0;
    HEAP32[$161 >> 2] = $172;
    HEAP32[$165 >> 2] = $169;
    $174 = HEAP32[$162 >> 2] | 0;
    $176 = $172;
   } else {
    $174 = $163;
    $176 = HEAP32[$161 >> 2] | 0;
   }
   HEAP32[$162 >> 2] = $174 + 1;
   HEAP8[$176 + $174 >> 0] = 46;
   $177 = HEAP32[$20 >> 2] | 0;
   $178 = HEAP32[$177 >> 2] | 0;
   HEAP32[$177 >> 2] = $178 + -1;
   if (!$178) {
    $storemerge = _luaZ_fill($177) | 0;
    break;
   } else {
    $181 = $177 + 4 | 0;
    $182 = HEAP32[$181 >> 2] | 0;
    HEAP32[$181 >> 2] = $182 + 1;
    $storemerge = HEAPU8[$182 >> 0] | 0;
    break;
   }
  } else {
   $133 = HEAP32[$1 >> 2] | 0;
   $134 = $133 + 4 | 0;
   $135 = HEAP32[$134 >> 2] | 0;
   $137 = $133 + 8 | 0;
   $138 = HEAP32[$137 >> 2] | 0;
   if (($135 + 1 | 0) >>> 0 > $138 >>> 0) {
    if ($138 >>> 0 > 1073741822) {
     label = 45;
     break L27;
    }
    $141 = $138 << 1;
    $144 = _luaM_realloc_(HEAP32[$62 >> 2] | 0, HEAP32[$133 >> 2] | 0, $138, $141) | 0;
    HEAP32[$133 >> 2] = $144;
    HEAP32[$137 >> 2] = $141;
    $147 = HEAP32[$134 >> 2] | 0;
    $149 = $144;
   } else {
    $147 = $135;
    $149 = HEAP32[$133 >> 2] | 0;
   }
   HEAP32[$134 >> 2] = $147 + 1;
   HEAP8[$149 + $147 >> 0] = $128;
   $150 = HEAP32[$20 >> 2] | 0;
   $151 = HEAP32[$150 >> 2] | 0;
   HEAP32[$150 >> 2] = $151 + -1;
   if (!$151) {
    $storemerge = _luaZ_fill($150) | 0;
    break;
   } else {
    $154 = $150 + 4 | 0;
    $155 = HEAP32[$154 >> 2] | 0;
    HEAP32[$154 >> 2] = $155 + 1;
    $storemerge = HEAPU8[$155 >> 0] | 0;
    break;
   }
  } while (0);
  HEAP32[$ls >> 2] = $storemerge;
  $66 = $storemerge;
 }
 if ((label | 0) == 26) _lexerror($ls, 67216, 0); else if ((label | 0) == 35) _lexerror($ls, 67216, 0); else if ((label | 0) == 45) _lexerror($ls, 67216, 0); else if ((label | 0) == 54) _lexerror($ls, 67216, 0); else if ((label | 0) == 60) {
  do if ($167) if ($166 >>> 0 > 1073741822) _lexerror($ls, 67216, 0); else {
   $188 = $166 << 1;
   $191 = _luaM_realloc_(HEAP32[$62 >> 2] | 0, HEAP32[$161 >> 2] | 0, $166, $188) | 0;
   HEAP32[$161 >> 2] = $191;
   HEAP32[$165 >> 2] = $188;
   $193 = HEAP32[$162 >> 2] | 0;
   $195 = $191;
   break;
  } else {
   $193 = $163;
   $195 = HEAP32[$161 >> 2] | 0;
  } while (0);
  HEAP32[$162 >> 2] = $193 + 1;
  HEAP8[$195 + $193 >> 0] = 0;
  $196 = $ls + 60 | 0;
  $197 = HEAP8[$196 >> 0] | 0;
  if ($197 << 24 >> 24 != 46) {
   $199 = HEAP32[$1 >> 2] | 0;
   $201 = HEAP32[$199 + 4 >> 2] | 0;
   $202 = HEAP32[$199 >> 2] | 0;
   if ($201) {
    $$in$i = $201;
    do {
     $$in$i = $$in$i + -1 | 0;
     $205 = $202 + $$in$i | 0;
     if ((HEAP8[$205 >> 0] | 0) == 46) HEAP8[$205 >> 0] = $197;
    } while (($$in$i | 0) != 0);
   }
  }
  if (!(_luaO_str2num(HEAP32[HEAP32[$1 >> 2] >> 2] | 0, $obj) | 0)) {
   $213 = HEAP8[$196 >> 0] | 0;
   $216 = HEAP8[HEAP32[(_localeconv() | 0) >> 2] >> 0] | 0;
   HEAP8[$196 >> 0] = $216;
   if ($213 << 24 >> 24 != $216 << 24 >> 24) {
    $218 = HEAP32[$1 >> 2] | 0;
    $220 = HEAP32[$218 + 4 >> 2] | 0;
    $221 = HEAP32[$218 >> 2] | 0;
    if ($220) {
     $$in$i$i = $220;
     do {
      $$in$i$i = $$in$i$i + -1 | 0;
      $224 = $221 + $$in$i$i | 0;
      if ((HEAP8[$224 >> 0] | 0) == $213 << 24 >> 24) HEAP8[$224 >> 0] = $216;
     } while (($$in$i$i | 0) != 0);
    }
   }
   if (!(_luaO_str2num(HEAP32[HEAP32[$1 >> 2] >> 2] | 0, $obj) | 0)) {
    $232 = HEAP8[$196 >> 0] | 0;
    if ($232 << 24 >> 24 == 46) _lexerror($ls, 67192, 290);
    $234 = HEAP32[$1 >> 2] | 0;
    $236 = HEAP32[$234 + 4 >> 2] | 0;
    $237 = HEAP32[$234 >> 2] | 0;
    if (!$236) _lexerror($ls, 67192, 290); else $$in$i1$i = $236;
    do {
     $$in$i1$i = $$in$i1$i + -1 | 0;
     $240 = $237 + $$in$i1$i | 0;
     if ((HEAP8[$240 >> 0] | 0) == $232 << 24 >> 24) HEAP8[$240 >> 0] = 46;
    } while (($$in$i1$i | 0) != 0);
    _lexerror($ls, 67192, 290);
   }
  }
  if ((HEAP32[$obj + 4 >> 2] | 0) == 19) {
   HEAP32[$seminfo >> 2] = HEAP32[$obj >> 2];
   $$0 = 291;
   STACKTOP = sp;
   return $$0 | 0;
  } else {
   HEAPF32[$seminfo >> 2] = +HEAPF32[$obj >> 2];
   $$0 = 290;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 return 0;
}

function _qsort($base, $nel, $width, $cmp) {
 $base = $base | 0;
 $nel = $nel | 0;
 $width = $width | 0;
 $cmp = $cmp | 0;
 var $$ = 0, $$0$be$i = 0, $$0$be$i21 = 0, $$0$i49 = 0, $$01$be$i = 0, $$01$be$i20 = 0, $$012$i = 0, $$012$i17 = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$us$i = 0, $$02$us$i34 = 0, $$03$i = 0, $$03$i16 = 0, $$69 = 0, $$lcssa = 0, $$lcssa72 = 0, $$lcssa73 = 0, $$lcssa95 = 0, $$sum = 0, $0 = 0, $10 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $114 = 0, $115 = 0, $119 = 0, $124 = 0, $128 = 0, $13 = 0, $134 = 0, $137 = 0, $139 = 0, $14 = 0, $141 = 0, $146 = 0, $147 = 0, $154 = 0, $156 = 0, $157 = 0, $159 = 0, $16 = 0, $162 = 0, $166 = 0, $170 = 0, $19 = 0, $20 = 0, $23 = 0, $24 = 0, $31 = 0, $32 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $4$phi = 0, $45 = 0, $48 = 0, $49 = 0, $5 = 0, $52 = 0, $56 = 0, $6 = 0, $63 = 0, $64 = 0, $67 = 0, $68 = 0, $75 = 0, $76 = 0, $80 = 0, $81 = 0, $83 = 0, $89 = 0, $92 = 0, $93 = 0, $99 = 0, $ar$i = 0, $head$0$lcssa = 0, $head$078 = 0, $head$176 = 0, $i$0 = 0, $i$0$lcssa$i = 0, $i$0$lcssa$i25 = 0, $i$01$us$i = 0, $i$01$us$i32 = 0, $i$04$i = 0, $i$04$i15 = 0, $lp = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $nTrailingZeros$03$i2$i$lcssa = 0, $pshift$0$lcssa = 0, $pshift$079 = 0, $pshift$1 = 0, $pshift$277 = 0, $tmp$i28 = 0, label = 0, sp = 0, $45$looptemp = 0, $i$01$us$i$looptemp = 0, $89$looptemp = 0, $i$01$us$i32$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 688 | 0;
 $tmp$i28 = sp + 424 | 0;
 $ar$i = sp + 192 | 0;
 $lp = sp;
 $0 = Math_imul($width, $nel) | 0;
 if (!$0) {
  STACKTOP = sp;
  return;
 }
 $$sum = $0 - $width | 0;
 HEAP32[$lp + 4 >> 2] = $width;
 HEAP32[$lp >> 2] = $width;
 $4 = $width;
 $6 = $width;
 $i$0 = 2;
 while (1) {
  $5 = $4 + $width + $6 | 0;
  HEAP32[$lp + ($i$0 << 2) >> 2] = $5;
  if ($5 >>> 0 < $0 >>> 0) {
   $4$phi = $6;
   $6 = $5;
   $i$0 = $i$0 + 1 | 0;
   $4 = $4$phi;
  } else break;
 }
 $10 = 0 - $width | 0;
 $11 = $base + $$sum | 0;
 if (($$sum | 0) > 0) {
  $13 = ($width | 0) == 0;
  $14 = $11;
  $16 = 1;
  $52 = 0;
  $head$078 = $base;
  $pshift$079 = 1;
  while (1) {
   do if (($16 & 3 | 0) == 3) {
    HEAP32[$ar$i >> 2] = $head$078;
    L43 : do if (($pshift$079 | 0) > 1) {
     $$012$i = $pshift$079;
     $$03$i = $head$078;
     $24 = $head$078;
     $i$04$i = 1;
     while (1) {
      $19 = $$03$i + $10 | 0;
      $20 = $$012$i + -2 | 0;
      $23 = $$03$i + (0 - ((HEAP32[$lp + ($20 << 2) >> 2] | 0) + $width)) | 0;
      if ((FUNCTION_TABLE_iii[$cmp & 31]($24, $23) | 0) > -1) if ((FUNCTION_TABLE_iii[$cmp & 31]($24, $19) | 0) > -1) {
       $i$0$lcssa$i = $i$04$i;
       break;
      }
      $31 = $i$04$i + 1 | 0;
      $32 = $ar$i + ($i$04$i << 2) | 0;
      if ((FUNCTION_TABLE_iii[$cmp & 31]($23, $19) | 0) > -1) {
       HEAP32[$32 >> 2] = $23;
       $$0$be$i = $23;
       $$01$be$i = $$012$i + -1 | 0;
      } else {
       HEAP32[$32 >> 2] = $19;
       $$0$be$i = $19;
       $$01$be$i = $20;
      }
      if (($$01$be$i | 0) <= 1) {
       $i$0$lcssa$i = $31;
       break;
      }
      $$012$i = $$01$be$i;
      $$03$i = $$0$be$i;
      $24 = HEAP32[$ar$i >> 2] | 0;
      $i$04$i = $31;
     }
     if (($i$0$lcssa$i | 0) >= 2) {
      $36 = $ar$i + ($i$0$lcssa$i << 2) | 0;
      HEAP32[$36 >> 2] = $tmp$i28;
      if (!$13) {
       $37 = $i$0$lcssa$i + -1 | 0;
       $$02$us$i = $width;
       $49 = $tmp$i28;
       while (1) {
        $39 = $$02$us$i >>> 0 > 256 ? 256 : $$02$us$i;
        $48 = HEAP32[$ar$i >> 2] | 0;
        _memcpy($49 | 0, $48 | 0, $39 | 0) | 0;
        $45 = $48;
        $i$01$us$i = 0;
        do {
         $i$01$us$i$looptemp = $i$01$us$i;
         $i$01$us$i = $i$01$us$i + 1 | 0;
         $45$looptemp = $45;
         $45 = HEAP32[$ar$i + ($i$01$us$i << 2) >> 2] | 0;
         _memcpy($45$looptemp | 0, $45 | 0, $39 | 0) | 0;
         HEAP32[$ar$i + ($i$01$us$i$looptemp << 2) >> 2] = $45$looptemp + $39;
        } while (($i$01$us$i$looptemp | 0) != ($37 | 0));
        if (($$02$us$i | 0) == ($39 | 0)) break L43;
        $$02$us$i = $$02$us$i - $39 | 0;
        $49 = HEAP32[$36 >> 2] | 0;
       }
      }
     }
    } else {} while (0);
    $107 = $16 >>> 2 | $52 << 30;
    $170 = $52 >>> 2;
    $pshift$1 = $pshift$079 + 2 | 0;
   } else {
    $56 = $pshift$079 + -1 | 0;
    if ((HEAP32[$lp + ($56 << 2) >> 2] | 0) >>> 0 < ($14 - $head$078 | 0) >>> 0) {
     HEAP32[$ar$i >> 2] = $head$078;
     L16 : do if (($pshift$079 | 0) > 1) {
      $$012$i17 = $pshift$079;
      $$03$i16 = $head$078;
      $68 = $head$078;
      $i$04$i15 = 1;
      while (1) {
       $63 = $$03$i16 + $10 | 0;
       $64 = $$012$i17 + -2 | 0;
       $67 = $$03$i16 + (0 - ((HEAP32[$lp + ($64 << 2) >> 2] | 0) + $width)) | 0;
       if ((FUNCTION_TABLE_iii[$cmp & 31]($68, $67) | 0) > -1) if ((FUNCTION_TABLE_iii[$cmp & 31]($68, $63) | 0) > -1) {
        $i$0$lcssa$i25 = $i$04$i15;
        break;
       }
       $75 = $i$04$i15 + 1 | 0;
       $76 = $ar$i + ($i$04$i15 << 2) | 0;
       if ((FUNCTION_TABLE_iii[$cmp & 31]($67, $63) | 0) > -1) {
        HEAP32[$76 >> 2] = $67;
        $$0$be$i21 = $67;
        $$01$be$i20 = $$012$i17 + -1 | 0;
       } else {
        HEAP32[$76 >> 2] = $63;
        $$0$be$i21 = $63;
        $$01$be$i20 = $64;
       }
       if (($$01$be$i20 | 0) <= 1) {
        $i$0$lcssa$i25 = $75;
        break;
       }
       $$012$i17 = $$01$be$i20;
       $$03$i16 = $$0$be$i21;
       $68 = HEAP32[$ar$i >> 2] | 0;
       $i$04$i15 = $75;
      }
      if (($i$0$lcssa$i25 | 0) >= 2) {
       $80 = $ar$i + ($i$0$lcssa$i25 << 2) | 0;
       HEAP32[$80 >> 2] = $tmp$i28;
       if (!$13) {
        $81 = $i$0$lcssa$i25 + -1 | 0;
        $$02$us$i34 = $width;
        $93 = $tmp$i28;
        while (1) {
         $83 = $$02$us$i34 >>> 0 > 256 ? 256 : $$02$us$i34;
         $92 = HEAP32[$ar$i >> 2] | 0;
         _memcpy($93 | 0, $92 | 0, $83 | 0) | 0;
         $89 = $92;
         $i$01$us$i32 = 0;
         do {
          $i$01$us$i32$looptemp = $i$01$us$i32;
          $i$01$us$i32 = $i$01$us$i32 + 1 | 0;
          $89$looptemp = $89;
          $89 = HEAP32[$ar$i + ($i$01$us$i32 << 2) >> 2] | 0;
          _memcpy($89$looptemp | 0, $89 | 0, $83 | 0) | 0;
          HEAP32[$ar$i + ($i$01$us$i32$looptemp << 2) >> 2] = $89$looptemp + $83;
         } while (($i$01$us$i32$looptemp | 0) != ($81 | 0));
         if (($$02$us$i34 | 0) == ($83 | 0)) break L16;
         $$02$us$i34 = $$02$us$i34 - $83 | 0;
         $93 = HEAP32[$80 >> 2] | 0;
        }
       }
      }
     } else {} while (0);
    } else _trinkle($head$078, $width, $cmp, $16, $52, $pshift$079, 0, $lp);
    if (($pshift$079 | 0) == 1) {
     $107 = $16 << 1;
     $170 = $16 >>> 31 | $52 << 1;
     $pshift$1 = 0;
     break;
    } else {
     $99 = $56 >>> 0 > 31;
     $$ = $99 ? 0 : $16;
     $$69 = $99 ? $pshift$079 + -33 | 0 : $56;
     $107 = $$ << $$69;
     $170 = $$ >>> (32 - $$69 | 0) | ($99 ? $16 : $52) << $$69;
     $pshift$1 = 1;
     break;
    }
   } while (0);
   $106 = $107 | 1;
   $108 = $head$078 + $width | 0;
   if ($108 >>> 0 < $11 >>> 0) {
    $16 = $106;
    $52 = $170;
    $head$078 = $108;
    $pshift$079 = $pshift$1;
   } else {
    $$lcssa72 = $170;
    $$lcssa73 = $106;
    $head$0$lcssa = $108;
    $pshift$0$lcssa = $pshift$1;
    break;
   }
  }
 } else {
  $$lcssa72 = 0;
  $$lcssa73 = 1;
  $head$0$lcssa = $base;
  $pshift$0$lcssa = 1;
 }
 _trinkle($head$0$lcssa, $width, $cmp, $$lcssa73, $$lcssa72, $pshift$0$lcssa, 0, $lp);
 if (($$lcssa72 | 0) == 0 & (($$lcssa73 | 0) == 1 & ($pshift$0$lcssa | 0) == 1)) {
  STACKTOP = sp;
  return;
 } else {
  $115 = $$lcssa73;
  $124 = $$lcssa72;
  $head$176 = $head$0$lcssa;
  $pshift$277 = $pshift$0$lcssa;
 }
 while (1) {
  if (($pshift$277 | 0) >= 2) {
   $139 = $115 >>> 30;
   $141 = $pshift$277 + -2 | 0;
   $146 = ($115 << 1 & 2147483646 | $139 << 31) ^ 3;
   $147 = ($139 | $124 << 2) >>> 1;
   _trinkle($head$176 + (0 - ((HEAP32[$lp + ($141 << 2) >> 2] | 0) + $width)) | 0, $width, $cmp, $146, $147, $pshift$277 + -1 | 0, 1, $lp);
   $154 = $147 << 1 | $139 & 1;
   $156 = $146 << 1 | 1;
   $157 = $head$176 + $10 | 0;
   _trinkle($157, $width, $cmp, $156, $154, $141, 1, $lp);
   $115 = $156;
   $124 = $154;
   $head$176 = $157;
   $pshift$277 = $141;
   continue;
  }
  $114 = $115 + -1 | 0;
  do if (!$114) {
   $137 = 32;
   label = 58;
  } else {
   if (!($114 & 1)) {
    $$02$i$i = $114;
    $nTrailingZeros$03$i$i = 0;
    while (1) {
     $119 = $nTrailingZeros$03$i$i + 1 | 0;
     $$02$i$i = $$02$i$i >>> 1;
     if ($$02$i$i & 1) {
      $$lcssa = $119;
      break;
     } else $nTrailingZeros$03$i$i = $119;
    }
    if (!$$lcssa) label = 53; else $134 = $$lcssa;
   } else label = 53;
   if ((label | 0) == 53) {
    label = 0;
    if (!$124) {
     $137 = 64;
     label = 58;
     break;
    }
    if (!($124 & 1)) {
     $$02$i3$i = $124;
     $nTrailingZeros$03$i2$i = 0;
    } else {
     $$0$i49 = 0;
     $159 = $115;
     $162 = $124;
     $166 = 0;
     break;
    }
    while (1) {
     $128 = $nTrailingZeros$03$i2$i + 1 | 0;
     $$02$i3$i = $$02$i3$i >>> 1;
     if ($$02$i3$i & 1) {
      $$lcssa95 = $128;
      $nTrailingZeros$03$i2$i$lcssa = $nTrailingZeros$03$i2$i;
      break;
     } else $nTrailingZeros$03$i2$i = $128;
    }
    if (!$$lcssa95) {
     $$0$i49 = 0;
     $159 = $115;
     $162 = $124;
     $166 = 0;
     break;
    } else $134 = $nTrailingZeros$03$i2$i$lcssa + 33 | 0;
   }
   if ($134 >>> 0 > 31) {
    $137 = $134;
    label = 58;
   } else {
    $$0$i49 = $134;
    $159 = $115;
    $162 = $124;
    $166 = $134;
   }
  } while (0);
  if ((label | 0) == 58) {
   label = 0;
   $$0$i49 = $137 + -32 | 0;
   $159 = $124;
   $162 = 0;
   $166 = $137;
  }
  $115 = $162 << 32 - $$0$i49 | $159 >>> $$0$i49;
  $124 = $162 >>> $$0$i49;
  $pshift$277 = $166 + $pshift$277 | 0;
  if (($124 | 0) == 0 & (($115 | 0) == 1 & ($pshift$277 | 0) == 1)) break; else $head$176 = $head$176 + $10 | 0;
 }
 STACKTOP = sp;
 return;
}

function _png_combine_row($png_ptr, $dp, $display) {
 $png_ptr = $png_ptr | 0;
 $dp = $dp | 0;
 $display = $display | 0;
 var $$0 = 0, $$126 = 0, $$2 = 0, $$336 = 0, $$4 = 0, $$5 = 0, $$621 = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum1 = 0, $$sum3 = 0, $$sum38 = 0, $$sum42 = 0, $$sum44 = 0, $1 = 0, $10 = 0, $104 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $113 = 0, $117 = 0, $13 = 0, $156 = 0, $159 = 0, $2 = 0, $218 = 0, $22 = 0, $24 = 0, $25 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $45 = 0, $49 = 0, $5 = 0, $55 = 0, $58 = 0, $61 = 0, $67 = 0, $7 = 0, $72 = 0, $78 = 0, $83 = 0, $86 = 0, $87 = 0, $9 = 0, $bytes_to_copy$0 = 0, $bytes_to_copy$118 = 0, $c$0 = 0, $c2$0 = 0, $dp16$0 = 0, $dp16$1 = 0, $dp32$0 = 0, $dp32$1 = 0, $end_byte$0 = 0, $end_mask$0 = 0, $end_ptr$0 = 0, $mask$0 = 0, $mask$0$ph$in = 0, $row_width$0 = 0, $row_width$124 = 0, $row_width$2 = 0, $row_width$334 = 0, $row_width$4 = 0, $row_width$5 = 0, $row_width$6 = 0, $row_width$7 = 0, $row_width$819 = 0, $sp$0 = 0, $sp$125 = 0, $sp$2 = 0, $sp$335 = 0, $sp$4 = 0, $sp$5 = 0, $sp$620 = 0, $sp16$0 = 0, $sp16$1 = 0, $sp32$0 = 0, $sp32$1 = 0, label = 0, $$336$looptemp = 0, $sp$335$looptemp = 0;
 $1 = HEAP8[$png_ptr + 443 >> 0] | 0;
 $2 = $1 & 255;
 $4 = HEAP32[$png_ptr + 384 >> 2] | 0;
 $5 = $4 + 1 | 0;
 $7 = HEAP32[$png_ptr + 348 >> 2] | 0;
 $9 = HEAP8[$png_ptr + 433 >> 0] | 0;
 $10 = $9 & 255;
 if (!($1 << 24 >> 24)) _png_error($png_ptr, 76512);
 $13 = HEAP32[$png_ptr + 404 >> 2] | 0;
 if ($13) {
  if (($1 & 255) > 7) $22 = Math_imul($7, $2 >>> 3) | 0; else $22 = ((Math_imul($7, $2) | 0) + 7 | 0) >>> 3;
  if (($13 | 0) != ($22 | 0)) _png_error($png_ptr, 76544);
 }
 if (!$7) _png_error($png_ptr, 76584);
 $24 = Math_imul($7, $2) | 0;
 $25 = $24 & 7;
 do if (!$25) {
  $end_byte$0 = 0;
  $end_mask$0 = 0;
  $end_ptr$0 = 0;
 } else {
  if (($1 & 255) > 7) $32 = Math_imul($7, $2 >>> 3) | 0; else $32 = ($24 + 7 | 0) >>> 3;
  $33 = $dp + ($32 + -1) | 0;
  $34 = HEAP8[$33 >> 0] | 0;
  if (!(HEAP32[$png_ptr + 216 >> 2] & 65536)) {
   $end_byte$0 = $34;
   $end_mask$0 = 255 >>> $25;
   $end_ptr$0 = $33;
   break;
  } else {
   $end_byte$0 = $34;
   $end_mask$0 = 255 << $25;
   $end_ptr$0 = $33;
   break;
  }
 } while (0);
 L25 : do if (!(HEAP8[$png_ptr + 432 >> 0] | 0)) label = 78; else {
  $45 = HEAP32[$png_ptr + 216 >> 2] | 0;
  if (($45 & 2 | 0) != 0 & ($9 & 255) < 6) {
   if (!$display) $$pre$phiZ2D = $10 & 1; else if (($display | 0) == 1) {
    $49 = $10 & 1;
    if (!$49) {
     label = 78;
     break;
    } else $$pre$phiZ2D = $49;
   } else {
    label = 78;
    break;
   }
   $55 = $$pre$phiZ2D << 3 - (($10 + 1 | 0) >>> 1) & 7;
   if ($7 >>> 0 <= $55 >>> 0) return;
   if (($1 & 255) < 8) {
    $58 = 8 / ($2 >>> 0) | 0;
    $61 = ($display | 0) != 0;
    do if (!($45 & 65536)) if ($61) {
     if ($1 << 24 >> 24 == 1) $78 = 0; else $78 = $1 << 24 >> 24 == 2 ? 1 : 2;
     $mask$0$ph$in = 76760 + ($78 * 12 | 0) + ($10 >>> 1 << 2) + 36 | 0;
     break;
    } else {
     if ($1 << 24 >> 24 == 1) $83 = 0; else $83 = $1 << 24 >> 24 == 2 ? 1 : 2;
     $mask$0$ph$in = 76616 + ($83 * 24 | 0) + ($10 << 2) + 72 | 0;
     break;
    } else if ($61) {
     if ($1 << 24 >> 24 == 1) $67 = 0; else $67 = $1 << 24 >> 24 == 2 ? 1 : 2;
     $mask$0$ph$in = 76760 + ($67 * 12 | 0) + ($10 >>> 1 << 2) | 0;
     break;
    } else {
     if ($1 << 24 >> 24 == 1) $72 = 0; else $72 = $1 << 24 >> 24 == 2 ? 1 : 2;
     $mask$0$ph$in = 76616 + ($72 * 24 | 0) + ($10 << 2) | 0;
     break;
    } while (0);
    $$0 = $dp;
    $mask$0 = HEAP32[$mask$0$ph$in >> 2] | 0;
    $row_width$0 = $7;
    $sp$0 = $5;
    while (1) {
     $86 = $mask$0 >>> 8 | $mask$0 << 24;
     $87 = $mask$0 & 255;
     if (($87 | 0) == 255) HEAP8[$$0 >> 0] = HEAP8[$sp$0 >> 0] | 0; else if ($87) HEAP8[$$0 >> 0] = HEAPU8[$sp$0 >> 0] & $mask$0 | HEAPU8[$$0 >> 0] & ($mask$0 ^ 255);
     if ($row_width$0 >>> 0 <= $58 >>> 0) break L25;
     $$0 = $$0 + 1 | 0;
     $mask$0 = $86;
     $row_width$0 = $row_width$0 - $58 | 0;
     $sp$0 = $sp$0 + 1 | 0;
    }
   }
   if ($2 & 7) _png_error($png_ptr, 76832);
   $104 = $2 >>> 3;
   $106 = Math_imul($55, $104) | 0;
   $107 = (Math_imul($7, $104) | 0) - $106 | 0;
   $108 = $dp + $106 | 0;
   $$sum = $106 + 1 | 0;
   $109 = $4 + $$sum | 0;
   if (!$display) $bytes_to_copy$0 = $104; else {
    $113 = $104 << ((6 - $10 | 0) >>> 1);
    $bytes_to_copy$0 = $113 >>> 0 > $107 >>> 0 ? $107 : $113;
   }
   $117 = $104 << ((7 - $10 | 0) >>> 1);
   if (($bytes_to_copy$0 | 0) == 3) {
    HEAP8[$108 >> 0] = HEAP8[$109 >> 0] | 0;
    $$sum38 = $106 + 2 | 0;
    HEAP8[$dp + $$sum >> 0] = HEAP8[$4 + $$sum38 >> 0] | 0;
    HEAP8[$dp + $$sum38 >> 0] = HEAP8[$4 + ($106 + 3) >> 0] | 0;
    if ($107 >>> 0 > $117 >>> 0) {
     $$336 = $108;
     $row_width$334 = $107;
     $sp$335 = $109;
    } else return;
    do {
     $sp$335$looptemp = $sp$335;
     $sp$335 = $sp$335 + $117 | 0;
     $$336$looptemp = $$336;
     $$336 = $$336 + $117 | 0;
     $row_width$334 = $row_width$334 - $117 | 0;
     HEAP8[$$336 >> 0] = HEAP8[$sp$335 >> 0] | 0;
     $$sum42 = $117 + 1 | 0;
     HEAP8[$$336$looptemp + $$sum42 >> 0] = HEAP8[$sp$335$looptemp + $$sum42 >> 0] | 0;
     $$sum44 = $117 + 2 | 0;
     HEAP8[$$336$looptemp + $$sum44 >> 0] = HEAP8[$sp$335$looptemp + $$sum44 >> 0] | 0;
    } while ($row_width$334 >>> 0 > $117 >>> 0);
    return;
   } else if (($bytes_to_copy$0 | 0) == 1) {
    HEAP8[$108 >> 0] = HEAP8[$109 >> 0] | 0;
    if ($107 >>> 0 > $117 >>> 0) {
     $$126 = $108;
     $row_width$124 = $107;
     $sp$125 = $109;
    } else return;
    do {
     $$126 = $$126 + $117 | 0;
     $sp$125 = $sp$125 + $117 | 0;
     $row_width$124 = $row_width$124 - $117 | 0;
     HEAP8[$$126 >> 0] = HEAP8[$sp$125 >> 0] | 0;
    } while ($row_width$124 >>> 0 > $117 >>> 0);
    return;
   } else if (($bytes_to_copy$0 | 0) == 2) {
    $$2 = $108;
    $row_width$2 = $107;
    $sp$2 = $109;
    do {
     HEAP8[$$2 >> 0] = HEAP8[$sp$2 >> 0] | 0;
     HEAP8[$$2 + 1 >> 0] = HEAP8[$sp$2 + 1 >> 0] | 0;
     if ($row_width$2 >>> 0 <= $117 >>> 0) {
      label = 84;
      break;
     }
     $sp$2 = $sp$2 + $117 | 0;
     $$2 = $$2 + $117 | 0;
     $row_width$2 = $row_width$2 - $117 | 0;
    } while ($row_width$2 >>> 0 > 1);
    if ((label | 0) == 84) return;
    HEAP8[$$2 >> 0] = HEAP8[$sp$2 >> 0] | 0;
    return;
   } else {
    if ($bytes_to_copy$0 >>> 0 < 16) {
     $156 = $108;
     if (!($156 & 1)) {
      $159 = $109;
      if (($159 & 1 | 0) == 0 & ($bytes_to_copy$0 & 1 | 0) == 0 & ($117 & 1 | 0) == 0) if (($156 & 3 | 0) == 0 & ($159 & 3 | 0) == 0 & ($bytes_to_copy$0 & 3 | 0) == 0 & ($117 & 3 | 0) == 0) {
       $$sum3 = (($117 - $bytes_to_copy$0 | 0) >>> 2) + 1 | 0;
       $dp32$0 = $108;
       $row_width$4 = $107;
       $sp32$0 = $109;
       do {
        $c$0 = $bytes_to_copy$0;
        $dp32$1 = $dp32$0;
        $sp32$1 = $sp32$0;
        while (1) {
         HEAP32[$dp32$1 >> 2] = HEAP32[$sp32$1 >> 2];
         $c$0 = $c$0 + -4 | 0;
         if (!$c$0) break; else {
          $dp32$1 = $dp32$1 + 4 | 0;
          $sp32$1 = $sp32$1 + 4 | 0;
         }
        }
        if ($row_width$4 >>> 0 <= $117 >>> 0) {
         label = 84;
         break;
        }
        $dp32$0 = $dp32$1 + ($$sum3 << 2) | 0;
        $sp32$0 = $sp32$1 + ($$sum3 << 2) | 0;
        $row_width$4 = $row_width$4 - $117 | 0;
       } while ($bytes_to_copy$0 >>> 0 <= $row_width$4 >>> 0);
       if ((label | 0) == 84) return;
       $$4 = $dp32$0;
       $row_width$5 = $row_width$4;
       $sp$4 = $sp32$0;
       while (1) {
        HEAP8[$$4 >> 0] = HEAP8[$sp$4 >> 0] | 0;
        $row_width$5 = $row_width$5 + -1 | 0;
        if (!$row_width$5) break; else {
         $$4 = $$4 + 1 | 0;
         $sp$4 = $sp$4 + 1 | 0;
        }
       }
       return;
      } else {
       $$sum1 = (($117 - $bytes_to_copy$0 | 0) >>> 1) + 1 | 0;
       $dp16$0 = $108;
       $row_width$6 = $107;
       $sp16$0 = $109;
       do {
        $c2$0 = $bytes_to_copy$0;
        $dp16$1 = $dp16$0;
        $sp16$1 = $sp16$0;
        while (1) {
         HEAP16[$dp16$1 >> 1] = HEAP16[$sp16$1 >> 1] | 0;
         $c2$0 = $c2$0 + -2 | 0;
         if (!$c2$0) break; else {
          $dp16$1 = $dp16$1 + 2 | 0;
          $sp16$1 = $sp16$1 + 2 | 0;
         }
        }
        if ($row_width$6 >>> 0 <= $117 >>> 0) {
         label = 84;
         break;
        }
        $dp16$0 = $dp16$1 + ($$sum1 << 1) | 0;
        $sp16$0 = $sp16$1 + ($$sum1 << 1) | 0;
        $row_width$6 = $row_width$6 - $117 | 0;
       } while ($bytes_to_copy$0 >>> 0 <= $row_width$6 >>> 0);
       if ((label | 0) == 84) return;
       $$5 = $dp16$0;
       $row_width$7 = $row_width$6;
       $sp$5 = $sp16$0;
       while (1) {
        HEAP8[$$5 >> 0] = HEAP8[$sp$5 >> 0] | 0;
        $row_width$7 = $row_width$7 + -1 | 0;
        if (!$row_width$7) break; else {
         $$5 = $$5 + 1 | 0;
         $sp$5 = $sp$5 + 1 | 0;
        }
       }
       return;
      }
     }
    }
    _memcpy($108 | 0, $109 | 0, $bytes_to_copy$0 | 0) | 0;
    if ($107 >>> 0 > $117 >>> 0) {
     $$621 = $108;
     $bytes_to_copy$118 = $bytes_to_copy$0;
     $row_width$819 = $107;
     $sp$620 = $109;
    } else return;
    do {
     $sp$620 = $sp$620 + $117 | 0;
     $$621 = $$621 + $117 | 0;
     $row_width$819 = $row_width$819 - $117 | 0;
     $bytes_to_copy$118 = $bytes_to_copy$118 >>> 0 > $row_width$819 >>> 0 ? $row_width$819 : $bytes_to_copy$118;
     _memcpy($$621 | 0, $sp$620 | 0, $bytes_to_copy$118 | 0) | 0;
    } while ($row_width$819 >>> 0 > $117 >>> 0);
    return;
   }
  } else label = 78;
 } while (0);
 if ((label | 0) == 78) {
  if (($1 & 255) > 7) $218 = Math_imul($7, $2 >>> 3) | 0; else $218 = ($24 + 7 | 0) >>> 3;
  _memcpy($dp | 0, $5 | 0, $218 | 0) | 0;
 }
 if (!$end_ptr$0) return;
 HEAP8[$end_ptr$0 >> 0] = HEAPU8[$end_ptr$0 >> 0] & ($end_mask$0 ^ 255) | $end_byte$0 & 255 & $end_mask$0;
 return;
}

function __Z14b2TimeOfImpactP11b2TOIOutputPK10b2TOIInput($output, $input) {
 $output = $output | 0;
 $input = $input | 0;
 var $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $105 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0, $125 = 0.0, $128 = 0.0, $13 = 0.0, $131 = 0, $132 = 0, $133 = 0.0, $14 = 0, $149 = 0.0, $150 = 0.0, $154 = 0.0, $155 = 0, $157 = 0, $16 = 0.0, $165 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $18 = 0.0, $2 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $25 = 0.0, $26 = 0.0, $32 = 0.0, $34 = 0.0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $70 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $78 = 0.0, $8 = 0, $9 = 0.0, $97 = 0.0, $99 = 0.0, $a1$0 = 0.0, $a2$0 = 0.0, $cache = 0, $distanceInput = 0, $distanceOutput = 0, $fcn = 0, $indexA = 0, $indexB = 0, $iter$0 = 0, $iter$1 = 0, $pushBackIter$0 = 0, $rootIterCount$0 = 0, $s1$0 = 0.0, $s2$0 = 0.0, $sweepA = 0, $sweepB = 0, $t$0 = 0.0, $t1$0 = 0.0, $t1$1 = 0.0, $t2$0 = 0.0, $t2$1 = 0.0, $timer = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 $timer = sp + 312 | 0;
 $sweepA = sp + 276 | 0;
 $sweepB = sp + 240 | 0;
 $cache = sp + 228 | 0;
 $distanceInput = sp + 136 | 0;
 $distanceOutput = sp + 112 | 0;
 $fcn = sp + 8 | 0;
 $indexA = sp + 4 | 0;
 $indexB = sp;
 HEAP32[22656] = (HEAP32[22656] | 0) + 1;
 HEAP32[$output >> 2] = 0;
 $2 = $input + 128 | 0;
 $4 = $output + 4 | 0;
 HEAPF32[$4 >> 2] = +HEAPF32[$2 >> 2];
 $5 = $input + 28 | 0;
 dest = $sweepA + 0 | 0;
 src = $input + 56 | 0;
 stop = dest + 36 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $sweepB + 0 | 0;
 src = $input + 92 | 0;
 stop = dest + 36 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $8 = $sweepA + 24 | 0;
 $9 = +HEAPF32[$8 >> 2];
 $12 = +Math_floor(+($9 / 6.2831854820251465)) * 6.2831854820251465;
 $13 = $9 - $12;
 HEAPF32[$8 >> 2] = $13;
 $14 = $sweepA + 28 | 0;
 $16 = +HEAPF32[$14 >> 2] - $12;
 HEAPF32[$14 >> 2] = $16;
 $17 = $sweepB + 24 | 0;
 $18 = +HEAPF32[$17 >> 2];
 $21 = +Math_floor(+($18 / 6.2831854820251465)) * 6.2831854820251465;
 $22 = $18 - $21;
 HEAPF32[$17 >> 2] = $22;
 $23 = $sweepB + 28 | 0;
 $25 = +HEAPF32[$23 >> 2] - $21;
 HEAPF32[$23 >> 2] = $25;
 $26 = +HEAPF32[$2 >> 2];
 $32 = +HEAPF32[$input + 24 >> 2] + +HEAPF32[$input + 52 >> 2] + -.014999999664723873;
 $34 = $32 < .004999999888241291 ? .004999999888241291 : $32;
 if (!($34 > 1.2499999720603228e-03)) ___assert_fail(90664, 90688, 279, 90752);
 HEAP16[$cache + 4 >> 1] = 0;
 HEAP32[$distanceInput + 0 >> 2] = HEAP32[$input + 0 >> 2];
 HEAP32[$distanceInput + 4 >> 2] = HEAP32[$input + 4 >> 2];
 HEAP32[$distanceInput + 8 >> 2] = HEAP32[$input + 8 >> 2];
 HEAP32[$distanceInput + 12 >> 2] = HEAP32[$input + 12 >> 2];
 HEAP32[$distanceInput + 16 >> 2] = HEAP32[$input + 16 >> 2];
 HEAP32[$distanceInput + 20 >> 2] = HEAP32[$input + 20 >> 2];
 HEAP32[$distanceInput + 24 >> 2] = HEAP32[$input + 24 >> 2];
 $37 = $distanceInput + 28 | 0;
 HEAP32[$37 + 0 >> 2] = HEAP32[$5 + 0 >> 2];
 HEAP32[$37 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
 HEAP32[$37 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
 HEAP32[$37 + 12 >> 2] = HEAP32[$5 + 12 >> 2];
 HEAP32[$37 + 16 >> 2] = HEAP32[$5 + 16 >> 2];
 HEAP32[$37 + 20 >> 2] = HEAP32[$5 + 20 >> 2];
 HEAP32[$37 + 24 >> 2] = HEAP32[$5 + 24 >> 2];
 HEAP8[$distanceInput + 88 >> 0] = 0;
 $39 = $sweepA + 8 | 0;
 $40 = $sweepA + 12 | 0;
 $41 = $sweepA + 16 | 0;
 $42 = $sweepA + 20 | 0;
 $43 = $sweepA + 4 | 0;
 $44 = $sweepB + 8 | 0;
 $45 = $sweepB + 12 | 0;
 $46 = $sweepB + 16 | 0;
 $47 = $sweepB + 20 | 0;
 $48 = $sweepB + 4 | 0;
 $49 = $distanceInput + 56 | 0;
 $50 = $distanceInput + 64 | 0;
 $51 = $distanceInput + 68 | 0;
 $52 = $distanceInput + 72 | 0;
 $53 = $distanceInput + 80 | 0;
 $54 = $distanceInput + 84 | 0;
 $55 = $distanceOutput + 16 | 0;
 $56 = $34 + 1.2499999720603228e-03;
 $57 = $34 + -1.2499999720603228e-03;
 $70 = $13;
 $72 = $16;
 $97 = $22;
 $99 = $25;
 $iter$0 = 0;
 $t1$0 = 0.0;
 L4 : while (1) {
  $58 = 1.0 - $t1$0;
  $73 = $58 * $70 + $t1$0 * $72;
  $74 = +Math_sin(+$73);
  $75 = +Math_cos(+$73);
  $76 = +HEAPF32[$sweepA >> 2];
  $78 = +HEAPF32[$43 >> 2];
  $100 = $58 * $97 + $t1$0 * $99;
  $101 = +Math_sin(+$100);
  $102 = +Math_cos(+$100);
  $103 = +HEAPF32[$sweepB >> 2];
  $105 = +HEAPF32[$48 >> 2];
  $111 = $58 * +HEAPF32[$44 >> 2] + $t1$0 * +HEAPF32[$46 >> 2] - ($102 * $103 - $101 * $105);
  $112 = $58 * +HEAPF32[$45 >> 2] + $t1$0 * +HEAPF32[$47 >> 2] - ($101 * $103 + $102 * $105);
  $113 = +($58 * +HEAPF32[$39 >> 2] + $t1$0 * +HEAPF32[$41 >> 2] - ($75 * $76 - $74 * $78));
  $114 = +($58 * +HEAPF32[$40 >> 2] + $t1$0 * +HEAPF32[$42 >> 2] - ($74 * $76 + $75 * $78));
  $115 = $49;
  HEAPF32[$115 >> 2] = $113;
  HEAPF32[$115 + 4 >> 2] = $114;
  HEAPF32[$50 >> 2] = $74;
  HEAPF32[$51 >> 2] = $75;
  $119 = +$111;
  $120 = +$112;
  $121 = $52;
  HEAPF32[$121 >> 2] = $119;
  HEAPF32[$121 + 4 >> 2] = $120;
  HEAPF32[$53 >> 2] = $101;
  HEAPF32[$54 >> 2] = $102;
  __Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput($distanceOutput, $cache, $distanceInput);
  $125 = +HEAPF32[$55 >> 2];
  if ($125 <= 0.0) {
   label = 5;
   break;
  }
  if ($125 < $56) {
   label = 7;
   break;
  }
  +__ZN20b2SeparationFunction10InitializeEPK14b2SimplexCachePK15b2DistanceProxyRK7b2SweepS5_S8_f($fcn, $cache, $input, $sweepA, $5, $sweepB, $t1$0);
  $pushBackIter$0 = 0;
  $t2$0 = $26;
  while (1) {
   $128 = +__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f($fcn, $indexA, $indexB, $t2$0);
   if ($128 > $56) {
    label = 10;
    break L4;
   }
   if ($128 > $57) {
    $t1$1 = $t2$0;
    break;
   }
   $131 = HEAP32[$indexA >> 2] | 0;
   $132 = HEAP32[$indexB >> 2] | 0;
   $133 = +__ZNK20b2SeparationFunction8EvaluateEiif($fcn, $131, $132, $t1$0);
   if ($133 < $57) {
    label = 13;
    break L4;
   }
   if (!($133 <= $56)) {
    $a1$0 = $t1$0;
    $a2$0 = $t2$0;
    $rootIterCount$0 = 0;
    $s1$0 = $133;
    $s2$0 = $128;
   } else {
    label = 15;
    break L4;
   }
   while (1) {
    if (!($rootIterCount$0 & 1)) $t$0 = ($a1$0 + $a2$0) * .5; else $t$0 = $a1$0 + ($34 - $s1$0) * ($a2$0 - $a1$0) / ($s2$0 - $s1$0);
    $rootIterCount$0 = $rootIterCount$0 + 1 | 0;
    HEAP32[22662] = (HEAP32[22662] | 0) + 1;
    $149 = +__ZNK20b2SeparationFunction8EvaluateEiif($fcn, $131, $132, $t$0);
    $150 = $149 - $34;
    if ($150 > 0.0) $154 = $150; else $154 = -$150;
    if ($154 < 1.2499999720603228e-03) {
     $t2$1 = $t$0;
     break;
    }
    $155 = $149 > $34;
    if (($rootIterCount$0 | 0) == 50) {
     $t2$1 = $t2$0;
     break;
    } else {
     $a1$0 = $155 ? $t$0 : $a1$0;
     $a2$0 = $155 ? $a2$0 : $t$0;
     $s1$0 = $155 ? $149 : $s1$0;
     $s2$0 = $155 ? $s2$0 : $149;
    }
   }
   $157 = HEAP32[22664] | 0;
   HEAP32[22664] = ($157 | 0) > ($rootIterCount$0 | 0) ? $157 : $rootIterCount$0;
   $pushBackIter$0 = $pushBackIter$0 + 1 | 0;
   if (($pushBackIter$0 | 0) == 8) {
    $t1$1 = $t1$0;
    break;
   } else $t2$0 = $t2$1;
  }
  $165 = $iter$0 + 1 | 0;
  HEAP32[22658] = (HEAP32[22658] | 0) + 1;
  if (($165 | 0) == 20) {
   label = 27;
   break;
  }
  $70 = +HEAPF32[$8 >> 2];
  $72 = +HEAPF32[$14 >> 2];
  $97 = +HEAPF32[$17 >> 2];
  $99 = +HEAPF32[$23 >> 2];
  $iter$0 = $165;
  $t1$0 = $t1$1;
 }
 if ((label | 0) == 5) {
  HEAP32[$output >> 2] = 2;
  HEAPF32[$4 >> 2] = 0.0;
  $iter$1 = $iter$0;
  $169 = HEAP32[22660] | 0;
  $170 = ($169 | 0) > ($iter$1 | 0);
  $171 = $170 ? $169 : $iter$1;
  HEAP32[22660] = $171;
  $172 = +__ZNK7b2Timer15GetMillisecondsEv($timer);
  $173 = +HEAPF32[22654];
  $174 = $173 > $172;
  $175 = $174 ? $173 : $172;
  HEAPF32[22654] = $175;
  $176 = +HEAPF32[22652];
  $177 = $172 + $176;
  HEAPF32[22652] = $177;
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 7) {
  HEAP32[$output >> 2] = 3;
  HEAPF32[$4 >> 2] = $t1$0;
  $iter$1 = $iter$0;
  $169 = HEAP32[22660] | 0;
  $170 = ($169 | 0) > ($iter$1 | 0);
  $171 = $170 ? $169 : $iter$1;
  HEAP32[22660] = $171;
  $172 = +__ZNK7b2Timer15GetMillisecondsEv($timer);
  $173 = +HEAPF32[22654];
  $174 = $173 > $172;
  $175 = $174 ? $173 : $172;
  HEAPF32[22654] = $175;
  $176 = +HEAPF32[22652];
  $177 = $172 + $176;
  HEAPF32[22652] = $177;
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 10) {
  HEAP32[$output >> 2] = 4;
  HEAPF32[$4 >> 2] = $26;
 } else if ((label | 0) == 13) {
  HEAP32[$output >> 2] = 1;
  HEAPF32[$4 >> 2] = $t1$0;
 } else if ((label | 0) == 15) {
  HEAP32[$output >> 2] = 3;
  HEAPF32[$4 >> 2] = $t1$0;
 } else if ((label | 0) == 27) {
  HEAP32[$output >> 2] = 1;
  HEAPF32[$4 >> 2] = $t1$1;
  $iter$1 = 20;
  $169 = HEAP32[22660] | 0;
  $170 = ($169 | 0) > ($iter$1 | 0);
  $171 = $170 ? $169 : $iter$1;
  HEAP32[22660] = $171;
  $172 = +__ZNK7b2Timer15GetMillisecondsEv($timer);
  $173 = +HEAPF32[22654];
  $174 = $173 > $172;
  $175 = $174 ? $173 : $172;
  HEAPF32[22654] = $175;
  $176 = +HEAPF32[22652];
  $177 = $172 + $176;
  HEAPF32[22652] = $177;
  STACKTOP = sp;
  return;
 }
 HEAP32[22658] = (HEAP32[22658] | 0) + 1;
 $iter$1 = $iter$0 + 1 | 0;
 $169 = HEAP32[22660] | 0;
 $170 = ($169 | 0) > ($iter$1 | 0);
 $171 = $170 ? $169 : $iter$1;
 HEAP32[22660] = $171;
 $172 = +__ZNK7b2Timer15GetMillisecondsEv($timer);
 $173 = +HEAPF32[22654];
 $174 = $173 > $172;
 $175 = $174 ? $173 : $172;
 HEAPF32[22654] = $175;
 $176 = +HEAPF32[22652];
 $177 = $172 + $176;
 HEAPF32[22652] = $177;
 STACKTOP = sp;
 return;
}

function __Z14mlua_new_jointP9lua_State($L) {
 $L = $L | 0;
 var $107 = 0.0, $109 = 0.0, $110 = 0.0, $112 = 0.0, $113 = 0.0, $115 = 0.0, $116 = 0.0, $118 = 0.0, $119 = 0.0, $120 = 0.0, $127 = 0.0, $129 = 0.0, $134 = 0, $135 = 0, $142 = 0.0, $144 = 0.0, $145 = 0.0, $147 = 0.0, $148 = 0.0, $150 = 0.0, $151 = 0.0, $153 = 0.0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0, $172 = 0, $177 = 0, $192 = 0, $194 = 0, $21 = 0, $26 = 0, $27 = 0, $3 = 0, $33 = 0, $34 = 0, $39 = 0, $41 = 0, $46 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $73 = 0.0, $75 = 0.0, $76 = 0.0, $78 = 0.0, $79 = 0.0, $81 = 0.0, $82 = 0.0, $84 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $i$0 = 0, $joint_def$0$in = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 if (!$L) ___assert_fail(23976, 2472, 512, 3304);
 if (!(HEAP32[632] | 0)) _luaL_error($L, 3320, sp) | 0;
 $3 = _luaL_checklstring($L, 1, 0) | 0;
 do if (!(_strcmp($3, 3376) | 0)) {
  $6 = __Znwj(40) | 0;
  HEAP32[$6 + 0 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = 0;
  HEAP32[$6 + 8 >> 2] = 0;
  HEAP32[$6 + 12 >> 2] = 0;
  HEAP8[$6 + 16 >> 0] = 0;
  HEAP32[$6 >> 2] = 5;
  $7 = $6 + 20 | 0;
  HEAPF32[$7 >> 2] = 0.0;
  HEAPF32[$6 + 24 >> 2] = 0.0;
  $9 = $6 + 28 | 0;
  HEAPF32[$9 >> 2] = 0.0;
  HEAPF32[$6 + 32 >> 2] = 5.0;
  HEAPF32[$6 + 36 >> 2] = .699999988079071;
  HEAP32[$6 + 8 >> 2] = HEAP32[(__Z15pop_body_secureP9lua_Statei($L, 2) | 0) >> 2];
  $17 = $6 + 12 | 0;
  HEAP32[$17 >> 2] = HEAP32[(__Z15pop_body_secureP9lua_Statei($L, 3) | 0) >> 2];
  HEAPF32[$9 >> 2] = +_luaL_checknumber($L, 4);
  $21 = (HEAP32[$17 >> 2] | 0) + 44 | 0;
  $26 = HEAP32[$21 + 4 >> 2] | 0;
  $27 = $7;
  HEAP32[$27 >> 2] = HEAP32[$21 >> 2];
  HEAP32[$27 + 4 >> 2] = $26;
  $i$0 = 5;
  $joint_def$0$in = $6;
 } else {
  if (!(_strcmp($3, 3384) | 0)) {
   $33 = __Znwj(48) | 0;
   HEAP32[$33 + 0 >> 2] = 0;
   HEAP32[$33 + 4 >> 2] = 0;
   HEAP32[$33 + 8 >> 2] = 0;
   HEAP32[$33 + 12 >> 2] = 0;
   HEAP8[$33 + 16 >> 0] = 0;
   HEAP32[$33 >> 2] = 3;
   $34 = $33 + 20 | 0;
   HEAP32[$34 + 0 >> 2] = 0;
   HEAP32[$34 + 4 >> 2] = 0;
   HEAP32[$34 + 8 >> 2] = 0;
   HEAP32[$34 + 12 >> 2] = 0;
   HEAPF32[$33 + 36 >> 2] = 1.0;
   HEAPF32[$33 + 40 >> 2] = 0.0;
   HEAPF32[$33 + 44 >> 2] = 0.0;
   $39 = HEAP32[(__Z15pop_body_secureP9lua_Statei($L, 2) | 0) >> 2] | 0;
   $41 = HEAP32[(__Z15pop_body_secureP9lua_Statei($L, 3) | 0) >> 2] | 0;
   __ZN18b2DistanceJointDef10InitializeEP6b2BodyS1_RK6b2Vec2S4_($33, $39, $41, $39 + 44 | 0, $41 + 44 | 0);
   $i$0 = 4;
   $joint_def$0$in = $33;
   break;
  }
  if (!(_strcmp($3, 3400) | 0)) {
   $46 = __Znwj(40) | 0;
   HEAP32[$46 + 0 >> 2] = 0;
   HEAP32[$46 + 4 >> 2] = 0;
   HEAP32[$46 + 8 >> 2] = 0;
   HEAP32[$46 + 12 >> 2] = 0;
   HEAP8[$46 + 16 >> 0] = 0;
   HEAP32[$46 >> 2] = 10;
   HEAPF32[$46 + 20 >> 2] = -1.0;
   HEAPF32[$46 + 24 >> 2] = 0.0;
   HEAPF32[$46 + 28 >> 2] = 1.0;
   HEAPF32[$46 + 32 >> 2] = 0.0;
   HEAPF32[$46 + 36 >> 2] = 0.0;
   HEAP32[$46 + 8 >> 2] = HEAP32[(__Z15pop_body_secureP9lua_Statei($L, 2) | 0) >> 2];
   HEAP32[$46 + 12 >> 2] = HEAP32[(__Z15pop_body_secureP9lua_Statei($L, 3) | 0) >> 2];
   $i$0 = 4;
   $joint_def$0$in = $46;
   break;
  }
  if (!(_strcmp($3, 3408) | 0)) {
   $60 = __Znwj(64) | 0;
   HEAP32[$60 + 0 >> 2] = 0;
   HEAP32[$60 + 4 >> 2] = 0;
   HEAP32[$60 + 8 >> 2] = 0;
   HEAP32[$60 + 12 >> 2] = 0;
   HEAP8[$60 + 16 >> 0] = 0;
   HEAP32[$60 >> 2] = 1;
   $61 = $60 + 20 | 0;
   HEAPF32[$60 + 44 >> 2] = 0.0;
   HEAPF32[$60 + 48 >> 2] = 0.0;
   HEAPF32[$60 + 60 >> 2] = 0.0;
   HEAPF32[$60 + 56 >> 2] = 0.0;
   HEAP8[$60 + 52 >> 0] = 0;
   HEAP32[$61 + 0 >> 2] = 0;
   HEAP32[$61 + 4 >> 2] = 0;
   HEAP32[$61 + 8 >> 2] = 0;
   HEAP32[$61 + 12 >> 2] = 0;
   HEAP32[$61 + 16 >> 2] = 0;
   HEAP8[$61 + 20 >> 0] = 0;
   HEAP32[$60 + 8 >> 2] = HEAP32[(__Z15pop_body_secureP9lua_Statei($L, 2) | 0) >> 2];
   HEAP32[$60 + 12 >> 2] = HEAP32[(__Z15pop_body_secureP9lua_Statei($L, 3) | 0) >> 2];
   $73 = +_luaL_checknumber($L, 4);
   $75 = $73 / +HEAPF32[616];
   $76 = +_luaL_checknumber($L, 5);
   $78 = $76 / +HEAPF32[616];
   $79 = +_luaL_checknumber($L, 6);
   $81 = $79 / +HEAPF32[616];
   $82 = +_luaL_checknumber($L, 7);
   $84 = $82 / +HEAPF32[616];
   HEAPF32[$61 >> 2] = $75;
   HEAPF32[$60 + 24 >> 2] = $78;
   HEAPF32[$60 + 28 >> 2] = $81;
   HEAPF32[$60 + 32 >> 2] = $84;
   $i$0 = 8;
   $joint_def$0$in = $60;
   break;
  }
  if (!(_strcmp($3, 3424) | 0)) {
   $90 = __Znwj(72) | 0;
   HEAP32[$90 + 0 >> 2] = 0;
   HEAP32[$90 + 4 >> 2] = 0;
   HEAP32[$90 + 8 >> 2] = 0;
   HEAP32[$90 + 12 >> 2] = 0;
   HEAP8[$90 + 16 >> 0] = 0;
   HEAP32[$90 >> 2] = 2;
   $91 = $90 + 20 | 0;
   $92 = $90 + 36 | 0;
   HEAP32[$91 + 0 >> 2] = 0;
   HEAP32[$91 + 4 >> 2] = 0;
   HEAP32[$91 + 8 >> 2] = 0;
   HEAP32[$91 + 12 >> 2] = 0;
   HEAPF32[$92 >> 2] = 1.0;
   $93 = $90 + 40 | 0;
   HEAPF32[$93 >> 2] = 0.0;
   HEAPF32[$90 + 44 >> 2] = 0.0;
   HEAP8[$90 + 48 >> 0] = 0;
   HEAPF32[$90 + 52 >> 2] = 0.0;
   HEAPF32[$90 + 56 >> 2] = 0.0;
   HEAP8[$90 + 60 >> 0] = 0;
   HEAPF32[$90 + 64 >> 2] = 0.0;
   HEAPF32[$90 + 68 >> 2] = 0.0;
   HEAP32[$90 + 8 >> 2] = HEAP32[(__Z15pop_body_secureP9lua_Statei($L, 2) | 0) >> 2];
   HEAP32[$90 + 12 >> 2] = HEAP32[(__Z15pop_body_secureP9lua_Statei($L, 3) | 0) >> 2];
   $107 = +_luaL_checknumber($L, 4);
   $109 = $107 / +HEAPF32[616];
   $110 = +_luaL_checknumber($L, 5);
   $112 = $110 / +HEAPF32[616];
   $113 = +_luaL_checknumber($L, 6);
   $115 = $113 / +HEAPF32[616];
   $116 = +_luaL_checknumber($L, 7);
   $118 = $116 / +HEAPF32[616];
   $119 = +_luaL_checknumber($L, 8);
   $120 = +_luaL_checknumber($L, 9);
   HEAPF32[$91 >> 2] = $109;
   HEAPF32[$90 + 24 >> 2] = $112;
   HEAPF32[$90 + 28 >> 2] = $115;
   HEAPF32[$90 + 32 >> 2] = $118;
   HEAPF32[$92 >> 2] = $119;
   HEAPF32[$93 >> 2] = $120;
   $127 = +Math_sqrt(+($120 * $120 + $119 * $119));
   if ($127 < 1.1920928955078125e-07) {
    $i$0 = 10;
    $joint_def$0$in = $90;
    break;
   }
   $129 = 1.0 / $127;
   HEAPF32[$92 >> 2] = $119 * $129;
   HEAPF32[$93 >> 2] = $120 * $129;
   $i$0 = 10;
   $joint_def$0$in = $90;
   break;
  }
  if (!(_strcmp($3, 3440) | 0)) {
   $134 = __Znwj(44) | 0;
   HEAP32[$134 + 0 >> 2] = 0;
   HEAP32[$134 + 4 >> 2] = 0;
   HEAP32[$134 + 8 >> 2] = 0;
   HEAP32[$134 + 12 >> 2] = 0;
   HEAP8[$134 + 16 >> 0] = 0;
   HEAP32[$134 >> 2] = 9;
   $135 = $134 + 20 | 0;
   HEAP32[$135 + 0 >> 2] = 0;
   HEAP32[$135 + 4 >> 2] = 0;
   HEAP32[$135 + 8 >> 2] = 0;
   HEAP32[$135 + 12 >> 2] = 0;
   HEAP32[$135 + 16 >> 2] = 0;
   HEAP32[$135 + 20 >> 2] = 0;
   HEAP32[$134 + 8 >> 2] = HEAP32[(__Z15pop_body_secureP9lua_Statei($L, 2) | 0) >> 2];
   HEAP32[$134 + 12 >> 2] = HEAP32[(__Z15pop_body_secureP9lua_Statei($L, 3) | 0) >> 2];
   $142 = +_luaL_checknumber($L, 4);
   $144 = $142 / +HEAPF32[616];
   $145 = +_luaL_checknumber($L, 5);
   $147 = $145 / +HEAPF32[616];
   $148 = +_luaL_checknumber($L, 6);
   $150 = $148 / +HEAPF32[616];
   $151 = +_luaL_checknumber($L, 7);
   $153 = $151 / +HEAPF32[616];
   HEAPF32[$135 >> 2] = $144;
   HEAPF32[$134 + 24 >> 2] = $147;
   HEAPF32[$134 + 28 >> 2] = $150;
   HEAPF32[$134 + 32 >> 2] = $153;
   $i$0 = 8;
   $joint_def$0$in = $134;
   break;
  }
  if (_strcmp($3, 3456) | 0) ___assert_fail(90768, 2472, 589, 3304);
  $159 = __Znwj(32) | 0;
  HEAP32[$159 + 0 >> 2] = 0;
  HEAP32[$159 + 4 >> 2] = 0;
  HEAP32[$159 + 8 >> 2] = 0;
  HEAP32[$159 + 12 >> 2] = 0;
  HEAP8[$159 + 16 >> 0] = 0;
  HEAP32[$159 >> 2] = 6;
  $160 = $159 + 20 | 0;
  HEAP32[$160 >> 2] = 0;
  $161 = $159 + 24 | 0;
  HEAP32[$161 >> 2] = 0;
  $162 = $159 + 28 | 0;
  HEAPF32[$162 >> 2] = 1.0;
  HEAP32[$159 + 8 >> 2] = HEAP32[(__Z15pop_body_secureP9lua_Statei($L, 2) | 0) >> 2];
  HEAP32[$159 + 12 >> 2] = HEAP32[(__Z15pop_body_secureP9lua_Statei($L, 3) | 0) >> 2];
  HEAP32[$160 >> 2] = HEAP32[(__Z16pop_joint_secureP9lua_Statei($L, 4) | 0) >> 2];
  $172 = HEAP32[(__Z16pop_joint_secureP9lua_Statei($L, 5) | 0) >> 2] | 0;
  HEAP32[$161 >> 2] = $172;
  if (((HEAP32[(HEAP32[$160 >> 2] | 0) + 4 >> 2] | 0) + -1 | 0) >>> 0 < 2) $177 = $172; else {
   _luaL_error($L, 3464, $vararg_buffer1) | 0;
   $177 = HEAP32[$161 >> 2] | 0;
  }
  if (((HEAP32[$177 + 4 >> 2] | 0) + -1 | 0) >>> 0 >= 2) _luaL_error($L, 3464, $vararg_buffer3) | 0;
  HEAPF32[$162 >> 2] = +_luaL_checknumber($L, 6);
  $i$0 = 7;
  $joint_def$0$in = $159;
 } while (0);
 if ((_lua_gettop($L) | 0) >= ($i$0 | 0)) HEAP8[$joint_def$0$in + 16 >> 0] = (_lua_toboolean($L, $i$0) | 0) != 0 & 1;
 if (!(HEAP32[$joint_def$0$in + 8 >> 2] | 0)) ___assert_fail(3528, 2472, 598, 3304);
 if (!(HEAP32[$joint_def$0$in + 12 >> 2] | 0)) ___assert_fail(3552, 2472, 599, 3304);
 $192 = __Znwj(16) | 0;
 $194 = __ZN7b2World11CreateJointEPK10b2JointDef(HEAP32[632] | 0, $joint_def$0$in) | 0;
 HEAP32[$192 >> 2] = $194;
 HEAP32[$194 + 64 >> 2] = $192;
 HEAP32[$192 + 12 >> 2] = 0;
 HEAP32[$192 + 4 >> 2] = 0;
 HEAP8[$192 + 8 >> 0] = 0;
 do if (!(_strcmp($3, 3376) | 0)) __Z16push_mouse_jointP9lua_StateP5Joint($L, $192); else {
  if (!(_strcmp($3, 3384) | 0)) {
   __Z19push_distance_jointP9lua_StateP5Joint($L, $192);
   break;
  }
  if (!(_strcmp($3, 3400) | 0)) {
   __Z15push_rope_jointP9lua_StateP5Joint($L, $192);
   break;
  }
  if (!(_strcmp($3, 3408) | 0)) {
   __Z19push_revolute_jointP9lua_StateP5Joint($L, $192);
   break;
  }
  if (!(_strcmp($3, 3424) | 0)) {
   __Z20push_prismatic_jointP9lua_StateP5Joint($L, $192);
   break;
  }
  if (!(_strcmp($3, 3440) | 0)) {
   __Z19push_friction_jointP9lua_StateP5Joint($L, $192);
   break;
  }
  if (!(_strcmp($3, 3456) | 0)) __Z15push_gear_jointP9lua_StateP5Joint($L, $192);
 } while (0);
 if (!$joint_def$0$in) {
  STACKTOP = sp;
  return 1;
 }
 __ZdlPv($joint_def$0$in);
 STACKTOP = sp;
 return 1;
}

function __ZN15b2ContactSolver24SolveVelocityConstraintsEv($this) {
 $this = $this | 0;
 var $0 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $12 = 0.0, $123 = 0.0, $126 = 0.0, $133 = 0.0, $135 = 0.0, $14 = 0.0, $148 = 0, $149 = 0.0, $150 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $16 = 0.0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0.0, $18 = 0.0, $181 = 0.0, $184 = 0.0, $19 = 0, $191 = 0.0, $193 = 0.0, $198 = 0.0, $20 = 0, $201 = 0.0, $208 = 0.0, $21 = 0, $211 = 0.0, $22 = 0, $23 = 0, $231 = 0.0, $235 = 0.0, $241 = 0.0, $242 = 0.0, $249 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $297 = 0.0, $298 = 0.0, $3 = 0, $30 = 0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $310 = 0.0, $339 = 0.0, $340 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $350 = 0.0, $351 = 0.0, $352 = 0.0, $37 = 0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0.0, $387 = 0.0, $388 = 0.0, $4 = 0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0, $423 = 0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0.0, $430 = 0, $44 = 0.0, $45 = 0.0, $47 = 0.0, $5 = 0, $52 = 0.0, $53 = 0.0, $55 = 0.0, $57 = 0, $59 = 0.0, $6 = 0, $62 = 0.0, $65 = 0.0, $67 = 0.0, $69 = 0.0, $71 = 0.0, $73 = 0.0, $76 = 0.0, $8 = 0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $96 = 0.0, $98 = 0.0, $99 = 0.0, $i$091 = 0, $j$083 = 0, $wA$085 = 0.0, $wA$1 = 0.0, $wB$084 = 0.0, $wB$1 = 0.0, label = 0;
 $0 = $this + 48 | 0;
 if ((HEAP32[$0 >> 2] | 0) <= 0) return;
 $3 = $this + 40 | 0;
 $4 = $this + 28 | 0;
 $22 = HEAP32[$4 >> 2] | 0;
 $i$091 = 0;
 L4 : while (1) {
  $5 = HEAP32[$3 >> 2] | 0;
  $6 = $5 + ($i$091 * 156 | 0) | 0;
  $8 = HEAP32[$5 + ($i$091 * 156 | 0) + 112 >> 2] | 0;
  $10 = HEAP32[$5 + ($i$091 * 156 | 0) + 116 >> 2] | 0;
  $12 = +HEAPF32[$5 + ($i$091 * 156 | 0) + 120 >> 2];
  $14 = +HEAPF32[$5 + ($i$091 * 156 | 0) + 128 >> 2];
  $16 = +HEAPF32[$5 + ($i$091 * 156 | 0) + 124 >> 2];
  $18 = +HEAPF32[$5 + ($i$091 * 156 | 0) + 132 >> 2];
  $19 = $5 + ($i$091 * 156 | 0) + 148 | 0;
  $20 = HEAP32[$19 >> 2] | 0;
  $21 = $22 + ($8 * 12 | 0) | 0;
  $23 = $21;
  $30 = $22 + ($10 * 12 | 0) | 0;
  $37 = $5 + ($i$091 * 156 | 0) + 72 | 0;
  $43 = +HEAPF32[$37 >> 2];
  $44 = +HEAPF32[$37 + 4 >> 2];
  $45 = -$43;
  $47 = +HEAPF32[$5 + ($i$091 * 156 | 0) + 136 >> 2];
  if (($20 + -1 | 0) >>> 0 >= 2) {
   label = 5;
   break;
  }
  $52 = +HEAPF32[$30 + 4 >> 2];
  $53 = +HEAPF32[$30 >> 2];
  $55 = +HEAPF32[$23 + 4 >> 2];
  $57 = $5 + ($i$091 * 156 | 0) + 144 | 0;
  $65 = $53;
  $67 = $52;
  $69 = +HEAPF32[$23 >> 2];
  $71 = $55;
  $j$083 = 0;
  $wA$085 = +HEAPF32[$22 + ($8 * 12 | 0) + 8 >> 2];
  $wB$084 = +HEAPF32[$22 + ($10 * 12 | 0) + 8 >> 2];
  do {
   $59 = +HEAPF32[$5 + ($i$091 * 156 | 0) + ($j$083 * 36 | 0) + 12 >> 2];
   $62 = +HEAPF32[$5 + ($i$091 * 156 | 0) + ($j$083 * 36 | 0) + 8 >> 2];
   $73 = +HEAPF32[$5 + ($i$091 * 156 | 0) + ($j$083 * 36 | 0) + 4 >> 2];
   $76 = +HEAPF32[$5 + ($i$091 * 156 | 0) + ($j$083 * 36 | 0) >> 2];
   $90 = $47 * +HEAPF32[$5 + ($i$091 * 156 | 0) + ($j$083 * 36 | 0) + 16 >> 2];
   $91 = $5 + ($i$091 * 156 | 0) + ($j$083 * 36 | 0) + 20 | 0;
   $92 = +HEAPF32[$91 >> 2];
   $93 = $92 - +HEAPF32[$5 + ($i$091 * 156 | 0) + ($j$083 * 36 | 0) + 28 >> 2] * ($44 * ($65 - $wB$084 * $59 - $69 + $wA$085 * $73) + ($67 + $wB$084 * $62 - $71 - $wA$085 * $76) * $45 - +HEAPF32[$57 >> 2]);
   $94 = -$90;
   $96 = $93 < $90 ? $93 : $90;
   $98 = $96 < $94 ? $94 : $96;
   $99 = $98 - $92;
   HEAPF32[$91 >> 2] = $98;
   $100 = $44 * $99;
   $101 = $99 * $45;
   $69 = $69 - $12 * $100;
   $71 = $71 - $12 * $101;
   $wA$085 = $wA$085 - $14 * ($76 * $101 - $73 * $100);
   $65 = $65 + $16 * $100;
   $67 = $67 + $16 * $101;
   $wB$084 = $wB$084 + $18 * ($62 * $101 - $59 * $100);
   $j$083 = $j$083 + 1 | 0;
  } while (($j$083 | 0) != ($20 | 0));
  do if ((HEAP32[$19 >> 2] | 0) == 1) {
   $123 = +HEAPF32[$5 + ($i$091 * 156 | 0) + 12 >> 2];
   $126 = +HEAPF32[$5 + ($i$091 * 156 | 0) + 8 >> 2];
   $133 = +HEAPF32[$5 + ($i$091 * 156 | 0) + 4 >> 2];
   $135 = +HEAPF32[$6 >> 2];
   $148 = $5 + ($i$091 * 156 | 0) + 16 | 0;
   $149 = +HEAPF32[$148 >> 2];
   $150 = $149 - +HEAPF32[$5 + ($i$091 * 156 | 0) + 24 >> 2] * ($43 * ($65 - $wB$084 * $123 - $69 + $wA$085 * $133) + $44 * ($67 + $wB$084 * $126 - $71 - $wA$085 * $135) - +HEAPF32[$5 + ($i$091 * 156 | 0) + 32 >> 2]);
   $152 = $150 > 0.0 ? $150 : 0.0;
   $153 = $152 - $149;
   HEAPF32[$148 >> 2] = $152;
   $154 = $43 * $153;
   $155 = $44 * $153;
   $416 = $69 - $12 * $154;
   $418 = $71 - $12 * $155;
   $427 = $65 + $16 * $154;
   $429 = $67 + $16 * $155;
   $wA$1 = $wA$085 - $14 * ($135 * $155 - $133 * $154);
   $wB$1 = $wB$084 + $18 * ($126 * $155 - $123 * $154);
  } else {
   $174 = $5 + ($i$091 * 156 | 0) + 16 | 0;
   $175 = +HEAPF32[$174 >> 2];
   $176 = $5 + ($i$091 * 156 | 0) + 52 | 0;
   $177 = +HEAPF32[$176 >> 2];
   if (!($175 >= 0.0) | !($177 >= 0.0)) {
    label = 10;
    break L4;
   }
   $181 = +HEAPF32[$5 + ($i$091 * 156 | 0) + 12 >> 2];
   $184 = +HEAPF32[$5 + ($i$091 * 156 | 0) + 8 >> 2];
   $191 = +HEAPF32[$5 + ($i$091 * 156 | 0) + 4 >> 2];
   $193 = +HEAPF32[$6 >> 2];
   $198 = +HEAPF32[$5 + ($i$091 * 156 | 0) + 48 >> 2];
   $201 = +HEAPF32[$5 + ($i$091 * 156 | 0) + 44 >> 2];
   $208 = +HEAPF32[$5 + ($i$091 * 156 | 0) + 40 >> 2];
   $211 = +HEAPF32[$5 + ($i$091 * 156 | 0) + 36 >> 2];
   $231 = +HEAPF32[$5 + ($i$091 * 156 | 0) + 104 >> 2];
   $235 = +HEAPF32[$5 + ($i$091 * 156 | 0) + 100 >> 2];
   $241 = $43 * ($65 - $wB$084 * $181 - $69 + $wA$085 * $191) + $44 * ($67 + $wB$084 * $184 - $71 - $wA$085 * $193) - +HEAPF32[$5 + ($i$091 * 156 | 0) + 32 >> 2] - ($175 * +HEAPF32[$5 + ($i$091 * 156 | 0) + 96 >> 2] + $177 * $231);
   $242 = $43 * ($65 - $wB$084 * $198 - $69 + $wA$085 * $208) + $44 * ($67 + $wB$084 * $201 - $71 - $wA$085 * $211) - +HEAPF32[$5 + ($i$091 * 156 | 0) + 68 >> 2] - ($175 * $235 + $177 * +HEAPF32[$5 + ($i$091 * 156 | 0) + 108 >> 2]);
   $249 = +HEAPF32[$5 + ($i$091 * 156 | 0) + 80 >> 2] * $241 + +HEAPF32[$5 + ($i$091 * 156 | 0) + 88 >> 2] * $242;
   $256 = $241 * +HEAPF32[$5 + ($i$091 * 156 | 0) + 84 >> 2] + $242 * +HEAPF32[$5 + ($i$091 * 156 | 0) + 92 >> 2];
   $257 = -$249;
   $258 = -$256;
   if (!(!($249 <= -0.0) | !($256 <= -0.0))) {
    $261 = $257 - $175;
    $262 = $258 - $177;
    $263 = $43 * $261;
    $264 = $44 * $261;
    $265 = $43 * $262;
    $266 = $44 * $262;
    $267 = $263 + $265;
    $268 = $264 + $266;
    HEAPF32[$174 >> 2] = $257;
    HEAPF32[$176 >> 2] = $258;
    $416 = $69 - $12 * $267;
    $418 = $71 - $12 * $268;
    $427 = $65 + $16 * $267;
    $429 = $67 + $16 * $268;
    $wA$1 = $wA$085 - $14 * ($193 * $264 - $191 * $263 + ($211 * $266 - $208 * $265));
    $wB$1 = $wB$084 + $18 * ($184 * $264 - $181 * $263 + ($201 * $266 - $198 * $265));
    break;
   }
   $297 = $241 * +HEAPF32[$5 + ($i$091 * 156 | 0) + 24 >> 2];
   $298 = -$297;
   if ($297 <= -0.0) if ($242 + $235 * $298 >= 0.0) {
    $303 = $298 - $175;
    $304 = 0.0 - $177;
    $305 = $43 * $303;
    $306 = $44 * $303;
    $307 = $43 * $304;
    $308 = $44 * $304;
    $309 = $307 + $305;
    $310 = $308 + $306;
    HEAPF32[$174 >> 2] = $298;
    HEAPF32[$176 >> 2] = 0.0;
    $416 = $69 - $12 * $309;
    $418 = $71 - $12 * $310;
    $427 = $65 + $16 * $309;
    $429 = $67 + $16 * $310;
    $wA$1 = $wA$085 - $14 * ($306 * $193 - $305 * $191 + ($308 * $211 - $307 * $208));
    $wB$1 = $wB$084 + $18 * ($306 * $184 - $305 * $181 + ($308 * $201 - $307 * $198));
    break;
   }
   $339 = $242 * +HEAPF32[$5 + ($i$091 * 156 | 0) + 60 >> 2];
   $340 = -$339;
   if ($339 <= -0.0) if ($241 + $231 * $340 >= 0.0) {
    $345 = 0.0 - $175;
    $346 = $340 - $177;
    $347 = $43 * $345;
    $348 = $44 * $345;
    $349 = $43 * $346;
    $350 = $44 * $346;
    $351 = $347 + $349;
    $352 = $348 + $350;
    HEAPF32[$174 >> 2] = 0.0;
    HEAPF32[$176 >> 2] = $340;
    $416 = $69 - $12 * $351;
    $418 = $71 - $12 * $352;
    $427 = $65 + $16 * $351;
    $429 = $67 + $16 * $352;
    $wA$1 = $wA$085 - $14 * ($348 * $193 - $347 * $191 + ($350 * $211 - $349 * $208));
    $wB$1 = $wB$084 + $18 * ($348 * $184 - $347 * $181 + ($350 * $201 - $349 * $198));
    break;
   }
   if (!($241 >= 0.0) | !($242 >= 0.0)) {
    $416 = $69;
    $418 = $71;
    $427 = $65;
    $429 = $67;
    $wA$1 = $wA$085;
    $wB$1 = $wB$084;
   } else {
    $381 = 0.0 - $175;
    $382 = 0.0 - $177;
    $383 = $43 * $381;
    $384 = $44 * $381;
    $385 = $43 * $382;
    $386 = $44 * $382;
    $387 = $383 + $385;
    $388 = $384 + $386;
    HEAPF32[$174 >> 2] = 0.0;
    HEAPF32[$176 >> 2] = 0.0;
    $416 = $69 - $12 * $387;
    $418 = $71 - $12 * $388;
    $427 = $65 + $16 * $387;
    $429 = $67 + $16 * $388;
    $wA$1 = $wA$085 - $14 * ($384 * $193 - $383 * $191 + ($386 * $211 - $385 * $208));
    $wB$1 = $wB$084 + $18 * ($384 * $184 - $383 * $181 + ($386 * $201 - $385 * $198));
   }
  } while (0);
  $415 = +$416;
  $417 = +$418;
  $419 = $21;
  HEAPF32[$419 >> 2] = $415;
  HEAPF32[$419 + 4 >> 2] = $417;
  $423 = HEAP32[$4 >> 2] | 0;
  HEAPF32[$423 + ($8 * 12 | 0) + 8 >> 2] = $wA$1;
  $426 = +$427;
  $428 = +$429;
  $430 = $423 + ($10 * 12 | 0) | 0;
  HEAPF32[$430 >> 2] = $426;
  HEAPF32[$430 + 4 >> 2] = $428;
  $22 = HEAP32[$4 >> 2] | 0;
  HEAPF32[$22 + ($10 * 12 | 0) + 8 >> 2] = $wB$1;
  $i$091 = $i$091 + 1 | 0;
  if (($i$091 | 0) >= (HEAP32[$0 >> 2] | 0)) {
   label = 22;
   break;
  }
 }
 if ((label | 0) == 5) ___assert_fail(93712, 93560, 312, 93752); else if ((label | 0) == 10) ___assert_fail(93784, 93560, 407, 93752); else if ((label | 0) == 22) return;
}

function _png_colorspace_check_xy($XYZ, $xy) {
 $XYZ = $XYZ | 0;
 $xy = $xy | 0;
 var $$0 = 0, $$0$i33$i = 0, $$0$i35$i = 0, $$0$i38$i = 0, $$ph$i = 0, $$ph71$i = 0, $$ph73$i = 0, $$ph75$i = 0, $$ph78$i = 0, $$ph80$i = 0, $$ph82$i = 0, $$ph85$i = 0, $0 = 0, $10 = 0, $104 = 0.0, $11 = 0, $115 = 0.0, $127 = 0.0, $135 = 0.0, $139 = 0.0, $142 = 0.0, $146 = 0, $147 = 0.0, $15 = 0, $150 = 0.0, $154 = 0, $16 = 0, $162 = 0.0, $166 = 0, $167 = 0, $173 = 0.0, $177 = 0, $179 = 0, $18 = 0, $180 = 0, $187 = 0.0, $19 = 0, $191 = 0, $192 = 0, $199 = 0.0, $2 = 0, $203 = 0, $204 = 0, $210 = 0.0, $214 = 0, $216 = 0, $217 = 0, $224 = 0.0, $228 = 0, $229 = 0, $231 = 0, $237 = 0.0, $24 = 0, $241 = 0, $242 = 0, $249 = 0.0, $253 = 0, $255 = 0, $256 = 0, $264 = 0.0, $268 = 0, $27 = 0, $3 = 0, $31 = 0, $32 = 0, $40 = 0.0, $44 = 0, $45 = 0, $53 = 0.0, $57 = 0, $58 = 0, $66 = 0.0, $7 = 0, $70 = 0, $78 = 0.0, $8 = 0, $92 = 0.0, $or$cond2$i16$i = 0, $storemerge = 0, $storemerge$i = 0, $storemerge101$i = 0, $storemerge102$i = 0, $storemerge103$i = 0, $storemerge104$i = 0, $storemerge105$i = 0, $storemerge106$i = 0, $storemerge107$i = 0, $xy_test = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $xy_test = sp;
 $0 = HEAP32[$xy >> 2] | 0;
 if ($0 >>> 0 > 1e5) {
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $2 = $xy + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if (($3 | 0) < 0 | ($3 | 0) > (1e5 - $0 | 0)) {
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $7 = $xy + 8 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 if ($8 >>> 0 > 1e5) {
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $10 = $xy + 12 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 if (($11 | 0) < 0 | ($11 | 0) > (1e5 - $8 | 0)) {
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $15 = $xy + 16 | 0;
 $16 = HEAP32[$15 >> 2] | 0;
 if ($16 >>> 0 > 1e5) {
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $18 = $xy + 20 | 0;
 $19 = HEAP32[$18 >> 2] | 0;
 if (($19 | 0) < 0 | ($19 | 0) > (1e5 - $16 | 0)) {
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $24 = HEAP32[$xy + 24 >> 2] | 0;
 if ($24 >>> 0 > 1e5) {
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $27 = HEAP32[$xy + 28 >> 2] | 0;
 if (($27 | 0) < 0 | ($27 | 0) > (1e5 - $24 | 0)) {
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $31 = ($8 | 0) == ($16 | 0);
 $32 = ($3 | 0) == ($19 | 0);
 do if ($31 | $32) $$ph$i = 0; else {
  $40 = +Math_floor(+(+($8 - $16 | 0) * +($3 - $19 | 0) / 7.0 + .5));
  if ($40 <= 2147483647.0 & $40 >= -2147483648.0) {
   $$ph$i = ~~$40;
   break;
  } else {
   $$0 = 2;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 $44 = ($11 | 0) == ($19 | 0);
 $45 = ($0 | 0) == ($16 | 0);
 do if ($44 | $45) $$ph71$i = 0; else {
  $53 = +Math_floor(+(+($0 - $16 | 0) * +($11 - $19 | 0) / 7.0 + .5));
  if ($53 <= 2147483647.0 & $53 >= -2147483648.0) {
   $$ph71$i = ~~$53;
   break;
  } else {
   $$0 = 2;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 $57 = $$ph$i - $$ph71$i | 0;
 $58 = ($27 | 0) == ($19 | 0);
 do if ($31 | $58) $$ph73$i = 0; else {
  $66 = +Math_floor(+(+($8 - $16 | 0) * +($27 - $19 | 0) / 7.0 + .5));
  if ($66 <= 2147483647.0 & $66 >= -2147483648.0) {
   $$ph73$i = ~~$66;
   break;
  } else {
   $$0 = 2;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 $70 = ($24 | 0) == ($16 | 0);
 do if ($44 | $70) $$ph75$i = 0; else {
  $78 = +Math_floor(+(+($11 - $19 | 0) * +($24 - $16 | 0) / 7.0 + .5));
  if ($78 <= 2147483647.0 & $78 >= -2147483648.0) {
   $$ph75$i = ~~$78;
   break;
  } else {
   $$0 = 2;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 if (($$ph73$i | 0) == ($$ph75$i | 0)) {
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $or$cond2$i16$i = ($27 | 0) == 0 | ($$ph$i | 0) == ($$ph71$i | 0);
 do if ($or$cond2$i16$i) $$ph78$i = 0; else {
  $92 = +Math_floor(+(+($27 | 0) * +($57 | 0) / +($$ph73$i - $$ph75$i | 0) + .5));
  if ($92 <= 2147483647.0 & $92 >= -2147483648.0) {
   $$ph78$i = ~~$92;
   break;
  } else {
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 if (($$ph78$i | 0) <= ($27 | 0)) {
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 do if ($32 | $70) $$ph80$i = 0; else {
  $104 = +Math_floor(+(+($3 - $19 | 0) * +($24 - $16 | 0) / 7.0 + .5));
  if ($104 <= 2147483647.0 & $104 >= -2147483648.0) {
   $$ph80$i = ~~$104;
   break;
  } else {
   $$0 = 2;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 do if ($45 | $58) $$ph82$i = 0; else {
  $115 = +Math_floor(+(+($0 - $16 | 0) * +($27 - $19 | 0) / 7.0 + .5));
  if ($115 <= 2147483647.0 & $115 >= -2147483648.0) {
   $$ph82$i = ~~$115;
   break;
  } else {
   $$0 = 2;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 if (($$ph80$i | 0) == ($$ph82$i | 0)) {
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 do if ($or$cond2$i16$i) $$ph85$i = 0; else {
  $127 = +Math_floor(+(+($27 | 0) * +($57 | 0) / +($$ph80$i - $$ph82$i | 0) + .5));
  if ($127 <= 2147483647.0 & $127 >= -2147483648.0) {
   $$ph85$i = ~~$127;
   break;
  } else {
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 if (($$ph85$i | 0) <= ($27 | 0)) {
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $135 = +Math_floor(+(1.0e10 / +($27 | 0) + .5));
 if ($135 <= 2147483647.0 & $135 >= -2147483648.0) $$0$i33$i = ~~$135; else $$0$i33$i = 0;
 $139 = +($$ph78$i | 0);
 $142 = +Math_floor(+(1.0e10 / $139 + .5));
 if ($142 <= 2147483647.0 & $142 >= -2147483648.0) $$0$i35$i = ~~$142; else $$0$i35$i = 0;
 $146 = $$0$i33$i - $$0$i35$i | 0;
 $147 = +($$ph85$i | 0);
 $150 = +Math_floor(+(1.0e10 / $147 + .5));
 if ($150 <= 2147483647.0 & $150 >= -2147483648.0) $$0$i38$i = ~~$150; else $$0$i38$i = 0;
 $154 = $146 - $$0$i38$i | 0;
 if (($154 | 0) < 1) {
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!$$ph78$i) {
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 do if (!$0) $storemerge$i = 0; else {
  $162 = +Math_floor(+(+($0 | 0) * 1.0e5 / $139 + .5));
  if ($162 <= 2147483647.0 & $162 >= -2147483648.0) {
   $storemerge$i = ~~$162;
   break;
  } else {
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 HEAP32[$XYZ >> 2] = $storemerge$i;
 $166 = $XYZ + 4 | 0;
 $167 = HEAP32[$2 >> 2] | 0;
 do if (!$167) $storemerge101$i = 0; else {
  $173 = +Math_floor(+(+($167 | 0) * 1.0e5 / $139 + .5));
  if ($173 <= 2147483647.0 & $173 >= -2147483648.0) {
   $storemerge101$i = ~~$173;
   break;
  } else {
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 HEAP32[$166 >> 2] = $storemerge101$i;
 $177 = $XYZ + 8 | 0;
 $179 = 1e5 - (HEAP32[$xy >> 2] | 0) | 0;
 $180 = HEAP32[$2 >> 2] | 0;
 do if (($179 | 0) == ($180 | 0)) $storemerge102$i = 0; else {
  $187 = +Math_floor(+(+($179 - $180 | 0) * 1.0e5 / $139 + .5));
  if ($187 <= 2147483647.0 & $187 >= -2147483648.0) {
   $storemerge102$i = ~~$187;
   break;
  } else {
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 HEAP32[$177 >> 2] = $storemerge102$i;
 $191 = $XYZ + 12 | 0;
 $192 = HEAP32[$7 >> 2] | 0;
 if (!$$ph85$i) {
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 do if (!$192) $storemerge103$i = 0; else {
  $199 = +Math_floor(+(+($192 | 0) * 1.0e5 / $147 + .5));
  if ($199 <= 2147483647.0 & $199 >= -2147483648.0) {
   $storemerge103$i = ~~$199;
   break;
  } else {
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 HEAP32[$191 >> 2] = $storemerge103$i;
 $203 = $XYZ + 16 | 0;
 $204 = HEAP32[$10 >> 2] | 0;
 do if (!$204) $storemerge104$i = 0; else {
  $210 = +Math_floor(+(+($204 | 0) * 1.0e5 / $147 + .5));
  if ($210 <= 2147483647.0 & $210 >= -2147483648.0) {
   $storemerge104$i = ~~$210;
   break;
  } else {
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 HEAP32[$203 >> 2] = $storemerge104$i;
 $214 = $XYZ + 20 | 0;
 $216 = 1e5 - (HEAP32[$7 >> 2] | 0) | 0;
 $217 = HEAP32[$10 >> 2] | 0;
 do if (($216 | 0) == ($217 | 0)) $storemerge105$i = 0; else {
  $224 = +Math_floor(+(+($216 - $217 | 0) * 1.0e5 / $147 + .5));
  if ($224 <= 2147483647.0 & $224 >= -2147483648.0) {
   $storemerge105$i = ~~$224;
   break;
  } else {
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 HEAP32[$214 >> 2] = $storemerge105$i;
 $228 = $XYZ + 24 | 0;
 $229 = HEAP32[$15 >> 2] | 0;
 $231 = ($146 | 0) == ($$0$i38$i | 0);
 do if (($229 | 0) == 0 | $231) $storemerge106$i = 0; else {
  $237 = +Math_floor(+(+($154 | 0) * +($229 | 0) / 1.0e5 + .5));
  if ($237 <= 2147483647.0 & $237 >= -2147483648.0) {
   $storemerge106$i = ~~$237;
   break;
  } else {
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 HEAP32[$228 >> 2] = $storemerge106$i;
 $241 = $XYZ + 28 | 0;
 $242 = HEAP32[$18 >> 2] | 0;
 do if (($242 | 0) == 0 | $231) $storemerge107$i = 0; else {
  $249 = +Math_floor(+(+($154 | 0) * +($242 | 0) / 1.0e5 + .5));
  if ($249 <= 2147483647.0 & $249 >= -2147483648.0) {
   $storemerge107$i = ~~$249;
   break;
  } else {
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 HEAP32[$241 >> 2] = $storemerge107$i;
 $253 = $XYZ + 32 | 0;
 $255 = 1e5 - (HEAP32[$15 >> 2] | 0) | 0;
 $256 = HEAP32[$18 >> 2] | 0;
 do if (($255 | 0) == ($256 | 0) | $231) $storemerge = 0; else {
  $264 = +Math_floor(+(+($154 | 0) * +($255 - $256 | 0) / 1.0e5 + .5));
  if ($264 <= 2147483647.0 & $264 >= -2147483648.0) {
   $storemerge = ~~$264;
   break;
  } else {
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 HEAP32[$253 >> 2] = $storemerge;
 $268 = _png_xy_from_XYZ($xy_test, $XYZ) | 0;
 if ($268) {
  $$0 = $268;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $$0 = (_png_colorspace_endpoints_match($xy, $xy_test, 5) | 0) == 0 & 1;
 STACKTOP = sp;
 return $$0 | 0;
}

function __Z17b2CollidePolygonsP10b2ManifoldPK14b2PolygonShapeRK11b2TransformS3_S6_($manifold, $polyA, $xfA, $polyB, $xfB) {
 $manifold = $manifold | 0;
 $polyA = $polyA | 0;
 $xfA = $xfA | 0;
 $polyB = $polyB | 0;
 $xfB = $xfB | 0;
 var $$ = 0, $$$i = 0, $0 = 0, $1 = 0, $103 = 0, $104 = 0, $111 = 0.0, $114 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $128 = 0, $13 = 0.0, $133 = 0, $136 = 0, $142 = 0.0, $143 = 0.0, $145 = 0, $15 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $158 = 0.0, $160 = 0.0, $166 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $172 = 0.0, $174 = 0.0, $178 = 0.0, $179 = 0.0, $183 = 0.0, $184 = 0.0, $19 = 0.0, $193 = 0.0, $20 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0, $22 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0, $228 = 0.0, $231 = 0.0, $235 = 0, $236 = 0.0, $237 = 0.0, $24 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0, $254 = 0.0, $257 = 0.0, $26 = 0.0, $262 = 0.0, $263 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0, $276 = 0, $278 = 0, $29 = 0.0, $290 = 0.0, $293 = 0.0, $299 = 0.0, $300 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0, $31 = 0.0, $313 = 0, $315 = 0, $328 = 0.0, $329 = 0.0, $33 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0, $35 = 0.0, $36 = 0.0, $38 = 0.0, $40 = 0.0, $42 = 0.0, $43 = 0, $46 = 0, $49 = 0, $52 = 0.0, $54 = 0.0, $56 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $62 = 0.0, $64 = 0.0, $66 = 0.0, $67 = 0.0, $7 = 0.0, $70 = 0.0, $78 = 0.0, $79 = 0, $81 = 0, $84 = 0.0, $87 = 0.0, $9 = 0.0, $91 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, $clipPoints1 = 0, $clipPoints2 = 0, $edge1$0 = 0, $edgeA = 0, $edgeB = 0, $flip$0 = 0, $i$06$i = 0, $incidentEdge = 0, $index$0$lcssa$i = 0, $index$08$i = 0, $index$1$i = 0, $minDot$07$i = 0.0, $pointCount$0$lcssa = 0, $pointCount$1 = 0, $pointCount$1$us = 0, $poly1$0 = 0, $poly2$0 = 0, $tangent = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $edgeA = sp + 92 | 0;
 $edgeB = sp + 88 | 0;
 $incidentEdge = sp;
 $tangent = sp + 80 | 0;
 $clipPoints1 = sp + 56 | 0;
 $clipPoints2 = sp + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = $manifold + 60 | 0;
 HEAP32[$1 >> 2] = 0;
 $6 = +HEAPF32[$polyA + 8 >> 2] + +HEAPF32[$polyB + 8 >> 2];
 HEAP32[$edgeA >> 2] = 0;
 $7 = +__ZL19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5_($edgeA, $polyA, $xfA, $polyB, $xfB);
 if ($7 > $6) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$edgeB >> 2] = 0;
 $9 = +__ZL19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5_($edgeB, $polyB, $xfB, $polyA, $xfA);
 if ($9 > $6) {
  STACKTOP = sp;
  return;
 }
 if ($9 > $7 + 5.000000237487257e-04) {
  $13 = +HEAPF32[$xfB >> 2];
  $15 = +HEAPF32[$xfB + 4 >> 2];
  $17 = +HEAPF32[$xfB + 8 >> 2];
  $19 = +HEAPF32[$xfB + 12 >> 2];
  $20 = +HEAPF32[$xfA >> 2];
  $22 = +HEAPF32[$xfA + 4 >> 2];
  $24 = +HEAPF32[$xfA + 8 >> 2];
  $26 = +HEAPF32[$xfA + 12 >> 2];
  $27 = HEAP32[$edgeB >> 2] | 0;
  HEAP32[$manifold + 56 >> 2] = 2;
  $179 = $13;
  $184 = $15;
  $54 = $19;
  $58 = $17;
  $64 = $26;
  $66 = $24;
  $91 = $20;
  $96 = $22;
  $edge1$0 = $27;
  $flip$0 = 1;
  $poly1$0 = $polyB;
  $poly2$0 = $polyA;
 } else {
  $29 = +HEAPF32[$xfA >> 2];
  $31 = +HEAPF32[$xfA + 4 >> 2];
  $33 = +HEAPF32[$xfA + 8 >> 2];
  $35 = +HEAPF32[$xfA + 12 >> 2];
  $36 = +HEAPF32[$xfB >> 2];
  $38 = +HEAPF32[$xfB + 4 >> 2];
  $40 = +HEAPF32[$xfB + 8 >> 2];
  $42 = +HEAPF32[$xfB + 12 >> 2];
  $43 = HEAP32[$edgeA >> 2] | 0;
  HEAP32[$manifold + 56 >> 2] = 1;
  $179 = $29;
  $184 = $31;
  $54 = $35;
  $58 = $33;
  $64 = $42;
  $66 = $40;
  $91 = $36;
  $96 = $38;
  $edge1$0 = $43;
  $flip$0 = 0;
  $poly1$0 = $polyA;
  $poly2$0 = $polyB;
 }
 $46 = HEAP32[$poly2$0 + 148 >> 2] | 0;
 if (($edge1$0 | 0) <= -1) ___assert_fail(92712, 92752, 74, 92816);
 $49 = HEAP32[$poly1$0 + 148 >> 2] | 0;
 if (($49 | 0) <= ($edge1$0 | 0)) ___assert_fail(92712, 92752, 74, 92816);
 $52 = +HEAPF32[$poly1$0 + ($edge1$0 << 3) + 84 >> 2];
 $56 = +HEAPF32[$poly1$0 + ($edge1$0 << 3) + 88 >> 2];
 $59 = $54 * $52 - $58 * $56;
 $62 = $58 * $52 + $54 * $56;
 $67 = $64 * $59 + $66 * $62;
 $70 = $64 * $62 - $66 * $59;
 if (($46 | 0) > 0) {
  $i$06$i = 0;
  $index$08$i = 0;
  $minDot$07$i = 3402823466385288598117041.0e14;
  while (1) {
   $78 = $67 * +HEAPF32[$poly2$0 + ($i$06$i << 3) + 84 >> 2] + $70 * +HEAPF32[$poly2$0 + ($i$06$i << 3) + 88 >> 2];
   $79 = $78 < $minDot$07$i;
   $index$1$i = $79 ? $i$06$i : $index$08$i;
   $i$06$i = $i$06$i + 1 | 0;
   if (($i$06$i | 0) == ($46 | 0)) {
    $index$0$lcssa$i = $index$1$i;
    break;
   } else {
    $index$08$i = $index$1$i;
    $minDot$07$i = $79 ? $78 : $minDot$07$i;
   }
  }
 } else $index$0$lcssa$i = 0;
 $81 = $index$0$lcssa$i + 1 | 0;
 $$$i = ($81 | 0) < ($46 | 0) ? $81 : 0;
 $84 = +HEAPF32[$poly2$0 + ($index$0$lcssa$i << 3) + 20 >> 2];
 $87 = +HEAPF32[$poly2$0 + ($index$0$lcssa$i << 3) + 24 >> 2];
 $97 = +($91 + ($64 * $84 - $66 * $87));
 $98 = +($96 + ($66 * $84 + $64 * $87));
 $99 = $incidentEdge;
 HEAPF32[$99 >> 2] = $97;
 HEAPF32[$99 + 4 >> 2] = $98;
 $103 = $edge1$0 & 255;
 $104 = $incidentEdge + 8 | 0;
 HEAP8[$104 >> 0] = $103;
 HEAP8[$104 + 1 >> 0] = $index$0$lcssa$i;
 HEAP8[$104 + 2 >> 0] = 1;
 HEAP8[$104 + 3 >> 0] = 0;
 $111 = +HEAPF32[$poly2$0 + ($$$i << 3) + 20 >> 2];
 $114 = +HEAPF32[$poly2$0 + ($$$i << 3) + 24 >> 2];
 $122 = +($91 + ($64 * $111 - $66 * $114));
 $123 = +($96 + ($66 * $111 + $64 * $114));
 $124 = $incidentEdge + 12 | 0;
 HEAPF32[$124 >> 2] = $122;
 HEAPF32[$124 + 4 >> 2] = $123;
 $128 = $incidentEdge + 20 | 0;
 HEAP8[$128 >> 0] = $103;
 HEAP8[$128 + 1 >> 0] = $$$i;
 HEAP8[$128 + 2 >> 0] = 1;
 HEAP8[$128 + 3 >> 0] = 0;
 $133 = $edge1$0 + 1 | 0;
 $$ = ($133 | 0) < ($49 | 0) ? $133 : 0;
 $136 = $poly1$0 + ($edge1$0 << 3) + 20 | 0;
 $142 = +HEAPF32[$136 >> 2];
 $143 = +HEAPF32[$136 + 4 >> 2];
 $145 = $poly1$0 + ($$ << 3) + 20 | 0;
 $151 = +HEAPF32[$145 >> 2];
 $152 = +HEAPF32[$145 + 4 >> 2];
 $153 = $151 - $142;
 $154 = $152 - $143;
 $158 = +Math_sqrt(+($153 * $153 + $154 * $154));
 if ($158 < 1.1920928955078125e-07) {
  $166 = $153;
  $168 = $154;
 } else {
  $160 = 1.0 / $158;
  $166 = $153 * $160;
  $168 = $154 * $160;
 }
 $169 = $54 * $166 - $58 * $168;
 $172 = $54 * $168 + $58 * $166;
 HEAPF32[$tangent >> 2] = $169;
 HEAPF32[$tangent + 4 >> 2] = $172;
 $174 = -$169;
 $178 = $179 + ($54 * $142 - $58 * $143);
 $183 = $184 + ($58 * $142 + $54 * $143);
 $193 = $178 * $172 + $183 * $174;
 HEAPF32[$0 >> 2] = $174;
 HEAPF32[$0 + 4 >> 2] = -$172;
 if ((__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi($clipPoints1, $incidentEdge, $0, $6 - ($178 * $169 + $183 * $172), $edge1$0) | 0) < 2) {
  STACKTOP = sp;
  return;
 }
 if ((__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi($clipPoints2, $clipPoints1, $tangent, $6 + (($179 + ($54 * $151 - $58 * $152)) * $169 + ($184 + ($58 * $151 + $54 * $152)) * $172), $$) | 0) < 2) {
  STACKTOP = sp;
  return;
 }
 $214 = +$168;
 $215 = +-$166;
 $216 = $manifold + 40 | 0;
 HEAPF32[$216 >> 2] = $214;
 HEAPF32[$216 + 4 >> 2] = $215;
 $221 = +(($142 + $151) * .5);
 $222 = +(($143 + $152) * .5);
 $223 = $manifold + 48 | 0;
 HEAPF32[$223 >> 2] = $221;
 HEAPF32[$223 + 4 >> 2] = $222;
 $228 = +HEAPF32[$clipPoints2 >> 2];
 $231 = +HEAPF32[$clipPoints2 + 4 >> 2];
 $235 = !($172 * $228 + $231 * $174 - $193 <= $6);
 if (!($flip$0 << 24 >> 24)) {
  if ($235) $pointCount$1$us = 0; else {
   $236 = $228 - $91;
   $237 = $231 - $96;
   $244 = +($64 * $236 + $66 * $237);
   $245 = +($64 * $237 - $66 * $236);
   $246 = $manifold;
   HEAPF32[$246 >> 2] = $244;
   HEAPF32[$246 + 4 >> 2] = $245;
   HEAP32[$manifold + 16 >> 2] = HEAP32[$clipPoints2 + 8 >> 2];
   $pointCount$1$us = 1;
  }
  $254 = +HEAPF32[$clipPoints2 + 12 >> 2];
  $257 = +HEAPF32[$clipPoints2 + 16 >> 2];
  if (!($172 * $254 + $257 * $174 - $193 <= $6)) $pointCount$0$lcssa = $pointCount$1$us; else {
   $328 = $254 - $91;
   $329 = $257 - $96;
   $336 = +($64 * $328 + $66 * $329);
   $337 = +($64 * $329 - $66 * $328);
   $338 = $manifold + ($pointCount$1$us * 20 | 0) | 0;
   HEAPF32[$338 >> 2] = $336;
   HEAPF32[$338 + 4 >> 2] = $337;
   HEAP32[$manifold + ($pointCount$1$us * 20 | 0) + 16 >> 2] = HEAP32[$clipPoints2 + 20 >> 2];
   $pointCount$0$lcssa = $pointCount$1$us + 1 | 0;
  }
 } else {
  if ($235) $pointCount$1 = 0; else {
   $262 = $228 - $91;
   $263 = $231 - $96;
   $270 = +($64 * $262 + $66 * $263);
   $271 = +($64 * $263 - $66 * $262);
   $272 = $manifold;
   HEAPF32[$272 >> 2] = $270;
   HEAPF32[$272 + 4 >> 2] = $271;
   $276 = $manifold + 16 | 0;
   $278 = HEAP32[$clipPoints2 + 8 >> 2] | 0;
   HEAP32[$276 >> 2] = $278;
   HEAP8[$276 >> 0] = $278 >>> 8;
   HEAP8[$276 + 1 >> 0] = $278;
   HEAP8[$276 + 2 >> 0] = $278 >>> 24;
   HEAP8[$276 + 3 >> 0] = $278 >>> 16;
   $pointCount$1 = 1;
  }
  $290 = +HEAPF32[$clipPoints2 + 12 >> 2];
  $293 = +HEAPF32[$clipPoints2 + 16 >> 2];
  if (!($172 * $290 + $293 * $174 - $193 <= $6)) $pointCount$0$lcssa = $pointCount$1; else {
   $299 = $290 - $91;
   $300 = $293 - $96;
   $307 = +($64 * $299 + $66 * $300);
   $308 = +($64 * $300 - $66 * $299);
   $309 = $manifold + ($pointCount$1 * 20 | 0) | 0;
   HEAPF32[$309 >> 2] = $307;
   HEAPF32[$309 + 4 >> 2] = $308;
   $313 = $manifold + ($pointCount$1 * 20 | 0) + 16 | 0;
   $315 = HEAP32[$clipPoints2 + 20 >> 2] | 0;
   HEAP32[$313 >> 2] = $315;
   HEAP8[$313 >> 0] = $315 >>> 8;
   HEAP8[$313 + 1 >> 0] = $315;
   HEAP8[$313 + 2 >> 0] = $315 >>> 24;
   HEAP8[$313 + 3 >> 0] = $315 >>> 16;
   $pointCount$0$lcssa = $pointCount$1 + 1 | 0;
  }
 }
 HEAP32[$1 >> 2] = $pointCount$0$lcssa;
 STACKTOP = sp;
 return;
}

function __ZN15b2RevoluteJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $$pn = 0.0, $$pn2 = 0.0, $$pn3 = 0.0, $$pn4 = 0.0, $$pn40 = 0.0, $$pn41 = 0.0, $$pn42 = 0.0, $$pn43 = 0.0, $$pn44 = 0.0, $$pn45 = 0.0, $0 = 0, $1 = 0, $101 = 0.0, $102 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $110 = 0, $113 = 0, $116 = 0, $117 = 0, $118 = 0.0, $119 = 0.0, $128 = 0.0, $13 = 0.0, $130 = 0.0, $132 = 0.0, $134 = 0.0, $137 = 0, $14 = 0.0, $142 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0.0, $157 = 0.0, $159 = 0.0, $16 = 0.0, $161 = 0.0, $163 = 0.0, $166 = 0, $17 = 0, $171 = 0, $176 = 0.0, $179 = 0.0, $18 = 0, $182 = 0.0, $189 = 0, $192 = 0, $199 = 0, $2 = 0, $20 = 0, $202 = 0, $209 = 0.0, $211 = 0.0, $212 = 0, $216 = 0.0, $217 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0.0, $239 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0.0, $249 = 0.0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $26 = 0.0, $27 = 0.0, $29 = 0.0, $3 = 0, $31 = 0.0, $33 = 0.0, $35 = 0.0, $37 = 0.0, $39 = 0, $4 = 0, $5 = 0, $53 = 0, $54 = 0.0, $58 = 0.0, $59 = 0.0, $60 = 0.0, $62 = 0.0, $64 = 0.0, $65 = 0.0, $7 = 0, $73 = 0, $76 = 0, $79 = 0, $86 = 0, $89 = 0, $92 = 0.0, $93 = 0.0, $97 = 0, $98 = 0.0, $99 = 0.0, $Cdot3 = 0, $impulse9 = 0, $reduced = 0, $reduced7 = 0, $rhs = 0, $rhs6 = 0, $wA$0 = 0.0, $wA$1 = 0.0, $wB$0 = 0.0, $wB$1 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $Cdot3 = sp + 60 | 0;
 $0 = sp + 48 | 0;
 $rhs = sp + 40 | 0;
 $reduced = sp + 32 | 0;
 $rhs6 = sp + 24 | 0;
 $reduced7 = sp + 16 | 0;
 $impulse9 = sp + 8 | 0;
 $1 = sp;
 $2 = $this + 128 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $data + 28 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $7 = $5 + ($3 * 12 | 0) | 0;
 $13 = +HEAPF32[$7 >> 2];
 $14 = +HEAPF32[$7 + 4 >> 2];
 $16 = +HEAPF32[$5 + ($3 * 12 | 0) + 8 >> 2];
 $17 = $this + 132 | 0;
 $18 = HEAP32[$17 >> 2] | 0;
 $20 = $5 + ($18 * 12 | 0) | 0;
 $26 = +HEAPF32[$20 >> 2];
 $27 = +HEAPF32[$20 + 4 >> 2];
 $29 = +HEAPF32[$5 + ($18 * 12 | 0) + 8 >> 2];
 $31 = +HEAPF32[$this + 168 >> 2];
 $33 = +HEAPF32[$this + 172 >> 2];
 $35 = +HEAPF32[$this + 176 >> 2];
 $37 = +HEAPF32[$this + 180 >> 2];
 $39 = $35 + $37 == 0.0;
 if (!(HEAP8[$this + 100 >> 0] | 0)) {
  $wA$0 = $16;
  $wB$0 = $29;
 } else if ((HEAP32[$this + 224 >> 2] | 0) == 3 | $39) {
  $wA$0 = $16;
  $wB$0 = $29;
 } else {
  $53 = $this + 96 | 0;
  $54 = +HEAPF32[$53 >> 2];
  $58 = +HEAPF32[$data >> 2] * +HEAPF32[$this + 104 >> 2];
  $59 = $54 - +HEAPF32[$this + 220 >> 2] * ($29 - $16 - +HEAPF32[$this + 108 >> 2]);
  $60 = -$58;
  $62 = $59 < $58 ? $59 : $58;
  $64 = $62 < $60 ? $60 : $62;
  HEAPF32[$53 >> 2] = $64;
  $65 = $64 - $54;
  $wA$0 = $16 - $35 * $65;
  $wB$0 = $29 + $37 * $65;
 }
 if (HEAP8[$this + 112 >> 0] | 0) {
  $73 = $this + 224 | 0;
  if (!((HEAP32[$73 >> 2] | 0) == 0 | $39)) {
   $76 = $this + 148 | 0;
   $79 = $this + 144 | 0;
   $86 = $this + 140 | 0;
   $89 = $this + 136 | 0;
   $92 = $26 - $wB$0 * +HEAPF32[$76 >> 2] - $13 + $wA$0 * +HEAPF32[$86 >> 2];
   $93 = $27 + $wB$0 * +HEAPF32[$79 >> 2] - $14 - $wA$0 * +HEAPF32[$89 >> 2];
   HEAPF32[$Cdot3 >> 2] = $92;
   HEAPF32[$Cdot3 + 4 >> 2] = $93;
   HEAPF32[$Cdot3 + 8 >> 2] = $wB$0 - $wA$0;
   $97 = $this + 184 | 0;
   __ZNK7b2Mat337Solve33ERK6b2Vec3($0, $97, $Cdot3);
   $98 = +HEAPF32[$0 >> 2];
   $99 = -$98;
   $101 = +HEAPF32[$0 + 4 >> 2];
   $102 = -$101;
   $104 = +HEAPF32[$0 + 8 >> 2];
   $105 = -$104;
   $106 = HEAP32[$73 >> 2] | 0;
   do if (($106 | 0) == 1) {
    $116 = $this + 84 | 0;
    $117 = $this + 92 | 0;
    $118 = +HEAPF32[$117 >> 2];
    $119 = $118 - $104;
    if ($119 < 0.0) {
     $128 = $118 * +HEAPF32[$this + 212 >> 2] - $93;
     HEAPF32[$rhs >> 2] = $118 * +HEAPF32[$this + 208 >> 2] - $92;
     HEAPF32[$rhs + 4 >> 2] = $128;
     __ZNK7b2Mat337Solve22ERK6b2Vec2($reduced, $97, $rhs);
     $130 = +HEAPF32[$reduced >> 2];
     $132 = +HEAPF32[$reduced + 4 >> 2];
     $134 = -+HEAPF32[$117 >> 2];
     HEAPF32[$116 >> 2] = $130 + +HEAPF32[$116 >> 2];
     $137 = $this + 88 | 0;
     HEAPF32[$137 >> 2] = $132 + +HEAPF32[$137 >> 2];
     HEAPF32[$117 >> 2] = 0.0;
     $176 = $132;
     $179 = $130;
     $182 = $134;
     break;
    } else {
     HEAPF32[$116 >> 2] = +HEAPF32[$116 >> 2] - $98;
     $142 = $this + 88 | 0;
     HEAPF32[$142 >> 2] = +HEAPF32[$142 >> 2] - $101;
     HEAPF32[$117 >> 2] = $119;
     $176 = $102;
     $179 = $99;
     $182 = $105;
     break;
    }
   } else if (($106 | 0) == 3) {
    $107 = $this + 84 | 0;
    HEAPF32[$107 >> 2] = +HEAPF32[$107 >> 2] - $98;
    $110 = $this + 88 | 0;
    HEAPF32[$110 >> 2] = +HEAPF32[$110 >> 2] - $101;
    $113 = $this + 92 | 0;
    HEAPF32[$113 >> 2] = +HEAPF32[$113 >> 2] - $104;
    $176 = $102;
    $179 = $99;
    $182 = $105;
   } else if (($106 | 0) == 2) {
    $145 = $this + 84 | 0;
    $146 = $this + 92 | 0;
    $147 = +HEAPF32[$146 >> 2];
    $148 = $147 - $104;
    if ($148 > 0.0) {
     $157 = $147 * +HEAPF32[$this + 212 >> 2] - $93;
     HEAPF32[$rhs6 >> 2] = $147 * +HEAPF32[$this + 208 >> 2] - $92;
     HEAPF32[$rhs6 + 4 >> 2] = $157;
     __ZNK7b2Mat337Solve22ERK6b2Vec2($reduced7, $97, $rhs6);
     $159 = +HEAPF32[$reduced7 >> 2];
     $161 = +HEAPF32[$reduced7 + 4 >> 2];
     $163 = -+HEAPF32[$146 >> 2];
     HEAPF32[$145 >> 2] = $159 + +HEAPF32[$145 >> 2];
     $166 = $this + 88 | 0;
     HEAPF32[$166 >> 2] = $161 + +HEAPF32[$166 >> 2];
     HEAPF32[$146 >> 2] = 0.0;
     $176 = $161;
     $179 = $159;
     $182 = $163;
     break;
    } else {
     HEAPF32[$145 >> 2] = +HEAPF32[$145 >> 2] - $98;
     $171 = $this + 88 | 0;
     HEAPF32[$171 >> 2] = +HEAPF32[$171 >> 2] - $101;
     HEAPF32[$146 >> 2] = $148;
     $176 = $102;
     $179 = $99;
     $182 = $105;
     break;
    }
   } else {
    $176 = $102;
    $179 = $99;
    $182 = $105;
   } while (0);
   $$pn3 = $182 + ($176 * +HEAPF32[$79 >> 2] - $179 * +HEAPF32[$76 >> 2]);
   $$pn4 = $182 + ($176 * +HEAPF32[$89 >> 2] - $179 * +HEAPF32[$86 >> 2]);
   $$pn44 = $176;
   $$pn45 = $179;
   $$pn43 = $33 * $$pn45;
   $$pn42 = $33 * $$pn44;
   $$pn41 = $31 * $$pn45;
   $$pn40 = $31 * $$pn44;
   $230 = $26 + $$pn43;
   $231 = $27 + $$pn42;
   $232 = $13 - $$pn41;
   $233 = $14 - $$pn40;
   $$pn2 = $35 * $$pn4;
   $$pn = $37 * $$pn3;
   $wA$1 = $wA$0 - $$pn2;
   $wB$1 = $wB$0 + $$pn;
   $234 = HEAP32[$2 >> 2] | 0;
   $235 = HEAP32[$4 >> 2] | 0;
   $236 = $235 + ($234 * 12 | 0) | 0;
   $237 = +$232;
   $238 = +$233;
   $239 = $236;
   $240 = $239;
   HEAPF32[$240 >> 2] = $237;
   $241 = $239 + 4 | 0;
   $242 = $241;
   HEAPF32[$242 >> 2] = $238;
   $243 = HEAP32[$2 >> 2] | 0;
   $244 = HEAP32[$4 >> 2] | 0;
   $245 = $244 + ($243 * 12 | 0) + 8 | 0;
   HEAPF32[$245 >> 2] = $wA$1;
   $246 = HEAP32[$17 >> 2] | 0;
   $247 = $244 + ($246 * 12 | 0) | 0;
   $248 = +$230;
   $249 = +$231;
   $250 = $247;
   $251 = $250;
   HEAPF32[$251 >> 2] = $248;
   $252 = $250 + 4 | 0;
   $253 = $252;
   HEAPF32[$253 >> 2] = $249;
   $254 = HEAP32[$17 >> 2] | 0;
   $255 = HEAP32[$4 >> 2] | 0;
   $256 = $255 + ($254 * 12 | 0) + 8 | 0;
   HEAPF32[$256 >> 2] = $wB$1;
   STACKTOP = sp;
   return;
  }
 }
 $189 = $this + 148 | 0;
 $192 = $this + 144 | 0;
 $199 = $this + 140 | 0;
 $202 = $this + 136 | 0;
 $209 = -($27 + $wB$0 * +HEAPF32[$192 >> 2] - $14 - $wA$0 * +HEAPF32[$202 >> 2]);
 HEAPF32[$1 >> 2] = -($26 - $wB$0 * +HEAPF32[$189 >> 2] - $13 + $wA$0 * +HEAPF32[$199 >> 2]);
 HEAPF32[$1 + 4 >> 2] = $209;
 __ZNK7b2Mat337Solve22ERK6b2Vec2($impulse9, $this + 184 | 0, $1);
 $211 = +HEAPF32[$impulse9 >> 2];
 $212 = $this + 84 | 0;
 HEAPF32[$212 >> 2] = $211 + +HEAPF32[$212 >> 2];
 $216 = +HEAPF32[$impulse9 + 4 >> 2];
 $217 = $this + 88 | 0;
 HEAPF32[$217 >> 2] = $216 + +HEAPF32[$217 >> 2];
 $$pn3 = $216 * +HEAPF32[$192 >> 2] - $211 * +HEAPF32[$189 >> 2];
 $$pn4 = $216 * +HEAPF32[$202 >> 2] - $211 * +HEAPF32[$199 >> 2];
 $$pn44 = $216;
 $$pn45 = $211;
 $$pn43 = $33 * $$pn45;
 $$pn42 = $33 * $$pn44;
 $$pn41 = $31 * $$pn45;
 $$pn40 = $31 * $$pn44;
 $230 = $26 + $$pn43;
 $231 = $27 + $$pn42;
 $232 = $13 - $$pn41;
 $233 = $14 - $$pn40;
 $$pn2 = $35 * $$pn4;
 $$pn = $37 * $$pn3;
 $wA$1 = $wA$0 - $$pn2;
 $wB$1 = $wB$0 + $$pn;
 $234 = HEAP32[$2 >> 2] | 0;
 $235 = HEAP32[$4 >> 2] | 0;
 $236 = $235 + ($234 * 12 | 0) | 0;
 $237 = +$232;
 $238 = +$233;
 $239 = $236;
 $240 = $239;
 HEAPF32[$240 >> 2] = $237;
 $241 = $239 + 4 | 0;
 $242 = $241;
 HEAPF32[$242 >> 2] = $238;
 $243 = HEAP32[$2 >> 2] | 0;
 $244 = HEAP32[$4 >> 2] | 0;
 $245 = $244 + ($243 * 12 | 0) + 8 | 0;
 HEAPF32[$245 >> 2] = $wA$1;
 $246 = HEAP32[$17 >> 2] | 0;
 $247 = $244 + ($246 * 12 | 0) | 0;
 $248 = +$230;
 $249 = +$231;
 $250 = $247;
 $251 = $250;
 HEAPF32[$251 >> 2] = $248;
 $252 = $250 + 4 | 0;
 $253 = $252;
 HEAPF32[$253 >> 2] = $249;
 $254 = HEAP32[$17 >> 2] | 0;
 $255 = HEAP32[$4 >> 2] | 0;
 $256 = $255 + ($254 * 12 | 0) + 8 | 0;
 HEAPF32[$256 >> 2] = $wB$1;
 STACKTOP = sp;
 return;
}

function _png_do_expand($row_info, $row, $trans_color) {
 $row_info = $row_info | 0;
 $row = $row | 0;
 $trans_color = $trans_color | 0;
 var $$pre$phi58Z2D = 0, $$pre$phi60Z2D = 0, $$pre$phi62Z2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $117 = 0, $12 = 0, $120 = 0, $128 = 0, $130 = 0, $131 = 0, $14 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $150 = 0, $164 = 0, $166 = 0, $168 = 0, $170 = 0, $172 = 0, $174 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $188 = 0, $191 = 0, $195 = 0, $198 = 0, $2 = 0, $223 = 0, $226 = 0, $234 = 0, $235 = 0, $27 = 0, $3 = 0, $33 = 0, $34 = 0, $46 = 0, $54 = 0, $60 = 0, $61 = 0, $7 = 0, $71 = 0, $75 = 0, $8 = 0, $85 = 0, $93 = 0, $99 = 0, $dp$025 = 0, $dp$131 = 0, $dp$237 = 0, $dp$316 = 0, $dp$420 = 0, $dp$643 = 0, $dp$848 = 0, $gray$0 = 0, $gray$1 = 0, $i$024 = 0, $i$130 = 0, $i$236 = 0, $i$315 = 0, $i$419 = 0, $i$542 = 0, $i$647 = 0, $shift$027 = 0, $shift$233 = 0, $shift$439 = 0, $sp$026 = 0, $sp$232 = 0, $sp$438 = 0, $sp$617 = 0, $sp$721 = 0, $sp$844 = 0, $sp$949 = 0, $storemerge = 0, label = 0;
 $0 = HEAP32[$row_info >> 2] | 0;
 $1 = $row_info + 8 | 0;
 $2 = HEAP8[$1 >> 0] | 0;
 if (!($2 << 24 >> 24)) {
  $3 = ($trans_color | 0) != 0;
  if ($3) $12 = HEAPU16[$trans_color + 8 >> 1] | 0; else $12 = 0;
  $7 = $row_info + 9 | 0;
  $8 = HEAP8[$7 >> 0] | 0;
  if (($8 & 255) < 8) {
   $10 = $8 & 255;
   if (($10 | 0) == 1) {
    $14 = 0 - ($12 & 1) & 255;
    $15 = $0 + -1 | 0;
    if (!$0) $gray$0 = $14; else {
     $dp$025 = $row + $15 | 0;
     $i$024 = 0;
     $shift$027 = $0 + 7 & 7 ^ 7;
     $sp$026 = $row + ($15 >>> 3) | 0;
     while (1) {
      HEAP8[$dp$025 >> 0] = ((HEAPU8[$sp$026 >> 0] & 1 << $shift$027 | 0) != 0) << 31 >> 31;
      $27 = ($shift$027 | 0) == 7;
      $i$024 = $i$024 + 1 | 0;
      if (($i$024 | 0) == ($0 | 0)) {
       $gray$0 = $14;
       break;
      } else {
       $dp$025 = $dp$025 + -1 | 0;
       $shift$027 = $27 ? 0 : $shift$027 + 1 | 0;
       $sp$026 = $27 ? $sp$026 + -1 | 0 : $sp$026;
      }
     }
    }
   } else if (($10 | 0) == 2) {
    $33 = ($12 & 3) * 85 | 0;
    $34 = $0 + -1 | 0;
    if (!$0) $gray$0 = $33; else {
     $dp$131 = $row + $34 | 0;
     $i$130 = 0;
     $shift$233 = ($0 << 1) + 6 & 6 ^ 6;
     $sp$232 = $row + ($34 >>> 2) | 0;
     while (1) {
      $46 = (HEAPU8[$sp$232 >> 0] | 0) >>> $shift$233 & 3;
      HEAP8[$dp$131 >> 0] = $46 << 2 | $46 | $46 << 4 | $46 << 6;
      $54 = ($shift$233 | 0) == 6;
      $i$130 = $i$130 + 1 | 0;
      if (($i$130 | 0) == ($0 | 0)) {
       $gray$0 = $33;
       break;
      } else {
       $dp$131 = $dp$131 + -1 | 0;
       $shift$233 = $54 ? 0 : $shift$233 + 2 | 0;
       $sp$232 = $54 ? $sp$232 + -1 | 0 : $sp$232;
      }
     }
    }
   } else if (($10 | 0) == 4) {
    $60 = ($12 & 15) * 17 | 0;
    $61 = $0 + -1 | 0;
    if (!$0) $gray$0 = $60; else {
     $dp$237 = $row + $61 | 0;
     $i$236 = 0;
     $shift$439 = $0 << 2 & 4;
     $sp$438 = $row + ($61 >>> 1) | 0;
     while (1) {
      $71 = (HEAPU8[$sp$438 >> 0] | 0) >>> $shift$439 & 15;
      HEAP8[$dp$237 >> 0] = $71 << 4 | $71;
      $75 = ($shift$439 | 0) == 4;
      $i$236 = $i$236 + 1 | 0;
      if (($i$236 | 0) == ($0 | 0)) {
       $gray$0 = $60;
       break;
      } else {
       $dp$237 = $dp$237 + -1 | 0;
       $shift$439 = $75 ? 0 : 4;
       $sp$438 = $75 ? $sp$438 + -1 | 0 : $sp$438;
      }
     }
    }
   } else $gray$0 = $12;
   HEAP8[$7 >> 0] = 8;
   HEAP8[$row_info + 11 >> 0] = 8;
   HEAP32[$row_info + 4 >> 2] = $0;
   $235 = 8;
   $gray$1 = $gray$0;
  } else {
   $235 = $8;
   $gray$1 = $12;
  }
  if (!$3) return;
  if ($235 << 24 >> 24 == 16) {
   $93 = HEAP32[$row_info + 4 >> 2] | 0;
   if ($0) {
    $99 = $gray$1 >>> 8 & 255;
    $100 = $gray$1 & 255;
    $dp$420 = $row + (($93 << 1) + -1) | 0;
    $i$419 = 0;
    $sp$721 = $row + ($93 + -1) | 0;
    while (1) {
     $101 = $sp$721 + -1 | 0;
     if ((HEAP8[$101 >> 0] | 0) == $99 << 24 >> 24) if ((HEAP8[$sp$721 >> 0] | 0) == $100 << 24 >> 24) {
      HEAP8[$dp$420 >> 0] = 0;
      HEAP8[$dp$420 + -1 >> 0] = 0;
     } else label = 26; else label = 26;
     if ((label | 0) == 26) {
      label = 0;
      HEAP8[$dp$420 >> 0] = -1;
      HEAP8[$dp$420 + -1 >> 0] = -1;
     }
     HEAP8[$dp$420 + -2 >> 0] = HEAP8[$sp$721 >> 0] | 0;
     HEAP8[$dp$420 + -3 >> 0] = HEAP8[$101 >> 0] | 0;
     $i$419 = $i$419 + 1 | 0;
     if (($i$419 | 0) == ($0 | 0)) break; else {
      $dp$420 = $dp$420 + -4 | 0;
      $sp$721 = $sp$721 + -2 | 0;
     }
    }
   }
  } else if ($235 << 24 >> 24 == 8) if ($0) {
   $85 = $gray$1 & 255;
   $dp$316 = $row + (($0 << 1) + -1) | 0;
   $i$315 = 0;
   $sp$617 = $row + ($0 + -1) | 0;
   while (1) {
    HEAP8[$dp$316 >> 0] = ((HEAP8[$sp$617 >> 0] | 0) != $85 << 24 >> 24) << 31 >> 31;
    HEAP8[$dp$316 + -1 >> 0] = HEAP8[$sp$617 >> 0] | 0;
    $i$315 = $i$315 + 1 | 0;
    if (($i$315 | 0) == ($0 | 0)) break; else {
     $dp$316 = $dp$316 + -2 | 0;
     $sp$617 = $sp$617 + -1 | 0;
    }
   }
  }
  HEAP8[$1 >> 0] = 4;
  HEAP8[$row_info + 10 >> 0] = 2;
  $117 = HEAPU8[$7 >> 0] << 1;
  HEAP8[$row_info + 11 >> 0] = $117;
  $120 = $117 & 254;
  if ($120 >>> 0 > 7) $128 = Math_imul($120 >>> 3, $0) | 0; else $128 = ((Math_imul($120, $0) | 0) + 7 | 0) >>> 3;
  HEAP32[$row_info + 4 >> 2] = $128;
  return;
 } else if ($2 << 24 >> 24 == 2) {
  if (!$trans_color) return;
  $130 = $row_info + 9 | 0;
  $131 = HEAP8[$130 >> 0] | 0;
  if ($131 << 24 >> 24 == 8) {
   if ($0) {
    $144 = HEAP16[$trans_color + 2 >> 1] & 255;
    $145 = HEAP16[$trans_color + 4 >> 1] & 255;
    $146 = HEAP16[$trans_color + 6 >> 1] & 255;
    $dp$643 = $row + (($0 << 2) + -1) | 0;
    $i$542 = 0;
    $sp$844 = $row + ((HEAP32[$row_info + 4 >> 2] | 0) + -1) | 0;
    while (1) {
     $147 = $sp$844 + -2 | 0;
     $150 = $sp$844 + -1 | 0;
     if ((HEAP8[$147 >> 0] | 0) == $144 << 24 >> 24) if ((HEAP8[$150 >> 0] | 0) == $145 << 24 >> 24) if ((HEAP8[$sp$844 >> 0] | 0) == $146 << 24 >> 24) $storemerge = 0; else label = 39; else label = 39; else label = 39;
     if ((label | 0) == 39) {
      label = 0;
      $storemerge = -1;
     }
     HEAP8[$dp$643 >> 0] = $storemerge;
     HEAP8[$dp$643 + -1 >> 0] = HEAP8[$sp$844 >> 0] | 0;
     HEAP8[$dp$643 + -2 >> 0] = HEAP8[$150 >> 0] | 0;
     HEAP8[$dp$643 + -3 >> 0] = HEAP8[$147 >> 0] | 0;
     $i$542 = $i$542 + 1 | 0;
     if (($i$542 | 0) == ($0 | 0)) break; else {
      $dp$643 = $dp$643 + -4 | 0;
      $sp$844 = $sp$844 + -3 | 0;
     }
    }
   }
  } else if ($131 << 24 >> 24 == 16) {
   $164 = HEAP16[$trans_color + 2 >> 1] | 0;
   $166 = ($164 & 65535) >>> 8 & 65535;
   $168 = HEAP16[$trans_color + 4 >> 1] | 0;
   $170 = ($168 & 65535) >>> 8 & 65535;
   $172 = HEAP16[$trans_color + 6 >> 1] | 0;
   $174 = ($172 & 65535) >>> 8 & 65535;
   if ($0) {
    $181 = $164 & 255;
    $182 = $168 & 255;
    $183 = $172 & 255;
    $dp$848 = $row + (($0 << 3) + -1) | 0;
    $i$647 = 0;
    $sp$949 = $row + ((HEAP32[$row_info + 4 >> 2] | 0) + -1) | 0;
    while (1) {
     $184 = $sp$949 + -5 | 0;
     $188 = $sp$949 + -4 | 0;
     if ((HEAPU8[$184 >> 0] | 0) == ($166 | 0)) if ((HEAP8[$188 >> 0] | 0) == $181 << 24 >> 24) {
      $191 = $sp$949 + -3 | 0;
      if ((HEAPU8[$191 >> 0] | 0) == ($170 | 0)) {
       $195 = $sp$949 + -2 | 0;
       if ((HEAP8[$195 >> 0] | 0) == $182 << 24 >> 24) {
        $198 = $sp$949 + -1 | 0;
        if ((HEAPU8[$198 >> 0] | 0) == ($174 | 0)) if ((HEAP8[$sp$949 >> 0] | 0) == $183 << 24 >> 24) {
         HEAP8[$dp$848 >> 0] = 0;
         HEAP8[$dp$848 + -1 >> 0] = 0;
         $$pre$phi58Z2D = $198;
         $$pre$phi60Z2D = $195;
         $$pre$phi62Z2D = $191;
        } else label = 50; else label = 50;
       } else label = 50;
      } else label = 50;
     } else label = 50; else label = 50;
     if ((label | 0) == 50) {
      label = 0;
      HEAP8[$dp$848 >> 0] = -1;
      HEAP8[$dp$848 + -1 >> 0] = -1;
      $$pre$phi58Z2D = $sp$949 + -1 | 0;
      $$pre$phi60Z2D = $sp$949 + -2 | 0;
      $$pre$phi62Z2D = $sp$949 + -3 | 0;
     }
     HEAP8[$dp$848 + -2 >> 0] = HEAP8[$sp$949 >> 0] | 0;
     HEAP8[$dp$848 + -3 >> 0] = HEAP8[$$pre$phi58Z2D >> 0] | 0;
     HEAP8[$dp$848 + -4 >> 0] = HEAP8[$$pre$phi60Z2D >> 0] | 0;
     HEAP8[$dp$848 + -5 >> 0] = HEAP8[$$pre$phi62Z2D >> 0] | 0;
     HEAP8[$dp$848 + -6 >> 0] = HEAP8[$188 >> 0] | 0;
     HEAP8[$dp$848 + -7 >> 0] = HEAP8[$184 >> 0] | 0;
     $i$647 = $i$647 + 1 | 0;
     if (($i$647 | 0) == ($0 | 0)) break; else {
      $dp$848 = $dp$848 + -8 | 0;
      $sp$949 = $sp$949 + -6 | 0;
     }
    }
   }
  }
  HEAP8[$1 >> 0] = 6;
  HEAP8[$row_info + 10 >> 0] = 4;
  $223 = HEAPU8[$130 >> 0] << 2;
  HEAP8[$row_info + 11 >> 0] = $223;
  $226 = $223 & 252;
  if ($226 >>> 0 > 7) $234 = Math_imul($226 >>> 3, $0) | 0; else $234 = ((Math_imul($226, $0) | 0) + 7 | 0) >>> 3;
  HEAP32[$row_info + 4 >> 2] = $234;
  return;
 } else return;
}

function _str_format($L) {
 $L = $L | 0;
 var $$$$i = 0, $$$i = 0, $$0 = 0, $$p$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $101 = 0, $104 = 0, $106 = 0, $115 = 0, $116 = 0, $117 = 0, $120 = 0, $122 = 0, $126 = 0, $129 = 0, $133 = 0, $136 = 0, $141 = 0, $146 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $27 = 0, $3 = 0, $30 = 0, $32 = 0, $35 = 0, $38 = 0, $41 = 0, $44 = 0, $48 = 0, $5 = 0, $53 = 0, $55 = 0, $6 = 0, $63 = 0, $65 = 0, $7 = 0, $70 = 0, $73 = 0, $8 = 0, $80 = 0.0, $82 = 0, $83 = 0, $87 = 0, $90 = 0, $93 = 0, $94 = 0, $98 = 0, $arg$0$ph8 = 0, $b = 0, $buff$i = 0, $form = 0, $l = 0, $l$i = 0, $nb$0 = 0, $p$0$lcssa$i = 0, $p$09$i = 0, $p$2$i = 0, $p$4$i = 0, $s$01$i = 0, $sfl = 0, $strfrmt$0$be = 0, $strfrmt$0$ph7 = 0, $strfrmt$05 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer21 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0, $arg$0$ph8$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2176 | 0;
 $vararg_buffer21 = sp + 64 | 0;
 $vararg_buffer18 = sp + 56 | 0;
 $vararg_buffer15 = sp + 48 | 0;
 $vararg_buffer12 = sp + 40 | 0;
 $vararg_buffer9 = sp + 32 | 0;
 $vararg_buffer6 = sp + 24 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer2 = sp + 8 | 0;
 $vararg_buffer = sp;
 $l$i = sp + 2140 | 0;
 $buff$i = sp + 2162 | 0;
 $sfl = sp + 2136 | 0;
 $b = sp + 72 | 0;
 $form = sp + 2144 | 0;
 $l = sp + 68 | 0;
 $0 = _lua_gettop($L) | 0;
 $1 = _luaL_checklstring($L, 1, $sfl) | 0;
 $2 = HEAP32[$sfl >> 2] | 0;
 $3 = $1 + $2 | 0;
 _luaL_buffinit($L, $b);
 L1 : do if (($2 | 0) > 0) {
  $5 = $b + 8 | 0;
  $6 = $b + 4 | 0;
  $7 = $form + 1 | 0;
  $arg$0$ph8 = 1;
  $strfrmt$0$ph7 = $1;
  L3 : while (1) {
   $strfrmt$05 = $strfrmt$0$ph7;
   while (1) {
    $8 = HEAP8[$strfrmt$05 >> 0] | 0;
    if ($8 << 24 >> 24 == 37) {
     $19 = $strfrmt$05 + 1 | 0;
     if ((HEAP8[$19 >> 0] | 0) != 37) break;
     $22 = HEAP32[$5 >> 2] | 0;
     if ($22 >>> 0 < (HEAP32[$6 >> 2] | 0) >>> 0) {
      $27 = $22;
      $30 = 37;
     } else {
      _luaL_prepbuffsize($b, 1) | 0;
      $27 = HEAP32[$5 >> 2] | 0;
      $30 = HEAP8[$19 >> 0] | 0;
     }
     HEAP32[$5 >> 2] = $27 + 1;
     HEAP8[(HEAP32[$b >> 2] | 0) + $27 >> 0] = $30;
     $strfrmt$0$be = $strfrmt$05 + 2 | 0;
    } else {
     $10 = HEAP32[$5 >> 2] | 0;
     if ($10 >>> 0 < (HEAP32[$6 >> 2] | 0) >>> 0) {
      $15 = $10;
      $18 = $8;
     } else {
      _luaL_prepbuffsize($b, 1) | 0;
      $15 = HEAP32[$5 >> 2] | 0;
      $18 = HEAP8[$strfrmt$05 >> 0] | 0;
     }
     HEAP32[$5 >> 2] = $15 + 1;
     HEAP8[(HEAP32[$b >> 2] | 0) + $15 >> 0] = $18;
     $strfrmt$0$be = $strfrmt$05 + 1 | 0;
    }
    if ($strfrmt$0$be >>> 0 < $3 >>> 0) $strfrmt$05 = $strfrmt$0$be; else break L1;
   }
   $32 = _luaL_prepbuffsize($b, 512) | 0;
   $arg$0$ph8$looptemp = $arg$0$ph8;
   $arg$0$ph8 = $arg$0$ph8 + 1 | 0;
   if (($arg$0$ph8$looptemp | 0) >= ($0 | 0)) _luaL_argerror($L, $arg$0$ph8, 62832) | 0;
   $35 = HEAP8[$19 >> 0] | 0;
   L22 : do if (!($35 << 24 >> 24)) {
    $146 = 0;
    $p$0$lcssa$i = $19;
   } else {
    $41 = $35;
    $p$09$i = $19;
    while (1) {
     $38 = $p$09$i + 1 | 0;
     if (!(_memchr(62216, $41 << 24 >> 24, 6) | 0)) {
      $146 = $41;
      $p$0$lcssa$i = $p$09$i;
      break L22;
     }
     $41 = HEAP8[$38 >> 0] | 0;
     if (!($41 << 24 >> 24)) {
      $146 = 0;
      $p$0$lcssa$i = $38;
      break;
     } else $p$09$i = $38;
    }
   } while (0);
   $44 = $19;
   if (($p$0$lcssa$i - $44 | 0) >>> 0 > 5) {
    _luaL_error($L, 62224, $vararg_buffer) | 0;
    $48 = HEAP8[$p$0$lcssa$i >> 0] | 0;
   } else $48 = $146;
   $$p$0$i = (($48 & 255) + -48 | 0) >>> 0 < 10 ? $p$0$lcssa$i + 1 | 0 : $p$0$lcssa$i;
   $p$2$i = ((HEAPU8[$$p$0$i >> 0] | 0) + -48 | 0) >>> 0 < 10 ? $$p$0$i + 1 | 0 : $$p$0$i;
   $53 = HEAP8[$p$2$i >> 0] | 0;
   if ($53 << 24 >> 24 == 46) {
    $55 = $p$2$i + 1 | 0;
    $$$i = ((HEAPU8[$55 >> 0] | 0) + -48 | 0) >>> 0 < 10 ? $p$2$i + 2 | 0 : $55;
    $$$$i = ((HEAPU8[$$$i >> 0] | 0) + -48 | 0) >>> 0 < 10 ? $$$i + 1 | 0 : $$$i;
    $63 = HEAP8[$$$$i >> 0] | 0;
    $p$4$i = $$$$i;
   } else {
    $63 = $53;
    $p$4$i = $p$2$i;
   }
   if ((($63 & 255) + -48 | 0) >>> 0 < 10) _luaL_error($L, 62256, $vararg_buffer2) | 0;
   HEAP8[$form >> 0] = 37;
   $65 = $p$4$i - $44 | 0;
   _memcpy($7 | 0, $19 | 0, $65 + 1 | 0) | 0;
   HEAP8[$form + ($65 + 2) >> 0] = 0;
   $strfrmt$0$ph7 = $p$4$i + 1 | 0;
   $70 = HEAP8[$p$4$i >> 0] | 0;
   L36 : do switch ($70 | 0) {
   case 99:
    {
     HEAP32[$vararg_buffer4 >> 2] = _luaL_checkinteger($L, $arg$0$ph8) | 0;
     $nb$0 = _sprintf($32, $form, $vararg_buffer4) | 0;
     break;
    }
   case 115:
    {
     $136 = _luaL_tolstring($L, $arg$0$ph8, $l) | 0;
     if ((_strchr($form, 46) | 0) == 0 & (HEAP32[$l >> 2] | 0) >>> 0 > 99) {
      _luaL_addvalue($b);
      $nb$0 = 0;
      break L36;
     } else {
      HEAP32[$vararg_buffer18 >> 2] = $136;
      $141 = _sprintf($32, $form, $vararg_buffer18) | 0;
      _lua_settop($L, -2);
      $nb$0 = $141;
      break L36;
     }
     break;
    }
   case 71:
   case 103:
   case 102:
   case 69:
   case 101:
   case 65:
   case 97:
    {
     HEAP8[$form + (_strlen($form | 0) | 0) >> 0] = 0;
     $80 = +_luaL_checknumber($L, $arg$0$ph8);
     HEAPF64[tempDoublePtr >> 3] = $80;
     HEAP32[$vararg_buffer9 >> 2] = HEAP32[tempDoublePtr >> 2];
     HEAP32[$vararg_buffer9 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
     $nb$0 = _sprintf($32, $form, $vararg_buffer9) | 0;
     break;
    }
   case 113:
    {
     $82 = _luaL_checklstring($L, $arg$0$ph8, $l$i) | 0;
     $83 = HEAP32[$5 >> 2] | 0;
     if ($83 >>> 0 < (HEAP32[$6 >> 2] | 0) >>> 0) $87 = $83; else {
      _luaL_prepbuffsize($b, 1) | 0;
      $87 = HEAP32[$5 >> 2] | 0;
     }
     HEAP32[$5 >> 2] = $87 + 1;
     HEAP8[(HEAP32[$b >> 2] | 0) + $87 >> 0] = 34;
     $90 = HEAP32[$l$i >> 2] | 0;
     HEAP32[$l$i >> 2] = $90 + -1;
     if ($90) {
      $s$01$i = $82;
      while (1) {
       $93 = HEAP8[$s$01$i >> 0] | 0;
       do if ($93 << 24 >> 24 == 10 | $93 << 24 >> 24 == 92 | $93 << 24 >> 24 == 34) {
        $94 = HEAP32[$5 >> 2] | 0;
        if ($94 >>> 0 < (HEAP32[$6 >> 2] | 0) >>> 0) $98 = $94; else {
         _luaL_prepbuffsize($b, 1) | 0;
         $98 = HEAP32[$5 >> 2] | 0;
        }
        HEAP32[$5 >> 2] = $98 + 1;
        HEAP8[(HEAP32[$b >> 2] | 0) + $98 >> 0] = 92;
        $101 = HEAP32[$5 >> 2] | 0;
        if ($101 >>> 0 < (HEAP32[$6 >> 2] | 0) >>> 0) $106 = $101; else {
         _luaL_prepbuffsize($b, 1) | 0;
         $106 = HEAP32[$5 >> 2] | 0;
        }
        $104 = HEAP8[$s$01$i >> 0] | 0;
        HEAP32[$5 >> 2] = $106 + 1;
        HEAP8[(HEAP32[$b >> 2] | 0) + $106 >> 0] = $104;
       } else if (!($93 << 24 >> 24)) {
        $116 = 0;
        label = 39;
       } else {
        if (_iscntrl($93 & 255) | 0) {
         $116 = HEAP8[$s$01$i >> 0] | 0;
         label = 39;
         break;
        }
        $117 = HEAP32[$5 >> 2] | 0;
        if ($117 >>> 0 < (HEAP32[$6 >> 2] | 0) >>> 0) $122 = $117; else {
         _luaL_prepbuffsize($b, 1) | 0;
         $122 = HEAP32[$5 >> 2] | 0;
        }
        $120 = HEAP8[$s$01$i >> 0] | 0;
        HEAP32[$5 >> 2] = $122 + 1;
        HEAP8[(HEAP32[$b >> 2] | 0) + $122 >> 0] = $120;
       } while (0);
       if ((label | 0) == 39) {
        label = 0;
        $115 = $116 & 255;
        if (((HEAPU8[$s$01$i + 1 >> 0] | 0) + -48 | 0) >>> 0 < 10) {
         HEAP32[$vararg_buffer15 >> 2] = $115;
         _sprintf($buff$i, 62208, $vararg_buffer15) | 0;
        } else {
         HEAP32[$vararg_buffer12 >> 2] = $115;
         _sprintf($buff$i, 62200, $vararg_buffer12) | 0;
        }
        _luaL_addstring($b, $buff$i);
       }
       $126 = HEAP32[$l$i >> 2] | 0;
       HEAP32[$l$i >> 2] = $126 + -1;
       if (!$126) break; else $s$01$i = $s$01$i + 1 | 0;
      }
     }
     $129 = HEAP32[$5 >> 2] | 0;
     if ($129 >>> 0 < (HEAP32[$6 >> 2] | 0) >>> 0) $133 = $129; else {
      _luaL_prepbuffsize($b, 1) | 0;
      $133 = HEAP32[$5 >> 2] | 0;
     }
     HEAP32[$5 >> 2] = $133 + 1;
     HEAP8[(HEAP32[$b >> 2] | 0) + $133 >> 0] = 34;
     $nb$0 = 0;
     break;
    }
   case 88:
   case 120:
   case 117:
   case 111:
   case 105:
   case 100:
    {
     $73 = _luaL_checkinteger($L, $arg$0$ph8) | 0;
     HEAP8[$form + (_strlen($form | 0) | 0) >> 0] = 0;
     HEAP32[$vararg_buffer6 >> 2] = $73;
     $nb$0 = _sprintf($32, $form, $vararg_buffer6) | 0;
     break;
    }
   default:
    break L3;
   } while (0);
   HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $nb$0;
   if ($strfrmt$0$ph7 >>> 0 >= $3 >>> 0) break L1;
  }
  HEAP32[$vararg_buffer21 >> 2] = $70;
  $$0 = _luaL_error($L, 62160, $vararg_buffer21) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } while (0);
 _luaL_pushresult($b);
 $$0 = 1;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN7b2World5SolveERK10b2TimeStep($this, $step) {
 $this = $this | 0;
 $step = $step | 0;
 var $0 = 0, $1 = 0, $10 = 0, $103 = 0, $111 = 0, $112 = 0, $113 = 0, $126 = 0, $127 = 0, $13 = 0, $131 = 0, $132 = 0, $133 = 0, $136 = 0, $15 = 0, $165 = 0, $167 = 0, $169 = 0, $172 = 0, $190 = 0.0, $191 = 0, $2 = 0, $24 = 0, $3 = 0, $34 = 0, $36 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $68 = 0, $72 = 0, $76 = 0, $88 = 0, $89 = 0, $b$052 = 0, $b$053 = 0, $b4$010 = 0, $b4$011 = 0, $c$047 = 0, $c$048 = 0, $ce$014 = 0, $ce$016 = 0, $i$031 = 0, $island = 0, $j$042 = 0, $j$043 = 0, $je$023 = 0, $je$025 = 0, $profile = 0, $seed$037 = 0, $seed$038 = 0, $stackCount$0$be = 0, $stackCount$029 = 0, $stackCount$1$lcssa = 0, $stackCount$115 = 0, $stackCount$2 = 0, $stackCount$324 = 0, $stackCount$4 = 0, $timer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $island = sp + 32 | 0;
 $profile = sp;
 $timer = sp + 84 | 0;
 $0 = $this + 103008 | 0;
 HEAPF32[$0 >> 2] = 0.0;
 $1 = $this + 103012 | 0;
 HEAPF32[$1 >> 2] = 0.0;
 $2 = $this + 103016 | 0;
 HEAPF32[$2 >> 2] = 0.0;
 $3 = $this + 102960 | 0;
 $5 = $this + 102872 | 0;
 $10 = $this + 68 | 0;
 __ZN8b2IslandC2EiiiP16b2StackAllocatorP17b2ContactListener($island, HEAP32[$3 >> 2] | 0, HEAP32[$this + 102936 >> 2] | 0, HEAP32[$this + 102964 >> 2] | 0, $10, HEAP32[$this + 102944 >> 2] | 0);
 $13 = $this + 102952 | 0;
 $b$052 = HEAP32[$13 >> 2] | 0;
 if ($b$052) {
  $b$053 = $b$052;
  do {
   $15 = $b$053 + 4 | 0;
   HEAP16[$15 >> 1] = HEAPU16[$15 >> 1] & 65534;
   $b$053 = HEAP32[$b$053 + 96 >> 2] | 0;
  } while (($b$053 | 0) != 0);
 }
 $c$047 = HEAP32[$this + 102932 >> 2] | 0;
 if ($c$047) {
  $c$048 = $c$047;
  do {
   $24 = $c$048 + 4 | 0;
   HEAP32[$24 >> 2] = HEAP32[$24 >> 2] & -2;
   $c$048 = HEAP32[$c$048 + 12 >> 2] | 0;
  } while (($c$048 | 0) != 0);
 }
 $j$042 = HEAP32[$this + 102956 >> 2] | 0;
 if ($j$042) {
  $j$043 = $j$042;
  do {
   HEAP8[$j$043 + 60 >> 0] = 0;
   $j$043 = HEAP32[$j$043 + 12 >> 2] | 0;
  } while (($j$043 | 0) != 0);
 }
 $34 = HEAP32[$3 >> 2] | 0;
 $36 = __ZN16b2StackAllocator8AllocateEi($10, $34 << 2) | 0;
 $seed$037 = HEAP32[$13 >> 2] | 0;
 L13 : do if ($seed$037) {
  $38 = $island + 28 | 0;
  $39 = $island + 36 | 0;
  $40 = $island + 32 | 0;
  $41 = $island + 40 | 0;
  $42 = $island + 8 | 0;
  $43 = $island + 48 | 0;
  $44 = $island + 16 | 0;
  $45 = $island + 44 | 0;
  $46 = $island + 12 | 0;
  $47 = $this + 102968 | 0;
  $48 = $this + 102976 | 0;
  $49 = $profile + 12 | 0;
  $50 = $profile + 16 | 0;
  $51 = $profile + 20 | 0;
  $seed$038 = $seed$037;
  L15 : while (1) {
   $52 = $seed$038 + 4 | 0;
   $53 = HEAP16[$52 >> 1] | 0;
   if (($53 & 35) == 34) if (HEAP32[$seed$038 >> 2] | 0) {
    HEAP32[$38 >> 2] = 0;
    HEAP32[$39 >> 2] = 0;
    HEAP32[$40 >> 2] = 0;
    HEAP32[$36 >> 2] = $seed$038;
    HEAP16[$52 >> 1] = $53 & 65535 | 1;
    $stackCount$029 = 1;
    while (1) {
     $61 = $stackCount$029 + -1 | 0;
     $63 = HEAP32[$36 + ($61 << 2) >> 2] | 0;
     $64 = $63 + 4 | 0;
     $65 = HEAP16[$64 >> 1] | 0;
     if (!($65 & 32)) {
      label = 13;
      break L15;
     }
     $68 = HEAP32[$38 >> 2] | 0;
     if (($68 | 0) >= (HEAP32[$41 >> 2] | 0)) {
      label = 15;
      break L15;
     }
     HEAP32[$63 + 8 >> 2] = $68;
     $72 = HEAP32[$38 >> 2] | 0;
     HEAP32[(HEAP32[$42 >> 2] | 0) + ($72 << 2) >> 2] = $63;
     HEAP32[$38 >> 2] = $72 + 1;
     $76 = $65 & 65535;
     if (!($76 & 2)) {
      HEAP16[$64 >> 1] = $76 | 2;
      HEAPF32[$63 + 144 >> 2] = 0.0;
     }
     if (!(HEAP32[$63 >> 2] | 0)) $stackCount$0$be = $61; else {
      $ce$014 = HEAP32[$63 + 112 >> 2] | 0;
      if (!$ce$014) $stackCount$1$lcssa = $61; else {
       $ce$016 = $ce$014;
       $stackCount$115 = $61;
       while (1) {
        $88 = HEAP32[$ce$016 + 4 >> 2] | 0;
        $89 = $88 + 4 | 0;
        do if ((HEAP32[$89 >> 2] & 7 | 0) == 6) {
         if (HEAP8[(HEAP32[$88 + 48 >> 2] | 0) + 38 >> 0] | 0) {
          $stackCount$2 = $stackCount$115;
          break;
         }
         if (HEAP8[(HEAP32[$88 + 52 >> 2] | 0) + 38 >> 0] | 0) {
          $stackCount$2 = $stackCount$115;
          break;
         }
         $103 = HEAP32[$39 >> 2] | 0;
         if (($103 | 0) >= (HEAP32[$45 >> 2] | 0)) {
          label = 25;
          break L15;
         }
         HEAP32[$39 >> 2] = $103 + 1;
         HEAP32[(HEAP32[$46 >> 2] | 0) + ($103 << 2) >> 2] = $88;
         HEAP32[$89 >> 2] = HEAP32[$89 >> 2] | 1;
         $111 = HEAP32[$ce$016 >> 2] | 0;
         $112 = $111 + 4 | 0;
         $113 = HEAP16[$112 >> 1] | 0;
         if ($113 & 1) {
          $stackCount$2 = $stackCount$115;
          break;
         }
         if (($stackCount$115 | 0) >= ($34 | 0)) {
          label = 28;
          break L15;
         }
         HEAP32[$36 + ($stackCount$115 << 2) >> 2] = $111;
         HEAP16[$112 >> 1] = $113 & 65535 | 1;
         $stackCount$2 = $stackCount$115 + 1 | 0;
        } else $stackCount$2 = $stackCount$115; while (0);
        $ce$016 = HEAP32[$ce$016 + 12 >> 2] | 0;
        if (!$ce$016) {
         $stackCount$1$lcssa = $stackCount$2;
         break;
        } else $stackCount$115 = $stackCount$2;
       }
      }
      $je$023 = HEAP32[$63 + 108 >> 2] | 0;
      if (!$je$023) $stackCount$0$be = $stackCount$1$lcssa; else {
       $je$025 = $je$023;
       $stackCount$324 = $stackCount$1$lcssa;
       while (1) {
        $126 = $je$025 + 4 | 0;
        $127 = HEAP32[$126 >> 2] | 0;
        do if (!(HEAP8[$127 + 60 >> 0] | 0)) {
         $131 = HEAP32[$je$025 >> 2] | 0;
         $132 = $131 + 4 | 0;
         $133 = HEAP16[$132 >> 1] | 0;
         if (!($133 & 32)) {
          $stackCount$4 = $stackCount$324;
          break;
         }
         $136 = HEAP32[$40 >> 2] | 0;
         if (($136 | 0) >= (HEAP32[$43 >> 2] | 0)) {
          label = 35;
          break L15;
         }
         HEAP32[$40 >> 2] = $136 + 1;
         HEAP32[(HEAP32[$44 >> 2] | 0) + ($136 << 2) >> 2] = $127;
         HEAP8[(HEAP32[$126 >> 2] | 0) + 60 >> 0] = 1;
         if ($133 & 1) {
          $stackCount$4 = $stackCount$324;
          break;
         }
         if (($stackCount$324 | 0) >= ($34 | 0)) {
          label = 38;
          break L15;
         }
         HEAP32[$36 + ($stackCount$324 << 2) >> 2] = $131;
         HEAP16[$132 >> 1] = $133 & 65535 | 1;
         $stackCount$4 = $stackCount$324 + 1 | 0;
        } else $stackCount$4 = $stackCount$324; while (0);
        $je$025 = HEAP32[$je$025 + 12 >> 2] | 0;
        if (!$je$025) {
         $stackCount$0$be = $stackCount$4;
         break;
        } else $stackCount$324 = $stackCount$4;
       }
      }
     }
     if (($stackCount$0$be | 0) > 0) $stackCount$029 = $stackCount$0$be; else break;
    }
    __ZN8b2Island5SolveEP9b2ProfileRK10b2TimeStepRK6b2Vec2b($island, $profile, $step, $47, (HEAP8[$48 >> 0] | 0) != 0);
    HEAPF32[$0 >> 2] = +HEAPF32[$49 >> 2] + +HEAPF32[$0 >> 2];
    HEAPF32[$1 >> 2] = +HEAPF32[$50 >> 2] + +HEAPF32[$1 >> 2];
    HEAPF32[$2 >> 2] = +HEAPF32[$51 >> 2] + +HEAPF32[$2 >> 2];
    $165 = HEAP32[$38 >> 2] | 0;
    if (($165 | 0) > 0) {
     $167 = HEAP32[$42 >> 2] | 0;
     $i$031 = 0;
     do {
      $169 = HEAP32[$167 + ($i$031 << 2) >> 2] | 0;
      if (!(HEAP32[$169 >> 2] | 0)) {
       $172 = $169 + 4 | 0;
       HEAP16[$172 >> 1] = HEAPU16[$172 >> 1] & 65534;
      }
      $i$031 = $i$031 + 1 | 0;
     } while (($i$031 | 0) < ($165 | 0));
    }
   }
   $seed$038 = HEAP32[$seed$038 + 96 >> 2] | 0;
   if (!$seed$038) break L13;
  }
  if ((label | 0) == 13) ___assert_fail(89432, 89272, 445, 89456); else if ((label | 0) == 15) ___assert_fail(89896, 89784, 54, 89848); else if ((label | 0) == 25) ___assert_fail(89856, 89784, 62, 89848); else if ((label | 0) == 28) ___assert_fail(89464, 89272, 495, 89456); else if ((label | 0) == 35) ___assert_fail(89752, 89784, 68, 89848); else if ((label | 0) == 38) ___assert_fail(89464, 89272, 524, 89456);
 } while (0);
 __ZN16b2StackAllocator4FreeEPv($10, $36);
 $b4$010 = HEAP32[$13 >> 2] | 0;
 if (!$b4$010) {
  __ZN16b2ContactManager15FindNewContactsEv($5);
  $190 = +__ZNK7b2Timer15GetMillisecondsEv($timer);
  $191 = $this + 103020 | 0;
  HEAPF32[$191 >> 2] = $190;
  __ZN8b2IslandD2Ev($island);
  STACKTOP = sp;
  return;
 } else $b4$011 = $b4$010;
 do {
  if (HEAP16[$b4$011 + 4 >> 1] & 1) if (HEAP32[$b4$011 >> 2] | 0) __ZN6b2Body19SynchronizeFixturesEv($b4$011);
  $b4$011 = HEAP32[$b4$011 + 96 >> 2] | 0;
 } while (($b4$011 | 0) != 0);
 __ZN16b2ContactManager15FindNewContactsEv($5);
 $190 = +__ZNK7b2Timer15GetMillisecondsEv($timer);
 $191 = $this + 103020 | 0;
 HEAPF32[$191 >> 2] = $190;
 __ZN8b2IslandD2Ev($island);
 STACKTOP = sp;
 return;
}

function __ZN16b2PrismaticJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $1 = 0, $100 = 0.0, $104 = 0.0, $107 = 0.0, $110 = 0.0, $113 = 0.0, $117 = 0.0, $12 = 0, $120 = 0.0, $123 = 0.0, $128 = 0.0, $129 = 0.0, $130 = 0.0, $131 = 0.0, $134 = 0.0, $137 = 0.0, $139 = 0.0, $14 = 0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0, $149 = 0.0, $150 = 0.0, $153 = 0.0, $157 = 0.0, $159 = 0.0, $160 = 0.0, $163 = 0.0, $165 = 0.0, $17 = 0, $171 = 0.0, $174 = 0.0, $176 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $188 = 0.0, $192 = 0.0, $194 = 0.0, $197 = 0.0, $200 = 0.0, $203 = 0.0, $204 = 0.0, $206 = 0.0, $221 = 0.0, $223 = 0.0, $225 = 0.0, $226 = 0.0, $230 = 0.0, $233 = 0, $238 = 0, $24 = 0, $252 = 0, $253 = 0, $254 = 0.0, $256 = 0.0, $257 = 0, $259 = 0.0, $26 = 0, $260 = 0, $262 = 0.0, $264 = 0, $266 = 0.0, $269 = 0.0, $272 = 0.0, $273 = 0.0, $29 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0.0, $298 = 0.0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $320 = 0, $36 = 0, $39 = 0, $4 = 0, $41 = 0.0, $44 = 0.0, $47 = 0, $49 = 0, $55 = 0.0, $56 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $68 = 0.0, $69 = 0.0, $71 = 0.0, $73 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $82 = 0.0, $84 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $storemerge = 0.0, $wA$0 = 0.0, $wB$0 = 0.0;
 $1 = HEAP32[$this + 48 >> 2] | 0;
 $3 = HEAP32[$1 + 8 >> 2] | 0;
 $4 = $this + 144 | 0;
 HEAP32[$4 >> 2] = $3;
 $6 = HEAP32[$this + 52 >> 2] | 0;
 $8 = HEAP32[$6 + 8 >> 2] | 0;
 $9 = $this + 148 | 0;
 HEAP32[$9 >> 2] = $8;
 $12 = $1 + 28 | 0;
 $14 = HEAP32[$12 >> 2] | 0;
 $17 = HEAP32[$12 + 4 >> 2] | 0;
 $18 = $this + 152 | 0;
 HEAP32[$18 >> 2] = $14;
 HEAP32[$18 + 4 >> 2] = $17;
 $24 = $6 + 28 | 0;
 $26 = HEAP32[$24 >> 2] | 0;
 $29 = HEAP32[$24 + 4 >> 2] | 0;
 $30 = $this + 160 | 0;
 HEAP32[$30 >> 2] = $26;
 HEAP32[$30 + 4 >> 2] = $29;
 $36 = $this + 168 | 0;
 HEAPF32[$36 >> 2] = +HEAPF32[$1 + 120 >> 2];
 $39 = $this + 172 | 0;
 HEAPF32[$39 >> 2] = +HEAPF32[$6 + 120 >> 2];
 $41 = +HEAPF32[$1 + 128 >> 2];
 HEAPF32[$this + 176 >> 2] = $41;
 $44 = +HEAPF32[$6 + 128 >> 2];
 HEAPF32[$this + 180 >> 2] = $44;
 $47 = HEAP32[$data + 24 >> 2] | 0;
 $49 = $47 + ($3 * 12 | 0) | 0;
 $55 = +HEAPF32[$49 >> 2];
 $56 = +HEAPF32[$49 + 4 >> 2];
 $58 = +HEAPF32[$47 + ($3 * 12 | 0) + 8 >> 2];
 $59 = $data + 28 | 0;
 $60 = HEAP32[$59 >> 2] | 0;
 $62 = $60 + ($3 * 12 | 0) | 0;
 $68 = +HEAPF32[$62 >> 2];
 $69 = +HEAPF32[$62 + 4 >> 2];
 $71 = +HEAPF32[$60 + ($3 * 12 | 0) + 8 >> 2];
 $73 = $47 + ($8 * 12 | 0) | 0;
 $79 = +HEAPF32[$73 >> 2];
 $80 = +HEAPF32[$73 + 4 >> 2];
 $82 = +HEAPF32[$47 + ($8 * 12 | 0) + 8 >> 2];
 $84 = $60 + ($8 * 12 | 0) | 0;
 $90 = +HEAPF32[$84 >> 2];
 $91 = +HEAPF32[$84 + 4 >> 2];
 $93 = +HEAPF32[$60 + ($8 * 12 | 0) + 8 >> 2];
 $94 = +Math_sin(+$58);
 $95 = +Math_cos(+$58);
 $96 = +Math_sin(+$82);
 $97 = +Math_cos(+$82);
 $100 = +HEAPF32[$this + 68 >> 2] - (HEAP32[tempDoublePtr >> 2] = $14, +HEAPF32[tempDoublePtr >> 2]);
 $104 = +HEAPF32[$this + 72 >> 2] - (HEAP32[tempDoublePtr >> 2] = $17, +HEAPF32[tempDoublePtr >> 2]);
 $107 = $95 * $100 - $94 * $104;
 $110 = $94 * $100 + $95 * $104;
 $113 = +HEAPF32[$this + 76 >> 2] - (HEAP32[tempDoublePtr >> 2] = $26, +HEAPF32[tempDoublePtr >> 2]);
 $117 = +HEAPF32[$this + 80 >> 2] - (HEAP32[tempDoublePtr >> 2] = $29, +HEAPF32[tempDoublePtr >> 2]);
 $120 = $97 * $113 - $96 * $117;
 $123 = $96 * $113 + $97 * $117;
 $128 = $79 - $55 + $120 - $107;
 $129 = $80 - $56 + $123 - $110;
 $130 = +HEAPF32[$36 >> 2];
 $131 = +HEAPF32[$39 >> 2];
 $134 = +HEAPF32[$this + 84 >> 2];
 $137 = +HEAPF32[$this + 88 >> 2];
 $139 = $95 * $134 - $94 * $137;
 $142 = $94 * $134 + $95 * $137;
 $143 = +$139;
 $144 = +$142;
 $145 = $this + 184 | 0;
 HEAPF32[$145 >> 2] = $143;
 HEAPF32[$145 + 4 >> 2] = $144;
 $149 = $107 + $128;
 $150 = $110 + $129;
 $153 = $149 * $142 - $150 * $139;
 HEAPF32[$this + 208 >> 2] = $153;
 $157 = $120 * $142 - $123 * $139;
 HEAPF32[$this + 212 >> 2] = $157;
 $159 = $130 + $131;
 $160 = $41 * $153;
 $163 = $44 * $157;
 $165 = $159 + $153 * $160 + $157 * $163;
 if ($165 > 0.0) $storemerge = 1.0 / $165; else $storemerge = $165;
 HEAPF32[$this + 252 >> 2] = $storemerge;
 $171 = +HEAPF32[$this + 92 >> 2];
 $174 = +HEAPF32[$this + 96 >> 2];
 $176 = $95 * $171 - $94 * $174;
 $179 = $94 * $171 + $95 * $174;
 $180 = +$176;
 $181 = +$179;
 $182 = $this + 192 | 0;
 HEAPF32[$182 >> 2] = $180;
 HEAPF32[$182 + 4 >> 2] = $181;
 $188 = $149 * $179 - $150 * $176;
 HEAPF32[$this + 200 >> 2] = $188;
 $192 = $120 * $179 - $123 * $176;
 HEAPF32[$this + 204 >> 2] = $192;
 $194 = $41 * $188;
 $197 = $44 * $192;
 $200 = $194 + $197;
 $203 = $194 * $153 + $197 * $157;
 $204 = $44 + $41;
 $206 = $160 + $163;
 HEAPF32[$this + 216 >> 2] = $159 + $188 * $194 + $192 * $197;
 HEAPF32[$this + 220 >> 2] = $200;
 HEAPF32[$this + 224 >> 2] = $203;
 HEAPF32[$this + 228 >> 2] = $200;
 HEAPF32[$this + 232 >> 2] = $204 == 0.0 ? 1.0 : $204;
 HEAPF32[$this + 236 >> 2] = $206;
 HEAPF32[$this + 240 >> 2] = $203;
 HEAPF32[$this + 244 >> 2] = $206;
 HEAPF32[$this + 248 >> 2] = $165;
 do if (!(HEAP8[$this + 136 >> 0] | 0)) {
  HEAP32[$this + 140 >> 2] = 0;
  HEAPF32[$this + 112 >> 2] = 0.0;
 } else {
  $221 = $128 * $139 + $129 * $142;
  $223 = +HEAPF32[$this + 124 >> 2];
  $225 = +HEAPF32[$this + 120 >> 2];
  $226 = $223 - $225;
  if ($226 > 0.0) $230 = $226; else $230 = -$226;
  if ($230 < .009999999776482582) {
   HEAP32[$this + 140 >> 2] = 3;
   break;
  }
  if ($221 <= $225) {
   $233 = $this + 140 | 0;
   if ((HEAP32[$233 >> 2] | 0) == 1) break;
   HEAP32[$233 >> 2] = 1;
   HEAPF32[$this + 112 >> 2] = 0.0;
   break;
  }
  $238 = $this + 140 | 0;
  if (!($221 >= $223)) {
   HEAP32[$238 >> 2] = 0;
   HEAPF32[$this + 112 >> 2] = 0.0;
   break;
  }
  if ((HEAP32[$238 >> 2] | 0) != 2) {
   HEAP32[$238 >> 2] = 2;
   HEAPF32[$this + 112 >> 2] = 0.0;
  }
 } while (0);
 if (!(HEAP8[$this + 137 >> 0] | 0)) HEAPF32[$this + 116 >> 2] = 0.0;
 $252 = $this + 104 | 0;
 if (!(HEAP8[$data + 20 >> 0] | 0)) {
  HEAP32[$252 + 0 >> 2] = 0;
  HEAP32[$252 + 4 >> 2] = 0;
  HEAP32[$252 + 8 >> 2] = 0;
  HEAP32[$252 + 12 >> 2] = 0;
  $298 = $68;
  $300 = $69;
  $311 = $90;
  $313 = $91;
  $wA$0 = $71;
  $wB$0 = $93;
  $294 = HEAP32[$4 >> 2] | 0;
  $295 = HEAP32[$59 >> 2] | 0;
  $296 = $295 + ($294 * 12 | 0) | 0;
  $297 = +$298;
  $299 = +$300;
  $301 = $296;
  $302 = $301;
  HEAPF32[$302 >> 2] = $297;
  $303 = $301 + 4 | 0;
  $304 = $303;
  HEAPF32[$304 >> 2] = $299;
  $305 = HEAP32[$4 >> 2] | 0;
  $306 = HEAP32[$59 >> 2] | 0;
  $307 = $306 + ($305 * 12 | 0) + 8 | 0;
  HEAPF32[$307 >> 2] = $wA$0;
  $308 = HEAP32[$9 >> 2] | 0;
  $309 = $306 + ($308 * 12 | 0) | 0;
  $310 = +$311;
  $312 = +$313;
  $314 = $309;
  $315 = $314;
  HEAPF32[$315 >> 2] = $310;
  $316 = $314 + 4 | 0;
  $317 = $316;
  HEAPF32[$317 >> 2] = $312;
  $318 = HEAP32[$9 >> 2] | 0;
  $319 = HEAP32[$59 >> 2] | 0;
  $320 = $319 + ($318 * 12 | 0) + 8 | 0;
  HEAPF32[$320 >> 2] = $wB$0;
  return;
 } else {
  $253 = $data + 8 | 0;
  $254 = +HEAPF32[$253 >> 2];
  $256 = $254 * +HEAPF32[$252 >> 2];
  HEAPF32[$252 >> 2] = $256;
  $257 = $this + 108 | 0;
  $259 = $254 * +HEAPF32[$257 >> 2];
  HEAPF32[$257 >> 2] = $259;
  $260 = $this + 112 | 0;
  $262 = $254 * +HEAPF32[$260 >> 2];
  HEAPF32[$260 >> 2] = $262;
  $264 = $this + 116 | 0;
  $266 = +HEAPF32[$253 >> 2] * +HEAPF32[$264 >> 2];
  HEAPF32[$264 >> 2] = $266;
  $269 = $266 + $262;
  $272 = $256 * $176 + $139 * $269;
  $273 = $256 * $179 + $269 * $142;
  $298 = $68 - $130 * $272;
  $300 = $69 - $130 * $273;
  $311 = $90 + $131 * $272;
  $313 = $91 + $131 * $273;
  $wA$0 = $71 - $41 * ($256 * $188 + $259 + $269 * $153);
  $wB$0 = $93 + $44 * ($259 + $256 * $192 + $269 * $157);
  $294 = HEAP32[$4 >> 2] | 0;
  $295 = HEAP32[$59 >> 2] | 0;
  $296 = $295 + ($294 * 12 | 0) | 0;
  $297 = +$298;
  $299 = +$300;
  $301 = $296;
  $302 = $301;
  HEAPF32[$302 >> 2] = $297;
  $303 = $301 + 4 | 0;
  $304 = $303;
  HEAPF32[$304 >> 2] = $299;
  $305 = HEAP32[$4 >> 2] | 0;
  $306 = HEAP32[$59 >> 2] | 0;
  $307 = $306 + ($305 * 12 | 0) + 8 | 0;
  HEAPF32[$307 >> 2] = $wA$0;
  $308 = HEAP32[$9 >> 2] | 0;
  $309 = $306 + ($308 * 12 | 0) | 0;
  $310 = +$311;
  $312 = +$313;
  $314 = $309;
  $315 = $314;
  HEAPF32[$315 >> 2] = $310;
  $316 = $314 + 4 | 0;
  $317 = $316;
  HEAPF32[$317 >> 2] = $312;
  $318 = HEAP32[$9 >> 2] | 0;
  $319 = HEAP32[$59 >> 2] | 0;
  $320 = $319 + ($318 * 12 | 0) + 8 | 0;
  HEAPF32[$320 >> 2] = $wB$0;
  return;
 }
}

function __ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f($this, $indexA, $indexB, $t) {
 $this = $this | 0;
 $indexA = $indexA | 0;
 $indexB = $indexB | 0;
 $t = +$t;
 var $$0 = 0.0, $0 = 0.0, $109 = 0.0, $110 = 0, $113 = 0, $115 = 0, $116 = 0, $117 = 0, $131 = 0.0, $132 = 0, $134 = 0, $139 = 0, $145 = 0.0, $146 = 0.0, $151 = 0, $157 = 0.0, $158 = 0.0, $181 = 0.0, $184 = 0.0, $186 = 0.0, $189 = 0.0, $191 = 0.0, $194 = 0.0, $197 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $206 = 0.0, $209 = 0.0, $21 = 0.0, $210 = 0, $211 = 0, $213 = 0, $215 = 0, $22 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0, $233 = 0, $240 = 0, $246 = 0.0, $247 = 0.0, $25 = 0.0, $262 = 0.0, $265 = 0.0, $267 = 0.0, $270 = 0.0, $272 = 0.0, $275 = 0.0, $278 = 0.0, $28 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $287 = 0.0, $290 = 0.0, $291 = 0, $293 = 0, $295 = 0, $309 = 0.0, $310 = 0, $313 = 0, $320 = 0, $326 = 0.0, $327 = 0.0, $34 = 0.0, $35 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $60 = 0.0, $63 = 0.0, $69 = 0.0, $70 = 0.0, $72 = 0, $74 = 0.0, $77 = 0.0, $79 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $87 = 0.0, $90 = 0.0, $91 = 0, $93 = 0, $94 = 0, $95 = 0, $bestIndex$0$lcssa$i1141 = 0, $bestIndex$0$lcssa$i20 = 0, $bestIndex$0$lcssa$i29 = 0, $bestIndex$0$lcssa$i42 = 0, $bestIndex$03$i = 0, $bestIndex$03$i15 = 0, $bestIndex$03$i24 = 0, $bestIndex$03$i6 = 0, $bestIndex$1$i19 = 0, $bestIndex$1$i28 = 0, $bestValue$01$i = 0.0, $bestValue$01$i17 = 0.0, $bestValue$01$i26 = 0.0, $bestValue$01$i8 = 0.0, $i$02$i = 0, $i$02$i16 = 0, $i$02$i25 = 0, $i$02$i7 = 0;
 $0 = 1.0 - $t;
 $21 = $0 * +HEAPF32[$this + 32 >> 2] + +HEAPF32[$this + 36 >> 2] * $t;
 $22 = +Math_sin(+$21);
 $23 = +Math_cos(+$21);
 $25 = +HEAPF32[$this + 8 >> 2];
 $28 = +HEAPF32[$this + 12 >> 2];
 $34 = $0 * +HEAPF32[$this + 16 >> 2] + +HEAPF32[$this + 24 >> 2] * $t - ($23 * $25 - $22 * $28);
 $35 = $0 * +HEAPF32[$this + 20 >> 2] + +HEAPF32[$this + 28 >> 2] * $t - ($22 * $25 + $23 * $28);
 $56 = $0 * +HEAPF32[$this + 68 >> 2] + +HEAPF32[$this + 72 >> 2] * $t;
 $57 = +Math_sin(+$56);
 $58 = +Math_cos(+$56);
 $60 = +HEAPF32[$this + 44 >> 2];
 $63 = +HEAPF32[$this + 48 >> 2];
 $69 = $0 * +HEAPF32[$this + 52 >> 2] + +HEAPF32[$this + 60 >> 2] * $t - ($58 * $60 - $57 * $63);
 $70 = $0 * +HEAPF32[$this + 56 >> 2] + +HEAPF32[$this + 64 >> 2] * $t - ($57 * $60 + $58 * $63);
 $72 = HEAP32[$this + 80 >> 2] | 0;
 if (($72 | 0) == 1) {
  $181 = +HEAPF32[$this + 92 >> 2];
  $184 = +HEAPF32[$this + 96 >> 2];
  $186 = $23 * $181 - $22 * $184;
  $189 = $22 * $181 + $23 * $184;
  $191 = +HEAPF32[$this + 84 >> 2];
  $194 = +HEAPF32[$this + 88 >> 2];
  $197 = $34 + ($23 * $191 - $22 * $194);
  $201 = $35 + ($22 * $191 + $23 * $194);
  $202 = -$186;
  $203 = -$189;
  $206 = $58 * $202 + $57 * $203;
  $209 = $58 * $203 - $57 * $202;
  HEAP32[$indexA >> 2] = -1;
  $210 = $this + 4 | 0;
  $211 = HEAP32[$210 >> 2] | 0;
  $213 = HEAP32[$211 + 16 >> 2] | 0;
  $215 = HEAP32[$211 + 20 >> 2] | 0;
  if (($215 | 0) > 1) {
   $bestIndex$03$i6 = 0;
   $bestValue$01$i8 = $209 * +HEAPF32[$213 + 4 >> 2] + $206 * +HEAPF32[$213 >> 2];
   $i$02$i7 = 1;
   while (1) {
    $229 = $206 * +HEAPF32[$213 + ($i$02$i7 << 3) >> 2] + $209 * +HEAPF32[$213 + ($i$02$i7 << 3) + 4 >> 2];
    $230 = $229 > $bestValue$01$i8;
    $bestIndex$03$i6 = $230 ? $i$02$i7 : $bestIndex$03$i6;
    $i$02$i7 = $i$02$i7 + 1 | 0;
    if (($i$02$i7 | 0) == ($215 | 0)) break; else $bestValue$01$i8 = $230 ? $229 : $bestValue$01$i8;
   }
   HEAP32[$indexB >> 2] = $bestIndex$03$i6;
   if (($bestIndex$03$i6 | 0) > -1) $bestIndex$0$lcssa$i1141 = $bestIndex$03$i6; else ___assert_fail(90792, 90824, 103, 90888);
  } else {
   HEAP32[$indexB >> 2] = 0;
   $bestIndex$0$lcssa$i1141 = 0;
  }
  $233 = HEAP32[$210 >> 2] | 0;
  if ((HEAP32[$233 + 20 >> 2] | 0) <= ($bestIndex$0$lcssa$i1141 | 0)) ___assert_fail(90792, 90824, 103, 90888);
  $240 = (HEAP32[$233 + 16 >> 2] | 0) + ($bestIndex$0$lcssa$i1141 << 3) | 0;
  $246 = +HEAPF32[$240 >> 2];
  $247 = +HEAPF32[$240 + 4 >> 2];
  $$0 = $186 * ($69 + ($58 * $246 - $57 * $247) - $197) + $189 * ($70 + ($57 * $246 + $58 * $247) - $201);
  return +$$0;
 } else if (!$72) {
  $74 = +HEAPF32[$this + 92 >> 2];
  $77 = +HEAPF32[$this + 96 >> 2];
  $79 = $23 * $74 + $22 * $77;
  $82 = $23 * $77 - $22 * $74;
  $83 = -$74;
  $84 = -$77;
  $87 = $58 * $83 + $57 * $84;
  $90 = $58 * $84 - $57 * $83;
  $91 = HEAP32[$this >> 2] | 0;
  $93 = HEAP32[$91 + 16 >> 2] | 0;
  $94 = $91 + 20 | 0;
  $95 = HEAP32[$94 >> 2] | 0;
  if (($95 | 0) > 1) {
   $bestIndex$03$i15 = 0;
   $bestValue$01$i17 = $82 * +HEAPF32[$93 + 4 >> 2] + $79 * +HEAPF32[$93 >> 2];
   $i$02$i16 = 1;
   while (1) {
    $109 = $79 * +HEAPF32[$93 + ($i$02$i16 << 3) >> 2] + $82 * +HEAPF32[$93 + ($i$02$i16 << 3) + 4 >> 2];
    $110 = $109 > $bestValue$01$i17;
    $bestIndex$1$i19 = $110 ? $i$02$i16 : $bestIndex$03$i15;
    $i$02$i16 = $i$02$i16 + 1 | 0;
    if (($i$02$i16 | 0) == ($95 | 0)) {
     $bestIndex$0$lcssa$i20 = $bestIndex$1$i19;
     break;
    } else {
     $bestIndex$03$i15 = $bestIndex$1$i19;
     $bestValue$01$i17 = $110 ? $109 : $bestValue$01$i17;
    }
   }
  } else $bestIndex$0$lcssa$i20 = 0;
  HEAP32[$indexA >> 2] = $bestIndex$0$lcssa$i20;
  $113 = HEAP32[$this + 4 >> 2] | 0;
  $115 = HEAP32[$113 + 16 >> 2] | 0;
  $116 = $113 + 20 | 0;
  $117 = HEAP32[$116 >> 2] | 0;
  if (($117 | 0) > 1) {
   $bestIndex$03$i24 = 0;
   $bestValue$01$i26 = $90 * +HEAPF32[$115 + 4 >> 2] + $87 * +HEAPF32[$115 >> 2];
   $i$02$i25 = 1;
   while (1) {
    $131 = $87 * +HEAPF32[$115 + ($i$02$i25 << 3) >> 2] + $90 * +HEAPF32[$115 + ($i$02$i25 << 3) + 4 >> 2];
    $132 = $131 > $bestValue$01$i26;
    $bestIndex$1$i28 = $132 ? $i$02$i25 : $bestIndex$03$i24;
    $i$02$i25 = $i$02$i25 + 1 | 0;
    if (($i$02$i25 | 0) == ($117 | 0)) {
     $bestIndex$0$lcssa$i29 = $bestIndex$1$i28;
     break;
    } else {
     $bestIndex$03$i24 = $bestIndex$1$i28;
     $bestValue$01$i26 = $132 ? $131 : $bestValue$01$i26;
    }
   }
  } else $bestIndex$0$lcssa$i29 = 0;
  HEAP32[$indexB >> 2] = $bestIndex$0$lcssa$i29;
  $134 = HEAP32[$indexA >> 2] | 0;
  if (($134 | 0) <= -1) ___assert_fail(90792, 90824, 103, 90888);
  if ((HEAP32[$94 >> 2] | 0) <= ($134 | 0)) ___assert_fail(90792, 90824, 103, 90888);
  $139 = $93 + ($134 << 3) | 0;
  $145 = +HEAPF32[$139 >> 2];
  $146 = +HEAPF32[$139 + 4 >> 2];
  if (($bestIndex$0$lcssa$i29 | 0) <= -1) ___assert_fail(90792, 90824, 103, 90888);
  if ((HEAP32[$116 >> 2] | 0) <= ($bestIndex$0$lcssa$i29 | 0)) ___assert_fail(90792, 90824, 103, 90888);
  $151 = $115 + ($bestIndex$0$lcssa$i29 << 3) | 0;
  $157 = +HEAPF32[$151 >> 2];
  $158 = +HEAPF32[$151 + 4 >> 2];
  $$0 = $74 * ($69 + ($58 * $157 - $57 * $158) - ($34 + ($23 * $145 - $22 * $146))) + $77 * ($70 + ($57 * $157 + $58 * $158) - ($35 + ($22 * $145 + $23 * $146)));
  return +$$0;
 } else if (($72 | 0) == 2) {
  $262 = +HEAPF32[$this + 92 >> 2];
  $265 = +HEAPF32[$this + 96 >> 2];
  $267 = $58 * $262 - $57 * $265;
  $270 = $57 * $262 + $58 * $265;
  $272 = +HEAPF32[$this + 84 >> 2];
  $275 = +HEAPF32[$this + 88 >> 2];
  $278 = $69 + ($58 * $272 - $57 * $275);
  $282 = $70 + ($57 * $272 + $58 * $275);
  $283 = -$267;
  $284 = -$270;
  $287 = $23 * $283 + $22 * $284;
  $290 = $23 * $284 - $22 * $283;
  HEAP32[$indexB >> 2] = -1;
  $291 = HEAP32[$this >> 2] | 0;
  $293 = HEAP32[$291 + 16 >> 2] | 0;
  $295 = HEAP32[$291 + 20 >> 2] | 0;
  if (($295 | 0) > 1) {
   $bestIndex$03$i = 0;
   $bestValue$01$i = $290 * +HEAPF32[$293 + 4 >> 2] + $287 * +HEAPF32[$293 >> 2];
   $i$02$i = 1;
   while (1) {
    $309 = $287 * +HEAPF32[$293 + ($i$02$i << 3) >> 2] + $290 * +HEAPF32[$293 + ($i$02$i << 3) + 4 >> 2];
    $310 = $309 > $bestValue$01$i;
    $bestIndex$03$i = $310 ? $i$02$i : $bestIndex$03$i;
    $i$02$i = $i$02$i + 1 | 0;
    if (($i$02$i | 0) == ($295 | 0)) break; else $bestValue$01$i = $310 ? $309 : $bestValue$01$i;
   }
   HEAP32[$indexA >> 2] = $bestIndex$03$i;
   if (($bestIndex$03$i | 0) > -1) $bestIndex$0$lcssa$i42 = $bestIndex$03$i; else ___assert_fail(90792, 90824, 103, 90888);
  } else {
   HEAP32[$indexA >> 2] = 0;
   $bestIndex$0$lcssa$i42 = 0;
  }
  $313 = HEAP32[$this >> 2] | 0;
  if ((HEAP32[$313 + 20 >> 2] | 0) <= ($bestIndex$0$lcssa$i42 | 0)) ___assert_fail(90792, 90824, 103, 90888);
  $320 = (HEAP32[$313 + 16 >> 2] | 0) + ($bestIndex$0$lcssa$i42 << 3) | 0;
  $326 = +HEAPF32[$320 >> 2];
  $327 = +HEAPF32[$320 + 4 >> 2];
  $$0 = $267 * ($34 + ($23 * $326 - $22 * $327) - $278) + $270 * ($35 + ($22 * $326 + $23 * $327) - $282);
  return +$$0;
 } else ___assert_fail(90768, 90688, 186, 90904);
 return +(0.0);
}

function __ZN12b2WheelJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $1 = 0, $100 = 0.0, $104 = 0.0, $107 = 0.0, $110 = 0.0, $113 = 0.0, $117 = 0.0, $12 = 0, $120 = 0.0, $123 = 0.0, $128 = 0.0, $129 = 0.0, $132 = 0.0, $135 = 0.0, $137 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0, $147 = 0.0, $148 = 0.0, $151 = 0.0, $155 = 0.0, $157 = 0.0, $163 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $171 = 0.0, $175 = 0.0, $178 = 0.0, $18 = 0, $180 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $192 = 0.0, $196 = 0.0, $203 = 0.0, $205 = 0.0, $209 = 0.0, $216 = 0.0, $217 = 0.0, $220 = 0.0, $226 = 0.0, $233 = 0.0, $234 = 0, $24 = 0, $242 = 0, $244 = 0, $246 = 0.0, $248 = 0, $250 = 0.0, $252 = 0, $254 = 0.0, $26 = 0, $263 = 0.0, $264 = 0.0, $277 = 0.0, $285 = 0.0, $29 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $320 = 0, $321 = 0, $322 = 0, $35 = 0.0, $36 = 0, $38 = 0.0, $39 = 0, $4 = 0, $41 = 0.0, $42 = 0, $44 = 0.0, $45 = 0, $47 = 0, $49 = 0, $55 = 0.0, $56 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $68 = 0.0, $69 = 0.0, $71 = 0.0, $73 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $82 = 0.0, $84 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $storemerge = 0.0, $storemerge6 = 0.0, $wA$0 = 0.0, $wB$0 = 0.0;
 $1 = HEAP32[$this + 48 >> 2] | 0;
 $3 = HEAP32[$1 + 8 >> 2] | 0;
 $4 = $this + 132 | 0;
 HEAP32[$4 >> 2] = $3;
 $6 = HEAP32[$this + 52 >> 2] | 0;
 $8 = HEAP32[$6 + 8 >> 2] | 0;
 $9 = $this + 136 | 0;
 HEAP32[$9 >> 2] = $8;
 $12 = $1 + 28 | 0;
 $14 = HEAP32[$12 >> 2] | 0;
 $17 = HEAP32[$12 + 4 >> 2] | 0;
 $18 = $this + 140 | 0;
 HEAP32[$18 >> 2] = $14;
 HEAP32[$18 + 4 >> 2] = $17;
 $24 = $6 + 28 | 0;
 $26 = HEAP32[$24 >> 2] | 0;
 $29 = HEAP32[$24 + 4 >> 2] | 0;
 $30 = $this + 148 | 0;
 HEAP32[$30 >> 2] = $26;
 HEAP32[$30 + 4 >> 2] = $29;
 $35 = +HEAPF32[$1 + 120 >> 2];
 $36 = $this + 156 | 0;
 HEAPF32[$36 >> 2] = $35;
 $38 = +HEAPF32[$6 + 120 >> 2];
 $39 = $this + 160 | 0;
 HEAPF32[$39 >> 2] = $38;
 $41 = +HEAPF32[$1 + 128 >> 2];
 $42 = $this + 164 | 0;
 HEAPF32[$42 >> 2] = $41;
 $44 = +HEAPF32[$6 + 128 >> 2];
 $45 = $this + 168 | 0;
 HEAPF32[$45 >> 2] = $44;
 $47 = HEAP32[$data + 24 >> 2] | 0;
 $49 = $47 + ($3 * 12 | 0) | 0;
 $55 = +HEAPF32[$49 >> 2];
 $56 = +HEAPF32[$49 + 4 >> 2];
 $58 = +HEAPF32[$47 + ($3 * 12 | 0) + 8 >> 2];
 $59 = $data + 28 | 0;
 $60 = HEAP32[$59 >> 2] | 0;
 $62 = $60 + ($3 * 12 | 0) | 0;
 $68 = +HEAPF32[$62 >> 2];
 $69 = +HEAPF32[$62 + 4 >> 2];
 $71 = +HEAPF32[$60 + ($3 * 12 | 0) + 8 >> 2];
 $73 = $47 + ($8 * 12 | 0) | 0;
 $79 = +HEAPF32[$73 >> 2];
 $80 = +HEAPF32[$73 + 4 >> 2];
 $82 = +HEAPF32[$47 + ($8 * 12 | 0) + 8 >> 2];
 $84 = $60 + ($8 * 12 | 0) | 0;
 $90 = +HEAPF32[$84 >> 2];
 $91 = +HEAPF32[$84 + 4 >> 2];
 $93 = +HEAPF32[$60 + ($8 * 12 | 0) + 8 >> 2];
 $94 = +Math_sin(+$58);
 $95 = +Math_cos(+$58);
 $96 = +Math_sin(+$82);
 $97 = +Math_cos(+$82);
 $100 = +HEAPF32[$this + 76 >> 2] - (HEAP32[tempDoublePtr >> 2] = $14, +HEAPF32[tempDoublePtr >> 2]);
 $104 = +HEAPF32[$this + 80 >> 2] - (HEAP32[tempDoublePtr >> 2] = $17, +HEAPF32[tempDoublePtr >> 2]);
 $107 = $95 * $100 - $94 * $104;
 $110 = $94 * $100 + $95 * $104;
 $113 = +HEAPF32[$this + 84 >> 2] - (HEAP32[tempDoublePtr >> 2] = $26, +HEAPF32[tempDoublePtr >> 2]);
 $117 = +HEAPF32[$this + 88 >> 2] - (HEAP32[tempDoublePtr >> 2] = $29, +HEAPF32[tempDoublePtr >> 2]);
 $120 = $97 * $113 - $96 * $117;
 $123 = $96 * $113 + $97 * $117;
 $128 = $79 + $120 - $55 - $107;
 $129 = $80 + $123 - $56 - $110;
 $132 = +HEAPF32[$this + 100 >> 2];
 $135 = +HEAPF32[$this + 104 >> 2];
 $137 = $95 * $132 - $94 * $135;
 $140 = $94 * $132 + $95 * $135;
 $141 = +$137;
 $142 = +$140;
 $143 = $this + 180 | 0;
 HEAPF32[$143 >> 2] = $141;
 HEAPF32[$143 + 4 >> 2] = $142;
 $147 = $107 + $128;
 $148 = $110 + $129;
 $151 = $140 * $147 - $137 * $148;
 HEAPF32[$this + 196 >> 2] = $151;
 $155 = $120 * $140 - $123 * $137;
 HEAPF32[$this + 200 >> 2] = $155;
 $157 = $35 + $38;
 $163 = $157 + $151 * ($41 * $151) + $155 * ($44 * $155);
 if ($163 > 0.0) $storemerge6 = 1.0 / $163; else $storemerge6 = $163;
 HEAPF32[$this + 204 >> 2] = $storemerge6;
 $167 = $this + 212 | 0;
 HEAPF32[$167 >> 2] = 0.0;
 $168 = $this + 216 | 0;
 HEAPF32[$168 >> 2] = 0.0;
 $169 = $this + 220 | 0;
 HEAPF32[$169 >> 2] = 0.0;
 $171 = +HEAPF32[$this + 68 >> 2];
 if ($171 > 0.0) {
  $175 = +HEAPF32[$this + 92 >> 2];
  $178 = +HEAPF32[$this + 96 >> 2];
  $180 = $95 * $175 - $94 * $178;
  $183 = $94 * $175 + $95 * $178;
  $184 = +$180;
  $185 = +$183;
  $186 = $this + 172 | 0;
  HEAPF32[$186 >> 2] = $184;
  HEAPF32[$186 + 4 >> 2] = $185;
  $192 = $147 * $183 - $148 * $180;
  HEAPF32[$this + 188 >> 2] = $192;
  $196 = $120 * $183 - $123 * $180;
  HEAPF32[$this + 192 >> 2] = $196;
  $203 = $157 + $192 * ($41 * $192) + $196 * ($44 * $196);
  if ($203 > 0.0) {
   $205 = 1.0 / $203;
   HEAPF32[$167 >> 2] = $205;
   $209 = $171 * 6.2831854820251465;
   $216 = $209 * ($205 * $209);
   $217 = +HEAPF32[$data >> 2];
   $220 = $217 * ($209 * ($205 * 2.0 * +HEAPF32[$this + 72 >> 2]) + $217 * $216);
   if ($220 > 0.0) $storemerge = 1.0 / $220; else $storemerge = $220;
   HEAPF32[$169 >> 2] = $storemerge;
   HEAPF32[$168 >> 2] = ($128 * $180 + $129 * $183) * $217 * $216 * $storemerge;
   $226 = $203 + $storemerge;
   HEAPF32[$167 >> 2] = $226;
   if ($226 > 0.0) HEAPF32[$167 >> 2] = 1.0 / $226;
  }
 } else HEAPF32[$this + 116 >> 2] = 0.0;
 if (!(HEAP8[$this + 128 >> 0] | 0)) {
  HEAPF32[$this + 208 >> 2] = 0.0;
  HEAPF32[$this + 112 >> 2] = 0.0;
 } else {
  $233 = $44 + $41;
  $234 = $this + 208 | 0;
  HEAPF32[$234 >> 2] = $233;
  if ($233 > 0.0) HEAPF32[$234 >> 2] = 1.0 / $233;
 }
 if (!(HEAP8[$data + 20 >> 0] | 0)) {
  HEAPF32[$this + 108 >> 2] = 0.0;
  HEAPF32[$this + 116 >> 2] = 0.0;
  HEAPF32[$this + 112 >> 2] = 0.0;
  $300 = $68;
  $302 = $69;
  $313 = $90;
  $315 = $91;
  $wA$0 = $71;
  $wB$0 = $93;
  $296 = HEAP32[$4 >> 2] | 0;
  $297 = HEAP32[$59 >> 2] | 0;
  $298 = $297 + ($296 * 12 | 0) | 0;
  $299 = +$300;
  $301 = +$302;
  $303 = $298;
  $304 = $303;
  HEAPF32[$304 >> 2] = $299;
  $305 = $303 + 4 | 0;
  $306 = $305;
  HEAPF32[$306 >> 2] = $301;
  $307 = HEAP32[$4 >> 2] | 0;
  $308 = HEAP32[$59 >> 2] | 0;
  $309 = $308 + ($307 * 12 | 0) + 8 | 0;
  HEAPF32[$309 >> 2] = $wA$0;
  $310 = HEAP32[$9 >> 2] | 0;
  $311 = $308 + ($310 * 12 | 0) | 0;
  $312 = +$313;
  $314 = +$315;
  $316 = $311;
  $317 = $316;
  HEAPF32[$317 >> 2] = $312;
  $318 = $316 + 4 | 0;
  $319 = $318;
  HEAPF32[$319 >> 2] = $314;
  $320 = HEAP32[$9 >> 2] | 0;
  $321 = HEAP32[$59 >> 2] | 0;
  $322 = $321 + ($320 * 12 | 0) + 8 | 0;
  HEAPF32[$322 >> 2] = $wB$0;
  return;
 } else {
  $242 = $data + 8 | 0;
  $244 = $this + 108 | 0;
  $246 = +HEAPF32[$242 >> 2] * +HEAPF32[$244 >> 2];
  HEAPF32[$244 >> 2] = $246;
  $248 = $this + 116 | 0;
  $250 = +HEAPF32[$242 >> 2] * +HEAPF32[$248 >> 2];
  HEAPF32[$248 >> 2] = $250;
  $252 = $this + 112 | 0;
  $254 = +HEAPF32[$242 >> 2] * +HEAPF32[$252 >> 2];
  HEAPF32[$252 >> 2] = $254;
  $263 = $246 * $137 + $250 * +HEAPF32[$this + 172 >> 2];
  $264 = $246 * $140 + $250 * +HEAPF32[$this + 176 >> 2];
  $277 = +HEAPF32[$36 >> 2];
  $285 = +HEAPF32[$39 >> 2];
  $300 = $68 - $263 * $277;
  $302 = $69 - $264 * $277;
  $313 = $90 + $263 * $285;
  $315 = $91 + $264 * $285;
  $wA$0 = $71 - ($254 + ($246 * $151 + $250 * +HEAPF32[$this + 188 >> 2])) * +HEAPF32[$42 >> 2];
  $wB$0 = $93 + ($254 + ($246 * $155 + $250 * +HEAPF32[$this + 192 >> 2])) * +HEAPF32[$45 >> 2];
  $296 = HEAP32[$4 >> 2] | 0;
  $297 = HEAP32[$59 >> 2] | 0;
  $298 = $297 + ($296 * 12 | 0) | 0;
  $299 = +$300;
  $301 = +$302;
  $303 = $298;
  $304 = $303;
  HEAPF32[$304 >> 2] = $299;
  $305 = $303 + 4 | 0;
  $306 = $305;
  HEAPF32[$306 >> 2] = $301;
  $307 = HEAP32[$4 >> 2] | 0;
  $308 = HEAP32[$59 >> 2] | 0;
  $309 = $308 + ($307 * 12 | 0) + 8 | 0;
  HEAPF32[$309 >> 2] = $wA$0;
  $310 = HEAP32[$9 >> 2] | 0;
  $311 = $308 + ($310 * 12 | 0) | 0;
  $312 = +$313;
  $314 = +$315;
  $316 = $311;
  $317 = $316;
  HEAPF32[$317 >> 2] = $312;
  $318 = $316 + 4 | 0;
  $319 = $318;
  HEAPF32[$319 >> 2] = $314;
  $320 = HEAP32[$9 >> 2] | 0;
  $321 = HEAP32[$59 >> 2] | 0;
  $322 = $321 + ($320 * 12 | 0) + 8 | 0;
  HEAPF32[$322 >> 2] = $wB$0;
  return;
 }
}

function _inflate_table($type, $lens, $codes, $table, $bits, $work) {
 $type = $type | 0;
 $lens = $lens | 0;
 $codes = $codes | 0;
 $table = $table | 0;
 $bits = $bits | 0;
 $work = $work | 0;
 var $$0 = 0, $$ph = 0, $$ph25 = 0, $$ph25$in = 0, $$ph26 = 0, $0 = 0, $100 = 0, $102 = 0, $112 = 0, $115 = 0, $116 = 0, $120 = 0, $123 = 0, $125 = 0, $130 = 0, $138 = 0, $16 = 0, $20 = 0, $24 = 0, $4 = 0, $43 = 0, $52 = 0, $56 = 0, $57 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $73 = 0, $74 = 0, $8 = 0, $82 = 0, $83 = 0, $85 = 0, $9 = 0, $base$01118$ph = 0, $count = 0, $curr$0$ph = 0, $curr$1$lcssa = 0, $curr$122 = 0, $drop$0$ph = 0, $end$01316$ph = 0, $extra$01217$ph = 0, $fill$0 = 0, $here$sroa$0$0 = 0, $here$sroa$2$0 = 0, $huff$0 = 0, $huff$0$ph = 0, $huff$1 = 0, $incr$0 = 0, $left$043 = 0, $left$123 = 0, $len$142 = 0, $len$239 = 0, $len$3 = 0, $len$3$ph = 0, $len$4 = 0, $low$0$ph = 0, $max$0$8 = 0, $max$050 = 0, $min$0$lcssa = 0, $min$0$max$0$ = 0, $min$0$max$0$$drop$0 = 0, $min$044 = 0, $next$0$ph28 = 0, $offs = 0, $sym$052 = 0, $sym$136 = 0, $sym$2 = 0, $sym$2$ph = 0, $used$0$ph27 = 0, dest = 0, label = 0, sp = 0, stop = 0, $fill$0$looptemp = 0, $sym$2$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $count = sp + 32 | 0;
 $offs = sp;
 dest = $count + 0 | 0;
 stop = dest + 32 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 $0 = ($codes | 0) == 0;
 if (!$0) {
  $sym$052 = 0;
  do {
   $4 = $count + (HEAPU16[$lens + ($sym$052 << 1) >> 1] << 1) | 0;
   HEAP16[$4 >> 1] = (HEAP16[$4 >> 1] | 0) + 1 << 16 >> 16;
   $sym$052 = $sym$052 + 1 | 0;
  } while (($sym$052 | 0) != ($codes | 0));
 }
 $8 = HEAP32[$bits >> 2] | 0;
 $max$050 = 15;
 while (1) {
  $9 = $max$050 + -1 | 0;
  if (HEAP16[$count + ($max$050 << 1) >> 1] | 0) break;
  if (!$9) {
   label = 7;
   break;
  } else $max$050 = $9;
 }
 if ((label | 0) == 7) {
  $16 = HEAP32[$table >> 2] | 0;
  HEAP32[$table >> 2] = $16 + 4;
  HEAP8[$16 >> 0] = 64;
  HEAP8[$16 + 1 >> 0] = 1;
  HEAP16[$16 + 2 >> 1] = 0;
  $20 = HEAP32[$table >> 2] | 0;
  HEAP32[$table >> 2] = $20 + 4;
  HEAP8[$20 >> 0] = 64;
  HEAP8[$20 + 1 >> 0] = 1;
  HEAP16[$20 + 2 >> 1] = 0;
  HEAP32[$bits >> 2] = 1;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $max$0$8 = $8 >>> 0 > $max$050 >>> 0 ? $max$050 : $8;
 L12 : do if ($max$050 >>> 0 > 1) {
  $min$044 = 1;
  while (1) {
   $24 = $min$044 + 1 | 0;
   if (HEAP16[$count + ($min$044 << 1) >> 1] | 0) {
    $min$0$lcssa = $min$044;
    break L12;
   }
   if ($24 >>> 0 < $max$050 >>> 0) $min$044 = $24; else {
    $min$0$lcssa = $24;
    break;
   }
  }
 } else $min$0$lcssa = 1; while (0);
 $min$0$max$0$ = $max$0$8 >>> 0 < $min$0$lcssa >>> 0 ? $min$0$lcssa : $max$0$8;
 $left$043 = 1;
 $len$142 = 1;
 do {
  $left$043 = ($left$043 << 1) - (HEAPU16[$count + ($len$142 << 1) >> 1] | 0) | 0;
  $len$142 = $len$142 + 1 | 0;
  if (($left$043 | 0) < 0) {
   $$0 = -1;
   label = 50;
   break;
  }
 } while ($len$142 >>> 0 < 16);
 if ((label | 0) == 50) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (($left$043 | 0) > 0) if (!(($type | 0) != 0 & ($max$050 | 0) == 1)) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP16[$offs + 2 >> 1] = 0;
 $43 = 0;
 $len$239 = 1;
 do {
  $43 = (HEAPU16[$count + ($len$239 << 1) >> 1] | 0) + ($43 & 65535) | 0;
  $len$239 = $len$239 + 1 | 0;
  HEAP16[$offs + ($len$239 << 1) >> 1] = $43;
 } while (($len$239 | 0) != 15);
 if (!$0) {
  $sym$136 = 0;
  do {
   $52 = HEAP16[$lens + ($sym$136 << 1) >> 1] | 0;
   if ($52 << 16 >> 16) {
    $56 = $offs + (($52 & 65535) << 1) | 0;
    $57 = HEAP16[$56 >> 1] | 0;
    HEAP16[$56 >> 1] = $57 + 1 << 16 >> 16;
    HEAP16[$work + (($57 & 65535) << 1) >> 1] = $sym$136;
   }
   $sym$136 = $sym$136 + 1 | 0;
  } while (($sym$136 | 0) != ($codes | 0));
 }
 if (!$type) {
  $$ph = 0;
  $$ph25$in = 1 << $min$0$max$0$;
  $$ph26 = 0;
  $base$01118$ph = $work;
  $end$01316$ph = 19;
  $extra$01217$ph = $work;
 } else if (($type | 0) == 1) {
  $63 = 1 << $min$0$max$0$;
  if ($63 >>> 0 > 852) {
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  } else {
   $$ph = 0;
   $$ph25$in = $63;
   $$ph26 = 1;
   $base$01118$ph = 105432 + -514 | 0;
   $end$01316$ph = 256;
   $extra$01217$ph = 105496 + -514 | 0;
  }
 } else {
  $65 = 1 << $min$0$max$0$;
  $66 = ($type | 0) == 2;
  if ($66 & $65 >>> 0 > 592) {
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  } else {
   $$ph = $66;
   $$ph25$in = $65;
   $$ph26 = 0;
   $base$01118$ph = 105560;
   $end$01316$ph = -1;
   $extra$01217$ph = 105624;
  }
 }
 $$ph25 = $$ph25$in + -1 | 0;
 $68 = $min$0$max$0$ & 255;
 $curr$0$ph = $min$0$max$0$;
 $drop$0$ph = 0;
 $huff$0$ph = 0;
 $len$3$ph = $min$0$lcssa;
 $low$0$ph = -1;
 $next$0$ph28 = HEAP32[$table >> 2] | 0;
 $sym$2$ph = 0;
 $used$0$ph27 = $$ph25$in;
 L44 : while (1) {
  $69 = 1 << $curr$0$ph;
  $huff$0 = $huff$0$ph;
  $len$3 = $len$3$ph;
  $sym$2 = $sym$2$ph;
  while (1) {
   $70 = $len$3 - $drop$0$ph | 0;
   $71 = $70 & 255;
   $73 = HEAP16[$work + ($sym$2 << 1) >> 1] | 0;
   $74 = $73 & 65535;
   if (($74 | 0) < ($end$01316$ph | 0)) {
    $here$sroa$0$0 = 0;
    $here$sroa$2$0 = $73;
   } else if (($74 | 0) > ($end$01316$ph | 0)) {
    $here$sroa$0$0 = HEAP16[$extra$01217$ph + ($74 << 1) >> 1] & 255;
    $here$sroa$2$0 = HEAP16[$base$01118$ph + ($74 << 1) >> 1] | 0;
   } else {
    $here$sroa$0$0 = 96;
    $here$sroa$2$0 = 0;
   }
   $82 = 1 << $70;
   $83 = $huff$0 >>> $drop$0$ph;
   $fill$0 = $69;
   do {
    $fill$0$looptemp = $fill$0;
    $fill$0 = $fill$0 - $82 | 0;
    $85 = $fill$0 + $83 | 0;
    HEAP8[$next$0$ph28 + ($85 << 2) >> 0] = $here$sroa$0$0;
    HEAP8[$next$0$ph28 + ($85 << 2) + 1 >> 0] = $71;
    HEAP16[$next$0$ph28 + ($85 << 2) + 2 >> 1] = $here$sroa$2$0;
   } while (($fill$0$looptemp | 0) != ($82 | 0));
   $incr$0 = 1 << $len$3 + -1;
   while (1) if (!($incr$0 & $huff$0)) break; else $incr$0 = $incr$0 >>> 1;
   if (!$incr$0) $huff$1 = 0; else $huff$1 = ($incr$0 + -1 & $huff$0) + $incr$0 | 0;
   $sym$2$looptemp = $sym$2;
   $sym$2 = $sym$2 + 1 | 0;
   $100 = $count + ($len$3 << 1) | 0;
   $102 = (HEAP16[$100 >> 1] | 0) + -1 << 16 >> 16;
   HEAP16[$100 >> 1] = $102;
   if (!($102 << 16 >> 16)) {
    if (($len$3 | 0) == ($max$050 | 0)) break L44;
    $len$4 = HEAPU16[$lens + (HEAPU16[$work + ($sym$2 << 1) >> 1] << 1) >> 1] | 0;
   } else $len$4 = $len$3;
   if ($len$4 >>> 0 <= $min$0$max$0$ >>> 0) {
    $huff$0 = $huff$1;
    $len$3 = $len$4;
    $sym$2 = $sym$2;
    continue;
   }
   $112 = $huff$1 & $$ph25;
   if (($112 | 0) != ($low$0$ph | 0)) break; else {
    $huff$0 = $huff$1;
    $len$3 = $len$4;
   }
  }
  $min$0$max$0$$drop$0 = ($drop$0$ph | 0) == 0 ? $min$0$max$0$ : $drop$0$ph;
  $115 = $next$0$ph28 + ($69 << 2) | 0;
  $116 = $len$4 - $min$0$max$0$$drop$0 | 0;
  L67 : do if ($len$4 >>> 0 < $max$050 >>> 0) {
   $120 = $len$4;
   $curr$122 = $116;
   $left$123 = 1 << $116;
   while (1) {
    $123 = $left$123 - (HEAPU16[$count + ($120 << 1) >> 1] | 0) | 0;
    if (($123 | 0) < 1) {
     $curr$1$lcssa = $curr$122;
     break L67;
    }
    $125 = $curr$122 + 1 | 0;
    $120 = $125 + $min$0$max$0$$drop$0 | 0;
    if ($120 >>> 0 >= $max$050 >>> 0) {
     $curr$1$lcssa = $125;
     break;
    } else {
     $curr$122 = $125;
     $left$123 = $123 << 1;
    }
   }
  } else $curr$1$lcssa = $116; while (0);
  $130 = (1 << $curr$1$lcssa) + $used$0$ph27 | 0;
  if ($$ph26 & $130 >>> 0 > 852 | $$ph & $130 >>> 0 > 592) {
   $$0 = 1;
   label = 50;
   break;
  }
  HEAP8[(HEAP32[$table >> 2] | 0) + ($112 << 2) >> 0] = $curr$1$lcssa;
  HEAP8[(HEAP32[$table >> 2] | 0) + ($112 << 2) + 1 >> 0] = $68;
  $138 = HEAP32[$table >> 2] | 0;
  HEAP16[$138 + ($112 << 2) + 2 >> 1] = ($115 - $138 | 0) >>> 2;
  $curr$0$ph = $curr$1$lcssa;
  $drop$0$ph = $min$0$max$0$$drop$0;
  $huff$0$ph = $huff$1;
  $len$3$ph = $len$4;
  $low$0$ph = $112;
  $next$0$ph28 = $115;
  $sym$2$ph = $sym$2;
  $used$0$ph27 = $130;
 }
 if ((label | 0) == 50) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ($huff$1) {
  HEAP8[$next$0$ph28 + ($huff$1 << 2) >> 0] = 64;
  HEAP8[$next$0$ph28 + ($huff$1 << 2) + 1 >> 0] = $71;
  HEAP16[$next$0$ph28 + ($huff$1 << 2) + 2 >> 1] = 0;
 }
 HEAP32[$table >> 2] = (HEAP32[$table >> 2] | 0) + ($used$0$ph27 << 2);
 HEAP32[$bits >> 2] = $min$0$max$0$;
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _str_pack($L) {
 $L = $L | 0;
 var $$016$i = 0, $$02$i = 0, $$02$i20 = 0, $$02$i8 = 0, $$02$us$i = 0, $$02$us$i16 = 0, $$02$us$i4 = 0, $$035$i = 0, $$07$i = 0, $$111$i = 0, $$1210$i = 0, $$149$i = 0, $$pr31 = 0, $0 = 0, $1 = 0, $104 = 0, $107 = 0, $11 = 0, $113 = 0, $114 = 0, $115 = 0, $117 = 0, $118 = 0, $12 = 0, $135 = 0, $136 = 0, $139 = 0, $140 = 0, $144 = 0, $15 = 0, $150 = 0, $154 = 0, $16 = 0, $20 = 0, $26 = 0, $27 = 0, $31 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $5 = 0, $59 = 0, $6 = 0, $64 = 0, $65 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $82 = 0, $83 = 0.0, $85 = 0, $88 = 0, $9 = 0, $arg$0$be = 0, $arg$037 = 0, $b = 0, $fmt = 0, $h = 0, $i$03$i = 0, $i$03$i19 = 0, $i$03$i7 = 0, $i$03$us$i = 0, $i$03$us$i15 = 0, $i$03$us$i3 = 0, $i$11$i = 0, $len = 0, $len3 = 0, $len5 = 0, $ntoalign = 0, $size = 0, $totalsize$0$be = 0, $totalsize$036 = 0, $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2128 | 0;
 $b = sp + 64 | 0;
 $h = sp + 48 | 0;
 $fmt = sp + 44 | 0;
 $size = sp + 40 | 0;
 $ntoalign = sp + 36 | 0;
 $u = sp;
 $len = sp + 32 | 0;
 $len3 = sp + 28 | 0;
 $len5 = sp + 24 | 0;
 $0 = _luaL_checklstring($L, 1, 0) | 0;
 HEAP32[$fmt >> 2] = $0;
 HEAP32[$h >> 2] = $L;
 $1 = $h + 4 | 0;
 HEAP32[$1 >> 2] = 1;
 HEAP32[$h + 8 >> 2] = 1;
 _lua_pushnil($L);
 _luaL_buffinit($L, $b);
 if (!(HEAP8[$0 >> 0] | 0)) {
  _luaL_pushresult($b);
  STACKTOP = sp;
  return 1;
 }
 $5 = $b + 8 | 0;
 $6 = $b + 4 | 0;
 $arg$037 = 1;
 $totalsize$036 = 0;
 while (1) {
  $7 = _getdetails($h, $totalsize$036, $fmt, $size, $ntoalign) | 0;
  $8 = HEAP32[$ntoalign >> 2] | 0;
  $9 = HEAP32[$size >> 2] | 0;
  $11 = $8 + $totalsize$036 + $9 | 0;
  $12 = $8 + -1 | 0;
  HEAP32[$ntoalign >> 2] = $12;
  if (($8 | 0) > 0) {
   $15 = (0 - $8 | 0) > -1;
   $$pr31 = $12;
   while (1) {
    $16 = HEAP32[$5 >> 2] | 0;
    if ($16 >>> 0 < (HEAP32[$6 >> 2] | 0) >>> 0) $20 = $16; else {
     _luaL_prepbuffsize($b, 1) | 0;
     $20 = HEAP32[$5 >> 2] | 0;
    }
    HEAP32[$5 >> 2] = $20 + 1;
    HEAP8[(HEAP32[$b >> 2] | 0) + $20 >> 0] = 0;
    if (($$pr31 | 0) > 0) $$pr31 = $$pr31 + -1 | 0; else break;
   }
   HEAP32[$ntoalign >> 2] = $15 ? $8 + -2 | 0 : -1;
  }
  $26 = $arg$037 + 1 | 0;
  switch ($7 | 0) {
  case 1:
   {
    $59 = _luaL_checkinteger($L, $26) | 0;
    if (($9 | 0) < 4) if ($59 >>> 0 >= 1 << ($9 << 3) >>> 0) _luaL_argerror($L, $26, 61592) | 0;
    $64 = HEAP32[$1 >> 2] | 0;
    $65 = _luaL_prepbuffsize($b, $9) | 0;
    $67 = ($64 | 0) != 0;
    $68 = $9 + -1 | 0;
    HEAP8[$65 + ($67 ? 0 : $68) >> 0] = $59;
    if (($9 | 0) > 1) if ($67) {
     $$02$us$i16 = $59;
     $i$03$us$i15 = 1;
     do {
      $$02$us$i16 = $$02$us$i16 >>> 8;
      HEAP8[$65 + $i$03$us$i15 >> 0] = $$02$us$i16;
      $i$03$us$i15 = $i$03$us$i15 + 1 | 0;
     } while (($i$03$us$i15 | 0) != ($9 | 0));
    } else {
     $$02$i20 = $59;
     $i$03$i19 = 1;
     do {
      $$02$i20 = $$02$i20 >>> 8;
      HEAP8[$65 + ($68 - $i$03$i19) >> 0] = $$02$i20;
      $i$03$i19 = $i$03$i19 + 1 | 0;
     } while (($i$03$i19 | 0) != ($9 | 0));
    }
    HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $9;
    $arg$0$be = $26;
    $totalsize$0$be = $11;
    break;
   }
  case 3:
   {
    $104 = _luaL_checklstring($L, $26, $len) | 0;
    if ((HEAP32[$len >> 2] | 0) != ($9 | 0)) _luaL_argerror($L, $26, 61616) | 0;
    _luaL_addlstring($b, $104, $9);
    $arg$0$be = $26;
    $totalsize$0$be = $11;
    break;
   }
  case 2:
   {
    $82 = _luaL_prepbuffsize($b, $9) | 0;
    $83 = +_luaL_checknumber($L, $26);
    if (($9 | 0) == 4) HEAPF32[$u >> 2] = $83; else if (($9 | 0) == 8) HEAPF64[$u >> 3] = $83; else HEAPF32[$u >> 2] = $83;
    $85 = HEAP32[$size >> 2] | 0;
    $88 = ($85 | 0) == 0;
    if ((HEAP32[$1 >> 2] | 0) == 1) {
     if (!$88) {
      $$016$i = $85;
      $$035$i = $u;
      $$07$i = $82;
      while (1) {
       $$016$i = $$016$i + -1 | 0;
       HEAP8[$$07$i >> 0] = HEAP8[$$035$i >> 0] | 0;
       if (!$$016$i) break; else {
        $$035$i = $$035$i + 1 | 0;
        $$07$i = $$07$i + 1 | 0;
       }
      }
     }
    } else if (!$88) {
     $$111$i = $82 + ($85 + -1) | 0;
     $$1210$i = $85;
     $$149$i = $u;
     while (1) {
      $$1210$i = $$1210$i + -1 | 0;
      HEAP8[$$111$i >> 0] = HEAP8[$$149$i >> 0] | 0;
      if (!$$1210$i) break; else {
       $$111$i = $$111$i + -1 | 0;
       $$149$i = $$149$i + 1 | 0;
      }
     }
    }
    HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + (HEAP32[$size >> 2] | 0);
    $arg$0$be = $26;
    $totalsize$0$be = $11;
    break;
   }
  case 4:
   {
    $107 = _luaL_checklstring($L, $26, $len3) | 0;
    if (($9 | 0) <= 3) if ((HEAP32[$len3 >> 2] | 0) >>> 0 >= 1 << ($9 << 3) >>> 0) _luaL_argerror($L, $26, 61632) | 0;
    $113 = HEAP32[$len3 >> 2] | 0;
    $114 = HEAP32[$1 >> 2] | 0;
    $115 = _luaL_prepbuffsize($b, $9) | 0;
    $117 = ($114 | 0) != 0;
    $118 = $9 + -1 | 0;
    HEAP8[$115 + ($117 ? 0 : $118) >> 0] = $113;
    if (($9 | 0) > 1) if ($117) {
     $$02$us$i = $113;
     $i$03$us$i = 1;
     do {
      $$02$us$i = $$02$us$i >>> 8;
      HEAP8[$115 + $i$03$us$i >> 0] = $$02$us$i;
      $i$03$us$i = $i$03$us$i + 1 | 0;
     } while (($i$03$us$i | 0) != ($9 | 0));
    } else {
     $$02$i = $113;
     $i$03$i = 1;
     do {
      $$02$i = $$02$i >>> 8;
      HEAP8[$115 + ($118 - $i$03$i) >> 0] = $$02$i;
      $i$03$i = $i$03$i + 1 | 0;
     } while (($i$03$i | 0) != ($9 | 0));
    }
    HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $9;
    _luaL_addlstring($b, $107, HEAP32[$len3 >> 2] | 0);
    $arg$0$be = $26;
    $totalsize$0$be = (HEAP32[$len3 >> 2] | 0) + $11 | 0;
    break;
   }
  case 5:
   {
    $135 = _luaL_checklstring($L, $26, $len5) | 0;
    $136 = _strlen($135 | 0) | 0;
    if (($136 | 0) == (HEAP32[$len5 >> 2] | 0)) $139 = $136; else {
     _luaL_argerror($L, $26, 61680) | 0;
     $139 = HEAP32[$len5 >> 2] | 0;
    }
    _luaL_addlstring($b, $135, $139);
    $140 = HEAP32[$5 >> 2] | 0;
    if ($140 >>> 0 < (HEAP32[$6 >> 2] | 0) >>> 0) $144 = $140; else {
     _luaL_prepbuffsize($b, 1) | 0;
     $144 = HEAP32[$5 >> 2] | 0;
    }
    HEAP32[$5 >> 2] = $144 + 1;
    HEAP8[(HEAP32[$b >> 2] | 0) + $144 >> 0] = 0;
    $arg$0$be = $26;
    $totalsize$0$be = $11 + 1 + (HEAP32[$len5 >> 2] | 0) | 0;
    break;
   }
  case 0:
   {
    $27 = _luaL_checkinteger($L, $26) | 0;
    if (($9 | 0) < 4) {
     $31 = 1 << ($9 << 3) + -1;
     if (!(($27 | 0) >= (0 - $31 | 0) & ($27 | 0) < ($31 | 0))) _luaL_argerror($L, $26, 61568) | 0;
    }
    $35 = HEAP32[$1 >> 2] | 0;
    $36 = _luaL_prepbuffsize($b, $9) | 0;
    $38 = ($35 | 0) != 0;
    $39 = $9 + -1 | 0;
    HEAP8[$36 + ($38 ? 0 : $39) >> 0] = $27;
    do if (($9 | 0) > 1) {
     if ($38) {
      $$02$us$i4 = $27;
      $i$03$us$i3 = 1;
      do {
       $$02$us$i4 = $$02$us$i4 >>> 8;
       HEAP8[$36 + $i$03$us$i3 >> 0] = $$02$us$i4;
       $i$03$us$i3 = $i$03$us$i3 + 1 | 0;
      } while (($i$03$us$i3 | 0) != ($9 | 0));
     } else {
      $$02$i8 = $27;
      $i$03$i7 = 1;
      do {
       $$02$i8 = $$02$i8 >>> 8;
       HEAP8[$36 + ($39 - $i$03$i7) >> 0] = $$02$i8;
       $i$03$i7 = $i$03$i7 + 1 | 0;
      } while (($i$03$i7 | 0) != ($9 | 0));
     }
     if (($27 | 0) < 0 & ($9 | 0) > 4) if ($38) {
      _memset($36 + 4 | 0, -1, $9 + -4 | 0) | 0;
      break;
     } else {
      $i$11$i = 4;
      do {
       HEAP8[$36 + ($39 - $i$11$i) >> 0] = -1;
       $i$11$i = $i$11$i + 1 | 0;
      } while (($i$11$i | 0) != ($9 | 0));
     }
    } while (0);
    HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $9;
    $arg$0$be = $26;
    $totalsize$0$be = $11;
    break;
   }
  case 8:
  case 7:
   {
    label = 60;
    break;
   }
  case 6:
   {
    $150 = HEAP32[$5 >> 2] | 0;
    if ($150 >>> 0 < (HEAP32[$6 >> 2] | 0) >>> 0) $154 = $150; else {
     _luaL_prepbuffsize($b, 1) | 0;
     $154 = HEAP32[$5 >> 2] | 0;
    }
    HEAP32[$5 >> 2] = $154 + 1;
    HEAP8[(HEAP32[$b >> 2] | 0) + $154 >> 0] = 0;
    label = 60;
    break;
   }
  default:
   {
    $arg$0$be = $26;
    $totalsize$0$be = $11;
   }
  }
  if ((label | 0) == 60) {
   label = 0;
   $arg$0$be = $arg$037;
   $totalsize$0$be = $11;
  }
  if (!(HEAP8[HEAP32[$fmt >> 2] >> 0] | 0)) break; else {
   $arg$037 = $arg$0$be;
   $totalsize$036 = $totalsize$0$be;
  }
 }
 _luaL_pushresult($b);
 STACKTOP = sp;
 return 1;
}

function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0;
 $n_sroa_1_4_extract_shift$0 = $a$1;
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
 $d_sroa_0_0_extract_trunc = $b$0;
 $d_sroa_1_4_extract_shift$0 = $b$1;
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0;
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   if (!$4) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
 do if (!$d_sroa_0_0_extract_trunc) {
  if ($17) {
   if ($rem) {
    HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  if (!$n_sroa_0_0_extract_trunc) {
   if ($rem) {
    HEAP32[$rem >> 2] = 0;
    HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
  if (!($37 & $d_sroa_1_4_extract_trunc)) {
   if ($rem) {
    HEAP32[$rem >> 2] = $a$0 | 0;
    HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
   }
   $_0$1 = 0;
   $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
  if ($51 >>> 0 <= 30) {
   $57 = $51 + 1 | 0;
   $58 = 31 - $51 | 0;
   $sr_1_ph = $57;
   $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
   $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
   $q_sroa_0_1_ph = 0;
   $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
   break;
  }
  if (!$rem) {
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  HEAP32[$rem >> 2] = $a$0 | 0;
  HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
  $_0$1 = 0;
  $_0$0 = 0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
 } else {
  if (!$17) {
   $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   if ($119 >>> 0 <= 31) {
    $125 = $119 + 1 | 0;
    $126 = 31 - $119 | 0;
    $130 = $119 - 31 >> 31;
    $sr_1_ph = $125;
    $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
    $q_sroa_0_1_ph = 0;
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
    break;
   }
   if (!$rem) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
  if ($66 & $d_sroa_0_0_extract_trunc) {
   $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   $89 = 64 - $88 | 0;
   $91 = 32 - $88 | 0;
   $92 = $91 >> 31;
   $95 = $88 - 32 | 0;
   $105 = $95 >> 31;
   $sr_1_ph = $88;
   $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
   $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
   $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
   $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
   break;
  }
  if ($rem) {
   HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
   HEAP32[$rem + 4 >> 2] = 0;
  }
  if (($d_sroa_0_0_extract_trunc | 0) == 1) {
   $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$0 = $a$0 | 0 | 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
   $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0;
   $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = 0;
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0;
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
  $137$1 = tempRet0;
  $q_sroa_1_1198 = $q_sroa_1_1_ph;
  $q_sroa_0_1199 = $q_sroa_0_1_ph;
  $r_sroa_1_1200 = $r_sroa_1_1_ph;
  $r_sroa_0_1201 = $r_sroa_0_1_ph;
  $sr_1202 = $sr_1_ph;
  $carry_0203 = 0;
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1;
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0;
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
   _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
   $150$1 = tempRet0;
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
   $carry_0203 = $151$0 & 1;
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
   $r_sroa_1_1200 = tempRet0;
   $sr_1202 = $sr_1202 - 1 | 0;
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198;
  $q_sroa_0_1_lcssa = $q_sroa_0_1199;
  $r_sroa_1_1_lcssa = $r_sroa_1_1200;
  $r_sroa_0_1_lcssa = $r_sroa_0_1201;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = $carry_0203;
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
 $q_sroa_0_0_insert_ext75$1 = 0;
 if ($rem) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa;
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa;
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
 return (tempRet0 = $_0$1, $_0$0) | 0;
}

function __ZN16b2PrismaticJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $$pn = 0.0, $$pn2 = 0.0, $$pn3 = 0.0, $$pn39 = 0.0, $$pn4 = 0.0, $$pn40 = 0.0, $$sink37 = 0.0, $$sink38 = 0.0, $0 = 0, $1 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $106 = 0, $110 = 0, $114 = 0, $117 = 0.0, $118 = 0.0, $122 = 0, $125 = 0, $128 = 0, $132 = 0, $136 = 0, $14 = 0.0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0.0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $155 = 0, $159 = 0, $162 = 0.0, $163 = 0, $165 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $177 = 0.0, $18 = 0, $180 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $187 = 0.0, $19 = 0, $2 = 0, $21 = 0, $214 = 0.0, $215 = 0, $219 = 0.0, $220 = 0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0, $240 = 0, $241 = 0, $242 = 0.0, $243 = 0.0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0.0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $260 = 0, $261 = 0, $27 = 0.0, $28 = 0.0, $3 = 0, $30 = 0.0, $32 = 0.0, $34 = 0.0, $36 = 0.0, $38 = 0.0, $4 = 0, $48 = 0.0, $5 = 0, $51 = 0.0, $55 = 0.0, $59 = 0.0, $6 = 0, $68 = 0, $69 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $77 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $b = 0, $df = 0, $df7 = 0, $wA$0 = 0.0, $wA$1 = 0.0, $wB$0 = 0.0, $wB$1 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $df = sp + 44 | 0;
 $0 = sp + 32 | 0;
 $b = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $df7 = sp + 8 | 0;
 $2 = sp;
 $3 = $this + 144 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $data + 28 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $8 = $6 + ($4 * 12 | 0) | 0;
 $14 = +HEAPF32[$8 >> 2];
 $15 = +HEAPF32[$8 + 4 >> 2];
 $17 = +HEAPF32[$6 + ($4 * 12 | 0) + 8 >> 2];
 $18 = $this + 148 | 0;
 $19 = HEAP32[$18 >> 2] | 0;
 $21 = $6 + ($19 * 12 | 0) | 0;
 $27 = +HEAPF32[$21 >> 2];
 $28 = +HEAPF32[$21 + 4 >> 2];
 $30 = +HEAPF32[$6 + ($19 * 12 | 0) + 8 >> 2];
 $32 = +HEAPF32[$this + 168 >> 2];
 $34 = +HEAPF32[$this + 172 >> 2];
 $36 = +HEAPF32[$this + 176 >> 2];
 $38 = +HEAPF32[$this + 180 >> 2];
 if (!(HEAP8[$this + 137 >> 0] | 0)) {
  $101 = $15;
  $102 = $28;
  $98 = $14;
  $99 = $27;
  $wA$0 = $17;
  $wB$0 = $30;
 } else if ((HEAP32[$this + 140 >> 2] | 0) == 3) {
  $101 = $15;
  $102 = $28;
  $98 = $14;
  $99 = $27;
  $wA$0 = $17;
  $wB$0 = $30;
 } else {
  $48 = +HEAPF32[$this + 184 >> 2];
  $51 = +HEAPF32[$this + 188 >> 2];
  $55 = +HEAPF32[$this + 212 >> 2];
  $59 = +HEAPF32[$this + 208 >> 2];
  $68 = $this + 116 | 0;
  $69 = +HEAPF32[$68 >> 2];
  $73 = +HEAPF32[$data >> 2] * +HEAPF32[$this + 128 >> 2];
  $74 = $69 + +HEAPF32[$this + 252 >> 2] * (+HEAPF32[$this + 132 >> 2] - (($27 - $14) * $48 + ($28 - $15) * $51 + $30 * $55 - $17 * $59));
  $75 = -$73;
  $77 = $74 < $73 ? $74 : $73;
  $79 = $77 < $75 ? $75 : $77;
  HEAPF32[$68 >> 2] = $79;
  $80 = $79 - $69;
  $81 = $48 * $80;
  $82 = $51 * $80;
  $101 = $15 - $32 * $82;
  $102 = $28 + $34 * $82;
  $98 = $14 - $32 * $81;
  $99 = $27 + $34 * $81;
  $wA$0 = $17 - $36 * ($59 * $80);
  $wB$0 = $30 + $38 * ($55 * $80);
 }
 $97 = $99 - $98;
 $100 = $102 - $101;
 $103 = $this + 192 | 0;
 $106 = $this + 196 | 0;
 $110 = $this + 204 | 0;
 $114 = $this + 200 | 0;
 $117 = $97 * +HEAPF32[$103 >> 2] + $100 * +HEAPF32[$106 >> 2] + $wB$0 * +HEAPF32[$110 >> 2] - $wA$0 * +HEAPF32[$114 >> 2];
 $118 = $wB$0 - $wA$0;
 if (HEAP8[$this + 136 >> 0] | 0) {
  $122 = $this + 140 | 0;
  if (HEAP32[$122 >> 2] | 0) {
   $125 = $this + 184 | 0;
   $128 = $this + 188 | 0;
   $132 = $this + 212 | 0;
   $136 = $this + 208 | 0;
   $140 = $this + 104 | 0;
   $141 = +HEAPF32[$140 >> 2];
   $142 = $this + 108 | 0;
   $143 = +HEAPF32[$142 >> 2];
   $144 = $this + 112 | 0;
   $145 = +HEAPF32[$144 >> 2];
   $146 = $this + 216 | 0;
   $147 = -$117;
   $148 = -$118;
   $149 = -($97 * +HEAPF32[$125 >> 2] + $100 * +HEAPF32[$128 >> 2] + $wB$0 * +HEAPF32[$132 >> 2] - $wA$0 * +HEAPF32[$136 >> 2]);
   HEAPF32[$0 >> 2] = $147;
   HEAPF32[$0 + 4 >> 2] = $148;
   HEAPF32[$0 + 8 >> 2] = $149;
   __ZNK7b2Mat337Solve33ERK6b2Vec3($df, $146, $0);
   HEAPF32[$140 >> 2] = +HEAPF32[$df >> 2] + +HEAPF32[$140 >> 2];
   $155 = $df + 4 | 0;
   HEAPF32[$142 >> 2] = +HEAPF32[$155 >> 2] + +HEAPF32[$142 >> 2];
   $159 = $df + 8 | 0;
   $162 = +HEAPF32[$159 >> 2] + +HEAPF32[$144 >> 2];
   HEAPF32[$144 >> 2] = $162;
   $163 = HEAP32[$122 >> 2] | 0;
   if (($163 | 0) == 2) {
    $167 = $162 < 0.0 ? $162 : 0.0;
    HEAPF32[$144 >> 2] = $167;
    $169 = $167;
   } else if (($163 | 0) == 1) {
    $165 = $162 > 0.0 ? $162 : 0.0;
    HEAPF32[$144 >> 2] = $165;
    $169 = $165;
   } else $169 = $162;
   $168 = $169 - $145;
   $177 = $148 - $168 * +HEAPF32[$this + 244 >> 2];
   HEAPF32[$b >> 2] = $147 - +HEAPF32[$this + 240 >> 2] * $168;
   HEAPF32[$b + 4 >> 2] = $177;
   __ZNK7b2Mat337Solve22ERK6b2Vec2($1, $146, $b);
   $180 = $141 + +HEAPF32[$1 >> 2];
   $183 = $143 + +HEAPF32[$1 + 4 >> 2];
   HEAPF32[$140 >> 2] = $180;
   HEAPF32[$142 >> 2] = $183;
   $184 = $180 - $141;
   $185 = $183 - $143;
   $187 = +HEAPF32[$144 >> 2] - $145;
   HEAPF32[$df >> 2] = $184;
   HEAPF32[$155 >> 2] = $185;
   HEAPF32[$159 >> 2] = $187;
   $$pn3 = $185 + $184 * +HEAPF32[$110 >> 2] + $187 * +HEAPF32[$132 >> 2];
   $$pn39 = $184 * +HEAPF32[$103 >> 2] + $187 * +HEAPF32[$125 >> 2];
   $$pn4 = $184 * +HEAPF32[$114 >> 2] + $185 + $187 * +HEAPF32[$136 >> 2];
   $$pn40 = $184 * +HEAPF32[$106 >> 2] + $187 * +HEAPF32[$128 >> 2];
   $$sink37 = $32 * $$pn40;
   $$sink38 = $32 * $$pn39;
   $233 = $98 - $$sink38;
   $234 = $101 - $$sink37;
   $235 = $34 * $$pn39;
   $236 = $34 * $$pn40;
   $237 = $99 + $235;
   $238 = $102 + $236;
   $$pn2 = $36 * $$pn4;
   $$pn = $38 * $$pn3;
   $wA$1 = $wA$0 - $$pn2;
   $wB$1 = $wB$0 + $$pn;
   $239 = HEAP32[$3 >> 2] | 0;
   $240 = HEAP32[$5 >> 2] | 0;
   $241 = $240 + ($239 * 12 | 0) | 0;
   $242 = +$233;
   $243 = +$234;
   $244 = $241;
   $245 = $244;
   HEAPF32[$245 >> 2] = $242;
   $246 = $244 + 4 | 0;
   $247 = $246;
   HEAPF32[$247 >> 2] = $243;
   $248 = HEAP32[$3 >> 2] | 0;
   $249 = HEAP32[$5 >> 2] | 0;
   $250 = $249 + ($248 * 12 | 0) + 8 | 0;
   HEAPF32[$250 >> 2] = $wA$1;
   $251 = HEAP32[$18 >> 2] | 0;
   $252 = $249 + ($251 * 12 | 0) | 0;
   $253 = +$237;
   $254 = +$238;
   $255 = $252;
   $256 = $255;
   HEAPF32[$256 >> 2] = $253;
   $257 = $255 + 4 | 0;
   $258 = $257;
   HEAPF32[$258 >> 2] = $254;
   $259 = HEAP32[$18 >> 2] | 0;
   $260 = HEAP32[$5 >> 2] | 0;
   $261 = $260 + ($259 * 12 | 0) + 8 | 0;
   HEAPF32[$261 >> 2] = $wB$1;
   STACKTOP = sp;
   return;
  }
 }
 HEAPF32[$2 >> 2] = -$117;
 HEAPF32[$2 + 4 >> 2] = -$118;
 __ZNK7b2Mat337Solve22ERK6b2Vec2($df7, $this + 216 | 0, $2);
 $214 = +HEAPF32[$df7 >> 2];
 $215 = $this + 104 | 0;
 HEAPF32[$215 >> 2] = $214 + +HEAPF32[$215 >> 2];
 $219 = +HEAPF32[$df7 + 4 >> 2];
 $220 = $this + 108 | 0;
 HEAPF32[$220 >> 2] = $219 + +HEAPF32[$220 >> 2];
 $$pn3 = $219 + $214 * +HEAPF32[$110 >> 2];
 $$pn39 = $214 * +HEAPF32[$103 >> 2];
 $$pn4 = $214 * +HEAPF32[$114 >> 2] + $219;
 $$pn40 = $214 * +HEAPF32[$106 >> 2];
 $$sink37 = $32 * $$pn40;
 $$sink38 = $32 * $$pn39;
 $233 = $98 - $$sink38;
 $234 = $101 - $$sink37;
 $235 = $34 * $$pn39;
 $236 = $34 * $$pn40;
 $237 = $99 + $235;
 $238 = $102 + $236;
 $$pn2 = $36 * $$pn4;
 $$pn = $38 * $$pn3;
 $wA$1 = $wA$0 - $$pn2;
 $wB$1 = $wB$0 + $$pn;
 $239 = HEAP32[$3 >> 2] | 0;
 $240 = HEAP32[$5 >> 2] | 0;
 $241 = $240 + ($239 * 12 | 0) | 0;
 $242 = +$233;
 $243 = +$234;
 $244 = $241;
 $245 = $244;
 HEAPF32[$245 >> 2] = $242;
 $246 = $244 + 4 | 0;
 $247 = $246;
 HEAPF32[$247 >> 2] = $243;
 $248 = HEAP32[$3 >> 2] | 0;
 $249 = HEAP32[$5 >> 2] | 0;
 $250 = $249 + ($248 * 12 | 0) + 8 | 0;
 HEAPF32[$250 >> 2] = $wA$1;
 $251 = HEAP32[$18 >> 2] | 0;
 $252 = $249 + ($251 * 12 | 0) | 0;
 $253 = +$237;
 $254 = +$238;
 $255 = $252;
 $256 = $255;
 HEAPF32[$256 >> 2] = $253;
 $257 = $255 + 4 | 0;
 $258 = $257;
 HEAPF32[$258 >> 2] = $254;
 $259 = HEAP32[$18 >> 2] | 0;
 $260 = HEAP32[$5 >> 2] | 0;
 $261 = $260 + ($259 * 12 | 0) + 8 | 0;
 HEAPF32[$261 >> 2] = $wB$1;
 STACKTOP = sp;
 return;
}

function _LoadFunction($S, $f, $psource) {
 $S = $S | 0;
 $f = $f | 0;
 $psource = $psource | 0;
 var $$pre$i24 = 0, $0 = 0, $1 = 0, $101 = 0, $102 = 0, $106 = 0, $125 = 0, $128 = 0, $130 = 0, $131 = 0, $133 = 0, $135 = 0, $136 = 0, $138 = 0, $149 = 0, $152 = 0, $153 = 0, $154 = 0, $163 = 0, $166 = 0, $168 = 0, $169 = 0, $173 = 0, $175 = 0, $195 = 0, $197 = 0, $3 = 0, $32 = 0, $35 = 0, $36 = 0, $37 = 0, $46 = 0, $49 = 0, $51 = 0, $52 = 0, $63 = 0, $69 = 0, $81 = 0, $87 = 0, $96 = 0, $99 = 0, $i$0$i39 = 0, $i$09$i = 0, $i$1$i38 = 0, $i$110$i = 0, $i$14$i = 0, $i$17$i42 = 0, $i$29$i = 0, $x$i$i35 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $x$i$i35 = sp;
 $0 = _LoadString($S) | 0;
 $1 = $f + 72 | 0;
 HEAP32[$1 >> 2] = ($0 | 0) == 0 ? $psource : $0;
 $3 = $S + 4 | 0;
 if (_luaZ_read(HEAP32[$3 >> 2] | 0, $x$i$i35, 4) | 0) _error($S, 75728);
 HEAP32[$f + 36 >> 2] = HEAP32[$x$i$i35 >> 2];
 if (_luaZ_read(HEAP32[$3 >> 2] | 0, $x$i$i35, 4) | 0) _error($S, 75728);
 HEAP32[$f + 40 >> 2] = HEAP32[$x$i$i35 >> 2];
 if (_luaZ_read(HEAP32[$3 >> 2] | 0, $x$i$i35, 1) | 0) _error($S, 75728);
 HEAP8[$f + 6 >> 0] = HEAP8[$x$i$i35 >> 0] | 0;
 if (_luaZ_read(HEAP32[$3 >> 2] | 0, $x$i$i35, 1) | 0) _error($S, 75728);
 HEAP8[$f + 7 >> 0] = HEAP8[$x$i$i35 >> 0] | 0;
 if (_luaZ_read(HEAP32[$3 >> 2] | 0, $x$i$i35, 1) | 0) _error($S, 75728);
 HEAP8[$f + 8 >> 0] = HEAP8[$x$i$i35 >> 0] | 0;
 if (_luaZ_read(HEAP32[$3 >> 2] | 0, $x$i$i35, 4) | 0) _error($S, 75728);
 $32 = HEAP32[$x$i$i35 >> 2] | 0;
 $35 = HEAP32[$S >> 2] | 0;
 if (($32 + 1 | 0) >>> 0 > 1073741823) _luaM_toobig($35);
 $36 = $32 << 2;
 $37 = _luaM_realloc_($35, 0, 0, $36) | 0;
 HEAP32[$f + 48 >> 2] = $37;
 HEAP32[$f + 20 >> 2] = $32;
 if (_luaZ_read(HEAP32[$3 >> 2] | 0, $37, $36) | 0) _error($S, 75728);
 if (_luaZ_read(HEAP32[$3 >> 2] | 0, $x$i$i35, 4) | 0) _error($S, 75728);
 $46 = HEAP32[$x$i$i35 >> 2] | 0;
 $49 = HEAP32[$S >> 2] | 0;
 if (($46 + 1 | 0) >>> 0 > 536870911) _luaM_toobig($49);
 $51 = _luaM_realloc_($49, 0, 0, $46 << 3) | 0;
 $52 = $f + 44 | 0;
 HEAP32[$52 >> 2] = $51;
 HEAP32[$f + 16 >> 2] = $46;
 L31 : do if (($46 | 0) > 0) {
  $i$09$i = 0;
  do {
   HEAP32[$51 + ($i$09$i << 3) + 4 >> 2] = 0;
   $i$09$i = $i$09$i + 1 | 0;
  } while (($i$09$i | 0) != ($46 | 0));
  if (!(_luaZ_read(HEAP32[$3 >> 2] | 0, $x$i$i35, 1) | 0)) {
   $63 = $51;
   $69 = $51;
   $i$17$i42 = 0;
  } else _error($S, 75728);
  L37 : while (1) {
   switch (HEAPU8[$x$i$i35 >> 0] | 0 | 0) {
   case 0:
    {
     HEAP32[$63 + ($i$17$i42 << 3) + 4 >> 2] = 0;
     break;
    }
   case 3:
    {
     if (_luaZ_read(HEAP32[$3 >> 2] | 0, $x$i$i35, 4) | 0) {
      label = 31;
      break L37;
     }
     HEAPF32[$69 >> 2] = +HEAPF32[$x$i$i35 >> 2];
     HEAP32[$63 + ($i$17$i42 << 3) + 4 >> 2] = 3;
     break;
    }
   case 1:
    {
     if (_luaZ_read(HEAP32[$3 >> 2] | 0, $x$i$i35, 1) | 0) {
      label = 28;
      break L37;
     }
     HEAP32[$69 >> 2] = HEAPU8[$x$i$i35 >> 0];
     HEAP32[$63 + ($i$17$i42 << 3) + 4 >> 2] = 1;
     break;
    }
   case 20:
   case 4:
    {
     $81 = _LoadString($S) | 0;
     HEAP32[$69 >> 2] = $81;
     HEAP32[$63 + ($i$17$i42 << 3) + 4 >> 2] = HEAPU8[$81 + 4 >> 0] | 0 | 64;
     break;
    }
   case 19:
    {
     if (_luaZ_read(HEAP32[$3 >> 2] | 0, $x$i$i35, 4) | 0) {
      label = 34;
      break L37;
     }
     HEAP32[$69 >> 2] = HEAP32[$x$i$i35 >> 2];
     HEAP32[$63 + ($i$17$i42 << 3) + 4 >> 2] = 19;
     break;
    }
   default:
    {}
   }
   $87 = $i$17$i42 + 1 | 0;
   if (($87 | 0) >= ($46 | 0)) break L31;
   $$pre$i24 = HEAP32[$52 >> 2] | 0;
   if (!(_luaZ_read(HEAP32[$3 >> 2] | 0, $x$i$i35, 1) | 0)) {
    $63 = $$pre$i24;
    $69 = $$pre$i24 + ($87 << 3) | 0;
    $i$17$i42 = $87;
   } else {
    label = 24;
    break;
   }
  }
  if ((label | 0) == 24) _error($S, 75728); else if ((label | 0) == 28) _error($S, 75728); else if ((label | 0) == 31) _error($S, 75728); else if ((label | 0) == 34) _error($S, 75728);
 } while (0);
 if (_luaZ_read(HEAP32[$3 >> 2] | 0, $x$i$i35, 4) | 0) _error($S, 75728);
 $96 = HEAP32[$x$i$i35 >> 2] | 0;
 $99 = HEAP32[$S >> 2] | 0;
 if (($96 + 1 | 0) >>> 0 > 536870911) _luaM_toobig($99);
 $101 = _luaM_realloc_($99, 0, 0, $96 << 3) | 0;
 $102 = $f + 64 | 0;
 HEAP32[$102 >> 2] = $101;
 HEAP32[$f + 12 >> 2] = $96;
 L62 : do if (($96 | 0) > 0) {
  HEAP32[$101 >> 2] = 0;
  if (($96 | 0) == 1) $i$14$i = 0; else {
   $106 = 1;
   do {
    HEAP32[(HEAP32[$102 >> 2] | 0) + ($106 << 3) >> 2] = 0;
    $106 = $106 + 1 | 0;
   } while (($106 | 0) != ($96 | 0));
   $i$14$i = 0;
  }
  while (1) {
   if (_luaZ_read(HEAP32[$3 >> 2] | 0, $x$i$i35, 1) | 0) {
    label = 47;
    break;
   }
   HEAP8[(HEAP32[$102 >> 2] | 0) + ($i$14$i << 3) + 4 >> 0] = HEAP8[$x$i$i35 >> 0] | 0;
   if (_luaZ_read(HEAP32[$3 >> 2] | 0, $x$i$i35, 1) | 0) {
    label = 49;
    break;
   }
   HEAP8[(HEAP32[$102 >> 2] | 0) + ($i$14$i << 3) + 5 >> 0] = HEAP8[$x$i$i35 >> 0] | 0;
   $i$14$i = $i$14$i + 1 | 0;
   if (($i$14$i | 0) >= ($96 | 0)) break L62;
  }
  if ((label | 0) == 47) _error($S, 75728); else if ((label | 0) == 49) _error($S, 75728);
 } while (0);
 if (_luaZ_read(HEAP32[$3 >> 2] | 0, $x$i$i35, 4) | 0) _error($S, 75728);
 $125 = HEAP32[$x$i$i35 >> 2] | 0;
 $128 = HEAP32[$S >> 2] | 0;
 if (($125 + 1 | 0) >>> 0 > 1073741823) _luaM_toobig($128);
 $130 = _luaM_realloc_($128, 0, 0, $125 << 2) | 0;
 $131 = $f + 52 | 0;
 HEAP32[$131 >> 2] = $130;
 HEAP32[$f + 28 >> 2] = $125;
 $133 = ($125 | 0) > 0;
 if ($133) {
  $135 = $130;
  $i$0$i39 = 0;
  while (1) {
   HEAP32[$135 + ($i$0$i39 << 2) >> 2] = 0;
   $136 = $i$0$i39 + 1 | 0;
   if (($136 | 0) == ($125 | 0)) break;
   $135 = HEAP32[$131 >> 2] | 0;
   $i$0$i39 = $136;
  }
  if ($133) {
   $i$1$i38 = 0;
   do {
    $138 = _luaF_newproto(HEAP32[$S >> 2] | 0) | 0;
    HEAP32[(HEAP32[$131 >> 2] | 0) + ($i$1$i38 << 2) >> 2] = $138;
    _LoadFunction($S, HEAP32[(HEAP32[$131 >> 2] | 0) + ($i$1$i38 << 2) >> 2] | 0, HEAP32[$1 >> 2] | 0);
    $i$1$i38 = $i$1$i38 + 1 | 0;
   } while (($i$1$i38 | 0) != ($125 | 0));
  }
 }
 if (_luaZ_read(HEAP32[$3 >> 2] | 0, $x$i$i35, 4) | 0) _error($S, 75728);
 $149 = HEAP32[$x$i$i35 >> 2] | 0;
 $152 = HEAP32[$S >> 2] | 0;
 if (($149 + 1 | 0) >>> 0 > 1073741823) _luaM_toobig($152);
 $153 = $149 << 2;
 $154 = _luaM_realloc_($152, 0, 0, $153) | 0;
 HEAP32[$f + 56 >> 2] = $154;
 HEAP32[$f + 24 >> 2] = $149;
 if (_luaZ_read(HEAP32[$3 >> 2] | 0, $154, $153) | 0) _error($S, 75728);
 if (_luaZ_read(HEAP32[$3 >> 2] | 0, $x$i$i35, 4) | 0) _error($S, 75728);
 $163 = HEAP32[$x$i$i35 >> 2] | 0;
 $166 = HEAP32[$S >> 2] | 0;
 if (($163 + 1 | 0) >>> 0 > 357913941) _luaM_toobig($166);
 $168 = _luaM_realloc_($166, 0, 0, $163 * 12 | 0) | 0;
 $169 = $f + 60 | 0;
 HEAP32[$169 >> 2] = $168;
 HEAP32[$f + 32 >> 2] = $163;
 L104 : do if (($163 | 0) > 0) {
  HEAP32[$168 >> 2] = 0;
  if (($163 | 0) != 1) {
   $173 = 1;
   do {
    HEAP32[(HEAP32[$169 >> 2] | 0) + ($173 * 12 | 0) >> 2] = 0;
    $173 = $173 + 1 | 0;
   } while (($173 | 0) != ($163 | 0));
  }
  $i$110$i = 0;
  while (1) {
   $175 = _LoadString($S) | 0;
   HEAP32[(HEAP32[$169 >> 2] | 0) + ($i$110$i * 12 | 0) >> 2] = $175;
   if (_luaZ_read(HEAP32[$3 >> 2] | 0, $x$i$i35, 4) | 0) {
    label = 75;
    break;
   }
   HEAP32[(HEAP32[$169 >> 2] | 0) + ($i$110$i * 12 | 0) + 4 >> 2] = HEAP32[$x$i$i35 >> 2];
   if (_luaZ_read(HEAP32[$3 >> 2] | 0, $x$i$i35, 4) | 0) {
    label = 77;
    break;
   }
   HEAP32[(HEAP32[$169 >> 2] | 0) + ($i$110$i * 12 | 0) + 8 >> 2] = HEAP32[$x$i$i35 >> 2];
   $i$110$i = $i$110$i + 1 | 0;
   if (($i$110$i | 0) >= ($163 | 0)) break L104;
  }
  if ((label | 0) == 75) _error($S, 75728); else if ((label | 0) == 77) _error($S, 75728);
 } while (0);
 if (_luaZ_read(HEAP32[$3 >> 2] | 0, $x$i$i35, 4) | 0) _error($S, 75728);
 $195 = HEAP32[$x$i$i35 >> 2] | 0;
 if (($195 | 0) > 0) $i$29$i = 0; else {
  STACKTOP = sp;
  return;
 }
 do {
  $197 = _LoadString($S) | 0;
  HEAP32[(HEAP32[$102 >> 2] | 0) + ($i$29$i << 3) >> 2] = $197;
  $i$29$i = $i$29$i + 1 | 0;
 } while (($i$29$i | 0) != ($195 | 0));
 STACKTOP = sp;
 return;
}

function __ZN8b2Island8SolveTOIERK10b2TimeStepii($this, $subStep, $toiIndexA, $toiIndexB) {
 $this = $this | 0;
 $subStep = $subStep | 0;
 $toiIndexA = $toiIndexA | 0;
 $toiIndexB = $toiIndexB | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $101 = 0, $102 = 0, $113 = 0, $119 = 0.0, $122 = 0, $123 = 0, $124 = 0, $130 = 0.0, $131 = 0.0, $133 = 0.0, $134 = 0, $136 = 0, $14 = 0, $142 = 0.0, $143 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $150 = 0.0, $153 = 0.0, $156 = 0.0, $162 = 0.0, $165 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0, $182 = 0.0, $183 = 0.0, $184 = 0, $19 = 0, $192 = 0, $194 = 0, $20 = 0, $200 = 0, $205 = 0.0, $207 = 0.0, $211 = 0.0, $214 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0, $232 = 0, $233 = 0, $238 = 0, $241 = 0, $243 = 0, $252 = 0, $31 = 0, $36 = 0, $37 = 0, $43 = 0, $48 = 0, $5 = 0, $51 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $68 = 0, $7 = 0, $75 = 0, $80 = 0, $81 = 0, $85 = 0, $88 = 0, $96 = 0, $contactSolver = 0, $contactSolverDef = 0, $i$017 = 0, $i$02$i = 0, $i1$012 = 0, $i2$07 = 0, $i3$03 = 0, $impulse$i = 0, $j$01$i = 0, $w$0 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $impulse$i = sp + 96 | 0;
 $contactSolverDef = sp + 52 | 0;
 $contactSolver = sp;
 $0 = $this + 28 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (($1 | 0) <= ($toiIndexA | 0)) ___assert_fail(92488, 92512, 386, 92568);
 if (($1 | 0) <= ($toiIndexB | 0)) ___assert_fail(92584, 92512, 387, 92568);
 if (($1 | 0) > 0) {
  $5 = $this + 8 | 0;
  $6 = $this + 20 | 0;
  $7 = $this + 24 | 0;
  $i$017 = 0;
  do {
   $10 = HEAP32[(HEAP32[$5 >> 2] | 0) + ($i$017 << 2) >> 2] | 0;
   $14 = $10 + 44 | 0;
   $19 = HEAP32[$14 + 4 >> 2] | 0;
   $20 = (HEAP32[$6 >> 2] | 0) + ($i$017 * 12 | 0) | 0;
   HEAP32[$20 >> 2] = HEAP32[$14 >> 2];
   HEAP32[$20 + 4 >> 2] = $19;
   HEAPF32[(HEAP32[$6 >> 2] | 0) + ($i$017 * 12 | 0) + 8 >> 2] = +HEAPF32[$10 + 56 >> 2];
   $31 = $10 + 64 | 0;
   $36 = HEAP32[$31 + 4 >> 2] | 0;
   $37 = (HEAP32[$7 >> 2] | 0) + ($i$017 * 12 | 0) | 0;
   HEAP32[$37 >> 2] = HEAP32[$31 >> 2];
   HEAP32[$37 + 4 >> 2] = $36;
   $43 = HEAP32[$7 >> 2] | 0;
   HEAPF32[$43 + ($i$017 * 12 | 0) + 8 >> 2] = +HEAPF32[$10 + 72 >> 2];
   $i$017 = $i$017 + 1 | 0;
  } while (($i$017 | 0) < (HEAP32[$0 >> 2] | 0));
  $$pre$phiZ2D = $6;
  $60 = $43;
 } else {
  $$pre$phiZ2D = $this + 20 | 0;
  $60 = HEAP32[$this + 24 >> 2] | 0;
 }
 $48 = $this + 12 | 0;
 HEAP32[$contactSolverDef + 24 >> 2] = HEAP32[$48 >> 2];
 $51 = $this + 36 | 0;
 HEAP32[$contactSolverDef + 28 >> 2] = HEAP32[$51 >> 2];
 HEAP32[$contactSolverDef + 40 >> 2] = HEAP32[$this >> 2];
 HEAP32[$contactSolverDef + 0 >> 2] = HEAP32[$subStep + 0 >> 2];
 HEAP32[$contactSolverDef + 4 >> 2] = HEAP32[$subStep + 4 >> 2];
 HEAP32[$contactSolverDef + 8 >> 2] = HEAP32[$subStep + 8 >> 2];
 HEAP32[$contactSolverDef + 12 >> 2] = HEAP32[$subStep + 12 >> 2];
 HEAP32[$contactSolverDef + 16 >> 2] = HEAP32[$subStep + 16 >> 2];
 HEAP32[$contactSolverDef + 20 >> 2] = HEAP32[$subStep + 20 >> 2];
 HEAP32[$contactSolverDef + 32 >> 2] = HEAP32[$$pre$phiZ2D >> 2];
 $58 = $this + 24 | 0;
 HEAP32[$contactSolverDef + 36 >> 2] = $60;
 __ZN15b2ContactSolverC2EP18b2ContactSolverDef($contactSolver, $contactSolverDef);
 $61 = $subStep + 16 | 0;
 L13 : do if ((HEAP32[$61 >> 2] | 0) > 0) {
  $i1$012 = 0;
  do {
   $i1$012 = $i1$012 + 1 | 0;
   if (__ZN15b2ContactSolver27SolveTOIPositionConstraintsEii($contactSolver, $toiIndexA, $toiIndexB) | 0) break L13;
  } while (($i1$012 | 0) < (HEAP32[$61 >> 2] | 0));
 } while (0);
 $68 = $this + 8 | 0;
 $75 = (HEAP32[$$pre$phiZ2D >> 2] | 0) + ($toiIndexA * 12 | 0) | 0;
 $80 = HEAP32[$75 + 4 >> 2] | 0;
 $81 = (HEAP32[(HEAP32[$68 >> 2] | 0) + ($toiIndexA << 2) >> 2] | 0) + 36 | 0;
 HEAP32[$81 >> 2] = HEAP32[$75 >> 2];
 HEAP32[$81 + 4 >> 2] = $80;
 $85 = HEAP32[$$pre$phiZ2D >> 2] | 0;
 $88 = HEAP32[$68 >> 2] | 0;
 HEAPF32[(HEAP32[$88 + ($toiIndexA << 2) >> 2] | 0) + 52 >> 2] = +HEAPF32[$85 + ($toiIndexA * 12 | 0) + 8 >> 2];
 $96 = $85 + ($toiIndexB * 12 | 0) | 0;
 $101 = HEAP32[$96 + 4 >> 2] | 0;
 $102 = (HEAP32[$88 + ($toiIndexB << 2) >> 2] | 0) + 36 | 0;
 HEAP32[$102 >> 2] = HEAP32[$96 >> 2];
 HEAP32[$102 + 4 >> 2] = $101;
 HEAPF32[(HEAP32[(HEAP32[$68 >> 2] | 0) + ($toiIndexB << 2) >> 2] | 0) + 52 >> 2] = +HEAPF32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + ($toiIndexB * 12 | 0) + 8 >> 2];
 __ZN15b2ContactSolver29InitializeVelocityConstraintsEv($contactSolver);
 $113 = $subStep + 12 | 0;
 if ((HEAP32[$113 >> 2] | 0) > 0) {
  $i2$07 = 0;
  do {
   __ZN15b2ContactSolver24SolveVelocityConstraintsEv($contactSolver);
   $i2$07 = $i2$07 + 1 | 0;
  } while (($i2$07 | 0) < (HEAP32[$113 >> 2] | 0));
 }
 $119 = +HEAPF32[$subStep >> 2];
 if ((HEAP32[$0 >> 2] | 0) > 0) {
  $i3$03 = 0;
  do {
   $122 = HEAP32[$$pre$phiZ2D >> 2] | 0;
   $123 = $122 + ($i3$03 * 12 | 0) | 0;
   $124 = $123;
   $130 = +HEAPF32[$124 >> 2];
   $131 = +HEAPF32[$124 + 4 >> 2];
   $133 = +HEAPF32[$122 + ($i3$03 * 12 | 0) + 8 >> 2];
   $134 = HEAP32[$58 >> 2] | 0;
   $136 = $134 + ($i3$03 * 12 | 0) | 0;
   $142 = +HEAPF32[$136 >> 2];
   $143 = +HEAPF32[$136 + 4 >> 2];
   $145 = +HEAPF32[$134 + ($i3$03 * 12 | 0) + 8 >> 2];
   $146 = $119 * $142;
   $147 = $119 * $143;
   $150 = $146 * $146 + $147 * $147;
   if ($150 > 4.0) {
    $153 = 2.0 / +Math_sqrt(+$150);
    $165 = $142 * $153;
    $167 = $143 * $153;
   } else {
    $165 = $142;
    $167 = $143;
   }
   $156 = $119 * $145;
   if ($156 * $156 > 2.4674012660980225) {
    if ($156 > 0.0) $162 = $156; else $162 = -$156;
    $w$0 = $145 * (1.5707963705062866 / $162);
   } else $w$0 = $145;
   $168 = $130 + $119 * $165;
   $169 = $131 + $119 * $167;
   $171 = $133 + $119 * $w$0;
   $172 = +$168;
   $173 = +$169;
   $174 = $123;
   HEAPF32[$174 >> 2] = $172;
   HEAPF32[$174 + 4 >> 2] = $173;
   HEAPF32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + ($i3$03 * 12 | 0) + 8 >> 2] = $171;
   $182 = +$165;
   $183 = +$167;
   $184 = (HEAP32[$58 >> 2] | 0) + ($i3$03 * 12 | 0) | 0;
   HEAPF32[$184 >> 2] = $182;
   HEAPF32[$184 + 4 >> 2] = $183;
   HEAPF32[(HEAP32[$58 >> 2] | 0) + ($i3$03 * 12 | 0) + 8 >> 2] = $w$0;
   $192 = HEAP32[(HEAP32[$68 >> 2] | 0) + ($i3$03 << 2) >> 2] | 0;
   $194 = $192 + 44 | 0;
   HEAPF32[$194 >> 2] = $172;
   HEAPF32[$194 + 4 >> 2] = $173;
   HEAPF32[$192 + 56 >> 2] = $171;
   $200 = $192 + 64 | 0;
   HEAPF32[$200 >> 2] = $182;
   HEAPF32[$200 + 4 >> 2] = $183;
   HEAPF32[$192 + 72 >> 2] = $w$0;
   $205 = +Math_sin(+$171);
   HEAPF32[$192 + 20 >> 2] = $205;
   $207 = +Math_cos(+$171);
   HEAPF32[$192 + 24 >> 2] = $207;
   $211 = +HEAPF32[$192 + 28 >> 2];
   $214 = +HEAPF32[$192 + 32 >> 2];
   $222 = +($168 - ($207 * $211 - $205 * $214));
   $223 = +($169 - ($205 * $211 + $207 * $214));
   $224 = $192 + 12 | 0;
   HEAPF32[$224 >> 2] = $222;
   HEAPF32[$224 + 4 >> 2] = $223;
   $i3$03 = $i3$03 + 1 | 0;
  } while (($i3$03 | 0) < (HEAP32[$0 >> 2] | 0));
 }
 $232 = HEAP32[$contactSolver + 40 >> 2] | 0;
 $233 = $this + 4 | 0;
 if (!(HEAP32[$233 >> 2] | 0)) {
  __ZN15b2ContactSolverD2Ev($contactSolver);
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$51 >> 2] | 0) <= 0) {
  __ZN15b2ContactSolverD2Ev($contactSolver);
  STACKTOP = sp;
  return;
 }
 $238 = $impulse$i + 16 | 0;
 $i$02$i = 0;
 do {
  $241 = HEAP32[(HEAP32[$48 >> 2] | 0) + ($i$02$i << 2) >> 2] | 0;
  $243 = HEAP32[$232 + ($i$02$i * 156 | 0) + 148 >> 2] | 0;
  HEAP32[$238 >> 2] = $243;
  if (($243 | 0) > 0) {
   $j$01$i = 0;
   do {
    HEAPF32[$impulse$i + ($j$01$i << 2) >> 2] = +HEAPF32[$232 + ($i$02$i * 156 | 0) + ($j$01$i * 36 | 0) + 16 >> 2];
    HEAPF32[$impulse$i + ($j$01$i << 2) + 8 >> 2] = +HEAPF32[$232 + ($i$02$i * 156 | 0) + ($j$01$i * 36 | 0) + 20 >> 2];
    $j$01$i = $j$01$i + 1 | 0;
   } while (($j$01$i | 0) != ($243 | 0));
  }
  $252 = HEAP32[$233 >> 2] | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$252 >> 2] | 0) + 20 >> 2] & 15]($252, $241, $impulse$i);
  $i$02$i = $i$02$i + 1 | 0;
 } while (($i$02$i | 0) < (HEAP32[$51 >> 2] | 0));
 __ZN15b2ContactSolverD2Ev($contactSolver);
 STACKTOP = sp;
 return;
}

function __ZN20b2SeparationFunction10InitializeEPK14b2SimplexCachePK15b2DistanceProxyRK7b2SweepS5_S8_f($this, $cache, $proxyA, $sweepA, $proxyB, $sweepB, $t1) {
 $this = $this | 0;
 $cache = $cache | 0;
 $proxyA = $proxyA | 0;
 $sweepA = $sweepA | 0;
 $proxyB = $proxyB | 0;
 $sweepB = $sweepB | 0;
 $t1 = +$t1;
 var $$0 = 0.0, $104 = 0, $110 = 0.0, $111 = 0.0, $128 = 0, $129 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0, $140 = 0.0, $143 = 0.0, $146 = 0, $148 = 0, $151 = 0, $154 = 0, $156 = 0, $159 = 0, $161 = 0, $167 = 0.0, $168 = 0.0, $171 = 0, $174 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0, $195 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0, $200 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0, $213 = 0, $224 = 0.0, $226 = 0.0, $236 = 0, $242 = 0.0, $243 = 0.0, $256 = 0.0, $260 = 0.0, $261 = 0.0, $262 = 0, $268 = 0, $270 = 0, $273 = 0, $275 = 0, $28 = 0.0, $281 = 0.0, $282 = 0.0, $284 = 0, $287 = 0, $29 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0, $296 = 0.0, $297 = 0.0, $298 = 0.0, $299 = 0.0, $30 = 0.0, $300 = 0.0, $301 = 0, $308 = 0.0, $31 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $320 = 0.0, $321 = 0, $327 = 0, $338 = 0.0, $34 = 0.0, $340 = 0.0, $350 = 0, $356 = 0.0, $357 = 0.0, $370 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0, $40 = 0.0, $41 = 0.0, $5 = 0, $6 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $68 = 0.0, $7 = 0.0, $74 = 0.0, $75 = 0.0, $80 = 0, $87 = 0, $93 = 0.0, $94 = 0.0, $97 = 0, dest = 0, src = 0, stop = 0;
 HEAP32[$this >> 2] = $proxyA;
 HEAP32[$this + 4 >> 2] = $proxyB;
 $2 = HEAP16[$cache + 4 >> 1] | 0;
 if (!($2 << 16 >> 16 != 0 & ($2 & 65535) < 3)) ___assert_fail(90928, 90688, 52, 93840);
 $5 = $this + 8 | 0;
 dest = $5 + 0 | 0;
 src = $sweepA + 0 | 0;
 stop = dest + 36 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $6 = $this + 44 | 0;
 dest = $6 + 0 | 0;
 src = $sweepB + 0 | 0;
 stop = dest + 36 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $7 = 1.0 - $t1;
 $28 = $7 * +HEAPF32[$this + 32 >> 2] + +HEAPF32[$this + 36 >> 2] * $t1;
 $29 = +Math_sin(+$28);
 $30 = +Math_cos(+$28);
 $31 = +HEAPF32[$5 >> 2];
 $34 = +HEAPF32[$this + 12 >> 2];
 $40 = $7 * +HEAPF32[$this + 16 >> 2] + +HEAPF32[$this + 24 >> 2] * $t1 - ($30 * $31 - $29 * $34);
 $41 = $7 * +HEAPF32[$this + 20 >> 2] + +HEAPF32[$this + 28 >> 2] * $t1 - ($29 * $31 + $30 * $34);
 $62 = $7 * +HEAPF32[$this + 68 >> 2] + +HEAPF32[$this + 72 >> 2] * $t1;
 $63 = +Math_sin(+$62);
 $64 = +Math_cos(+$62);
 $65 = +HEAPF32[$6 >> 2];
 $68 = +HEAPF32[$this + 48 >> 2];
 $74 = $7 * +HEAPF32[$this + 52 >> 2] + +HEAPF32[$this + 60 >> 2] * $t1 - ($64 * $65 - $63 * $68);
 $75 = $7 * +HEAPF32[$this + 56 >> 2] + +HEAPF32[$this + 64 >> 2] * $t1 - ($63 * $65 + $64 * $68);
 if ($2 << 16 >> 16 == 1) {
  HEAP32[$this + 80 >> 2] = 0;
  $80 = HEAPU8[$cache + 6 >> 0] | 0;
  if ((HEAP32[$proxyA + 20 >> 2] | 0) <= ($80 | 0)) ___assert_fail(90792, 90824, 103, 90888);
  $87 = (HEAP32[$proxyA + 16 >> 2] | 0) + ($80 << 3) | 0;
  $93 = +HEAPF32[$87 >> 2];
  $94 = +HEAPF32[$87 + 4 >> 2];
  $97 = HEAPU8[$cache + 9 >> 0] | 0;
  if ((HEAP32[$proxyB + 20 >> 2] | 0) <= ($97 | 0)) ___assert_fail(90792, 90824, 103, 90888);
  $104 = (HEAP32[$proxyB + 16 >> 2] | 0) + ($97 << 3) | 0;
  $110 = +HEAPF32[$104 >> 2];
  $111 = +HEAPF32[$104 + 4 >> 2];
  $128 = $this + 92 | 0;
  $129 = $74 + ($64 * $110 - $63 * $111) - ($40 + ($30 * $93 - $29 * $94));
  $130 = $75 + ($63 * $110 + $64 * $111) - ($41 + ($29 * $93 + $30 * $94));
  $131 = +$129;
  $132 = +$130;
  $133 = $128;
  HEAPF32[$133 >> 2] = $131;
  HEAPF32[$133 + 4 >> 2] = $132;
  $140 = +Math_sqrt(+($129 * $129 + $130 * $130));
  if ($140 < 1.1920928955078125e-07) {
   $$0 = 0.0;
   return +$$0;
  }
  $143 = 1.0 / $140;
  HEAPF32[$128 >> 2] = $129 * $143;
  HEAPF32[$this + 96 >> 2] = $130 * $143;
  $$0 = $140;
  return +$$0;
 }
 $146 = $cache + 6 | 0;
 $148 = $cache + 7 | 0;
 $151 = $this + 80 | 0;
 if ((HEAP8[$146 >> 0] | 0) == (HEAP8[$148 >> 0] | 0)) {
  HEAP32[$151 >> 2] = 2;
  $154 = HEAPU8[$cache + 9 >> 0] | 0;
  $156 = HEAP32[$proxyB + 20 >> 2] | 0;
  if (($156 | 0) <= ($154 | 0)) ___assert_fail(90792, 90824, 103, 90888);
  $159 = HEAP32[$proxyB + 16 >> 2] | 0;
  $161 = $159 + ($154 << 3) | 0;
  $167 = +HEAPF32[$161 >> 2];
  $168 = +HEAPF32[$161 + 4 >> 2];
  $171 = HEAPU8[$cache + 10 >> 0] | 0;
  if (($156 | 0) <= ($171 | 0)) ___assert_fail(90792, 90824, 103, 90888);
  $174 = $159 + ($171 << 3) | 0;
  $180 = +HEAPF32[$174 >> 2];
  $181 = +HEAPF32[$174 + 4 >> 2];
  $182 = $this + 92 | 0;
  $183 = $180 - $167;
  $184 = $181 - $168;
  $185 = -$183;
  $186 = +$184;
  $187 = +$185;
  $188 = $182;
  HEAPF32[$188 >> 2] = $186;
  HEAPF32[$188 + 4 >> 2] = $187;
  $195 = +Math_sqrt(+($184 * $184 + $183 * $183));
  if ($195 < 1.1920928955078125e-07) {
   $224 = $185;
   $226 = $184;
  } else {
   $198 = 1.0 / $195;
   $199 = $184 * $198;
   HEAPF32[$182 >> 2] = $199;
   $200 = $198 * $185;
   HEAPF32[$this + 96 >> 2] = $200;
   $224 = $200;
   $226 = $199;
  }
  $204 = ($167 + $180) * .5;
  $205 = ($168 + $181) * .5;
  $206 = +$204;
  $207 = +$205;
  $208 = $this + 84 | 0;
  HEAPF32[$208 >> 2] = $206;
  HEAPF32[$208 + 4 >> 2] = $207;
  $213 = HEAPU8[$146 >> 0] | 0;
  if ((HEAP32[$proxyA + 20 >> 2] | 0) <= ($213 | 0)) ___assert_fail(90792, 90824, 103, 90888);
  $236 = (HEAP32[$proxyA + 16 >> 2] | 0) + ($213 << 3) | 0;
  $242 = +HEAPF32[$236 >> 2];
  $243 = +HEAPF32[$236 + 4 >> 2];
  $256 = ($64 * $226 - $63 * $224) * ($40 + ($30 * $242 - $29 * $243) - ($74 + ($64 * $204 - $63 * $205))) + ($63 * $226 + $64 * $224) * ($41 + ($29 * $242 + $30 * $243) - ($75 + ($63 * $204 + $64 * $205)));
  if (!($256 < 0.0)) {
   $$0 = $256;
   return +$$0;
  }
  $260 = +-$226;
  $261 = +-$224;
  $262 = $182;
  HEAPF32[$262 >> 2] = $260;
  HEAPF32[$262 + 4 >> 2] = $261;
  $$0 = -$256;
  return +$$0;
 } else {
  HEAP32[$151 >> 2] = 1;
  $268 = HEAPU8[$146 >> 0] | 0;
  $270 = HEAP32[$proxyA + 20 >> 2] | 0;
  if (($270 | 0) <= ($268 | 0)) ___assert_fail(90792, 90824, 103, 90888);
  $273 = HEAP32[$proxyA + 16 >> 2] | 0;
  $275 = $273 + ($268 << 3) | 0;
  $281 = +HEAPF32[$275 >> 2];
  $282 = +HEAPF32[$275 + 4 >> 2];
  $284 = HEAPU8[$148 >> 0] | 0;
  if (($270 | 0) <= ($284 | 0)) ___assert_fail(90792, 90824, 103, 90888);
  $287 = $273 + ($284 << 3) | 0;
  $293 = +HEAPF32[$287 >> 2];
  $294 = +HEAPF32[$287 + 4 >> 2];
  $295 = $this + 92 | 0;
  $296 = $293 - $281;
  $297 = $294 - $282;
  $298 = -$296;
  $299 = +$297;
  $300 = +$298;
  $301 = $295;
  HEAPF32[$301 >> 2] = $299;
  HEAPF32[$301 + 4 >> 2] = $300;
  $308 = +Math_sqrt(+($297 * $297 + $296 * $296));
  if ($308 < 1.1920928955078125e-07) {
   $338 = $298;
   $340 = $297;
  } else {
   $311 = 1.0 / $308;
   $312 = $297 * $311;
   HEAPF32[$295 >> 2] = $312;
   $313 = $311 * $298;
   HEAPF32[$this + 96 >> 2] = $313;
   $338 = $313;
   $340 = $312;
  }
  $317 = ($281 + $293) * .5;
  $318 = ($282 + $294) * .5;
  $319 = +$317;
  $320 = +$318;
  $321 = $this + 84 | 0;
  HEAPF32[$321 >> 2] = $319;
  HEAPF32[$321 + 4 >> 2] = $320;
  $327 = HEAPU8[$cache + 9 >> 0] | 0;
  if ((HEAP32[$proxyB + 20 >> 2] | 0) <= ($327 | 0)) ___assert_fail(90792, 90824, 103, 90888);
  $350 = (HEAP32[$proxyB + 16 >> 2] | 0) + ($327 << 3) | 0;
  $356 = +HEAPF32[$350 >> 2];
  $357 = +HEAPF32[$350 + 4 >> 2];
  $370 = ($30 * $340 - $29 * $338) * ($74 + ($64 * $356 - $63 * $357) - ($40 + ($30 * $317 - $29 * $318))) + ($29 * $340 + $30 * $338) * ($75 + ($63 * $356 + $64 * $357) - ($41 + ($29 * $317 + $30 * $318)));
  if (!($370 < 0.0)) {
   $$0 = $370;
   return +$$0;
  }
  $374 = +-$340;
  $375 = +-$338;
  $376 = $295;
  HEAPF32[$376 >> 2] = $374;
  HEAPF32[$376 + 4 >> 2] = $375;
  $$0 = -$370;
  return +$$0;
 }
 return +(0.0);
}

function __ZN15b2ContactSolver29InitializeVelocityConstraintsEv($this) {
 $this = $this | 0;
 var $0 = 0, $10 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $11 = 0, $115 = 0.0, $116 = 0.0, $117 = 0, $12 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $135 = 0, $136 = 0, $141 = 0, $142 = 0, $146 = 0, $147 = 0, $149 = 0, $150 = 0.0, $151 = 0, $153 = 0, $155 = 0.0, $156 = 0, $159 = 0.0, $160 = 0.0, $161 = 0, $167 = 0.0, $170 = 0.0, $171 = 0.0, $172 = 0, $176 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $182 = 0.0, $185 = 0.0, $187 = 0.0, $193 = 0.0, $197 = 0.0, $198 = 0.0, $20 = 0, $200 = 0.0, $203 = 0.0, $206 = 0.0, $212 = 0.0, $216 = 0.0, $217 = 0, $22 = 0, $232 = 0.0, $24 = 0.0, $242 = 0.0, $246 = 0.0, $248 = 0.0, $255 = 0.0, $26 = 0.0, $262 = 0.0, $269 = 0.0, $270 = 0.0, $271 = 0.0, $274 = 0.0, $276 = 0.0, $28 = 0.0, $282 = 0.0, $286 = 0.0, $290 = 0.0, $3 = 0, $30 = 0.0, $301 = 0.0, $32 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $41 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $51 = 0, $57 = 0.0, $58 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $63 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $72 = 0.0, $74 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $83 = 0.0, $85 = 0, $9 = 0, $91 = 0.0, $92 = 0.0, $94 = 0.0, $det$0$i = 0.0, $i$033 = 0, $j$032 = 0, $worldManifold = 0, $xfA = 0, $xfB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $xfA = sp + 48 | 0;
 $xfB = sp + 32 | 0;
 $worldManifold = sp;
 $0 = $this + 48 | 0;
 if ((HEAP32[$0 >> 2] | 0) <= 0) {
  STACKTOP = sp;
  return;
 }
 $3 = $this + 40 | 0;
 $4 = $this + 36 | 0;
 $5 = $this + 44 | 0;
 $6 = $this + 24 | 0;
 $7 = $this + 28 | 0;
 $8 = $xfA + 8 | 0;
 $9 = $xfA + 12 | 0;
 $10 = $xfB + 8 | 0;
 $11 = $xfB + 12 | 0;
 $i$033 = 0;
 while (1) {
  $12 = HEAP32[$3 >> 2] | 0;
  $13 = HEAP32[$4 >> 2] | 0;
  $18 = HEAP32[(HEAP32[$5 >> 2] | 0) + (HEAP32[$12 + ($i$033 * 156 | 0) + 152 >> 2] << 2) >> 2] | 0;
  $20 = HEAP32[$12 + ($i$033 * 156 | 0) + 112 >> 2] | 0;
  $22 = HEAP32[$12 + ($i$033 * 156 | 0) + 116 >> 2] | 0;
  $24 = +HEAPF32[$12 + ($i$033 * 156 | 0) + 120 >> 2];
  $26 = +HEAPF32[$12 + ($i$033 * 156 | 0) + 124 >> 2];
  $28 = +HEAPF32[$12 + ($i$033 * 156 | 0) + 128 >> 2];
  $30 = +HEAPF32[$12 + ($i$033 * 156 | 0) + 132 >> 2];
  $32 = $13 + ($i$033 * 88 | 0) + 48 | 0;
  $38 = +HEAPF32[$32 >> 2];
  $39 = +HEAPF32[$32 + 4 >> 2];
  $41 = $13 + ($i$033 * 88 | 0) + 56 | 0;
  $47 = +HEAPF32[$41 >> 2];
  $48 = +HEAPF32[$41 + 4 >> 2];
  $49 = HEAP32[$6 >> 2] | 0;
  $51 = $49 + ($20 * 12 | 0) | 0;
  $57 = +HEAPF32[$51 >> 2];
  $58 = +HEAPF32[$51 + 4 >> 2];
  $60 = +HEAPF32[$49 + ($20 * 12 | 0) + 8 >> 2];
  $61 = HEAP32[$7 >> 2] | 0;
  $63 = $61 + ($20 * 12 | 0) | 0;
  $69 = +HEAPF32[$63 >> 2];
  $70 = +HEAPF32[$63 + 4 >> 2];
  $72 = +HEAPF32[$61 + ($20 * 12 | 0) + 8 >> 2];
  $74 = $49 + ($22 * 12 | 0) | 0;
  $80 = +HEAPF32[$74 >> 2];
  $81 = +HEAPF32[$74 + 4 >> 2];
  $83 = +HEAPF32[$49 + ($22 * 12 | 0) + 8 >> 2];
  $85 = $61 + ($22 * 12 | 0) | 0;
  $91 = +HEAPF32[$85 >> 2];
  $92 = +HEAPF32[$85 + 4 >> 2];
  $94 = +HEAPF32[$61 + ($22 * 12 | 0) + 8 >> 2];
  if ((HEAP32[$18 + 124 >> 2] | 0) <= 0) {
   label = 4;
   break;
  }
  $101 = +HEAPF32[$13 + ($i$033 * 88 | 0) + 80 >> 2];
  $102 = +HEAPF32[$13 + ($i$033 * 88 | 0) + 76 >> 2];
  $103 = +Math_sin(+$60);
  HEAPF32[$8 >> 2] = $103;
  $104 = +Math_cos(+$60);
  HEAPF32[$9 >> 2] = $104;
  $105 = +Math_sin(+$83);
  HEAPF32[$10 >> 2] = $105;
  $106 = +Math_cos(+$83);
  HEAPF32[$11 >> 2] = $106;
  $115 = +($57 - ($38 * $104 - $39 * $103));
  $116 = +($58 - ($39 * $104 + $38 * $103));
  $117 = $xfA;
  HEAPF32[$117 >> 2] = $115;
  HEAPF32[$117 + 4 >> 2] = $116;
  $129 = +($80 - ($47 * $106 - $48 * $105));
  $130 = +($81 - ($48 * $106 + $47 * $105));
  $131 = $xfB;
  HEAPF32[$131 >> 2] = $129;
  HEAPF32[$131 + 4 >> 2] = $130;
  __ZN15b2WorldManifold10InitializeEPK10b2ManifoldRK11b2TransformfS5_f($worldManifold, $18 + 64 | 0, $xfA, $102, $xfB, $101);
  $135 = $12 + ($i$033 * 156 | 0) + 72 | 0;
  $136 = $worldManifold;
  $141 = HEAP32[$136 + 4 >> 2] | 0;
  $142 = $135;
  HEAP32[$142 >> 2] = HEAP32[$136 >> 2];
  HEAP32[$142 + 4 >> 2] = $141;
  $146 = $12 + ($i$033 * 156 | 0) + 148 | 0;
  $147 = HEAP32[$146 >> 2] | 0;
  do if (($147 | 0) > 0) {
   $149 = $12 + ($i$033 * 156 | 0) + 76 | 0;
   $150 = $24 + $26;
   $151 = $12 + ($i$033 * 156 | 0) + 140 | 0;
   $j$032 = 0;
   do {
    $153 = $worldManifold + ($j$032 << 3) + 8 | 0;
    $155 = +HEAPF32[$153 >> 2] - $57;
    $156 = $worldManifold + ($j$032 << 3) + 12 | 0;
    $159 = +$155;
    $160 = +(+HEAPF32[$156 >> 2] - $58);
    $161 = $12 + ($i$033 * 156 | 0) + ($j$032 * 36 | 0) | 0;
    HEAPF32[$161 >> 2] = $159;
    HEAPF32[$161 + 4 >> 2] = $160;
    $167 = +HEAPF32[$153 >> 2] - $80;
    $170 = +$167;
    $171 = +(+HEAPF32[$156 >> 2] - $81);
    $172 = $12 + ($i$033 * 156 | 0) + ($j$032 * 36 | 0) + 8 | 0;
    HEAPF32[$172 >> 2] = $170;
    HEAPF32[$172 + 4 >> 2] = $171;
    $176 = +HEAPF32[$149 >> 2];
    $179 = +HEAPF32[$12 + ($i$033 * 156 | 0) + ($j$032 * 36 | 0) + 4 >> 2];
    $180 = +HEAPF32[$135 >> 2];
    $182 = $155 * $176 - $179 * $180;
    $185 = +HEAPF32[$12 + ($i$033 * 156 | 0) + ($j$032 * 36 | 0) + 12 >> 2];
    $187 = $176 * $167 - $180 * $185;
    $193 = $150 + $182 * ($28 * $182) + $187 * ($30 * $187);
    if ($193 > 0.0) $197 = 1.0 / $193; else $197 = 0.0;
    HEAPF32[$12 + ($i$033 * 156 | 0) + ($j$032 * 36 | 0) + 24 >> 2] = $197;
    $198 = +HEAPF32[$149 >> 2];
    $200 = -+HEAPF32[$135 >> 2];
    $203 = $155 * $200 - $198 * $179;
    $206 = $167 * $200 - $198 * $185;
    $212 = $150 + $203 * ($28 * $203) + $206 * ($30 * $206);
    if ($212 > 0.0) $216 = 1.0 / $212; else $216 = 0.0;
    HEAPF32[$12 + ($i$033 * 156 | 0) + ($j$032 * 36 | 0) + 28 >> 2] = $216;
    $217 = $12 + ($i$033 * 156 | 0) + ($j$032 * 36 | 0) + 32 | 0;
    HEAPF32[$217 >> 2] = 0.0;
    $232 = +HEAPF32[$135 >> 2] * ($91 - $94 * $185 - $69 + $72 * $179) + +HEAPF32[$149 >> 2] * ($92 + $94 * $167 - $70 - $72 * $155);
    if ($232 < -1.0) HEAPF32[$217 >> 2] = -($232 * +HEAPF32[$151 >> 2]);
    $j$032 = $j$032 + 1 | 0;
   } while (($j$032 | 0) != ($147 | 0));
   if ((HEAP32[$146 >> 2] | 0) == 2) {
    $242 = +HEAPF32[$12 + ($i$033 * 156 | 0) + 76 >> 2];
    $246 = +HEAPF32[$135 >> 2];
    $248 = +HEAPF32[$12 + ($i$033 * 156 | 0) >> 2] * $242 - +HEAPF32[$12 + ($i$033 * 156 | 0) + 4 >> 2] * $246;
    $255 = $242 * +HEAPF32[$12 + ($i$033 * 156 | 0) + 8 >> 2] - $246 * +HEAPF32[$12 + ($i$033 * 156 | 0) + 12 >> 2];
    $262 = $242 * +HEAPF32[$12 + ($i$033 * 156 | 0) + 36 >> 2] - $246 * +HEAPF32[$12 + ($i$033 * 156 | 0) + 40 >> 2];
    $269 = $242 * +HEAPF32[$12 + ($i$033 * 156 | 0) + 44 >> 2] - $246 * +HEAPF32[$12 + ($i$033 * 156 | 0) + 48 >> 2];
    $270 = $24 + $26;
    $271 = $28 * $248;
    $274 = $30 * $255;
    $276 = $270 + $248 * $271 + $255 * $274;
    $282 = $270 + $262 * ($28 * $262) + $269 * ($30 * $269);
    $286 = $270 + $271 * $262 + $274 * $269;
    $290 = $276 * $282 - $286 * $286;
    if (!($276 * $276 < $290 * 1.0e3)) {
     HEAP32[$146 >> 2] = 1;
     break;
    }
    HEAPF32[$12 + ($i$033 * 156 | 0) + 96 >> 2] = $276;
    HEAPF32[$12 + ($i$033 * 156 | 0) + 100 >> 2] = $286;
    HEAPF32[$12 + ($i$033 * 156 | 0) + 104 >> 2] = $286;
    HEAPF32[$12 + ($i$033 * 156 | 0) + 108 >> 2] = $282;
    if ($290 != 0.0) $det$0$i = 1.0 / $290; else $det$0$i = $290;
    $301 = -($det$0$i * $286);
    HEAPF32[$12 + ($i$033 * 156 | 0) + 80 >> 2] = $282 * $det$0$i;
    HEAPF32[$12 + ($i$033 * 156 | 0) + 84 >> 2] = $301;
    HEAPF32[$12 + ($i$033 * 156 | 0) + 88 >> 2] = $301;
    HEAPF32[$12 + ($i$033 * 156 | 0) + 92 >> 2] = $276 * $det$0$i;
   }
  } while (0);
  $i$033 = $i$033 + 1 | 0;
  if (($i$033 | 0) >= (HEAP32[$0 >> 2] | 0)) {
   label = 21;
   break;
  }
 }
 if ((label | 0) == 4) ___assert_fail(93648, 93560, 169, 93680); else if ((label | 0) == 21) {
  STACKTOP = sp;
  return;
 }
}

function _lua_getinfo($L, $what, $ar) {
 $L = $L | 0;
 $what = $what | 0;
 $ar = $ar | 0;
 var $$$i$i = 0, $$0 = 0, $$02$i = 0, $103 = 0, $108 = 0, $110 = 0, $113 = 0, $121 = 0, $128 = 0, $130 = 0, $135 = 0, $136 = 0, $14 = 0, $148 = 0, $149 = 0, $152 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $44 = 0, $48 = 0, $53 = 0, $60 = 0, $62 = 0, $7 = 0, $74 = 0, $87 = 0, $91 = 0, $93 = 0, $99 = 0, $ci$0 = 0, $func$0 = 0, $i$01$i = 0, $status$0$lcssa$i = 0, $status$03$i = 0, $status$1$i = 0, $storemerge$ph$i = 0, $storemerge4$i = 0, $tm$0$i$i = 0, $v$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $v$i = sp;
 if ((HEAP8[$what >> 0] | 0) == 62) {
  $2 = $L + 8 | 0;
  $4 = (HEAP32[$2 >> 2] | 0) + -8 | 0;
  HEAP32[$2 >> 2] = $4;
  $$0 = $what + 1 | 0;
  $ci$0 = 0;
  $func$0 = $4;
 } else {
  $7 = HEAP32[$ar + 96 >> 2] | 0;
  $$0 = $what;
  $ci$0 = $7;
  $func$0 = HEAP32[$7 >> 2] | 0;
 }
 if ((HEAP32[$func$0 + 4 >> 2] & 31 | 0) == 6) $16 = HEAP32[$func$0 >> 2] | 0; else $16 = 0;
 $14 = HEAP8[$$0 >> 0] | 0;
 L8 : do if (!($14 << 24 >> 24)) $status$0$lcssa$i = 1; else {
  $17 = ($16 | 0) == 0;
  $18 = $ar + 16 | 0;
  $19 = $ar + 24 | 0;
  $20 = $ar + 28 | 0;
  $21 = $ar + 12 | 0;
  $22 = $ar + 36 | 0;
  $23 = $16 + 4 | 0;
  $24 = $16 + 12 | 0;
  $25 = ($ci$0 | 0) == 0;
  $26 = $ar + 20 | 0;
  $27 = $ci$0 + 34 | 0;
  $28 = $ci$0 + 20 | 0;
  $29 = $ar + 32 | 0;
  $30 = $ar + 34 | 0;
  $31 = $ar + 33 | 0;
  $32 = $16 + 6 | 0;
  $33 = $ar + 35 | 0;
  $34 = $ar + 8 | 0;
  $35 = $ar + 4 | 0;
  $36 = $ci$0 + 8 | 0;
  $37 = $L + 12 | 0;
  $$02$i = $$0;
  $39 = $14;
  $status$03$i = 1;
  while (1) {
   L12 : do switch ($39 << 24 >> 24 | 0) {
   case 108:
    {
     if ($25) $74 = -1; else if (!(HEAP8[$27 >> 0] & 2)) $74 = -1; else {
      $60 = HEAP32[(HEAP32[HEAP32[$ci$0 >> 2] >> 2] | 0) + 12 >> 2] | 0;
      $62 = HEAP32[$60 + 56 >> 2] | 0;
      if (!$62) $74 = -1; else $74 = HEAP32[$62 + (((HEAP32[$28 >> 2] | 0) - (HEAP32[$60 + 48 >> 2] | 0) >> 2) + -1 << 2) >> 2] | 0;
     }
     HEAP32[$26 >> 2] = $74;
     $status$1$i = $status$03$i;
     break;
    }
   case 110:
    {
     L20 : do if ($25) label = 44; else if (!(HEAP8[$27 >> 0] & 32)) {
      $91 = HEAP32[$36 >> 2] | 0;
      $93 = HEAP8[$91 + 34 >> 0] | 0;
      if (!($93 & 2)) label = 44; else {
       $99 = HEAP32[(HEAP32[HEAP32[$91 >> 2] >> 2] | 0) + 12 >> 2] | 0;
       $103 = HEAP32[$99 + 48 >> 2] | 0;
       $108 = ((HEAP32[$91 + 20 >> 2] | 0) - $103 >> 2) + -1 | 0;
       $110 = HEAP32[$103 + ($108 << 2) >> 2] | 0;
       L24 : do if (!($93 & 4)) {
        $113 = $110 & 63;
        do switch ($113 | 0) {
        case 37:
        case 36:
         {
          $121 = _getobjname($99, $108, $110 >>> 6 & 255, $35) | 0;
          HEAP32[$34 >> 2] = $121;
          if (!$121) break L20; else {
           $status$1$i = $status$03$i;
           break L12;
          }
          break;
         }
        case 26:
         {
          $tm$0$i$i = 19;
          break;
         }
        case 28:
         {
          $tm$0$i$i = 4;
          break;
         }
        case 29:
         {
          $tm$0$i$i = 22;
          break;
         }
        case 31:
         {
          $tm$0$i$i = 5;
          break;
         }
        case 32:
         {
          $tm$0$i$i = 20;
          break;
         }
        case 33:
         {
          $tm$0$i$i = 21;
          break;
         }
        case 41:
         {
          HEAP32[$35 >> 2] = 56104;
          $storemerge$ph$i = 56104;
          break L24;
          break;
         }
        case 10:
        case 8:
         {
          $tm$0$i$i = 1;
          break;
         }
        case 24:
        case 23:
        case 22:
        case 21:
        case 20:
        case 19:
        case 18:
        case 17:
        case 16:
        case 15:
        case 14:
        case 13:
         {
          $tm$0$i$i = $113 + -7 | 0;
          break;
         }
        case 25:
         {
          $tm$0$i$i = 18;
          break;
         }
        default:
         $tm$0$i$i = 0;
        } while (0);
        HEAP32[$35 >> 2] = (HEAP32[(HEAP32[$37 >> 2] | 0) + ($tm$0$i$i << 2) + 136 >> 2] | 0) + 24;
        $storemerge$ph$i = 56120;
       } else {
        HEAP32[$35 >> 2] = 59048;
        $storemerge$ph$i = 56096;
       } while (0);
       HEAP32[$34 >> 2] = $storemerge$ph$i;
       $status$1$i = $status$03$i;
       break L12;
      }
     } else label = 44; while (0);
     if ((label | 0) == 44) {
      label = 0;
      HEAP32[$34 >> 2] = 0;
     }
     HEAP32[$34 >> 2] = 62584;
     HEAP32[$35 >> 2] = 0;
     $status$1$i = $status$03$i;
     break;
    }
   case 102:
   case 76:
    {
     $status$1$i = $status$03$i;
     break;
    }
   case 83:
    {
     if ($17) label = 11; else if ((HEAP8[$23 >> 0] | 0) == 38) label = 11; else {
      $42 = HEAP32[$24 >> 2] | 0;
      $44 = HEAP32[$42 + 72 >> 2] | 0;
      $$$i$i = ($44 | 0) == 0 ? 56152 : $44 + 24 | 0;
      HEAP32[$18 >> 2] = $$$i$i;
      $48 = HEAP32[$42 + 36 >> 2] | 0;
      HEAP32[$19 >> 2] = $48;
      HEAP32[$20 >> 2] = HEAP32[$42 + 40 >> 2];
      $53 = $$$i$i;
      $storemerge4$i = ($48 | 0) == 0 ? 56160 : 56168;
     }
     if ((label | 0) == 11) {
      label = 0;
      HEAP32[$18 >> 2] = 56136;
      HEAP32[$19 >> 2] = -1;
      HEAP32[$20 >> 2] = -1;
      $53 = 56136;
      $storemerge4$i = 56144;
     }
     HEAP32[$21 >> 2] = $storemerge4$i;
     _luaO_chunkid($22, $53, 60);
     $status$1$i = $status$03$i;
     break;
    }
   case 116:
    {
     if ($25) $87 = 0; else $87 = HEAPU8[$27 >> 0] & 32;
     HEAP8[$33 >> 0] = $87;
     $status$1$i = $status$03$i;
     break;
    }
   case 117:
    {
     if ($17) HEAP8[$29 >> 0] = 0; else {
      HEAP8[$29 >> 0] = HEAP8[$32 >> 0] | 0;
      if ((HEAP8[$23 >> 0] | 0) != 38) {
       HEAP8[$30 >> 0] = HEAP8[(HEAP32[$24 >> 2] | 0) + 7 >> 0] | 0;
       HEAP8[$31 >> 0] = HEAP8[(HEAP32[$24 >> 2] | 0) + 6 >> 0] | 0;
       $status$1$i = $status$03$i;
       break L12;
      }
     }
     HEAP8[$30 >> 0] = 1;
     HEAP8[$31 >> 0] = 0;
     $status$1$i = $status$03$i;
     break;
    }
   default:
    $status$1$i = 0;
   } while (0);
   $$02$i = $$02$i + 1 | 0;
   $39 = HEAP8[$$02$i >> 0] | 0;
   if (!($39 << 24 >> 24)) {
    $status$0$lcssa$i = $status$1$i;
    break L8;
   } else $status$03$i = $status$1$i;
  }
 } while (0);
 if (_strchr($$0, 102) | 0) {
  $128 = $L + 8 | 0;
  $130 = $func$0;
  $135 = HEAP32[$130 + 4 >> 2] | 0;
  $136 = HEAP32[$128 >> 2] | 0;
  HEAP32[$136 >> 2] = HEAP32[$130 >> 2];
  HEAP32[$136 + 4 >> 2] = $135;
  HEAP32[$128 >> 2] = (HEAP32[$128 >> 2] | 0) + 8;
 }
 if (!(_strchr($$0, 76) | 0)) {
  STACKTOP = sp;
  return $status$0$lcssa$i | 0;
 }
 if ($16) if ((HEAP8[$16 + 4 >> 0] | 0) != 38) {
  $152 = $16 + 12 | 0;
  $155 = HEAP32[(HEAP32[$152 >> 2] | 0) + 56 >> 2] | 0;
  $156 = _luaH_new($L) | 0;
  $157 = $L + 8 | 0;
  $158 = HEAP32[$157 >> 2] | 0;
  HEAP32[$158 >> 2] = $156;
  HEAP32[$158 + 4 >> 2] = 69;
  HEAP32[$157 >> 2] = (HEAP32[$157 >> 2] | 0) + 8;
  HEAP32[$v$i >> 2] = 1;
  HEAP32[$v$i + 4 >> 2] = 1;
  if ((HEAP32[(HEAP32[$152 >> 2] | 0) + 24 >> 2] | 0) > 0) $i$01$i = 0; else {
   STACKTOP = sp;
   return $status$0$lcssa$i | 0;
  }
  do {
   _luaH_setint($L, $156, HEAP32[$155 + ($i$01$i << 2) >> 2] | 0, $v$i);
   $i$01$i = $i$01$i + 1 | 0;
  } while (($i$01$i | 0) < (HEAP32[(HEAP32[$152 >> 2] | 0) + 24 >> 2] | 0));
  STACKTOP = sp;
  return $status$0$lcssa$i | 0;
 }
 $148 = $L + 8 | 0;
 $149 = HEAP32[$148 >> 2] | 0;
 HEAP32[$149 + 4 >> 2] = 0;
 HEAP32[$148 >> 2] = $149 + 8;
 STACKTOP = sp;
 return $status$0$lcssa$i | 0;
}

function _luaH_newkey($L, $t, $key) {
 $L = $L | 0;
 $t = $t | 0;
 $key = $key | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$01 = 0, $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $100 = 0, $102 = 0, $106 = 0, $11 = 0, $112 = 0, $115 = 0, $116 = 0, $120 = 0, $129 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0.0, $20 = 0, $25 = 0, $26 = 0, $30 = 0, $35 = 0, $37 = 0, $40 = 0, $50 = 0, $58 = 0, $61 = 0, $66 = 0, $70 = 0, $73 = 0, $76 = 0, $79 = 0, $81 = 0, $82 = 0, $83 = 0, $92 = 0, $96 = 0, $98 = 0, $a$03$i$i = 0, $a$1$i$i = 0, $ause$0$lcssa$i$i = 0, $ause$0$ph$i$i = 0, $ause$06$i$i = 0, $aux = 0, $i$0$i$i = 0, $i$0$ph$i$i = 0, $i$01$i$i = 0, $i$07$i$i = 0, $i$1$lcssa$i$i = 0, $i$11$i$i = 0, $lc$0$$i$i = 0, $lc$0$lcssa$i$i = 0, $lc$02$i$i = 0, $lg$04$i$i = 0, $lim$0$ph$i$i = 0, $mp$0 = 0, $n$05$i$i = 0, $n$1$i$i = 0, $n$2$i$i = 0, $na$04$i$i = 0, $na$1$i$i = 0, $na$2$i$i = 0, $nums$i = 0, $othern$0 = 0, $totaluse$0$ph$i$i = 0, $ttlg$05$i$i = 0, $twotoi$02$i$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, dest = 0, label = 0, sp = 0, stop = 0, $i$0$i$i$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $nums$i = sp + 24 | 0;
 $aux = sp + 16 | 0;
 $1 = HEAP32[$key + 4 >> 2] | 0;
 if (($1 | 0) == 3) label = 3; else if (!$1) _luaG_runerror($L, 62360, $vararg_buffer); else $$01 = $key;
 if ((label | 0) == 3) {
  $2 = +HEAPF32[$key >> 2];
  if (!($2 == $2 & 0.0 == 0.0)) _luaG_runerror($L, 62384, $vararg_buffer1);
  if (+Math_floor(+$2) == $2) if ($2 >= -2147483648.0 & $2 < 2147483648.0) {
   HEAP32[$aux >> 2] = ~~$2;
   HEAP32[$aux + 4 >> 2] = 19;
   $$01 = $aux;
  } else $$01 = $key; else $$01 = $key;
 }
 $10 = _mainposition($t, $$01) | 0;
 $11 = $10 + 4 | 0;
 do if ((HEAP32[$11 >> 2] | 0) != 0 | ($10 | 0) == 62336) {
  $15 = $t + 20 | 0;
  $16 = $t + 16 | 0;
  $17 = HEAP32[$16 >> 2] | 0;
  $18 = HEAP32[$15 >> 2] | 0;
  while (1) {
   if ($18 >>> 0 <= $17 >>> 0) break;
   $20 = $18 + -20 | 0;
   HEAP32[$15 >> 2] = $20;
   if (!(HEAP32[$18 + -8 >> 2] | 0)) {
    label = 37;
    break;
   } else $18 = $20;
  }
  if ((label | 0) == 37) {
   $96 = _mainposition($t, $10 + 8 | 0) | 0;
   if (($96 | 0) == ($10 | 0)) {
    $115 = $10 + 16 | 0;
    $116 = HEAP32[$115 >> 2] | 0;
    if (!$116) $$pre$phiZ2D = $20; else {
     $120 = $20;
     HEAP32[$18 + -4 >> 2] = ($10 + ($116 * 20 | 0) - $120 | 0) / 20 | 0;
     $$pre$phiZ2D = $120;
    }
    HEAP32[$115 >> 2] = ($$pre$phiZ2D - $10 | 0) / 20 | 0;
    $mp$0 = $20;
    break;
   } else {
    $othern$0 = $96;
    while (1) {
     $98 = $othern$0 + 16 | 0;
     $100 = $othern$0 + ((HEAP32[$98 >> 2] | 0) * 20 | 0) | 0;
     if (($100 | 0) == ($10 | 0)) break; else $othern$0 = $100;
    }
    $102 = $20;
    HEAP32[$98 >> 2] = ($102 - $othern$0 | 0) / 20 | 0;
    HEAP32[$20 + 0 >> 2] = HEAP32[$10 + 0 >> 2];
    HEAP32[$20 + 4 >> 2] = HEAP32[$10 + 4 >> 2];
    HEAP32[$20 + 8 >> 2] = HEAP32[$10 + 8 >> 2];
    HEAP32[$20 + 12 >> 2] = HEAP32[$10 + 12 >> 2];
    HEAP32[$20 + 16 >> 2] = HEAP32[$10 + 16 >> 2];
    $106 = $10 + 16 | 0;
    if (HEAP32[$106 >> 2] | 0) {
     $112 = $18 + -4 | 0;
     HEAP32[$112 >> 2] = (HEAP32[$112 >> 2] | 0) + (($10 - $102 | 0) / 20 | 0);
     HEAP32[$106 >> 2] = 0;
    }
    HEAP32[$11 >> 2] = 0;
    $mp$0 = $10;
    break;
   }
  }
  dest = $nums$i + 0 | 0;
  stop = dest + 128 | 0;
  do {
   HEAP32[dest >> 2] = 0;
   dest = dest + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $25 = $t + 12 | 0;
  $26 = HEAP32[$t + 8 >> 2] | 0;
  $ause$06$i$i = 0;
  $i$07$i$i = 1;
  $lg$04$i$i = 0;
  $ttlg$05$i$i = 1;
  while (1) {
   if ($ttlg$05$i$i >>> 0 > $26 >>> 0) if ($i$07$i$i >>> 0 > $26 >>> 0) {
    $ause$0$lcssa$i$i = $ause$06$i$i;
    break;
   } else $lim$0$ph$i$i = $26; else $lim$0$ph$i$i = $ttlg$05$i$i;
   if ($i$07$i$i >>> 0 > $lim$0$ph$i$i >>> 0) {
    $i$1$lcssa$i$i = $i$07$i$i;
    $lc$0$lcssa$i$i = 0;
   } else {
    $30 = HEAP32[$25 >> 2] | 0;
    $i$11$i$i = $i$07$i$i;
    $lc$02$i$i = 0;
    while (1) {
     $lc$0$$i$i = ((HEAP32[$30 + ($i$11$i$i + -1 << 3) + 4 >> 2] | 0) != 0 & 1) + $lc$02$i$i | 0;
     $35 = $i$11$i$i + 1 | 0;
     if ($35 >>> 0 > $lim$0$ph$i$i >>> 0) {
      $i$1$lcssa$i$i = $35;
      $lc$0$lcssa$i$i = $lc$0$$i$i;
      break;
     } else {
      $i$11$i$i = $35;
      $lc$02$i$i = $lc$0$$i$i;
     }
    }
   }
   $37 = $nums$i + ($lg$04$i$i << 2) | 0;
   HEAP32[$37 >> 2] = (HEAP32[$37 >> 2] | 0) + $lc$0$lcssa$i$i;
   $40 = $lc$0$lcssa$i$i + $ause$06$i$i | 0;
   $lg$04$i$i = $lg$04$i$i + 1 | 0;
   if (($lg$04$i$i | 0) >= 32) {
    $ause$0$lcssa$i$i = $40;
    break;
   } else {
    $ause$06$i$i = $40;
    $i$07$i$i = $i$1$lcssa$i$i;
    $ttlg$05$i$i = $ttlg$05$i$i << 1;
   }
  }
  $ause$0$ph$i$i = 0;
  $i$0$ph$i$i = 1 << (HEAPU8[$t + 7 >> 0] | 0);
  $totaluse$0$ph$i$i = 0;
  L42 : while (1) {
   $i$0$i$i = $i$0$ph$i$i;
   do {
    $i$0$i$i$looptemp = $i$0$i$i;
    $i$0$i$i = $i$0$i$i + -1 | 0;
    if (!$i$0$i$i$looptemp) break L42;
    $50 = HEAP32[$16 >> 2] | 0;
   } while ((HEAP32[$50 + ($i$0$i$i * 20 | 0) + 4 >> 2] | 0) == 0);
   if ((HEAP32[$50 + ($i$0$i$i * 20 | 0) + 12 >> 2] | 0) == 19) {
    $58 = HEAP32[$50 + ($i$0$i$i * 20 | 0) + 8 >> 2] | 0;
    if ($58 >>> 0 > 2147483648 | ($58 | 0) < 1 | ($58 | 0) == 0) $$0$i$i$i = 0; else {
     $61 = $nums$i + ((_luaO_ceillog2($58) | 0) << 2) | 0;
     HEAP32[$61 >> 2] = (HEAP32[$61 >> 2] | 0) + 1;
     $$0$i$i$i = 1;
    }
   } else $$0$i$i$i = 0;
   $ause$0$ph$i$i = $$0$i$i$i + $ause$0$ph$i$i | 0;
   $i$0$ph$i$i = $i$0$i$i;
   $totaluse$0$ph$i$i = $totaluse$0$ph$i$i + 1 | 0;
  }
  $66 = $ause$0$ph$i$i + $ause$0$lcssa$i$i | 0;
  if ((HEAP32[$$01 + 4 >> 2] | 0) == 19) {
   $70 = HEAP32[$$01 >> 2] | 0;
   if ($70 >>> 0 > 2147483648 | ($70 | 0) < 1 | ($70 | 0) == 0) $$0$i$i = 0; else {
    $73 = $nums$i + ((_luaO_ceillog2($70) | 0) << 2) | 0;
    HEAP32[$73 >> 2] = (HEAP32[$73 >> 2] | 0) + 1;
    $$0$i$i = 1;
   }
  } else $$0$i$i = 0;
  $76 = $66 + $$0$i$i | 0;
  L57 : do if (!$76) {
   $n$2$i$i = 0;
   $na$2$i$i = 0;
  } else {
   $83 = 0;
   $a$03$i$i = 0;
   $i$01$i$i = 0;
   $n$05$i$i = 0;
   $na$04$i$i = 0;
   $twotoi$02$i$i = 1;
   while (1) {
    $79 = HEAP32[$nums$i + ($i$01$i$i << 2) >> 2] | 0;
    if (!$79) {
     $a$1$i$i = $a$03$i$i;
     $n$1$i$i = $n$05$i$i;
     $na$1$i$i = $na$04$i$i;
    } else {
     $81 = $79 + $a$03$i$i | 0;
     $82 = $81 >>> 0 > $83 >>> 0;
     $a$1$i$i = $81;
     $n$1$i$i = $82 ? $twotoi$02$i$i : $n$05$i$i;
     $na$1$i$i = $82 ? $81 : $na$04$i$i;
    }
    if (($a$1$i$i | 0) == ($76 | 0)) {
     $n$2$i$i = $n$1$i$i;
     $na$2$i$i = $na$1$i$i;
     break L57;
    }
    $83 = $twotoi$02$i$i & 2147483647;
    if ($83 >>> 0 >= $76 >>> 0) {
     $n$2$i$i = $n$1$i$i;
     $na$2$i$i = $na$1$i$i;
     break;
    } else {
     $a$03$i$i = $a$1$i$i;
     $i$01$i$i = $i$01$i$i + 1 | 0;
     $n$05$i$i = $n$1$i$i;
     $na$04$i$i = $na$1$i$i;
     $twotoi$02$i$i = $twotoi$02$i$i << 1;
    }
   }
  } while (0);
  _luaH_resize($L, $t, $n$2$i$i, $ause$0$lcssa$i$i + 1 + $totaluse$0$ph$i$i - $na$2$i$i | 0);
  $92 = _luaH_get($t, $$01) | 0;
  if (($92 | 0) != 59168) {
   $$0 = $92;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $$0 = _luaH_newkey($L, $t, $$01) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else $mp$0 = $10; while (0);
 HEAP32[$mp$0 + 8 >> 2] = HEAP32[$$01 >> 2];
 $129 = $$01 + 4 | 0;
 HEAP32[$mp$0 + 12 >> 2] = HEAP32[$129 >> 2];
 if (HEAP32[$129 >> 2] & 64) if (HEAP8[$t + 5 >> 0] & 4) if (HEAP8[(HEAP32[$$01 >> 2] | 0) + 5 >> 0] & 3) _luaC_barrierback_($L, $t);
 $$0 = $mp$0;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN13b2PulleyJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $1 = 0, $101 = 0.0, $105 = 0.0, $108 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $12 = 0, $121 = 0.0, $126 = 0.0, $129 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0, $139 = 0, $14 = 0, $145 = 0.0, $148 = 0.0, $149 = 0.0, $150 = 0.0, $151 = 0, $155 = 0, $160 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0, $17 = 0, $174 = 0.0, $179 = 0.0, $18 = 0, $181 = 0.0, $182 = 0.0, $184 = 0.0, $186 = 0.0, $187 = 0.0, $189 = 0.0, $190 = 0.0, $192 = 0.0, $194 = 0.0, $195 = 0.0, $198 = 0.0, $199 = 0.0, $200 = 0.0, $201 = 0.0, $205 = 0.0, $206 = 0.0, $211 = 0.0, $214 = 0.0, $223 = 0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $24 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0.0, $269 = 0.0, $270 = 0.0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $29 = 0, $3 = 0, $30 = 0, $36 = 0, $39 = 0, $4 = 0, $42 = 0, $45 = 0, $47 = 0, $49 = 0, $55 = 0.0, $56 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $68 = 0.0, $69 = 0.0, $71 = 0.0, $73 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $82 = 0.0, $84 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $storemerge = 0.0, $wA$0 = 0.0, $wB$0 = 0.0;
 $1 = HEAP32[$this + 48 >> 2] | 0;
 $3 = HEAP32[$1 + 8 >> 2] | 0;
 $4 = $this + 120 | 0;
 HEAP32[$4 >> 2] = $3;
 $6 = HEAP32[$this + 52 >> 2] | 0;
 $8 = HEAP32[$6 + 8 >> 2] | 0;
 $9 = $this + 124 | 0;
 HEAP32[$9 >> 2] = $8;
 $12 = $1 + 28 | 0;
 $14 = HEAP32[$12 >> 2] | 0;
 $17 = HEAP32[$12 + 4 >> 2] | 0;
 $18 = $this + 160 | 0;
 HEAP32[$18 >> 2] = $14;
 HEAP32[$18 + 4 >> 2] = $17;
 $24 = $6 + 28 | 0;
 $26 = HEAP32[$24 >> 2] | 0;
 $29 = HEAP32[$24 + 4 >> 2] | 0;
 $30 = $this + 168 | 0;
 HEAP32[$30 >> 2] = $26;
 HEAP32[$30 + 4 >> 2] = $29;
 $36 = $this + 176 | 0;
 HEAPF32[$36 >> 2] = +HEAPF32[$1 + 120 >> 2];
 $39 = $this + 180 | 0;
 HEAPF32[$39 >> 2] = +HEAPF32[$6 + 120 >> 2];
 $42 = $this + 184 | 0;
 HEAPF32[$42 >> 2] = +HEAPF32[$1 + 128 >> 2];
 $45 = $this + 188 | 0;
 HEAPF32[$45 >> 2] = +HEAPF32[$6 + 128 >> 2];
 $47 = HEAP32[$data + 24 >> 2] | 0;
 $49 = $47 + ($3 * 12 | 0) | 0;
 $55 = +HEAPF32[$49 >> 2];
 $56 = +HEAPF32[$49 + 4 >> 2];
 $58 = +HEAPF32[$47 + ($3 * 12 | 0) + 8 >> 2];
 $59 = $data + 28 | 0;
 $60 = HEAP32[$59 >> 2] | 0;
 $62 = $60 + ($3 * 12 | 0) | 0;
 $68 = +HEAPF32[$62 >> 2];
 $69 = +HEAPF32[$62 + 4 >> 2];
 $71 = +HEAPF32[$60 + ($3 * 12 | 0) + 8 >> 2];
 $73 = $47 + ($8 * 12 | 0) | 0;
 $79 = +HEAPF32[$73 >> 2];
 $80 = +HEAPF32[$73 + 4 >> 2];
 $82 = +HEAPF32[$47 + ($8 * 12 | 0) + 8 >> 2];
 $84 = $60 + ($8 * 12 | 0) | 0;
 $90 = +HEAPF32[$84 >> 2];
 $91 = +HEAPF32[$84 + 4 >> 2];
 $93 = +HEAPF32[$60 + ($8 * 12 | 0) + 8 >> 2];
 $94 = +Math_sin(+$58);
 $95 = +Math_cos(+$58);
 $96 = +Math_sin(+$82);
 $97 = +Math_cos(+$82);
 $98 = $this + 144 | 0;
 $101 = +HEAPF32[$this + 92 >> 2] - (HEAP32[tempDoublePtr >> 2] = $14, +HEAPF32[tempDoublePtr >> 2]);
 $105 = +HEAPF32[$this + 96 >> 2] - (HEAP32[tempDoublePtr >> 2] = $17, +HEAPF32[tempDoublePtr >> 2]);
 $108 = $95 * $101 - $94 * $105;
 $111 = $94 * $101 + $95 * $105;
 $112 = +$108;
 $113 = +$111;
 $114 = $98;
 HEAPF32[$114 >> 2] = $112;
 HEAPF32[$114 + 4 >> 2] = $113;
 $121 = +HEAPF32[$this + 100 >> 2] - (HEAP32[tempDoublePtr >> 2] = $26, +HEAPF32[tempDoublePtr >> 2]);
 $126 = +HEAPF32[$this + 104 >> 2] - +HEAPF32[$this + 172 >> 2];
 $129 = $97 * $121 - $96 * $126;
 $132 = $96 * $121 + $97 * $126;
 $133 = +$129;
 $134 = +$132;
 $135 = $this + 152 | 0;
 HEAPF32[$135 >> 2] = $133;
 HEAPF32[$135 + 4 >> 2] = $134;
 $139 = $this + 128 | 0;
 $145 = $55 + $108 - +HEAPF32[$this + 68 >> 2];
 $148 = $56 + $111 - +HEAPF32[$this + 72 >> 2];
 $149 = +$145;
 $150 = +$148;
 $151 = $139;
 HEAPF32[$151 >> 2] = $149;
 HEAPF32[$151 + 4 >> 2] = $150;
 $155 = $this + 136 | 0;
 $160 = $79 + $129 - +HEAPF32[$this + 76 >> 2];
 $163 = $80 + $132 - +HEAPF32[$this + 80 >> 2];
 $164 = +$160;
 $165 = +$163;
 $166 = $155;
 HEAPF32[$166 >> 2] = $164;
 HEAPF32[$166 + 4 >> 2] = $165;
 $174 = +Math_sqrt(+($145 * $145 + $148 * $148));
 $179 = +Math_sqrt(+($160 * $160 + $163 * $163));
 if ($174 > .04999999701976776) {
  $181 = 1.0 / $174;
  $182 = $145 * $181;
  HEAPF32[$139 >> 2] = $182;
  $184 = $181 * $148;
  $194 = $182;
 } else {
  HEAPF32[$139 >> 2] = 0.0;
  $184 = 0.0;
  $194 = 0.0;
 }
 HEAPF32[$this + 132 >> 2] = $184;
 if ($179 > .04999999701976776) {
  $186 = 1.0 / $179;
  $187 = $186 * $160;
  HEAPF32[$155 >> 2] = $187;
  $189 = $186 * $163;
  $198 = $187;
 } else {
  HEAPF32[$155 >> 2] = 0.0;
  $189 = 0.0;
  $198 = 0.0;
 }
 HEAPF32[$this + 140 >> 2] = $189;
 $190 = +HEAPF32[$98 >> 2];
 $192 = +HEAPF32[$this + 148 >> 2];
 $195 = $190 * $184 - $192 * $194;
 $199 = $129 * $189 - $132 * $198;
 $200 = +HEAPF32[$36 >> 2];
 $201 = +HEAPF32[$42 >> 2];
 $205 = +HEAPF32[$39 >> 2];
 $206 = +HEAPF32[$45 >> 2];
 $211 = +HEAPF32[$this + 112 >> 2];
 $214 = $200 + $195 * ($195 * $201) + $211 * $211 * ($205 + $199 * ($199 * $206));
 if ($214 > 0.0) $storemerge = 1.0 / $214; else $storemerge = $214;
 HEAPF32[$this + 192 >> 2] = $storemerge;
 if (!(HEAP8[$data + 20 >> 0] | 0)) {
  HEAPF32[$this + 116 >> 2] = 0.0;
  $256 = $68;
  $258 = $69;
  $269 = $90;
  $271 = $91;
  $wA$0 = $71;
  $wB$0 = $93;
  $252 = HEAP32[$4 >> 2] | 0;
  $253 = HEAP32[$59 >> 2] | 0;
  $254 = $253 + ($252 * 12 | 0) | 0;
  $255 = +$256;
  $257 = +$258;
  $259 = $254;
  $260 = $259;
  HEAPF32[$260 >> 2] = $255;
  $261 = $259 + 4 | 0;
  $262 = $261;
  HEAPF32[$262 >> 2] = $257;
  $263 = HEAP32[$4 >> 2] | 0;
  $264 = HEAP32[$59 >> 2] | 0;
  $265 = $264 + ($263 * 12 | 0) + 8 | 0;
  HEAPF32[$265 >> 2] = $wA$0;
  $266 = HEAP32[$9 >> 2] | 0;
  $267 = $264 + ($266 * 12 | 0) | 0;
  $268 = +$269;
  $270 = +$271;
  $272 = $267;
  $273 = $272;
  HEAPF32[$273 >> 2] = $268;
  $274 = $272 + 4 | 0;
  $275 = $274;
  HEAPF32[$275 >> 2] = $270;
  $276 = HEAP32[$9 >> 2] | 0;
  $277 = HEAP32[$59 >> 2] | 0;
  $278 = $277 + ($276 * 12 | 0) + 8 | 0;
  HEAPF32[$278 >> 2] = $wB$0;
  return;
 } else {
  $223 = $this + 116 | 0;
  $225 = +HEAPF32[$data + 8 >> 2] * +HEAPF32[$223 >> 2];
  HEAPF32[$223 >> 2] = $225;
  $226 = -$225;
  $227 = $194 * $226;
  $228 = $184 * $226;
  $230 = -($225 * $211);
  $231 = $198 * $230;
  $232 = $189 * $230;
  $256 = $68 + $227 * $200;
  $258 = $69 + $228 * $200;
  $269 = $90 + $231 * $205;
  $271 = $91 + $232 * $205;
  $wA$0 = $71 + $201 * ($228 * $190 - $227 * $192);
  $wB$0 = $93 + $206 * ($232 * $129 - $231 * $132);
  $252 = HEAP32[$4 >> 2] | 0;
  $253 = HEAP32[$59 >> 2] | 0;
  $254 = $253 + ($252 * 12 | 0) | 0;
  $255 = +$256;
  $257 = +$258;
  $259 = $254;
  $260 = $259;
  HEAPF32[$260 >> 2] = $255;
  $261 = $259 + 4 | 0;
  $262 = $261;
  HEAPF32[$262 >> 2] = $257;
  $263 = HEAP32[$4 >> 2] | 0;
  $264 = HEAP32[$59 >> 2] | 0;
  $265 = $264 + ($263 * 12 | 0) + 8 | 0;
  HEAPF32[$265 >> 2] = $wA$0;
  $266 = HEAP32[$9 >> 2] | 0;
  $267 = $264 + ($266 * 12 | 0) | 0;
  $268 = +$269;
  $270 = +$271;
  $272 = $267;
  $273 = $272;
  HEAPF32[$273 >> 2] = $268;
  $274 = $272 + 4 | 0;
  $275 = $274;
  HEAPF32[$275 >> 2] = $270;
  $276 = HEAP32[$9 >> 2] | 0;
  $277 = HEAP32[$59 >> 2] | 0;
  $278 = $277 + ($276 * 12 | 0) + 8 | 0;
  HEAPF32[$278 >> 2] = $wB$0;
  return;
 }
}

function __ZN15b2RevoluteJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $1 = 0, $103 = 0.0, $107 = 0.0, $110 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0.0, $124 = 0, $137 = 0.0, $14 = 0, $142 = 0.0, $154 = 0.0, $17 = 0, $172 = 0.0, $174 = 0.0, $176 = 0.0, $177 = 0.0, $18 = 0, $181 = 0.0, $184 = 0, $189 = 0, $198 = 0, $199 = 0, $200 = 0.0, $202 = 0.0, $203 = 0, $205 = 0.0, $206 = 0, $208 = 0.0, $210 = 0, $212 = 0.0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $29 = 0, $3 = 0, $30 = 0, $36 = 0, $38 = 0.0, $4 = 0, $41 = 0.0, $44 = 0.0, $47 = 0, $49 = 0.0, $50 = 0, $51 = 0, $53 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $62 = 0.0, $64 = 0.0, $66 = 0, $72 = 0.0, $73 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $83 = 0.0, $87 = 0.0, $9 = 0, $90 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $storemerge = 0.0, $wA$0 = 0.0, $wB$0 = 0.0;
 $1 = HEAP32[$this + 48 >> 2] | 0;
 $3 = HEAP32[$1 + 8 >> 2] | 0;
 $4 = $this + 128 | 0;
 HEAP32[$4 >> 2] = $3;
 $6 = HEAP32[$this + 52 >> 2] | 0;
 $8 = HEAP32[$6 + 8 >> 2] | 0;
 $9 = $this + 132 | 0;
 HEAP32[$9 >> 2] = $8;
 $12 = $1 + 28 | 0;
 $14 = HEAP32[$12 >> 2] | 0;
 $17 = HEAP32[$12 + 4 >> 2] | 0;
 $18 = $this + 152 | 0;
 HEAP32[$18 >> 2] = $14;
 HEAP32[$18 + 4 >> 2] = $17;
 $24 = $6 + 28 | 0;
 $26 = HEAP32[$24 >> 2] | 0;
 $29 = HEAP32[$24 + 4 >> 2] | 0;
 $30 = $this + 160 | 0;
 HEAP32[$30 >> 2] = $26;
 HEAP32[$30 + 4 >> 2] = $29;
 $36 = $this + 168 | 0;
 HEAPF32[$36 >> 2] = +HEAPF32[$1 + 120 >> 2];
 $38 = +HEAPF32[$6 + 120 >> 2];
 HEAPF32[$this + 172 >> 2] = $38;
 $41 = +HEAPF32[$1 + 128 >> 2];
 HEAPF32[$this + 176 >> 2] = $41;
 $44 = +HEAPF32[$6 + 128 >> 2];
 HEAPF32[$this + 180 >> 2] = $44;
 $47 = HEAP32[$data + 24 >> 2] | 0;
 $49 = +HEAPF32[$47 + ($3 * 12 | 0) + 8 >> 2];
 $50 = $data + 28 | 0;
 $51 = HEAP32[$50 >> 2] | 0;
 $53 = $51 + ($3 * 12 | 0) | 0;
 $59 = +HEAPF32[$53 >> 2];
 $60 = +HEAPF32[$53 + 4 >> 2];
 $62 = +HEAPF32[$51 + ($3 * 12 | 0) + 8 >> 2];
 $64 = +HEAPF32[$47 + ($8 * 12 | 0) + 8 >> 2];
 $66 = $51 + ($8 * 12 | 0) | 0;
 $72 = +HEAPF32[$66 >> 2];
 $73 = +HEAPF32[$66 + 4 >> 2];
 $75 = +HEAPF32[$51 + ($8 * 12 | 0) + 8 >> 2];
 $76 = +Math_sin(+$49);
 $77 = +Math_cos(+$49);
 $78 = +Math_sin(+$64);
 $79 = +Math_cos(+$64);
 $80 = $this + 136 | 0;
 $83 = +HEAPF32[$this + 68 >> 2] - (HEAP32[tempDoublePtr >> 2] = $14, +HEAPF32[tempDoublePtr >> 2]);
 $87 = +HEAPF32[$this + 72 >> 2] - (HEAP32[tempDoublePtr >> 2] = $17, +HEAPF32[tempDoublePtr >> 2]);
 $90 = $77 * $83 - $76 * $87;
 $93 = $76 * $83 + $77 * $87;
 $94 = +$90;
 $95 = +$93;
 $96 = $80;
 HEAPF32[$96 >> 2] = $94;
 HEAPF32[$96 + 4 >> 2] = $95;
 $103 = +HEAPF32[$this + 76 >> 2] - (HEAP32[tempDoublePtr >> 2] = $26, +HEAPF32[tempDoublePtr >> 2]);
 $107 = +HEAPF32[$this + 80 >> 2] - (HEAP32[tempDoublePtr >> 2] = $29, +HEAPF32[tempDoublePtr >> 2]);
 $110 = $79 * $103 - $78 * $107;
 $113 = $78 * $103 + $79 * $107;
 $114 = +$110;
 $115 = +$113;
 $116 = $this + 144 | 0;
 HEAPF32[$116 >> 2] = $114;
 HEAPF32[$116 + 4 >> 2] = $115;
 $120 = +HEAPF32[$36 >> 2];
 $121 = $41 + $44;
 $122 = $121 == 0.0;
 $123 = $120 + $38;
 $124 = $this + 140 | 0;
 HEAPF32[$this + 184 >> 2] = $123 + $41 * ($93 * $93) + $44 * ($113 * $113);
 $137 = -($41 * ($93 * $90)) - $44 * ($113 * $110);
 HEAPF32[$this + 196 >> 2] = $137;
 $142 = -($41 * $93) - $44 * $113;
 HEAPF32[$this + 208 >> 2] = $142;
 HEAPF32[$this + 188 >> 2] = $137;
 HEAPF32[$this + 200 >> 2] = $123 + $41 * ($90 * $90) + $44 * ($110 * $110);
 $154 = $41 * $90 + $44 * $110;
 HEAPF32[$this + 212 >> 2] = $154;
 HEAPF32[$this + 192 >> 2] = $142;
 HEAPF32[$this + 204 >> 2] = $154;
 HEAPF32[$this + 216 >> 2] = $121;
 if ($121 > 0.0) $storemerge = 1.0 / $121; else $storemerge = $121;
 HEAPF32[$this + 220 >> 2] = $storemerge;
 if ((HEAP8[$this + 100 >> 0] | 0) == 0 | $122) HEAPF32[$this + 96 >> 2] = 0.0;
 do if ((HEAP8[$this + 112 >> 0] | 0) == 0 | $122) HEAP32[$this + 224 >> 2] = 0; else {
  $172 = $64 - $49 - +HEAPF32[$this + 116 >> 2];
  $174 = +HEAPF32[$this + 124 >> 2];
  $176 = +HEAPF32[$this + 120 >> 2];
  $177 = $174 - $176;
  if ($177 > 0.0) $181 = $177; else $181 = -$177;
  if ($181 < .06981317698955536) {
   HEAP32[$this + 224 >> 2] = 3;
   break;
  }
  if ($172 <= $176) {
   $184 = $this + 224 | 0;
   if ((HEAP32[$184 >> 2] | 0) != 1) HEAPF32[$this + 92 >> 2] = 0.0;
   HEAP32[$184 >> 2] = 1;
   break;
  }
  $189 = $this + 224 | 0;
  if (!($172 >= $174)) {
   HEAP32[$189 >> 2] = 0;
   HEAPF32[$this + 92 >> 2] = 0.0;
   break;
  }
  if ((HEAP32[$189 >> 2] | 0) != 2) HEAPF32[$this + 92 >> 2] = 0.0;
  HEAP32[$189 >> 2] = 2;
 } while (0);
 $198 = $this + 84 | 0;
 if (!(HEAP8[$data + 20 >> 0] | 0)) {
  HEAP32[$198 + 0 >> 2] = 0;
  HEAP32[$198 + 4 >> 2] = 0;
  HEAP32[$198 + 8 >> 2] = 0;
  HEAP32[$198 + 12 >> 2] = 0;
  $241 = $59;
  $243 = $60;
  $254 = $72;
  $256 = $73;
  $wA$0 = $62;
  $wB$0 = $75;
  $237 = HEAP32[$4 >> 2] | 0;
  $238 = HEAP32[$50 >> 2] | 0;
  $239 = $238 + ($237 * 12 | 0) | 0;
  $240 = +$241;
  $242 = +$243;
  $244 = $239;
  $245 = $244;
  HEAPF32[$245 >> 2] = $240;
  $246 = $244 + 4 | 0;
  $247 = $246;
  HEAPF32[$247 >> 2] = $242;
  $248 = HEAP32[$4 >> 2] | 0;
  $249 = HEAP32[$50 >> 2] | 0;
  $250 = $249 + ($248 * 12 | 0) + 8 | 0;
  HEAPF32[$250 >> 2] = $wA$0;
  $251 = HEAP32[$9 >> 2] | 0;
  $252 = $249 + ($251 * 12 | 0) | 0;
  $253 = +$254;
  $255 = +$256;
  $257 = $252;
  $258 = $257;
  HEAPF32[$258 >> 2] = $253;
  $259 = $257 + 4 | 0;
  $260 = $259;
  HEAPF32[$260 >> 2] = $255;
  $261 = HEAP32[$9 >> 2] | 0;
  $262 = HEAP32[$50 >> 2] | 0;
  $263 = $262 + ($261 * 12 | 0) + 8 | 0;
  HEAPF32[$263 >> 2] = $wB$0;
  return;
 } else {
  $199 = $data + 8 | 0;
  $200 = +HEAPF32[$199 >> 2];
  $202 = $200 * +HEAPF32[$198 >> 2];
  HEAPF32[$198 >> 2] = $202;
  $203 = $this + 88 | 0;
  $205 = $200 * +HEAPF32[$203 >> 2];
  HEAPF32[$203 >> 2] = $205;
  $206 = $this + 92 | 0;
  $208 = $200 * +HEAPF32[$206 >> 2];
  HEAPF32[$206 >> 2] = $208;
  $210 = $this + 96 | 0;
  $212 = +HEAPF32[$199 >> 2] * +HEAPF32[$210 >> 2];
  HEAPF32[$210 >> 2] = $212;
  $241 = $59 - $120 * $202;
  $243 = $60 - $120 * $205;
  $254 = $72 + $38 * $202;
  $256 = $73 + $38 * $205;
  $wA$0 = $62 - $41 * ($208 + ($212 + ($205 * +HEAPF32[$80 >> 2] - $202 * +HEAPF32[$124 >> 2])));
  $wB$0 = $75 + $44 * ($208 + ($212 + ($205 * $110 - $202 * $113)));
  $237 = HEAP32[$4 >> 2] | 0;
  $238 = HEAP32[$50 >> 2] | 0;
  $239 = $238 + ($237 * 12 | 0) | 0;
  $240 = +$241;
  $242 = +$243;
  $244 = $239;
  $245 = $244;
  HEAPF32[$245 >> 2] = $240;
  $246 = $244 + 4 | 0;
  $247 = $246;
  HEAPF32[$247 >> 2] = $242;
  $248 = HEAP32[$4 >> 2] | 0;
  $249 = HEAP32[$50 >> 2] | 0;
  $250 = $249 + ($248 * 12 | 0) + 8 | 0;
  HEAPF32[$250 >> 2] = $wA$0;
  $251 = HEAP32[$9 >> 2] | 0;
  $252 = $249 + ($251 * 12 | 0) | 0;
  $253 = +$254;
  $255 = +$256;
  $257 = $252;
  $258 = $257;
  HEAPF32[$258 >> 2] = $253;
  $259 = $257 + 4 | 0;
  $260 = $259;
  HEAPF32[$260 >> 2] = $255;
  $261 = HEAP32[$9 >> 2] | 0;
  $262 = HEAP32[$50 >> 2] | 0;
  $263 = $262 + ($261 * 12 | 0) + 8 | 0;
  HEAPF32[$263 >> 2] = $wB$0;
  return;
 }
}

function _trinkle($head, $width, $cmp, $pp$val, $pp$1$val, $pshift, $trusty, $lp) {
 $head = $head | 0;
 $width = $width | 0;
 $cmp = $cmp | 0;
 $pp$val = $pp$val | 0;
 $pp$1$val = $pp$1$val | 0;
 $pshift = $pshift | 0;
 $trusty = $trusty | 0;
 $lp = $lp | 0;
 var $$0$be$i = 0, $$0$i = 0, $$0$lcssa = 0, $$0$lcssa49 = 0, $$01$be$i = 0, $$012 = 0, $$012$i = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$lcssa = 0, $$02$lcssa51 = 0, $$02$us$i = 0, $$02$us$i15 = 0, $$0210 = 0, $$03$i = 0, $$03$lcssa = 0, $$039 = 0, $$lcssa = 0, $$lcssa57 = 0, $0 = 0, $101 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $15 = 0, $2 = 0, $21 = 0, $23 = 0, $27 = 0, $33 = 0, $35 = 0, $41 = 0, $44 = 0, $46 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $55 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $68 = 0, $7 = 0, $71 = 0, $72 = 0, $74 = 0, $75 = 0, $78 = 0, $79 = 0, $86 = 0, $87 = 0, $91 = 0, $93 = 0, $95 = 0, $ar = 0, $ar$i = 0, $i$0$lcssa = 0, $i$0$lcssa$i = 0, $i$0$lcssa50 = 0, $i$01$us$i = 0, $i$01$us$i13 = 0, $i$011 = 0, $i$04$i = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $nTrailingZeros$03$i2$i$lcssa = 0, $pp$val17 = 0, $tmp$i9 = 0, label = 0, sp = 0, $68$looptemp = 0, $i$01$us$i13$looptemp = 0, $101$looptemp = 0, $i$01$us$i$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 720 | 0;
 $tmp$i9 = sp + 456 | 0;
 $ar$i = sp + 228 | 0;
 $ar = sp;
 HEAP32[$ar >> 2] = $head;
 $0 = 0 - $width | 0;
 $2 = ($pp$1$val | 0) == 0;
 L1 : do if ($2 & ($pp$val | 0) == 1) {
  $$0$lcssa = $head;
  $$02$lcssa = $pshift;
  $$03$lcssa = $trusty;
  $i$0$lcssa = 1;
  label = 18;
 } else {
  $$012 = $head;
  $$0210 = $pshift;
  $$039 = $trusty;
  $106 = $2;
  $33 = $pp$1$val;
  $7 = $head;
  $i$011 = 1;
  $pp$val17 = $pp$val;
  while (1) {
   $6 = $$012 + (0 - (HEAP32[$lp + ($$0210 << 2) >> 2] | 0)) | 0;
   if ((FUNCTION_TABLE_iii[$cmp & 31]($6, $7) | 0) < 1) {
    $$0$lcssa = $$012;
    $$02$lcssa = $$0210;
    $$03$lcssa = $$039;
    $i$0$lcssa = $i$011;
    label = 18;
    break L1;
   }
   if (($$039 | 0) == 0 & ($$0210 | 0) > 1) {
    $15 = HEAP32[$lp + ($$0210 + -2 << 2) >> 2] | 0;
    if ((FUNCTION_TABLE_iii[$cmp & 31]($$012 + $0 | 0, $6) | 0) > -1) {
     $$0$lcssa49 = $$012;
     $$02$lcssa51 = $$0210;
     $i$0$lcssa50 = $i$011;
     break L1;
    }
    if ((FUNCTION_TABLE_iii[$cmp & 31]($$012 + (0 - ($15 + $width)) | 0, $6) | 0) > -1) {
     $$0$lcssa49 = $$012;
     $$02$lcssa51 = $$0210;
     $i$0$lcssa50 = $i$011;
     break L1;
    }
   }
   $21 = $i$011 + 1 | 0;
   HEAP32[$ar + ($i$011 << 2) >> 2] = $6;
   $23 = $pp$val17 + -1 | 0;
   do if (!$23) {
    $44 = 32;
    label = 15;
   } else {
    if (!($23 & 1)) {
     $$02$i$i = $23;
     $nTrailingZeros$03$i$i = 0;
     while (1) {
      $27 = $nTrailingZeros$03$i$i + 1 | 0;
      $$02$i$i = $$02$i$i >>> 1;
      if ($$02$i$i & 1) {
       $$lcssa = $27;
       break;
      } else $nTrailingZeros$03$i$i = $27;
     }
     if (!$$lcssa) label = 10; else $41 = $$lcssa;
    } else label = 10;
    if ((label | 0) == 10) {
     label = 0;
     if ($106) {
      $44 = 64;
      label = 15;
      break;
     }
     if (!($33 & 1)) {
      $$02$i3$i = $33;
      $nTrailingZeros$03$i2$i = 0;
     } else {
      $$0$i = 0;
      $46 = $pp$val17;
      $49 = $33;
      $53 = 0;
      break;
     }
     while (1) {
      $35 = $nTrailingZeros$03$i2$i + 1 | 0;
      $$02$i3$i = $$02$i3$i >>> 1;
      if ($$02$i3$i & 1) {
       $$lcssa57 = $35;
       $nTrailingZeros$03$i2$i$lcssa = $nTrailingZeros$03$i2$i;
       break;
      } else $nTrailingZeros$03$i2$i = $35;
     }
     if (!$$lcssa57) {
      $$0$i = 0;
      $46 = $pp$val17;
      $49 = $33;
      $53 = 0;
      break;
     } else $41 = $nTrailingZeros$03$i2$i$lcssa + 33 | 0;
    }
    if ($41 >>> 0 > 31) {
     $44 = $41;
     label = 15;
    } else {
     $$0$i = $41;
     $46 = $pp$val17;
     $49 = $33;
     $53 = $41;
    }
   } while (0);
   if ((label | 0) == 15) {
    label = 0;
    $$0$i = $44 + -32 | 0;
    $46 = $33;
    $49 = 0;
    $53 = $44;
   }
   $50 = $49 << 32 - $$0$i | $46 >>> $$0$i;
   $51 = $49 >>> $$0$i;
   $52 = $53 + $$0210 | 0;
   $55 = ($51 | 0) == 0;
   if ($55 & ($50 | 0) == 1) {
    $$0$lcssa49 = $6;
    $$02$lcssa51 = $52;
    $i$0$lcssa50 = $21;
    break L1;
   }
   $$012 = $6;
   $$0210 = $52;
   $$039 = 0;
   $106 = $55;
   $33 = $51;
   $7 = HEAP32[$ar >> 2] | 0;
   $i$011 = $21;
   $pp$val17 = $50;
  }
 } while (0);
 if ((label | 0) == 18) if (!$$03$lcssa) {
  $$0$lcssa49 = $$0$lcssa;
  $$02$lcssa51 = $$02$lcssa;
  $i$0$lcssa50 = $i$0$lcssa;
 } else {
  STACKTOP = sp;
  return;
 }
 L30 : do if (($i$0$lcssa50 | 0) >= 2) {
  $58 = $ar + ($i$0$lcssa50 << 2) | 0;
  HEAP32[$58 >> 2] = $tmp$i9;
  if ($width) {
   $60 = $i$0$lcssa50 + -1 | 0;
   $$02$us$i15 = $width;
   $72 = $tmp$i9;
   while (1) {
    $62 = $$02$us$i15 >>> 0 > 256 ? 256 : $$02$us$i15;
    $71 = HEAP32[$ar >> 2] | 0;
    _memcpy($72 | 0, $71 | 0, $62 | 0) | 0;
    $68 = $71;
    $i$01$us$i13 = 0;
    do {
     $i$01$us$i13$looptemp = $i$01$us$i13;
     $i$01$us$i13 = $i$01$us$i13 + 1 | 0;
     $68$looptemp = $68;
     $68 = HEAP32[$ar + ($i$01$us$i13 << 2) >> 2] | 0;
     _memcpy($68$looptemp | 0, $68 | 0, $62 | 0) | 0;
     HEAP32[$ar + ($i$01$us$i13$looptemp << 2) >> 2] = $68$looptemp + $62;
    } while (($i$01$us$i13$looptemp | 0) != ($60 | 0));
    if (($$02$us$i15 | 0) == ($62 | 0)) break L30;
    $$02$us$i15 = $$02$us$i15 - $62 | 0;
    $72 = HEAP32[$58 >> 2] | 0;
   }
  }
 } while (0);
 HEAP32[$ar$i >> 2] = $$0$lcssa49;
 L40 : do if (($$02$lcssa51 | 0) > 1) {
  $$012$i = $$02$lcssa51;
  $$03$i = $$0$lcssa49;
  $79 = $$0$lcssa49;
  $i$04$i = 1;
  while (1) {
   $74 = $$03$i + $0 | 0;
   $75 = $$012$i + -2 | 0;
   $78 = $$03$i + (0 - ((HEAP32[$lp + ($75 << 2) >> 2] | 0) + $width)) | 0;
   if ((FUNCTION_TABLE_iii[$cmp & 31]($79, $78) | 0) > -1) if ((FUNCTION_TABLE_iii[$cmp & 31]($79, $74) | 0) > -1) {
    $i$0$lcssa$i = $i$04$i;
    break;
   }
   $86 = $i$04$i + 1 | 0;
   $87 = $ar$i + ($i$04$i << 2) | 0;
   if ((FUNCTION_TABLE_iii[$cmp & 31]($78, $74) | 0) > -1) {
    HEAP32[$87 >> 2] = $78;
    $$0$be$i = $78;
    $$01$be$i = $$012$i + -1 | 0;
   } else {
    HEAP32[$87 >> 2] = $74;
    $$0$be$i = $74;
    $$01$be$i = $75;
   }
   if (($$01$be$i | 0) <= 1) {
    $i$0$lcssa$i = $86;
    break;
   }
   $$012$i = $$01$be$i;
   $$03$i = $$0$be$i;
   $79 = HEAP32[$ar$i >> 2] | 0;
   $i$04$i = $86;
  }
  if (($i$0$lcssa$i | 0) < 2) $107 = $tmp$i9; else {
   $91 = $ar$i + ($i$0$lcssa$i << 2) | 0;
   HEAP32[$91 >> 2] = $tmp$i9;
   if (!$width) $107 = $tmp$i9; else {
    $93 = $i$0$lcssa$i + -1 | 0;
    $$02$us$i = $width;
    $105 = $tmp$i9;
    while (1) {
     $95 = $$02$us$i >>> 0 > 256 ? 256 : $$02$us$i;
     $104 = HEAP32[$ar$i >> 2] | 0;
     _memcpy($105 | 0, $104 | 0, $95 | 0) | 0;
     $101 = $104;
     $i$01$us$i = 0;
     do {
      $i$01$us$i$looptemp = $i$01$us$i;
      $i$01$us$i = $i$01$us$i + 1 | 0;
      $101$looptemp = $101;
      $101 = HEAP32[$ar$i + ($i$01$us$i << 2) >> 2] | 0;
      _memcpy($101$looptemp | 0, $101 | 0, $95 | 0) | 0;
      HEAP32[$ar$i + ($i$01$us$i$looptemp << 2) >> 2] = $101$looptemp + $95;
     } while (($i$01$us$i$looptemp | 0) != ($93 | 0));
     if (($$02$us$i | 0) == ($95 | 0)) {
      $107 = $tmp$i9;
      break L40;
     }
     $$02$us$i = $$02$us$i - $95 | 0;
     $105 = HEAP32[$91 >> 2] | 0;
    }
   }
  }
 } else $107 = $tmp$i9; while (0);
 STACKTOP = sp;
 return;
}

function __ZN11b2WeldJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $1 = 0, $100 = 0, $103 = 0.0, $107 = 0.0, $110 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $126 = 0, $135 = 0.0, $14 = 0, $140 = 0.0, $152 = 0.0, $156 = 0.0, $158 = 0, $161 = 0, $167 = 0.0, $169 = 0.0, $17 = 0, $171 = 0.0, $177 = 0.0, $178 = 0.0, $18 = 0, $181 = 0.0, $182 = 0, $185 = 0.0, $190 = 0.0, $194 = 0.0, $200 = 0, $202 = 0.0, $204 = 0.0, $205 = 0, $207 = 0.0, $208 = 0, $210 = 0.0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $29 = 0, $3 = 0, $30 = 0, $36 = 0, $38 = 0.0, $4 = 0, $41 = 0.0, $44 = 0.0, $47 = 0, $49 = 0.0, $50 = 0, $51 = 0, $53 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $62 = 0.0, $64 = 0.0, $66 = 0, $72 = 0.0, $73 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $83 = 0.0, $87 = 0.0, $9 = 0, $90 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $K = 0, $wA$0 = 0.0, $wB$0 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $K = sp;
 $1 = HEAP32[$this + 48 >> 2] | 0;
 $3 = HEAP32[$1 + 8 >> 2] | 0;
 $4 = $this + 116 | 0;
 HEAP32[$4 >> 2] = $3;
 $6 = HEAP32[$this + 52 >> 2] | 0;
 $8 = HEAP32[$6 + 8 >> 2] | 0;
 $9 = $this + 120 | 0;
 HEAP32[$9 >> 2] = $8;
 $12 = $1 + 28 | 0;
 $14 = HEAP32[$12 >> 2] | 0;
 $17 = HEAP32[$12 + 4 >> 2] | 0;
 $18 = $this + 140 | 0;
 HEAP32[$18 >> 2] = $14;
 HEAP32[$18 + 4 >> 2] = $17;
 $24 = $6 + 28 | 0;
 $26 = HEAP32[$24 >> 2] | 0;
 $29 = HEAP32[$24 + 4 >> 2] | 0;
 $30 = $this + 148 | 0;
 HEAP32[$30 >> 2] = $26;
 HEAP32[$30 + 4 >> 2] = $29;
 $36 = $this + 156 | 0;
 HEAPF32[$36 >> 2] = +HEAPF32[$1 + 120 >> 2];
 $38 = +HEAPF32[$6 + 120 >> 2];
 HEAPF32[$this + 160 >> 2] = $38;
 $41 = +HEAPF32[$1 + 128 >> 2];
 HEAPF32[$this + 164 >> 2] = $41;
 $44 = +HEAPF32[$6 + 128 >> 2];
 HEAPF32[$this + 168 >> 2] = $44;
 $47 = HEAP32[$data + 24 >> 2] | 0;
 $49 = +HEAPF32[$47 + ($3 * 12 | 0) + 8 >> 2];
 $50 = $data + 28 | 0;
 $51 = HEAP32[$50 >> 2] | 0;
 $53 = $51 + ($3 * 12 | 0) | 0;
 $59 = +HEAPF32[$53 >> 2];
 $60 = +HEAPF32[$53 + 4 >> 2];
 $62 = +HEAPF32[$51 + ($3 * 12 | 0) + 8 >> 2];
 $64 = +HEAPF32[$47 + ($8 * 12 | 0) + 8 >> 2];
 $66 = $51 + ($8 * 12 | 0) | 0;
 $72 = +HEAPF32[$66 >> 2];
 $73 = +HEAPF32[$66 + 4 >> 2];
 $75 = +HEAPF32[$51 + ($8 * 12 | 0) + 8 >> 2];
 $76 = +Math_sin(+$49);
 $77 = +Math_cos(+$49);
 $78 = +Math_sin(+$64);
 $79 = +Math_cos(+$64);
 $80 = $this + 124 | 0;
 $83 = +HEAPF32[$this + 80 >> 2] - (HEAP32[tempDoublePtr >> 2] = $14, +HEAPF32[tempDoublePtr >> 2]);
 $87 = +HEAPF32[$this + 84 >> 2] - (HEAP32[tempDoublePtr >> 2] = $17, +HEAPF32[tempDoublePtr >> 2]);
 $90 = $77 * $83 - $76 * $87;
 $93 = $76 * $83 + $77 * $87;
 $94 = +$90;
 $95 = +$93;
 $96 = $80;
 HEAPF32[$96 >> 2] = $94;
 HEAPF32[$96 + 4 >> 2] = $95;
 $100 = $this + 132 | 0;
 $103 = +HEAPF32[$this + 88 >> 2] - (HEAP32[tempDoublePtr >> 2] = $26, +HEAPF32[tempDoublePtr >> 2]);
 $107 = +HEAPF32[$this + 92 >> 2] - (HEAP32[tempDoublePtr >> 2] = $29, +HEAPF32[tempDoublePtr >> 2]);
 $110 = $79 * $103 - $78 * $107;
 $113 = $78 * $103 + $79 * $107;
 $114 = +$110;
 $115 = +$113;
 $116 = $100;
 HEAPF32[$116 >> 2] = $114;
 HEAPF32[$116 + 4 >> 2] = $115;
 $120 = +HEAPF32[$36 >> 2];
 $121 = $120 + $38;
 $122 = $this + 128 | 0;
 $126 = $this + 136 | 0;
 HEAPF32[$K >> 2] = $121 + $41 * ($93 * $93) + $44 * ($113 * $113);
 $135 = -($41 * ($93 * $90)) - $44 * ($113 * $110);
 HEAPF32[$K + 12 >> 2] = $135;
 $140 = -($41 * $93) - $44 * $113;
 HEAPF32[$K + 24 >> 2] = $140;
 HEAPF32[$K + 4 >> 2] = $135;
 HEAPF32[$K + 16 >> 2] = $121 + $41 * ($90 * $90) + $44 * ($110 * $110);
 $152 = $41 * $90 + $44 * $110;
 HEAPF32[$K + 28 >> 2] = $152;
 HEAPF32[$K + 8 >> 2] = $140;
 HEAPF32[$K + 20 >> 2] = $152;
 $156 = $41 + $44;
 HEAPF32[$K + 32 >> 2] = $156;
 $158 = $this + 68 | 0;
 $161 = $this + 172 | 0;
 if (+HEAPF32[$158 >> 2] > 0.0) {
  __ZNK7b2Mat3312GetInverse22EPS_($K, $161);
  if ($156 > 0.0) $171 = 1.0 / $156; else $171 = 0.0;
  $167 = $64 - $49 - +HEAPF32[$this + 96 >> 2];
  $169 = +HEAPF32[$158 >> 2] * 6.2831854820251465;
  $177 = $169 * ($171 * $169);
  $178 = +HEAPF32[$data >> 2];
  $181 = $178 * ($169 * ($171 * 2.0 * +HEAPF32[$this + 72 >> 2]) + $178 * $177);
  $182 = $this + 100 | 0;
  HEAPF32[$182 >> 2] = $181;
  if ($181 != 0.0) $185 = 1.0 / $181; else $185 = 0.0;
  HEAPF32[$182 >> 2] = $185;
  HEAPF32[$this + 76 >> 2] = $167 * $178 * $177 * $185;
  $190 = $156 + $185;
  if ($190 != 0.0) $194 = 1.0 / $190; else $194 = 0.0;
  HEAPF32[$this + 204 >> 2] = $194;
 } else {
  __ZNK7b2Mat3315GetSymInverse33EPS_($K, $161);
  HEAPF32[$this + 100 >> 2] = 0.0;
  HEAPF32[$this + 76 >> 2] = 0.0;
 }
 $200 = $this + 104 | 0;
 if (!(HEAP8[$data + 20 >> 0] | 0)) {
  HEAPF32[$200 >> 2] = 0.0;
  HEAPF32[$this + 108 >> 2] = 0.0;
  HEAPF32[$this + 112 >> 2] = 0.0;
  $241 = $59;
  $243 = $60;
  $254 = $72;
  $256 = $73;
  $wA$0 = $62;
  $wB$0 = $75;
  $237 = HEAP32[$4 >> 2] | 0;
  $238 = HEAP32[$50 >> 2] | 0;
  $239 = $238 + ($237 * 12 | 0) | 0;
  $240 = +$241;
  $242 = +$243;
  $244 = $239;
  $245 = $244;
  HEAPF32[$245 >> 2] = $240;
  $246 = $244 + 4 | 0;
  $247 = $246;
  HEAPF32[$247 >> 2] = $242;
  $248 = HEAP32[$4 >> 2] | 0;
  $249 = HEAP32[$50 >> 2] | 0;
  $250 = $249 + ($248 * 12 | 0) + 8 | 0;
  HEAPF32[$250 >> 2] = $wA$0;
  $251 = HEAP32[$9 >> 2] | 0;
  $252 = $249 + ($251 * 12 | 0) | 0;
  $253 = +$254;
  $255 = +$256;
  $257 = $252;
  $258 = $257;
  HEAPF32[$258 >> 2] = $253;
  $259 = $257 + 4 | 0;
  $260 = $259;
  HEAPF32[$260 >> 2] = $255;
  $261 = HEAP32[$9 >> 2] | 0;
  $262 = HEAP32[$50 >> 2] | 0;
  $263 = $262 + ($261 * 12 | 0) + 8 | 0;
  HEAPF32[$263 >> 2] = $wB$0;
  STACKTOP = sp;
  return;
 } else {
  $202 = +HEAPF32[$data + 8 >> 2];
  $204 = $202 * +HEAPF32[$200 >> 2];
  HEAPF32[$200 >> 2] = $204;
  $205 = $this + 108 | 0;
  $207 = $202 * +HEAPF32[$205 >> 2];
  HEAPF32[$205 >> 2] = $207;
  $208 = $this + 112 | 0;
  $210 = $202 * +HEAPF32[$208 >> 2];
  HEAPF32[$208 >> 2] = $210;
  $241 = $59 - $120 * $204;
  $243 = $60 - $120 * $207;
  $254 = $72 + $38 * $204;
  $256 = $73 + $38 * $207;
  $wA$0 = $62 - $41 * ($210 + ($207 * +HEAPF32[$80 >> 2] - $204 * +HEAPF32[$122 >> 2]));
  $wB$0 = $75 + $44 * ($210 + ($207 * +HEAPF32[$100 >> 2] - $204 * +HEAPF32[$126 >> 2]));
  $237 = HEAP32[$4 >> 2] | 0;
  $238 = HEAP32[$50 >> 2] | 0;
  $239 = $238 + ($237 * 12 | 0) | 0;
  $240 = +$241;
  $242 = +$243;
  $244 = $239;
  $245 = $244;
  HEAPF32[$245 >> 2] = $240;
  $246 = $244 + 4 | 0;
  $247 = $246;
  HEAPF32[$247 >> 2] = $242;
  $248 = HEAP32[$4 >> 2] | 0;
  $249 = HEAP32[$50 >> 2] | 0;
  $250 = $249 + ($248 * 12 | 0) + 8 | 0;
  HEAPF32[$250 >> 2] = $wA$0;
  $251 = HEAP32[$9 >> 2] | 0;
  $252 = $249 + ($251 * 12 | 0) | 0;
  $253 = +$254;
  $255 = +$256;
  $257 = $252;
  $258 = $257;
  HEAPF32[$258 >> 2] = $253;
  $259 = $257 + 4 | 0;
  $260 = $259;
  HEAPF32[$260 >> 2] = $255;
  $261 = HEAP32[$9 >> 2] | 0;
  $262 = HEAP32[$50 >> 2] | 0;
  $263 = $262 + ($261 * 12 | 0) + 8 | 0;
  HEAPF32[$263 >> 2] = $wB$0;
  STACKTOP = sp;
  return;
 }
}

function __ZN15b2DistanceJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $1 = 0, $101 = 0.0, $105 = 0.0, $108 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $12 = 0, $121 = 0.0, $126 = 0.0, $129 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0, $139 = 0, $14 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $156 = 0.0, $158 = 0.0, $159 = 0.0, $161 = 0.0, $164 = 0.0, $165 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $174 = 0.0, $176 = 0.0, $179 = 0.0, $18 = 0, $182 = 0, $183 = 0.0, $185 = 0.0, $189 = 0.0, $190 = 0.0, $197 = 0.0, $198 = 0.0, $201 = 0.0, $202 = 0, $205 = 0.0, $210 = 0.0, $213 = 0.0, $221 = 0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $24 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0.0, $249 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $29 = 0, $3 = 0, $30 = 0, $36 = 0, $39 = 0, $4 = 0, $42 = 0, $45 = 0, $47 = 0, $49 = 0, $55 = 0.0, $56 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $68 = 0.0, $69 = 0.0, $71 = 0.0, $73 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $82 = 0.0, $84 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $wA$0 = 0.0, $wB$0 = 0.0;
 $1 = HEAP32[$this + 48 >> 2] | 0;
 $3 = HEAP32[$1 + 8 >> 2] | 0;
 $4 = $this + 108 | 0;
 HEAP32[$4 >> 2] = $3;
 $6 = HEAP32[$this + 52 >> 2] | 0;
 $8 = HEAP32[$6 + 8 >> 2] | 0;
 $9 = $this + 112 | 0;
 HEAP32[$9 >> 2] = $8;
 $12 = $1 + 28 | 0;
 $14 = HEAP32[$12 >> 2] | 0;
 $17 = HEAP32[$12 + 4 >> 2] | 0;
 $18 = $this + 140 | 0;
 HEAP32[$18 >> 2] = $14;
 HEAP32[$18 + 4 >> 2] = $17;
 $24 = $6 + 28 | 0;
 $26 = HEAP32[$24 >> 2] | 0;
 $29 = HEAP32[$24 + 4 >> 2] | 0;
 $30 = $this + 148 | 0;
 HEAP32[$30 >> 2] = $26;
 HEAP32[$30 + 4 >> 2] = $29;
 $36 = $this + 156 | 0;
 HEAPF32[$36 >> 2] = +HEAPF32[$1 + 120 >> 2];
 $39 = $this + 160 | 0;
 HEAPF32[$39 >> 2] = +HEAPF32[$6 + 120 >> 2];
 $42 = $this + 164 | 0;
 HEAPF32[$42 >> 2] = +HEAPF32[$1 + 128 >> 2];
 $45 = $this + 168 | 0;
 HEAPF32[$45 >> 2] = +HEAPF32[$6 + 128 >> 2];
 $47 = HEAP32[$data + 24 >> 2] | 0;
 $49 = $47 + ($3 * 12 | 0) | 0;
 $55 = +HEAPF32[$49 >> 2];
 $56 = +HEAPF32[$49 + 4 >> 2];
 $58 = +HEAPF32[$47 + ($3 * 12 | 0) + 8 >> 2];
 $59 = $data + 28 | 0;
 $60 = HEAP32[$59 >> 2] | 0;
 $62 = $60 + ($3 * 12 | 0) | 0;
 $68 = +HEAPF32[$62 >> 2];
 $69 = +HEAPF32[$62 + 4 >> 2];
 $71 = +HEAPF32[$60 + ($3 * 12 | 0) + 8 >> 2];
 $73 = $47 + ($8 * 12 | 0) | 0;
 $79 = +HEAPF32[$73 >> 2];
 $80 = +HEAPF32[$73 + 4 >> 2];
 $82 = +HEAPF32[$47 + ($8 * 12 | 0) + 8 >> 2];
 $84 = $60 + ($8 * 12 | 0) | 0;
 $90 = +HEAPF32[$84 >> 2];
 $91 = +HEAPF32[$84 + 4 >> 2];
 $93 = +HEAPF32[$60 + ($8 * 12 | 0) + 8 >> 2];
 $94 = +Math_sin(+$58);
 $95 = +Math_cos(+$58);
 $96 = +Math_sin(+$82);
 $97 = +Math_cos(+$82);
 $101 = +HEAPF32[$this + 80 >> 2] - (HEAP32[tempDoublePtr >> 2] = $14, +HEAPF32[tempDoublePtr >> 2]);
 $105 = +HEAPF32[$this + 84 >> 2] - (HEAP32[tempDoublePtr >> 2] = $17, +HEAPF32[tempDoublePtr >> 2]);
 $108 = $95 * $101 - $94 * $105;
 $111 = $94 * $101 + $95 * $105;
 $112 = +$108;
 $113 = +$111;
 $114 = $this + 124 | 0;
 HEAPF32[$114 >> 2] = $112;
 HEAPF32[$114 + 4 >> 2] = $113;
 $121 = +HEAPF32[$this + 88 >> 2] - (HEAP32[tempDoublePtr >> 2] = $26, +HEAPF32[tempDoublePtr >> 2]);
 $126 = +HEAPF32[$this + 92 >> 2] - +HEAPF32[$this + 152 >> 2];
 $129 = $97 * $121 - $96 * $126;
 $132 = $96 * $121 + $97 * $126;
 $133 = +$129;
 $134 = +$132;
 $135 = $this + 132 | 0;
 HEAPF32[$135 >> 2] = $133;
 HEAPF32[$135 + 4 >> 2] = $134;
 $139 = $this + 116 | 0;
 $144 = $79 + $129 - $55 - $108;
 $145 = $80 + $132 - $56 - $111;
 $146 = +$144;
 $147 = +$145;
 $148 = $139;
 HEAPF32[$148 >> 2] = $146;
 HEAPF32[$148 + 4 >> 2] = $147;
 $156 = +Math_sqrt(+($144 * $144 + $145 * $145));
 if ($156 > .004999999888241291) {
  $158 = 1.0 / $156;
  $159 = $144 * $158;
  HEAPF32[$139 >> 2] = $159;
  $161 = $158 * $145;
  $164 = $159;
 } else {
  HEAPF32[$139 >> 2] = 0.0;
  $161 = 0.0;
  $164 = 0.0;
 }
 HEAPF32[$this + 120 >> 2] = $161;
 $165 = $161 * $108 - $111 * $164;
 $168 = $161 * $129 - $164 * $132;
 $169 = +HEAPF32[$36 >> 2];
 $170 = +HEAPF32[$42 >> 2];
 $174 = +HEAPF32[$39 >> 2];
 $176 = +HEAPF32[$45 >> 2];
 $179 = $174 + ($169 + $165 * ($165 * $170)) + $168 * ($168 * $176);
 if ($179 != 0.0) $183 = 1.0 / $179; else $183 = 0.0;
 $182 = $this + 172 | 0;
 HEAPF32[$182 >> 2] = $183;
 $185 = +HEAPF32[$this + 68 >> 2];
 if ($185 > 0.0) {
  $189 = $156 - +HEAPF32[$this + 104 >> 2];
  $190 = $185 * 6.2831854820251465;
  $197 = $190 * ($183 * $190);
  $198 = +HEAPF32[$data >> 2];
  $201 = $198 * ($190 * ($183 * 2.0 * +HEAPF32[$this + 72 >> 2]) + $197 * $198);
  $202 = $this + 96 | 0;
  HEAPF32[$202 >> 2] = $201;
  if ($201 != 0.0) $205 = 1.0 / $201; else $205 = 0.0;
  HEAPF32[$202 >> 2] = $205;
  HEAPF32[$this + 76 >> 2] = $197 * ($189 * $198) * $205;
  $210 = $179 + $205;
  if ($210 != 0.0) $213 = 1.0 / $210; else $213 = 0.0;
  HEAPF32[$182 >> 2] = $213;
 } else {
  HEAPF32[$this + 96 >> 2] = 0.0;
  HEAPF32[$this + 76 >> 2] = 0.0;
 }
 if (!(HEAP8[$data + 20 >> 0] | 0)) {
  HEAPF32[$this + 100 >> 2] = 0.0;
  $249 = $68;
  $251 = $69;
  $262 = $90;
  $264 = $91;
  $wA$0 = $71;
  $wB$0 = $93;
  $245 = HEAP32[$4 >> 2] | 0;
  $246 = HEAP32[$59 >> 2] | 0;
  $247 = $246 + ($245 * 12 | 0) | 0;
  $248 = +$249;
  $250 = +$251;
  $252 = $247;
  $253 = $252;
  HEAPF32[$253 >> 2] = $248;
  $254 = $252 + 4 | 0;
  $255 = $254;
  HEAPF32[$255 >> 2] = $250;
  $256 = HEAP32[$4 >> 2] | 0;
  $257 = HEAP32[$59 >> 2] | 0;
  $258 = $257 + ($256 * 12 | 0) + 8 | 0;
  HEAPF32[$258 >> 2] = $wA$0;
  $259 = HEAP32[$9 >> 2] | 0;
  $260 = $257 + ($259 * 12 | 0) | 0;
  $261 = +$262;
  $263 = +$264;
  $265 = $260;
  $266 = $265;
  HEAPF32[$266 >> 2] = $261;
  $267 = $265 + 4 | 0;
  $268 = $267;
  HEAPF32[$268 >> 2] = $263;
  $269 = HEAP32[$9 >> 2] | 0;
  $270 = HEAP32[$59 >> 2] | 0;
  $271 = $270 + ($269 * 12 | 0) + 8 | 0;
  HEAPF32[$271 >> 2] = $wB$0;
  return;
 } else {
  $221 = $this + 100 | 0;
  $223 = +HEAPF32[$data + 8 >> 2] * +HEAPF32[$221 >> 2];
  HEAPF32[$221 >> 2] = $223;
  $224 = $164 * $223;
  $225 = $223 * $161;
  $249 = $68 - $224 * $169;
  $251 = $69 - $225 * $169;
  $262 = $90 + $224 * $174;
  $264 = $91 + $225 * $174;
  $wA$0 = $71 - $170 * ($225 * $108 - $224 * $111);
  $wB$0 = $93 + $176 * ($225 * $129 - $224 * $132);
  $245 = HEAP32[$4 >> 2] | 0;
  $246 = HEAP32[$59 >> 2] | 0;
  $247 = $246 + ($245 * 12 | 0) | 0;
  $248 = +$249;
  $250 = +$251;
  $252 = $247;
  $253 = $252;
  HEAPF32[$253 >> 2] = $248;
  $254 = $252 + 4 | 0;
  $255 = $254;
  HEAPF32[$255 >> 2] = $250;
  $256 = HEAP32[$4 >> 2] | 0;
  $257 = HEAP32[$59 >> 2] | 0;
  $258 = $257 + ($256 * 12 | 0) + 8 | 0;
  HEAPF32[$258 >> 2] = $wA$0;
  $259 = HEAP32[$9 >> 2] | 0;
  $260 = $257 + ($259 * 12 | 0) | 0;
  $261 = +$262;
  $263 = +$264;
  $265 = $260;
  $266 = $265;
  HEAPF32[$266 >> 2] = $261;
  $267 = $265 + 4 | 0;
  $268 = $267;
  HEAPF32[$268 >> 2] = $263;
  $269 = HEAP32[$9 >> 2] | 0;
  $270 = HEAP32[$59 >> 2] | 0;
  $271 = $270 + ($269 * 12 | 0) + 8 | 0;
  HEAPF32[$271 >> 2] = $wB$0;
  return;
 }
}

function _png_handle_iCCP($png_ptr, $info_ptr, $length) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 $length = $length | 0;
 var $$ = 0, $$lcssa = 0, $0 = 0, $101 = 0, $102 = 0, $11 = 0, $112 = 0, $117 = 0, $120 = 0, $135 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $27 = 0, $32 = 0, $57 = 0, $66 = 0, $68 = 0, $70 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $79 = 0, $8 = 0, $9 = 0, $92 = 0, $buffer$1$i$ph = 0, $errmsg$1 = 0, $errmsg$516 = 0, $errmsg$517 = 0, $finished$0 = 0, $keyword = 0, $keyword_length$0$lcssa = 0, $keyword_length$019 = 0, $local_buffer = 0, $profile_header = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1248 | 0;
 $0 = sp + 4 | 0;
 $keyword = sp + 1164 | 0;
 $profile_header = sp + 1032 | 0;
 $local_buffer = sp + 8 | 0;
 $size = sp;
 HEAP32[$0 >> 2] = $length;
 $2 = HEAP32[$png_ptr + 208 >> 2] | 0;
 if (!($2 & 1)) _png_chunk_error($png_ptr, 75496);
 if ($2 & 6) {
  _png_crc_finish($png_ptr, $length) | 0;
  _png_chunk_benign_error($png_ptr, 75472);
  STACKTOP = sp;
  return;
 }
 if ($length >>> 0 < 9) {
  _png_crc_finish($png_ptr, $length) | 0;
  _png_chunk_benign_error($png_ptr, 75672);
  STACKTOP = sp;
  return;
 }
 $8 = $png_ptr + 824 | 0;
 $9 = $png_ptr + 898 | 0;
 $11 = HEAPU16[$9 >> 1] | 0;
 if ($11 & 32768) {
  _png_crc_finish($png_ptr, $length) | 0;
  STACKTOP = sp;
  return;
 }
 do if (!($11 & 4)) {
  $$ = $length >>> 0 < 81 ? $length : 81;
  if ($png_ptr) {
   _png_read_data($png_ptr, $keyword, $$);
   _png_calculate_crc($png_ptr, $keyword, $$);
  }
  $18 = $length - $$ | 0;
  HEAP32[$0 >> 2] = $18;
  if (!$$) {
   $135 = $18;
   $errmsg$517 = 75768;
   label = 44;
  } else {
   $keyword_length$019 = 0;
   while (1) {
    $20 = $keyword_length$019 + 1 | 0;
    if (!(HEAP8[$keyword + $keyword_length$019 >> 0] | 0)) {
     $$lcssa = 1;
     $keyword_length$0$lcssa = $keyword_length$019;
     break;
    }
    $21 = $20 >>> 0 < 80;
    if ($21 & $20 >>> 0 < $$ >>> 0) $keyword_length$019 = $20; else {
     $$lcssa = $21;
     $keyword_length$0$lcssa = $20;
     break;
    }
   }
   if (($keyword_length$0$lcssa | 0) != 0 & $$lcssa) {
    $27 = $keyword_length$0$lcssa + 1 | 0;
    if ($27 >>> 0 < $$ >>> 0) if (!(HEAP8[$keyword + $27 >> 0] | 0)) {
     $32 = $keyword_length$0$lcssa + 2 | 0;
     if (_png_inflate_claim($png_ptr, 1766015824) | 0) {
      $135 = $18;
      $errmsg$517 = HEAP32[$png_ptr + 248 >> 2] | 0;
      label = 44;
      break;
     }
     HEAP32[$size >> 2] = 132;
     HEAP32[$png_ptr + 224 >> 2] = $keyword + $32;
     HEAP32[$png_ptr + 228 >> 2] = $$ - $32;
     _png_inflate_read($png_ptr, $local_buffer, $0, $profile_header, $size, 0);
     L31 : do if (!(HEAP32[$size >> 2] | 0)) {
      $57 = HEAPU8[$profile_header + 1 >> 0] << 16 | HEAPU8[$profile_header >> 0] << 24 | HEAPU8[$profile_header + 2 >> 0] << 8 | HEAPU8[$profile_header + 3 >> 0];
      if (!(_png_icc_check_length($png_ptr, $8, $keyword, $57) | 0)) {
       $errmsg$1 = 0;
       $finished$0 = 1;
      } else if (!(_png_icc_check_header($png_ptr, $8, $keyword, $57, $profile_header, HEAPU8[$png_ptr + 435 >> 0] | 0) | 0)) {
       $errmsg$1 = 0;
       $finished$0 = 1;
      } else {
       $66 = HEAP8[$profile_header + 128 >> 0] | 0;
       $68 = HEAP8[$profile_header + 129 >> 0] | 0;
       $70 = HEAP8[$profile_header + 130 >> 0] | 0;
       $72 = HEAP8[$profile_header + 131 >> 0] | 0;
       $73 = $png_ptr + 788 | 0;
       $74 = HEAP32[$73 >> 2] | 0;
       if (!$74) label = 25; else {
        $76 = $png_ptr + 792 | 0;
        if ((HEAP32[$76 >> 2] | 0) >>> 0 < $57 >>> 0) {
         HEAP32[$73 >> 2] = 0;
         HEAP32[$76 >> 2] = 0;
         _png_free($png_ptr, $74);
         label = 25;
        } else $buffer$1$i$ph = $74;
       }
       if ((label | 0) == 25) {
        $79 = _png_malloc_base($png_ptr, $57) | 0;
        if (!$79) {
         $errmsg$1 = 75712;
         $finished$0 = 1;
         break;
        }
        HEAP32[$73 >> 2] = $79;
        HEAP32[$png_ptr + 792 >> 2] = $57;
        $buffer$1$i$ph = $79;
       }
       _memcpy($buffer$1$i$ph | 0, $profile_header | 0, 132) | 0;
       $92 = (($68 & 255) << 16 | ($66 & 255) << 24 | ($70 & 255) << 8 | $72 & 255) * 12 | 0;
       HEAP32[$size >> 2] = $92;
       _png_inflate_read($png_ptr, $local_buffer, $0, $buffer$1$i$ph + 132 | 0, $size, 0);
       if (HEAP32[$size >> 2] | 0) {
        $errmsg$1 = HEAP32[$png_ptr + 248 >> 2] | 0;
        $finished$0 = 1;
        break;
       }
       if (!(_png_icc_check_tag_table($png_ptr, $8, $keyword, $57, $buffer$1$i$ph) | 0)) {
        $errmsg$1 = 0;
        $finished$0 = 1;
       } else {
        HEAP32[$size >> 2] = $57 + -132 - $92;
        _png_inflate_read($png_ptr, $local_buffer, $0, $buffer$1$i$ph + ($92 + 132) | 0, $size, 1);
        $101 = HEAP32[$0 >> 2] | 0;
        $102 = ($101 | 0) == 0;
        if (!$102) if (!(HEAP32[$png_ptr + 212 >> 2] & 1048576)) {
         $errmsg$1 = 75688;
         $finished$0 = 1;
         break;
        }
        if (HEAP32[$size >> 2] | 0) {
         $errmsg$1 = 75728;
         $finished$0 = 1;
         break;
        }
        if (!$102) _png_chunk_warning($png_ptr, 75688);
        _png_crc_finish($png_ptr, $101) | 0;
        _png_icc_set_sRGB($png_ptr, $8, $buffer$1$i$ph, HEAP32[$png_ptr + 272 >> 2] | 0);
        do if ($info_ptr) {
         _png_free_data($png_ptr, $info_ptr, 16, 0);
         $112 = _png_malloc_base($png_ptr, $27) | 0;
         HEAP32[$info_ptr + 116 >> 2] = $112;
         if (!$112) {
          HEAP16[$9 >> 1] = HEAPU16[$9 >> 1] | 32768;
          _png_colorspace_sync($png_ptr, $info_ptr);
          $errmsg$1 = 75712;
          $finished$0 = 0;
          break L31;
         } else {
          _memcpy($112 | 0, $keyword | 0, $27 | 0) | 0;
          HEAP32[$info_ptr + 124 >> 2] = $57;
          HEAP32[$info_ptr + 120 >> 2] = $buffer$1$i$ph;
          HEAP32[$73 >> 2] = 0;
          $117 = $info_ptr + 232 | 0;
          HEAP32[$117 >> 2] = HEAP32[$117 >> 2] | 16;
          $120 = $info_ptr + 8 | 0;
          HEAP32[$120 >> 2] = HEAP32[$120 >> 2] | 4096;
          _png_colorspace_sync($png_ptr, $info_ptr);
          break;
         }
        } while (0);
        HEAP32[$png_ptr + 220 >> 2] = 0;
        STACKTOP = sp;
        return;
       }
      }
     } else {
      $errmsg$1 = HEAP32[$png_ptr + 248 >> 2] | 0;
      $finished$0 = 1;
     } while (0);
     HEAP32[$png_ptr + 220 >> 2] = 0;
     if ($finished$0) {
      $135 = HEAP32[$0 >> 2] | 0;
      $errmsg$517 = $errmsg$1;
      label = 44;
     } else $errmsg$516 = $errmsg$1;
    } else {
     $135 = $18;
     $errmsg$517 = 75744;
     label = 44;
    } else {
     $135 = $18;
     $errmsg$517 = 75744;
     label = 44;
    }
   } else {
    $135 = $18;
    $errmsg$517 = 75768;
    label = 44;
   }
  }
 } else {
  $135 = $length;
  $errmsg$517 = 75648;
  label = 44;
 } while (0);
 if ((label | 0) == 44) {
  _png_crc_finish($png_ptr, $135) | 0;
  $errmsg$516 = $errmsg$517;
 }
 HEAP16[$9 >> 1] = HEAPU16[$9 >> 1] | 32768;
 _png_colorspace_sync($png_ptr, $info_ptr);
 if (!$errmsg$516) {
  STACKTOP = sp;
  return;
 }
 _png_chunk_benign_error($png_ptr, $errmsg$516);
 STACKTOP = sp;
 return;
}

function __ZN15b2WorldManifold10InitializeEPK10b2ManifoldRK11b2TransformfS5_f($this, $manifold, $xfA, $radiusA, $xfB, $radiusB) {
 $this = $this | 0;
 $manifold = $manifold | 0;
 $xfA = $xfA | 0;
 $radiusA = +$radiusA;
 $xfB = $xfB | 0;
 $radiusB = +$radiusB;
 var $$pre56 = 0.0, $$pre57 = 0.0, $0 = 0, $100 = 0.0, $102 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $112 = 0.0, $114 = 0.0, $116 = 0.0, $118 = 0.0, $12 = 0.0, $122 = 0.0, $128 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0.0, $137 = 0.0, $139 = 0.0, $14 = 0.0, $141 = 0.0, $145 = 0.0, $150 = 0.0, $154 = 0.0, $156 = 0.0, $158 = 0.0, $161 = 0.0, $162 = 0.0, $165 = 0.0, $166 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0, $18 = 0.0, $186 = 0, $189 = 0, $190 = 0.0, $192 = 0.0, $194 = 0, $195 = 0.0, $197 = 0.0, $199 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0, $209 = 0.0, $211 = 0.0, $213 = 0.0, $215 = 0.0, $219 = 0.0, $225 = 0.0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0.0, $234 = 0.0, $236 = 0.0, $238 = 0.0, $24 = 0.0, $242 = 0.0, $247 = 0.0, $251 = 0.0, $253 = 0.0, $255 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0.0, $262 = 0.0, $263 = 0.0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0, $287 = 0.0, $289 = 0.0, $290 = 0.0, $291 = 0.0, $292 = 0, $30 = 0.0, $32 = 0.0, $36 = 0.0, $4 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $60 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $66 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $73 = 0.0, $74 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0, $9 = 0.0, $92 = 0, $93 = 0.0, $95 = 0.0, $97 = 0, $98 = 0.0, $i$047 = 0, $i4$048 = 0;
 $0 = $manifold + 60 | 0;
 if (!(HEAP32[$0 >> 2] | 0)) return;
 $4 = HEAP32[$manifold + 56 >> 2] | 0;
 if (($4 | 0) == 1) {
  $92 = $xfA + 12 | 0;
  $93 = +HEAPF32[$92 >> 2];
  $95 = +HEAPF32[$manifold + 40 >> 2];
  $97 = $xfA + 8 | 0;
  $98 = +HEAPF32[$97 >> 2];
  $100 = +HEAPF32[$manifold + 44 >> 2];
  $102 = $93 * $95 - $98 * $100;
  $105 = $95 * $98 + $93 * $100;
  $106 = +$102;
  $107 = +$105;
  $108 = $this;
  HEAPF32[$108 >> 2] = $106;
  HEAPF32[$108 + 4 >> 2] = $107;
  $112 = +HEAPF32[$92 >> 2];
  $114 = +HEAPF32[$manifold + 48 >> 2];
  $116 = +HEAPF32[$97 >> 2];
  $118 = +HEAPF32[$manifold + 52 >> 2];
  $122 = +HEAPF32[$xfA >> 2] + ($112 * $114 - $116 * $118);
  $128 = $114 * $116 + $112 * $118 + +HEAPF32[$xfA + 4 >> 2];
  if ((HEAP32[$0 >> 2] | 0) <= 0) return;
  $131 = $xfB + 12 | 0;
  $132 = $xfB + 8 | 0;
  $133 = $xfB + 4 | 0;
  $134 = $this + 4 | 0;
  $154 = $102;
  $156 = $105;
  $i$047 = 0;
  while (1) {
   $135 = +HEAPF32[$131 >> 2];
   $137 = +HEAPF32[$manifold + ($i$047 * 20 | 0) >> 2];
   $139 = +HEAPF32[$132 >> 2];
   $141 = +HEAPF32[$manifold + ($i$047 * 20 | 0) + 4 >> 2];
   $145 = +HEAPF32[$xfB >> 2] + ($135 * $137 - $139 * $141);
   $150 = $137 * $139 + $135 * $141 + +HEAPF32[$133 >> 2];
   $158 = $radiusA - ($154 * ($145 - $122) + ($150 - $128) * $156);
   $161 = $145 + $154 * $158;
   $162 = $150 + $156 * $158;
   $165 = $145 - $154 * $radiusB;
   $166 = $150 - $156 * $radiusB;
   $172 = +(($165 + $161) * .5);
   $173 = +(($166 + $162) * .5);
   $174 = $this + ($i$047 << 3) + 8 | 0;
   HEAPF32[$174 >> 2] = $172;
   HEAPF32[$174 + 4 >> 2] = $173;
   HEAPF32[$this + ($i$047 << 2) + 24 >> 2] = +HEAPF32[$this >> 2] * ($165 - $161) + +HEAPF32[$134 >> 2] * ($166 - $162);
   $186 = $i$047 + 1 | 0;
   if (($186 | 0) >= (HEAP32[$0 >> 2] | 0)) break;
   $154 = +HEAPF32[$this >> 2];
   $156 = +HEAPF32[$134 >> 2];
   $i$047 = $186;
  }
  return;
 } else if (!$4) {
  HEAPF32[$this >> 2] = 1.0;
  $5 = $this + 4 | 0;
  HEAPF32[$5 >> 2] = 0.0;
  $7 = +HEAPF32[$xfA + 12 >> 2];
  $9 = +HEAPF32[$manifold + 48 >> 2];
  $12 = +HEAPF32[$xfA + 8 >> 2];
  $14 = +HEAPF32[$manifold + 52 >> 2];
  $18 = +HEAPF32[$xfA >> 2] + ($7 * $9 - $12 * $14);
  $24 = $9 * $12 + $7 * $14 + +HEAPF32[$xfA + 4 >> 2];
  $26 = +HEAPF32[$xfB + 12 >> 2];
  $27 = +HEAPF32[$manifold >> 2];
  $30 = +HEAPF32[$xfB + 8 >> 2];
  $32 = +HEAPF32[$manifold + 4 >> 2];
  $36 = +HEAPF32[$xfB >> 2] + ($26 * $27 - $30 * $32);
  $42 = $27 * $30 + $26 * $32 + +HEAPF32[$xfB + 4 >> 2];
  $43 = $18 - $36;
  $44 = $24 - $42;
  if ($43 * $43 + $44 * $44 > 1.4210854715202004e-14) {
   $49 = $36 - $18;
   $50 = $42 - $24;
   $51 = +$49;
   $52 = +$50;
   $53 = $this;
   HEAPF32[$53 >> 2] = $51;
   HEAPF32[$53 + 4 >> 2] = $52;
   $60 = +Math_sqrt(+($49 * $49 + $50 * $50));
   if ($60 < 1.1920928955078125e-07) {
    $66 = $49;
    $68 = $50;
   } else {
    $62 = 1.0 / $60;
    $63 = $49 * $62;
    HEAPF32[$this >> 2] = $63;
    $64 = $50 * $62;
    HEAPF32[$5 >> 2] = $64;
    $66 = $63;
    $68 = $64;
   }
  } else {
   $66 = 1.0;
   $68 = 0.0;
  }
  $69 = $18 + $66 * $radiusA;
  $70 = $24 + $68 * $radiusA;
  $73 = $36 - $66 * $radiusB;
  $74 = $42 - $68 * $radiusB;
  $80 = +(($69 + $73) * .5);
  $81 = +(($70 + $74) * .5);
  $82 = $this + 8 | 0;
  HEAPF32[$82 >> 2] = $80;
  HEAPF32[$82 + 4 >> 2] = $81;
  HEAPF32[$this + 24 >> 2] = $66 * ($73 - $69) + $68 * ($74 - $70);
  return;
 } else if (($4 | 0) == 2) {
  $189 = $xfB + 12 | 0;
  $190 = +HEAPF32[$189 >> 2];
  $192 = +HEAPF32[$manifold + 40 >> 2];
  $194 = $xfB + 8 | 0;
  $195 = +HEAPF32[$194 >> 2];
  $197 = +HEAPF32[$manifold + 44 >> 2];
  $199 = $190 * $192 - $195 * $197;
  $202 = $192 * $195 + $190 * $197;
  $203 = +$199;
  $204 = +$202;
  $205 = $this;
  HEAPF32[$205 >> 2] = $203;
  HEAPF32[$205 + 4 >> 2] = $204;
  $209 = +HEAPF32[$189 >> 2];
  $211 = +HEAPF32[$manifold + 48 >> 2];
  $213 = +HEAPF32[$194 >> 2];
  $215 = +HEAPF32[$manifold + 52 >> 2];
  $219 = +HEAPF32[$xfB >> 2] + ($209 * $211 - $213 * $215);
  $225 = $211 * $213 + $209 * $215 + +HEAPF32[$xfB + 4 >> 2];
  if ((HEAP32[$0 >> 2] | 0) > 0) {
   $228 = $xfA + 12 | 0;
   $229 = $xfA + 8 | 0;
   $230 = $xfA + 4 | 0;
   $231 = $this + 4 | 0;
   $251 = $199;
   $253 = $202;
   $i4$048 = 0;
   while (1) {
    $232 = +HEAPF32[$228 >> 2];
    $234 = +HEAPF32[$manifold + ($i4$048 * 20 | 0) >> 2];
    $236 = +HEAPF32[$229 >> 2];
    $238 = +HEAPF32[$manifold + ($i4$048 * 20 | 0) + 4 >> 2];
    $242 = +HEAPF32[$xfA >> 2] + ($232 * $234 - $236 * $238);
    $247 = $234 * $236 + $232 * $238 + +HEAPF32[$230 >> 2];
    $255 = $radiusB - ($251 * ($242 - $219) + ($247 - $225) * $253);
    $258 = $242 + $251 * $255;
    $259 = $247 + $253 * $255;
    $262 = $242 - $251 * $radiusA;
    $263 = $247 - $253 * $radiusA;
    $269 = +(($262 + $258) * .5);
    $270 = +(($263 + $259) * .5);
    $271 = $this + ($i4$048 << 3) + 8 | 0;
    HEAPF32[$271 >> 2] = $269;
    HEAPF32[$271 + 4 >> 2] = $270;
    HEAPF32[$this + ($i4$048 << 2) + 24 >> 2] = +HEAPF32[$this >> 2] * ($262 - $258) + +HEAPF32[$231 >> 2] * ($263 - $259);
    $i4$048 = $i4$048 + 1 | 0;
    $$pre56 = +HEAPF32[$this >> 2];
    $$pre57 = +HEAPF32[$231 >> 2];
    if (($i4$048 | 0) >= (HEAP32[$0 >> 2] | 0)) {
     $287 = $$pre56;
     $289 = $$pre57;
     break;
    } else {
     $251 = $$pre56;
     $253 = $$pre57;
    }
   }
  } else {
   $287 = $199;
   $289 = $202;
  }
  $290 = +-$287;
  $291 = +-$289;
  $292 = $this;
  HEAPF32[$292 >> 2] = $290;
  HEAPF32[$292 + 4 >> 2] = $291;
  return;
 } else return;
}

function _png_free_data($png_ptr, $info_ptr, $mask, $num) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 $mask = $mask | 0;
 $num = $num | 0;
 var $$lcssa = 0, $$lcssa15 = 0, $$lcssa22 = 0, $$lcssa3 = 0, $$lcssa9 = 0, $$pre$phiZ2D = 0, $$pre37 = 0, $103 = 0, $11 = 0, $111 = 0, $112 = 0, $115 = 0, $116 = 0, $127 = 0, $128 = 0, $132 = 0, $137 = 0, $139 = 0, $142 = 0, $144 = 0, $149 = 0, $151 = 0, $153 = 0, $159 = 0, $161 = 0, $162 = 0, $164 = 0, $168 = 0, $173 = 0, $174 = 0, $181 = 0, $19 = 0, $2 = 0, $24 = 0, $26 = 0, $29 = 0, $3 = 0, $31 = 0, $36 = 0, $38 = 0, $40 = 0, $42 = 0, $47 = 0, $49 = 0, $51 = 0, $53 = 0, $54 = 0, $56 = 0, $6 = 0, $60 = 0, $66 = 0, $67 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $81 = 0, $82 = 0, $98 = 0, $99 = 0, $i$023 = 0, $i1$016 = 0, $i2$010 = 0, $i3$04 = 0, $row$01 = 0;
 if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) return;
 $2 = $info_ptr + 136 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 do if (!$3) $$pre$phiZ2D = $info_ptr + 232 | 0; else {
  $6 = $info_ptr + 232 | 0;
  if (!($mask & 16384 & HEAP32[$6 >> 2])) $$pre$phiZ2D = $6; else {
   if (($num | 0) != -1) {
    _png_free($png_ptr, HEAP32[$3 + ($num * 28 | 0) + 4 >> 2] | 0);
    HEAP32[(HEAP32[$2 >> 2] | 0) + ($num * 28 | 0) + 4 >> 2] = 0;
    $$pre$phiZ2D = $6;
    break;
   }
   $11 = $info_ptr + 128 | 0;
   if ((HEAP32[$11 >> 2] | 0) > 0) {
    $19 = $3;
    $i$023 = 0;
    while (1) {
     _png_free($png_ptr, HEAP32[$19 + ($i$023 * 28 | 0) + 4 >> 2] | 0);
     $i$023 = $i$023 + 1 | 0;
     $24 = HEAP32[$2 >> 2] | 0;
     if (($i$023 | 0) >= (HEAP32[$11 >> 2] | 0)) {
      $$lcssa22 = $24;
      break;
     } else $19 = $24;
    }
   } else $$lcssa22 = $3;
   _png_free($png_ptr, $$lcssa22);
   HEAP32[$2 >> 2] = 0;
   HEAP32[$11 >> 2] = 0;
   $$pre$phiZ2D = $6;
  }
 } while (0);
 $26 = HEAP32[$$pre$phiZ2D >> 2] | 0;
 if (!($mask & 8192 & $26)) $36 = $26; else {
  $29 = $info_ptr + 156 | 0;
  _png_free($png_ptr, HEAP32[$29 >> 2] | 0);
  HEAP32[$29 >> 2] = 0;
  $31 = $info_ptr + 8 | 0;
  HEAP32[$31 >> 2] = HEAP32[$31 >> 2] & -17;
  $36 = HEAP32[$$pre$phiZ2D >> 2] | 0;
 }
 if (!($mask & 256 & $36)) $47 = $36; else {
  $38 = $info_ptr + 256 | 0;
  _png_free($png_ptr, HEAP32[$38 >> 2] | 0);
  $40 = $info_ptr + 260 | 0;
  _png_free($png_ptr, HEAP32[$40 >> 2] | 0);
  HEAP32[$38 >> 2] = 0;
  HEAP32[$40 >> 2] = 0;
  $42 = $info_ptr + 8 | 0;
  HEAP32[$42 >> 2] = HEAP32[$42 >> 2] & -16385;
  $47 = HEAP32[$$pre$phiZ2D >> 2] | 0;
 }
 if (!($mask & 128 & $47)) $72 = $47; else {
  $49 = $info_ptr + 208 | 0;
  _png_free($png_ptr, HEAP32[$49 >> 2] | 0);
  $51 = $info_ptr + 220 | 0;
  _png_free($png_ptr, HEAP32[$51 >> 2] | 0);
  HEAP32[$49 >> 2] = 0;
  HEAP32[$51 >> 2] = 0;
  $53 = $info_ptr + 224 | 0;
  $54 = HEAP32[$53 >> 2] | 0;
  if ($54) {
   $56 = $info_ptr + 229 | 0;
   if (!(HEAP8[$56 >> 0] | 0)) $$lcssa15 = $54; else {
    $60 = $54;
    $i1$016 = 0;
    while (1) {
     _png_free($png_ptr, HEAP32[$60 + ($i1$016 << 2) >> 2] | 0);
     $i1$016 = $i1$016 + 1 | 0;
     $66 = HEAP32[$53 >> 2] | 0;
     if (($i1$016 | 0) >= (HEAPU8[$56 >> 0] | 0)) {
      $$lcssa15 = $66;
      break;
     } else $60 = $66;
    }
   }
   _png_free($png_ptr, $$lcssa15);
   HEAP32[$53 >> 2] = 0;
  }
  $67 = $info_ptr + 8 | 0;
  HEAP32[$67 >> 2] = HEAP32[$67 >> 2] & -1025;
  $72 = HEAP32[$$pre$phiZ2D >> 2] | 0;
 }
 if ($mask & 16 & $72) {
  $74 = $info_ptr + 116 | 0;
  _png_free($png_ptr, HEAP32[$74 >> 2] | 0);
  $76 = $info_ptr + 120 | 0;
  _png_free($png_ptr, HEAP32[$76 >> 2] | 0);
  HEAP32[$74 >> 2] = 0;
  HEAP32[$76 >> 2] = 0;
  $78 = $info_ptr + 8 | 0;
  HEAP32[$78 >> 2] = HEAP32[$78 >> 2] & -4097;
 }
 $81 = $info_ptr + 244 | 0;
 $82 = HEAP32[$81 >> 2] | 0;
 do if ($82) if ($mask & 32 & HEAP32[$$pre$phiZ2D >> 2]) {
  if (($num | 0) != -1) {
   _png_free($png_ptr, HEAP32[$82 + ($num << 4) >> 2] | 0);
   _png_free($png_ptr, HEAP32[(HEAP32[$81 >> 2] | 0) + ($num << 4) + 8 >> 2] | 0);
   HEAP32[(HEAP32[$81 >> 2] | 0) + ($num << 4) >> 2] = 0;
   HEAP32[(HEAP32[$81 >> 2] | 0) + ($num << 4) + 8 >> 2] = 0;
   break;
  }
  $98 = $info_ptr + 248 | 0;
  $99 = HEAP32[$98 >> 2] | 0;
  if ($99) {
   if (($99 | 0) > 0) {
    $103 = $82;
    $i2$010 = 0;
    while (1) {
     _png_free($png_ptr, HEAP32[$103 + ($i2$010 << 4) >> 2] | 0);
     _png_free($png_ptr, HEAP32[(HEAP32[$81 >> 2] | 0) + ($i2$010 << 4) + 8 >> 2] | 0);
     $i2$010 = $i2$010 + 1 | 0;
     $111 = HEAP32[$81 >> 2] | 0;
     if (($i2$010 | 0) >= (HEAP32[$98 >> 2] | 0)) {
      $$lcssa9 = $111;
      break;
     } else $103 = $111;
    }
   } else $$lcssa9 = $82;
   _png_free($png_ptr, $$lcssa9);
   HEAP32[$81 >> 2] = 0;
   HEAP32[$98 >> 2] = 0;
  }
  $112 = $info_ptr + 8 | 0;
  HEAP32[$112 >> 2] = HEAP32[$112 >> 2] & -8193;
 } while (0);
 $115 = $info_ptr + 236 | 0;
 $116 = HEAP32[$115 >> 2] | 0;
 do if ($116) if ($mask & 512 & HEAP32[$$pre$phiZ2D >> 2]) {
  if (($num | 0) != -1) {
   _png_free($png_ptr, HEAP32[$116 + ($num * 20 | 0) + 8 >> 2] | 0);
   HEAP32[(HEAP32[$115 >> 2] | 0) + ($num * 20 | 0) + 8 >> 2] = 0;
   break;
  }
  $127 = $info_ptr + 240 | 0;
  $128 = HEAP32[$127 >> 2] | 0;
  if ($128) {
   if (($128 | 0) > 0) {
    $132 = $116;
    $i3$04 = 0;
    while (1) {
     _png_free($png_ptr, HEAP32[$132 + ($i3$04 * 20 | 0) + 8 >> 2] | 0);
     $i3$04 = $i3$04 + 1 | 0;
     $137 = HEAP32[$115 >> 2] | 0;
     if (($i3$04 | 0) >= (HEAP32[$127 >> 2] | 0)) {
      $$lcssa3 = $137;
      break;
     } else $132 = $137;
    }
   } else $$lcssa3 = $116;
   _png_free($png_ptr, $$lcssa3);
   HEAP32[$115 >> 2] = 0;
   HEAP32[$127 >> 2] = 0;
  }
 } while (0);
 $139 = HEAP32[$$pre$phiZ2D >> 2] | 0;
 if (!($mask & 8 & $139)) $149 = $139; else {
  $142 = $info_ptr + 204 | 0;
  _png_free($png_ptr, HEAP32[$142 >> 2] | 0);
  HEAP32[$142 >> 2] = 0;
  $144 = $info_ptr + 8 | 0;
  HEAP32[$144 >> 2] = HEAP32[$144 >> 2] & -65;
  $149 = HEAP32[$$pre$phiZ2D >> 2] | 0;
 }
 if (!($mask & 4096 & $149)) $159 = $149; else {
  $151 = $info_ptr + 16 | 0;
  _png_free($png_ptr, HEAP32[$151 >> 2] | 0);
  HEAP32[$151 >> 2] = 0;
  $153 = $info_ptr + 8 | 0;
  HEAP32[$153 >> 2] = HEAP32[$153 >> 2] & -9;
  HEAP16[$info_ptr + 20 >> 1] = 0;
  $159 = HEAP32[$$pre$phiZ2D >> 2] | 0;
 }
 if (!($mask & 64 & $159)) $181 = $159; else {
  $161 = $info_ptr + 264 | 0;
  $162 = HEAP32[$161 >> 2] | 0;
  if (!$162) $$pre37 = $159; else {
   $164 = $info_ptr + 4 | 0;
   if (!(HEAP32[$164 >> 2] | 0)) $$lcssa = $162; else {
    $168 = $162;
    $row$01 = 0;
    while (1) {
     _png_free($png_ptr, HEAP32[$168 + ($row$01 << 2) >> 2] | 0);
     $row$01 = $row$01 + 1 | 0;
     $173 = HEAP32[$161 >> 2] | 0;
     if ($row$01 >>> 0 >= (HEAP32[$164 >> 2] | 0) >>> 0) {
      $$lcssa = $173;
      break;
     } else $168 = $173;
    }
   }
   _png_free($png_ptr, $$lcssa);
   HEAP32[$161 >> 2] = 0;
   $$pre37 = HEAP32[$$pre$phiZ2D >> 2] | 0;
  }
  $174 = $info_ptr + 8 | 0;
  HEAP32[$174 >> 2] = HEAP32[$174 >> 2] & -32769;
  $181 = $$pre37;
 }
 HEAP32[$$pre$phiZ2D >> 2] = $181 & ~(($num | 0) == -1 ? $mask : $mask & -16929);
 return;
}

function _png_build_gamma_table($png_ptr, $bit_depth) {
 $png_ptr = $png_ptr | 0;
 $bit_depth = $bit_depth | 0;
 var $$ = 0, $$0$i$i = 0, $$0$i$i22 = 0, $$0$i$i8 = 0, $$0$i3 = 0, $$0$i37 = 0, $0 = 0, $110 = 0, $112 = 0, $115 = 0, $124 = 0, $126 = 0, $131 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $145 = 0.0, $149 = 0, $150 = 0, $151 = 0, $153 = 0, $155 = 0, $156 = 0, $161 = 0, $163 = 0, $164 = 0, $168 = 0.0, $17 = 0.0, $178 = 0, $200 = 0.0, $204 = 0, $209 = 0, $21 = 0, $214 = 0.0, $218 = 0, $219 = 0, $22 = 0, $224 = 0.0, $229 = 0, $25 = 0.0, $46 = 0, $51 = 0.0, $55 = 0, $58 = 0.0, $7 = 0, $74 = 0, $75 = 0, $8 = 0, $80 = 0.0, $85 = 0, $86 = 0, $89 = 0.0, $i$01$i = 0, $i$01$i20 = 0, $i$01$i6 = 0, $i$08$i = 0, $i$14$i = 0, $i$14$i11 = 0, $i$14$i25 = 0, $i$17$i = 0, $last$06$i = 0, $last$1$lcssa$i = 0, $last$12$i = 0, $last$21$i = 0, $shift$0 = 0, $shift$1 = 0, $sig_bit$1 = 0, label = 0;
 $0 = $png_ptr + 492 | 0;
 if (!(HEAP32[$0 >> 2] | 0)) {
  if (HEAP32[$png_ptr + 496 >> 2] | 0) label = 3;
 } else label = 3;
 if ((label | 0) == 3) {
  _png_warning($png_ptr, 73632);
  _png_destroy_gamma_table($png_ptr);
 }
 if (($bit_depth | 0) >= 9) {
  if (!(HEAP8[$png_ptr + 435 >> 0] & 2)) $sig_bit$1 = HEAP8[$png_ptr + 519 >> 0] | 0; else {
   $110 = HEAP8[$png_ptr + 516 >> 0] | 0;
   $112 = HEAP8[$png_ptr + 517 >> 0] | 0;
   $$ = ($112 & 255) > ($110 & 255) ? $112 : $110;
   $115 = HEAP8[$png_ptr + 518 >> 0] | 0;
   $sig_bit$1 = ($115 & 255) > ($$ & 255) ? $115 : $$;
  }
  if ($sig_bit$1 << 24 >> 24 != 0 & ($sig_bit$1 & 255) < 16) $shift$0 = 16 - ($sig_bit$1 & 255) & 255; else $shift$0 = 0;
  $124 = $png_ptr + 216 | 0;
  $126 = HEAP32[$124 >> 2] & 67109888;
  $shift$1 = ($126 | 0) != 0 & ($shift$0 & 255) < 5 ? 5 : $shift$0;
  $131 = ($shift$1 & 255) > 8 ? 8 : $shift$1 & 255;
  HEAP32[$png_ptr + 484 >> 2] = $131;
  $134 = $png_ptr + 496 | 0;
  $135 = $png_ptr + 488 | 0;
  $136 = HEAP32[$135 >> 2] | 0;
  $137 = ($136 | 0) > 0;
  if (!$126) {
   if ($137) {
    $200 = +Math_floor(+(1.0e15 / +(HEAP32[$png_ptr + 824 >> 2] | 0) / +($136 | 0) + .5));
    if ($200 <= 2147483647.0 & $200 >= -2147483648.0) $204 = ~~$200; else $204 = 0;
   } else $204 = 1e5;
   _png_build_16bit_table($png_ptr, $134, $131, $204);
  } else {
   if ($137) {
    $145 = +Math_floor(+(+($136 | 0) * (+(HEAP32[$png_ptr + 824 >> 2] | 0) * 1.0e-05) + .5));
    if ($145 <= 2147483647.0 & $145 >= -2147483648.0) $168 = +(~~$145 | 0) * 1.0e-05; else $168 = 0.0;
   } else $168 = 1.0;
   $149 = 8 - $131 | 0;
   $150 = 1 << $149;
   $151 = 16 - $131 | 0;
   $153 = _png_calloc($png_ptr, $150 << 2) | 0;
   HEAP32[$134 >> 2] = $153;
   $i$08$i = 0;
   do {
    HEAP32[$153 + ($i$08$i << 2) >> 2] = _png_malloc($png_ptr, 512) | 0;
    $i$08$i = $i$08$i + 1 | 0;
   } while ($i$08$i >>> 0 < $150 >>> 0);
   $155 = (1 << $151) + -1 | 0;
   $156 = 255 >>> $131;
   $i$17$i = 0;
   $last$06$i = 0;
   while (1) {
    $163 = $i$17$i * 257 | 0;
    $164 = $163 & 65535;
    $178 = ((((Math_imul(~~+Math_floor(+(+Math_pow(+(+($163 + 128 | 0) / 65535.0), +$168) * 65535.0 + .5)) & 65535, $155) | 0) + 32768 | 0) >>> 0) / 65535 | 0) + 1 | 0;
    if ($last$06$i >>> 0 < $178 >>> 0) {
     $last$12$i = $last$06$i;
     do {
      HEAP16[(HEAP32[$153 + (($last$12$i & $156) << 2) >> 2] | 0) + ($last$12$i >>> $149 << 1) >> 1] = $164;
      $last$12$i = $last$12$i + 1 | 0;
     } while (($last$12$i | 0) != ($178 | 0));
     $last$1$lcssa$i = $178;
    } else $last$1$lcssa$i = $last$06$i;
    $i$17$i = $i$17$i + 1 | 0;
    if (($i$17$i | 0) == 255) break; else $last$06$i = $last$1$lcssa$i;
   }
   $161 = $150 << 8;
   if ($last$1$lcssa$i >>> 0 < $161 >>> 0) {
    $last$21$i = $last$1$lcssa$i;
    do {
     HEAP16[(HEAP32[$153 + (($last$21$i & $156) << 2) >> 2] | 0) + ($last$21$i >>> $149 << 1) >> 1] = -1;
     $last$21$i = $last$21$i + 1 | 0;
    } while (($last$21$i | 0) != ($161 | 0));
   }
  }
  if (!(HEAP32[$124 >> 2] & 6291584)) return;
  $209 = $png_ptr + 824 | 0;
  $214 = +Math_floor(+(1.0e10 / +(HEAP32[$209 >> 2] | 0) + .5));
  if ($214 <= 2147483647.0 & $214 >= -2147483648.0) $$0$i37 = ~~$214; else $$0$i37 = 0;
  _png_build_16bit_table($png_ptr, $png_ptr + 512 | 0, $131, $$0$i37);
  $218 = $png_ptr + 508 | 0;
  $219 = HEAP32[$135 >> 2] | 0;
  if (($219 | 0) > 0) {
   $224 = +Math_floor(+(1.0e10 / +($219 | 0) + .5));
   if ($224 <= 2147483647.0 & $224 >= -2147483648.0) $229 = ~~$224; else $229 = 0;
  } else $229 = HEAP32[$209 >> 2] | 0;
  _png_build_16bit_table($png_ptr, $218, $131, $229);
  return;
 }
 $7 = $png_ptr + 488 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 if (($8 | 0) > 0) {
  $17 = +Math_floor(+(1.0e15 / +(HEAP32[$png_ptr + 824 >> 2] | 0) / +($8 | 0) + .5));
  if ($17 <= 2147483647.0 & $17 >= -2147483648.0) $22 = ~~$17; else $22 = 0;
 } else $22 = 1e5;
 $21 = _png_malloc($png_ptr, 256) | 0;
 HEAP32[$0 >> 2] = $21;
 if (($22 + -95e3 | 0) >>> 0 > 1e4) {
  $25 = +($22 | 0) * 1.0e-05;
  $i$01$i = 0;
  do {
   if (($i$01$i | 0) != 0 & $i$01$i >>> 0 < 255) $$0$i$i = ~~+Math_floor(+(+Math_pow(+(+($i$01$i | 0) / 255.0), +$25) * 255.0 + .5)) & 255; else $$0$i$i = $i$01$i & 255;
   HEAP8[$21 + $i$01$i >> 0] = $$0$i$i;
   $i$01$i = $i$01$i + 1 | 0;
  } while (($i$01$i | 0) != 256);
 } else {
  $i$14$i = 0;
  do {
   HEAP8[$21 + $i$14$i >> 0] = $i$14$i;
   $i$14$i = $i$14$i + 1 | 0;
  } while (($i$14$i | 0) != 256);
 }
 if (!(HEAP32[$png_ptr + 216 >> 2] & 6291584)) return;
 $46 = $png_ptr + 824 | 0;
 $51 = +Math_floor(+(1.0e10 / +(HEAP32[$46 >> 2] | 0) + .5));
 if ($51 <= 2147483647.0 & $51 >= -2147483648.0) $$0$i3 = ~~$51; else $$0$i3 = 0;
 $55 = _png_malloc($png_ptr, 256) | 0;
 HEAP32[$png_ptr + 504 >> 2] = $55;
 if (($$0$i3 + -95e3 | 0) >>> 0 > 1e4) {
  $58 = +($$0$i3 | 0) * 1.0e-05;
  $i$01$i6 = 0;
  do {
   if (($i$01$i6 | 0) != 0 & $i$01$i6 >>> 0 < 255) $$0$i$i8 = ~~+Math_floor(+(+Math_pow(+(+($i$01$i6 | 0) / 255.0), +$58) * 255.0 + .5)) & 255; else $$0$i$i8 = $i$01$i6 & 255;
   HEAP8[$55 + $i$01$i6 >> 0] = $$0$i$i8;
   $i$01$i6 = $i$01$i6 + 1 | 0;
  } while (($i$01$i6 | 0) != 256);
 } else {
  $i$14$i11 = 0;
  do {
   HEAP8[$55 + $i$14$i11 >> 0] = $i$14$i11;
   $i$14$i11 = $i$14$i11 + 1 | 0;
  } while (($i$14$i11 | 0) != 256);
 }
 $74 = $png_ptr + 500 | 0;
 $75 = HEAP32[$7 >> 2] | 0;
 if (($75 | 0) > 0) {
  $80 = +Math_floor(+(1.0e10 / +($75 | 0) + .5));
  if ($80 <= 2147483647.0 & $80 >= -2147483648.0) $86 = ~~$80; else $86 = 0;
 } else $86 = HEAP32[$46 >> 2] | 0;
 $85 = _png_malloc($png_ptr, 256) | 0;
 HEAP32[$74 >> 2] = $85;
 if (($86 + -95e3 | 0) >>> 0 <= 1e4) {
  $i$14$i25 = 0;
  do {
   HEAP8[$85 + $i$14$i25 >> 0] = $i$14$i25;
   $i$14$i25 = $i$14$i25 + 1 | 0;
  } while (($i$14$i25 | 0) != 256);
  return;
 }
 $89 = +($86 | 0) * 1.0e-05;
 $i$01$i20 = 0;
 do {
  if (($i$01$i20 | 0) != 0 & $i$01$i20 >>> 0 < 255) $$0$i$i22 = ~~+Math_floor(+(+Math_pow(+(+($i$01$i20 | 0) / 255.0), +$89) * 255.0 + .5)) & 255; else $$0$i$i22 = $i$01$i20 & 255;
  HEAP8[$85 + $i$01$i20 >> 0] = $$0$i$i22;
  $i$01$i20 = $i$01$i20 + 1 | 0;
 } while (($i$01$i20 | 0) != 256);
 return;
}

function __ZN12b2MotorJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $1 = 0, $101 = 0.0, $104 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $110 = 0, $115 = 0.0, $117 = 0.0, $12 = 0, $120 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $144 = 0.0, $146 = 0.0, $150 = 0.0, $153 = 0.0, $158 = 0.0, $164 = 0.0, $17 = 0, $176 = 0.0, $179 = 0.0, $18 = 0, $187 = 0.0, $188 = 0.0, $189 = 0, $201 = 0, $202 = 0, $203 = 0.0, $205 = 0.0, $206 = 0, $208 = 0.0, $210 = 0, $212 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $29 = 0, $3 = 0, $30 = 0, $36 = 0, $39 = 0, $4 = 0, $42 = 0, $45 = 0, $47 = 0, $49 = 0, $55 = 0.0, $56 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $68 = 0.0, $69 = 0.0, $71 = 0.0, $73 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $82 = 0.0, $84 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $99 = 0.0, $det$0$i = 0.0, $storemerge = 0.0, $wA$0 = 0.0, $wB$0 = 0.0;
 $1 = HEAP32[$this + 48 >> 2] | 0;
 $3 = HEAP32[$1 + 8 >> 2] | 0;
 $4 = $this + 104 | 0;
 HEAP32[$4 >> 2] = $3;
 $6 = HEAP32[$this + 52 >> 2] | 0;
 $8 = HEAP32[$6 + 8 >> 2] | 0;
 $9 = $this + 108 | 0;
 HEAP32[$9 >> 2] = $8;
 $12 = $1 + 28 | 0;
 $14 = HEAP32[$12 >> 2] | 0;
 $17 = HEAP32[$12 + 4 >> 2] | 0;
 $18 = $this + 128 | 0;
 HEAP32[$18 >> 2] = $14;
 HEAP32[$18 + 4 >> 2] = $17;
 $24 = $6 + 28 | 0;
 $26 = HEAP32[$24 >> 2] | 0;
 $29 = HEAP32[$24 + 4 >> 2] | 0;
 $30 = $this + 136 | 0;
 HEAP32[$30 >> 2] = $26;
 HEAP32[$30 + 4 >> 2] = $29;
 $36 = $this + 156 | 0;
 HEAPF32[$36 >> 2] = +HEAPF32[$1 + 120 >> 2];
 $39 = $this + 160 | 0;
 HEAPF32[$39 >> 2] = +HEAPF32[$6 + 120 >> 2];
 $42 = $this + 164 | 0;
 HEAPF32[$42 >> 2] = +HEAPF32[$1 + 128 >> 2];
 $45 = $this + 168 | 0;
 HEAPF32[$45 >> 2] = +HEAPF32[$6 + 128 >> 2];
 $47 = HEAP32[$data + 24 >> 2] | 0;
 $49 = $47 + ($3 * 12 | 0) | 0;
 $55 = +HEAPF32[$49 >> 2];
 $56 = +HEAPF32[$49 + 4 >> 2];
 $58 = +HEAPF32[$47 + ($3 * 12 | 0) + 8 >> 2];
 $59 = $data + 28 | 0;
 $60 = HEAP32[$59 >> 2] | 0;
 $62 = $60 + ($3 * 12 | 0) | 0;
 $68 = +HEAPF32[$62 >> 2];
 $69 = +HEAPF32[$62 + 4 >> 2];
 $71 = +HEAPF32[$60 + ($3 * 12 | 0) + 8 >> 2];
 $73 = $47 + ($8 * 12 | 0) | 0;
 $79 = +HEAPF32[$73 >> 2];
 $80 = +HEAPF32[$73 + 4 >> 2];
 $82 = +HEAPF32[$47 + ($8 * 12 | 0) + 8 >> 2];
 $84 = $60 + ($8 * 12 | 0) | 0;
 $90 = +HEAPF32[$84 >> 2];
 $91 = +HEAPF32[$84 + 4 >> 2];
 $93 = +HEAPF32[$60 + ($8 * 12 | 0) + 8 >> 2];
 $94 = +Math_sin(+$58);
 $95 = +Math_cos(+$58);
 $96 = +Math_sin(+$82);
 $97 = +Math_cos(+$82);
 $99 = -(HEAP32[tempDoublePtr >> 2] = $14, +HEAPF32[tempDoublePtr >> 2]);
 $101 = -(HEAP32[tempDoublePtr >> 2] = $17, +HEAPF32[tempDoublePtr >> 2]);
 $104 = $95 * $99 - $94 * $101;
 $107 = $94 * $99 + $95 * $101;
 $108 = +$104;
 $109 = +$107;
 $110 = $this + 112 | 0;
 HEAPF32[$110 >> 2] = $108;
 HEAPF32[$110 + 4 >> 2] = $109;
 $115 = -(HEAP32[tempDoublePtr >> 2] = $26, +HEAPF32[tempDoublePtr >> 2]);
 $117 = -(HEAP32[tempDoublePtr >> 2] = $29, +HEAPF32[tempDoublePtr >> 2]);
 $120 = $97 * $115 - $96 * $117;
 $123 = $96 * $115 + $97 * $117;
 $124 = +$120;
 $125 = +$123;
 $126 = $this + 120 | 0;
 HEAPF32[$126 >> 2] = $124;
 HEAPF32[$126 + 4 >> 2] = $125;
 $130 = +HEAPF32[$36 >> 2];
 $131 = +HEAPF32[$39 >> 2];
 $132 = +HEAPF32[$42 >> 2];
 $133 = +HEAPF32[$45 >> 2];
 $134 = $130 + $131;
 $140 = $134 + $107 * ($132 * $107) + $123 * ($133 * $123);
 $141 = $132 * $104;
 $144 = $133 * $120;
 $146 = -($107 * $141) - $123 * $144;
 $150 = $134 + $104 * $141 + $120 * $144;
 $153 = $140 * $150 - $146 * $146;
 if ($153 != 0.0) $det$0$i = 1.0 / $153; else $det$0$i = $153;
 $158 = -($146 * $det$0$i);
 HEAPF32[$this + 172 >> 2] = $150 * $det$0$i;
 HEAPF32[$this + 176 >> 2] = $158;
 HEAPF32[$this + 180 >> 2] = $158;
 HEAPF32[$this + 184 >> 2] = $140 * $det$0$i;
 $164 = $132 + $133;
 if ($164 > 0.0) $storemerge = 1.0 / $164; else $storemerge = $164;
 HEAPF32[$this + 188 >> 2] = $storemerge;
 $176 = +HEAPF32[$this + 68 >> 2];
 $179 = +HEAPF32[$this + 72 >> 2];
 $187 = +($79 + $120 - $55 - $104 - ($95 * $176 - $94 * $179));
 $188 = +($80 + $123 - $56 - $107 - ($94 * $176 + $95 * $179));
 $189 = $this + 144 | 0;
 HEAPF32[$189 >> 2] = $187;
 HEAPF32[$189 + 4 >> 2] = $188;
 HEAPF32[$this + 152 >> 2] = $82 - $58 - +HEAPF32[$this + 76 >> 2];
 $201 = $this + 80 | 0;
 if (!(HEAP8[$data + 20 >> 0] | 0)) {
  HEAPF32[$201 >> 2] = 0.0;
  HEAPF32[$this + 84 >> 2] = 0.0;
  HEAPF32[$this + 88 >> 2] = 0.0;
  $239 = $68;
  $241 = $69;
  $252 = $90;
  $254 = $91;
  $wA$0 = $71;
  $wB$0 = $93;
  $235 = HEAP32[$4 >> 2] | 0;
  $236 = HEAP32[$59 >> 2] | 0;
  $237 = $236 + ($235 * 12 | 0) | 0;
  $238 = +$239;
  $240 = +$241;
  $242 = $237;
  $243 = $242;
  HEAPF32[$243 >> 2] = $238;
  $244 = $242 + 4 | 0;
  $245 = $244;
  HEAPF32[$245 >> 2] = $240;
  $246 = HEAP32[$4 >> 2] | 0;
  $247 = HEAP32[$59 >> 2] | 0;
  $248 = $247 + ($246 * 12 | 0) + 8 | 0;
  HEAPF32[$248 >> 2] = $wA$0;
  $249 = HEAP32[$9 >> 2] | 0;
  $250 = $247 + ($249 * 12 | 0) | 0;
  $251 = +$252;
  $253 = +$254;
  $255 = $250;
  $256 = $255;
  HEAPF32[$256 >> 2] = $251;
  $257 = $255 + 4 | 0;
  $258 = $257;
  HEAPF32[$258 >> 2] = $253;
  $259 = HEAP32[$9 >> 2] | 0;
  $260 = HEAP32[$59 >> 2] | 0;
  $261 = $260 + ($259 * 12 | 0) + 8 | 0;
  HEAPF32[$261 >> 2] = $wB$0;
  return;
 } else {
  $202 = $data + 8 | 0;
  $203 = +HEAPF32[$202 >> 2];
  $205 = $203 * +HEAPF32[$201 >> 2];
  HEAPF32[$201 >> 2] = $205;
  $206 = $this + 84 | 0;
  $208 = $203 * +HEAPF32[$206 >> 2];
  HEAPF32[$206 >> 2] = $208;
  $210 = $this + 88 | 0;
  $212 = +HEAPF32[$202 >> 2] * +HEAPF32[$210 >> 2];
  HEAPF32[$210 >> 2] = $212;
  $239 = $68 - $130 * $205;
  $241 = $69 - $130 * $208;
  $252 = $90 + $131 * $205;
  $254 = $91 + $131 * $208;
  $wA$0 = $71 - $132 * ($212 + ($208 * $104 - $205 * $107));
  $wB$0 = $93 + $133 * ($212 + ($208 * $120 - $205 * $123));
  $235 = HEAP32[$4 >> 2] | 0;
  $236 = HEAP32[$59 >> 2] | 0;
  $237 = $236 + ($235 * 12 | 0) | 0;
  $238 = +$239;
  $240 = +$241;
  $242 = $237;
  $243 = $242;
  HEAPF32[$243 >> 2] = $238;
  $244 = $242 + 4 | 0;
  $245 = $244;
  HEAPF32[$245 >> 2] = $240;
  $246 = HEAP32[$4 >> 2] | 0;
  $247 = HEAP32[$59 >> 2] | 0;
  $248 = $247 + ($246 * 12 | 0) + 8 | 0;
  HEAPF32[$248 >> 2] = $wA$0;
  $249 = HEAP32[$9 >> 2] | 0;
  $250 = $247 + ($249 * 12 | 0) | 0;
  $251 = +$252;
  $253 = +$254;
  $255 = $250;
  $256 = $255;
  HEAPF32[$256 >> 2] = $251;
  $257 = $255 + 4 | 0;
  $258 = $257;
  HEAPF32[$258 >> 2] = $253;
  $259 = HEAP32[$9 >> 2] | 0;
  $260 = HEAP32[$59 >> 2] | 0;
  $261 = $260 + ($259 * 12 | 0) + 8 | 0;
  HEAPF32[$261 >> 2] = $wB$0;
  return;
 }
}

function _read_long_string($ls, $seminfo, $sep) {
 $ls = $ls | 0;
 $seminfo = $seminfo | 0;
 $sep = $sep | 0;
 var $$ph = 0, $1 = 0, $100 = 0, $101 = 0, $102 = 0, $104 = 0, $105 = 0, $108 = 0, $111 = 0, $113 = 0, $115 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $122 = 0, $123 = 0, $128 = 0, $129 = 0, $131 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $151 = 0, $152 = 0, $16 = 0, $164 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $3 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $46 = 0, $49 = 0, $5 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $62 = 0, $65 = 0, $68 = 0, $70 = 0, $71 = 0, $72 = 0, $75 = 0, $76 = 0, $8 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $86 = 0, $87 = 0, $9 = 0, $90 = 0, $93 = 0, $95 = 0, $97 = 0, $ts$0$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $1 = HEAP32[$ls + 4 >> 2] | 0;
 $2 = HEAP32[$ls >> 2] | 0;
 $3 = $ls + 40 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $4 + 4 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $8 = $4 + 8 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 do if (($6 + 1 | 0) >>> 0 > $9 >>> 0) if ($9 >>> 0 > 1073741822) _lexerror($ls, 67216, 0); else {
  $12 = $9 << 1;
  $16 = _luaM_realloc_(HEAP32[$ls + 32 >> 2] | 0, HEAP32[$4 >> 2] | 0, $9, $12) | 0;
  HEAP32[$4 >> 2] = $16;
  HEAP32[$8 >> 2] = $12;
  $19 = HEAP32[$5 >> 2] | 0;
  $21 = $16;
  break;
 } else {
  $19 = $6;
  $21 = HEAP32[$4 >> 2] | 0;
 } while (0);
 HEAP32[$5 >> 2] = $19 + 1;
 HEAP8[$21 + $19 >> 0] = $2;
 $22 = $ls + 36 | 0;
 $23 = HEAP32[$22 >> 2] | 0;
 $24 = HEAP32[$23 >> 2] | 0;
 HEAP32[$23 >> 2] = $24 + -1;
 if (!$24) $33 = _luaZ_fill($23) | 0; else {
  $27 = $23 + 4 | 0;
  $28 = HEAP32[$27 >> 2] | 0;
  HEAP32[$27 >> 2] = $28 + 1;
  $33 = HEAPU8[$28 >> 0] | 0;
 }
 HEAP32[$ls >> 2] = $33;
 if (($33 | 0) == 13 | ($33 | 0) == 10) {
  _inclinenumber($ls);
  label = 11;
 } else $$ph = $33;
 L14 : while (1) {
  if ((label | 0) == 11) {
   label = 0;
   $$ph = HEAP32[$ls >> 2] | 0;
  }
  $34 = ($seminfo | 0) == 0;
  $35 = $ls + 32 | 0;
  L18 : do if ($34) {
   $164 = $$ph;
   while (1) {
    if (($164 | 0) == 93) {
     label = 20;
     break L18;
    } else if (($164 | 0) == -1) {
     label = 19;
     break L14;
    } else if (($164 | 0) == 13 | ($164 | 0) == 10) break L18;
    $36 = HEAP32[$22 >> 2] | 0;
    $37 = HEAP32[$36 >> 2] | 0;
    HEAP32[$36 >> 2] = $37 + -1;
    if (!$37) $46 = _luaZ_fill($36) | 0; else {
     $40 = $36 + 4 | 0;
     $41 = HEAP32[$40 >> 2] | 0;
     HEAP32[$40 >> 2] = $41 + 1;
     $46 = HEAPU8[$41 >> 0] | 0;
    }
    HEAP32[$ls >> 2] = $46;
    $164 = $46;
   }
  } else {
   $113 = $$ph;
   while (1) {
    if (($113 | 0) == 93) {
     label = 20;
     break L18;
    } else if (($113 | 0) == -1) {
     label = 19;
     break L14;
    } else if (($113 | 0) == 13 | ($113 | 0) == 10) break L18;
    $100 = HEAP32[$3 >> 2] | 0;
    $101 = $100 + 4 | 0;
    $102 = HEAP32[$101 >> 2] | 0;
    $104 = $100 + 8 | 0;
    $105 = HEAP32[$104 >> 2] | 0;
    if (($102 + 1 | 0) >>> 0 > $105 >>> 0) {
     if ($105 >>> 0 > 1073741822) {
      label = 40;
      break L14;
     }
     $108 = $105 << 1;
     $111 = _luaM_realloc_(HEAP32[$35 >> 2] | 0, HEAP32[$100 >> 2] | 0, $105, $108) | 0;
     HEAP32[$100 >> 2] = $111;
     HEAP32[$104 >> 2] = $108;
     $115 = HEAP32[$101 >> 2] | 0;
     $117 = $111;
    } else {
     $115 = $102;
     $117 = HEAP32[$100 >> 2] | 0;
    }
    HEAP32[$101 >> 2] = $115 + 1;
    HEAP8[$117 + $115 >> 0] = $113;
    $118 = HEAP32[$22 >> 2] | 0;
    $119 = HEAP32[$118 >> 2] | 0;
    HEAP32[$118 >> 2] = $119 + -1;
    if (!$119) $128 = _luaZ_fill($118) | 0; else {
     $122 = $118 + 4 | 0;
     $123 = HEAP32[$122 >> 2] | 0;
     HEAP32[$122 >> 2] = $123 + 1;
     $128 = HEAPU8[$123 >> 0] | 0;
    }
    HEAP32[$ls >> 2] = $128;
    $113 = $128;
   }
  } while (0);
  if ((label | 0) == 20) {
   label = 0;
   if ((_skip_sep($ls) | 0) == ($sep | 0)) {
    label = 21;
    break;
   } else {
    label = 11;
    continue;
   }
  }
  $82 = HEAP32[$3 >> 2] | 0;
  $83 = $82 + 4 | 0;
  $84 = HEAP32[$83 >> 2] | 0;
  $86 = $82 + 8 | 0;
  $87 = HEAP32[$86 >> 2] | 0;
  if (($84 + 1 | 0) >>> 0 > $87 >>> 0) {
   if ($87 >>> 0 > 1073741822) {
    label = 33;
    break;
   }
   $90 = $87 << 1;
   $93 = _luaM_realloc_(HEAP32[$35 >> 2] | 0, HEAP32[$82 >> 2] | 0, $87, $90) | 0;
   HEAP32[$82 >> 2] = $93;
   HEAP32[$86 >> 2] = $90;
   $95 = HEAP32[$83 >> 2] | 0;
   $97 = $93;
  } else {
   $95 = $84;
   $97 = HEAP32[$82 >> 2] | 0;
  }
  HEAP32[$83 >> 2] = $95 + 1;
  HEAP8[$97 + $95 >> 0] = 10;
  _inclinenumber($ls);
  if (!$34) {
   label = 11;
   continue;
  }
  HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] = 0;
  label = 11;
 }
 if ((label | 0) == 19) {
  $49 = HEAP32[$35 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = ($seminfo | 0) != 0 ? 67416 : 67424;
  HEAP32[$vararg_buffer + 4 >> 2] = $1;
  _lexerror($ls, _luaO_pushfstring($49, 67432, $vararg_buffer) | 0, 289);
 } else if ((label | 0) == 21) {
  $53 = HEAP32[$ls >> 2] | 0;
  $54 = HEAP32[$3 >> 2] | 0;
  $55 = $54 + 4 | 0;
  $56 = HEAP32[$55 >> 2] | 0;
  $58 = $54 + 8 | 0;
  $59 = HEAP32[$58 >> 2] | 0;
  do if (($56 + 1 | 0) >>> 0 > $59 >>> 0) if ($59 >>> 0 > 1073741822) _lexerror($ls, 67216, 0); else {
   $62 = $59 << 1;
   $65 = _luaM_realloc_(HEAP32[$35 >> 2] | 0, HEAP32[$54 >> 2] | 0, $59, $62) | 0;
   HEAP32[$54 >> 2] = $65;
   HEAP32[$58 >> 2] = $62;
   $68 = HEAP32[$55 >> 2] | 0;
   $70 = $65;
   break;
  } else {
   $68 = $56;
   $70 = HEAP32[$54 >> 2] | 0;
  } while (0);
  HEAP32[$55 >> 2] = $68 + 1;
  HEAP8[$70 + $68 >> 0] = $53;
  $71 = HEAP32[$22 >> 2] | 0;
  $72 = HEAP32[$71 >> 2] | 0;
  HEAP32[$71 >> 2] = $72 + -1;
  if (!$72) $81 = _luaZ_fill($71) | 0; else {
   $75 = $71 + 4 | 0;
   $76 = HEAP32[$75 >> 2] | 0;
   HEAP32[$75 >> 2] = $76 + 1;
   $81 = HEAPU8[$76 >> 0] | 0;
  }
  HEAP32[$ls >> 2] = $81;
  if ($34) {
   STACKTOP = sp;
   return;
  }
  $129 = HEAP32[$3 >> 2] | 0;
  $131 = $sep + 2 | 0;
  $137 = HEAP32[$35 >> 2] | 0;
  $138 = _luaS_newlstr($137, (HEAP32[$129 >> 2] | 0) + $131 | 0, (HEAP32[$129 + 4 >> 2] | 0) - ($131 << 1) | 0) | 0;
  $139 = $137 + 8 | 0;
  $140 = HEAP32[$139 >> 2] | 0;
  HEAP32[$139 >> 2] = $140 + 8;
  HEAP32[$140 >> 2] = $138;
  HEAP32[$140 + 4 >> 2] = HEAPU8[$138 + 4 >> 0] | 0 | 64;
  $151 = _luaH_set($137, HEAP32[$ls + 44 >> 2] | 0, (HEAP32[$139 >> 2] | 0) + -8 | 0) | 0;
  $152 = $151 + 4 | 0;
  if (!(HEAP32[$152 >> 2] | 0)) {
   HEAP32[$151 >> 2] = 1;
   HEAP32[$152 >> 2] = 1;
   if ((HEAP32[(HEAP32[$137 + 12 >> 2] | 0) + 12 >> 2] | 0) > 0) {
    _luaC_step($137);
    $ts$0$i = $138;
   } else $ts$0$i = $138;
  } else $ts$0$i = HEAP32[$151 + 8 >> 2] | 0;
  HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + -8;
  HEAP32[$seminfo >> 2] = $ts$0$i;
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 33) _lexerror($ls, 67216, 0); else if ((label | 0) == 40) _lexerror($ls, 67216, 0);
}

function __ZN13b2DynamicTree10InsertLeafEi($this, $leaf) {
 $this = $this | 0;
 $leaf = $leaf | 0;
 var $$ = 0, $$pn = 0.0, $$pn1 = 0.0, $0 = 0, $101 = 0.0, $11 = 0.0, $122 = 0, $123 = 0, $124 = 0, $127 = 0, $13 = 0.0, $130 = 0.0, $134 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $145 = 0.0, $149 = 0.0, $15 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0, $158 = 0, $164 = 0, $17 = 0.0, $175 = 0, $177 = 0, $178 = 0, $180 = 0, $182 = 0, $186 = 0, $188 = 0, $19 = 0, $195 = 0.0, $197 = 0.0, $201 = 0.0, $203 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0, $214 = 0.0, $216 = 0.0, $22 = 0, $220 = 0.0, $222 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0, $24 = 0.0, $26 = 0.0, $29 = 0.0, $3 = 0, $31 = 0.0, $46 = 0.0, $47 = 0.0, $49 = 0.0, $51 = 0, $55 = 0.0, $57 = 0.0, $59 = 0.0, $61 = 0.0, $63 = 0.0, $65 = 0.0, $67 = 0.0, $69 = 0.0, $8 = 0, $87 = 0.0, $89 = 0.0, $9 = 0, $91 = 0.0, $93 = 0.0, $95 = 0.0, $97 = 0.0, $99 = 0.0, $cost1$0 = 0.0, $cost2$0 = 0.0, $index$0$lcssa = 0, $index$04 = 0, $index$12 = 0, $index$13 = 0, label = 0;
 $0 = $this + 24 | 0;
 HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 1;
 $3 = HEAP32[$this >> 2] | 0;
 if (($3 | 0) == -1) {
  HEAP32[$this >> 2] = $leaf;
  HEAP32[(HEAP32[$this + 4 >> 2] | 0) + ($leaf * 36 | 0) + 20 >> 2] = -1;
  return;
 }
 $8 = $this + 4 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 $11 = +HEAPF32[$9 + ($leaf * 36 | 0) >> 2];
 $13 = +HEAPF32[$9 + ($leaf * 36 | 0) + 4 >> 2];
 $15 = +HEAPF32[$9 + ($leaf * 36 | 0) + 8 >> 2];
 $17 = +HEAPF32[$9 + ($leaf * 36 | 0) + 12 >> 2];
 $19 = HEAP32[$9 + ($3 * 36 | 0) + 24 >> 2] | 0;
 L5 : do if (($19 | 0) == -1) $index$0$lcssa = $3; else {
  $51 = $19;
  $index$04 = $3;
  while (1) {
   $22 = HEAP32[$9 + ($index$04 * 36 | 0) + 28 >> 2] | 0;
   $24 = +HEAPF32[$9 + ($index$04 * 36 | 0) + 8 >> 2];
   $26 = +HEAPF32[$9 + ($index$04 * 36 | 0) >> 2];
   $29 = +HEAPF32[$9 + ($index$04 * 36 | 0) + 12 >> 2];
   $31 = +HEAPF32[$9 + ($index$04 * 36 | 0) + 4 >> 2];
   $46 = (($24 > $15 ? $24 : $15) - ($26 < $11 ? $26 : $11) + (($29 > $17 ? $29 : $17) - ($31 < $13 ? $31 : $13))) * 2.0;
   $47 = $46 * 2.0;
   $49 = ($46 - ($24 - $26 + ($29 - $31)) * 2.0) * 2.0;
   $55 = +HEAPF32[$9 + ($51 * 36 | 0) >> 2];
   $57 = $11 < $55 ? $11 : $55;
   $59 = +HEAPF32[$9 + ($51 * 36 | 0) + 4 >> 2];
   $61 = $13 < $59 ? $13 : $59;
   $63 = +HEAPF32[$9 + ($51 * 36 | 0) + 8 >> 2];
   $65 = $15 > $63 ? $15 : $63;
   $67 = +HEAPF32[$9 + ($51 * 36 | 0) + 12 >> 2];
   $69 = $17 > $67 ? $17 : $67;
   if ((HEAP32[$9 + ($51 * 36 | 0) + 24 >> 2] | 0) == -1) $$pn = ($65 - $57 + ($69 - $61)) * 2.0; else $$pn = ($65 - $57 + ($69 - $61)) * 2.0 - ($63 - $55 + ($67 - $59)) * 2.0;
   $cost1$0 = $49 + $$pn;
   $87 = +HEAPF32[$9 + ($22 * 36 | 0) >> 2];
   $89 = $11 < $87 ? $11 : $87;
   $91 = +HEAPF32[$9 + ($22 * 36 | 0) + 4 >> 2];
   $93 = $13 < $91 ? $13 : $91;
   $95 = +HEAPF32[$9 + ($22 * 36 | 0) + 8 >> 2];
   $97 = $15 > $95 ? $15 : $95;
   $99 = +HEAPF32[$9 + ($22 * 36 | 0) + 12 >> 2];
   $101 = $17 > $99 ? $17 : $99;
   if ((HEAP32[$9 + ($22 * 36 | 0) + 24 >> 2] | 0) == -1) $$pn1 = ($97 - $89 + ($101 - $93)) * 2.0; else $$pn1 = ($97 - $89 + ($101 - $93)) * 2.0 - ($95 - $87 + ($99 - $91)) * 2.0;
   $cost2$0 = $49 + $$pn1;
   if ($47 < $cost1$0 & $47 < $cost2$0) {
    $index$0$lcssa = $index$04;
    break L5;
   }
   $$ = $cost1$0 < $cost2$0 ? $51 : $22;
   $51 = HEAP32[$9 + ($$ * 36 | 0) + 24 >> 2] | 0;
   if (($51 | 0) == -1) {
    $index$0$lcssa = $$;
    break;
   } else $index$04 = $$;
  }
 } while (0);
 $122 = HEAP32[$9 + ($index$0$lcssa * 36 | 0) + 20 >> 2] | 0;
 $123 = __ZN13b2DynamicTree12AllocateNodeEv($this) | 0;
 $124 = HEAP32[$8 >> 2] | 0;
 HEAP32[$124 + ($123 * 36 | 0) + 20 >> 2] = $122;
 HEAP32[$124 + ($123 * 36 | 0) + 16 >> 2] = 0;
 $127 = HEAP32[$8 >> 2] | 0;
 $130 = +HEAPF32[$127 + ($index$0$lcssa * 36 | 0) >> 2];
 $134 = +HEAPF32[$127 + ($index$0$lcssa * 36 | 0) + 4 >> 2];
 $137 = +($11 < $130 ? $11 : $130);
 $138 = +($13 < $134 ? $13 : $134);
 $139 = $127 + ($123 * 36 | 0) | 0;
 HEAPF32[$139 >> 2] = $137;
 HEAPF32[$139 + 4 >> 2] = $138;
 $145 = +HEAPF32[$127 + ($index$0$lcssa * 36 | 0) + 8 >> 2];
 $149 = +HEAPF32[$127 + ($index$0$lcssa * 36 | 0) + 12 >> 2];
 $152 = +($15 > $145 ? $15 : $145);
 $153 = +($17 > $149 ? $17 : $149);
 $154 = $127 + ($123 * 36 | 0) + 8 | 0;
 HEAPF32[$154 >> 2] = $152;
 HEAPF32[$154 + 4 >> 2] = $153;
 $158 = HEAP32[$8 >> 2] | 0;
 HEAP32[$158 + ($123 * 36 | 0) + 32 >> 2] = (HEAP32[$158 + ($index$0$lcssa * 36 | 0) + 32 >> 2] | 0) + 1;
 if (($122 | 0) == -1) {
  HEAP32[$158 + ($123 * 36 | 0) + 24 >> 2] = $index$0$lcssa;
  HEAP32[$158 + ($123 * 36 | 0) + 28 >> 2] = $leaf;
  HEAP32[$158 + ($index$0$lcssa * 36 | 0) + 20 >> 2] = $123;
  $175 = $158 + ($leaf * 36 | 0) + 20 | 0;
  HEAP32[$175 >> 2] = $123;
  HEAP32[$this >> 2] = $123;
  $index$12 = HEAP32[$175 >> 2] | 0;
 } else {
  $164 = $158 + ($122 * 36 | 0) + 24 | 0;
  if ((HEAP32[$164 >> 2] | 0) == ($index$0$lcssa | 0)) HEAP32[$164 >> 2] = $123; else HEAP32[$158 + ($122 * 36 | 0) + 28 >> 2] = $123;
  HEAP32[$158 + ($123 * 36 | 0) + 24 >> 2] = $index$0$lcssa;
  HEAP32[$158 + ($123 * 36 | 0) + 28 >> 2] = $leaf;
  HEAP32[$158 + ($index$0$lcssa * 36 | 0) + 20 >> 2] = $123;
  HEAP32[$158 + ($leaf * 36 | 0) + 20 >> 2] = $123;
  $index$12 = $123;
 }
 if (($index$12 | 0) == -1) return; else $index$13 = $index$12;
 while (1) {
  $177 = __ZN13b2DynamicTree7BalanceEi($this, $index$13) | 0;
  $178 = HEAP32[$8 >> 2] | 0;
  $180 = HEAP32[$178 + ($177 * 36 | 0) + 24 >> 2] | 0;
  $182 = HEAP32[$178 + ($177 * 36 | 0) + 28 >> 2] | 0;
  if (($180 | 0) == -1) {
   label = 20;
   break;
  }
  if (($182 | 0) == -1) {
   label = 22;
   break;
  }
  $186 = HEAP32[$178 + ($180 * 36 | 0) + 32 >> 2] | 0;
  $188 = HEAP32[$178 + ($182 * 36 | 0) + 32 >> 2] | 0;
  HEAP32[$178 + ($177 * 36 | 0) + 32 >> 2] = (($186 | 0) > ($188 | 0) ? $186 : $188) + 1;
  $195 = +HEAPF32[$178 + ($180 * 36 | 0) >> 2];
  $197 = +HEAPF32[$178 + ($182 * 36 | 0) >> 2];
  $201 = +HEAPF32[$178 + ($180 * 36 | 0) + 4 >> 2];
  $203 = +HEAPF32[$178 + ($182 * 36 | 0) + 4 >> 2];
  $206 = +($195 < $197 ? $195 : $197);
  $207 = +($201 < $203 ? $201 : $203);
  $208 = $178 + ($177 * 36 | 0) | 0;
  HEAPF32[$208 >> 2] = $206;
  HEAPF32[$208 + 4 >> 2] = $207;
  $214 = +HEAPF32[$178 + ($180 * 36 | 0) + 8 >> 2];
  $216 = +HEAPF32[$178 + ($182 * 36 | 0) + 8 >> 2];
  $220 = +HEAPF32[$178 + ($180 * 36 | 0) + 12 >> 2];
  $222 = +HEAPF32[$178 + ($182 * 36 | 0) + 12 >> 2];
  $225 = +($214 > $216 ? $214 : $216);
  $226 = +($220 > $222 ? $220 : $222);
  $227 = $178 + ($177 * 36 | 0) + 8 | 0;
  HEAPF32[$227 >> 2] = $225;
  HEAPF32[$227 + 4 >> 2] = $226;
  $index$13 = HEAP32[(HEAP32[$8 >> 2] | 0) + ($177 * 36 | 0) + 20 >> 2] | 0;
  if (($index$13 | 0) == -1) {
   label = 24;
   break;
  }
 }
 if ((label | 0) == 20) ___assert_fail(90280, 90016, 304, 90296); else if ((label | 0) == 22) ___assert_fail(90312, 90016, 305, 90296); else if ((label | 0) == 24) return;
}

function _g_read($L, $f, $first) {
 $L = $L | 0;
 $f = $f | 0;
 $first = $first | 0;
 var $$0 = 0, $$0$i6$i = 0, $0 = 0, $10 = 0, $100 = 0, $101 = 0, $104 = 0, $108 = 0, $110 = 0, $119 = 0, $124 = 0, $126 = 0, $13 = 0, $15 = 0, $19 = 0, $24 = 0, $29 = 0, $32 = 0, $34 = 0, $37 = 0, $38 = 0, $44 = 0, $45 = 0, $47 = 0, $52 = 0, $53 = 0, $6 = 0, $61 = 0, $62 = 0, $65 = 0, $7 = 0, $76 = 0, $77 = 0, $8 = 0, $86 = 0, $9 = 0, $92 = 0, $93 = 0, $99 = 0, $b$i1 = 0, $count$0$i = 0, $count$1$i = 0, $hex$0$i = 0, $n$06 = 0, $n$1 = 0, $rn$i = 0, $success$1 = 0, $success$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2288 | 0;
 $b$i1 = sp + 216 | 0;
 $rn$i = sp;
 $0 = _lua_gettop($L) | 0;
 _clearerr($f | 0);
 L1 : do if (($0 | 0) == 1) {
  $n$1 = $first + 1 | 0;
  $success$2 = _read_line($L, $f, 1) | 0;
 } else {
  _luaL_checkstack($L, $0 + 19 | 0, 57088);
  $6 = $b$i1 + 8 | 0;
  $7 = $rn$i + 8 | 0;
  $8 = $rn$i + 4 | 0;
  $9 = $rn$i + 12 | 0;
  $10 = $b$i1 + 8 | 0;
  $126 = $0 + -2 | 0;
  $n$06 = $first;
  L4 : while (1) {
   do if ((_lua_type($L, $n$06) | 0) == 3) {
    $13 = _luaL_checkinteger($L, $n$06) | 0;
    if (!$13) {
     $15 = _getc($f | 0) | 0;
     _ungetc($15 | 0, $f | 0) | 0;
     _lua_pushlstring($L, 0, 0) | 0;
     $success$1 = ($15 | 0) != -1 & 1;
     break;
    } else {
     _luaL_buffinit($L, $b$i1);
     $19 = _fread(_luaL_prepbuffsize($b$i1, $13) | 0, 1, $13 | 0, $f | 0) | 0;
     HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + $19;
     _luaL_pushresult($b$i1);
     $success$1 = ($19 | 0) != 0 & 1;
     break;
    }
   } else {
    $24 = _luaL_checklstring($L, $n$06, 0) | 0;
    $29 = HEAP8[((HEAP8[$24 >> 0] | 0) == 42 ? $24 + 1 | 0 : $24) >> 0] | 0;
    if (($29 | 0) == 110) {
     HEAP32[$rn$i >> 2] = $f;
     HEAP32[$7 >> 2] = 0;
     $32 = HEAP8[HEAP32[(_localeconv() | 0) >> 2] >> 0] | 0;
     do {
      $34 = _getc(HEAP32[$rn$i >> 2] | 0) | 0;
      HEAP32[$8 >> 2] = $34;
     } while ((_isspace($34) | 0) != 0);
     $37 = HEAP32[$8 >> 2] | 0;
     do if (($37 | 0) == 43 | ($37 | 0) == 45) {
      $38 = HEAP32[$7 >> 2] | 0;
      if (($38 | 0) > 199) {
       HEAP8[$9 >> 0] = 0;
       $45 = $37;
       break;
      } else {
       HEAP32[$7 >> 2] = $38 + 1;
       HEAP8[$rn$i + $38 + 12 >> 0] = $37;
       $44 = _getc(HEAP32[$rn$i >> 2] | 0) | 0;
       HEAP32[$8 >> 2] = $44;
       $45 = $44;
       break;
      }
     } else $45 = $37; while (0);
     do if (($45 | 0) == 48) {
      $47 = HEAP32[$7 >> 2] | 0;
      if (($47 | 0) > 199) {
       HEAP8[$9 >> 0] = 0;
       $count$0$i = 0;
       $hex$0$i = 0;
       break;
      }
      HEAP32[$7 >> 2] = $47 + 1;
      HEAP8[$rn$i + $47 + 12 >> 0] = 48;
      $52 = _getc(HEAP32[$rn$i >> 2] | 0) | 0;
      HEAP32[$8 >> 2] = $52;
      do if (($52 | 0) == 88 | ($52 | 0) == 120) {
       $53 = HEAP32[$7 >> 2] | 0;
       if (($53 | 0) > 199) {
        HEAP8[$9 >> 0] = 0;
        $$0$i6$i = 1;
        break;
       } else {
        HEAP32[$7 >> 2] = $53 + 1;
        HEAP8[$rn$i + $53 + 12 >> 0] = $52;
        HEAP32[$8 >> 2] = _getc(HEAP32[$rn$i >> 2] | 0) | 0;
        $$0$i6$i = 0;
        break;
       }
      } else $$0$i6$i = 1; while (0);
      $count$0$i = $$0$i6$i;
      $hex$0$i = $$0$i6$i ^ 1;
     } else {
      $count$0$i = 0;
      $hex$0$i = 0;
     } while (0);
     $61 = (_readdigits($rn$i, $hex$0$i) | 0) + $count$0$i | 0;
     $62 = HEAP32[$8 >> 2] | 0;
     do if (($62 | 0) == ($32 << 24 >> 24 | 0)) {
      $65 = HEAP32[$7 >> 2] | 0;
      if (($65 | 0) > 199) {
       HEAP8[$9 >> 0] = 0;
       $count$1$i = $61;
       break;
      } else {
       HEAP32[$7 >> 2] = $65 + 1;
       HEAP8[$rn$i + $65 + 12 >> 0] = $62;
       HEAP32[$8 >> 2] = _getc(HEAP32[$rn$i >> 2] | 0) | 0;
       $count$1$i = (_readdigits($rn$i, $hex$0$i) | 0) + $61 | 0;
       break;
      }
     } else $count$1$i = $61; while (0);
     L37 : do if (($count$1$i | 0) > 0) {
      $76 = ($hex$0$i | 0) != 0 ? 57128 : 57136;
      $77 = HEAP32[$8 >> 2] | 0;
      if (($77 | 0) != (HEAP8[$76 >> 0] | 0)) if (($77 | 0) == 0 ? 1 : ($77 | 0) != (HEAP8[$76 + 1 >> 0] | 0)) {
       $110 = $77;
       break;
      }
      $86 = HEAP32[$7 >> 2] | 0;
      if (($86 | 0) > 199) {
       HEAP8[$9 >> 0] = 0;
       $110 = $77;
       break;
      }
      HEAP32[$7 >> 2] = $86 + 1;
      HEAP8[$rn$i + $86 + 12 >> 0] = $77;
      $92 = _getc(HEAP32[$rn$i >> 2] | 0) | 0;
      HEAP32[$8 >> 2] = $92;
      do if (($92 | 0) == 43 | ($92 | 0) == 45) {
       $93 = HEAP32[$7 >> 2] | 0;
       if (($93 | 0) > 199) {
        HEAP8[$9 >> 0] = 0;
        $100 = $92;
        break;
       } else {
        HEAP32[$7 >> 2] = $93 + 1;
        HEAP8[$rn$i + $93 + 12 >> 0] = $92;
        $99 = _getc(HEAP32[$rn$i >> 2] | 0) | 0;
        HEAP32[$8 >> 2] = $99;
        $100 = $99;
        break;
       }
      } else $100 = $92; while (0);
      if (($100 + -48 | 0) >>> 0 < 10) {
       $104 = $100;
       while (1) {
        $101 = HEAP32[$7 >> 2] | 0;
        if (($101 | 0) > 199) break;
        HEAP32[$7 >> 2] = $101 + 1;
        HEAP8[$rn$i + $101 + 12 >> 0] = $104;
        $108 = _getc(HEAP32[$rn$i >> 2] | 0) | 0;
        HEAP32[$8 >> 2] = $108;
        if (($108 + -48 | 0) >>> 0 < 10) $104 = $108; else {
         $110 = $108;
         break L37;
        }
       }
       HEAP8[$9 >> 0] = 0;
       $110 = $104;
      } else $110 = $100;
     } else $110 = HEAP32[$8 >> 2] | 0; while (0);
     _ungetc($110 | 0, HEAP32[$rn$i >> 2] | 0) | 0;
     HEAP8[$rn$i + (HEAP32[$7 >> 2] | 0) + 12 >> 0] = 0;
     if (!(_lua_stringtonumber($L, $9) | 0)) {
      label = 42;
      break L4;
     } else {
      $success$1 = 1;
      break;
     }
    } else if (($29 | 0) == 108) {
     $success$1 = _read_line($L, $f, 1) | 0;
     break;
    } else if (($29 | 0) == 76) {
     $success$1 = _read_line($L, $f, 0) | 0;
     break;
    } else if (($29 | 0) == 97) {
     _luaL_buffinit($L, $b$i1);
     do {
      $119 = _fread(_luaL_prepbuffsize($b$i1, 2048) | 0, 1, 2048, $f | 0) | 0;
      HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + $119;
     } while (($119 | 0) == 2048);
     _luaL_pushresult($b$i1);
     $success$1 = 1;
     break;
    } else break L4;
   } while (0);
   $124 = $n$06 + 1 | 0;
   if (($126 | 0) == 0 | ($success$1 | 0) == 0) {
    $n$1 = $124;
    $success$2 = $success$1;
    break L1;
   } else {
    $126 = $126 + -1 | 0;
    $n$06 = $124;
   }
  }
  if ((label | 0) == 42) {
   _lua_pushnil($L);
   $n$1 = $n$06 + 1 | 0;
   $success$2 = 0;
   break;
  }
  $$0 = _luaL_argerror($L, $n$06, 57112) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } while (0);
 if (_ferror($f | 0) | 0) {
  $$0 = _luaL_fileresult($L, 0, 0) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!$success$2) {
  _lua_settop($L, -2);
  _lua_pushnil($L);
 }
 $$0 = $n$1 - $first | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN11b2GearJointC2EPK14b2GearJointDef($this, $def) {
 $this = $this | 0;
 $def = $def | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $102 = 0, $105 = 0, $106 = 0, $110 = 0.0, $111 = 0.0, $113 = 0.0, $121 = 0.0, $122 = 0.0, $13 = 0, $131 = 0.0, $136 = 0, $139 = 0, $142 = 0.0, $144 = 0.0, $146 = 0.0, $148 = 0.0, $150 = 0, $152 = 0.0, $154 = 0.0, $156 = 0, $16 = 0, $161 = 0, $162 = 0, $167 = 0, $172 = 0, $173 = 0, $178 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0.0, $192 = 0, $194 = 0, $197 = 0, $198 = 0, $2 = 0, $203 = 0, $205 = 0, $208 = 0, $209 = 0, $217 = 0, $219 = 0, $22 = 0, $222 = 0, $223 = 0, $227 = 0.0, $228 = 0.0, $230 = 0.0, $238 = 0.0, $239 = 0.0, $248 = 0.0, $25 = 0.0, $252 = 0, $253 = 0.0, $254 = 0, $255 = 0.0, $256 = 0.0, $257 = 0, $258 = 0, $27 = 0.0, $29 = 0.0, $3 = 0, $31 = 0.0, $33 = 0, $35 = 0.0, $37 = 0.0, $39 = 0, $4 = 0, $44 = 0, $45 = 0, $5 = 0, $50 = 0, $55 = 0, $56 = 0, $6 = 0, $61 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $75 = 0, $77 = 0, $80 = 0, $81 = 0, $86 = 0, $88 = 0, $9 = 0, $91 = 0, $92 = 0, $bitcast = 0.0, $bitcast21 = 0.0, $coordinateA$0 = 0.0, $coordinateB$0 = 0.0;
 __ZN7b2JointC2EPK10b2JointDef($this, $def);
 HEAP32[$this >> 2] = 83768;
 $0 = $this + 92 | 0;
 $1 = $this + 100 | 0;
 $2 = $this + 108 | 0;
 $3 = $this + 116 | 0;
 $4 = $this + 124 | 0;
 $5 = $this + 132 | 0;
 $6 = $def + 20 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 HEAP32[$this + 68 >> 2] = $7;
 $9 = $def + 24 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 HEAP32[$this + 72 >> 2] = $10;
 $13 = HEAP32[$7 + 4 >> 2] | 0;
 HEAP32[$this + 76 >> 2] = $13;
 $16 = HEAP32[$10 + 4 >> 2] | 0;
 HEAP32[$this + 80 >> 2] = $16;
 if (($13 + -1 | 0) >>> 0 >= 2) ___assert_fail(83816, 83880, 53, 83944);
 if (($16 + -1 | 0) >>> 0 >= 2) ___assert_fail(83960, 83880, 54, 83944);
 $19 = HEAP32[$7 + 48 >> 2] | 0;
 HEAP32[$this + 84 >> 2] = $19;
 $22 = HEAP32[$7 + 52 >> 2] | 0;
 HEAP32[$this + 48 >> 2] = $22;
 $25 = +HEAPF32[$22 + 20 >> 2];
 $27 = +HEAPF32[$22 + 24 >> 2];
 $29 = +HEAPF32[$19 + 20 >> 2];
 $31 = +HEAPF32[$19 + 24 >> 2];
 $33 = HEAP32[$6 >> 2] | 0;
 if (($13 | 0) == 1) {
  $35 = +HEAPF32[$22 + 56 >> 2];
  $37 = +HEAPF32[$19 + 56 >> 2];
  $39 = $33 + 68 | 0;
  $44 = HEAP32[$39 + 4 >> 2] | 0;
  $45 = $2;
  HEAP32[$45 >> 2] = HEAP32[$39 >> 2];
  HEAP32[$45 + 4 >> 2] = $44;
  $50 = $33 + 76 | 0;
  $55 = HEAP32[$50 + 4 >> 2] | 0;
  $56 = $0;
  HEAP32[$56 >> 2] = HEAP32[$50 >> 2];
  HEAP32[$56 + 4 >> 2] = $55;
  $61 = +HEAPF32[$33 + 116 >> 2];
  HEAPF32[$this + 140 >> 2] = $61;
  HEAPF32[$4 >> 2] = 0.0;
  HEAPF32[$this + 128 >> 2] = 0.0;
  $coordinateA$0 = $35 - $37 - $61;
 } else {
  $70 = +HEAPF32[$19 + 16 >> 2];
  $71 = +HEAPF32[$19 + 12 >> 2];
  $72 = +HEAPF32[$22 + 16 >> 2];
  $73 = +HEAPF32[$22 + 12 >> 2];
  $75 = $33 + 68 | 0;
  $77 = HEAP32[$75 >> 2] | 0;
  $80 = HEAP32[$75 + 4 >> 2] | 0;
  $81 = $2;
  HEAP32[$81 >> 2] = $77;
  HEAP32[$81 + 4 >> 2] = $80;
  $86 = $33 + 76 | 0;
  $88 = HEAP32[$86 >> 2] | 0;
  $91 = HEAP32[$86 + 4 >> 2] | 0;
  $92 = $0;
  HEAP32[$92 >> 2] = $88;
  HEAP32[$92 + 4 >> 2] = $91;
  HEAPF32[$this + 140 >> 2] = +HEAPF32[$33 + 100 >> 2];
  $100 = $33 + 84 | 0;
  $102 = HEAP32[$100 >> 2] | 0;
  $105 = HEAP32[$100 + 4 >> 2] | 0;
  $106 = $4;
  HEAP32[$106 >> 2] = $102;
  HEAP32[$106 + 4 >> 2] = $105;
  $110 = (HEAP32[tempDoublePtr >> 2] = $77, +HEAPF32[tempDoublePtr >> 2]);
  $111 = (HEAP32[tempDoublePtr >> 2] = $80, +HEAPF32[tempDoublePtr >> 2]);
  $bitcast21 = (HEAP32[tempDoublePtr >> 2] = $88, +HEAPF32[tempDoublePtr >> 2]);
  $113 = (HEAP32[tempDoublePtr >> 2] = $91, +HEAPF32[tempDoublePtr >> 2]);
  $121 = $73 - $71 + ($27 * $bitcast21 - $25 * $113);
  $122 = $72 - $70 + ($25 * $bitcast21 + $27 * $113);
  $131 = (HEAP32[tempDoublePtr >> 2] = $102, +HEAPF32[tempDoublePtr >> 2]) * ($31 * $121 + $29 * $122 - $110);
  $coordinateA$0 = $131 + (HEAP32[tempDoublePtr >> 2] = $105, +HEAPF32[tempDoublePtr >> 2]) * ($31 * $122 - $29 * $121 - $111);
 }
 $136 = HEAP32[$10 + 48 >> 2] | 0;
 HEAP32[$this + 88 >> 2] = $136;
 $139 = HEAP32[$10 + 52 >> 2] | 0;
 HEAP32[$this + 52 >> 2] = $139;
 $142 = +HEAPF32[$139 + 20 >> 2];
 $144 = +HEAPF32[$139 + 24 >> 2];
 $146 = +HEAPF32[$136 + 20 >> 2];
 $148 = +HEAPF32[$136 + 24 >> 2];
 $150 = HEAP32[$9 >> 2] | 0;
 if (($16 | 0) == 1) {
  $152 = +HEAPF32[$139 + 56 >> 2];
  $154 = +HEAPF32[$136 + 56 >> 2];
  $156 = $150 + 68 | 0;
  $161 = HEAP32[$156 + 4 >> 2] | 0;
  $162 = $3;
  HEAP32[$162 >> 2] = HEAP32[$156 >> 2];
  HEAP32[$162 + 4 >> 2] = $161;
  $167 = $150 + 76 | 0;
  $172 = HEAP32[$167 + 4 >> 2] | 0;
  $173 = $1;
  HEAP32[$173 >> 2] = HEAP32[$167 >> 2];
  HEAP32[$173 + 4 >> 2] = $172;
  $178 = +HEAPF32[$150 + 116 >> 2];
  HEAPF32[$this + 144 >> 2] = $178;
  HEAPF32[$5 >> 2] = 0.0;
  HEAPF32[$this + 136 >> 2] = 0.0;
  $coordinateB$0 = $152 - $154 - $178;
  $252 = $def + 28 | 0;
  $253 = +HEAPF32[$252 >> 2];
  $254 = $this + 152 | 0;
  HEAPF32[$254 >> 2] = $253;
  $255 = $coordinateB$0 * $253;
  $256 = $coordinateA$0 + $255;
  $257 = $this + 148 | 0;
  HEAPF32[$257 >> 2] = $256;
  $258 = $this + 156 | 0;
  HEAPF32[$258 >> 2] = 0.0;
  return;
 } else {
  $187 = +HEAPF32[$136 + 16 >> 2];
  $188 = +HEAPF32[$136 + 12 >> 2];
  $189 = +HEAPF32[$139 + 16 >> 2];
  $190 = +HEAPF32[$139 + 12 >> 2];
  $192 = $150 + 68 | 0;
  $194 = HEAP32[$192 >> 2] | 0;
  $197 = HEAP32[$192 + 4 >> 2] | 0;
  $198 = $3;
  HEAP32[$198 >> 2] = $194;
  HEAP32[$198 + 4 >> 2] = $197;
  $203 = $150 + 76 | 0;
  $205 = HEAP32[$203 >> 2] | 0;
  $208 = HEAP32[$203 + 4 >> 2] | 0;
  $209 = $1;
  HEAP32[$209 >> 2] = $205;
  HEAP32[$209 + 4 >> 2] = $208;
  HEAPF32[$this + 144 >> 2] = +HEAPF32[$150 + 100 >> 2];
  $217 = $150 + 84 | 0;
  $219 = HEAP32[$217 >> 2] | 0;
  $222 = HEAP32[$217 + 4 >> 2] | 0;
  $223 = $5;
  HEAP32[$223 >> 2] = $219;
  HEAP32[$223 + 4 >> 2] = $222;
  $227 = (HEAP32[tempDoublePtr >> 2] = $194, +HEAPF32[tempDoublePtr >> 2]);
  $228 = (HEAP32[tempDoublePtr >> 2] = $197, +HEAPF32[tempDoublePtr >> 2]);
  $bitcast = (HEAP32[tempDoublePtr >> 2] = $205, +HEAPF32[tempDoublePtr >> 2]);
  $230 = (HEAP32[tempDoublePtr >> 2] = $208, +HEAPF32[tempDoublePtr >> 2]);
  $238 = $190 - $188 + ($144 * $bitcast - $142 * $230);
  $239 = $189 - $187 + ($142 * $bitcast + $144 * $230);
  $248 = (HEAP32[tempDoublePtr >> 2] = $219, +HEAPF32[tempDoublePtr >> 2]) * ($148 * $238 + $146 * $239 - $227);
  $coordinateB$0 = $248 + (HEAP32[tempDoublePtr >> 2] = $222, +HEAPF32[tempDoublePtr >> 2]) * ($148 * $239 - $146 * $238 - $228);
  $252 = $def + 28 | 0;
  $253 = +HEAPF32[$252 >> 2];
  $254 = $this + 152 | 0;
  HEAPF32[$254 >> 2] = $253;
  $255 = $coordinateB$0 * $253;
  $256 = $coordinateA$0 + $255;
  $257 = $this + 148 | 0;
  HEAPF32[$257 >> 2] = $256;
  $258 = $this + 156 | 0;
  HEAPF32[$258 >> 2] = 0.0;
  return;
 }
}

function __ZN11b2GearJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $$pn = 0.0, $0 = 0, $1 = 0, $104 = 0.0, $109 = 0.0, $11 = 0.0, $112 = 0.0, $115 = 0.0, $118 = 0.0, $12 = 0.0, $121 = 0.0, $128 = 0.0, $133 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $15 = 0, $156 = 0.0, $159 = 0.0, $16 = 0, $161 = 0.0, $169 = 0.0, $172 = 0.0, $174 = 0.0, $177 = 0.0, $18 = 0, $182 = 0.0, $187 = 0.0, $198 = 0.0, $2 = 0, $203 = 0.0, $206 = 0.0, $209 = 0.0, $211 = 0.0, $217 = 0.0, $221 = 0.0, $230 = 0.0, $235 = 0.0, $24 = 0.0, $241 = 0.0, $242 = 0.0, $25 = 0.0, $257 = 0.0, $265 = 0.0, $267 = 0.0, $269 = 0.0, $27 = 0.0, $273 = 0.0, $278 = 0.0, $28 = 0, $280 = 0.0, $282 = 0.0, $286 = 0.0, $29 = 0, $291 = 0.0, $297 = 0.0, $3 = 0, $302 = 0.0, $308 = 0.0, $31 = 0, $311 = 0.0, $312 = 0.0, $313 = 0, $318 = 0, $322 = 0.0, $323 = 0.0, $324 = 0, $329 = 0, $333 = 0.0, $334 = 0.0, $335 = 0, $340 = 0, $344 = 0.0, $345 = 0.0, $346 = 0, $37 = 0.0, $38 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $44 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $60 = 0.0, $61 = 0.0, $66 = 0.0, $68 = 0.0, $75 = 0.0, $78 = 0.0, $80 = 0.0, $83 = 0.0, $88 = 0.0, $93 = 0.0, $JwA$0 = 0.0, $JwB$0 = 0.0, $JwC$0 = 0.0, $JwD$0 = 0.0, $coordinateA$0 = 0.0, $coordinateB$0 = 0.0, $impulse$0 = 0.0, $mass$0$in = 0.0, $mass$1 = 0.0;
 $0 = $this + 160 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $data + 24 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $3 + ($1 * 12 | 0) | 0;
 $5 = $4;
 $11 = +HEAPF32[$5 >> 2];
 $12 = +HEAPF32[$5 + 4 >> 2];
 $14 = +HEAPF32[$3 + ($1 * 12 | 0) + 8 >> 2];
 $15 = $this + 164 | 0;
 $16 = HEAP32[$15 >> 2] | 0;
 $18 = $3 + ($16 * 12 | 0) | 0;
 $24 = +HEAPF32[$18 >> 2];
 $25 = +HEAPF32[$18 + 4 >> 2];
 $27 = +HEAPF32[$3 + ($16 * 12 | 0) + 8 >> 2];
 $28 = $this + 168 | 0;
 $29 = HEAP32[$28 >> 2] | 0;
 $31 = $3 + ($29 * 12 | 0) | 0;
 $37 = +HEAPF32[$31 >> 2];
 $38 = +HEAPF32[$31 + 4 >> 2];
 $40 = +HEAPF32[$3 + ($29 * 12 | 0) + 8 >> 2];
 $41 = $this + 172 | 0;
 $42 = HEAP32[$41 >> 2] | 0;
 $44 = $3 + ($42 * 12 | 0) | 0;
 $50 = +HEAPF32[$44 >> 2];
 $51 = +HEAPF32[$44 + 4 >> 2];
 $53 = +HEAPF32[$3 + ($42 * 12 | 0) + 8 >> 2];
 $54 = +Math_sin(+$14);
 $55 = +Math_cos(+$14);
 $56 = +Math_sin(+$27);
 $57 = +Math_cos(+$27);
 $58 = +Math_sin(+$40);
 $59 = +Math_cos(+$40);
 $60 = +Math_sin(+$53);
 $61 = +Math_cos(+$53);
 if ((HEAP32[$this + 76 >> 2] | 0) == 1) {
  $66 = +HEAPF32[$this + 224 >> 2];
  $68 = +HEAPF32[$this + 232 >> 2];
  $267 = 0.0;
  $269 = 0.0;
  $273 = $66;
  $297 = $68;
  $JwA$0 = 1.0;
  $JwC$0 = 1.0;
  $coordinateA$0 = $14 - $40 - +HEAPF32[$this + 140 >> 2];
  $mass$0$in = $66 + $68;
 } else {
  $75 = +HEAPF32[$this + 124 >> 2];
  $78 = +HEAPF32[$this + 128 >> 2];
  $80 = $59 * $75 - $58 * $78;
  $83 = $58 * $75 + $59 * $78;
  $88 = +HEAPF32[$this + 108 >> 2] - +HEAPF32[$this + 192 >> 2];
  $93 = +HEAPF32[$this + 112 >> 2] - +HEAPF32[$this + 196 >> 2];
  $104 = +HEAPF32[$this + 92 >> 2] - +HEAPF32[$this + 176 >> 2];
  $109 = +HEAPF32[$this + 96 >> 2] - +HEAPF32[$this + 180 >> 2];
  $112 = $55 * $104 - $54 * $109;
  $115 = $54 * $104 + $55 * $109;
  $118 = $83 * ($59 * $88 - $58 * $93) - $80 * ($58 * $88 + $59 * $93);
  $121 = $83 * $112 - $80 * $115;
  $128 = +HEAPF32[$this + 232 >> 2];
  $133 = +HEAPF32[$this + 224 >> 2];
  $139 = $11 - $37 + $112;
  $140 = $12 - $38 + $115;
  $267 = $80;
  $269 = $83;
  $273 = $133;
  $297 = $128;
  $JwA$0 = $121;
  $JwC$0 = $118;
  $coordinateA$0 = $75 * ($59 * $139 + $58 * $140 - $88) + $78 * ($59 * $140 - $58 * $139 - $93);
  $mass$0$in = +HEAPF32[$this + 216 >> 2] + +HEAPF32[$this + 208 >> 2] + $118 * ($118 * $128) + $121 * ($133 * $121);
 }
 if ((HEAP32[$this + 80 >> 2] | 0) == 1) {
  $156 = +HEAPF32[$this + 152 >> 2];
  $159 = +HEAPF32[$this + 228 >> 2];
  $161 = +HEAPF32[$this + 236 >> 2];
  $$pn = $156 * $156 * ($159 + $161);
  $257 = $156;
  $280 = 0.0;
  $282 = 0.0;
  $286 = $159;
  $308 = $161;
  $JwB$0 = $156;
  $JwD$0 = $156;
  $coordinateB$0 = $27 - $53 - +HEAPF32[$this + 144 >> 2];
 } else {
  $169 = +HEAPF32[$this + 132 >> 2];
  $172 = +HEAPF32[$this + 136 >> 2];
  $174 = $61 * $169 - $60 * $172;
  $177 = $60 * $169 + $61 * $172;
  $182 = +HEAPF32[$this + 116 >> 2] - +HEAPF32[$this + 200 >> 2];
  $187 = +HEAPF32[$this + 120 >> 2] - +HEAPF32[$this + 204 >> 2];
  $198 = +HEAPF32[$this + 100 >> 2] - +HEAPF32[$this + 184 >> 2];
  $203 = +HEAPF32[$this + 104 >> 2] - +HEAPF32[$this + 188 >> 2];
  $206 = $57 * $198 - $56 * $203;
  $209 = $56 * $198 + $57 * $203;
  $211 = +HEAPF32[$this + 152 >> 2];
  $217 = $211 * ($177 * ($61 * $182 - $60 * $187) - $174 * ($60 * $182 + $61 * $187));
  $221 = $211 * ($177 * $206 - $174 * $209);
  $230 = +HEAPF32[$this + 236 >> 2];
  $235 = +HEAPF32[$this + 228 >> 2];
  $241 = $24 - $50 + $206;
  $242 = $25 - $51 + $209;
  $$pn = $211 * $211 * (+HEAPF32[$this + 220 >> 2] + +HEAPF32[$this + 212 >> 2]) + $217 * ($217 * $230) + $221 * ($235 * $221);
  $257 = $211;
  $280 = $174 * $211;
  $282 = $177 * $211;
  $286 = $235;
  $308 = $230;
  $JwB$0 = $221;
  $JwD$0 = $217;
  $coordinateB$0 = $169 * ($61 * $241 + $60 * $242 - $182) + $172 * ($61 * $242 - $60 * $241 - $187);
 }
 $mass$1 = $mass$0$in + 0.0 + $$pn;
 if ($mass$1 > 0.0) $impulse$0 = -($coordinateA$0 + $coordinateB$0 * $257 - +HEAPF32[$this + 148 >> 2]) / $mass$1; else $impulse$0 = 0.0;
 $265 = $impulse$0 * +HEAPF32[$this + 208 >> 2];
 $278 = $impulse$0 * +HEAPF32[$this + 212 >> 2];
 $291 = $impulse$0 * +HEAPF32[$this + 216 >> 2];
 $302 = $impulse$0 * +HEAPF32[$this + 220 >> 2];
 $311 = +($11 + $267 * $265);
 $312 = +($12 + $269 * $265);
 $313 = $4;
 HEAPF32[$313 >> 2] = $311;
 HEAPF32[$313 + 4 >> 2] = $312;
 $318 = HEAP32[$2 >> 2] | 0;
 HEAPF32[$318 + ((HEAP32[$0 >> 2] | 0) * 12 | 0) + 8 >> 2] = $14 + $JwA$0 * ($impulse$0 * $273);
 $322 = +($24 + $280 * $278);
 $323 = +($25 + $282 * $278);
 $324 = $318 + ((HEAP32[$15 >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$324 >> 2] = $322;
 HEAPF32[$324 + 4 >> 2] = $323;
 $329 = HEAP32[$2 >> 2] | 0;
 HEAPF32[$329 + ((HEAP32[$15 >> 2] | 0) * 12 | 0) + 8 >> 2] = $27 + $JwB$0 * ($impulse$0 * $286);
 $333 = +($37 - $267 * $291);
 $334 = +($38 - $269 * $291);
 $335 = $329 + ((HEAP32[$28 >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$335 >> 2] = $333;
 HEAPF32[$335 + 4 >> 2] = $334;
 $340 = HEAP32[$2 >> 2] | 0;
 HEAPF32[$340 + ((HEAP32[$28 >> 2] | 0) * 12 | 0) + 8 >> 2] = $40 - $JwC$0 * ($impulse$0 * $297);
 $344 = +($50 - $280 * $302);
 $345 = +($51 - $282 * $302);
 $346 = $340 + ((HEAP32[$41 >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$346 >> 2] = $344;
 HEAPF32[$346 + 4 >> 2] = $345;
 HEAPF32[(HEAP32[$2 >> 2] | 0) + ((HEAP32[$41 >> 2] | 0) * 12 | 0) + 8 >> 2] = $53 - $JwD$0 * ($impulse$0 * $308);
 return 1;
}

function _json_process_value($l, $json, $token) {
 $l = $l | 0;
 $json = $json | 0;
 $token = $token | 0;
 var $10 = 0, $100 = 0, $11 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $36 = 0, $38 = 0, $42 = 0, $47 = 0, $51 = 0, $52 = 0, $55 = 0, $59 = 0, $60 = 0, $61 = 0, $78 = 0, $81 = 0, $82 = 0, $85 = 0, $88 = 0, $92 = 0, $94 = 0, $found$0$i = 0, $found$0$i$i = 0, $found$0$i$i6 = 0, $found$0$i4$i = 0, $found$0$i7$i = 0, $found$0$in$i = 0, $found$0$in$i$i = 0, $found$0$in$i$i5 = 0, $found$0$in$i3$i = 0, $found$0$in$i6$i = 0, $i$0$i = 0, $json$idx$i = 0, $json$idx$i3 = 0, $token$i = 0, $token$i1 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer17 = 0, $vararg_buffer2 = 0, $vararg_buffer21 = 0, $vararg_buffer26 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $vararg_buffer26 = sp + 128 | 0;
 $vararg_buffer21 = sp + 112 | 0;
 $vararg_buffer17 = sp + 104 | 0;
 $vararg_buffer12 = sp + 88 | 0;
 $vararg_buffer7 = sp + 72 | 0;
 $vararg_buffer2 = sp + 56 | 0;
 $vararg_buffer = sp + 48 | 0;
 $token$i1 = sp + 24 | 0;
 $token$i = sp;
 switch (HEAP32[$token >> 2] | 0) {
 case 6:
  {
   _lua_pushboolean($l, HEAP32[$token + 8 >> 2] | 0);
   STACKTOP = sp;
   return;
  }
 case 0:
  {
   $10 = $json + 16 | 0;
   $11 = HEAP32[$10 >> 2] | 0;
   HEAP32[$10 >> 2] = $11 + 1;
   if (($11 | 0) < (HEAP32[(HEAP32[$json + 12 >> 2] | 0) + 1340 >> 2] | 0)) {
    if (!(_lua_checkstack($l, 3) | 0)) label = 7;
   } else label = 7;
   if ((label | 0) == 7) {
    _strbuf_free(HEAP32[$json + 8 >> 2] | 0);
    $28 = (HEAP32[$json + 4 >> 2] | 0) - (HEAP32[$json >> 2] | 0) | 0;
    HEAP32[$vararg_buffer >> 2] = HEAP32[$10 >> 2];
    HEAP32[$vararg_buffer + 4 >> 2] = $28;
    _luaL_error($l, 69592, $vararg_buffer) | 0;
   }
   _lua_createtable($l, 0, 0);
   _json_next_token($json, $token$i);
   $29 = HEAP32[$token$i >> 2] | 0;
   if (($29 | 0) == 1) {
    HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + -1;
    STACKTOP = sp;
    return;
   }
   $31 = $token$i + 8 | 0;
   $32 = $token$i + 16 | 0;
   $json$idx$i = $json + 8 | 0;
   $33 = $token$i + 4 | 0;
   $36 = $29;
   while (1) {
    if (($36 | 0) != 4) {
     _strbuf_free(HEAP32[$json$idx$i >> 2] | 0);
     $38 = HEAP32[$token$i >> 2] | 0;
     if (($38 | 0) == 12) $found$0$in$i$i = $31; else $found$0$in$i$i = 69264 + ($38 << 2) | 0;
     $found$0$i$i = HEAP32[$found$0$in$i$i >> 2] | 0;
     $42 = (HEAP32[$33 >> 2] | 0) + 1 | 0;
     HEAP32[$vararg_buffer2 >> 2] = 69656;
     HEAP32[$vararg_buffer2 + 4 >> 2] = $found$0$i$i;
     HEAP32[$vararg_buffer2 + 8 >> 2] = $42;
     _luaL_error($l, 69328, $vararg_buffer2) | 0;
    }
    _lua_pushlstring($l, HEAP32[$31 >> 2] | 0, HEAP32[$32 >> 2] | 0) | 0;
    _json_next_token($json, $token$i);
    if ((HEAP32[$token$i >> 2] | 0) != 8) {
     _strbuf_free(HEAP32[$json$idx$i >> 2] | 0);
     $47 = HEAP32[$token$i >> 2] | 0;
     if (($47 | 0) == 12) $found$0$in$i3$i = $31; else $found$0$in$i3$i = 69264 + ($47 << 2) | 0;
     $found$0$i4$i = HEAP32[$found$0$in$i3$i >> 2] | 0;
     $51 = (HEAP32[$33 >> 2] | 0) + 1 | 0;
     HEAP32[$vararg_buffer7 >> 2] = 69680;
     HEAP32[$vararg_buffer7 + 4 >> 2] = $found$0$i4$i;
     HEAP32[$vararg_buffer7 + 8 >> 2] = $51;
     _luaL_error($l, 69328, $vararg_buffer7) | 0;
    }
    _json_next_token($json, $token$i);
    _json_process_value($l, $json, $token$i);
    _lua_rawset($l, -3);
    _json_next_token($json, $token$i);
    $52 = HEAP32[$token$i >> 2] | 0;
    if (($52 | 0) == 1) break; else if (($52 | 0) != 9) {
     _strbuf_free(HEAP32[$json$idx$i >> 2] | 0);
     $55 = HEAP32[$token$i >> 2] | 0;
     if (($55 | 0) == 12) $found$0$in$i6$i = $31; else $found$0$in$i6$i = 69264 + ($55 << 2) | 0;
     $found$0$i7$i = HEAP32[$found$0$in$i6$i >> 2] | 0;
     $59 = (HEAP32[$33 >> 2] | 0) + 1 | 0;
     HEAP32[$vararg_buffer12 >> 2] = 69688;
     HEAP32[$vararg_buffer12 + 4 >> 2] = $found$0$i7$i;
     HEAP32[$vararg_buffer12 + 8 >> 2] = $59;
     _luaL_error($l, 69328, $vararg_buffer12) | 0;
    }
    _json_next_token($json, $token$i);
    $36 = HEAP32[$token$i >> 2] | 0;
   }
   HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + -1;
   STACKTOP = sp;
   return;
  }
 case 4:
  {
   _lua_pushlstring($l, HEAP32[$token + 8 >> 2] | 0, HEAP32[$token + 16 >> 2] | 0) | 0;
   STACKTOP = sp;
   return;
  }
 case 2:
  {
   $60 = $json + 16 | 0;
   $61 = HEAP32[$60 >> 2] | 0;
   HEAP32[$60 >> 2] = $61 + 1;
   if (($61 | 0) < (HEAP32[(HEAP32[$json + 12 >> 2] | 0) + 1340 >> 2] | 0)) {
    if (!(_lua_checkstack($l, 2) | 0)) label = 27;
   } else label = 27;
   if ((label | 0) == 27) {
    _strbuf_free(HEAP32[$json + 8 >> 2] | 0);
    $78 = (HEAP32[$json + 4 >> 2] | 0) - (HEAP32[$json >> 2] | 0) | 0;
    HEAP32[$vararg_buffer17 >> 2] = HEAP32[$60 >> 2];
    HEAP32[$vararg_buffer17 + 4 >> 2] = $78;
    _luaL_error($l, 69592, $vararg_buffer17) | 0;
   }
   _lua_createtable($l, 0, 0);
   _json_next_token($json, $token$i1);
   if ((HEAP32[$token$i1 >> 2] | 0) == 3) {
    HEAP32[$60 >> 2] = (HEAP32[$60 >> 2] | 0) + -1;
    STACKTOP = sp;
    return;
   }
   $json$idx$i3 = $json + 8 | 0;
   $81 = $token$i1 + 8 | 0;
   $82 = $token$i1 + 4 | 0;
   $i$0$i = 1;
   while (1) {
    _json_process_value($l, $json, $token$i1);
    _lua_rawseti($l, -2, $i$0$i);
    _json_next_token($json, $token$i1);
    $85 = HEAP32[$token$i1 >> 2] | 0;
    if (($85 | 0) == 3) break; else if (($85 | 0) != 9) {
     _strbuf_free(HEAP32[$json$idx$i3 >> 2] | 0);
     $88 = HEAP32[$token$i1 >> 2] | 0;
     if (($88 | 0) == 12) $found$0$in$i$i5 = $81; else $found$0$in$i$i5 = 69264 + ($88 << 2) | 0;
     $found$0$i$i6 = HEAP32[$found$0$in$i$i5 >> 2] | 0;
     $92 = (HEAP32[$82 >> 2] | 0) + 1 | 0;
     HEAP32[$vararg_buffer21 >> 2] = 69568;
     HEAP32[$vararg_buffer21 + 4 >> 2] = $found$0$i$i6;
     HEAP32[$vararg_buffer21 + 8 >> 2] = $92;
     _luaL_error($l, 69328, $vararg_buffer21) | 0;
    }
    _json_next_token($json, $token$i1);
    $i$0$i = $i$0$i + 1 | 0;
   }
   HEAP32[$60 >> 2] = (HEAP32[$60 >> 2] | 0) + -1;
   STACKTOP = sp;
   return;
  }
 case 7:
  {
   _lua_pushlightuserdata($l, 0);
   STACKTOP = sp;
   return;
  }
 case 5:
  {
   _lua_pushnumber($l, +HEAPF64[$token + 8 >> 3]);
   STACKTOP = sp;
   return;
  }
 default:
  {
   _strbuf_free(HEAP32[$json + 8 >> 2] | 0);
   $94 = HEAP32[$token >> 2] | 0;
   if (($94 | 0) == 12) $found$0$in$i = $token + 8 | 0; else $found$0$in$i = 69264 + ($94 << 2) | 0;
   $found$0$i = HEAP32[$found$0$in$i >> 2] | 0;
   $100 = (HEAP32[$token + 4 >> 2] | 0) + 1 | 0;
   HEAP32[$vararg_buffer26 >> 2] = 69560;
   HEAP32[$vararg_buffer26 + 4 >> 2] = $found$0$i;
   HEAP32[$vararg_buffer26 + 8 >> 2] = $100;
   _luaL_error($l, 69328, $vararg_buffer26) | 0;
   STACKTOP = sp;
   return;
  }
 }
}

function _vorbis_deinit($p) {
 $p = $p | 0;
 var $$lcssa = 0, $$lcssa43 = 0, $$lcssa49 = 0, $$lcssa50 = 0, $$lcssa57 = 0, $$lcssa58 = 0, $$pre$phiZ2D = 0, $0 = 0, $10 = 0, $12 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $16 = 0, $18 = 0, $22 = 0, $24 = 0, $27 = 0, $3 = 0, $34 = 0, $36 = 0, $39 = 0, $4 = 0, $41 = 0, $5 = 0, $53 = 0, $57 = 0, $6 = 0, $61 = 0, $62 = 0, $69 = 0, $7 = 0, $70 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $i$065 = 0, $i$152 = 0, $i$245 = 0, $i$342 = 0, $j$060 = 0, $p$idx10$val$pr = 0, $p$idx11$pre$phiZZ2D = 0, $p$idx11$val = 0, $p$idx13$val = 0, $p$idx17 = 0, $p$idx17$val = 0, $p$idx18 = 0, $p$idx20$val = 0, $p$idx20$val59 = 0, $p$idx20$val77 = 0, $p$idx9$val = 0, $p$idx9$val44 = 0, $p$idx9$val82 = 0;
 $0 = $p + 280 | 0;
 if ((HEAP32[$0 >> 2] | 0) > 0) {
  $3 = $p + 412 | 0;
  $p$idx18 = $p + 96 | 0;
  $4 = $p + 140 | 0;
  $i$065 = 0;
  do {
   $5 = HEAP32[$3 >> 2] | 0;
   $6 = $5 + ($i$065 * 24 | 0) + 16 | 0;
   $7 = HEAP32[$6 >> 2] | 0;
   if ($7) {
    $9 = $5 + ($i$065 * 24 | 0) + 13 | 0;
    $10 = HEAP8[$9 >> 0] | 0;
    $12 = HEAP32[$4 >> 2] | 0;
    $p$idx20$val59 = HEAP32[$p$idx18 >> 2] | 0;
    $16 = ($p$idx20$val59 | 0) == 0;
    if ((HEAP32[$12 + (($10 & 255) * 2096 | 0) + 4 >> 2] | 0) > 0) {
     $132 = $12;
     $133 = $10;
     $134 = $16;
     $18 = $7;
     $j$060 = 0;
     $p$idx20$val77 = $p$idx20$val59;
     while (1) {
      if ($134) {
       _free(HEAP32[$18 + ($j$060 << 2) >> 2] | 0);
       $135 = HEAP32[$6 >> 2] | 0;
       $22 = HEAP8[$9 >> 0] | 0;
       $24 = HEAP32[$4 >> 2] | 0;
       $p$idx20$val = HEAP32[$p$idx18 >> 2] | 0;
      } else {
       $135 = $18;
       $22 = $133;
       $24 = $132;
       $p$idx20$val = $p$idx20$val77;
      }
      $j$060 = $j$060 + 1 | 0;
      $27 = ($p$idx20$val | 0) == 0;
      if (($j$060 | 0) >= (HEAP32[$24 + (($22 & 255) * 2096 | 0) + 4 >> 2] | 0)) {
       $$lcssa57 = $135;
       $$lcssa58 = $27;
       break;
      } else {
       $132 = $24;
       $133 = $22;
       $134 = $27;
       $18 = $135;
       $p$idx20$val77 = $p$idx20$val;
      }
     }
    } else {
     $$lcssa57 = $7;
     $$lcssa58 = $16;
    }
    if ($$lcssa58) _free($$lcssa57);
   }
   if (!(HEAP32[$p$idx18 >> 2] | 0)) _free(HEAP32[$5 + ($i$065 * 24 | 0) + 20 >> 2] | 0);
   $i$065 = $i$065 + 1 | 0;
  } while (($i$065 | 0) < (HEAP32[$0 >> 2] | 0));
  $$pre$phiZ2D = $4;
 } else $$pre$phiZ2D = $p + 140 | 0;
 $34 = HEAP32[$$pre$phiZ2D >> 2] | 0;
 if (!$34) $p$idx11$pre$phiZZ2D = $p + 96 | 0; else {
  $36 = $p + 136 | 0;
  $p$idx17 = $p + 96 | 0;
  $39 = (HEAP32[$p$idx17 >> 2] | 0) == 0;
  if ((HEAP32[$36 >> 2] | 0) > 0) {
   $136 = $39;
   $41 = $34;
   $i$152 = 0;
   while (1) {
    if ($136) {
     _free(HEAP32[$41 + ($i$152 * 2096 | 0) + 8 >> 2] | 0);
     if (!(HEAP32[$p$idx17 >> 2] | 0)) {
      _free(HEAP32[$41 + ($i$152 * 2096 | 0) + 28 >> 2] | 0);
      if (!(HEAP32[$p$idx17 >> 2] | 0)) {
       _free(HEAP32[$41 + ($i$152 * 2096 | 0) + 32 >> 2] | 0);
       if (!(HEAP32[$p$idx17 >> 2] | 0)) _free(HEAP32[$41 + ($i$152 * 2096 | 0) + 2084 >> 2] | 0);
      }
     }
    }
    $53 = HEAP32[$41 + ($i$152 * 2096 | 0) + 2088 >> 2] | 0;
    if (!$53) $57 = 0; else $57 = $53 + -4 | 0;
    $p$idx13$val = HEAP32[$p$idx17 >> 2] | 0;
    if (!$p$idx13$val) {
     _free($57);
     $p$idx17$val = HEAP32[$p$idx17 >> 2] | 0;
    } else $p$idx17$val = $p$idx13$val;
    $i$152 = $i$152 + 1 | 0;
    $61 = HEAP32[$$pre$phiZ2D >> 2] | 0;
    $62 = ($p$idx17$val | 0) == 0;
    if (($i$152 | 0) >= (HEAP32[$36 >> 2] | 0)) {
     $$lcssa49 = $61;
     $$lcssa50 = $62;
     break;
    } else {
     $136 = $62;
     $41 = $61;
    }
   }
  } else {
   $$lcssa49 = $34;
   $$lcssa50 = $39;
  }
  if ($$lcssa50) {
   _free($$lcssa49);
   $p$idx11$pre$phiZZ2D = $p$idx17;
  } else $p$idx11$pre$phiZZ2D = $p$idx17;
 }
 $p$idx11$val = HEAP32[$p$idx11$pre$phiZZ2D >> 2] | 0;
 if (!$p$idx11$val) {
  _free(HEAP32[$p + 276 >> 2] | 0);
  $p$idx10$val$pr = HEAP32[$p$idx11$pre$phiZZ2D >> 2] | 0;
  if (!$p$idx10$val$pr) {
   _free(HEAP32[$p + 412 >> 2] | 0);
   $p$idx9$val44 = HEAP32[$p$idx11$pre$phiZZ2D >> 2] | 0;
  } else $p$idx9$val44 = $p$idx10$val$pr;
 } else $p$idx9$val44 = $p$idx11$val;
 $69 = $p + 416 | 0;
 $70 = HEAP32[$69 >> 2] | 0;
 $72 = $p + 420 | 0;
 $73 = HEAP32[$72 >> 2] | 0;
 $74 = ($p$idx9$val44 | 0) == 0;
 if (($70 | 0) > 0) {
  $137 = $70;
  $138 = $74;
  $76 = $73;
  $i$245 = 0;
  $p$idx9$val82 = $p$idx9$val44;
  while (1) {
   if ($138) {
    _free(HEAP32[$76 + ($i$245 * 40 | 0) + 4 >> 2] | 0);
    $139 = HEAP32[$72 >> 2] | 0;
    $80 = HEAP32[$69 >> 2] | 0;
    $p$idx9$val = HEAP32[$p$idx11$pre$phiZZ2D >> 2] | 0;
   } else {
    $139 = $76;
    $80 = $137;
    $p$idx9$val = $p$idx9$val82;
   }
   $i$245 = $i$245 + 1 | 0;
   $81 = ($p$idx9$val | 0) == 0;
   if (($i$245 | 0) >= ($80 | 0)) {
    $$lcssa = $139;
    $$lcssa43 = $81;
    break;
   } else {
    $137 = $80;
    $138 = $81;
    $76 = $139;
    $p$idx9$val82 = $p$idx9$val;
   }
  }
 } else {
  $$lcssa = $73;
  $$lcssa43 = $74;
 }
 if ($$lcssa43) _free($$lcssa);
 $82 = $p + 4 | 0;
 if ((HEAP32[$82 >> 2] | 0) > 0) {
  $i$342 = 0;
  do {
   if (!(HEAP32[$p$idx11$pre$phiZZ2D >> 2] | 0)) {
    _free(HEAP32[$p + ($i$342 << 2) + 816 >> 2] | 0);
    if (!(HEAP32[$p$idx11$pre$phiZZ2D >> 2] | 0)) {
     _free(HEAP32[$p + ($i$342 << 2) + 944 >> 2] | 0);
     if (!(HEAP32[$p$idx11$pre$phiZZ2D >> 2] | 0)) _free(HEAP32[$p + ($i$342 << 2) + 1012 >> 2] | 0);
    }
   }
   $i$342 = $i$342 + 1 | 0;
  } while (($i$342 | 0) < (HEAP32[$82 >> 2] | 0));
 }
 if (!(HEAP32[$p$idx11$pre$phiZZ2D >> 2] | 0)) {
  _free(HEAP32[$p + 1084 >> 2] | 0);
  if (!(HEAP32[$p$idx11$pre$phiZZ2D >> 2] | 0)) {
   _free(HEAP32[$p + 1092 >> 2] | 0);
   if (!(HEAP32[$p$idx11$pre$phiZZ2D >> 2] | 0)) {
    _free(HEAP32[$p + 1100 >> 2] | 0);
    if (!(HEAP32[$p$idx11$pre$phiZZ2D >> 2] | 0)) {
     _free(HEAP32[$p + 1108 >> 2] | 0);
     if (!(HEAP32[$p$idx11$pre$phiZZ2D >> 2] | 0)) {
      _free(HEAP32[$p + 1116 >> 2] | 0);
      if (!(HEAP32[$p$idx11$pre$phiZZ2D >> 2] | 0)) {
       _free(HEAP32[$p + 1088 >> 2] | 0);
       if (!(HEAP32[$p$idx11$pre$phiZZ2D >> 2] | 0)) {
        _free(HEAP32[$p + 1096 >> 2] | 0);
        if (!(HEAP32[$p$idx11$pre$phiZZ2D >> 2] | 0)) {
         _free(HEAP32[$p + 1104 >> 2] | 0);
         if (!(HEAP32[$p$idx11$pre$phiZZ2D >> 2] | 0)) {
          _free(HEAP32[$p + 1112 >> 2] | 0);
          if (!(HEAP32[$p$idx11$pre$phiZZ2D >> 2] | 0)) _free(HEAP32[$p + 1120 >> 2] | 0);
         }
        }
       }
      }
     }
    }
   }
  }
 }
 if (!(HEAP32[$p + 28 >> 2] | 0)) return;
 _fclose(HEAP32[$p + 20 >> 2] | 0) | 0;
 return;
}

function _stbtt_FlattenCurves($vertices, $num_verts, $objspace_flatness, $contour_lengths, $num_contours, $userdata) {
 $vertices = $vertices | 0;
 $num_verts = $num_verts | 0;
 $objspace_flatness = +$objspace_flatness;
 $contour_lengths = $contour_lengths | 0;
 $num_contours = $num_contours | 0;
 $userdata = $userdata | 0;
 var $$0 = 0, $0 = 0.0, $1 = 0, $102 = 0, $104 = 0, $108 = 0, $14 = 0, $17 = 0, $20 = 0, $29 = 0, $37 = 0.0, $40 = 0.0, $49 = 0, $51 = 0.0, $54 = 0.0, $57 = 0, $60 = 0, $67 = 0, $69 = 0.0, $72 = 0.0, $77 = 0.0, $80 = 0.0, $81 = 0, $9 = 0, $93 = 0, $i$024 = 0, $i$12 = 0, $i$12$us = 0, $n$025 = 0, $n$2$lcssa = 0, $n$24 = 0, $n$24$us = 0, $n$3 = 0, $n$3$us = 0, $num_points = 0, $pass$023 = 0, $points$021 = 0, $points$1 = 0, $split = 0, $split8 = 0, $start$022 = 0, $start$1$lcssa = 0, $start$15 = 0, $start$15$us = 0, $start$2 = 0, $start$2$us = 0, $x$06 = 0.0, $x$06$us = 0.0, $x$1 = 0.0, $x$1$us = 0.0, $y$07 = 0.0, $y$07$us = 0.0, $y$1 = 0.0, $y$1$us = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $num_points = sp;
 HEAP32[$num_points >> 2] = 0;
 $0 = $objspace_flatness * $objspace_flatness;
 $1 = ($num_verts | 0) > 0;
 if ($1) {
  $i$024 = 0;
  $n$025 = 0;
 } else {
  HEAP32[$num_contours >> 2] = 0;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 do {
  $n$025 = ((HEAP8[$vertices + ($i$024 * 10 | 0) + 8 >> 0] | 0) == 1 & 1) + $n$025 | 0;
  $i$024 = $i$024 + 1 | 0;
 } while (($i$024 | 0) != ($num_verts | 0));
 HEAP32[$num_contours >> 2] = $n$025;
 if (!$n$025) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $9 = _malloc($n$025 << 2) | 0;
 HEAP32[$contour_lengths >> 2] = $9;
 if (!$9) {
  HEAP32[$num_contours >> 2] = 0;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $108 = $9;
  $pass$023 = 0;
  $points$021 = 0;
  $start$022 = 0;
 }
 while (1) {
  if (($pass$023 | 0) == 1) {
   $14 = _malloc(HEAP32[$num_points >> 2] << 3) | 0;
   if (!$14) break; else $points$1 = $14;
  } else $points$1 = $points$021;
  HEAP32[$num_points >> 2] = 0;
  if ($1) {
   if (!$points$1) {
    $i$12$us = 0;
    $n$24$us = -1;
    $start$15$us = $start$022;
    $x$06$us = 0.0;
    $y$07$us = 0.0;
    while (1) {
     $17 = $vertices + ($i$12$us * 10 | 0) | 0;
     $20 = HEAPU8[$vertices + ($i$12$us * 10 | 0) + 8 >> 0] | 0;
     if (($20 | 0) == 2) {
      $37 = +(HEAP16[$17 >> 1] | 0);
      $40 = +(HEAP16[$vertices + ($i$12$us * 10 | 0) + 2 >> 1] | 0);
      HEAP32[$num_points >> 2] = (HEAP32[$num_points >> 2] | 0) + 1;
      $n$3$us = $n$24$us;
      $start$2$us = $start$15$us;
      $x$1$us = $37;
      $y$1$us = $40;
     } else if (($20 | 0) == 1) {
      if (($n$24$us | 0) > -1) HEAP32[(HEAP32[$contour_lengths >> 2] | 0) + ($n$24$us << 2) >> 2] = (HEAP32[$num_points >> 2] | 0) - $start$15$us;
      $49 = HEAP32[$num_points >> 2] | 0;
      $51 = +(HEAP16[$17 >> 1] | 0);
      $54 = +(HEAP16[$vertices + ($i$12$us * 10 | 0) + 2 >> 1] | 0);
      HEAP32[$num_points >> 2] = $49 + 1;
      $n$3$us = $n$24$us + 1 | 0;
      $start$2$us = $49;
      $x$1$us = $51;
      $y$1$us = $54;
     } else if (($20 | 0) == 3) {
      $29 = $vertices + ($i$12$us * 10 | 0) + 2 | 0;
      _stbtt__tesselate_curve(0, $num_points, $x$06$us, $y$07$us, +(HEAP16[$vertices + ($i$12$us * 10 | 0) + 4 >> 1] | 0), +(HEAP16[$vertices + ($i$12$us * 10 | 0) + 6 >> 1] | 0), +(HEAP16[$17 >> 1] | 0), +(HEAP16[$29 >> 1] | 0), $0, 0);
      $n$3$us = $n$24$us;
      $start$2$us = $start$15$us;
      $x$1$us = +(HEAP16[$17 >> 1] | 0);
      $y$1$us = +(HEAP16[$29 >> 1] | 0);
     } else {
      $n$3$us = $n$24$us;
      $start$2$us = $start$15$us;
      $x$1$us = $x$06$us;
      $y$1$us = $y$07$us;
     }
     $i$12$us = $i$12$us + 1 | 0;
     if (($i$12$us | 0) == ($num_verts | 0)) {
      $split = $start$2$us;
      $split8 = $n$3$us;
      break;
     } else {
      $n$24$us = $n$3$us;
      $start$15$us = $start$2$us;
      $x$06$us = $x$1$us;
      $y$07$us = $y$1$us;
     }
    }
   } else {
    $i$12 = 0;
    $n$24 = -1;
    $start$15 = $start$022;
    $x$06 = 0.0;
    $y$07 = 0.0;
    while (1) {
     $57 = $vertices + ($i$12 * 10 | 0) | 0;
     $60 = HEAPU8[$vertices + ($i$12 * 10 | 0) + 8 >> 0] | 0;
     if (($60 | 0) == 2) {
      $77 = +(HEAP16[$57 >> 1] | 0);
      $80 = +(HEAP16[$vertices + ($i$12 * 10 | 0) + 2 >> 1] | 0);
      $81 = HEAP32[$num_points >> 2] | 0;
      HEAP32[$num_points >> 2] = $81 + 1;
      HEAPF32[$points$1 + ($81 << 3) >> 2] = $77;
      HEAPF32[$points$1 + ($81 << 3) + 4 >> 2] = $80;
      $n$3 = $n$24;
      $start$2 = $start$15;
      $x$1 = $77;
      $y$1 = $80;
     } else if (($60 | 0) == 3) {
      $93 = $vertices + ($i$12 * 10 | 0) + 2 | 0;
      _stbtt__tesselate_curve($points$1, $num_points, $x$06, $y$07, +(HEAP16[$vertices + ($i$12 * 10 | 0) + 4 >> 1] | 0), +(HEAP16[$vertices + ($i$12 * 10 | 0) + 6 >> 1] | 0), +(HEAP16[$57 >> 1] | 0), +(HEAP16[$93 >> 1] | 0), $0, 0);
      $n$3 = $n$24;
      $start$2 = $start$15;
      $x$1 = +(HEAP16[$57 >> 1] | 0);
      $y$1 = +(HEAP16[$93 >> 1] | 0);
     } else if (($60 | 0) == 1) {
      if (($n$24 | 0) > -1) HEAP32[(HEAP32[$contour_lengths >> 2] | 0) + ($n$24 << 2) >> 2] = (HEAP32[$num_points >> 2] | 0) - $start$15;
      $67 = HEAP32[$num_points >> 2] | 0;
      $69 = +(HEAP16[$57 >> 1] | 0);
      $72 = +(HEAP16[$vertices + ($i$12 * 10 | 0) + 2 >> 1] | 0);
      HEAP32[$num_points >> 2] = $67 + 1;
      HEAPF32[$points$1 + ($67 << 3) >> 2] = $69;
      HEAPF32[$points$1 + ($67 << 3) + 4 >> 2] = $72;
      $n$3 = $n$24 + 1 | 0;
      $start$2 = $67;
      $x$1 = $69;
      $y$1 = $72;
     } else {
      $n$3 = $n$24;
      $start$2 = $start$15;
      $x$1 = $x$06;
      $y$1 = $y$07;
     }
     $i$12 = $i$12 + 1 | 0;
     if (($i$12 | 0) == ($num_verts | 0)) {
      $split = $start$2;
      $split8 = $n$3;
      break;
     } else {
      $n$24 = $n$3;
      $start$15 = $start$2;
      $x$06 = $x$1;
      $y$07 = $y$1;
     }
    }
   }
   $102 = HEAP32[$num_points >> 2] | 0;
   $104 = HEAP32[$contour_lengths >> 2] | 0;
   $n$2$lcssa = $split8;
   $start$1$lcssa = $split;
  } else {
   $102 = 0;
   $104 = $108;
   $n$2$lcssa = -1;
   $start$1$lcssa = $start$022;
  }
  HEAP32[$104 + ($n$2$lcssa << 2) >> 2] = $102 - $start$1$lcssa;
  $pass$023 = $pass$023 + 1 | 0;
  if (($pass$023 | 0) >= 2) {
   $$0 = $points$1;
   label = 28;
   break;
  } else {
   $108 = $104;
   $points$021 = $points$1;
   $start$022 = $start$1$lcssa;
  }
 }
 if ((label | 0) == 28) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 _free(HEAP32[$contour_lengths >> 2] | 0);
 HEAP32[$contour_lengths >> 2] = 0;
 HEAP32[$num_contours >> 2] = 0;
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _png_read_row($png_ptr, $row, $dsp_row) {
 $png_ptr = $png_ptr | 0;
 $row = $row | 0;
 $dsp_row = $dsp_row | 0;
 var $$pre$phiZ2D = 0, $101 = 0, $102 = 0, $106 = 0, $112 = 0, $115 = 0, $126 = 0, $137 = 0, $138 = 0, $142 = 0, $146 = 0, $147 = 0, $156 = 0, $159 = 0, $160 = 0, $162 = 0, $169 = 0, $17 = 0, $173 = 0, $18 = 0, $183 = 0, $19 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $6 = 0, $77 = 0, $80 = 0, $81 = 0, $82 = 0, $86 = 0, $9 = 0, $92 = 0, $bytes_per_pixel$0$i = 0, $bytes_per_pixel$1$i = 0, $i$01$i = 0, $i2$04$i = 0, $row_info = 0, $row_info$idx$val = 0, $row_info$idx1$val = 0, $rp$02$i = 0, $rp1$05$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $row_info = sp;
 if (!$png_ptr) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP32[$png_ptr + 212 >> 2] & 64)) _png_read_start_row($png_ptr);
 $6 = HEAP32[$png_ptr + 368 >> 2] | 0;
 HEAP32[$row_info >> 2] = $6;
 $9 = $row_info + 8 | 0;
 HEAP8[$9 >> 0] = HEAP8[$png_ptr + 435 >> 0] | 0;
 HEAP8[$row_info + 9 >> 0] = HEAP8[$png_ptr + 436 >> 0] | 0;
 HEAP8[$row_info + 10 >> 0] = HEAP8[$png_ptr + 439 >> 0] | 0;
 $17 = HEAP8[$png_ptr + 438 >> 0] | 0;
 $18 = $row_info + 11 | 0;
 HEAP8[$18 >> 0] = $17;
 $19 = $17 & 255;
 if (($17 & 255) > 7) $27 = Math_imul($19 >>> 3, $6) | 0; else $27 = ((Math_imul($6, $19) | 0) + 7 | 0) >>> 3;
 $26 = $row_info + 4 | 0;
 HEAP32[$26 >> 2] = $27;
 $28 = $png_ptr + 372 | 0;
 $29 = HEAP32[$28 >> 2] | 0;
 $30 = $png_ptr + 432 | 0;
 L11 : do if (HEAP8[$30 >> 0] | 0) if (HEAP32[$png_ptr + 216 >> 2] & 2) switch (HEAPU8[$png_ptr + 433 >> 0] | 0) {
 case 0:
  {
   if (!($29 & 7)) break L11;
   if ($dsp_row) _png_combine_row($png_ptr, $dsp_row, 1);
   _png_read_finish_row($png_ptr);
   STACKTOP = sp;
   return;
  }
 case 1:
  {
   if (!($29 & 7)) if ((HEAP32[$png_ptr + 348 >> 2] | 0) >>> 0 >= 5) break L11;
   if ($dsp_row) _png_combine_row($png_ptr, $dsp_row, 1);
   _png_read_finish_row($png_ptr);
   STACKTOP = sp;
   return;
  }
 case 2:
  {
   if (($29 & 7 | 0) == 4) break L11;
   if (!(($dsp_row | 0) == 0 | ($29 & 4 | 0) == 0)) _png_combine_row($png_ptr, $dsp_row, 1);
   _png_read_finish_row($png_ptr);
   STACKTOP = sp;
   return;
  }
 case 4:
  {
   if (($29 & 3 | 0) == 2) break L11;
   if (!(($dsp_row | 0) == 0 | ($29 & 2 | 0) == 0)) _png_combine_row($png_ptr, $dsp_row, 1);
   _png_read_finish_row($png_ptr);
   STACKTOP = sp;
   return;
  }
 case 5:
  {
   if (!($29 & 1)) if ((HEAP32[$png_ptr + 348 >> 2] | 0) >>> 0 >= 2) break L11;
   if ($dsp_row) _png_combine_row($png_ptr, $dsp_row, 1);
   _png_read_finish_row($png_ptr);
   STACKTOP = sp;
   return;
  }
 case 3:
  {
   if (!($29 & 3)) if ((HEAP32[$png_ptr + 348 >> 2] | 0) >>> 0 >= 3) break L11;
   if ($dsp_row) _png_combine_row($png_ptr, $dsp_row, 1);
   _png_read_finish_row($png_ptr);
   STACKTOP = sp;
   return;
  }
 default:
  {
   if ($29 & 1) break L11;
   _png_read_finish_row($png_ptr);
   STACKTOP = sp;
   return;
  }
 } while (0);
 if (!(HEAP32[$png_ptr + 208 >> 2] & 4)) _png_error($png_ptr, 74624);
 $77 = $png_ptr + 384 | 0;
 _png_read_IDAT_data($png_ptr, HEAP32[$77 >> 2] | 0, $27 + 1 | 0);
 $80 = HEAP32[$77 >> 2] | 0;
 $81 = HEAP8[$80 >> 0] | 0;
 $82 = $81 & 255;
 do if (!($81 << 24 >> 24)) {
  $$pre$phiZ2D = $png_ptr + 380 | 0;
  $92 = $80;
 } else if (($81 & 255) < 5) {
  $86 = $png_ptr + 380 | 0;
  _png_read_filter_row($png_ptr, $row_info, $80 + 1 | 0, (HEAP32[$86 >> 2] | 0) + 1 | 0, $82);
  $$pre$phiZ2D = $86;
  $92 = HEAP32[$77 >> 2] | 0;
  break;
 } else _png_error($png_ptr, 74664); while (0);
 _memcpy(HEAP32[$$pre$phiZ2D >> 2] | 0, $92 | 0, (HEAP32[$26 >> 2] | 0) + 1 | 0) | 0;
 do if (HEAP32[$png_ptr + 708 >> 2] & 4) if ((HEAP8[$png_ptr + 712 >> 0] | 0) == 64) {
  $101 = (HEAP32[$77 >> 2] | 0) + 1 | 0;
  $row_info$idx$val = HEAP32[$row_info >> 2] | 0;
  $row_info$idx1$val = HEAP16[$9 >> 1] | 0;
  $102 = $row_info$idx1$val & 255;
  if ($102 & 2) {
   $106 = ($row_info$idx1$val & 65535) >>> 8 & 255;
   if ($106 << 24 >> 24 == 16) {
    if ($102 << 24 >> 24 == 2) $bytes_per_pixel$1$i = 6; else if ($102 << 24 >> 24 == 6) $bytes_per_pixel$1$i = 8; else break;
    if (!$row_info$idx$val) break; else {
     $i2$04$i = 0;
     $rp1$05$i = $101;
    }
    while (1) {
     $126 = $rp1$05$i + 1 | 0;
     $137 = HEAPU8[$rp1$05$i + 2 >> 0] << 8 | HEAPU8[$rp1$05$i + 3 >> 0];
     $138 = $rp1$05$i + 4 | 0;
     $142 = $rp1$05$i + 5 | 0;
     $146 = $137 + (HEAPU8[$rp1$05$i >> 0] << 8 | HEAPU8[$126 >> 0]) | 0;
     $147 = (HEAPU8[$138 >> 0] << 8 | HEAPU8[$142 >> 0]) + $137 | 0;
     HEAP8[$rp1$05$i >> 0] = $146 >>> 8;
     HEAP8[$126 >> 0] = $146;
     HEAP8[$138 >> 0] = $147 >>> 8;
     HEAP8[$142 >> 0] = $147;
     $i2$04$i = $i2$04$i + 1 | 0;
     if (($i2$04$i | 0) == ($row_info$idx$val | 0)) break; else $rp1$05$i = $rp1$05$i + $bytes_per_pixel$1$i | 0;
    }
   } else if ($106 << 24 >> 24 == 8) {
    if ($102 << 24 >> 24 == 6) $bytes_per_pixel$0$i = 4; else if ($102 << 24 >> 24 == 2) $bytes_per_pixel$0$i = 3; else break;
    if (!$row_info$idx$val) break; else {
     $i$01$i = 0;
     $rp$02$i = $101;
    }
    while (1) {
     $112 = HEAPU8[$rp$02$i + 1 >> 0] | 0;
     HEAP8[$rp$02$i >> 0] = $112 + (HEAPU8[$rp$02$i >> 0] | 0);
     $115 = $rp$02$i + 2 | 0;
     HEAP8[$115 >> 0] = (HEAPU8[$115 >> 0] | 0) + $112;
     $i$01$i = $i$01$i + 1 | 0;
     if (($i$01$i | 0) == ($row_info$idx$val | 0)) break; else $rp$02$i = $rp$02$i + $bytes_per_pixel$0$i | 0;
    }
   } else break;
  }
 } while (0);
 $156 = $png_ptr + 216 | 0;
 if (HEAP32[$156 >> 2] | 0) _png_do_read_transformations($png_ptr, $row_info);
 $159 = $png_ptr + 443 | 0;
 $160 = HEAP8[$159 >> 0] | 0;
 $162 = HEAP8[$18 >> 0] | 0;
 if (!($160 << 24 >> 24)) {
  HEAP8[$159 >> 0] = $162;
  if (($162 & 255) > (HEAPU8[$png_ptr + 442 >> 0] | 0)) _png_error($png_ptr, 74696);
 } else if ($160 << 24 >> 24 != $162 << 24 >> 24) _png_error($png_ptr, 74720);
 if (!(HEAP8[$30 >> 0] | 0)) label = 73; else {
  $169 = HEAP32[$156 >> 2] | 0;
  if (!($169 & 2)) label = 73; else {
   $173 = HEAP8[$png_ptr + 433 >> 0] | 0;
   if (($173 & 255) < 6) _png_do_read_interlace($row_info, (HEAP32[$77 >> 2] | 0) + 1 | 0, $173 & 255, $169);
   if ($dsp_row) _png_combine_row($png_ptr, $dsp_row, 1);
   if ($row) _png_combine_row($png_ptr, $row, 0);
  }
 }
 if ((label | 0) == 73) {
  if ($row) _png_combine_row($png_ptr, $row, -1);
  if ($dsp_row) _png_combine_row($png_ptr, $dsp_row, -1);
 }
 _png_read_finish_row($png_ptr);
 $183 = HEAP32[$png_ptr + 544 >> 2] | 0;
 if (!$183) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_viii[$183 & 15]($png_ptr, HEAP32[$28 >> 2] | 0, HEAPU8[$png_ptr + 433 >> 0] | 0);
 STACKTOP = sp;
 return;
}

function _png_do_read_interlace($row_info, $row, $pass, $transformations) {
 $row_info = $row_info | 0;
 $row = $row | 0;
 $pass = $pass | 0;
 $transformations = $transformations | 0;
 var $107 = 0, $116 = 0, $121 = 0, $126 = 0, $132 = 0, $133 = 0, $134 = 0, $137 = 0, $144 = 0, $145 = 0, $153 = 0, $18 = 0, $2 = 0, $29 = 0, $38 = 0, $4 = 0, $43 = 0, $5 = 0, $58 = 0, $6 = 0, $71 = 0, $8 = 0, $80 = 0, $85 = 0, $98 = 0, $dp$022 = 0, $dp$112 = 0, $dp14$052 = 0, $dp14$142 = 0, $dp2$036 = 0, $dp2$126 = 0, $dp26$06 = 0, $dp26$13 = 0, $dshift$0 = 0, $dshift$120 = 0, $dshift$211 = 0, $dshift16$0$in = 0, $dshift16$154 = 0, $dshift16$243 = 0, $dshift4$0 = 0, $dshift4$138 = 0, $dshift4$227 = 0, $i$019 = 0, $i20$055 = 0, $i28$07 = 0, $i9$039 = 0, $j$010 = 0, $j11$028 = 0, $j23$044 = 0, $j30$04 = 0, $s_end$0 = 0, $s_end18$0 = 0, $s_end6$0 = 0, $s_inc$0 = 0, $s_inc19$0 = 0, $s_inc7$0 = 0, $s_start$0 = 0, $s_start17$0 = 0, $s_start5$0 = 0, $sp$023 = 0, $sp1$035 = 0, $sp13$051 = 0, $sp25$05 = 0, $sshift$0 = 0, $sshift$121 = 0, $sshift15$0$in = 0, $sshift15$153 = 0, $sshift3$0 = 0, $sshift3$137 = 0, $v29 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $v29 = sp;
 if (($row | 0) == 0 | ($row_info | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 $2 = HEAP32[$row_info >> 2] | 0;
 $4 = HEAP32[76872 + ($pass << 2) >> 2] | 0;
 $5 = Math_imul($4, $2) | 0;
 $6 = $row_info + 11 | 0;
 $8 = HEAPU8[$6 >> 0] | 0;
 if (($8 | 0) == 1) {
  $18 = $2 + 7 & 7;
  if (!($transformations & 65536)) {
   $dshift$0 = $5 + 7 & 7 ^ 7;
   $s_end$0 = 7;
   $s_inc$0 = 1;
   $s_start$0 = 0;
   $sshift$0 = $18 ^ 7;
  } else {
   $dshift$0 = $5 + 7 & 7;
   $s_end$0 = 0;
   $s_inc$0 = -1;
   $s_start$0 = 7;
   $sshift$0 = $18;
  }
  if ($2) {
   $dp$022 = $row + (($5 + -1 | 0) >>> 3) | 0;
   $dshift$120 = $dshift$0;
   $i$019 = 0;
   $sp$023 = $row + (($2 + -1 | 0) >>> 3) | 0;
   $sshift$121 = $sshift$0;
   while (1) {
    $29 = (HEAPU8[$sp$023 >> 0] | 0) >>> $sshift$121 & 1;
    $dp$112 = $dp$022;
    $dshift$211 = $dshift$120;
    $j$010 = 0;
    do {
     HEAP8[$dp$112 >> 0] = (HEAPU8[$dp$112 >> 0] | 0) & 32639 >>> (7 - $dshift$211 | 0) | $29 << $dshift$211;
     $38 = ($dshift$211 | 0) == ($s_end$0 | 0);
     $dshift$211 = $38 ? $s_start$0 : $dshift$211 + $s_inc$0 | 0;
     $dp$112 = $38 ? $dp$112 + -1 | 0 : $dp$112;
     $j$010 = $j$010 + 1 | 0;
    } while (($j$010 | 0) < ($4 | 0));
    $43 = ($sshift$121 | 0) == ($s_end$0 | 0);
    $i$019 = $i$019 + 1 | 0;
    if ($i$019 >>> 0 >= (HEAP32[$row_info >> 2] | 0) >>> 0) break; else {
     $dp$022 = $dp$112;
     $dshift$120 = $dshift$211;
     $sp$023 = $43 ? $sp$023 + -1 | 0 : $sp$023;
     $sshift$121 = $43 ? $s_start$0 : $sshift$121 + $s_inc$0 | 0;
    }
   }
  }
 } else if (($8 | 0) == 4) {
  $98 = $2 & 1;
  if (!($transformations & 65536)) {
   $dshift16$0$in = $5 & 1;
   $s_end18$0 = 4;
   $s_inc19$0 = 4;
   $s_start17$0 = 0;
   $sshift15$0$in = $98;
  } else {
   $dshift16$0$in = $5 & 1 ^ 1;
   $s_end18$0 = 0;
   $s_inc19$0 = -4;
   $s_start17$0 = 4;
   $sshift15$0$in = $98 ^ 1;
  }
  if ($2) {
   $dp14$052 = $row + (($5 + -1 | 0) >>> 1) | 0;
   $dshift16$154 = $dshift16$0$in << 2;
   $i20$055 = 0;
   $sp13$051 = $row + (($2 + -1 | 0) >>> 1) | 0;
   $sshift15$153 = $sshift15$0$in << 2;
   while (1) {
    $107 = (HEAPU8[$sp13$051 >> 0] | 0) >>> $sshift15$153 & 15;
    $dp14$142 = $dp14$052;
    $dshift16$243 = $dshift16$154;
    $j23$044 = 0;
    do {
     HEAP8[$dp14$142 >> 0] = (HEAPU8[$dp14$142 >> 0] | 0) & 3855 >>> (4 - $dshift16$243 | 0) | $107 << $dshift16$243;
     $116 = ($dshift16$243 | 0) == ($s_end18$0 | 0);
     $dp14$142 = $116 ? $dp14$142 + -1 | 0 : $dp14$142;
     $dshift16$243 = $116 ? $s_start17$0 : $dshift16$243 + $s_inc19$0 | 0;
     $j23$044 = $j23$044 + 1 | 0;
    } while (($j23$044 | 0) < ($4 | 0));
    $121 = ($sshift15$153 | 0) == ($s_end18$0 | 0);
    $i20$055 = $i20$055 + 1 | 0;
    if ($i20$055 >>> 0 >= (HEAP32[$row_info >> 2] | 0) >>> 0) break; else {
     $dp14$052 = $dp14$142;
     $dshift16$154 = $dshift16$243;
     $sp13$051 = $121 ? $sp13$051 + -1 | 0 : $sp13$051;
     $sshift15$153 = $121 ? $s_start17$0 : $sshift15$153 + $s_inc19$0 | 0;
    }
   }
  }
 } else if (($8 | 0) == 2) {
  $58 = ($2 << 1) + 6 & 6;
  if (!($transformations & 65536)) {
   $dshift4$0 = ($5 << 1) + 6 & 6 ^ 6;
   $s_end6$0 = 6;
   $s_inc7$0 = 2;
   $s_start5$0 = 0;
   $sshift3$0 = $58 ^ 6;
  } else {
   $dshift4$0 = ($5 << 1) + 6 & 6;
   $s_end6$0 = 0;
   $s_inc7$0 = -2;
   $s_start5$0 = 6;
   $sshift3$0 = $58;
  }
  if ($2) {
   $dp2$036 = $row + (($5 + -1 | 0) >>> 2) | 0;
   $dshift4$138 = $dshift4$0;
   $i9$039 = 0;
   $sp1$035 = $row + (($2 + -1 | 0) >>> 2) | 0;
   $sshift3$137 = $sshift3$0;
   while (1) {
    $71 = (HEAPU8[$sp1$035 >> 0] | 0) >>> $sshift3$137 & 3;
    $dp2$126 = $dp2$036;
    $dshift4$227 = $dshift4$138;
    $j11$028 = 0;
    do {
     HEAP8[$dp2$126 >> 0] = (HEAPU8[$dp2$126 >> 0] | 0) & 16191 >>> (6 - $dshift4$227 | 0) | $71 << $dshift4$227;
     $80 = ($dshift4$227 | 0) == ($s_end6$0 | 0);
     $dp2$126 = $80 ? $dp2$126 + -1 | 0 : $dp2$126;
     $dshift4$227 = $80 ? $s_start5$0 : $dshift4$227 + $s_inc7$0 | 0;
     $j11$028 = $j11$028 + 1 | 0;
    } while (($j11$028 | 0) < ($4 | 0));
    $85 = ($sshift3$137 | 0) == ($s_end6$0 | 0);
    $i9$039 = $i9$039 + 1 | 0;
    if ($i9$039 >>> 0 >= (HEAP32[$row_info >> 2] | 0) >>> 0) break; else {
     $dp2$036 = $dp2$126;
     $dshift4$138 = $dshift4$227;
     $sp1$035 = $85 ? $sp1$035 + -1 | 0 : $sp1$035;
     $sshift3$137 = $85 ? $s_start5$0 : $sshift3$137 + $s_inc7$0 | 0;
    }
   }
  }
 } else {
  $126 = $8 >>> 3;
  if ($2) {
   $132 = $row + (Math_imul($126, $5 + -1 | 0) | 0) | 0;
   $133 = $row + (Math_imul($126, $2 + -1 | 0) | 0) | 0;
   $134 = 0 - $126 | 0;
   $137 = 0 - (Math_imul(($4 | 0) > 1 ? $4 : 1, $126) | 0) | 0;
   $dp26$06 = $132;
   $i28$07 = 0;
   $sp25$05 = $133;
   while (1) {
    _memcpy($v29 | 0, $sp25$05 | 0, $126 | 0) | 0;
    $dp26$13 = $dp26$06;
    $j30$04 = 0;
    while (1) {
     _memcpy($dp26$13 | 0, $v29 | 0, $126 | 0) | 0;
     $j30$04 = $j30$04 + 1 | 0;
     if (($j30$04 | 0) >= ($4 | 0)) break; else $dp26$13 = $dp26$13 + $134 | 0;
    }
    $i28$07 = $i28$07 + 1 | 0;
    if ($i28$07 >>> 0 >= (HEAP32[$row_info >> 2] | 0) >>> 0) break; else {
     $dp26$06 = $dp26$06 + $137 | 0;
     $sp25$05 = $sp25$05 + $134 | 0;
    }
   }
  }
 }
 HEAP32[$row_info >> 2] = $5;
 $144 = HEAP8[$6 >> 0] | 0;
 $145 = $144 & 255;
 if (($144 & 255) > 7) $153 = Math_imul($145 >>> 3, $5) | 0; else $153 = ((Math_imul($145, $5) | 0) + 7 | 0) >>> 3;
 HEAP32[$row_info + 4 >> 2] = $153;
 STACKTOP = sp;
 return;
}

function __ZNK13b2DynamicTree7RayCastI21b2WorldRayCastWrapperEEvPT_RK14b2RayCastInput($this, $callback, $input) {
 $this = $this | 0;
 $callback = $callback | 0;
 $input = $input | 0;
 var $$ph = 0.0, $$ph$ph = 0.0, $$ph32 = 0.0, $$ph32$ph = 0.0, $$ph33 = 0.0, $$ph33$ph = 0.0, $$ph34 = 0.0, $$ph34$ph = 0.0, $$ph3548 = 0, $$ph3649 = 0.0, $$ph3751 = 0.0, $$ph3853 = 0.0, $$ph3955 = 0.0, $$pr = 0, $$pre = 0, $0 = 0, $103 = 0.0, $106 = 0.0, $108 = 0, $111 = 0, $116 = 0, $117 = 0, $121 = 0, $126 = 0, $127 = 0, $131 = 0.0, $136 = 0.0, $137 = 0.0, $15 = 0.0, $150 = 0, $156 = 0, $159 = 0, $160 = 0, $165 = 0, $17 = 0.0, $173 = 0, $176 = 0, $18 = 0.0, $21 = 0.0, $23 = 0.0, $25 = 0.0, $28 = 0.0, $29 = 0.0, $31 = 0.0, $33 = 0.0, $36 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $46 = 0, $48 = 0, $49 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $66 = 0, $67 = 0, $69 = 0, $7 = 0.0, $71 = 0.0, $74 = 0.0, $77 = 0.0, $8 = 0, $80 = 0.0, $9 = 0, $98 = 0.0, $maxFraction$0$ph = 0.0, $maxFraction$0$ph$ph = 0.0, $maxFraction$0$ph4057 = 0.0, $stack = 0, $subInput = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056 | 0;
 $stack = sp + 20 | 0;
 $subInput = sp;
 $0 = $input;
 $6 = +HEAPF32[$0 >> 2];
 $7 = +HEAPF32[$0 + 4 >> 2];
 $8 = $input + 8 | 0;
 $9 = $8;
 $15 = +HEAPF32[$9 >> 2];
 $17 = $15 - $6;
 $18 = +HEAPF32[$9 + 4 >> 2] - $7;
 $21 = $17 * $17 + $18 * $18;
 if (!($21 > 0.0)) ___assert_fail(89560, 89592, 209, 89664);
 $23 = +Math_sqrt(+$21);
 if ($23 < 1.1920928955078125e-07) {
  $29 = $18;
  $33 = $17;
 } else {
  $25 = 1.0 / $23;
  $29 = $18 * $25;
  $33 = $17 * $25;
 }
 $28 = -$29;
 $31 = $29 < -0.0 ? $28 : $29;
 if ($33 > 0.0) $103 = $33; else $103 = -$33;
 $36 = +HEAPF32[$input + 16 >> 2];
 $39 = $6 + $17 * $36;
 $40 = $7 + $18 * $36;
 $41 = $stack + 4 | 0;
 HEAP32[$stack >> 2] = $41;
 $42 = $stack + 1028 | 0;
 HEAP32[$42 >> 2] = 0;
 $43 = $stack + 1032 | 0;
 HEAP32[$43 >> 2] = 256;
 $46 = HEAP32[$stack >> 2] | 0;
 HEAP32[$46 + (HEAP32[$42 >> 2] << 2) >> 2] = HEAP32[$this >> 2];
 $48 = HEAP32[$42 >> 2] | 0;
 $49 = $48 + 1 | 0;
 HEAP32[$42 >> 2] = $49;
 L10 : do if (($48 | 0) > -1) {
  $59 = $this + 4 | 0;
  $60 = $subInput + 8 | 0;
  $61 = $subInput + 16 | 0;
  $$ph3548 = $49;
  $$ph3649 = $7 < $40 ? $7 : $40;
  $$ph3751 = $6 < $39 ? $6 : $39;
  $$ph3853 = $7 > $40 ? $7 : $40;
  $$ph3955 = $6 > $39 ? $6 : $39;
  $$pre = $46;
  $maxFraction$0$ph4057 = $36;
  while (1) {
   $64 = $$ph3548;
   $66 = $$pre;
   while (1) {
    $63 = $64 + -1 | 0;
    HEAP32[$42 >> 2] = $63;
    $67 = HEAP32[$66 + ($63 << 2) >> 2] | 0;
    if (($67 | 0) == -1) {
     $$ph = $$ph3649;
     $$ph32 = $$ph3751;
     $$ph33 = $$ph3853;
     $$ph34 = $$ph3955;
     $$pr = $63;
     $maxFraction$0$ph = $maxFraction$0$ph4057;
     break;
    }
    $69 = HEAP32[$59 >> 2] | 0;
    $71 = +HEAPF32[$69 + ($67 * 36 | 0) + 8 >> 2];
    $74 = +HEAPF32[$69 + ($67 * 36 | 0) + 12 >> 2];
    $77 = +HEAPF32[$69 + ($67 * 36 | 0) >> 2];
    $80 = +HEAPF32[$69 + ($67 * 36 | 0) + 4 >> 2];
    if ($$ph3751 - $71 > 0.0 | $$ph3649 - $74 > 0.0 | $77 - $$ph3955 > 0.0 | $80 - $$ph3853 > 0.0) {
     $$ph$ph = $$ph3649;
     $$ph32$ph = $$ph3751;
     $$ph33$ph = $$ph3853;
     $$ph34$ph = $$ph3955;
     $maxFraction$0$ph$ph = $maxFraction$0$ph4057;
     label = 9;
     break;
    }
    $98 = ($6 - ($71 + $77) * .5) * $28 + $33 * ($7 - ($74 + $80) * .5);
    if ($98 > 0.0) $106 = $98; else $106 = -$98;
    if ($106 - ($31 * (($71 - $77) * .5) + $103 * (($74 - $80) * .5)) > 0.0) {
     $$ph$ph = $$ph3649;
     $$ph32$ph = $$ph3751;
     $$ph33$ph = $$ph3853;
     $$ph34$ph = $$ph3955;
     $maxFraction$0$ph$ph = $maxFraction$0$ph4057;
     label = 9;
     break;
    }
    $108 = $69 + ($67 * 36 | 0) + 24 | 0;
    if ((HEAP32[$108 >> 2] | 0) == -1) {
     label = 19;
     break;
    }
    if (($63 | 0) == (HEAP32[$43 >> 2] | 0)) {
     HEAP32[$43 >> 2] = $63 << 1;
     $150 = __Z7b2Alloci($63 << 3) | 0;
     HEAP32[$stack >> 2] = $150;
     _memcpy($150 | 0, $66 | 0, HEAP32[$42 >> 2] << 2 | 0) | 0;
     if (($66 | 0) != ($41 | 0)) __Z6b2FreePv($66);
    }
    $156 = HEAP32[$stack >> 2] | 0;
    HEAP32[$156 + (HEAP32[$42 >> 2] << 2) >> 2] = HEAP32[$108 >> 2];
    $159 = (HEAP32[$42 >> 2] | 0) + 1 | 0;
    HEAP32[$42 >> 2] = $159;
    $160 = $69 + ($67 * 36 | 0) + 28 | 0;
    if (($159 | 0) == (HEAP32[$43 >> 2] | 0)) {
     HEAP32[$43 >> 2] = $159 << 1;
     $165 = __Z7b2Alloci($159 << 3) | 0;
     HEAP32[$stack >> 2] = $165;
     _memcpy($165 | 0, $156 | 0, HEAP32[$42 >> 2] << 2 | 0) | 0;
     if (($156 | 0) != ($41 | 0)) __Z6b2FreePv($156);
    }
    $66 = HEAP32[$stack >> 2] | 0;
    HEAP32[$66 + (HEAP32[$42 >> 2] << 2) >> 2] = HEAP32[$160 >> 2];
    $173 = HEAP32[$42 >> 2] | 0;
    $64 = $173 + 1 | 0;
    HEAP32[$42 >> 2] = $64;
    if (($173 | 0) <= -1) break L10;
   }
   if ((label | 0) == 19) {
    label = 0;
    HEAP32[$subInput + 0 >> 2] = 0;
    HEAP32[$subInput + 4 >> 2] = 0;
    HEAP32[$subInput + 8 >> 2] = 0;
    HEAP32[$subInput + 12 >> 2] = 0;
    $111 = $input;
    $116 = HEAP32[$111 + 4 >> 2] | 0;
    $117 = $subInput;
    HEAP32[$117 >> 2] = HEAP32[$111 >> 2];
    HEAP32[$117 + 4 >> 2] = $116;
    $121 = $8;
    $126 = HEAP32[$121 + 4 >> 2] | 0;
    $127 = $60;
    HEAP32[$127 >> 2] = HEAP32[$121 >> 2];
    HEAP32[$127 + 4 >> 2] = $126;
    HEAPF32[$61 >> 2] = $maxFraction$0$ph4057;
    $131 = +__ZN21b2WorldRayCastWrapper15RayCastCallbackERK14b2RayCastInputi($callback, $subInput, $67);
    if ($131 == 0.0) break L10;
    if ($131 > 0.0) {
     $136 = $6 + $17 * $131;
     $137 = $7 + $18 * $131;
     $$ph$ph = $7 < $137 ? $7 : $137;
     $$ph32$ph = $6 < $136 ? $6 : $136;
     $$ph33$ph = $7 > $137 ? $7 : $137;
     $$ph34$ph = $6 > $136 ? $6 : $136;
     $maxFraction$0$ph$ph = $131;
     label = 9;
    } else {
     $$ph$ph = $$ph3649;
     $$ph32$ph = $$ph3751;
     $$ph33$ph = $$ph3853;
     $$ph34$ph = $$ph3955;
     $maxFraction$0$ph$ph = $maxFraction$0$ph4057;
     label = 9;
    }
   }
   if ((label | 0) == 9) {
    label = 0;
    $$ph = $$ph$ph;
    $$ph32 = $$ph32$ph;
    $$ph33 = $$ph33$ph;
    $$ph34 = $$ph34$ph;
    $$pr = HEAP32[$42 >> 2] | 0;
    $maxFraction$0$ph = $maxFraction$0$ph$ph;
   }
   if (($$pr | 0) <= 0) break L10;
   $$ph3548 = $$pr;
   $$ph3649 = $$ph;
   $$ph3751 = $$ph32;
   $$ph3853 = $$ph33;
   $$ph3955 = $$ph34;
   $$pre = HEAP32[$stack >> 2] | 0;
   $maxFraction$0$ph4057 = $maxFraction$0$ph;
  }
 } while (0);
 $176 = HEAP32[$stack >> 2] | 0;
 if (($176 | 0) == ($41 | 0)) {
  STACKTOP = sp;
  return;
 }
 __Z6b2FreePv($176);
 HEAP32[$stack >> 2] = 0;
 STACKTOP = sp;
 return;
}

function _register_physics($L) {
 $L = $L | 0;
 _lua_pushcclosure($L, 166, 0);
 _lua_setfield($L, -2, 1280);
 _lua_pushcclosure($L, 167, 0);
 _lua_setfield($L, -2, 1296);
 _lua_pushcclosure($L, 168, 0);
 _lua_setfield($L, -2, 1312);
 _lua_pushcclosure($L, 169, 0);
 _lua_setfield($L, -2, 1328);
 _lua_pushcclosure($L, 170, 0);
 _lua_setfield($L, -2, 1352);
 _lua_pushcclosure($L, 171, 0);
 _lua_setfield($L, -2, 1376);
 _lua_pushcclosure($L, 172, 0);
 _lua_setfield($L, -2, 1392);
 _lua_pushcclosure($L, 173, 0);
 _lua_setfield($L, -2, 1408);
 _lua_pushcclosure($L, 174, 0);
 _lua_setfield($L, -2, 1424);
 _lua_pushcclosure($L, 175, 0);
 _lua_setfield($L, -2, 1440);
 _lua_pushcclosure($L, 176, 0);
 _lua_setfield($L, -2, 1456);
 _lua_pushcclosure($L, 177, 0);
 _lua_setfield($L, -2, 1464);
 _luaL_newmetatable($L, 5296) | 0;
 _lua_pushlstring($L, 5296, 4) | 0;
 _lua_setfield($L, -2, 13456);
 _lua_pushcclosure($L, 178, 0);
 _lua_setfield($L, -2, 9768);
 _lua_pushcclosure($L, 179, 0);
 _lua_setfield($L, -2, 9784);
 _lua_pushcclosure($L, 180, 0);
 _lua_setfield($L, -2, 1472);
 _lua_pushcclosure($L, 181, 0);
 _lua_setfield($L, -2, 1496);
 _lua_pushcclosure($L, 182, 0);
 _lua_setfield($L, -2, 1512);
 _lua_pushcclosure($L, 183, 0);
 _lua_setfield($L, -2, 1528);
 _lua_pushcclosure($L, 184, 0);
 _lua_setfield($L, -2, 1552);
 _lua_pushcclosure($L, 185, 0);
 _lua_setfield($L, -2, 1576);
 _lua_pushcclosure($L, 186, 0);
 _lua_setfield($L, -2, 1600);
 _lua_pushcclosure($L, 187, 0);
 _lua_setfield($L, -2, 1624);
 _lua_pushcclosure($L, 188, 0);
 _lua_setfield($L, -2, 1648);
 _lua_pushcclosure($L, 189, 0);
 _lua_setfield($L, -2, 1672);
 _lua_pushcclosure($L, 190, 0);
 _lua_setfield($L, -2, 1696);
 _lua_pushcclosure($L, 191, 0);
 _lua_setfield($L, -2, 1720);
 _lua_pushcclosure($L, 192, 0);
 _lua_setfield($L, -2, 1744);
 _lua_pushcclosure($L, 193, 0);
 _lua_setfield($L, -2, 1768);
 _lua_pushcclosure($L, 194, 0);
 _lua_setfield($L, -2, 1784);
 _lua_pushcclosure($L, 195, 0);
 _lua_setfield($L, -2, 1800);
 _lua_pushcclosure($L, 196, 0);
 _lua_setfield($L, -2, 1816);
 _lua_pushcclosure($L, 197, 0);
 _lua_setfield($L, -2, 1832);
 _lua_pushcclosure($L, 198, 0);
 _lua_setfield($L, -2, 1848);
 _lua_pushcclosure($L, 199, 0);
 _lua_setfield($L, -2, 1872);
 _lua_pushcclosure($L, 200, 0);
 _lua_setfield($L, -2, 1896);
 _lua_pushcclosure($L, 201, 0);
 _lua_setfield($L, -2, 61120);
 _lua_pushcclosure($L, 202, 0);
 _lua_setfield($L, -2, 1912);
 _lua_pushcclosure($L, 203, 0);
 _lua_setfield($L, -2, 63064);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 64992);
 _lua_setfield($L, -2, 1920);
 _luaL_newmetatable($L, 5128) | 0;
 _lua_pushlstring($L, 5128, 5) | 0;
 _lua_setfield($L, -2, 13456);
 _lua_pushcclosure($L, 204, 0);
 _lua_setfield($L, -2, 1928);
 _lua_pushcclosure($L, 205, 0);
 _lua_setfield($L, -2, 1944);
 _lua_pushcclosure($L, 206, 0);
 _lua_setfield($L, -2, 1960);
 _lua_pushcclosure($L, 207, 0);
 _lua_setfield($L, -2, 1976);
 _lua_pushcclosure($L, 208, 0);
 _lua_setfield($L, -2, 1992);
 _lua_pushcclosure($L, 209, 0);
 _lua_setfield($L, -2, 2008);
 _lua_pushcclosure($L, 210, 0);
 _lua_setfield($L, -2, 2024);
 _lua_pushcclosure($L, 211, 0);
 _lua_setfield($L, -2, 63064);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 64992);
 _lua_setfield($L, -2, 2040);
 _luaL_newmetatable($L, 4280) | 0;
 _lua_pushlstring($L, 4280, 11) | 0;
 _lua_setfield($L, -2, 13456);
 _lua_pushcclosure($L, 212, 0);
 _lua_setfield($L, -2, 1912);
 _lua_pushcclosure($L, 213, 0);
 _lua_setfield($L, -2, 2048);
 _lua_pushcclosure($L, 214, 0);
 _lua_setfield($L, -2, 63064);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 64992);
 _lua_setfield($L, -2, 2064);
 _luaL_newmetatable($L, 4200) | 0;
 _lua_pushlstring($L, 4200, 14) | 0;
 _lua_setfield($L, -2, 13456);
 _lua_pushcclosure($L, 212, 0);
 _lua_setfield($L, -2, 1912);
 _lua_pushcclosure($L, 215, 0);
 _lua_setfield($L, -2, 2080);
 _lua_pushcclosure($L, 216, 0);
 _lua_setfield($L, -2, 2096);
 _lua_pushcclosure($L, 214, 0);
 _lua_setfield($L, -2, 63064);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 64992);
 _lua_setfield($L, -2, 2112);
 _luaL_newmetatable($L, 4160) | 0;
 _lua_pushlstring($L, 4160, 10) | 0;
 _lua_setfield($L, -2, 13456);
 _lua_pushcclosure($L, 212, 0);
 _lua_setfield($L, -2, 1912);
 _lua_pushcclosure($L, 217, 0);
 _lua_setfield($L, -2, 2128);
 _lua_pushcclosure($L, 214, 0);
 _lua_setfield($L, -2, 63064);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 64992);
 _lua_setfield($L, -2, 2144);
 _luaL_newmetatable($L, 4240) | 0;
 _lua_pushlstring($L, 4240, 14) | 0;
 _lua_setfield($L, -2, 13456);
 _lua_pushcclosure($L, 212, 0);
 _lua_setfield($L, -2, 1912);
 _lua_pushcclosure($L, 218, 0);
 _lua_setfield($L, -2, 2160);
 _lua_pushcclosure($L, 219, 0);
 _lua_setfield($L, -2, 2184);
 _lua_pushcclosure($L, 214, 0);
 _lua_setfield($L, -2, 63064);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 64992);
 _lua_setfield($L, -2, 2200);
 _luaL_newmetatable($L, 4392) | 0;
 _lua_pushlstring($L, 4392, 14) | 0;
 _lua_setfield($L, -2, 13456);
 _lua_pushcclosure($L, 212, 0);
 _lua_setfield($L, -2, 1912);
 _lua_pushcclosure($L, 220, 0);
 _lua_setfield($L, -2, 2216);
 _lua_pushcclosure($L, 221, 0);
 _lua_setfield($L, -2, 2232);
 _lua_pushcclosure($L, 222, 0);
 _lua_setfield($L, -2, 2248);
 _lua_pushcclosure($L, 223, 0);
 _lua_setfield($L, -2, 2264);
 _lua_pushcclosure($L, 214, 0);
 _lua_setfield($L, -2, 63064);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 64992);
 _lua_setfield($L, -2, 2280);
 _luaL_newmetatable($L, 4352) | 0;
 _lua_pushlstring($L, 4352, 10) | 0;
 _lua_setfield($L, -2, 13456);
 _lua_pushcclosure($L, 212, 0);
 _lua_setfield($L, -2, 1912);
 _lua_pushcclosure($L, 224, 0);
 _lua_setfield($L, -2, 2296);
 _lua_pushcclosure($L, 225, 0);
 _lua_setfield($L, -2, 2312);
 _lua_pushcclosure($L, 214, 0);
 _lua_setfield($L, -2, 63064);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 64992);
 _lua_setfield($L, -2, 2328);
 _luaL_newmetatable($L, 4320) | 0;
 _lua_pushlstring($L, 4320, 15) | 0;
 _lua_setfield($L, -2, 13456);
 _lua_pushcclosure($L, 212, 0);
 _lua_setfield($L, -2, 1912);
 _lua_pushcclosure($L, 226, 0);
 _lua_setfield($L, -2, 2344);
 _lua_pushcclosure($L, 227, 0);
 _lua_setfield($L, -2, 2184);
 _lua_pushcclosure($L, 228, 0);
 _lua_setfield($L, -2, 2368);
 _lua_pushcclosure($L, 229, 0);
 _lua_setfield($L, -2, 2392);
 _lua_pushcclosure($L, 230, 0);
 _lua_setfield($L, -2, 2416);
 _lua_pushcclosure($L, 214, 0);
 _lua_setfield($L, -2, 63064);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 64992);
 _lua_setfield($L, -2, 2440);
 return;
}

function _luaO_pushvfstring($L, $fmt, $argp) {
 $L = $L | 0;
 $fmt = $fmt | 0;
 $argp = $argp | 0;
 var $$ = 0, $$0$i = 0, $$0$lcssa = 0, $$012 = 0, $$lcssa8 = 0, $0 = 0, $10 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $113 = 0, $12 = 0, $124 = 0, $125 = 0, $131 = 0, $144 = 0, $146 = 0, $152 = 0, $154 = 0, $160 = 0, $161 = 0, $165 = 0, $168 = 0, $17 = 0, $170 = 0, $172 = 0, $173 = 0, $18 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $2 = 0, $26 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $49 = 0, $5 = 0, $50 = 0, $52 = 0, $58 = 0, $60 = 0, $66 = 0, $73 = 0, $74 = 0, $78 = 0, $8 = 0, $85 = 0, $86 = 0, $9 = 0, $90 = 0, $97 = 0, $98 = 0.0, $buff = 0, $buff3 = 0, $buff4 = 0, $mfb$0$i = 0, $n$0$i = 0, $n$0$lcssa = 0, $n$011 = 0, $n$1$i = 0, $vararg_buffer = 0, $vararg_buffer16 = 0, $vararg_buffer22 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $vararg_buffer22 = sp + 16 | 0;
 $vararg_buffer16 = sp + 8 | 0;
 $vararg_buffer = sp;
 $buff = sp + 56 | 0;
 $buff3 = sp + 32 | 0;
 $buff4 = sp + 24 | 0;
 $0 = _strchr($fmt, 37) | 0;
 $2 = $L + 24 | 0;
 $4 = $L + 8 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $8 = (HEAP32[$2 >> 2] | 0) - $5 | 0;
 L1 : do if (!$0) {
  $$0$lcssa = $fmt;
  $$lcssa8 = $8;
  $185 = $5;
  $n$0$lcssa = 0;
 } else {
  $9 = $buff4 + 7 | 0;
  $$012 = $fmt;
  $10 = $8;
  $12 = $0;
  $186 = $5;
  $n$011 = 0;
  L3 : while (1) {
   if (($10 | 0) < 24) {
    _luaD_growstack($L, 2);
    $17 = HEAP32[$4 >> 2] | 0;
   } else $17 = $186;
   HEAP32[$4 >> 2] = $17 + 8;
   $18 = _luaS_newlstr($L, $$012, $12 - $$012 | 0) | 0;
   HEAP32[$17 >> 2] = $18;
   HEAP32[$17 + 4 >> 2] = HEAPU8[$18 + 4 >> 0] | 64;
   $26 = HEAP8[$12 + 1 >> 0] | 0;
   L8 : do switch ($26 | 0) {
   case 112:
    {
     $108 = (HEAP32[$argp >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $109 = HEAP32[$108 >> 2] | 0;
     HEAP32[$argp >> 2] = $108 + 4;
     HEAP32[$vararg_buffer16 >> 2] = $109;
     $110 = _sprintf($buff3, 59472, $vararg_buffer16) | 0;
     $111 = HEAP32[$4 >> 2] | 0;
     HEAP32[$4 >> 2] = $111 + 8;
     $113 = _luaS_newlstr($L, $buff3, $110) | 0;
     HEAP32[$111 >> 2] = $113;
     HEAP32[$111 + 4 >> 2] = HEAPU8[$113 + 4 >> 0] | 64;
     break;
    }
   case 100:
    {
     $66 = HEAP32[$4 >> 2] | 0;
     HEAP32[$4 >> 2] = $66 + 8;
     $73 = (HEAP32[$argp >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $74 = HEAP32[$73 >> 2] | 0;
     HEAP32[$argp >> 2] = $73 + 4;
     HEAP32[$66 >> 2] = $74;
     HEAP32[$66 + 4 >> 2] = 19;
     _luaO_tostring($L, (HEAP32[$4 >> 2] | 0) + -8 | 0);
     break;
    }
   case 73:
    {
     $78 = HEAP32[$4 >> 2] | 0;
     HEAP32[$4 >> 2] = $78 + 8;
     $85 = (HEAP32[$argp >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $86 = HEAP32[$85 >> 2] | 0;
     HEAP32[$argp >> 2] = $85 + 4;
     HEAP32[$78 >> 2] = $86;
     HEAP32[$78 + 4 >> 2] = 19;
     _luaO_tostring($L, (HEAP32[$4 >> 2] | 0) + -8 | 0);
     break;
    }
   case 102:
    {
     $90 = HEAP32[$4 >> 2] | 0;
     HEAP32[$4 >> 2] = $90 + 8;
     $97 = (HEAP32[$argp >> 2] | 0) + (8 - 1) & ~(8 - 1);
     $98 = +HEAPF64[$97 >> 3];
     HEAP32[$argp >> 2] = $97 + 8;
     HEAPF32[$90 >> 2] = $98;
     HEAP32[$90 + 4 >> 2] = 3;
     _luaO_tostring($L, (HEAP32[$4 >> 2] | 0) + -8 | 0);
     break;
    }
   case 85:
    {
     $124 = (HEAP32[$argp >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $125 = HEAP32[$124 >> 2] | 0;
     HEAP32[$argp >> 2] = $124 + 4;
     if ($125 >>> 0 < 128) {
      HEAP8[$9 >> 0] = $125;
      $n$1$i = 1;
     } else {
      $$0$i = $125;
      $mfb$0$i = 63;
      $n$0$i = 1;
      while (1) {
       $131 = $n$0$i + 1 | 0;
       HEAP8[$buff4 + (8 - $n$0$i) >> 0] = $$0$i & 63 | 128;
       $$0$i = $$0$i >>> 6;
       $mfb$0$i = $mfb$0$i >>> 1;
       if ($$0$i >>> 0 <= $mfb$0$i >>> 0) break; else $n$0$i = $131;
      }
      HEAP8[$buff4 + (7 - $n$0$i) >> 0] = $mfb$0$i << 1 ^ 254 | $$0$i;
      $n$1$i = $131;
     }
     $144 = HEAP32[$4 >> 2] | 0;
     HEAP32[$4 >> 2] = $144 + 8;
     $146 = _luaS_newlstr($L, $buff4 + (8 - $n$1$i) | 0, $n$1$i) | 0;
     HEAP32[$144 >> 2] = $146;
     HEAP32[$144 + 4 >> 2] = HEAPU8[$146 + 4 >> 0] | 64;
     break;
    }
   case 115:
    {
     $32 = (HEAP32[$argp >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $33 = HEAP32[$32 >> 2] | 0;
     HEAP32[$argp >> 2] = $32 + 4;
     $$ = ($33 | 0) == 0 ? 107696 : $33;
     $35 = _strlen($$ | 0) | 0;
     $36 = HEAP32[$4 >> 2] | 0;
     HEAP32[$4 >> 2] = $36 + 8;
     $38 = _luaS_newlstr($L, $$, $35) | 0;
     HEAP32[$36 >> 2] = $38;
     HEAP32[$36 + 4 >> 2] = HEAPU8[$38 + 4 >> 0] | 64;
     break;
    }
   case 99:
    {
     $49 = (HEAP32[$argp >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $50 = HEAP32[$49 >> 2] | 0;
     HEAP32[$argp >> 2] = $49 + 4;
     HEAP8[$buff >> 0] = $50;
     $52 = $50 & 255;
     if (!(HEAP8[$52 + 65881 >> 0] & 4)) {
      HEAP32[$vararg_buffer >> 2] = $52;
      _luaO_pushfstring($L, 59464, $vararg_buffer) | 0;
      break L8;
     } else {
      $58 = HEAP32[$4 >> 2] | 0;
      HEAP32[$4 >> 2] = $58 + 8;
      $60 = _luaS_newlstr($L, $buff, 1) | 0;
      HEAP32[$58 >> 2] = $60;
      HEAP32[$58 + 4 >> 2] = HEAPU8[$60 + 4 >> 0] | 64;
      break L8;
     }
     break;
    }
   case 37:
    {
     $152 = HEAP32[$4 >> 2] | 0;
     HEAP32[$4 >> 2] = $152 + 8;
     $154 = _luaS_newlstr($L, 59480, 1) | 0;
     HEAP32[$152 >> 2] = $154;
     HEAP32[$152 + 4 >> 2] = HEAPU8[$154 + 4 >> 0] | 64;
     break;
    }
   default:
    break L3;
   } while (0);
   $160 = $n$011 + 2 | 0;
   $161 = $12 + 2 | 0;
   $12 = _strchr($161, 37) | 0;
   $165 = HEAP32[$4 >> 2] | 0;
   $168 = (HEAP32[$2 >> 2] | 0) - $165 | 0;
   if (!$12) {
    $$0$lcssa = $161;
    $$lcssa8 = $168;
    $185 = $165;
    $n$0$lcssa = $160;
    break L1;
   } else {
    $$012 = $161;
    $10 = $168;
    $186 = $165;
    $n$011 = $160;
   }
  }
  HEAP32[$vararg_buffer22 >> 2] = $26;
  _luaG_runerror($L, 59488, $vararg_buffer22);
 } while (0);
 if (($$lcssa8 | 0) < 16) {
  _luaD_growstack($L, 1);
  $172 = HEAP32[$4 >> 2] | 0;
 } else $172 = $185;
 $170 = _strlen($$0$lcssa | 0) | 0;
 HEAP32[$4 >> 2] = $172 + 8;
 $173 = _luaS_newlstr($L, $$0$lcssa, $170) | 0;
 HEAP32[$172 >> 2] = $173;
 HEAP32[$172 + 4 >> 2] = HEAPU8[$173 + 4 >> 0] | 64;
 if (($n$0$lcssa | 0) <= 0) {
  $181 = HEAP32[$4 >> 2] | 0;
  $182 = $181 + -8 | 0;
  $183 = HEAP32[$182 >> 2] | 0;
  $184 = $183 + 24 | 0;
  STACKTOP = sp;
  return $184 | 0;
 }
 _luaV_concat($L, $n$0$lcssa | 1);
 $181 = HEAP32[$4 >> 2] | 0;
 $182 = $181 + -8 | 0;
 $183 = HEAP32[$182 >> 2] | 0;
 $184 = $183 + 24 | 0;
 STACKTOP = sp;
 return $184 | 0;
}

function _init_blocksize($f, $b, $n) {
 $f = $f | 0;
 $b = $b | 0;
 $n = $n | 0;
 var $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i1 = 0, $$0$i3 = 0, $$0$i5 = 0, $$0$i9 = 0, $0 = 0, $10 = 0, $101 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $116 = 0, $118 = 0.0, $125 = 0.0, $135 = 0, $138 = 0, $140 = 0, $141 = 0, $142 = 0, $18 = 0, $187 = 0, $192 = 0, $197 = 0, $2 = 0, $202 = 0, $207 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $32 = 0, $33 = 0, $36 = 0, $38 = 0, $39 = 0, $40 = 0, $48 = 0, $50 = 0, $54 = 0, $56 = 0.0, $57 = 0, $58 = 0.0, $6 = 0, $62 = 0.0, $69 = 0, $7 = 0, $74 = 0.0, $85 = 0, $89 = 0.0, $9 = 0, $i$01$i = 0, $i$01$i12 = 0, $k$03$i = 0, $k$11$i = 0, $k2$04$i = 0, $k2$12$i = 0, label = 0;
 $0 = $n >> 3;
 $2 = $n << 1 & -4;
 $3 = $f + 8 | 0;
 HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + $2;
 $6 = $f + 96 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 if (!$7) if (!$2) $$0$i = 0; else $$0$i = _malloc($2) | 0; else {
  $9 = $f + 104 | 0;
  $10 = HEAP32[$9 >> 2] | 0;
  $11 = $10 + $2 | 0;
  if (($11 | 0) > (HEAP32[$f + 108 >> 2] | 0)) $$0$i = 0; else {
   HEAP32[$9 >> 2] = $11;
   $$0$i = $7 + $10 | 0;
  }
 }
 $18 = $f + ($b << 2) + 1084 | 0;
 HEAP32[$18 >> 2] = $$0$i;
 HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + $2;
 $21 = HEAP32[$6 >> 2] | 0;
 if (!$21) if (!$2) $$0$i1 = 0; else $$0$i1 = _malloc($2) | 0; else {
  $23 = $f + 104 | 0;
  $24 = HEAP32[$23 >> 2] | 0;
  $25 = $24 + $2 | 0;
  if (($25 | 0) > (HEAP32[$f + 108 >> 2] | 0)) $$0$i1 = 0; else {
   HEAP32[$23 >> 2] = $25;
   $$0$i1 = $21 + $24 | 0;
  }
 }
 $32 = $f + ($b << 2) + 1092 | 0;
 HEAP32[$32 >> 2] = $$0$i1;
 $33 = $n & -4;
 HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + $33;
 $36 = HEAP32[$6 >> 2] | 0;
 if (!$36) if (!$33) $$0$i3 = 0; else $$0$i3 = _malloc($33) | 0; else {
  $38 = $f + 104 | 0;
  $39 = HEAP32[$38 >> 2] | 0;
  $40 = $39 + $33 | 0;
  if (($40 | 0) > (HEAP32[$f + 108 >> 2] | 0)) $$0$i3 = 0; else {
   HEAP32[$38 >> 2] = $40;
   $$0$i3 = $36 + $39 | 0;
  }
 }
 HEAP32[$f + ($b << 2) + 1100 >> 2] = $$0$i3;
 $48 = HEAP32[$18 >> 2] | 0;
 if ($48) {
  $50 = HEAP32[$32 >> 2] | 0;
  if (!(($50 | 0) == 0 | ($$0$i3 | 0) == 0)) {
   $54 = $n >> 2;
   if (($54 | 0) > 0) {
    $56 = +($n | 0);
    $k$03$i = 0;
    $k2$04$i = 0;
    while (1) {
     $62 = +($k$03$i << 2 | 0) * 3.141592653589793 / $56;
     HEAPF32[$48 + ($k2$04$i << 2) >> 2] = +Math_cos(+$62);
     $69 = $k2$04$i | 1;
     HEAPF32[$48 + ($69 << 2) >> 2] = -+Math_sin(+$62);
     $74 = +($69 | 0) * 3.141592653589793 / $56 * .5;
     HEAPF32[$50 + ($k2$04$i << 2) >> 2] = +Math_cos(+$74) * .5;
     HEAPF32[$50 + ($69 << 2) >> 2] = +Math_sin(+$74) * .5;
     $k$03$i = $k$03$i + 1 | 0;
     if (($k$03$i | 0) == ($54 | 0)) break; else $k2$04$i = $k2$04$i + 2 | 0;
    }
   }
   $57 = ($0 | 0) > 0;
   if ($57) {
    $58 = +($n | 0);
    $k$11$i = 0;
    $k2$12$i = 0;
    while (1) {
     $85 = $k2$12$i | 1;
     $89 = +($85 << 1 | 0) * 3.141592653589793 / $58;
     HEAPF32[$$0$i3 + ($k2$12$i << 2) >> 2] = +Math_cos(+$89);
     HEAPF32[$$0$i3 + ($85 << 2) >> 2] = -+Math_sin(+$89);
     $k$11$i = $k$11$i + 1 | 0;
     if (($k$11$i | 0) == ($0 | 0)) break; else $k2$12$i = $k2$12$i + 2 | 0;
    }
   }
   HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + $2;
   $101 = HEAP32[$6 >> 2] | 0;
   if (!$101) if (!$2) label = 30; else {
    $$0$i9 = _malloc($2) | 0;
    label = 31;
   } else {
    $103 = $f + 104 | 0;
    $104 = HEAP32[$103 >> 2] | 0;
    $105 = $104 + $2 | 0;
    if (($105 | 0) > (HEAP32[$f + 108 >> 2] | 0)) label = 30; else {
     HEAP32[$103 >> 2] = $105;
     $$0$i9 = $101 + $104 | 0;
     label = 31;
    }
   }
   if ((label | 0) == 30) HEAP32[$f + ($b << 2) + 1108 >> 2] = 0; else if ((label | 0) == 31) {
    HEAP32[$f + ($b << 2) + 1108 >> 2] = $$0$i9;
    if ($$0$i9) {
     $116 = $n >> 1;
     if (($116 | 0) > 0) {
      $118 = +($116 | 0);
      $i$01$i12 = 0;
      do {
       $125 = +Math_sin(+((+($i$01$i12 | 0) + .5) / $118 * .5 * 3.141592653589793));
       HEAPF32[$$0$i9 + ($i$01$i12 << 2) >> 2] = +Math_sin(+($125 * $125 * 1.5707963267948966));
       $i$01$i12 = $i$01$i12 + 1 | 0;
      } while (($i$01$i12 | 0) != ($116 | 0));
     }
     $135 = ($0 << 1) + 3 & -4;
     HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + $135;
     $138 = HEAP32[$6 >> 2] | 0;
     if (!$138) if (!$135) label = 41; else {
      $$0$i5 = _malloc($135) | 0;
      label = 42;
     } else {
      $140 = $f + 104 | 0;
      $141 = HEAP32[$140 >> 2] | 0;
      $142 = $141 + $135 | 0;
      if (($142 | 0) > (HEAP32[$f + 108 >> 2] | 0)) label = 41; else {
       HEAP32[$140 >> 2] = $142;
       $$0$i5 = $138 + $141 | 0;
       label = 42;
      }
     }
     if ((label | 0) == 41) HEAP32[$f + ($b << 2) + 1116 >> 2] = 0; else if ((label | 0) == 42) {
      HEAP32[$f + ($b << 2) + 1116 >> 2] = $$0$i5;
      if ($$0$i5) {
       do if (($n | 0) < 16384) {
        if (($n | 0) < 16) {
         $$0$i$i = HEAP8[79416 + $n >> 0] | 0;
         break;
        }
        if (($n | 0) < 512) {
         $$0$i$i = (HEAP8[79416 + ($n >> 5) >> 0] | 0) + 5 | 0;
         break;
        } else {
         $$0$i$i = (HEAP8[79416 + ($n >> 10) >> 0] | 0) + 10 | 0;
         break;
        }
       } else {
        if (($n | 0) >= 16777216) {
         if (($n | 0) >= 536870912) {
          $$0$i$i = 0;
          break;
         }
         $$0$i$i = (HEAP8[79416 + ($n >> 25) >> 0] | 0) + 25 | 0;
         break;
        }
        if (($n | 0) < 524288) {
         $$0$i$i = (HEAP8[79416 + ($n >> 15) >> 0] | 0) + 15 | 0;
         break;
        } else {
         $$0$i$i = (HEAP8[79416 + ($n >> 20) >> 0] | 0) + 20 | 0;
         break;
        }
       } while (0);
       if (!$57) {
        $$0 = 1;
        return $$0 | 0;
       }
       $187 = 36 - $$0$i$i | 0;
       $i$01$i = 0;
       do {
        $192 = $i$01$i >>> 1 & 1431655765 | $i$01$i << 1 & -1431655766;
        $197 = $192 >>> 2 & 858993459 | $192 << 2 & -858993460;
        $202 = $197 >>> 4 & 252645135 | $197 << 4 & -252645136;
        $207 = $202 >>> 8 & 16711935 | $202 << 8 & -16711936;
        HEAP16[$$0$i5 + ($i$01$i << 1) >> 1] = ($207 >>> 16 | $207 << 16) >>> $187 << 2;
        $i$01$i = $i$01$i + 1 | 0;
       } while (($i$01$i | 0) != ($0 | 0));
       $$0 = 1;
       return $$0 | 0;
      }
     }
     HEAP32[$f + 116 >> 2] = 3;
     $$0 = 0;
     return $$0 | 0;
    }
   }
   HEAP32[$f + 116 >> 2] = 3;
   $$0 = 0;
   return $$0 | 0;
  }
 }
 HEAP32[$f + 116 >> 2] = 3;
 $$0 = 0;
 return $$0 | 0;
}

function _leaveblock($fs) {
 $fs = $fs | 0;
 var $$0$i$i = 0, $0 = 0, $1 = 0, $101 = 0, $106 = 0, $107 = 0, $108 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $116 = 0, $117 = 0, $123 = 0, $124 = 0, $126 = 0, $130 = 0, $132 = 0, $134 = 0, $136 = 0, $139 = 0, $141 = 0, $142 = 0, $144 = 0, $150 = 0, $16 = 0, $161 = 0, $163 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $3 = 0, $34 = 0, $36 = 0, $37 = 0, $45 = 0, $48 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $63 = 0, $67 = 0, $69 = 0, $70 = 0, $72 = 0, $76 = 0, $78 = 0, $82 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $94 = 0, $97 = 0, $fs$idx$val$idx$i = 0, $fs$idx2$i = 0, $i$0$ph1$i$i = 0, $i$03$i = 0, $i$04$i$i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $0 = $fs + 12 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $fs + 8 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if (HEAP32[$1 >> 2] | 0) if (HEAP8[$1 + 13 >> 0] | 0) {
  $9 = _luaK_jump($fs) | 0;
  _luaK_patchclose($fs, $9, HEAPU8[$1 + 12 >> 0] | 0);
  _luaK_patchtohere($fs, $9);
 }
 L5 : do if (HEAP8[$1 + 14 >> 0] | 0) {
  $16 = $3 + 32 | 0;
  $18 = _luaS_new(HEAP32[$16 >> 2] | 0, 67552) | 0;
  $19 = $3 + 48 | 0;
  $20 = HEAP32[$19 >> 2] | 0;
  $21 = $20 + 24 | 0;
  $22 = $3 + 28 | 0;
  $25 = HEAP32[(HEAP32[$22 >> 2] | 0) + 16 >> 2] | 0;
  $26 = $20 + 28 | 0;
  $27 = HEAP32[$26 >> 2] | 0;
  $29 = $20 + 32 | 0;
  if (($27 | 0) < (HEAP32[$29 >> 2] | 0)) $36 = HEAP32[$21 >> 2] | 0; else {
   $34 = _luaM_growaux_(HEAP32[$16 >> 2] | 0, HEAP32[$21 >> 2] | 0, $29, 16, 32767, 60368) | 0;
   HEAP32[$21 >> 2] = $34;
   $36 = $34;
  }
  HEAP32[$36 + ($27 << 4) >> 2] = $18;
  $37 = HEAP32[$21 >> 2] | 0;
  HEAP32[$37 + ($27 << 4) + 8 >> 2] = 0;
  HEAP8[$37 + ($27 << 4) + 12 >> 0] = HEAP8[(HEAP32[$22 >> 2] | 0) + 42 >> 0] | 0;
  HEAP32[(HEAP32[$21 >> 2] | 0) + ($27 << 4) + 4 >> 2] = $25;
  HEAP32[$26 >> 2] = $27 + 1;
  $45 = HEAP32[$19 >> 2] | 0;
  $48 = (HEAP32[$45 + 24 >> 2] | 0) + ($27 << 4) | 0;
  $53 = HEAP32[(HEAP32[(HEAP32[$22 >> 2] | 0) + 12 >> 2] | 0) + 8 >> 2] | 0;
  $54 = $45 + 16 | 0;
  $55 = HEAP32[$54 >> 2] | 0;
  if (($53 | 0) < ($55 | 0)) {
   $57 = $45 + 12 | 0;
   $177 = $55;
   $i$0$ph1$i$i = $53;
   while (1) {
    $67 = $177;
    while (1) {
     if ((HEAP32[(HEAP32[$57 >> 2] | 0) + ($i$0$ph1$i$i << 4) >> 2] | 0) != (HEAP32[$48 >> 2] | 0)) break;
     _closegoto($3, $i$0$ph1$i$i, $48);
     $63 = HEAP32[$54 >> 2] | 0;
     if (($i$0$ph1$i$i | 0) < ($63 | 0)) $67 = $63; else break L5;
    }
    $i$0$ph1$i$i = $i$0$ph1$i$i + 1 | 0;
    if (($i$0$ph1$i$i | 0) >= ($67 | 0)) break; else $177 = $67;
   }
  }
 } while (0);
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 $69 = $1 + 12 | 0;
 $70 = HEAP8[$69 >> 0] | 0;
 $72 = $fs + 42 | 0;
 $76 = (HEAP32[$2 >> 2] | 0) + 48 | 0;
 $78 = (HEAP32[$76 >> 2] | 0) + 4 | 0;
 HEAP32[$78 >> 2] = ($70 & 255) - (HEAPU8[$72 >> 0] | 0) + (HEAP32[$78 >> 2] | 0);
 $82 = HEAP8[$72 >> 0] | 0;
 if (($82 & 255) > ($70 & 255)) {
  $84 = $fs + 16 | 0;
  $fs$idx2$i = $fs + 36 | 0;
  $fs$idx$val$idx$i = (HEAP32[$fs >> 2] | 0) + 60 | 0;
  $87 = $82;
  while (1) {
   $85 = HEAP32[$84 >> 2] | 0;
   $86 = $87 + -1 << 24 >> 24;
   HEAP8[$72 >> 0] = $86;
   HEAP32[(HEAP32[$fs$idx$val$idx$i >> 2] | 0) + ((HEAP16[(HEAP32[HEAP32[$76 >> 2] >> 2] | 0) + ((HEAP32[$fs$idx2$i >> 2] | 0) + ($86 & 255) << 1) >> 1] | 0) * 12 | 0) + 8 >> 2] = $85;
   $94 = HEAP8[$72 >> 0] | 0;
   if (($94 & 255) > ($70 & 255)) $87 = $94; else {
    $97 = $94;
    break;
   }
  }
 } else $97 = $82;
 HEAP8[$fs + 44 >> 0] = $97;
 $101 = HEAP32[$3 + 48 >> 2] | 0;
 HEAP32[$101 + 28 >> 2] = HEAP32[$1 + 4 >> 2];
 $106 = HEAP32[$1 + 8 >> 2] | 0;
 if (!(HEAP32[$1 >> 2] | 0)) {
  if (($106 | 0) >= (HEAP32[$101 + 16 >> 2] | 0)) {
   STACKTOP = sp;
   return;
  }
  $161 = HEAP32[$101 + 12 >> 2] | 0;
  $163 = HEAP32[$161 + ($106 << 4) >> 2] | 0;
  if ((HEAP8[$163 + 4 >> 0] | 0) != 4) {
   $175 = 60264;
   $170 = $3 + 32 | 0;
   $171 = HEAP32[$170 >> 2] | 0;
   $172 = $163 + 24 | 0;
   $173 = $161 + ($106 << 4) + 8 | 0;
   $174 = HEAP32[$173 >> 2] | 0;
   HEAP32[$vararg_buffer >> 2] = $172;
   $vararg_ptr1 = $vararg_buffer + 4 | 0;
   HEAP32[$vararg_ptr1 >> 2] = $174;
   $176 = _luaO_pushfstring($171, $175, $vararg_buffer) | 0;
   _semerror($3, $176);
  }
  $175 = (HEAP8[$163 + 6 >> 0] | 0) != 0 ? 60224 : 60264;
  $170 = $3 + 32 | 0;
  $171 = HEAP32[$170 >> 2] | 0;
  $172 = $163 + 24 | 0;
  $173 = $161 + ($106 << 4) + 8 | 0;
  $174 = HEAP32[$173 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = $172;
  $vararg_ptr1 = $vararg_buffer + 4 | 0;
  HEAP32[$vararg_ptr1 >> 2] = $174;
  $176 = _luaO_pushfstring($171, $175, $vararg_buffer) | 0;
  _semerror($3, $176);
 }
 $107 = HEAP32[$76 >> 2] | 0;
 $108 = $107 + 16 | 0;
 if (($106 | 0) >= (HEAP32[$108 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 $111 = $107 + 12 | 0;
 $112 = $1 + 13 | 0;
 $i$03$i = $106;
 do {
  $113 = HEAP32[$111 >> 2] | 0;
  $114 = $113 + ($i$03$i << 4) + 12 | 0;
  $116 = HEAP8[$69 >> 0] | 0;
  $117 = $116 & 255;
  if ((HEAPU8[$114 >> 0] | 0) > ($116 & 255)) {
   if (!(HEAP8[$112 >> 0] | 0)) $123 = $116; else {
    _luaK_patchclose($fs, HEAP32[$113 + ($i$03$i << 4) + 4 >> 2] | 0, $117);
    $123 = HEAP8[$69 >> 0] | 0;
   }
   HEAP8[$114 >> 0] = $123;
  }
  $124 = HEAP32[$2 >> 2] | 0;
  $126 = HEAP32[$124 + 28 >> 2] | 0;
  $130 = HEAP32[$124 + 48 >> 2] | 0;
  $132 = HEAP32[$130 + 12 >> 2] | 0;
  $134 = HEAP32[(HEAP32[$126 + 12 >> 2] | 0) + 4 >> 2] | 0;
  $136 = HEAP32[$130 + 28 >> 2] | 0;
  L45 : do if (($134 | 0) < ($136 | 0)) {
   $139 = HEAP32[$130 + 24 >> 2] | 0;
   $141 = HEAP32[$132 + ($i$03$i << 4) >> 2] | 0;
   $i$04$i$i = $134;
   while (1) {
    $144 = $139 + ($i$04$i$i << 4) | 0;
    $142 = $i$04$i$i + 1 | 0;
    if ((HEAP32[$144 >> 2] | 0) == ($141 | 0)) break;
    if (($142 | 0) < ($136 | 0)) $i$04$i$i = $142; else {
     $$0$i$i = 1;
     break L45;
    }
   }
   $150 = HEAP8[$139 + ($i$04$i$i << 4) + 12 >> 0] | 0;
   if ((HEAPU8[$132 + ($i$03$i << 4) + 12 >> 0] | 0) > ($150 & 255)) _luaK_patchclose($126, HEAP32[$132 + ($i$03$i << 4) + 4 >> 2] | 0, $150 & 255);
   _closegoto($124, $i$03$i, $144);
   $$0$i$i = 0;
  } else $$0$i$i = 1; while (0);
  $i$03$i = $$0$i$i + $i$03$i | 0;
 } while (($i$03$i | 0) < (HEAP32[$108 >> 2] | 0));
 STACKTOP = sp;
 return;
}

function _getoption($h, $fmt, $size) {
 $h = $h | 0;
 $fmt = $fmt | 0;
 $size = $size | 0;
 var $$0 = 0, $$0$i$i1533 = 0, $$0$i$i2435 = 0, $$0$i$i29 = 0, $$0$i$i631 = 0, $0 = 0, $1 = 0, $19 = 0, $25 = 0, $3 = 0, $35 = 0, $41 = 0, $51 = 0, $57 = 0, $76 = 0, $86 = 0, $88 = 0, $9 = 0, $a$0$i = 0, $a$0$i$i = 0, $a$0$i$i11 = 0, $a$0$i$i2 = 0, $a$0$i$i20 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, sp = 0, $25$looptemp = 0, $57$looptemp = 0, $41$looptemp = 0, $9$looptemp = 0, $76$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $vararg_buffer16 = sp + 40 | 0;
 $vararg_buffer12 = sp + 32 | 0;
 $vararg_buffer10 = sp + 24 | 0;
 $vararg_buffer6 = sp + 16 | 0;
 $vararg_buffer2 = sp + 8 | 0;
 $vararg_buffer = sp;
 $0 = HEAP32[$fmt >> 2] | 0;
 $1 = $0 + 1 | 0;
 HEAP32[$fmt >> 2] = $1;
 $3 = HEAP8[$0 >> 0] | 0;
 HEAP32[$size >> 2] = 0;
 do switch ($3 | 0) {
 case 102:
  {
   HEAP32[$size >> 2] = 4;
   $$0 = 2;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 73:
  {
   if (((HEAP8[$1 >> 0] | 0) + -48 | 0) >>> 0 < 10) {
    $25 = $1;
    $a$0$i$i2 = 0;
    do {
     $25$looptemp = $25;
     $25 = $25 + 1 | 0;
     HEAP32[$fmt >> 2] = $25;
     $a$0$i$i2 = ($a$0$i$i2 * 10 | 0) + -48 + (HEAP8[$25$looptemp >> 0] | 0) | 0;
    } while (((HEAP8[$25 >> 0] | 0) + -48 | 0) >>> 0 < 10 & ($a$0$i$i2 | 0) < 214748364);
    if (($a$0$i$i2 + -1 | 0) >>> 0 > 15) {
     $35 = HEAP32[$h >> 2] | 0;
     HEAP32[$vararg_buffer2 >> 2] = $a$0$i$i2;
     HEAP32[$vararg_buffer2 + 4 >> 2] = 16;
     _luaL_error($35, 61480, $vararg_buffer2) | 0;
     $$0$i$i631 = $a$0$i$i2;
    } else $$0$i$i631 = $a$0$i$i2;
   } else $$0$i$i631 = 4;
   HEAP32[$size >> 2] = $$0$i$i631;
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 99:
  {
   if (((HEAP8[$1 >> 0] | 0) + -48 | 0) >>> 0 < 10) {
    $57 = $1;
    $a$0$i = 0;
    do {
     $57$looptemp = $57;
     $57 = $57 + 1 | 0;
     HEAP32[$fmt >> 2] = $57;
     $a$0$i = ($a$0$i * 10 | 0) + -48 + (HEAP8[$57$looptemp >> 0] | 0) | 0;
    } while (((HEAP8[$57 >> 0] | 0) + -48 | 0) >>> 0 < 10 & ($a$0$i | 0) < 214748364);
    HEAP32[$size >> 2] = $a$0$i;
    if (($a$0$i | 0) != -1) {
     $$0 = 3;
     STACKTOP = sp;
     return $$0 | 0;
    }
   } else HEAP32[$size >> 2] = -1;
   _luaL_error(HEAP32[$h >> 2] | 0, 61408, $vararg_buffer10) | 0;
   $$0 = 3;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 62:
  {
   HEAP32[$h + 4 >> 2] = 0;
   break;
  }
 case 88:
  {
   $$0 = 7;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 115:
  {
   if (((HEAP8[$1 >> 0] | 0) + -48 | 0) >>> 0 < 10) {
    $41 = $1;
    $a$0$i$i11 = 0;
    do {
     $41$looptemp = $41;
     $41 = $41 + 1 | 0;
     HEAP32[$fmt >> 2] = $41;
     $a$0$i$i11 = ($a$0$i$i11 * 10 | 0) + -48 + (HEAP8[$41$looptemp >> 0] | 0) | 0;
    } while (((HEAP8[$41 >> 0] | 0) + -48 | 0) >>> 0 < 10 & ($a$0$i$i11 | 0) < 214748364);
    if (($a$0$i$i11 + -1 | 0) >>> 0 > 15) {
     $51 = HEAP32[$h >> 2] | 0;
     HEAP32[$vararg_buffer6 >> 2] = $a$0$i$i11;
     HEAP32[$vararg_buffer6 + 4 >> 2] = 16;
     _luaL_error($51, 61480, $vararg_buffer6) | 0;
     $$0$i$i1533 = $a$0$i$i11;
    } else $$0$i$i1533 = $a$0$i$i11;
   } else $$0$i$i1533 = 4;
   HEAP32[$size >> 2] = $$0$i$i1533;
   $$0 = 4;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 61:
  {
   HEAP32[$h + 4 >> 2] = 1;
   break;
  }
 case 76:
  {
   HEAP32[$size >> 2] = 4;
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 66:
  {
   HEAP32[$size >> 2] = 1;
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 106:
  {
   HEAP32[$size >> 2] = 4;
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 104:
  {
   HEAP32[$size >> 2] = 2;
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 84:
  {
   HEAP32[$size >> 2] = 4;
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 110:
  {
   HEAP32[$size >> 2] = 4;
   $$0 = 2;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 74:
  {
   HEAP32[$size >> 2] = 4;
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 72:
  {
   HEAP32[$size >> 2] = 2;
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 100:
  {
   HEAP32[$size >> 2] = 8;
   $$0 = 2;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 60:
  {
   HEAP32[$h + 4 >> 2] = 1;
   break;
  }
 case 32:
  break;
 case 105:
  {
   if (((HEAP8[$1 >> 0] | 0) + -48 | 0) >>> 0 < 10) {
    $9 = $1;
    $a$0$i$i = 0;
    do {
     $9$looptemp = $9;
     $9 = $9 + 1 | 0;
     HEAP32[$fmt >> 2] = $9;
     $a$0$i$i = ($a$0$i$i * 10 | 0) + -48 + (HEAP8[$9$looptemp >> 0] | 0) | 0;
    } while (((HEAP8[$9 >> 0] | 0) + -48 | 0) >>> 0 < 10 & ($a$0$i$i | 0) < 214748364);
    if (($a$0$i$i + -1 | 0) >>> 0 > 15) {
     $19 = HEAP32[$h >> 2] | 0;
     HEAP32[$vararg_buffer >> 2] = $a$0$i$i;
     HEAP32[$vararg_buffer + 4 >> 2] = 16;
     _luaL_error($19, 61480, $vararg_buffer) | 0;
     $$0$i$i29 = $a$0$i$i;
    } else $$0$i$i29 = $a$0$i$i;
   } else $$0$i$i29 = 4;
   HEAP32[$size >> 2] = $$0$i$i29;
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 33:
  {
   if (((HEAP8[$1 >> 0] | 0) + -48 | 0) >>> 0 < 10) {
    $76 = $1;
    $a$0$i$i20 = 0;
    do {
     $76$looptemp = $76;
     $76 = $76 + 1 | 0;
     HEAP32[$fmt >> 2] = $76;
     $a$0$i$i20 = ($a$0$i$i20 * 10 | 0) + -48 + (HEAP8[$76$looptemp >> 0] | 0) | 0;
    } while (((HEAP8[$76 >> 0] | 0) + -48 | 0) >>> 0 < 10 & ($a$0$i$i20 | 0) < 214748364);
    if (($a$0$i$i20 + -1 | 0) >>> 0 > 15) {
     $86 = HEAP32[$h >> 2] | 0;
     HEAP32[$vararg_buffer12 >> 2] = $a$0$i$i20;
     HEAP32[$vararg_buffer12 + 4 >> 2] = 16;
     _luaL_error($86, 61480, $vararg_buffer12) | 0;
     $$0$i$i2435 = $a$0$i$i20;
    } else $$0$i$i2435 = $a$0$i$i20;
   } else $$0$i$i2435 = 8;
   HEAP32[$h + 8 >> 2] = $$0$i$i2435;
   break;
  }
 case 122:
  {
   $$0 = 5;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 108:
  {
   HEAP32[$size >> 2] = 4;
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 98:
  {
   HEAP32[$size >> 2] = 1;
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 120:
  {
   HEAP32[$size >> 2] = 1;
   $$0 = 6;
   STACKTOP = sp;
   return $$0 | 0;
  }
 default:
  {
   $88 = HEAP32[$h >> 2] | 0;
   HEAP32[$vararg_buffer16 >> 2] = $3;
   _luaL_error($88, 61448, $vararg_buffer16) | 0;
  }
 } while (0);
 $$0 = 8;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN16b2PrismaticJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $102 = 0.0, $104 = 0.0, $107 = 0.0, $110 = 0.0, $113 = 0.0, $116 = 0.0, $120 = 0.0, $13 = 0.0, $130 = 0.0, $132 = 0.0, $134 = 0.0, $135 = 0.0, $139 = 0.0, $14 = 0.0, $141 = 0.0, $147 = 0.0, $148 = 0.0, $152 = 0.0, $154 = 0.0, $157 = 0.0, $16 = 0.0, $161 = 0.0, $162 = 0.0, $164 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $173 = 0.0, $175 = 0.0, $176 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $2 = 0, $20 = 0, $207 = 0.0, $209 = 0.0, $210 = 0.0, $213 = 0.0, $225 = 0.0, $228 = 0.0, $230 = 0.0, $231 = 0.0, $234 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0, $26 = 0.0, $263 = 0, $267 = 0.0, $268 = 0.0, $269 = 0, $27 = 0.0, $278 = 0.0, $279 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $35 = 0.0, $37 = 0.0, $39 = 0.0, $4 = 0, $41 = 0.0, $46 = 0.0, $5 = 0, $51 = 0.0, $54 = 0.0, $57 = 0.0, $62 = 0.0, $67 = 0.0, $7 = 0, $70 = 0.0, $73 = 0.0, $78 = 0.0, $79 = 0.0, $81 = 0.0, $84 = 0.0, $86 = 0.0, $89 = 0.0, $90 = 0.0, $91 = 0.0, $94 = 0.0, $97 = 0.0, $99 = 0.0, $C2$0 = 0.0, $K = 0, $active$0$off0 = 0, $det$0$i = 0.0, $k223$0 = 0.0, $linearError$0 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $K = sp + 24 | 0;
 $0 = sp + 12 | 0;
 $1 = sp;
 $2 = $this + 144 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $data + 24 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $7 = $5 + ($3 * 12 | 0) | 0;
 $13 = +HEAPF32[$7 >> 2];
 $14 = +HEAPF32[$7 + 4 >> 2];
 $16 = +HEAPF32[$5 + ($3 * 12 | 0) + 8 >> 2];
 $17 = $this + 148 | 0;
 $18 = HEAP32[$17 >> 2] | 0;
 $20 = $5 + ($18 * 12 | 0) | 0;
 $26 = +HEAPF32[$20 >> 2];
 $27 = +HEAPF32[$20 + 4 >> 2];
 $29 = +HEAPF32[$5 + ($18 * 12 | 0) + 8 >> 2];
 $30 = +Math_sin(+$16);
 $31 = +Math_cos(+$16);
 $32 = +Math_sin(+$29);
 $33 = +Math_cos(+$29);
 $35 = +HEAPF32[$this + 168 >> 2];
 $37 = +HEAPF32[$this + 172 >> 2];
 $39 = +HEAPF32[$this + 176 >> 2];
 $41 = +HEAPF32[$this + 180 >> 2];
 $46 = +HEAPF32[$this + 68 >> 2] - +HEAPF32[$this + 152 >> 2];
 $51 = +HEAPF32[$this + 72 >> 2] - +HEAPF32[$this + 156 >> 2];
 $54 = $31 * $46 - $30 * $51;
 $57 = $30 * $46 + $31 * $51;
 $62 = +HEAPF32[$this + 76 >> 2] - +HEAPF32[$this + 160 >> 2];
 $67 = +HEAPF32[$this + 80 >> 2] - +HEAPF32[$this + 164 >> 2];
 $70 = $33 * $62 - $32 * $67;
 $73 = $32 * $62 + $33 * $67;
 $78 = $26 + $70 - $13 - $54;
 $79 = $27 + $73 - $14 - $57;
 $81 = +HEAPF32[$this + 84 >> 2];
 $84 = +HEAPF32[$this + 88 >> 2];
 $86 = $31 * $81 - $30 * $84;
 $89 = $30 * $81 + $31 * $84;
 $90 = $54 + $78;
 $91 = $57 + $79;
 $94 = $89 * $90 - $86 * $91;
 $97 = $70 * $89 - $73 * $86;
 $99 = +HEAPF32[$this + 92 >> 2];
 $102 = +HEAPF32[$this + 96 >> 2];
 $104 = $31 * $99 - $30 * $102;
 $107 = $30 * $99 + $31 * $102;
 $110 = $107 * $90 - $104 * $91;
 $113 = $70 * $107 - $73 * $104;
 $116 = $104 * $78 + $107 * $79;
 $120 = $29 - $16 - +HEAPF32[$this + 100 >> 2];
 if ($116 > 0.0) $148 = $116; else $148 = -$116;
 if ($120 > 0.0) $278 = $120; else $278 = -$120;
 do if (!(HEAP8[$this + 136 >> 0] | 0)) {
  $C2$0 = 0.0;
  $active$0$off0 = 0;
  $linearError$0 = $148;
 } else {
  $130 = $86 * $78 + $89 * $79;
  $132 = +HEAPF32[$this + 124 >> 2];
  $134 = +HEAPF32[$this + 120 >> 2];
  $135 = $132 - $134;
  if ($135 > 0.0) $139 = $135; else $139 = -$135;
  if ($139 < .009999999776482582) {
   $141 = $130 < .20000000298023224 ? $130 : .20000000298023224;
   if ($130 > 0.0) $147 = $130; else $147 = -$130;
   $C2$0 = $141 < -.20000000298023224 ? -.20000000298023224 : $141;
   $active$0$off0 = 1;
   $linearError$0 = $148 > $147 ? $148 : $147;
   break;
  }
  if ($130 <= $134) {
   $152 = $130 - $134 + .004999999888241291;
   $154 = $152 < 0.0 ? $152 : 0.0;
   $157 = $134 - $130;
   $C2$0 = $154 < -.20000000298023224 ? -.20000000298023224 : $154;
   $active$0$off0 = 1;
   $linearError$0 = $148 > $157 ? $148 : $157;
   break;
  }
  if (!($130 >= $132)) {
   $C2$0 = 0.0;
   $active$0$off0 = 0;
   $linearError$0 = $148;
  } else {
   $161 = $130 - $132;
   $162 = $161 + -.004999999888241291;
   $164 = $162 < .20000000298023224 ? $162 : .20000000298023224;
   $C2$0 = $164 < 0.0 ? 0.0 : $164;
   $active$0$off0 = 1;
   $linearError$0 = $148 > $161 ? $148 : $161;
  }
 } while (0);
 $169 = $35 + $37;
 $170 = $39 * $110;
 $173 = $41 * $113;
 $175 = $113 * $173 + ($169 + $110 * $170);
 $176 = $173 + $170;
 if ($active$0$off0) {
  $179 = $97 * $173 + $94 * $170;
  $180 = $39 + $41;
  $182 = $39 * $94;
  $183 = $41 * $97;
  $184 = $183 + $182;
  HEAPF32[$K >> 2] = $175;
  HEAPF32[$K + 4 >> 2] = $176;
  HEAPF32[$K + 8 >> 2] = $179;
  HEAPF32[$K + 12 >> 2] = $176;
  HEAPF32[$K + 16 >> 2] = $180 == 0.0 ? 1.0 : $180;
  HEAPF32[$K + 20 >> 2] = $184;
  HEAPF32[$K + 24 >> 2] = $179;
  HEAPF32[$K + 28 >> 2] = $184;
  HEAPF32[$K + 32 >> 2] = $97 * $183 + ($169 + $94 * $182);
  HEAPF32[$1 >> 2] = -$116;
  HEAPF32[$1 + 4 >> 2] = -$120;
  HEAPF32[$1 + 8 >> 2] = -$C2$0;
  __ZNK7b2Mat337Solve33ERK6b2Vec3($0, $K, $1);
  $225 = +HEAPF32[$0 >> 2];
  $228 = +HEAPF32[$0 + 8 >> 2];
  $234 = +HEAPF32[$0 + 4 >> 2];
 } else {
  $207 = $39 + $41;
  $k223$0 = $207 == 0.0 ? 1.0 : $207;
  $209 = -$116;
  $210 = -$120;
  $213 = $k223$0 * $175 - $176 * $176;
  if ($213 != 0.0) $det$0$i = 1.0 / $213; else $det$0$i = $213;
  $225 = ($k223$0 * $209 - $176 * $210) * $det$0$i;
  $228 = 0.0;
  $234 = ($175 * $210 - $176 * $209) * $det$0$i;
 }
 $230 = $86 * $228 + $104 * $225;
 $231 = $89 * $228 + $107 * $225;
 $256 = +($13 - $35 * $230);
 $257 = +($14 - $35 * $231);
 $258 = (HEAP32[$4 >> 2] | 0) + ((HEAP32[$2 >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$258 >> 2] = $256;
 HEAPF32[$258 + 4 >> 2] = $257;
 $263 = HEAP32[$4 >> 2] | 0;
 HEAPF32[$263 + ((HEAP32[$2 >> 2] | 0) * 12 | 0) + 8 >> 2] = $16 - $39 * ($94 * $228 + ($234 + $110 * $225));
 $267 = +($26 + $37 * $230);
 $268 = +($27 + $37 * $231);
 $269 = $263 + ((HEAP32[$17 >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$269 >> 2] = $267;
 HEAPF32[$269 + 4 >> 2] = $268;
 HEAPF32[(HEAP32[$4 >> 2] | 0) + ((HEAP32[$17 >> 2] | 0) * 12 | 0) + 8 >> 2] = $29 + $41 * ($97 * $228 + ($234 + $113 * $225));
 if (!($linearError$0 <= .004999999888241291)) {
  $279 = 0;
  STACKTOP = sp;
  return $279 | 0;
 }
 $279 = $278 <= .03490658849477768;
 STACKTOP = sp;
 return $279 | 0;
}

function _str_gsub($L) {
 $L = $L | 0;
 var $$$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $101 = 0, $105 = 0, $107 = 0, $11 = 0, $12 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $40 = 0, $45 = 0, $5 = 0, $51 = 0, $52 = 0, $53 = 0, $58 = 0, $59 = 0, $60 = 0, $62 = 0, $66 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $74 = 0, $76 = 0, $79 = 0, $81 = 0, $b = 0, $i$01$i$i = 0, $i$01$i2$i = 0, $i$1$i$i = 0, $l$i$i = 0, $lp = 0, $ms = 0, $n$0 = 0, $n$17 = 0, $n$18 = 0, $n$2 = 0, $p$0 = 0, $src$0 = 0, $src$1 = 0, $src$2 = 0, $srcl = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2384 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $l$i$i = sp + 2376 | 0;
 $srcl = sp + 2372 | 0;
 $lp = sp + 2368 | 0;
 $ms = sp + 2088 | 0;
 $b = sp + 24 | 0;
 $0 = _luaL_checklstring($L, 1, $srcl) | 0;
 $1 = _luaL_checklstring($L, 2, $lp) | 0;
 $2 = _lua_type($L, 3) | 0;
 $5 = _luaL_optinteger($L, 4, (HEAP32[$srcl >> 2] | 0) + 1 | 0) | 0;
 $7 = (HEAP8[$1 >> 0] | 0) == 94;
 if (($2 + -3 | 0) >>> 0 >= 4) _luaL_argerror($L, 3, 62040) | 0;
 _luaL_buffinit($L, $b);
 if ($7) {
  $10 = (HEAP32[$lp >> 2] | 0) + -1 | 0;
  HEAP32[$lp >> 2] = $10;
  $17 = $10;
  $p$0 = $1 + 1 | 0;
 } else {
  $17 = HEAP32[$lp >> 2] | 0;
  $p$0 = $1;
 }
 $11 = $ms + 16 | 0;
 HEAP32[$11 >> 2] = $L;
 HEAP32[$ms >> 2] = 200;
 $12 = $ms + 4 | 0;
 HEAP32[$12 >> 2] = $0;
 $15 = $ms + 8 | 0;
 HEAP32[$15 >> 2] = $0 + (HEAP32[$srcl >> 2] | 0);
 HEAP32[$ms + 12 >> 2] = $p$0 + $17;
 $19 = $ms + 20 | 0;
 $20 = $b + 8 | 0;
 $21 = $b + 4 | 0;
 $22 = $ms + 28 | 0;
 $23 = $ms + 24 | 0;
 $n$0 = 0;
 $src$0 = $0;
 while (1) {
  if (($n$0 | 0) >= ($5 | 0)) {
   $n$2 = $n$0;
   $src$2 = $src$0;
   label = 48;
   break;
  }
  HEAP32[$19 >> 2] = 0;
  $25 = _match($ms, $src$0, $p$0) | 0;
  if (!$25) {
   $n$17 = $n$0;
   label = 43;
  } else {
   $27 = $n$0 + 1 | 0;
   $28 = HEAP32[$11 >> 2] | 0;
   if (($2 | 0) == 6) {
    _lua_pushvalue($28, 3);
    $29 = HEAP32[$19 >> 2] | 0;
    $$$i$i = ($29 | 0) != 0 | ($src$0 | 0) == 0 ? $29 : 1;
    _luaL_checkstack(HEAP32[$11 >> 2] | 0, $$$i$i, 61736);
    if (($$$i$i | 0) > 0) {
     $i$01$i$i = 0;
     do {
      _push_onecapture($ms, $i$01$i$i, $src$0, $25);
      $i$01$i$i = $i$01$i$i + 1 | 0;
     } while (($i$01$i$i | 0) != ($$$i$i | 0));
    }
    _lua_callk($28, $$$i$i, 1, 0, 0);
    label = 37;
   } else if (($2 | 0) == 5) {
    do if ((HEAP32[$19 >> 2] | 0) > 0) {
     $40 = HEAP32[$22 >> 2] | 0;
     if (($40 | 0) == -1) {
      _luaL_error($28, 61792, $vararg_buffer) | 0;
      $51 = HEAP32[$11 >> 2] | 0;
      $52 = HEAP32[$23 >> 2] | 0;
     } else {
      $45 = HEAP32[$23 >> 2] | 0;
      if (($40 | 0) == -2) {
       _lua_pushinteger($28, $45 + 1 - (HEAP32[$12 >> 2] | 0) | 0);
       break;
      } else {
       $51 = $28;
       $52 = $45;
      }
     }
     _lua_pushlstring($51, $52, $40) | 0;
    } else _lua_pushlstring($28, $src$0, $25 - $src$0 | 0) | 0; while (0);
    _lua_gettable($28, 3) | 0;
    label = 37;
   } else {
    $53 = _lua_tolstring($28, 3, $l$i$i) | 0;
    if (HEAP32[$l$i$i >> 2] | 0) {
     $58 = $25 - $src$0 | 0;
     $i$01$i2$i = 0;
     do {
      $59 = $53 + $i$01$i2$i | 0;
      $60 = HEAP8[$59 >> 0] | 0;
      do if ($60 << 24 >> 24 == 37) {
       $70 = $i$01$i2$i + 1 | 0;
       $71 = $53 + $70 | 0;
       $72 = HEAP8[$71 >> 0] | 0;
       $74 = $72 << 24 >> 24;
       if ((($72 & 255) + -48 | 0) >>> 0 < 10) if ($72 << 24 >> 24 == 48) {
        _luaL_addlstring($b, $src$0, $58);
        $i$1$i$i = $70;
        break;
       } else {
        _push_onecapture($ms, $74 + -49 | 0, $src$0, $25);
        _luaL_tolstring($28, -1, 0) | 0;
        _lua_rotate($28, -2, -1);
        _lua_settop($28, -2);
        _luaL_addvalue($b);
        $i$1$i$i = $70;
        break;
       }
       if ($72 << 24 >> 24 != 37) {
        HEAP32[$vararg_buffer1 >> 2] = 37;
        _luaL_error($28, 62112, $vararg_buffer1) | 0;
       }
       $76 = HEAP32[$20 >> 2] | 0;
       if ($76 >>> 0 < (HEAP32[$21 >> 2] | 0) >>> 0) $81 = $76; else {
        _luaL_prepbuffsize($b, 1) | 0;
        $81 = HEAP32[$20 >> 2] | 0;
       }
       $79 = HEAP8[$71 >> 0] | 0;
       HEAP32[$20 >> 2] = $81 + 1;
       HEAP8[(HEAP32[$b >> 2] | 0) + $81 >> 0] = $79;
       $i$1$i$i = $70;
      } else {
       $62 = HEAP32[$20 >> 2] | 0;
       if ($62 >>> 0 < (HEAP32[$21 >> 2] | 0) >>> 0) {
        $66 = $62;
        $69 = $60;
       } else {
        _luaL_prepbuffsize($b, 1) | 0;
        $66 = HEAP32[$20 >> 2] | 0;
        $69 = HEAP8[$59 >> 0] | 0;
       }
       HEAP32[$20 >> 2] = $66 + 1;
       HEAP8[(HEAP32[$b >> 2] | 0) + $66 >> 0] = $69;
       $i$1$i$i = $i$01$i2$i;
      } while (0);
      $i$01$i2$i = $i$1$i$i + 1 | 0;
     } while ($i$01$i2$i >>> 0 < (HEAP32[$l$i$i >> 2] | 0) >>> 0);
    }
   }
   if ((label | 0) == 37) {
    label = 0;
    if (!(_lua_toboolean($28, -1) | 0)) {
     _lua_settop($28, -2);
     _lua_pushlstring($28, $src$0, $25 - $src$0 | 0) | 0;
    } else if (!(_lua_isstring($28, -1) | 0)) {
     HEAP32[$vararg_buffer3 >> 2] = _lua_typename($28, _lua_type($28, -1) | 0) | 0;
     _luaL_error($28, 62072, $vararg_buffer3) | 0;
    }
    _luaL_addvalue($b);
   }
   if ($25 >>> 0 > $src$0 >>> 0) {
    $n$18 = $27;
    $src$1 = $25;
   } else {
    $n$17 = $27;
    label = 43;
   }
  }
  if ((label | 0) == 43) {
   label = 0;
   if ($src$0 >>> 0 >= (HEAP32[$15 >> 2] | 0) >>> 0) {
    $n$2 = $n$17;
    $src$2 = $src$0;
    label = 48;
    break;
   }
   $101 = HEAP32[$20 >> 2] | 0;
   if ($101 >>> 0 < (HEAP32[$21 >> 2] | 0) >>> 0) $107 = $101; else {
    _luaL_prepbuffsize($b, 1) | 0;
    $107 = HEAP32[$20 >> 2] | 0;
   }
   $105 = HEAP8[$src$0 >> 0] | 0;
   HEAP32[$20 >> 2] = $107 + 1;
   HEAP8[(HEAP32[$b >> 2] | 0) + $107 >> 0] = $105;
   $n$18 = $n$17;
   $src$1 = $src$0 + 1 | 0;
  }
  if ($7) {
   $n$2 = $n$18;
   $src$2 = $src$1;
   label = 48;
   break;
  } else {
   $n$0 = $n$18;
   $src$0 = $src$1;
  }
 }
 if ((label | 0) == 48) {
  _luaL_addlstring($b, $src$2, (HEAP32[$15 >> 2] | 0) - $src$2 | 0);
  _luaL_pushresult($b);
  _lua_pushinteger($L, $n$2);
  STACKTOP = sp;
  return 2;
 }
 return 0;
}

function _luaK_posfix($fs, $op, $e1, $e2, $line) {
 $fs = $fs | 0;
 $op = $op | 0;
 $e1 = $e1 | 0;
 $e2 = $e2 | 0;
 $line = $line | 0;
 var $$pre = 0, $$pre23 = 0, $0 = 0, $102 = 0, $109 = 0, $114 = 0, $115 = 0, $12 = 0, $122 = 0, $126 = 0, $127 = 0, $128 = 0, $132 = 0, $139 = 0, $14 = 0, $144 = 0, $145 = 0, $152 = 0, $155 = 0, $2 = 0, $23 = 0, $25 = 0, $27 = 0, $29 = 0, $30 = 0, $32 = 0, $35 = 0, $37 = 0, $4 = 0, $46 = 0, $48 = 0, $50 = 0, $57 = 0, $6 = 0, $64 = 0, $65 = 0, $67 = 0, $68 = 0, $7 = 0, $70 = 0, $75 = 0, $76 = 0, $83 = 0, $87 = 0, $88 = 0, $9 = 0, $90 = 0, $96 = 0, $97 = 0, $98 = 0, $fs$idx$val$idx$val$i = 0, $fs$idx$val$idx$val$i4 = 0, $list$0$i = 0, $list$0$i6 = 0;
 switch ($op | 0) {
 case 20:
  {
   _luaK_dischargevars($fs, $e2);
   $23 = $e2 + 8 | 0;
   $25 = HEAP32[$e1 + 8 >> 2] | 0;
   do if (($25 | 0) != -1) {
    $27 = HEAP32[$23 >> 2] | 0;
    if (($27 | 0) == -1) {
     HEAP32[$23 >> 2] = $25;
     break;
    }
    $fs$idx$val$idx$val$i4 = HEAP32[(HEAP32[$fs >> 2] | 0) + 48 >> 2] | 0;
    $list$0$i6 = $27;
    while (1) {
     $29 = $fs$idx$val$idx$val$i4 + ($list$0$i6 << 2) | 0;
     $30 = HEAP32[$29 >> 2] | 0;
     $32 = ($30 >>> 14) + -131071 | 0;
     if (($32 | 0) == -1) break;
     $35 = $list$0$i6 + 1 + $32 | 0;
     if (($35 | 0) == -1) break; else $list$0$i6 = $35;
    }
    $37 = $25 + ~$list$0$i6 | 0;
    if (((($37 | 0) > -1 ? $37 : 0 - $37 | 0) | 0) > 131071) _luaX_syntaxerror(HEAP32[$fs + 8 >> 2] | 0, 65576); else {
     HEAP32[$29 >> 2] = ($37 << 14) + 2147467264 | $30 & 16383;
     break;
    }
   } while (0);
   HEAP32[$e1 + 0 >> 2] = HEAP32[$e2 + 0 >> 2];
   HEAP32[$e1 + 4 >> 2] = HEAP32[$e2 + 4 >> 2];
   HEAP32[$e1 + 8 >> 2] = HEAP32[$e2 + 8 >> 2];
   HEAP32[$e1 + 12 >> 2] = HEAP32[$e2 + 12 >> 2];
   return;
  }
 case 11:
 case 10:
 case 9:
 case 8:
 case 7:
 case 4:
 case 3:
 case 6:
 case 5:
 case 2:
 case 1:
 case 0:
  {
   _codeexpval($fs, $op + 13 | 0, $e1, $e2, $line);
   return;
  }
 case 18:
 case 17:
 case 16:
  {
   $126 = $op + 15 | 0;
   $127 = _luaK_exp2RK($fs, $e1) | 0;
   $128 = _luaK_exp2RK($fs, $e2) | 0;
   if ((HEAP32[$e2 >> 2] | 0) == 7) {
    $132 = HEAP32[$e2 + 4 >> 2] | 0;
    if (!($132 & 256)) if ((HEAPU8[$fs + 42 >> 0] | 0 | 0) <= ($132 | 0)) {
     $139 = $fs + 44 | 0;
     HEAP8[$139 >> 0] = (HEAP8[$139 >> 0] | 0) + -1 << 24 >> 24;
    }
   }
   $144 = $e1 + 4 | 0;
   if ((HEAP32[$e1 >> 2] | 0) == 7) {
    $145 = HEAP32[$144 >> 2] | 0;
    if (!($145 & 256)) if ((HEAPU8[$fs + 42 >> 0] | 0 | 0) <= ($145 | 0)) {
     $152 = $fs + 44 | 0;
     HEAP8[$152 >> 0] = (HEAP8[$152 >> 0] | 0) + -1 << 24 >> 24;
    }
   }
   $155 = ($126 | 0) == 31;
   HEAP32[$144 >> 2] = _condjump($fs, $126, $155 & 1 ^ 1, $155 ? $127 : $128, $155 ? $128 : $127) | 0;
   HEAP32[$e1 >> 2] = 11;
   return;
  }
 case 12:
  {
   $46 = $e2 + 8 | 0;
   $48 = $e2 + 12 | 0;
   $50 = (HEAP32[$46 >> 2] | 0) == (HEAP32[$48 >> 2] | 0);
   _luaK_dischargevars($fs, $e2);
   do if (!$50) {
    if ((HEAP32[$e2 >> 2] | 0) == 7) {
     $57 = HEAP32[$e2 + 4 >> 2] | 0;
     if ((HEAP32[$46 >> 2] | 0) == (HEAP32[$48 >> 2] | 0)) break;
     if (($57 | 0) >= (HEAPU8[$fs + 42 >> 0] | 0 | 0)) {
      _exp2reg($fs, $e2, $57);
      break;
     }
    }
    _luaK_exp2nextreg($fs, $e2);
   } while (0);
   if ((HEAP32[$e2 >> 2] | 0) == 12) {
    $64 = $e2 + 4 | 0;
    $65 = HEAP32[$64 >> 2] | 0;
    $67 = (HEAP32[$fs >> 2] | 0) + 48 | 0;
    $68 = HEAP32[$67 >> 2] | 0;
    $70 = HEAP32[$68 + ($65 << 2) >> 2] | 0;
    if (($70 & 63 | 0) == 29) {
     $75 = $e1 + 4 | 0;
     if ((HEAP32[$e1 >> 2] | 0) == 7) {
      $76 = HEAP32[$75 >> 2] | 0;
      if (!($76 & 256)) if ((HEAPU8[$fs + 42 >> 0] | 0 | 0) > ($76 | 0)) {
       $87 = $68;
       $88 = $65;
       $90 = $70;
      } else {
       $83 = $fs + 44 | 0;
       HEAP8[$83 >> 0] = (HEAP8[$83 >> 0] | 0) + -1 << 24 >> 24;
       $$pre = HEAP32[$64 >> 2] | 0;
       $$pre23 = HEAP32[$67 >> 2] | 0;
       $87 = $$pre23;
       $88 = $$pre;
       $90 = HEAP32[$$pre23 + ($$pre << 2) >> 2] | 0;
      } else {
       $87 = $68;
       $88 = $65;
       $90 = $70;
      }
     } else {
      $87 = $68;
      $88 = $65;
      $90 = $70;
     }
     HEAP32[$87 + ($88 << 2) >> 2] = HEAP32[$75 >> 2] << 23 | $90 & 8388607;
     HEAP32[$e1 >> 2] = 12;
     HEAP32[$75 >> 2] = HEAP32[$64 >> 2];
     return;
    }
   }
   _luaK_exp2nextreg($fs, $e2);
   _codeexpval($fs, 29, $e1, $e2, $line);
   return;
  }
 case 19:
  {
   _luaK_dischargevars($fs, $e2);
   $0 = $e2 + 12 | 0;
   $2 = HEAP32[$e1 + 12 >> 2] | 0;
   do if (($2 | 0) != -1) {
    $4 = HEAP32[$0 >> 2] | 0;
    if (($4 | 0) == -1) {
     HEAP32[$0 >> 2] = $2;
     break;
    }
    $fs$idx$val$idx$val$i = HEAP32[(HEAP32[$fs >> 2] | 0) + 48 >> 2] | 0;
    $list$0$i = $4;
    while (1) {
     $6 = $fs$idx$val$idx$val$i + ($list$0$i << 2) | 0;
     $7 = HEAP32[$6 >> 2] | 0;
     $9 = ($7 >>> 14) + -131071 | 0;
     if (($9 | 0) == -1) break;
     $12 = $list$0$i + 1 + $9 | 0;
     if (($12 | 0) == -1) break; else $list$0$i = $12;
    }
    $14 = $2 + ~$list$0$i | 0;
    if (((($14 | 0) > -1 ? $14 : 0 - $14 | 0) | 0) > 131071) _luaX_syntaxerror(HEAP32[$fs + 8 >> 2] | 0, 65576); else {
     HEAP32[$6 >> 2] = ($14 << 14) + 2147467264 | $7 & 16383;
     break;
    }
   } while (0);
   HEAP32[$e1 + 0 >> 2] = HEAP32[$e2 + 0 >> 2];
   HEAP32[$e1 + 4 >> 2] = HEAP32[$e2 + 4 >> 2];
   HEAP32[$e1 + 8 >> 2] = HEAP32[$e2 + 8 >> 2];
   HEAP32[$e1 + 12 >> 2] = HEAP32[$e2 + 12 >> 2];
   return;
  }
 case 15:
 case 14:
 case 13:
  {
   $96 = $op + 18 | 0;
   $97 = _luaK_exp2RK($fs, $e1) | 0;
   $98 = _luaK_exp2RK($fs, $e2) | 0;
   if ((HEAP32[$e2 >> 2] | 0) == 7) {
    $102 = HEAP32[$e2 + 4 >> 2] | 0;
    if (!($102 & 256)) if ((HEAPU8[$fs + 42 >> 0] | 0 | 0) <= ($102 | 0)) {
     $109 = $fs + 44 | 0;
     HEAP8[$109 >> 0] = (HEAP8[$109 >> 0] | 0) + -1 << 24 >> 24;
    }
   }
   $114 = $e1 + 4 | 0;
   if ((HEAP32[$e1 >> 2] | 0) == 7) {
    $115 = HEAP32[$114 >> 2] | 0;
    if (!($115 & 256)) if ((HEAPU8[$fs + 42 >> 0] | 0 | 0) <= ($115 | 0)) {
     $122 = $fs + 44 | 0;
     HEAP8[$122 >> 0] = (HEAP8[$122 >> 0] | 0) + -1 << 24 >> 24;
    }
   }
   HEAP32[$114 >> 2] = _condjump($fs, $96, 1, $97, $98) | 0;
   HEAP32[$e1 >> 2] = 11;
   return;
  }
 default:
  return;
 }
}

function __ZN15b2FrictionJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $1 = 0, $103 = 0.0, $107 = 0.0, $110 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $127 = 0.0, $128 = 0.0, $131 = 0.0, $133 = 0.0, $137 = 0.0, $14 = 0, $140 = 0.0, $145 = 0.0, $151 = 0.0, $158 = 0, $159 = 0, $160 = 0.0, $162 = 0.0, $163 = 0, $165 = 0.0, $167 = 0, $169 = 0.0, $17 = 0, $18 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0.0, $209 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $24 = 0, $26 = 0, $29 = 0, $3 = 0, $30 = 0, $36 = 0, $38 = 0.0, $4 = 0, $41 = 0.0, $44 = 0.0, $47 = 0, $49 = 0.0, $50 = 0, $51 = 0, $53 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $62 = 0.0, $64 = 0.0, $66 = 0, $72 = 0.0, $73 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $83 = 0.0, $87 = 0.0, $9 = 0, $90 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $det$0$i = 0.0, $storemerge = 0.0, $wA$0 = 0.0, $wB$0 = 0.0;
 $1 = HEAP32[$this + 48 >> 2] | 0;
 $3 = HEAP32[$1 + 8 >> 2] | 0;
 $4 = $this + 104 | 0;
 HEAP32[$4 >> 2] = $3;
 $6 = HEAP32[$this + 52 >> 2] | 0;
 $8 = HEAP32[$6 + 8 >> 2] | 0;
 $9 = $this + 108 | 0;
 HEAP32[$9 >> 2] = $8;
 $12 = $1 + 28 | 0;
 $14 = HEAP32[$12 >> 2] | 0;
 $17 = HEAP32[$12 + 4 >> 2] | 0;
 $18 = $this + 128 | 0;
 HEAP32[$18 >> 2] = $14;
 HEAP32[$18 + 4 >> 2] = $17;
 $24 = $6 + 28 | 0;
 $26 = HEAP32[$24 >> 2] | 0;
 $29 = HEAP32[$24 + 4 >> 2] | 0;
 $30 = $this + 136 | 0;
 HEAP32[$30 >> 2] = $26;
 HEAP32[$30 + 4 >> 2] = $29;
 $36 = $this + 144 | 0;
 HEAPF32[$36 >> 2] = +HEAPF32[$1 + 120 >> 2];
 $38 = +HEAPF32[$6 + 120 >> 2];
 HEAPF32[$this + 148 >> 2] = $38;
 $41 = +HEAPF32[$1 + 128 >> 2];
 HEAPF32[$this + 152 >> 2] = $41;
 $44 = +HEAPF32[$6 + 128 >> 2];
 HEAPF32[$this + 156 >> 2] = $44;
 $47 = HEAP32[$data + 24 >> 2] | 0;
 $49 = +HEAPF32[$47 + ($3 * 12 | 0) + 8 >> 2];
 $50 = $data + 28 | 0;
 $51 = HEAP32[$50 >> 2] | 0;
 $53 = $51 + ($3 * 12 | 0) | 0;
 $59 = +HEAPF32[$53 >> 2];
 $60 = +HEAPF32[$53 + 4 >> 2];
 $62 = +HEAPF32[$51 + ($3 * 12 | 0) + 8 >> 2];
 $64 = +HEAPF32[$47 + ($8 * 12 | 0) + 8 >> 2];
 $66 = $51 + ($8 * 12 | 0) | 0;
 $72 = +HEAPF32[$66 >> 2];
 $73 = +HEAPF32[$66 + 4 >> 2];
 $75 = +HEAPF32[$51 + ($8 * 12 | 0) + 8 >> 2];
 $76 = +Math_sin(+$49);
 $77 = +Math_cos(+$49);
 $78 = +Math_sin(+$64);
 $79 = +Math_cos(+$64);
 $83 = +HEAPF32[$this + 68 >> 2] - (HEAP32[tempDoublePtr >> 2] = $14, +HEAPF32[tempDoublePtr >> 2]);
 $87 = +HEAPF32[$this + 72 >> 2] - (HEAP32[tempDoublePtr >> 2] = $17, +HEAPF32[tempDoublePtr >> 2]);
 $90 = $77 * $83 - $76 * $87;
 $93 = $76 * $83 + $77 * $87;
 $94 = +$90;
 $95 = +$93;
 $96 = $this + 112 | 0;
 HEAPF32[$96 >> 2] = $94;
 HEAPF32[$96 + 4 >> 2] = $95;
 $103 = +HEAPF32[$this + 76 >> 2] - (HEAP32[tempDoublePtr >> 2] = $26, +HEAPF32[tempDoublePtr >> 2]);
 $107 = +HEAPF32[$this + 80 >> 2] - (HEAP32[tempDoublePtr >> 2] = $29, +HEAPF32[tempDoublePtr >> 2]);
 $110 = $79 * $103 - $78 * $107;
 $113 = $78 * $103 + $79 * $107;
 $114 = +$110;
 $115 = +$113;
 $116 = $this + 120 | 0;
 HEAPF32[$116 >> 2] = $114;
 HEAPF32[$116 + 4 >> 2] = $115;
 $120 = +HEAPF32[$36 >> 2];
 $121 = $120 + $38;
 $127 = $121 + $93 * ($41 * $93) + $113 * ($44 * $113);
 $128 = $41 * $90;
 $131 = $44 * $110;
 $133 = -($93 * $128) - $113 * $131;
 $137 = $121 + $90 * $128 + $110 * $131;
 $140 = $127 * $137 - $133 * $133;
 if ($140 != 0.0) $det$0$i = 1.0 / $140; else $det$0$i = $140;
 $145 = -($133 * $det$0$i);
 HEAPF32[$this + 160 >> 2] = $137 * $det$0$i;
 HEAPF32[$this + 164 >> 2] = $145;
 HEAPF32[$this + 168 >> 2] = $145;
 HEAPF32[$this + 172 >> 2] = $127 * $det$0$i;
 $151 = $41 + $44;
 if ($151 > 0.0) $storemerge = 1.0 / $151; else $storemerge = $151;
 HEAPF32[$this + 176 >> 2] = $storemerge;
 $158 = $this + 84 | 0;
 if (!(HEAP8[$data + 20 >> 0] | 0)) {
  HEAPF32[$158 >> 2] = 0.0;
  HEAPF32[$this + 88 >> 2] = 0.0;
  HEAPF32[$this + 92 >> 2] = 0.0;
  $196 = $59;
  $198 = $60;
  $209 = $72;
  $211 = $73;
  $wA$0 = $62;
  $wB$0 = $75;
  $192 = HEAP32[$4 >> 2] | 0;
  $193 = HEAP32[$50 >> 2] | 0;
  $194 = $193 + ($192 * 12 | 0) | 0;
  $195 = +$196;
  $197 = +$198;
  $199 = $194;
  $200 = $199;
  HEAPF32[$200 >> 2] = $195;
  $201 = $199 + 4 | 0;
  $202 = $201;
  HEAPF32[$202 >> 2] = $197;
  $203 = HEAP32[$4 >> 2] | 0;
  $204 = HEAP32[$50 >> 2] | 0;
  $205 = $204 + ($203 * 12 | 0) + 8 | 0;
  HEAPF32[$205 >> 2] = $wA$0;
  $206 = HEAP32[$9 >> 2] | 0;
  $207 = $204 + ($206 * 12 | 0) | 0;
  $208 = +$209;
  $210 = +$211;
  $212 = $207;
  $213 = $212;
  HEAPF32[$213 >> 2] = $208;
  $214 = $212 + 4 | 0;
  $215 = $214;
  HEAPF32[$215 >> 2] = $210;
  $216 = HEAP32[$9 >> 2] | 0;
  $217 = HEAP32[$50 >> 2] | 0;
  $218 = $217 + ($216 * 12 | 0) + 8 | 0;
  HEAPF32[$218 >> 2] = $wB$0;
  return;
 } else {
  $159 = $data + 8 | 0;
  $160 = +HEAPF32[$159 >> 2];
  $162 = $160 * +HEAPF32[$158 >> 2];
  HEAPF32[$158 >> 2] = $162;
  $163 = $this + 88 | 0;
  $165 = $160 * +HEAPF32[$163 >> 2];
  HEAPF32[$163 >> 2] = $165;
  $167 = $this + 92 | 0;
  $169 = +HEAPF32[$159 >> 2] * +HEAPF32[$167 >> 2];
  HEAPF32[$167 >> 2] = $169;
  $196 = $59 - $120 * $162;
  $198 = $60 - $120 * $165;
  $209 = $72 + $38 * $162;
  $211 = $73 + $38 * $165;
  $wA$0 = $62 - $41 * ($169 + ($165 * $90 - $162 * $93));
  $wB$0 = $75 + $44 * ($169 + ($165 * $110 - $162 * $113));
  $192 = HEAP32[$4 >> 2] | 0;
  $193 = HEAP32[$50 >> 2] | 0;
  $194 = $193 + ($192 * 12 | 0) | 0;
  $195 = +$196;
  $197 = +$198;
  $199 = $194;
  $200 = $199;
  HEAPF32[$200 >> 2] = $195;
  $201 = $199 + 4 | 0;
  $202 = $201;
  HEAPF32[$202 >> 2] = $197;
  $203 = HEAP32[$4 >> 2] | 0;
  $204 = HEAP32[$50 >> 2] | 0;
  $205 = $204 + ($203 * 12 | 0) + 8 | 0;
  HEAPF32[$205 >> 2] = $wA$0;
  $206 = HEAP32[$9 >> 2] | 0;
  $207 = $204 + ($206 * 12 | 0) | 0;
  $208 = +$209;
  $210 = +$211;
  $212 = $207;
  $213 = $212;
  HEAPF32[$213 >> 2] = $208;
  $214 = $212 + 4 | 0;
  $215 = $214;
  HEAPF32[$215 >> 2] = $210;
  $216 = HEAP32[$9 >> 2] | 0;
  $217 = HEAP32[$50 >> 2] | 0;
  $218 = $217 + ($216 * 12 | 0) + 8 | 0;
  HEAPF32[$218 >> 2] = $wB$0;
  return;
 }
}

function _body($ls, $e, $ismethod, $line) {
 $ls = $ls | 0;
 $e = $e | 0;
 $ismethod = $ismethod | 0;
 $line = $line | 0;
 var $$idx$val$idx$val$pre$i$i = 0, $$idx1$val$idx$val$idx$val$pre$i$i = 0, $$idx2$i$i = 0, $$pre3$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $109 = 0, $114 = 0, $122 = 0, $137 = 0, $14 = 0, $141 = 0, $16 = 0, $17 = 0, $3 = 0, $32 = 0, $38 = 0, $4 = 0, $45 = 0, $55 = 0, $64 = 0, $69 = 0, $7 = 0, $72 = 0, $8 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $88 = 0, $89 = 0, $90 = 0, $94 = 0, $97 = 0, $bl = 0, $ls$idx = 0, $ls$idx$val = 0, $ls$idx$val$i = 0, $ls$idx$val$i8 = 0, $ls$idx1$val = 0, $ls$idx2$val = 0, $ls$idx3$val$idx$val = 0, $new_fs = 0, $nparams$0$i = 0, $nparams$2$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $new_fs = sp + 16 | 0;
 $bl = sp;
 $ls$idx = $ls + 28 | 0;
 $ls$idx$val = HEAP32[$ls$idx >> 2] | 0;
 $ls$idx1$val = HEAP32[$ls + 32 >> 2] | 0;
 $0 = HEAP32[$ls$idx$val >> 2] | 0;
 $1 = $ls$idx$val + 32 | 0;
 $3 = $0 + 28 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $$pre3$i = $0 + 52 | 0;
 if ((HEAP32[$1 >> 2] | 0) >= ($4 | 0)) {
  $7 = _luaM_growaux_($ls$idx1$val, HEAP32[$$pre3$i >> 2] | 0, $3, 4, 262143, 60584) | 0;
  HEAP32[$$pre3$i >> 2] = $7;
  $8 = HEAP32[$3 >> 2] | 0;
  if (($4 | 0) < ($8 | 0)) {
   $10 = $4 + 1 | 0;
   HEAP32[$7 + ($4 << 2) >> 2] = 0;
   if (($10 | 0) < ($8 | 0)) {
    $14 = $10;
    do {
     HEAP32[(HEAP32[$$pre3$i >> 2] | 0) + ($14 << 2) >> 2] = 0;
     $14 = $14 + 1 | 0;
    } while (($14 | 0) != ($8 | 0));
   }
  }
 }
 $16 = _luaF_newproto($ls$idx1$val) | 0;
 $17 = HEAP32[$1 >> 2] | 0;
 HEAP32[$1 >> 2] = $17 + 1;
 HEAP32[(HEAP32[$$pre3$i >> 2] | 0) + ($17 << 2) >> 2] = $16;
 if (HEAP8[$0 + 5 >> 0] & 4) if (HEAP8[$16 + 5 >> 0] & 3) _luaC_barrier_($ls$idx1$val, $0, $16);
 HEAP32[$new_fs >> 2] = $16;
 HEAP32[$16 + 36 >> 2] = $line;
 HEAP32[$new_fs + 4 >> 2] = HEAP32[$ls$idx >> 2];
 $32 = $new_fs + 8 | 0;
 HEAP32[$32 >> 2] = $ls;
 HEAP32[$ls$idx >> 2] = $new_fs;
 HEAP32[$new_fs + 16 >> 2] = 0;
 HEAP32[$new_fs + 20 >> 2] = 0;
 HEAP32[$new_fs + 24 >> 2] = -1;
 HEAP32[$new_fs + 28 >> 2] = 0;
 HEAP32[$new_fs + 32 >> 2] = 0;
 $38 = $new_fs + 40 | 0;
 HEAP32[$38 + 0 >> 2] = 0;
 HEAP8[$38 + 4 >> 0] = 0;
 HEAP32[$new_fs + 36 >> 2] = HEAP32[(HEAP32[$ls + 48 >> 2] | 0) + 4 >> 2];
 $45 = $new_fs + 12 | 0;
 HEAP32[$45 >> 2] = 0;
 HEAP32[$16 + 72 >> 2] = HEAP32[$ls + 52 >> 2];
 HEAP8[$16 + 8 >> 0] = 2;
 HEAP8[$bl + 14 >> 0] = 0;
 HEAP8[$bl + 12 >> 0] = HEAP8[$new_fs + 42 >> 0] | 0;
 $55 = HEAP32[(HEAP32[$32 >> 2] | 0) + 48 >> 2] | 0;
 HEAP32[$bl + 4 >> 2] = HEAP32[$55 + 28 >> 2];
 HEAP32[$bl + 8 >> 2] = HEAP32[$55 + 16 >> 2];
 HEAP8[$bl + 13 >> 0] = 0;
 HEAP32[$bl >> 2] = HEAP32[$45 >> 2];
 HEAP32[$45 >> 2] = $bl;
 $64 = $ls + 12 | 0;
 if ((HEAP32[$64 >> 2] | 0) != 40) _error_expected($ls, 40);
 _luaX_next($ls);
 if ($ismethod) {
  _new_localvar($ls, _luaX_newstring($ls, 60528, 4) | 0);
  $ls$idx2$val = HEAP32[$ls$idx >> 2] | 0;
  $69 = $ls$idx2$val + 42 | 0;
  $72 = (HEAPU8[$69 >> 0] | 0) + 1 | 0;
  HEAP8[$69 >> 0] = $72;
  HEAP32[(HEAP32[(HEAP32[$ls$idx2$val >> 2] | 0) + 60 >> 2] | 0) + ((HEAP16[(HEAP32[HEAP32[(HEAP32[$ls$idx2$val + 8 >> 2] | 0) + 48 >> 2] >> 2] | 0) + (($72 & 255) + -1 + (HEAP32[$ls$idx2$val + 36 >> 2] | 0) << 1) >> 1] | 0) * 12 | 0) + 4 >> 2] = HEAP32[$ls$idx2$val + 16 >> 2];
 }
 $83 = HEAP32[$ls$idx >> 2] | 0;
 $84 = HEAP32[$83 >> 2] | 0;
 $85 = $84 + 7 | 0;
 HEAP8[$85 >> 0] = 0;
 $86 = HEAP32[$64 >> 2] | 0;
 L17 : do if (($86 | 0) == 41) $nparams$2$i = 0; else {
  $88 = $ls + 16 | 0;
  $141 = $86;
  $nparams$0$i = 0;
  while (1) {
   if (($141 | 0) == 281) {
    label = 16;
    break;
   } else if (($141 | 0) != 292) {
    label = 17;
    break;
   }
   $89 = HEAP32[$88 >> 2] | 0;
   _luaX_next($ls);
   _new_localvar($ls, $89);
   $90 = $nparams$0$i + 1 | 0;
   if (HEAP8[$85 >> 0] | 0) {
    $nparams$2$i = $90;
    break L17;
   }
   if ((HEAP32[$64 >> 2] | 0) != 44) {
    $nparams$2$i = $90;
    break L17;
   }
   _luaX_next($ls);
   $141 = HEAP32[$64 >> 2] | 0;
   $nparams$0$i = $90;
  }
  if ((label | 0) == 16) {
   _luaX_next($ls);
   HEAP8[$85 >> 0] = 1;
   $nparams$2$i = $nparams$0$i;
   break;
  } else if ((label | 0) == 17) _luaX_syntaxerror($ls, 60536);
 } while (0);
 $ls$idx$val$i = HEAP32[$ls$idx >> 2] | 0;
 $94 = $ls$idx$val$i + 42 | 0;
 $97 = (HEAPU8[$94 >> 0] | 0) + $nparams$2$i | 0;
 HEAP8[$94 >> 0] = $97;
 if ($nparams$2$i) {
  $100 = $ls$idx$val$i + 16 | 0;
  $$idx2$i$i = $ls$idx$val$i + 36 | 0;
  $$idx$val$idx$val$pre$i$i = HEAP32[(HEAP32[$ls$idx$val$i >> 2] | 0) + 60 >> 2] | 0;
  $$idx1$val$idx$val$idx$val$pre$i$i = HEAP32[HEAP32[(HEAP32[$ls$idx$val$i + 8 >> 2] | 0) + 48 >> 2] >> 2] | 0;
  HEAP32[$$idx$val$idx$val$pre$i$i + ((HEAP16[$$idx1$val$idx$val$idx$val$pre$i$i + (($97 & 255) - $nparams$2$i + (HEAP32[$$idx2$i$i >> 2] | 0) << 1) >> 1] | 0) * 12 | 0) + 4 >> 2] = HEAP32[$100 >> 2];
  $109 = $nparams$2$i + -1 | 0;
  if ($109) {
   $114 = $109;
   do {
    HEAP32[$$idx$val$idx$val$pre$i$i + ((HEAP16[$$idx1$val$idx$val$idx$val$pre$i$i + ((HEAPU8[$94 >> 0] | 0) - $114 + (HEAP32[$$idx2$i$i >> 2] | 0) << 1) >> 1] | 0) * 12 | 0) + 4 >> 2] = HEAP32[$100 >> 2];
    $114 = $114 + -1 | 0;
   } while (($114 | 0) != 0);
  }
 }
 $122 = $83 + 42 | 0;
 HEAP8[$84 + 6 >> 0] = HEAP8[$122 >> 0] | 0;
 _luaK_reserveregs($83, HEAPU8[$122 >> 0] | 0);
 if ((HEAP32[$64 >> 2] | 0) != 41) _error_expected($ls, 41);
 _luaX_next($ls);
 L36 : while (1) {
  $ls$idx$val$i8 = HEAP32[$64 >> 2] | 0;
  switch ($ls$idx$val$i8 | 0) {
  case 277:
  case 289:
  case 262:
  case 261:
  case 260:
   {
    label = 28;
    break L36;
    break;
   }
  default:
   {}
  }
  _statement($ls);
  if (($ls$idx$val$i8 | 0) == 274) {
   label = 28;
   break;
  }
 }
 if ((label | 0) == 28) {
  HEAP32[(HEAP32[$new_fs >> 2] | 0) + 40 >> 2] = HEAP32[$ls + 4 >> 2];
  _check_match($ls, 262, 265, $line);
  $ls$idx3$val$idx$val = HEAP32[(HEAP32[$ls$idx >> 2] | 0) + 4 >> 2] | 0;
  $137 = _luaK_codeABx($ls$idx3$val$idx$val, 44, 0, (HEAP32[$ls$idx3$val$idx$val + 32 >> 2] | 0) + -1 | 0) | 0;
  HEAP32[$e + 8 >> 2] = -1;
  HEAP32[$e + 12 >> 2] = -1;
  HEAP32[$e >> 2] = 12;
  HEAP32[$e + 4 >> 2] = $137;
  _luaK_exp2nextreg($ls$idx3$val$idx$val, $e);
  _close_func($ls);
  STACKTOP = sp;
  return;
 }
}

function __Z25b2CollidePolygonAndCircleP10b2ManifoldPK14b2PolygonShapeRK11b2TransformPK13b2CircleShapeS6_($manifold, $polygonA, $xfA, $circleB, $xfB) {
 $manifold = $manifold | 0;
 $polygonA = $polygonA | 0;
 $xfA = $xfA | 0;
 $circleB = $circleB | 0;
 $xfB = $xfB | 0;
 var $0 = 0, $1 = 0, $100 = 0, $104 = 0, $109 = 0, $110 = 0, $115 = 0.0, $116 = 0.0, $122 = 0.0, $123 = 0.0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0, $141 = 0.0, $144 = 0.0, $148 = 0, $152 = 0, $157 = 0, $158 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0, $185 = 0.0, $188 = 0.0, $192 = 0, $196 = 0, $201 = 0, $202 = 0, $209 = 0.0, $21 = 0.0, $210 = 0.0, $213 = 0, $223 = 0, $228 = 0, $229 = 0, $234 = 0.0, $235 = 0.0, $236 = 0, $24 = 0.0, $240 = 0, $245 = 0, $246 = 0, $26 = 0.0, $29 = 0.0, $3 = 0.0, $31 = 0.0, $34 = 0.0, $39 = 0.0, $4 = 0.0, $41 = 0, $55 = 0.0, $57 = 0, $60 = 0, $63 = 0, $65 = 0, $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $72 = 0, $74 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $83 = 0, $88 = 0, $89 = 0, $9 = 0.0, $98 = 0.0, $99 = 0.0, $i$030 = 0, $normalIndex$0$lcssa = 0, $normalIndex$032 = 0, $separation$0$lcssa = 0, $separation$031 = 0.0, label = 0;
 $0 = $manifold + 60 | 0;
 HEAP32[$0 >> 2] = 0;
 $1 = $circleB + 12 | 0;
 $3 = +HEAPF32[$xfB + 12 >> 2];
 $4 = +HEAPF32[$1 >> 2];
 $7 = +HEAPF32[$xfB + 8 >> 2];
 $9 = +HEAPF32[$circleB + 16 >> 2];
 $21 = +HEAPF32[$xfB >> 2] + ($3 * $4 - $7 * $9) - +HEAPF32[$xfA >> 2];
 $24 = $4 * $7 + $3 * $9 + +HEAPF32[$xfB + 4 >> 2] - +HEAPF32[$xfA + 4 >> 2];
 $26 = +HEAPF32[$xfA + 12 >> 2];
 $29 = +HEAPF32[$xfA + 8 >> 2];
 $31 = $21 * $26 + $24 * $29;
 $34 = $26 * $24 - $21 * $29;
 $39 = +HEAPF32[$polygonA + 8 >> 2] + +HEAPF32[$circleB + 8 >> 2];
 $41 = HEAP32[$polygonA + 148 >> 2] | 0;
 do if (($41 | 0) > 0) {
  $i$030 = 0;
  $normalIndex$032 = 0;
  $separation$031 = -3402823466385288598117041.0e14;
  while (1) {
   $55 = ($31 - +HEAPF32[$polygonA + ($i$030 << 3) + 20 >> 2]) * +HEAPF32[$polygonA + ($i$030 << 3) + 84 >> 2] + ($34 - +HEAPF32[$polygonA + ($i$030 << 3) + 24 >> 2]) * +HEAPF32[$polygonA + ($i$030 << 3) + 88 >> 2];
   if ($55 > $39) {
    label = 19;
    break;
   }
   $57 = $55 > $separation$031;
   $separation$031 = $57 ? $55 : $separation$031;
   $normalIndex$032 = $57 ? $i$030 : $normalIndex$032;
   $i$030 = $i$030 + 1 | 0;
   if (($i$030 | 0) >= ($41 | 0)) {
    label = 4;
    break;
   }
  }
  if ((label | 0) == 4) {
   $normalIndex$0$lcssa = $normalIndex$032;
   $separation$0$lcssa = $separation$031 < 1.1920928955078125e-07;
   break;
  } else if ((label | 0) == 19) return;
 } else {
  $normalIndex$0$lcssa = 0;
  $separation$0$lcssa = 1;
 } while (0);
 $60 = $normalIndex$0$lcssa + 1 | 0;
 $63 = $polygonA + ($normalIndex$0$lcssa << 3) + 20 | 0;
 $65 = HEAP32[$63 >> 2] | 0;
 $68 = HEAP32[$63 + 4 >> 2] | 0;
 $69 = (HEAP32[tempDoublePtr >> 2] = $65, +HEAPF32[tempDoublePtr >> 2]);
 $70 = (HEAP32[tempDoublePtr >> 2] = $68, +HEAPF32[tempDoublePtr >> 2]);
 $72 = $polygonA + ((($60 | 0) < ($41 | 0) ? $60 : 0) << 3) + 20 | 0;
 $74 = HEAP32[$72 >> 2] | 0;
 $77 = HEAP32[$72 + 4 >> 2] | 0;
 $78 = (HEAP32[tempDoublePtr >> 2] = $74, +HEAPF32[tempDoublePtr >> 2]);
 $79 = (HEAP32[tempDoublePtr >> 2] = $77, +HEAPF32[tempDoublePtr >> 2]);
 if ($separation$0$lcssa) {
  HEAP32[$0 >> 2] = 1;
  HEAP32[$manifold + 56 >> 2] = 1;
  $83 = $polygonA + ($normalIndex$0$lcssa << 3) + 84 | 0;
  $88 = HEAP32[$83 + 4 >> 2] | 0;
  $89 = $manifold + 40 | 0;
  HEAP32[$89 >> 2] = HEAP32[$83 >> 2];
  HEAP32[$89 + 4 >> 2] = $88;
  $98 = +(($69 + $78) * .5);
  $99 = +(($70 + $79) * .5);
  $100 = $manifold + 48 | 0;
  HEAPF32[$100 >> 2] = $98;
  HEAPF32[$100 + 4 >> 2] = $99;
  $104 = $1;
  $109 = HEAP32[$104 + 4 >> 2] | 0;
  $110 = $manifold;
  HEAP32[$110 >> 2] = HEAP32[$104 >> 2];
  HEAP32[$110 + 4 >> 2] = $109;
  HEAP32[$manifold + 16 >> 2] = 0;
  return;
 }
 $115 = $31 - $69;
 $116 = $34 - $70;
 $122 = $31 - $78;
 $123 = $34 - $79;
 if ($115 * ($78 - $69) + $116 * ($79 - $70) <= 0.0) {
  if ($115 * $115 + $116 * $116 > $39 * $39) return;
  HEAP32[$0 >> 2] = 1;
  HEAP32[$manifold + 56 >> 2] = 1;
  $131 = $manifold + 40 | 0;
  $132 = +$115;
  $133 = +$116;
  $134 = $131;
  HEAPF32[$134 >> 2] = $132;
  HEAPF32[$134 + 4 >> 2] = $133;
  $141 = +Math_sqrt(+($115 * $115 + $116 * $116));
  if (!($141 < 1.1920928955078125e-07)) {
   $144 = 1.0 / $141;
   HEAPF32[$131 >> 2] = $115 * $144;
   HEAPF32[$manifold + 44 >> 2] = $116 * $144;
  }
  $148 = $manifold + 48 | 0;
  HEAP32[$148 >> 2] = $65;
  HEAP32[$148 + 4 >> 2] = $68;
  $152 = $1;
  $157 = HEAP32[$152 + 4 >> 2] | 0;
  $158 = $manifold;
  HEAP32[$158 >> 2] = HEAP32[$152 >> 2];
  HEAP32[$158 + 4 >> 2] = $157;
  HEAP32[$manifold + 16 >> 2] = 0;
  return;
 }
 if (!($122 * ($69 - $78) + $123 * ($70 - $79) <= 0.0)) {
  $209 = ($69 + $78) * .5;
  $210 = ($70 + $79) * .5;
  $213 = $polygonA + ($normalIndex$0$lcssa << 3) + 84 | 0;
  if (($31 - $209) * +HEAPF32[$213 >> 2] + ($34 - $210) * +HEAPF32[$polygonA + ($normalIndex$0$lcssa << 3) + 88 >> 2] > $39) return;
  HEAP32[$0 >> 2] = 1;
  HEAP32[$manifold + 56 >> 2] = 1;
  $223 = $213;
  $228 = HEAP32[$223 + 4 >> 2] | 0;
  $229 = $manifold + 40 | 0;
  HEAP32[$229 >> 2] = HEAP32[$223 >> 2];
  HEAP32[$229 + 4 >> 2] = $228;
  $234 = +$209;
  $235 = +$210;
  $236 = $manifold + 48 | 0;
  HEAPF32[$236 >> 2] = $234;
  HEAPF32[$236 + 4 >> 2] = $235;
  $240 = $1;
  $245 = HEAP32[$240 + 4 >> 2] | 0;
  $246 = $manifold;
  HEAP32[$246 >> 2] = HEAP32[$240 >> 2];
  HEAP32[$246 + 4 >> 2] = $245;
  HEAP32[$manifold + 16 >> 2] = 0;
  return;
 }
 if ($122 * $122 + $123 * $123 > $39 * $39) return;
 HEAP32[$0 >> 2] = 1;
 HEAP32[$manifold + 56 >> 2] = 1;
 $175 = $manifold + 40 | 0;
 $176 = +$122;
 $177 = +$123;
 $178 = $175;
 HEAPF32[$178 >> 2] = $176;
 HEAPF32[$178 + 4 >> 2] = $177;
 $185 = +Math_sqrt(+($122 * $122 + $123 * $123));
 if (!($185 < 1.1920928955078125e-07)) {
  $188 = 1.0 / $185;
  HEAPF32[$175 >> 2] = $122 * $188;
  HEAPF32[$manifold + 44 >> 2] = $123 * $188;
 }
 $192 = $manifold + 48 | 0;
 HEAP32[$192 >> 2] = $74;
 HEAP32[$192 + 4 >> 2] = $77;
 $196 = $1;
 $201 = HEAP32[$196 + 4 >> 2] | 0;
 $202 = $manifold;
 HEAP32[$202 >> 2] = HEAP32[$196 >> 2];
 HEAP32[$202 + 4 >> 2] = $201;
 HEAP32[$manifold + 16 >> 2] = 0;
 return;
}

function __ZN15b2ContactSolver27SolveTOIPositionConstraintsEii($this, $toiIndexA, $toiIndexB) {
 $this = $this | 0;
 $toiIndexA = $toiIndexA | 0;
 $toiIndexB = $toiIndexB | 0;
 var $$lcssa = 0.0, $$lcssa19 = 0.0, $$lcssa20 = 0.0, $$lcssa21 = 0.0, $0 = 0, $10 = 0, $101 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $11 = 0, $110 = 0, $116 = 0.0, $117 = 0.0, $118 = 0, $12 = 0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $130 = 0.0, $134 = 0.0, $136 = 0.0, $139 = 0.0, $14 = 0, $142 = 0.0, $148 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $16 = 0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0, $184 = 0, $187 = 0.0, $188 = 0.0, $189 = 0, $198 = 0, $24 = 0.0, $25 = 0.0, $27 = 0, $3 = 0, $33 = 0.0, $34 = 0.0, $36 = 0, $4 = 0, $49 = 0, $5 = 0, $51 = 0, $57 = 0.0, $58 = 0.0, $6 = 0, $60 = 0.0, $62 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $71 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $8 = 0, $85 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $aA$0$lcssa = 0.0, $aA$022 = 0.0, $aB$0$lcssa = 0.0, $aB$023 = 0.0, $i$032 = 0, $iA$0 = 0.0, $iB$0 = 0.0, $j$024 = 0, $mA$0 = 0.0, $mB$0 = 0.0, $minSeparation$0$lcssa = 0.0, $minSeparation$033 = 0.0, $minSeparation$1$lcssa = 0.0, $minSeparation$125 = 0.0, $psm = 0, $xfA = 0, $xfB = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $xfA = sp + 40 | 0;
 $xfB = sp + 24 | 0;
 $psm = sp;
 $0 = $this + 48 | 0;
 if ((HEAP32[$0 >> 2] | 0) <= 0) {
  $minSeparation$0$lcssa = 0.0;
  $198 = $minSeparation$0$lcssa >= -.007499999832361937;
  STACKTOP = sp;
  return $198 | 0;
 }
 $3 = $this + 36 | 0;
 $4 = $this + 24 | 0;
 $5 = $xfA + 8 | 0;
 $6 = $xfA + 12 | 0;
 $7 = $xfB + 8 | 0;
 $8 = $xfB + 12 | 0;
 $9 = $psm + 8 | 0;
 $10 = $psm + 16 | 0;
 $i$032 = 0;
 $minSeparation$033 = 0.0;
 while (1) {
  $11 = HEAP32[$3 >> 2] | 0;
  $12 = $11 + ($i$032 * 88 | 0) | 0;
  $14 = HEAP32[$11 + ($i$032 * 88 | 0) + 32 >> 2] | 0;
  $16 = HEAP32[$11 + ($i$032 * 88 | 0) + 36 >> 2] | 0;
  $18 = $11 + ($i$032 * 88 | 0) + 48 | 0;
  $24 = +HEAPF32[$18 >> 2];
  $25 = +HEAPF32[$18 + 4 >> 2];
  $27 = $11 + ($i$032 * 88 | 0) + 56 | 0;
  $33 = +HEAPF32[$27 >> 2];
  $34 = +HEAPF32[$27 + 4 >> 2];
  $36 = HEAP32[$11 + ($i$032 * 88 | 0) + 84 >> 2] | 0;
  if (($14 | 0) == ($toiIndexA | 0) | ($14 | 0) == ($toiIndexB | 0)) {
   $iA$0 = +HEAPF32[$11 + ($i$032 * 88 | 0) + 64 >> 2];
   $mA$0 = +HEAPF32[$11 + ($i$032 * 88 | 0) + 40 >> 2];
  } else {
   $iA$0 = 0.0;
   $mA$0 = 0.0;
  }
  if (($16 | 0) == ($toiIndexA | 0) | ($16 | 0) == ($toiIndexB | 0)) {
   $iB$0 = +HEAPF32[$11 + ($i$032 * 88 | 0) + 68 >> 2];
   $mB$0 = +HEAPF32[$11 + ($i$032 * 88 | 0) + 44 >> 2];
  } else {
   $iB$0 = 0.0;
   $mB$0 = 0.0;
  }
  $49 = HEAP32[$4 >> 2] | 0;
  $51 = $49 + ($14 * 12 | 0) | 0;
  $57 = +HEAPF32[$51 >> 2];
  $58 = +HEAPF32[$51 + 4 >> 2];
  $60 = +HEAPF32[$49 + ($14 * 12 | 0) + 8 >> 2];
  $62 = $49 + ($16 * 12 | 0) | 0;
  $68 = +HEAPF32[$62 >> 2];
  $69 = +HEAPF32[$62 + 4 >> 2];
  $71 = +HEAPF32[$49 + ($16 * 12 | 0) + 8 >> 2];
  if (($36 | 0) > 0) {
   $73 = $mA$0 + $mB$0;
   $101 = $68;
   $103 = $69;
   $85 = $57;
   $87 = $58;
   $aA$022 = $60;
   $aB$023 = $71;
   $j$024 = 0;
   $minSeparation$125 = $minSeparation$033;
   do {
    $74 = +Math_sin(+$aA$022);
    HEAPF32[$5 >> 2] = $74;
    $75 = +Math_cos(+$aA$022);
    HEAPF32[$6 >> 2] = $75;
    $76 = +Math_sin(+$aB$023);
    HEAPF32[$7 >> 2] = $76;
    $77 = +Math_cos(+$aB$023);
    HEAPF32[$8 >> 2] = $77;
    $88 = +($85 - ($24 * $75 - $25 * $74));
    $89 = +($87 - ($25 * $75 + $24 * $74));
    $90 = $xfA;
    HEAPF32[$90 >> 2] = $88;
    HEAPF32[$90 + 4 >> 2] = $89;
    $104 = +($101 - ($33 * $77 - $34 * $76));
    $105 = +($103 - ($34 * $77 + $33 * $76));
    $106 = $xfB;
    HEAPF32[$106 >> 2] = $104;
    HEAPF32[$106 + 4 >> 2] = $105;
    __ZN24b2PositionSolverManifold10InitializeEP27b2ContactPositionConstraintRK11b2TransformS4_i($psm, $12, $xfA, $xfB, $j$024);
    $110 = $psm;
    $116 = +HEAPF32[$110 >> 2];
    $117 = +HEAPF32[$110 + 4 >> 2];
    $118 = $9;
    $124 = +HEAPF32[$118 >> 2];
    $125 = +HEAPF32[$118 + 4 >> 2];
    $126 = +HEAPF32[$10 >> 2];
    $127 = $124 - $85;
    $128 = $125 - $87;
    $129 = $124 - $101;
    $130 = $125 - $103;
    $minSeparation$125 = $minSeparation$125 < $126 ? $minSeparation$125 : $126;
    $134 = ($126 + .004999999888241291) * .75;
    $136 = $134 < 0.0 ? $134 : 0.0;
    $139 = $117 * $127 - $116 * $128;
    $142 = $117 * $129 - $116 * $130;
    $148 = $142 * ($iB$0 * $142) + ($73 + $139 * ($iA$0 * $139));
    if ($148 > 0.0) $155 = -($136 < -.20000000298023224 ? -.20000000298023224 : $136) / $148; else $155 = 0.0;
    $154 = $116 * $155;
    $156 = $117 * $155;
    $85 = $85 - $mA$0 * $154;
    $87 = $87 - $mA$0 * $156;
    $aA$022 = $aA$022 - $iA$0 * ($127 * $156 - $128 * $154);
    $101 = $101 + $mB$0 * $154;
    $103 = $103 + $mB$0 * $156;
    $aB$023 = $aB$023 + $iB$0 * ($129 * $156 - $130 * $154);
    $j$024 = $j$024 + 1 | 0;
   } while (($j$024 | 0) != ($36 | 0));
   $$lcssa = $87;
   $$lcssa19 = $85;
   $$lcssa20 = $103;
   $$lcssa21 = $101;
   $177 = HEAP32[$4 >> 2] | 0;
   $aA$0$lcssa = $aA$022;
   $aB$0$lcssa = $aB$023;
   $minSeparation$1$lcssa = $minSeparation$125;
  } else {
   $$lcssa = $58;
   $$lcssa19 = $57;
   $$lcssa20 = $69;
   $$lcssa21 = $68;
   $177 = $49;
   $aA$0$lcssa = $60;
   $aB$0$lcssa = $71;
   $minSeparation$1$lcssa = $minSeparation$033;
  }
  $178 = +$$lcssa19;
  $179 = +$$lcssa;
  $180 = $177 + ($14 * 12 | 0) | 0;
  HEAPF32[$180 >> 2] = $178;
  HEAPF32[$180 + 4 >> 2] = $179;
  $184 = HEAP32[$4 >> 2] | 0;
  HEAPF32[$184 + ($14 * 12 | 0) + 8 >> 2] = $aA$0$lcssa;
  $187 = +$$lcssa21;
  $188 = +$$lcssa20;
  $189 = $184 + ($16 * 12 | 0) | 0;
  HEAPF32[$189 >> 2] = $187;
  HEAPF32[$189 + 4 >> 2] = $188;
  HEAPF32[(HEAP32[$4 >> 2] | 0) + ($16 * 12 | 0) + 8 >> 2] = $aB$0$lcssa;
  $i$032 = $i$032 + 1 | 0;
  if (($i$032 | 0) >= (HEAP32[$0 >> 2] | 0)) {
   $minSeparation$0$lcssa = $minSeparation$1$lcssa;
   break;
  } else $minSeparation$033 = $minSeparation$1$lcssa;
 }
 $198 = $minSeparation$0$lcssa >= -.007499999832361937;
 STACKTOP = sp;
 return $198 | 0;
}

function _try_realloc_chunk($p, $nb) {
 $p = $p | 0;
 $nb = $nb | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $101 = 0, $103 = 0, $106 = 0, $109 = 0, $110 = 0, $112 = 0, $113 = 0, $115 = 0, $116 = 0, $118 = 0, $119 = 0, $124 = 0, $125 = 0, $134 = 0, $139 = 0, $143 = 0, $149 = 0, $159 = 0, $168 = 0, $2 = 0, $20 = 0, $3 = 0, $33 = 0, $35 = 0, $4 = 0, $45 = 0, $47 = 0, $5 = 0, $56 = 0, $62 = 0, $68 = 0, $7 = 0, $70 = 0, $71 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $91 = 0, $96 = 0, $98 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $newp$0 = 0, $storemerge = 0, $storemerge21 = 0;
 $0 = $p + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $1 & -8;
 $3 = $p + $2 | 0;
 $4 = HEAP32[26670] | 0;
 $5 = $1 & 3;
 if (!(($5 | 0) != 1 & $p >>> 0 >= $4 >>> 0 & $p >>> 0 < $3 >>> 0)) _abort();
 $7 = $p + ($2 | 4) | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 if (!($8 & 1)) _abort();
 if (!$5) {
  if ($nb >>> 0 < 256) {
   $newp$0 = 0;
   return $newp$0 | 0;
  }
  if ($2 >>> 0 >= ($nb + 4 | 0) >>> 0) if (($2 - $nb | 0) >>> 0 <= HEAP32[26786] << 1 >>> 0) {
   $newp$0 = $p;
   return $newp$0 | 0;
  }
  $newp$0 = 0;
  return $newp$0 | 0;
 }
 if ($2 >>> 0 >= $nb >>> 0) {
  $20 = $2 - $nb | 0;
  if ($20 >>> 0 <= 15) {
   $newp$0 = $p;
   return $newp$0 | 0;
  }
  HEAP32[$0 >> 2] = $1 & 1 | $nb | 2;
  HEAP32[$p + ($nb + 4) >> 2] = $20 | 3;
  HEAP32[$7 >> 2] = HEAP32[$7 >> 2] | 1;
  _dispose_chunk($p + $nb | 0, $20);
  $newp$0 = $p;
  return $newp$0 | 0;
 }
 if (($3 | 0) == (HEAP32[26672] | 0)) {
  $33 = (HEAP32[26669] | 0) + $2 | 0;
  if ($33 >>> 0 <= $nb >>> 0) {
   $newp$0 = 0;
   return $newp$0 | 0;
  }
  $35 = $33 - $nb | 0;
  HEAP32[$0 >> 2] = $1 & 1 | $nb | 2;
  HEAP32[$p + ($nb + 4) >> 2] = $35 | 1;
  HEAP32[26672] = $p + $nb;
  HEAP32[26669] = $35;
  $newp$0 = $p;
  return $newp$0 | 0;
 }
 if (($3 | 0) == (HEAP32[26671] | 0)) {
  $45 = (HEAP32[26668] | 0) + $2 | 0;
  if ($45 >>> 0 < $nb >>> 0) {
   $newp$0 = 0;
   return $newp$0 | 0;
  }
  $47 = $45 - $nb | 0;
  if ($47 >>> 0 > 15) {
   HEAP32[$0 >> 2] = $1 & 1 | $nb | 2;
   HEAP32[$p + ($nb + 4) >> 2] = $47 | 1;
   HEAP32[$p + $45 >> 2] = $47;
   $56 = $p + ($45 + 4) | 0;
   HEAP32[$56 >> 2] = HEAP32[$56 >> 2] & -2;
   $storemerge = $p + $nb | 0;
   $storemerge21 = $47;
  } else {
   HEAP32[$0 >> 2] = $1 & 1 | $45 | 2;
   $62 = $p + ($45 + 4) | 0;
   HEAP32[$62 >> 2] = HEAP32[$62 >> 2] | 1;
   $storemerge = 0;
   $storemerge21 = 0;
  }
  HEAP32[26668] = $storemerge21;
  HEAP32[26671] = $storemerge;
  $newp$0 = $p;
  return $newp$0 | 0;
 }
 if ($8 & 2) {
  $newp$0 = 0;
  return $newp$0 | 0;
 }
 $68 = ($8 & -8) + $2 | 0;
 if ($68 >>> 0 < $nb >>> 0) {
  $newp$0 = 0;
  return $newp$0 | 0;
 }
 $70 = $68 - $nb | 0;
 $71 = $8 >>> 3;
 do if ($8 >>> 0 < 256) {
  $74 = HEAP32[$p + ($2 + 8) >> 2] | 0;
  $76 = HEAP32[$p + ($2 + 12) >> 2] | 0;
  $78 = 106704 + ($71 << 1 << 2) | 0;
  if (($74 | 0) != ($78 | 0)) {
   if ($74 >>> 0 < $4 >>> 0) _abort();
   if ((HEAP32[$74 + 12 >> 2] | 0) != ($3 | 0)) _abort();
  }
  if (($76 | 0) == ($74 | 0)) {
   HEAP32[26666] = HEAP32[26666] & ~(1 << $71);
   break;
  }
  if (($76 | 0) == ($78 | 0)) $$pre$phiZ2D = $76 + 8 | 0; else {
   if ($76 >>> 0 < $4 >>> 0) _abort();
   $91 = $76 + 8 | 0;
   if ((HEAP32[$91 >> 2] | 0) == ($3 | 0)) $$pre$phiZ2D = $91; else _abort();
  }
  HEAP32[$74 + 12 >> 2] = $76;
  HEAP32[$$pre$phiZ2D >> 2] = $74;
 } else {
  $96 = HEAP32[$p + ($2 + 24) >> 2] | 0;
  $98 = HEAP32[$p + ($2 + 12) >> 2] | 0;
  do if (($98 | 0) == ($3 | 0)) {
   $109 = $p + ($2 + 20) | 0;
   $110 = HEAP32[$109 >> 2] | 0;
   if (!$110) {
    $112 = $p + ($2 + 16) | 0;
    $113 = HEAP32[$112 >> 2] | 0;
    if (!$113) {
     $R$1 = 0;
     break;
    } else {
     $R$0 = $113;
     $RP$0 = $112;
    }
   } else {
    $R$0 = $110;
    $RP$0 = $109;
   }
   while (1) {
    $115 = $R$0 + 20 | 0;
    $116 = HEAP32[$115 >> 2] | 0;
    if ($116) {
     $R$0 = $116;
     $RP$0 = $115;
     continue;
    }
    $118 = $R$0 + 16 | 0;
    $119 = HEAP32[$118 >> 2] | 0;
    if (!$119) {
     $R$0$lcssa = $R$0;
     $RP$0$lcssa = $RP$0;
     break;
    } else {
     $R$0 = $119;
     $RP$0 = $118;
    }
   }
   if ($RP$0$lcssa >>> 0 < $4 >>> 0) _abort(); else {
    HEAP32[$RP$0$lcssa >> 2] = 0;
    $R$1 = $R$0$lcssa;
    break;
   }
  } else {
   $101 = HEAP32[$p + ($2 + 8) >> 2] | 0;
   if ($101 >>> 0 < $4 >>> 0) _abort();
   $103 = $101 + 12 | 0;
   if ((HEAP32[$103 >> 2] | 0) != ($3 | 0)) _abort();
   $106 = $98 + 8 | 0;
   if ((HEAP32[$106 >> 2] | 0) == ($3 | 0)) {
    HEAP32[$103 >> 2] = $98;
    HEAP32[$106 >> 2] = $101;
    $R$1 = $98;
    break;
   } else _abort();
  } while (0);
  if ($96) {
   $124 = HEAP32[$p + ($2 + 28) >> 2] | 0;
   $125 = 106968 + ($124 << 2) | 0;
   if (($3 | 0) == (HEAP32[$125 >> 2] | 0)) {
    HEAP32[$125 >> 2] = $R$1;
    if (!$R$1) {
     HEAP32[26667] = HEAP32[26667] & ~(1 << $124);
     break;
    }
   } else {
    if ($96 >>> 0 < (HEAP32[26670] | 0) >>> 0) _abort();
    $134 = $96 + 16 | 0;
    if ((HEAP32[$134 >> 2] | 0) == ($3 | 0)) HEAP32[$134 >> 2] = $R$1; else HEAP32[$96 + 20 >> 2] = $R$1;
    if (!$R$1) break;
   }
   $139 = HEAP32[26670] | 0;
   if ($R$1 >>> 0 < $139 >>> 0) _abort();
   HEAP32[$R$1 + 24 >> 2] = $96;
   $143 = HEAP32[$p + ($2 + 16) >> 2] | 0;
   do if ($143) if ($143 >>> 0 < $139 >>> 0) _abort(); else {
    HEAP32[$R$1 + 16 >> 2] = $143;
    HEAP32[$143 + 24 >> 2] = $R$1;
    break;
   } while (0);
   $149 = HEAP32[$p + ($2 + 20) >> 2] | 0;
   if ($149) if ($149 >>> 0 < (HEAP32[26670] | 0) >>> 0) _abort(); else {
    HEAP32[$R$1 + 20 >> 2] = $149;
    HEAP32[$149 + 24 >> 2] = $R$1;
    break;
   }
  }
 } while (0);
 if ($70 >>> 0 < 16) {
  HEAP32[$0 >> 2] = $68 | $1 & 1 | 2;
  $159 = $p + ($68 | 4) | 0;
  HEAP32[$159 >> 2] = HEAP32[$159 >> 2] | 1;
  $newp$0 = $p;
  return $newp$0 | 0;
 } else {
  HEAP32[$0 >> 2] = $1 & 1 | $nb | 2;
  HEAP32[$p + ($nb + 4) >> 2] = $70 | 3;
  $168 = $p + ($68 | 4) | 0;
  HEAP32[$168 >> 2] = HEAP32[$168 >> 2] | 1;
  _dispose_chunk($p + $nb | 0, $70);
  $newp$0 = $p;
  return $newp$0 | 0;
 }
 return 0;
}

function _subexpr($ls, $v, $limit) {
 $ls = $ls | 0;
 $v = $v | 0;
 $limit = $limit | 0;
 var $$0$i2$ph = 0, $0 = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $19 = 0, $2 = 0, $29 = 0, $34 = 0, $4 = 0, $51 = 0, $58 = 0, $63 = 0, $7 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $ls$idx = 0, $ls$idx$val = 0, $ls$idx1 = 0, $op$0$lcssa = 0, $op$0$ph$ph = 0, $op$04 = 0, $v2 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0, $op$04$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $v2 = sp + 24 | 0;
 $ls$idx = $ls + 28 | 0;
 $ls$idx$val = HEAP32[$ls$idx >> 2] | 0;
 $ls$idx1 = $ls + 32 | 0;
 $0 = (HEAP32[$ls$idx1 >> 2] | 0) + 106 | 0;
 $2 = (HEAP16[$0 >> 1] | 0) + 1 << 16 >> 16;
 HEAP16[$0 >> 1] = $2;
 if (($2 & 65535) > 200) {
  $4 = $ls$idx$val + 8 | 0;
  $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 32 >> 2] | 0;
  $10 = HEAP32[(HEAP32[$ls$idx$val >> 2] | 0) + 36 >> 2] | 0;
  if (!$10) {
   $13 = 60600;
   HEAP32[$vararg_buffer1 >> 2] = 60416;
   $vararg_ptr4 = $vararg_buffer1 + 4 | 0;
   HEAP32[$vararg_ptr4 >> 2] = 200;
   $vararg_ptr5 = $vararg_buffer1 + 8 | 0;
   HEAP32[$vararg_ptr5 >> 2] = $13;
   $14 = _luaO_pushfstring($7, 60640, $vararg_buffer1) | 0;
   $15 = HEAP32[$4 >> 2] | 0;
   _luaX_syntaxerror($15, $14);
  }
  HEAP32[$vararg_buffer >> 2] = $10;
  $13 = _luaO_pushfstring($7, 60616, $vararg_buffer) | 0;
  HEAP32[$vararg_buffer1 >> 2] = 60416;
  $vararg_ptr4 = $vararg_buffer1 + 4 | 0;
  HEAP32[$vararg_ptr4 >> 2] = 200;
  $vararg_ptr5 = $vararg_buffer1 + 8 | 0;
  HEAP32[$vararg_ptr5 >> 2] = $13;
  $14 = _luaO_pushfstring($7, 60640, $vararg_buffer1) | 0;
  $15 = HEAP32[$4 >> 2] | 0;
  _luaX_syntaxerror($15, $14);
 }
 $16 = $ls + 12 | 0;
 L8 : do switch (HEAP32[$16 >> 2] | 0) {
 case 271:
  {
   $$0$i2$ph = 2;
   label = 9;
   break;
  }
 case 123:
  {
   _constructor($ls, $v);
   break;
  }
 case 126:
  {
   $$0$i2$ph = 1;
   label = 9;
   break;
  }
 case 263:
  {
   HEAP32[$v + 8 >> 2] = -1;
   HEAP32[$v + 12 >> 2] = -1;
   HEAP32[$v >> 2] = 3;
   HEAP32[$v + 4 >> 2] = 0;
   label = 22;
   break;
  }
 case 281:
  {
   if (!(HEAP8[(HEAP32[$ls$idx$val >> 2] | 0) + 7 >> 0] | 0)) _luaX_syntaxerror($ls, 60480); else {
    $51 = _luaK_codeABC($ls$idx$val, 45, 0, 1, 0) | 0;
    HEAP32[$v + 8 >> 2] = -1;
    HEAP32[$v + 12 >> 2] = -1;
    HEAP32[$v >> 2] = 14;
    HEAP32[$v + 4 >> 2] = $51;
    label = 22;
    break L8;
   }
   break;
  }
 case 293:
  {
   $34 = _luaK_stringK($ls$idx$val, HEAP32[$ls + 16 >> 2] | 0) | 0;
   HEAP32[$v + 8 >> 2] = -1;
   HEAP32[$v + 12 >> 2] = -1;
   HEAP32[$v >> 2] = 4;
   HEAP32[$v + 4 >> 2] = $34;
   label = 22;
   break;
  }
 case 276:
  {
   HEAP32[$v + 8 >> 2] = -1;
   HEAP32[$v + 12 >> 2] = -1;
   HEAP32[$v >> 2] = 2;
   HEAP32[$v + 4 >> 2] = 0;
   label = 22;
   break;
  }
 case 291:
  {
   HEAP32[$v + 8 >> 2] = -1;
   HEAP32[$v + 12 >> 2] = -1;
   HEAP32[$v >> 2] = 6;
   $29 = $v + 4 | 0;
   HEAP32[$29 >> 2] = 0;
   HEAP32[$29 >> 2] = HEAP32[$ls + 16 >> 2];
   label = 22;
   break;
  }
 case 45:
  {
   $$0$i2$ph = 0;
   label = 9;
   break;
  }
 case 290:
  {
   HEAP32[$v + 8 >> 2] = -1;
   HEAP32[$v + 12 >> 2] = -1;
   HEAP32[$v >> 2] = 5;
   HEAP32[$v + 4 >> 2] = 0;
   HEAPF32[$v + 4 >> 2] = +HEAPF32[$ls + 16 >> 2];
   label = 22;
   break;
  }
 case 265:
  {
   _luaX_next($ls);
   _body($ls, $v, 0, HEAP32[$ls + 4 >> 2] | 0);
   break;
  }
 case 35:
  {
   $$0$i2$ph = 3;
   label = 9;
   break;
  }
 case 270:
  {
   HEAP32[$v + 8 >> 2] = -1;
   HEAP32[$v + 12 >> 2] = -1;
   HEAP32[$v >> 2] = 1;
   HEAP32[$v + 4 >> 2] = 0;
   label = 22;
   break;
  }
 default:
  _suffixedexp($ls, $v);
 } while (0);
 if ((label | 0) == 9) {
  $19 = HEAP32[$ls + 4 >> 2] | 0;
  _luaX_next($ls);
  _subexpr($ls, $v, 12) | 0;
  _luaK_prefix(HEAP32[$ls$idx >> 2] | 0, $$0$i2$ph, $v, $19);
 } else if ((label | 0) == 22) _luaX_next($ls);
 do switch (HEAP32[$16 >> 2] | 0) {
 case 60:
  {
   $op$0$ph$ph = 14;
   break;
  }
 case 284:
  {
   $op$0$ph$ph = 15;
   break;
  }
 case 45:
  {
   $op$0$ph$ph = 1;
   break;
  }
 case 42:
  {
   $op$0$ph$ph = 2;
   break;
  }
 case 126:
  {
   $op$0$ph$ph = 9;
   break;
  }
 case 286:
  {
   $op$0$ph$ph = 10;
   break;
  }
 case 62:
  {
   $op$0$ph$ph = 17;
   break;
  }
 case 283:
  {
   $op$0$ph$ph = 18;
   break;
  }
 case 287:
  {
   $op$0$ph$ph = 11;
   break;
  }
 case 280:
  {
   $op$0$ph$ph = 12;
   break;
  }
 case 43:
  {
   $op$0$ph$ph = 0;
   break;
  }
 case 257:
  {
   $op$0$ph$ph = 19;
   break;
  }
 case 272:
  {
   $op$0$ph$ph = 20;
   break;
  }
 case 38:
  {
   $op$0$ph$ph = 7;
   break;
  }
 case 124:
  {
   $op$0$ph$ph = 8;
   break;
  }
 case 285:
  {
   $op$0$ph$ph = 16;
   break;
  }
 case 282:
  {
   $op$0$ph$ph = 13;
   break;
  }
 case 37:
  {
   $op$0$ph$ph = 3;
   break;
  }
 case 94:
  {
   $op$0$ph$ph = 4;
   break;
  }
 case 47:
  {
   $op$0$ph$ph = 5;
   break;
  }
 case 279:
  {
   $op$0$ph$ph = 6;
   break;
  }
 default:
  {
   $op$0$lcssa = 21;
   $71 = HEAP32[$ls$idx1 >> 2] | 0;
   $72 = $71 + 106 | 0;
   $73 = HEAP16[$72 >> 1] | 0;
   $74 = $73 + -1 << 16 >> 16;
   HEAP16[$72 >> 1] = $74;
   STACKTOP = sp;
   return $op$0$lcssa | 0;
  }
 } while (0);
 $58 = $ls + 4 | 0;
 $op$04 = $op$0$ph$ph;
 while (1) {
  if ((HEAPU8[60432 + ($op$04 << 1) >> 0] | 0) <= ($limit | 0)) {
   $op$0$lcssa = $op$04;
   label = 47;
   break;
  }
  $63 = HEAP32[$58 >> 2] | 0;
  _luaX_next($ls);
  _luaK_infix(HEAP32[$ls$idx >> 2] | 0, $op$04, $v);
  $op$04$looptemp = $op$04;
  $op$04 = _subexpr($ls, $v2, HEAPU8[60433 + ($op$04 << 1) >> 0] | 0) | 0;
  _luaK_posfix(HEAP32[$ls$idx >> 2] | 0, $op$04$looptemp, $v, $v2, $63);
  if (($op$04 | 0) == 21) {
   $op$0$lcssa = 21;
   label = 47;
   break;
  }
 }
 if ((label | 0) == 47) {
  $71 = HEAP32[$ls$idx1 >> 2] | 0;
  $72 = $71 + 106 | 0;
  $73 = HEAP16[$72 >> 1] | 0;
  $74 = $73 + -1 << 16 >> 16;
  HEAP16[$72 >> 1] = $74;
  STACKTOP = sp;
  return $op$0$lcssa | 0;
 }
 return 0;
}

function _font_get_textsize($font, $text, $w, $h, $nblinesmax) {
 $font = $font | 0;
 $text = $text | 0;
 $w = $w | 0;
 $h = $h | 0;
 $nblinesmax = $nblinesmax | 0;
 var $0 = 0, $11 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $34 = 0.0, $38 = 0.0, $39 = 0.0, $42 = 0.0, $43 = 0.0, $49 = 0, $5 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $68 = 0, $70 = 0.0, $74 = 0.0, $75 = 0.0, $78 = 0.0, $79 = 0.0, $86 = 0, $88 = 0, $91 = 0, $92 = 0, $maxx$016 = 0, $maxx$1$lcssa = 0, $maxx$111 = 0, $maxx$111$us = 0, $maxx$2 = 0, $maxx$2$us = 0, $maxx$3 = 0, $maxy$017 = 0, $maxy$1$lcssa = 0, $maxy$112 = 0, $maxy$112$us = 0, $maxy$2 = 0, $maxy$2$us = 0, $maxy$3 = 0, $nblines$015 = 0, $nblines$1$lcssa = 0, $nblines$110 = 0, $nblines$110$us = 0, $nblines$2 = 0, $nblines$2$us = 0, $q = 0, $state = 0, $storemerge = 0.0, $textend = 0, $x = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 48 | 0;
 $x = sp + 44 | 0;
 $y = sp + 40 | 0;
 $textend = sp + 36 | 0;
 $state = sp + 32 | 0;
 $q = sp;
 HEAP32[$0 >> 2] = $text;
 if (!$font) ___assert_fail(7864, 5736, 280, 5832);
 if (!$text) ___assert_fail(56352, 5736, 281, 5832);
 if (!$w) ___assert_fail(57296, 5736, 282, 5832);
 if (!$h) ___assert_fail(23200, 5736, 283, 5832);
 HEAPF32[$x >> 2] = 0.0;
 $5 = $font + 4 | 0;
 HEAPF32[$y >> 2] = +HEAPF32[$5 >> 2] * 3.0 * .25 + 0.0;
 $11 = HEAP32[$font + 8 >> 2] | 0;
 $14 = (HEAP32[$font + 12 >> 2] | 0) + $11 | 0;
 HEAP32[$textend >> 2] = $text;
 $15 = _push_parser() | 0;
 HEAP32[$state >> 2] = $15;
 if (!$15) {
  HEAPF32[$w >> 2] = 0.0;
  $storemerge = 0.0;
  HEAPF32[$h >> 2] = $storemerge;
  STACKTOP = sp;
  return;
 }
 L17 : do if (_parse($state, $0, $textend) | 0) {
  $18 = ($nblinesmax | 0) == -1;
  $19 = $font + 20 | 0;
  $20 = $q + 20 | 0;
  $21 = $q + 16 | 0;
  $maxx$016 = 0;
  $maxy$017 = 0;
  $nblines$015 = 0;
  while (1) {
   $23 = HEAP32[$0 >> 2] | 0;
   $24 = HEAP32[$textend >> 2] | 0;
   L21 : do if ($23 >>> 0 < $24 >>> 0) {
    if ($18) {
     $59 = $23;
     $91 = $24;
     $maxx$111 = $maxx$016;
     $maxy$112 = $maxy$017;
     $nblines$110 = $nblines$015;
     while (1) {
      $58 = HEAP8[$59 >> 0] | 0;
      $60 = $58 & 255;
      if ($58 << 24 >> 24 == 10) {
       HEAPF32[$x >> 2] = 0.0;
       HEAPF32[$y >> 2] = +HEAPF32[$5 >> 2] + +HEAPF32[$y >> 2];
       $86 = $59;
       $88 = $91;
       $maxx$2 = $maxx$111;
       $maxy$2 = $maxy$112;
       $nblines$2 = $nblines$110 + 1 | 0;
      } else if (($60 | 0) >= ($11 | 0) & ($60 | 0) < ($14 | 0)) {
       $68 = HEAP32[$state >> 2] | 0;
       $70 = +HEAPF32[$68 + 4 >> 2];
       _stbtt_GetBakedQuad(HEAP32[$19 >> 2] | 0, $60 - $11 | 0, $x, $y, $q, +HEAPF32[$68 >> 2]);
       $74 = +HEAPF32[$20 >> 2];
       $75 = +($maxy$112 | 0);
       $78 = +HEAPF32[$21 >> 2];
       $79 = +($maxx$111 | 0);
       HEAPF32[$x >> 2] = $70 + +HEAPF32[$x >> 2];
       $86 = HEAP32[$0 >> 2] | 0;
       $88 = HEAP32[$textend >> 2] | 0;
       $maxx$2 = ~~($79 > $78 ? $79 : $78);
       $maxy$2 = ~~($75 > $74 ? $75 : $74);
       $nblines$2 = $nblines$110;
      } else {
       $86 = $59;
       $88 = $91;
       $maxx$2 = $maxx$111;
       $maxy$2 = $maxy$112;
       $nblines$2 = $nblines$110;
      }
      $59 = $86 + 1 | 0;
      HEAP32[$0 >> 2] = $59;
      if ($59 >>> 0 >= $88 >>> 0) {
       $maxx$1$lcssa = $maxx$2;
       $maxy$1$lcssa = $maxy$2;
       $nblines$1$lcssa = $nblines$2;
       break L21;
      } else {
       $91 = $88;
       $maxx$111 = $maxx$2;
       $maxy$112 = $maxy$2;
       $nblines$110 = $nblines$2;
      }
     }
    } else {
     $27 = $23;
     $92 = $24;
     $maxx$111$us = $maxx$016;
     $maxy$112$us = $maxy$017;
     $nblines$110$us = $nblines$015;
    }
    while (1) {
     $26 = HEAP8[$27 >> 0] | 0;
     $28 = $26 & 255;
     if ($26 << 24 >> 24 == 10) {
      $49 = $nblines$110$us + 1 | 0;
      if (($49 | 0) == ($nblinesmax | 0)) {
       $maxx$3 = $maxx$111$us;
       $maxy$3 = $maxy$112$us;
       break L17;
      }
      HEAPF32[$x >> 2] = 0.0;
      HEAPF32[$y >> 2] = +HEAPF32[$5 >> 2] + +HEAPF32[$y >> 2];
      $55 = $27;
      $57 = $92;
      $maxx$2$us = $maxx$111$us;
      $maxy$2$us = $maxy$112$us;
      $nblines$2$us = $49;
     } else if (($28 | 0) >= ($11 | 0) & ($28 | 0) < ($14 | 0)) {
      $32 = HEAP32[$state >> 2] | 0;
      $34 = +HEAPF32[$32 + 4 >> 2];
      _stbtt_GetBakedQuad(HEAP32[$19 >> 2] | 0, $28 - $11 | 0, $x, $y, $q, +HEAPF32[$32 >> 2]);
      $38 = +HEAPF32[$20 >> 2];
      $39 = +($maxy$112$us | 0);
      $42 = +HEAPF32[$21 >> 2];
      $43 = +($maxx$111$us | 0);
      HEAPF32[$x >> 2] = $34 + +HEAPF32[$x >> 2];
      $55 = HEAP32[$0 >> 2] | 0;
      $57 = HEAP32[$textend >> 2] | 0;
      $maxx$2$us = ~~($43 > $42 ? $43 : $42);
      $maxy$2$us = ~~($39 > $38 ? $39 : $38);
      $nblines$2$us = $nblines$110$us;
     } else {
      $55 = $27;
      $57 = $92;
      $maxx$2$us = $maxx$111$us;
      $maxy$2$us = $maxy$112$us;
      $nblines$2$us = $nblines$110$us;
     }
     $27 = $55 + 1 | 0;
     HEAP32[$0 >> 2] = $27;
     if ($27 >>> 0 >= $57 >>> 0) {
      $maxx$1$lcssa = $maxx$2$us;
      $maxy$1$lcssa = $maxy$2$us;
      $nblines$1$lcssa = $nblines$2$us;
      break;
     } else {
      $92 = $57;
      $maxx$111$us = $maxx$2$us;
      $maxy$112$us = $maxy$2$us;
      $nblines$110$us = $nblines$2$us;
     }
    }
   } else {
    $maxx$1$lcssa = $maxx$016;
    $maxy$1$lcssa = $maxy$017;
    $nblines$1$lcssa = $nblines$015;
   } while (0);
   if (_parse($state, $0, $textend) | 0) {
    $maxx$016 = $maxx$1$lcssa;
    $maxy$017 = $maxy$1$lcssa;
    $nblines$015 = $nblines$1$lcssa;
   } else {
    $maxx$3 = $maxx$1$lcssa;
    $maxy$3 = $maxy$1$lcssa;
    break;
   }
  }
 } else {
  $maxx$3 = 0;
  $maxy$3 = 0;
 } while (0);
 _pop_parser();
 HEAPF32[$w >> 2] = +($maxx$3 | 0);
 $storemerge = +($maxy$3 | 0);
 HEAPF32[$h >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}

function __ZN15b2ContactSolverC2EP18b2ContactSolverDef($this, $def) {
 $this = $this | 0;
 $def = $def | 0;
 var $1 = 0, $103 = 0, $108 = 0, $109 = 0, $119 = 0, $124 = 0, $125 = 0, $13 = 0, $131 = 0, $136 = 0, $137 = 0, $162 = 0, $167 = 0, $172 = 0, $173 = 0, $178 = 0, $2 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $31 = 0, $33 = 0, $35 = 0, $37 = 0, $39 = 0, $4 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $59 = 0, $62 = 0, $65 = 0, $68 = 0, $71 = 0, $74 = 0, $79 = 0, $8 = 0, $80 = 0, $91 = 0, $96 = 0, $97 = 0, $i$02 = 0, $j$01 = 0, label = 0;
 HEAP32[$this + 0 >> 2] = HEAP32[$def + 0 >> 2];
 HEAP32[$this + 4 >> 2] = HEAP32[$def + 4 >> 2];
 HEAP32[$this + 8 >> 2] = HEAP32[$def + 8 >> 2];
 HEAP32[$this + 12 >> 2] = HEAP32[$def + 12 >> 2];
 HEAP32[$this + 16 >> 2] = HEAP32[$def + 16 >> 2];
 HEAP32[$this + 20 >> 2] = HEAP32[$def + 20 >> 2];
 $1 = HEAP32[$def + 40 >> 2] | 0;
 $2 = $this + 32 | 0;
 HEAP32[$2 >> 2] = $1;
 $4 = HEAP32[$def + 28 >> 2] | 0;
 $5 = $this + 48 | 0;
 HEAP32[$5 >> 2] = $4;
 $8 = $this + 36 | 0;
 HEAP32[$8 >> 2] = __ZN16b2StackAllocator8AllocateEi($1, $4 * 88 | 0) | 0;
 $13 = $this + 40 | 0;
 HEAP32[$13 >> 2] = __ZN16b2StackAllocator8AllocateEi(HEAP32[$2 >> 2] | 0, (HEAP32[$5 >> 2] | 0) * 156 | 0) | 0;
 HEAP32[$this + 24 >> 2] = HEAP32[$def + 32 >> 2];
 HEAP32[$this + 28 >> 2] = HEAP32[$def + 36 >> 2];
 $21 = HEAP32[$def + 24 >> 2] | 0;
 $22 = $this + 44 | 0;
 HEAP32[$22 >> 2] = $21;
 if ((HEAP32[$5 >> 2] | 0) <= 0) return;
 $25 = $this + 20 | 0;
 $26 = $this + 8 | 0;
 $28 = $21;
 $i$02 = 0;
 while (1) {
  $29 = HEAP32[$28 + ($i$02 << 2) >> 2] | 0;
  $31 = HEAP32[$29 + 48 >> 2] | 0;
  $33 = HEAP32[$29 + 52 >> 2] | 0;
  $35 = HEAP32[$31 + 8 >> 2] | 0;
  $37 = HEAP32[$33 + 8 >> 2] | 0;
  $39 = HEAP32[$29 + 124 >> 2] | 0;
  if (($39 | 0) <= 0) {
   label = 4;
   break;
  }
  $47 = +HEAPF32[(HEAP32[$33 + 12 >> 2] | 0) + 8 >> 2];
  $48 = +HEAPF32[(HEAP32[$31 + 12 >> 2] | 0) + 8 >> 2];
  $49 = HEAP32[$13 >> 2] | 0;
  HEAPF32[$49 + ($i$02 * 156 | 0) + 136 >> 2] = +HEAPF32[$29 + 136 >> 2];
  HEAPF32[$49 + ($i$02 * 156 | 0) + 140 >> 2] = +HEAPF32[$29 + 140 >> 2];
  HEAPF32[$49 + ($i$02 * 156 | 0) + 144 >> 2] = +HEAPF32[$29 + 144 >> 2];
  $59 = $35 + 8 | 0;
  HEAP32[$49 + ($i$02 * 156 | 0) + 112 >> 2] = HEAP32[$59 >> 2];
  $62 = $37 + 8 | 0;
  HEAP32[$49 + ($i$02 * 156 | 0) + 116 >> 2] = HEAP32[$62 >> 2];
  $65 = $35 + 120 | 0;
  HEAPF32[$49 + ($i$02 * 156 | 0) + 120 >> 2] = +HEAPF32[$65 >> 2];
  $68 = $37 + 120 | 0;
  HEAPF32[$49 + ($i$02 * 156 | 0) + 124 >> 2] = +HEAPF32[$68 >> 2];
  $71 = $35 + 128 | 0;
  HEAPF32[$49 + ($i$02 * 156 | 0) + 128 >> 2] = +HEAPF32[$71 >> 2];
  $74 = $37 + 128 | 0;
  HEAPF32[$49 + ($i$02 * 156 | 0) + 132 >> 2] = +HEAPF32[$74 >> 2];
  HEAP32[$49 + ($i$02 * 156 | 0) + 152 >> 2] = $i$02;
  HEAP32[$49 + ($i$02 * 156 | 0) + 148 >> 2] = $39;
  $79 = $49 + ($i$02 * 156 | 0) + 80 | 0;
  HEAP32[$79 + 0 >> 2] = 0;
  HEAP32[$79 + 4 >> 2] = 0;
  HEAP32[$79 + 8 >> 2] = 0;
  HEAP32[$79 + 12 >> 2] = 0;
  HEAP32[$79 + 16 >> 2] = 0;
  HEAP32[$79 + 20 >> 2] = 0;
  HEAP32[$79 + 24 >> 2] = 0;
  HEAP32[$79 + 28 >> 2] = 0;
  $80 = HEAP32[$8 >> 2] | 0;
  HEAP32[$80 + ($i$02 * 88 | 0) + 32 >> 2] = HEAP32[$59 >> 2];
  HEAP32[$80 + ($i$02 * 88 | 0) + 36 >> 2] = HEAP32[$62 >> 2];
  HEAPF32[$80 + ($i$02 * 88 | 0) + 40 >> 2] = +HEAPF32[$65 >> 2];
  HEAPF32[$80 + ($i$02 * 88 | 0) + 44 >> 2] = +HEAPF32[$68 >> 2];
  $91 = $35 + 28 | 0;
  $96 = HEAP32[$91 + 4 >> 2] | 0;
  $97 = $80 + ($i$02 * 88 | 0) + 48 | 0;
  HEAP32[$97 >> 2] = HEAP32[$91 >> 2];
  HEAP32[$97 + 4 >> 2] = $96;
  $103 = $37 + 28 | 0;
  $108 = HEAP32[$103 + 4 >> 2] | 0;
  $109 = $80 + ($i$02 * 88 | 0) + 56 | 0;
  HEAP32[$109 >> 2] = HEAP32[$103 >> 2];
  HEAP32[$109 + 4 >> 2] = $108;
  HEAPF32[$80 + ($i$02 * 88 | 0) + 64 >> 2] = +HEAPF32[$71 >> 2];
  HEAPF32[$80 + ($i$02 * 88 | 0) + 68 >> 2] = +HEAPF32[$74 >> 2];
  $119 = $29 + 104 | 0;
  $124 = HEAP32[$119 + 4 >> 2] | 0;
  $125 = $80 + ($i$02 * 88 | 0) + 16 | 0;
  HEAP32[$125 >> 2] = HEAP32[$119 >> 2];
  HEAP32[$125 + 4 >> 2] = $124;
  $131 = $29 + 112 | 0;
  $136 = HEAP32[$131 + 4 >> 2] | 0;
  $137 = $80 + ($i$02 * 88 | 0) + 24 | 0;
  HEAP32[$137 >> 2] = HEAP32[$131 >> 2];
  HEAP32[$137 + 4 >> 2] = $136;
  HEAP32[$80 + ($i$02 * 88 | 0) + 84 >> 2] = $39;
  HEAPF32[$80 + ($i$02 * 88 | 0) + 76 >> 2] = $48;
  HEAPF32[$80 + ($i$02 * 88 | 0) + 80 >> 2] = $47;
  HEAP32[$80 + ($i$02 * 88 | 0) + 72 >> 2] = HEAP32[$29 + 120 >> 2];
  $j$01 = 0;
  do {
   if (!(HEAP8[$25 >> 0] | 0)) {
    HEAPF32[$49 + ($i$02 * 156 | 0) + ($j$01 * 36 | 0) + 16 >> 2] = 0.0;
    HEAPF32[$49 + ($i$02 * 156 | 0) + ($j$01 * 36 | 0) + 20 >> 2] = 0.0;
   } else {
    HEAPF32[$49 + ($i$02 * 156 | 0) + ($j$01 * 36 | 0) + 16 >> 2] = +HEAPF32[$26 >> 2] * +HEAPF32[$29 + ($j$01 * 20 | 0) + 72 >> 2];
    HEAPF32[$49 + ($i$02 * 156 | 0) + ($j$01 * 36 | 0) + 20 >> 2] = +HEAPF32[$26 >> 2] * +HEAPF32[$29 + ($j$01 * 20 | 0) + 76 >> 2];
   }
   $162 = $49 + ($i$02 * 156 | 0) + ($j$01 * 36 | 0) | 0;
   HEAPF32[$49 + ($i$02 * 156 | 0) + ($j$01 * 36 | 0) + 24 >> 2] = 0.0;
   HEAPF32[$49 + ($i$02 * 156 | 0) + ($j$01 * 36 | 0) + 28 >> 2] = 0.0;
   HEAPF32[$49 + ($i$02 * 156 | 0) + ($j$01 * 36 | 0) + 32 >> 2] = 0.0;
   HEAP32[$162 + 0 >> 2] = 0;
   HEAP32[$162 + 4 >> 2] = 0;
   HEAP32[$162 + 8 >> 2] = 0;
   HEAP32[$162 + 12 >> 2] = 0;
   $167 = $29 + ($j$01 * 20 | 0) + 64 | 0;
   $172 = HEAP32[$167 + 4 >> 2] | 0;
   $173 = $80 + ($i$02 * 88 | 0) + ($j$01 << 3) | 0;
   HEAP32[$173 >> 2] = HEAP32[$167 >> 2];
   HEAP32[$173 + 4 >> 2] = $172;
   $j$01 = $j$01 + 1 | 0;
  } while (($j$01 | 0) != ($39 | 0));
  $178 = $i$02 + 1 | 0;
  if (($178 | 0) >= (HEAP32[$5 >> 2] | 0)) {
   label = 12;
   break;
  }
  $28 = HEAP32[$22 >> 2] | 0;
  $i$02 = $178;
 }
 if ((label | 0) == 4) ___assert_fail(93544, 93560, 71, 93632); else if ((label | 0) == 12) return;
}
function __ZN15b2ContactSolver24SolvePositionConstraintsEv($this) {
 $this = $this | 0;
 var $$lcssa = 0.0, $$lcssa18 = 0.0, $$lcssa19 = 0.0, $$lcssa20 = 0.0, $0 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $106 = 0, $11 = 0, $112 = 0.0, $113 = 0.0, $114 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $130 = 0.0, $132 = 0.0, $135 = 0.0, $138 = 0.0, $14 = 0, $144 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $16 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0, $18 = 0, $180 = 0, $183 = 0.0, $184 = 0.0, $185 = 0, $194 = 0, $24 = 0.0, $25 = 0.0, $27 = 0.0, $29 = 0.0, $3 = 0, $31 = 0, $37 = 0.0, $38 = 0.0, $4 = 0, $40 = 0.0, $42 = 0.0, $44 = 0, $46 = 0, $47 = 0, $5 = 0, $53 = 0.0, $54 = 0.0, $56 = 0.0, $58 = 0, $6 = 0, $64 = 0.0, $65 = 0.0, $67 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $8 = 0, $81 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $9 = 0, $97 = 0.0, $99 = 0.0, $aA$0$lcssa = 0.0, $aA$023 = 0.0, $aB$0$lcssa = 0.0, $aB$022 = 0.0, $i$031 = 0, $j$021 = 0, $minSeparation$0$lcssa = 0.0, $minSeparation$032 = 0.0, $minSeparation$1$lcssa = 0.0, $minSeparation$124 = 0.0, $psm = 0, $xfA = 0, $xfB = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $xfA = sp + 40 | 0;
 $xfB = sp + 24 | 0;
 $psm = sp;
 $0 = $this + 48 | 0;
 if ((HEAP32[$0 >> 2] | 0) <= 0) {
  $minSeparation$0$lcssa = 0.0;
  $194 = $minSeparation$0$lcssa >= -.014999999664723873;
  STACKTOP = sp;
  return $194 | 0;
 }
 $3 = $this + 36 | 0;
 $4 = $this + 24 | 0;
 $5 = $xfA + 8 | 0;
 $6 = $xfA + 12 | 0;
 $7 = $xfB + 8 | 0;
 $8 = $xfB + 12 | 0;
 $9 = $psm + 8 | 0;
 $10 = $psm + 16 | 0;
 $46 = HEAP32[$4 >> 2] | 0;
 $i$031 = 0;
 $minSeparation$032 = 0.0;
 while (1) {
  $11 = HEAP32[$3 >> 2] | 0;
  $12 = $11 + ($i$031 * 88 | 0) | 0;
  $14 = HEAP32[$11 + ($i$031 * 88 | 0) + 32 >> 2] | 0;
  $16 = HEAP32[$11 + ($i$031 * 88 | 0) + 36 >> 2] | 0;
  $18 = $11 + ($i$031 * 88 | 0) + 48 | 0;
  $24 = +HEAPF32[$18 >> 2];
  $25 = +HEAPF32[$18 + 4 >> 2];
  $27 = +HEAPF32[$11 + ($i$031 * 88 | 0) + 40 >> 2];
  $29 = +HEAPF32[$11 + ($i$031 * 88 | 0) + 64 >> 2];
  $31 = $11 + ($i$031 * 88 | 0) + 56 | 0;
  $37 = +HEAPF32[$31 >> 2];
  $38 = +HEAPF32[$31 + 4 >> 2];
  $40 = +HEAPF32[$11 + ($i$031 * 88 | 0) + 44 >> 2];
  $42 = +HEAPF32[$11 + ($i$031 * 88 | 0) + 68 >> 2];
  $44 = HEAP32[$11 + ($i$031 * 88 | 0) + 84 >> 2] | 0;
  $47 = $46 + ($14 * 12 | 0) | 0;
  $53 = +HEAPF32[$47 >> 2];
  $54 = +HEAPF32[$47 + 4 >> 2];
  $56 = +HEAPF32[$46 + ($14 * 12 | 0) + 8 >> 2];
  $58 = $46 + ($16 * 12 | 0) | 0;
  $64 = +HEAPF32[$58 >> 2];
  $65 = +HEAPF32[$58 + 4 >> 2];
  $67 = +HEAPF32[$46 + ($16 * 12 | 0) + 8 >> 2];
  if (($44 | 0) > 0) {
   $69 = $27 + $40;
   $81 = $53;
   $83 = $54;
   $97 = $64;
   $99 = $65;
   $aA$023 = $56;
   $aB$022 = $67;
   $j$021 = 0;
   $minSeparation$124 = $minSeparation$032;
   do {
    $70 = +Math_sin(+$aA$023);
    HEAPF32[$5 >> 2] = $70;
    $71 = +Math_cos(+$aA$023);
    HEAPF32[$6 >> 2] = $71;
    $72 = +Math_sin(+$aB$022);
    HEAPF32[$7 >> 2] = $72;
    $73 = +Math_cos(+$aB$022);
    HEAPF32[$8 >> 2] = $73;
    $84 = +($81 - ($24 * $71 - $25 * $70));
    $85 = +($83 - ($25 * $71 + $24 * $70));
    $86 = $xfA;
    HEAPF32[$86 >> 2] = $84;
    HEAPF32[$86 + 4 >> 2] = $85;
    $100 = +($97 - ($37 * $73 - $38 * $72));
    $101 = +($99 - ($38 * $73 + $37 * $72));
    $102 = $xfB;
    HEAPF32[$102 >> 2] = $100;
    HEAPF32[$102 + 4 >> 2] = $101;
    __ZN24b2PositionSolverManifold10InitializeEP27b2ContactPositionConstraintRK11b2TransformS4_i($psm, $12, $xfA, $xfB, $j$021);
    $106 = $psm;
    $112 = +HEAPF32[$106 >> 2];
    $113 = +HEAPF32[$106 + 4 >> 2];
    $114 = $9;
    $120 = +HEAPF32[$114 >> 2];
    $121 = +HEAPF32[$114 + 4 >> 2];
    $122 = +HEAPF32[$10 >> 2];
    $123 = $120 - $81;
    $124 = $121 - $83;
    $125 = $120 - $97;
    $126 = $121 - $99;
    $minSeparation$124 = $minSeparation$124 < $122 ? $minSeparation$124 : $122;
    $130 = ($122 + .004999999888241291) * .20000000298023224;
    $132 = $130 < 0.0 ? $130 : 0.0;
    $135 = $113 * $123 - $112 * $124;
    $138 = $113 * $125 - $112 * $126;
    $144 = $138 * ($42 * $138) + ($69 + $135 * ($29 * $135));
    if ($144 > 0.0) $151 = -($132 < -.20000000298023224 ? -.20000000298023224 : $132) / $144; else $151 = 0.0;
    $150 = $112 * $151;
    $152 = $113 * $151;
    $81 = $81 - $27 * $150;
    $83 = $83 - $27 * $152;
    $aA$023 = $aA$023 - $29 * ($123 * $152 - $124 * $150);
    $97 = $97 + $40 * $150;
    $99 = $99 + $40 * $152;
    $aB$022 = $aB$022 + $42 * ($125 * $152 - $126 * $150);
    $j$021 = $j$021 + 1 | 0;
   } while (($j$021 | 0) != ($44 | 0));
   $$lcssa = $83;
   $$lcssa18 = $81;
   $$lcssa19 = $99;
   $$lcssa20 = $97;
   $173 = HEAP32[$4 >> 2] | 0;
   $aA$0$lcssa = $aA$023;
   $aB$0$lcssa = $aB$022;
   $minSeparation$1$lcssa = $minSeparation$124;
  } else {
   $$lcssa = $54;
   $$lcssa18 = $53;
   $$lcssa19 = $65;
   $$lcssa20 = $64;
   $173 = $46;
   $aA$0$lcssa = $56;
   $aB$0$lcssa = $67;
   $minSeparation$1$lcssa = $minSeparation$032;
  }
  $174 = +$$lcssa18;
  $175 = +$$lcssa;
  $176 = $173 + ($14 * 12 | 0) | 0;
  HEAPF32[$176 >> 2] = $174;
  HEAPF32[$176 + 4 >> 2] = $175;
  $180 = HEAP32[$4 >> 2] | 0;
  HEAPF32[$180 + ($14 * 12 | 0) + 8 >> 2] = $aA$0$lcssa;
  $183 = +$$lcssa20;
  $184 = +$$lcssa19;
  $185 = $180 + ($16 * 12 | 0) | 0;
  HEAPF32[$185 >> 2] = $183;
  HEAPF32[$185 + 4 >> 2] = $184;
  $46 = HEAP32[$4 >> 2] | 0;
  HEAPF32[$46 + ($16 * 12 | 0) + 8 >> 2] = $aB$0$lcssa;
  $i$031 = $i$031 + 1 | 0;
  if (($i$031 | 0) >= (HEAP32[$0 >> 2] | 0)) {
   $minSeparation$0$lcssa = $minSeparation$1$lcssa;
   break;
  } else $minSeparation$032 = $minSeparation$1$lcssa;
 }
 $194 = $minSeparation$0$lcssa >= -.014999999664723873;
 STACKTOP = sp;
 return $194 | 0;
}

function _resume($L, $ud) {
 $L = $L | 0;
 $ud = $ud | 0;
 var $$0$i = 0, $$0$i7 = 0, $$1$i = 0, $$1$i9 = 0, $$25$i = 0, $$25$i11 = 0, $$pre$phi$i8Z2D = 0, $$pre$phi$iZ2D = 0, $101 = 0, $103 = 0, $109 = 0, $112 = 0, $113 = 0, $115 = 0, $12 = 0, $123 = 0, $126 = 0, $130 = 0, $132 = 0, $139 = 0, $140 = 0, $145 = 0, $146 = 0, $150 = 0, $2 = 0, $22 = 0, $26 = 0, $3 = 0, $31 = 0, $34 = 0, $42 = 0, $45 = 0, $5 = 0, $50 = 0, $52 = 0, $54 = 0, $6 = 0, $60 = 0, $61 = 0, $66 = 0, $67 = 0, $71 = 0, $78 = 0, $79 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $90 = 0, $firstArg$0 = 0, $i$03$i = 0, $i$03$i13 = 0, $i$11$i = 0, $i$11$i16 = 0, $res$04$i = 0, $res$04$i12 = 0, $res$1$lcssa$i = 0, $res$1$lcssa$i20 = 0, $res$12$i = 0, $res$12$i15 = 0;
 $2 = $L + 16 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if ((HEAPU16[$L + 106 >> 1] | 0) > 199) _resume_error($L, 56224, $ud);
 $5 = $L + 6 | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 if ($6 << 24 >> 24 == 1) {
  HEAP8[$5 >> 0] = 0;
  $12 = $L + 28 | 0;
  HEAP32[$3 >> 2] = (HEAP32[$12 >> 2] | 0) + (HEAP32[$3 + 28 >> 2] | 0);
  if (!(HEAP8[$3 + 34 >> 0] & 2)) {
   $22 = HEAP32[$3 + 16 >> 2] | 0;
   if (!$22) $firstArg$0 = $ud; else {
    $26 = FUNCTION_TABLE_iiii[$22 & 31]($L, 1, HEAP32[$3 + 24 >> 2] | 0) | 0;
    $firstArg$0 = (HEAP32[$L + 8 >> 2] | 0) + (0 - $26 << 3) | 0;
   }
   $31 = HEAP32[$2 >> 2] | 0;
   $34 = HEAPU8[$L + 108 >> 0] | 0;
   if (!($34 & 6)) {
    $$1$i = $firstArg$0;
    $$pre$phi$iZ2D = $31 + 8 | 0;
   } else {
    if (!($34 & 2)) $$0$i = $firstArg$0; else {
     $42 = $firstArg$0 - (HEAP32[$12 >> 2] | 0) | 0;
     _luaD_hook($L, 1, -1);
     $$0$i = (HEAP32[$12 >> 2] | 0) + $42 | 0;
    }
    $45 = $31 + 8 | 0;
    HEAP32[$L + 20 >> 2] = HEAP32[(HEAP32[$45 >> 2] | 0) + 20 >> 2];
    $$1$i = $$0$i;
    $$pre$phi$iZ2D = $45;
   }
   $50 = HEAP32[$31 >> 2] | 0;
   $52 = HEAP16[$31 + 32 >> 1] | 0;
   HEAP32[$2 >> 2] = HEAP32[$$pre$phi$iZ2D >> 2];
   $54 = $L + 8 | 0;
   L19 : do if (!($52 << 16 >> 16)) $res$1$lcssa$i = $50; else {
    $$25$i = $$1$i;
    $i$03$i = $52 << 16 >> 16;
    $res$04$i = $50;
    while (1) {
     if ($$25$i >>> 0 >= (HEAP32[$54 >> 2] | 0) >>> 0) break;
     $60 = $res$04$i + 8 | 0;
     $61 = $$25$i;
     $66 = HEAP32[$61 + 4 >> 2] | 0;
     $67 = $res$04$i;
     HEAP32[$67 >> 2] = HEAP32[$61 >> 2];
     HEAP32[$67 + 4 >> 2] = $66;
     $71 = $i$03$i + -1 | 0;
     if (!$71) {
      $res$1$lcssa$i = $60;
      break L19;
     }
     $$25$i = $$25$i + 8 | 0;
     $i$03$i = $71;
     $res$04$i = $60;
    }
    if (($i$03$i | 0) > 0) {
     $i$11$i = $i$03$i;
     $res$12$i = $res$04$i;
     while (1) {
      $i$11$i = $i$11$i + -1 | 0;
      HEAP32[$res$12$i + 4 >> 2] = 0;
      if (($i$11$i | 0) <= 0) break; else $res$12$i = $res$12$i + 8 | 0;
     }
     $res$1$lcssa$i = $res$04$i + ($i$03$i << 3) | 0;
    } else $res$1$lcssa$i = $res$04$i;
   } while (0);
   HEAP32[$54 >> 2] = $res$1$lcssa$i;
  } else _luaV_execute($L);
  $78 = HEAP32[$2 >> 2] | 0;
  $79 = $L + 48 | 0;
  if (($78 | 0) == ($79 | 0)) return;
  $81 = $L + 8 | 0;
  $82 = $L + 108 | 0;
  $83 = $L + 20 | 0;
  $84 = $L + 88 | 0;
  $86 = $78;
  do {
   $85 = $86 + 34 | 0;
   $87 = HEAP8[$85 >> 0] | 0;
   if (!($87 & 2)) {
    $90 = $87 & 255;
    if ($90 & 16) {
     HEAP8[$85 >> 0] = $90 & 239;
     HEAP32[$84 >> 2] = HEAP32[$86 + 20 >> 2];
    }
    if ((HEAP16[$86 + 32 >> 1] | 0) == -1) {
     $101 = (HEAP32[$2 >> 2] | 0) + 4 | 0;
     $103 = HEAP32[$81 >> 2] | 0;
     if ((HEAP32[$101 >> 2] | 0) >>> 0 < $103 >>> 0) HEAP32[$101 >> 2] = $103;
    }
    $109 = FUNCTION_TABLE_iiii[HEAP32[$86 + 16 >> 2] & 31]($L, 1, HEAP32[$86 + 24 >> 2] | 0) | 0;
    $112 = (HEAP32[$81 >> 2] | 0) + (0 - $109 << 3) | 0;
    $113 = HEAP32[$2 >> 2] | 0;
    $115 = HEAPU8[$82 >> 0] | 0;
    if (!($115 & 6)) {
     $$1$i9 = $112;
     $$pre$phi$i8Z2D = $113 + 8 | 0;
    } else {
     if (!($115 & 2)) $$0$i7 = $112; else {
      $123 = $112 - (HEAP32[$12 >> 2] | 0) | 0;
      _luaD_hook($L, 1, -1);
      $$0$i7 = (HEAP32[$12 >> 2] | 0) + $123 | 0;
     }
     $126 = $113 + 8 | 0;
     HEAP32[$83 >> 2] = HEAP32[(HEAP32[$126 >> 2] | 0) + 20 >> 2];
     $$1$i9 = $$0$i7;
     $$pre$phi$i8Z2D = $126;
    }
    $130 = HEAP32[$113 >> 2] | 0;
    $132 = HEAP16[$113 + 32 >> 1] | 0;
    HEAP32[$2 >> 2] = HEAP32[$$pre$phi$i8Z2D >> 2];
    L53 : do if (!($132 << 16 >> 16)) $res$1$lcssa$i20 = $130; else {
     $$25$i11 = $$1$i9;
     $i$03$i13 = $132 << 16 >> 16;
     $res$04$i12 = $130;
     while (1) {
      if ($$25$i11 >>> 0 >= (HEAP32[$81 >> 2] | 0) >>> 0) break;
      $139 = $res$04$i12 + 8 | 0;
      $140 = $$25$i11;
      $145 = HEAP32[$140 + 4 >> 2] | 0;
      $146 = $res$04$i12;
      HEAP32[$146 >> 2] = HEAP32[$140 >> 2];
      HEAP32[$146 + 4 >> 2] = $145;
      $150 = $i$03$i13 + -1 | 0;
      if (!$150) {
       $res$1$lcssa$i20 = $139;
       break L53;
      }
      $$25$i11 = $$25$i11 + 8 | 0;
      $i$03$i13 = $150;
      $res$04$i12 = $139;
     }
     if (($i$03$i13 | 0) > 0) {
      $i$11$i16 = $i$03$i13;
      $res$12$i15 = $res$04$i12;
      while (1) {
       $i$11$i16 = $i$11$i16 + -1 | 0;
       HEAP32[$res$12$i15 + 4 >> 2] = 0;
       if (($i$11$i16 | 0) <= 0) break; else $res$12$i15 = $res$12$i15 + 8 | 0;
      }
      $res$1$lcssa$i20 = $res$04$i12 + ($i$03$i13 << 3) | 0;
     } else $res$1$lcssa$i20 = $res$04$i12;
    } while (0);
    HEAP32[$81 >> 2] = $res$1$lcssa$i20;
   } else {
    _luaV_finishOp($L);
    _luaV_execute($L);
   }
   $86 = HEAP32[$2 >> 2] | 0;
  } while (($86 | 0) != ($79 | 0));
  return;
 } else if (!($6 << 24 >> 24)) {
  if (($3 | 0) != ($L + 48 | 0)) _resume_error($L, 56408, $ud);
  if (_luaD_precall($L, $ud + -8 | 0, -1) | 0) return;
  _luaV_execute($L);
  return;
 } else _resume_error($L, 65768, $ud);
}

function _fmod($x, $y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $106 = 0, $107 = 0, $11 = 0, $112 = 0, $113 = 0, $115 = 0, $118 = 0, $12 = 0, $120 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $146 = 0, $149 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $2 = 0, $23 = 0.0, $25 = 0, $26 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $45 = 0, $46 = 0, $55 = 0, $6 = 0, $60 = 0, $61 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $78 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $93 = 0, $94 = 0, $96 = 0, $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = $y;
 $2 = HEAP32[tempDoublePtr >> 2] | 0;
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $4 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0;
 $6 = $4 & 2047;
 $7 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = _bitshift64Shl($2 | 0, $3 | 0, 1) | 0;
 $12 = tempRet0;
 if (!(($11 | 0) == 0 & ($12 | 0) == 0)) {
  $16 = $3 & 2147483647;
  if (!($16 >>> 0 > 2146435072 | ($16 | 0) == 2146435072 & $2 >>> 0 > 0 | ($6 | 0) == 2047)) {
   $25 = _bitshift64Shl($0 | 0, $1 | 0, 1) | 0;
   $26 = tempRet0;
   if (!($26 >>> 0 > $12 >>> 0 | ($26 | 0) == ($12 | 0) & $25 >>> 0 > $11 >>> 0)) {
    if (!(($25 | 0) == ($11 | 0) & ($26 | 0) == ($12 | 0))) {
     $$0 = $x;
     return +$$0;
    }
    $$0 = $x * 0.0;
    return +$$0;
   }
   if (!$6) {
    $37 = _bitshift64Shl($0 | 0, $1 | 0, 12) | 0;
    $38 = tempRet0;
    if (($38 | 0) > -1 | ($38 | 0) == -1 & $37 >>> 0 > 4294967295) {
     $45 = $37;
     $46 = $38;
     $ex$026 = 0;
     while (1) {
      $44 = $ex$026 + -1 | 0;
      $45 = _bitshift64Shl($45 | 0, $46 | 0, 1) | 0;
      $46 = tempRet0;
      if (!(($46 | 0) > -1 | ($46 | 0) == -1 & $45 >>> 0 > 4294967295)) {
       $ex$0$lcssa = $44;
       break;
      } else $ex$026 = $44;
     }
    } else $ex$0$lcssa = 0;
    $55 = _bitshift64Shl($0 | 0, $1 | 0, 1 - $ex$0$lcssa | 0) | 0;
    $83 = $55;
    $84 = tempRet0;
    $ex$1 = $ex$0$lcssa;
   } else {
    $83 = $0;
    $84 = $1 & 1048575 | 1048576;
    $ex$1 = $6;
   }
   if (!$9) {
    $60 = _bitshift64Shl($2 | 0, $3 | 0, 12) | 0;
    $61 = tempRet0;
    if (($61 | 0) > -1 | ($61 | 0) == -1 & $60 >>> 0 > 4294967295) {
     $68 = $60;
     $69 = $61;
     $ey$020 = 0;
     while (1) {
      $67 = $ey$020 + -1 | 0;
      $68 = _bitshift64Shl($68 | 0, $69 | 0, 1) | 0;
      $69 = tempRet0;
      if (!(($69 | 0) > -1 | ($69 | 0) == -1 & $68 >>> 0 > 4294967295)) {
       $ey$0$lcssa = $67;
       break;
      } else $ey$020 = $67;
     }
    } else $ey$0$lcssa = 0;
    $78 = _bitshift64Shl($2 | 0, $3 | 0, 1 - $ey$0$lcssa | 0) | 0;
    $85 = $78;
    $86 = tempRet0;
    $ey$1$ph = $ey$0$lcssa;
   } else {
    $85 = $2;
    $86 = $3 & 1048575 | 1048576;
    $ey$1$ph = $9;
   }
   $87 = _i64Subtract($83 | 0, $84 | 0, $85 | 0, $86 | 0) | 0;
   $88 = tempRet0;
   $93 = ($88 | 0) > -1 | ($88 | 0) == -1 & $87 >>> 0 > 4294967295;
   L27 : do if (($ex$1 | 0) > ($ey$1$ph | 0)) {
    $152 = $93;
    $153 = $87;
    $154 = $88;
    $94 = $83;
    $96 = $84;
    $ex$212 = $ex$1;
    while (1) {
     if ($152) if (($94 | 0) == ($85 | 0) & ($96 | 0) == ($86 | 0)) break; else {
      $100 = $153;
      $101 = $154;
     } else {
      $100 = $94;
      $101 = $96;
     }
     $102 = _bitshift64Shl($100 | 0, $101 | 0, 1) | 0;
     $103 = tempRet0;
     $104 = $ex$212 + -1 | 0;
     $106 = _i64Subtract($102 | 0, $103 | 0, $85 | 0, $86 | 0) | 0;
     $107 = tempRet0;
     $112 = ($107 | 0) > -1 | ($107 | 0) == -1 & $106 >>> 0 > 4294967295;
     if (($104 | 0) > ($ey$1$ph | 0)) {
      $152 = $112;
      $153 = $106;
      $154 = $107;
      $94 = $102;
      $96 = $103;
      $ex$212 = $104;
     } else {
      $$lcssa7 = $112;
      $113 = $102;
      $115 = $103;
      $155 = $106;
      $156 = $107;
      $ex$2$lcssa = $104;
      break L27;
     }
    }
    $$0 = $x * 0.0;
    return +$$0;
   } else {
    $$lcssa7 = $93;
    $113 = $83;
    $115 = $84;
    $155 = $87;
    $156 = $88;
    $ex$2$lcssa = $ex$1;
   } while (0);
   if ($$lcssa7) if (($113 | 0) == ($85 | 0) & ($115 | 0) == ($86 | 0)) {
    $$0 = $x * 0.0;
    return +$$0;
   } else {
    $118 = $156;
    $120 = $155;
   } else {
    $118 = $115;
    $120 = $113;
   }
   if ($118 >>> 0 < 1048576 | ($118 | 0) == 1048576 & $120 >>> 0 < 0) {
    $126 = $120;
    $127 = $118;
    $ex$39 = $ex$2$lcssa;
    while (1) {
     $128 = _bitshift64Shl($126 | 0, $127 | 0, 1) | 0;
     $129 = tempRet0;
     $130 = $ex$39 + -1 | 0;
     if ($129 >>> 0 < 1048576 | ($129 | 0) == 1048576 & $128 >>> 0 < 0) {
      $126 = $128;
      $127 = $129;
      $ex$39 = $130;
     } else {
      $137 = $128;
      $138 = $129;
      $ex$3$lcssa = $130;
      break;
     }
    }
   } else {
    $137 = $120;
    $138 = $118;
    $ex$3$lcssa = $ex$2$lcssa;
   }
   if (($ex$3$lcssa | 0) > 0) {
    $139 = _i64Add($137 | 0, $138 | 0, 0, -1048576) | 0;
    $140 = tempRet0;
    $141 = _bitshift64Shl($ex$3$lcssa | 0, 0, 52) | 0;
    $149 = $140 | tempRet0;
    $151 = $139 | $141;
   } else {
    $146 = _bitshift64Lshr($137 | 0, $138 | 0, 1 - $ex$3$lcssa | 0) | 0;
    $149 = tempRet0;
    $151 = $146;
   }
   HEAP32[tempDoublePtr >> 2] = $151;
   HEAP32[tempDoublePtr + 4 >> 2] = $149 | $10;
   $$0 = +HEAPF64[tempDoublePtr >> 3];
   return +$$0;
  }
 }
 $23 = $x * $y;
 $$0 = $23 / $23;
 return +$$0;
}

function _luaO_arith($L, $op, $p1, $p2, $res) {
 $L = $L | 0;
 $op = $op | 0;
 $p1 = $p1 | 0;
 $p2 = $p2 | 0;
 $res = $res | 0;
 var $$0$i = 0, $$0$i2 = 0.0, $$0$i3 = 0, $$0$i5 = 0.0, $12 = 0, $14 = 0, $37 = 0.0, $40 = 0.0, $42 = 0.0, $50 = 0.0, $56 = 0, $60 = 0, $61 = 0, $82 = 0.0, $85 = 0.0, $87 = 0.0, $9 = 0, $95 = 0.0, $i1 = 0, $i2 = 0, $n1 = 0, $n12 = 0, $n2 = 0, $n23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $i1 = sp + 20 | 0;
 $i2 = sp + 16 | 0;
 $n1 = sp + 12 | 0;
 $n2 = sp + 8 | 0;
 $n12 = sp + 4 | 0;
 $n23 = sp;
 L1 : do switch ($op | 0) {
 case 13:
 case 11:
 case 10:
 case 9:
 case 8:
 case 7:
  {
   if ((HEAP32[$p1 + 4 >> 2] | 0) == 19) HEAP32[$i1 >> 2] = HEAP32[$p1 >> 2]; else if (!(_luaV_tointeger_($p1, $i1) | 0)) break L1;
   if ((HEAP32[$p2 + 4 >> 2] | 0) == 19) {
    $9 = HEAP32[$p2 >> 2] | 0;
    HEAP32[$i2 >> 2] = $9;
    $14 = $9;
   } else {
    if (!(_luaV_tointeger_($p2, $i2) | 0)) break L1;
    $14 = HEAP32[$i2 >> 2] | 0;
   }
   $12 = HEAP32[$i1 >> 2] | 0;
   do switch ($op | 0) {
   case 7:
    {
     $$0$i = $14 & $12;
     break;
    }
   case 8:
    {
     $$0$i = $14 | $12;
     break;
    }
   case 2:
    {
     $$0$i = Math_imul($14, $12) | 0;
     break;
    }
   case 9:
    {
     $$0$i = $14 ^ $12;
     break;
    }
   case 13:
    {
     $$0$i = ~$12;
     break;
    }
   case 1:
    {
     $$0$i = $12 - $14 | 0;
     break;
    }
   case 12:
    {
     $$0$i = 0 - $12 | 0;
     break;
    }
   case 3:
    {
     $$0$i = _luaV_mod($L, $12, $14) | 0;
     break;
    }
   case 11:
    {
     $$0$i = _luaV_shiftl($12, 0 - $14 | 0) | 0;
     break;
    }
   case 0:
    {
     $$0$i = $14 + $12 | 0;
     break;
    }
   case 6:
    {
     $$0$i = _luaV_div($L, $12, $14) | 0;
     break;
    }
   case 10:
    {
     $$0$i = _luaV_shiftl($12, $14) | 0;
     break;
    }
   default:
    $$0$i = 0;
   } while (0);
   HEAP32[$res >> 2] = $$0$i;
   HEAP32[$res + 4 >> 2] = 19;
   STACKTOP = sp;
   return;
  }
 case 4:
 case 5:
  {
   if ((HEAP32[$p1 + 4 >> 2] | 0) == 3) HEAPF32[$n1 >> 2] = +HEAPF32[$p1 >> 2]; else if (!(_luaV_tonumber_($p1, $n1) | 0)) break L1;
   if ((HEAP32[$p2 + 4 >> 2] | 0) == 3) {
    $37 = +HEAPF32[$p2 >> 2];
    HEAPF32[$n2 >> 2] = $37;
    $42 = $37;
   } else {
    if (!(_luaV_tonumber_($p2, $n2) | 0)) break L1;
    $42 = +HEAPF32[$n2 >> 2];
   }
   $40 = +HEAPF32[$n1 >> 2];
   switch ($op | 0) {
   case 4:
    {
     $$0$i2 = +Math_pow(+$40, +$42);
     break;
    }
   case 3:
    {
     $50 = +_fmodf($40, $42);
     if ($42 * $50 < 0.0) $$0$i2 = $42 + $50; else $$0$i2 = $50;
     break;
    }
   case 5:
    {
     $$0$i2 = $40 / $42;
     break;
    }
   case 6:
    {
     $$0$i2 = +Math_floor(+($40 / $42));
     break;
    }
   case 12:
    {
     $$0$i2 = -$40;
     break;
    }
   case 0:
    {
     $$0$i2 = $40 + $42;
     break;
    }
   case 1:
    {
     $$0$i2 = $40 - $42;
     break;
    }
   case 2:
    {
     $$0$i2 = $40 * $42;
     break;
    }
   default:
    $$0$i2 = 0.0;
   }
   HEAPF32[$res >> 2] = $$0$i2;
   HEAP32[$res + 4 >> 2] = 3;
   STACKTOP = sp;
   return;
  }
 default:
  {
   $56 = HEAP32[$p1 + 4 >> 2] | 0;
   if (($56 | 0) == 3) HEAPF32[$n12 >> 2] = +HEAPF32[$p1 >> 2]; else if (($56 | 0) == 19) if ((HEAP32[$p2 + 4 >> 2] | 0) == 19) {
    $60 = HEAP32[$p1 >> 2] | 0;
    $61 = HEAP32[$p2 >> 2] | 0;
    do switch ($op | 0) {
    case 2:
     {
      $$0$i3 = Math_imul($61, $60) | 0;
      break;
     }
    case 3:
     {
      $$0$i3 = _luaV_mod($L, $60, $61) | 0;
      break;
     }
    case 0:
     {
      $$0$i3 = $61 + $60 | 0;
      break;
     }
    case 1:
     {
      $$0$i3 = $60 - $61 | 0;
      break;
     }
    case 13:
     {
      $$0$i3 = ~$60;
      break;
     }
    case 6:
     {
      $$0$i3 = _luaV_div($L, $60, $61) | 0;
      break;
     }
    case 7:
     {
      $$0$i3 = $61 & $60;
      break;
     }
    case 8:
     {
      $$0$i3 = $61 | $60;
      break;
     }
    case 10:
     {
      $$0$i3 = _luaV_shiftl($60, $61) | 0;
      break;
     }
    case 11:
     {
      $$0$i3 = _luaV_shiftl($60, 0 - $61 | 0) | 0;
      break;
     }
    case 12:
     {
      $$0$i3 = 0 - $60 | 0;
      break;
     }
    case 9:
     {
      $$0$i3 = $61 ^ $60;
      break;
     }
    default:
     $$0$i3 = 0;
    } while (0);
    HEAP32[$res >> 2] = $$0$i3;
    HEAP32[$res + 4 >> 2] = 19;
    STACKTOP = sp;
    return;
   } else label = 58; else label = 58;
   if ((label | 0) == 58) if (!(_luaV_tonumber_($p1, $n12) | 0)) break L1;
   if ((HEAP32[$p2 + 4 >> 2] | 0) == 3) {
    $82 = +HEAPF32[$p2 >> 2];
    HEAPF32[$n23 >> 2] = $82;
    $87 = $82;
   } else {
    if (!(_luaV_tonumber_($p2, $n23) | 0)) break L1;
    $87 = +HEAPF32[$n23 >> 2];
   }
   $85 = +HEAPF32[$n12 >> 2];
   switch ($op | 0) {
   case 6:
    {
     $$0$i5 = +Math_floor(+($85 / $87));
     break;
    }
   case 12:
    {
     $$0$i5 = -$85;
     break;
    }
   case 3:
    {
     $95 = +_fmodf($85, $87);
     if ($87 * $95 < 0.0) $$0$i5 = $87 + $95; else $$0$i5 = $95;
     break;
    }
   case 0:
    {
     $$0$i5 = $85 + $87;
     break;
    }
   case 1:
    {
     $$0$i5 = $85 - $87;
     break;
    }
   case 2:
    {
     $$0$i5 = $85 * $87;
     break;
    }
   case 5:
    {
     $$0$i5 = $85 / $87;
     break;
    }
   case 4:
    {
     $$0$i5 = +Math_pow(+$85, +$87);
     break;
    }
   default:
    $$0$i5 = 0.0;
   }
   HEAPF32[$res >> 2] = $$0$i5;
   HEAP32[$res + 4 >> 2] = 3;
   STACKTOP = sp;
   return;
  }
 } while (0);
 _luaT_trybinTM($L, $p1, $p2, $res, $op + 6 | 0);
 STACKTOP = sp;
 return;
}

function _png_handle_iTXt($png_ptr, $info_ptr, $length) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 $length = $length | 0;
 var $0 = 0, $1 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $18 = 0, $2 = 0, $25 = 0, $36 = 0, $4 = 0, $41 = 0, $42 = 0, $44 = 0, $49 = 0, $5 = 0, $51 = 0, $56 = 0, $64 = 0, $80 = 0, $buffer$010 = 0, $buffer$1$i$ph7 = 0, $buffer$1$i$ph8 = 0, $errmsg$115 = 0, $prefix_length$0$lcssa = 0, $prefix_length$020 = 0, $prefix_length$1$lcssa = 0, $prefix_length$117 = 0, $prefix_length$2$lcssa = 0, $prefix_length$216 = 0, $text = 0, $uncompressed_length = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $uncompressed_length = sp + 28 | 0;
 $text = sp;
 $0 = $png_ptr + 756 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (($1 | 0) == 1) {
  _png_crc_finish($png_ptr, $length) | 0;
  STACKTOP = sp;
  return;
 } else if ($1) label = 3;
 if ((label | 0) == 3) {
  $2 = $1 + -1 | 0;
  HEAP32[$0 >> 2] = $2;
  if (($2 | 0) == 1) {
   _png_crc_finish($png_ptr, $length) | 0;
   _png_chunk_benign_error($png_ptr, 76176);
   STACKTOP = sp;
   return;
  }
 }
 $4 = $png_ptr + 208 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 if (!($5 & 1)) _png_chunk_error($png_ptr, 75496);
 if ($5 & 4) HEAP32[$4 >> 2] = $5 | 8;
 $11 = $length + 1 | 0;
 $12 = $png_ptr + 788 | 0;
 $13 = HEAP32[$12 >> 2] | 0;
 if (!$13) label = 12; else {
  $15 = $png_ptr + 792 | 0;
  if ((HEAP32[$15 >> 2] | 0) >>> 0 < $11 >>> 0) {
   HEAP32[$12 >> 2] = 0;
   HEAP32[$15 >> 2] = 0;
   _png_free($png_ptr, $13);
   label = 12;
  } else {
   $buffer$1$i$ph7 = $13;
   label = 15;
  }
 }
 do if ((label | 0) == 12) {
  $18 = _png_malloc_base($png_ptr, $11) | 0;
  if ($18) {
   HEAP32[$12 >> 2] = $18;
   HEAP32[$png_ptr + 792 >> 2] = $11;
   if (!$png_ptr) {
    $buffer$1$i$ph8 = $18;
    break;
   } else {
    $buffer$1$i$ph7 = $18;
    label = 15;
    break;
   }
  }
  _png_chunk_warning($png_ptr, 77120);
  _png_crc_finish($png_ptr, $length) | 0;
  _png_chunk_benign_error($png_ptr, 75712);
  STACKTOP = sp;
  return;
 } while (0);
 if ((label | 0) == 15) {
  _png_read_data($png_ptr, $buffer$1$i$ph7, $length);
  _png_calculate_crc($png_ptr, $buffer$1$i$ph7, $length);
  $buffer$1$i$ph8 = $buffer$1$i$ph7;
 }
 if (_png_crc_finish($png_ptr, 0) | 0) {
  STACKTOP = sp;
  return;
 }
 L30 : do if (!$length) $errmsg$115 = 75768; else {
  $prefix_length$020 = 0;
  while (1) {
   $25 = $prefix_length$020 + 1 | 0;
   if (!(HEAP8[$buffer$1$i$ph8 + $prefix_length$020 >> 0] | 0)) {
    $prefix_length$0$lcssa = $prefix_length$020;
    break;
   }
   if ($25 >>> 0 < $length >>> 0) $prefix_length$020 = $25; else {
    $prefix_length$0$lcssa = $25;
    break;
   }
  }
  if ($prefix_length$0$lcssa >>> 0 > 79 | ($prefix_length$0$lcssa | 0) == 0) $errmsg$115 = 75768; else if (($prefix_length$0$lcssa + 5 | 0) >>> 0 > $length >>> 0) $errmsg$115 = 75728; else {
   $36 = HEAP8[$buffer$1$i$ph8 + ($prefix_length$0$lcssa + 1) >> 0] | 0;
   if ($36 << 24 >> 24 == 1) {
    if (HEAP8[$buffer$1$i$ph8 + ($prefix_length$0$lcssa + 2) >> 0] | 0) {
     $errmsg$115 = 76304;
     break;
    }
   } else if ($36 << 24 >> 24) {
    $errmsg$115 = 76304;
    break;
   }
   $41 = $36 << 24 >> 24 != 0;
   HEAP32[$uncompressed_length >> 2] = 0;
   $42 = $prefix_length$0$lcssa + 3 | 0;
   L40 : do if ($42 >>> 0 < $length >>> 0) {
    $prefix_length$117 = $42;
    while (1) {
     $44 = $prefix_length$117 + 1 | 0;
     if (!(HEAP8[$buffer$1$i$ph8 + $prefix_length$117 >> 0] | 0)) {
      $prefix_length$1$lcssa = $prefix_length$117;
      break L40;
     }
     if ($44 >>> 0 < $length >>> 0) $prefix_length$117 = $44; else {
      $prefix_length$1$lcssa = $44;
      break;
     }
    }
   } else $prefix_length$1$lcssa = $42; while (0);
   $49 = $prefix_length$1$lcssa + 1 | 0;
   L45 : do if ($49 >>> 0 < $length >>> 0) {
    $prefix_length$216 = $49;
    while (1) {
     $51 = $prefix_length$216 + 1 | 0;
     if (!(HEAP8[$buffer$1$i$ph8 + $prefix_length$216 >> 0] | 0)) {
      $prefix_length$2$lcssa = $prefix_length$216;
      break L45;
     }
     if ($51 >>> 0 < $length >>> 0) $prefix_length$216 = $51; else {
      $prefix_length$2$lcssa = $51;
      break;
     }
    }
   } else $prefix_length$2$lcssa = $49; while (0);
   $56 = $prefix_length$2$lcssa + 1 | 0;
   do if ($41 | $56 >>> 0 > $length >>> 0) {
    if (!($41 & $56 >>> 0 < $length >>> 0)) {
     $errmsg$115 = 75728;
     break L30;
    }
    HEAP32[$uncompressed_length >> 2] = -1;
    if ((_png_decompress_chunk($png_ptr, $length, $56, $uncompressed_length) | 0) == 1) {
     $buffer$010 = HEAP32[$12 >> 2] | 0;
     break;
    } else {
     $64 = HEAP32[$png_ptr + 248 >> 2] | 0;
     if (!$64) {
      $buffer$010 = $buffer$1$i$ph8;
      break;
     } else {
      $errmsg$115 = $64;
      break L30;
     }
    }
   } else {
    HEAP32[$uncompressed_length >> 2] = $length - $56;
    $buffer$010 = $buffer$1$i$ph8;
   } while (0);
   HEAP8[$buffer$010 + ((HEAP32[$uncompressed_length >> 2] | 0) + $56) >> 0] = 0;
   HEAP32[$text >> 2] = $41 ? 2 : 1;
   HEAP32[$text + 4 >> 2] = $buffer$010;
   HEAP32[$text + 20 >> 2] = $buffer$010 + $42;
   HEAP32[$text + 24 >> 2] = $buffer$010 + $49;
   HEAP32[$text + 8 >> 2] = $buffer$010 + $56;
   HEAP32[$text + 12 >> 2] = 0;
   HEAP32[$text + 16 >> 2] = HEAP32[$uncompressed_length >> 2];
   $80 = (_png_set_text_2($png_ptr, $info_ptr, $text, 1) | 0) == 0;
   if ($80) {
    STACKTOP = sp;
    return;
   } else $errmsg$115 = $80 ? 0 : 76280;
  }
 } while (0);
 _png_chunk_benign_error($png_ptr, $errmsg$115);
 STACKTOP = sp;
 return;
}

function _parse($state, $start, $end) {
 $state = $state | 0;
 $start = $start | 0;
 $end = $end | 0;
 var $$0$i = 0, $$0$i10 = 0, $$0$i3 = 0, $10 = 0, $11 = 0, $18 = 0, $21 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $33 = 0, $36 = 0, $4 = 0, $44 = 0, $5 = 0, $52 = 0, $54 = 0, $55 = 0, $58 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $9 = 0, $command$i = 0, $i$02$i$i = 0, $i$05$i = 0, $next$0 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $vararg_buffer = sp;
 $command$i = sp + 8 | 0;
 if (!$state) ___assert_fail(6136, 6144, 230, 6176);
 if (!$start) ___assert_fail(9672, 6144, 231, 6176);
 if (!$end) ___assert_fail(67584, 6144, 232, 6176);
 $3 = HEAP32[1546] | 0;
 $4 = 6192 + ($3 << 2) | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 HEAP32[$state >> 2] = 6200 + ($3 * 768 | 0) + ($5 * 48 | 0);
 $7 = HEAP32[$start >> 2] | 0;
 if (!$7) ___assert_fail(56352, 6144, 218, 8456); else $$0$i = $7;
 while (1) {
  $9 = HEAP8[$$0$i >> 0] | 0;
  $10 = $$0$i + 1 | 0;
  if (!($9 << 24 >> 24)) {
   label = 10;
   break;
  } else if ($9 << 24 >> 24 == 125 | $9 << 24 >> 24 == 124 | $9 << 24 >> 24 == 123) break; else $$0$i = $10;
 }
 if ((label | 0) == 10) {
  HEAP32[$end >> 2] = $$0$i;
  $64 = HEAP32[$start >> 2] | 0;
  $65 = HEAP8[$64 >> 0] | 0;
  $66 = $65 << 24 >> 24 != 0;
  STACKTOP = sp;
  return $66 | 0;
 }
 $11 = HEAP8[$7 >> 0] | 0;
 if ($11 << 24 >> 24 == 125) {
  if (($5 | 0) > 0) HEAP32[$4 >> 2] = $5 + -1;
  HEAP32[$start >> 2] = $7 + 1;
  HEAP32[$end >> 2] = (HEAP32[$end >> 2] | 0) + 1;
  $64 = HEAP32[$start >> 2] | 0;
  $65 = HEAP8[$64 >> 0] | 0;
  $66 = $65 << 24 >> 24 != 0;
  STACKTOP = sp;
  return $66 | 0;
 }
 if ($9 << 24 >> 24 == 125) {
  $$0$i3 = $7;
  $67 = $11;
  while (1) {
   $18 = $$0$i3 + 1 | 0;
   if ($67 << 24 >> 24 == 0 | $67 << 24 >> 24 == 123 | $67 << 24 >> 24 == 124 | $67 << 24 >> 24 == 125) break;
   $$0$i3 = $18;
   $67 = HEAP8[$18 >> 0] | 0;
  }
  HEAP32[$end >> 2] = $$0$i3;
  $64 = HEAP32[$start >> 2] | 0;
  $65 = HEAP8[$64 >> 0] | 0;
  $66 = $65 << 24 >> 24 != 0;
  STACKTOP = sp;
  return $66 | 0;
 } else if ($9 << 24 >> 24 == 123) {
  if ($7 >>> 0 < $$0$i >>> 0) {
   HEAP32[$end >> 2] = $$0$i;
   $64 = HEAP32[$start >> 2] | 0;
   $65 = HEAP8[$64 >> 0] | 0;
   $66 = $65 << 24 >> 24 != 0;
   STACKTOP = sp;
   return $66 | 0;
  }
  if (($5 | 0) < 15) {
   $21 = $5 + 1 | 0;
   HEAP32[$4 >> 2] = $21;
   if (($5 | 0) > -1) {
    $24 = $21;
    label = 23;
   }
  } else {
   $24 = $5;
   label = 23;
  }
  if ((label | 0) == 23) {
   dest = 6200 + ($3 * 768 | 0) + ($24 * 48 | 0) + 0 | 0;
   src = 6200 + ($3 * 768 | 0) + (($24 + -1 | 0) * 48 | 0) + 0 | 0;
   stop = dest + 48 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
  }
  $next$0 = $$0$i;
  L41 : while (1) {
   $27 = $next$0 + 1 | 0;
   HEAP32[$start >> 2] = $27;
   $$0$i10 = $27;
   while (1) {
    $28 = HEAP8[$$0$i10 >> 0] | 0;
    $29 = $$0$i10 + 1 | 0;
    if ($28 << 24 >> 24 == 124) {
     label = 27;
     break;
    } else if ($28 << 24 >> 24 == 125 | $28 << 24 >> 24 == 123 | $28 << 24 >> 24 == 0) break; else $$0$i10 = $29;
   }
   do if ((label | 0) == 27) {
    label = 0;
    $30 = HEAP32[1546] | 0;
    $33 = 6200 + ($30 * 768 | 0) + ((HEAP32[6192 + ($30 << 2) >> 2] | 0) * 48 | 0) | 0;
    if (!$33) {
     label = 28;
     break L41;
    }
    dest = $command$i + 0 | 0;
    stop = dest + 32 | 0;
    do {
     HEAP8[dest >> 0] = 0;
     dest = dest + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    $i$05$i = 0;
    while (1) {
     $36 = HEAP8[$next$0 + ($i$05$i + 1) >> 0] | 0;
     if ($36 << 24 >> 24 == 124 | $36 << 24 >> 24 == 0) {
      $i$02$i$i = 0;
      break;
     }
     if (!$i$05$i) {
      HEAP8[$command$i >> 0] = $36;
      $i$05$i = 1;
      continue;
     }
     if ((HEAP8[$next$0 + $i$05$i >> 0] | 0) == 58) {
      $i$02$i$i = 0;
      break;
     }
     HEAP8[$command$i + $i$05$i >> 0] = $36;
     $i$05$i = $i$05$i + 1 | 0;
     if (($i$05$i | 0) >= 32) {
      $i$02$i$i = 0;
      break;
     }
    }
    while (1) {
     $44 = $i$02$i$i + 1 | 0;
     if (!(_strcmp(HEAP32[7872 + ($i$02$i$i << 3) >> 2] | 0, $command$i) | 0)) {
      label = 37;
      break;
     }
     if (($44 | 0) == 17) break; else $i$02$i$i = $44;
    }
    if ((label | 0) == 37) {
     label = 0;
     if (($i$02$i$i | 0) != 17) {
      $52 = HEAP32[7876 + ($i$02$i$i << 3) >> 2] | 0;
      $54 = $next$0 + ((_strlen($command$i | 0) | 0) + 1) | 0;
      FUNCTION_TABLE_vii[$52 & 127]($54, $33);
      break;
     }
    }
    HEAP32[$vararg_buffer >> 2] = $command$i;
    _log_internal(0, 7864, 7840, $vararg_buffer);
   } while (0);
   $55 = HEAP8[$$0$i10 >> 0] | 0;
   if ($55 << 24 >> 24 == 0 | $55 << 24 >> 24 == 123 | $55 << 24 >> 24 == 125) break;
   if (!(HEAP8[$29 >> 0] | 0)) break; else $next$0 = $$0$i10;
  }
  if ((label | 0) == 28) ___assert_fail(6136, 6144, 199, 7824);
  HEAP32[$end >> 2] = $$0$i10;
  $58 = HEAP32[1546] | 0;
  HEAP32[$state >> 2] = 6200 + ($58 * 768 | 0) + ((HEAP32[6192 + ($58 << 2) >> 2] | 0) * 48 | 0);
  $64 = HEAP32[$start >> 2] | 0;
  $65 = HEAP8[$64 >> 0] | 0;
  $66 = $65 << 24 >> 24 != 0;
  STACKTOP = sp;
  return $66 | 0;
 } else {
  HEAP32[$end >> 2] = (HEAP32[$end >> 2] | 0) + 1;
  $64 = HEAP32[$start >> 2] | 0;
  $65 = HEAP8[$64 >> 0] | 0;
  $66 = $65 << 24 >> 24 != 0;
  STACKTOP = sp;
  return $66 | 0;
 }
 return 0;
}

function _music_play($m, $loop, $onend_clb) {
 $m = $m | 0;
 $loop = $loop | 0;
 $onend_clb = $onend_clb | 0;
 var $1 = 0, $100 = 0, $104 = 0, $12 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $29 = 0, $31 = 0, $32 = 0, $35 = 0, $38 = 0, $4 = 0, $44 = 0, $46 = 0, $47 = 0, $50 = 0, $52 = 0.0, $55 = 0, $57 = 0, $58 = 0, $6 = 0, $64 = 0, $66 = 0, $67 = 0, $71 = 0, $73 = 0, $74 = 0, $8 = 0, $84 = 0, $85 = 0, $88 = 0, $91 = 0, $97 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer16 = 0, $vararg_buffer22 = 0, $vararg_buffer28 = 0, $vararg_buffer34 = 0, $vararg_buffer4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $vararg_buffer34 = sp + 96 | 0;
 $vararg_buffer28 = sp + 80 | 0;
 $vararg_buffer22 = sp + 64 | 0;
 $vararg_buffer16 = sp + 48 | 0;
 $vararg_buffer10 = sp + 32 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer = sp;
 if (!$m) ___assert_fail(23232, 10720, 58, 10744);
 $1 = $m + 40 | 0;
 if (HEAP32[$1 >> 2] | 0) {
  $4 = _dlua_get_lua_state() | 0;
  _luaL_unref($4, -1001e3, HEAP32[$1 >> 2] | 0);
 }
 HEAP32[$1 >> 2] = $onend_clb;
 $6 = HEAP32[$m >> 2] | 0;
 if ($6) {
  $8 = $6 + 5 | 0;
  if (!(HEAP8[$8 >> 0] | 0)) {
   STACKTOP = sp;
   return;
  }
  HEAP8[$8 >> 0] = 0;
  _alSourcePlay(HEAP32[$6 >> 2] | 0);
  STACKTOP = sp;
  return;
 }
 $12 = _audio_get_free_source() | 0;
 if (!$12) {
  STACKTOP = sp;
  return;
 }
 $14 = $m + 32 | 0;
 $15 = HEAP32[$14 >> 2] | 0;
 $17 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($15 << 1) | 0) + 15 & -16) | 0;
 $18 = $m + 20 | 0;
 $19 = $m + 24 | 0;
 $20 = $m + 28 | 0;
 $21 = HEAP32[$18 >> 2] | 0;
 $23 = FUNCTION_TABLE_iiii[HEAP32[$21 >> 2] & 31]($21, $17, $15) | 0;
 $24 = $m + 4 | 0;
 _alBufferData(HEAP32[$24 >> 2] | 0, HEAP32[$19 >> 2] | 0, $17 | 0, $23 << 1 | 0, HEAP32[$20 >> 2] | 0);
 $29 = _alGetError() | 0;
 if ($29) {
  $31 = $29;
  do {
   $32 = _alGetString($31 | 0) | 0;
   HEAP32[$vararg_buffer >> 2] = 10720;
   HEAP32[$vararg_buffer + 4 >> 2] = 79;
   HEAP32[$vararg_buffer + 8 >> 2] = 10744;
   HEAP32[$vararg_buffer + 12 >> 2] = $32;
   _log_internal(3, 12304, 12024, $vararg_buffer);
   $31 = _alGetError() | 0;
  } while (($31 | 0) != 0);
 }
 $35 = HEAP32[$18 >> 2] | 0;
 $38 = FUNCTION_TABLE_iiii[HEAP32[$35 >> 2] & 31]($35, $17, HEAP32[$14 >> 2] | 0) | 0;
 _alBufferData(HEAP32[$m + 8 >> 2] | 0, HEAP32[$19 >> 2] | 0, $17 | 0, $38 << 1 | 0, HEAP32[$20 >> 2] | 0);
 $44 = _alGetError() | 0;
 if ($44) {
  $84 = $44;
  do {
   $85 = _alGetString($84 | 0) | 0;
   HEAP32[$vararg_buffer28 >> 2] = 10720;
   HEAP32[$vararg_buffer28 + 4 >> 2] = 79;
   HEAP32[$vararg_buffer28 + 8 >> 2] = 10744;
   HEAP32[$vararg_buffer28 + 12 >> 2] = $85;
   _log_internal(3, 12304, 12024, $vararg_buffer28);
   $84 = _alGetError() | 0;
  } while (($84 | 0) != 0);
 }
 $88 = HEAP32[$18 >> 2] | 0;
 $91 = FUNCTION_TABLE_iiii[HEAP32[$88 >> 2] & 31]($88, $17, HEAP32[$14 >> 2] | 0) | 0;
 _alBufferData(HEAP32[$m + 12 >> 2] | 0, HEAP32[$19 >> 2] | 0, $17 | 0, $91 << 1 | 0, HEAP32[$20 >> 2] | 0);
 $97 = _alGetError() | 0;
 if ($97) {
  $99 = $97;
  do {
   $100 = _alGetString($99 | 0) | 0;
   HEAP32[$vararg_buffer34 >> 2] = 10720;
   HEAP32[$vararg_buffer34 + 4 >> 2] = 79;
   HEAP32[$vararg_buffer34 + 8 >> 2] = 10744;
   HEAP32[$vararg_buffer34 + 12 >> 2] = $100;
   _log_internal(3, 12304, 12024, $vararg_buffer34);
   $99 = _alGetError() | 0;
  } while (($99 | 0) != 0);
 }
 _alSourceQueueBuffers(HEAP32[$12 >> 2] | 0, 3, $24 | 0);
 $104 = _alGetError() | 0;
 if ($104) {
  $46 = $104;
  do {
   $47 = _alGetString($46 | 0) | 0;
   HEAP32[$vararg_buffer4 >> 2] = 10720;
   HEAP32[$vararg_buffer4 + 4 >> 2] = 83;
   HEAP32[$vararg_buffer4 + 8 >> 2] = 10744;
   HEAP32[$vararg_buffer4 + 12 >> 2] = $47;
   _log_internal(3, 12304, 12024, $vararg_buffer4);
   $46 = _alGetError() | 0;
  } while (($46 | 0) != 0);
 }
 $50 = HEAP32[$12 >> 2] | 0;
 $52 = +HEAPF32[$m + 48 >> 2];
 _alSourcef($50 | 0, 4106, +($52 * +_audio_get_music_volume()));
 $55 = _alGetError() | 0;
 if ($55) {
  $57 = $55;
  do {
   $58 = _alGetString($57 | 0) | 0;
   HEAP32[$vararg_buffer10 >> 2] = 10720;
   HEAP32[$vararg_buffer10 + 4 >> 2] = 85;
   HEAP32[$vararg_buffer10 + 8 >> 2] = 10744;
   HEAP32[$vararg_buffer10 + 12 >> 2] = $58;
   _log_internal(3, 12304, 12024, $vararg_buffer10);
   $57 = _alGetError() | 0;
  } while (($57 | 0) != 0);
 }
 _alSourcef(HEAP32[$12 >> 2] | 0, 4099, +(+HEAPF32[$m + 44 >> 2]));
 $64 = _alGetError() | 0;
 if ($64) {
  $66 = $64;
  do {
   $67 = _alGetString($66 | 0) | 0;
   HEAP32[$vararg_buffer16 >> 2] = 10720;
   HEAP32[$vararg_buffer16 + 4 >> 2] = 87;
   HEAP32[$vararg_buffer16 + 8 >> 2] = 10744;
   HEAP32[$vararg_buffer16 + 12 >> 2] = $67;
   _log_internal(3, 12304, 12024, $vararg_buffer16);
   $66 = _alGetError() | 0;
  } while (($66 | 0) != 0);
 }
 _alSourcePlay(HEAP32[$12 >> 2] | 0);
 $71 = _alGetError() | 0;
 if ($71) {
  $73 = $71;
  do {
   $74 = _alGetString($73 | 0) | 0;
   HEAP32[$vararg_buffer22 >> 2] = 10720;
   HEAP32[$vararg_buffer22 + 4 >> 2] = 89;
   HEAP32[$vararg_buffer22 + 8 >> 2] = 10744;
   HEAP32[$vararg_buffer22 + 12 >> 2] = $74;
   _log_internal(3, 12304, 12024, $vararg_buffer22);
   $73 = _alGetError() | 0;
  } while (($73 | 0) != 0);
 }
 HEAP8[$m + 16 >> 0] = 0;
 HEAP8[$m + 17 >> 0] = $loop & 1;
 HEAP32[$12 + 12 >> 2] = 0;
 HEAP32[$12 + 8 >> 2] = $m;
 HEAP8[$12 + 4 >> 0] = 1;
 HEAPF32[$12 + 16 >> 2] = 1.0;
 HEAP32[$m >> 2] = $12;
 STACKTOP = sp;
 return;
}

function __ZN11b2RopeJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $1 = 0, $101 = 0.0, $105 = 0.0, $108 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $12 = 0, $121 = 0.0, $126 = 0.0, $129 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0, $139 = 0, $14 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $153 = 0, $156 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $169 = 0.0, $17 = 0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $178 = 0.0, $18 = 0, $180 = 0.0, $183 = 0.0, $189 = 0.0, $195 = 0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0, $231 = 0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0, $24 = 0, $26 = 0, $29 = 0, $3 = 0, $30 = 0, $36 = 0, $39 = 0, $4 = 0, $42 = 0, $45 = 0, $47 = 0, $49 = 0, $55 = 0.0, $56 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $68 = 0.0, $69 = 0.0, $71 = 0.0, $73 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $82 = 0.0, $84 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $wA$0 = 0.0, $wB$0 = 0.0;
 $1 = HEAP32[$this + 48 >> 2] | 0;
 $3 = HEAP32[$1 + 8 >> 2] | 0;
 $4 = $this + 96 | 0;
 HEAP32[$4 >> 2] = $3;
 $6 = HEAP32[$this + 52 >> 2] | 0;
 $8 = HEAP32[$6 + 8 >> 2] | 0;
 $9 = $this + 100 | 0;
 HEAP32[$9 >> 2] = $8;
 $12 = $1 + 28 | 0;
 $14 = HEAP32[$12 >> 2] | 0;
 $17 = HEAP32[$12 + 4 >> 2] | 0;
 $18 = $this + 128 | 0;
 HEAP32[$18 >> 2] = $14;
 HEAP32[$18 + 4 >> 2] = $17;
 $24 = $6 + 28 | 0;
 $26 = HEAP32[$24 >> 2] | 0;
 $29 = HEAP32[$24 + 4 >> 2] | 0;
 $30 = $this + 136 | 0;
 HEAP32[$30 >> 2] = $26;
 HEAP32[$30 + 4 >> 2] = $29;
 $36 = $this + 144 | 0;
 HEAPF32[$36 >> 2] = +HEAPF32[$1 + 120 >> 2];
 $39 = $this + 148 | 0;
 HEAPF32[$39 >> 2] = +HEAPF32[$6 + 120 >> 2];
 $42 = $this + 152 | 0;
 HEAPF32[$42 >> 2] = +HEAPF32[$1 + 128 >> 2];
 $45 = $this + 156 | 0;
 HEAPF32[$45 >> 2] = +HEAPF32[$6 + 128 >> 2];
 $47 = HEAP32[$data + 24 >> 2] | 0;
 $49 = $47 + ($3 * 12 | 0) | 0;
 $55 = +HEAPF32[$49 >> 2];
 $56 = +HEAPF32[$49 + 4 >> 2];
 $58 = +HEAPF32[$47 + ($3 * 12 | 0) + 8 >> 2];
 $59 = $data + 28 | 0;
 $60 = HEAP32[$59 >> 2] | 0;
 $62 = $60 + ($3 * 12 | 0) | 0;
 $68 = +HEAPF32[$62 >> 2];
 $69 = +HEAPF32[$62 + 4 >> 2];
 $71 = +HEAPF32[$60 + ($3 * 12 | 0) + 8 >> 2];
 $73 = $47 + ($8 * 12 | 0) | 0;
 $79 = +HEAPF32[$73 >> 2];
 $80 = +HEAPF32[$73 + 4 >> 2];
 $82 = +HEAPF32[$47 + ($8 * 12 | 0) + 8 >> 2];
 $84 = $60 + ($8 * 12 | 0) | 0;
 $90 = +HEAPF32[$84 >> 2];
 $91 = +HEAPF32[$84 + 4 >> 2];
 $93 = +HEAPF32[$60 + ($8 * 12 | 0) + 8 >> 2];
 $94 = +Math_sin(+$58);
 $95 = +Math_cos(+$58);
 $96 = +Math_sin(+$82);
 $97 = +Math_cos(+$82);
 $101 = +HEAPF32[$this + 68 >> 2] - (HEAP32[tempDoublePtr >> 2] = $14, +HEAPF32[tempDoublePtr >> 2]);
 $105 = +HEAPF32[$this + 72 >> 2] - (HEAP32[tempDoublePtr >> 2] = $17, +HEAPF32[tempDoublePtr >> 2]);
 $108 = $95 * $101 - $94 * $105;
 $111 = $94 * $101 + $95 * $105;
 $112 = +$108;
 $113 = +$111;
 $114 = $this + 112 | 0;
 HEAPF32[$114 >> 2] = $112;
 HEAPF32[$114 + 4 >> 2] = $113;
 $121 = +HEAPF32[$this + 76 >> 2] - (HEAP32[tempDoublePtr >> 2] = $26, +HEAPF32[tempDoublePtr >> 2]);
 $126 = +HEAPF32[$this + 80 >> 2] - +HEAPF32[$this + 140 >> 2];
 $129 = $97 * $121 - $96 * $126;
 $132 = $96 * $121 + $97 * $126;
 $133 = +$129;
 $134 = +$132;
 $135 = $this + 120 | 0;
 HEAPF32[$135 >> 2] = $133;
 HEAPF32[$135 + 4 >> 2] = $134;
 $139 = $this + 104 | 0;
 $144 = $79 + $129 - $55 - $108;
 $145 = $80 + $132 - $56 - $111;
 $146 = +$144;
 $147 = +$145;
 $148 = $139;
 HEAPF32[$148 >> 2] = $146;
 HEAPF32[$148 + 4 >> 2] = $147;
 $153 = $this + 108 | 0;
 $156 = +Math_sqrt(+($144 * $144 + $145 * $145));
 HEAPF32[$this + 88 >> 2] = $156;
 HEAP32[$this + 164 >> 2] = $156 - +HEAPF32[$this + 84 >> 2] > 0.0 ? 2 : 0;
 if (!($156 > .004999999888241291)) {
  HEAPF32[$139 >> 2] = 0.0;
  HEAPF32[$153 >> 2] = 0.0;
  HEAPF32[$this + 160 >> 2] = 0.0;
  HEAPF32[$this + 92 >> 2] = 0.0;
  return;
 }
 $164 = 1.0 / $156;
 $165 = $164 * $144;
 HEAPF32[$139 >> 2] = $165;
 $166 = $164 * $145;
 HEAPF32[$153 >> 2] = $166;
 $169 = $108 * $166 - $111 * $165;
 $172 = $166 * $129 - $165 * $132;
 $173 = +HEAPF32[$36 >> 2];
 $174 = +HEAPF32[$42 >> 2];
 $178 = +HEAPF32[$39 >> 2];
 $180 = +HEAPF32[$45 >> 2];
 $183 = $178 + ($173 + $169 * ($169 * $174)) + $172 * ($172 * $180);
 if ($183 != 0.0) $189 = 1.0 / $183; else $189 = 0.0;
 HEAPF32[$this + 160 >> 2] = $189;
 if (!(HEAP8[$data + 20 >> 0] | 0)) {
  HEAPF32[$this + 92 >> 2] = 0.0;
  $223 = $68;
  $225 = $69;
  $236 = $90;
  $238 = $91;
  $wA$0 = $71;
  $wB$0 = $93;
 } else {
  $195 = $this + 92 | 0;
  $197 = +HEAPF32[$data + 8 >> 2] * +HEAPF32[$195 >> 2];
  HEAPF32[$195 >> 2] = $197;
  $198 = $165 * $197;
  $199 = $197 * $166;
  $223 = $68 - $198 * $173;
  $225 = $69 - $199 * $173;
  $236 = $90 + $198 * $178;
  $238 = $91 + $199 * $178;
  $wA$0 = $71 - $174 * ($199 * $108 - $198 * $111);
  $wB$0 = $93 + $180 * ($199 * $129 - $198 * $132);
 }
 $222 = +$223;
 $224 = +$225;
 $226 = (HEAP32[$59 >> 2] | 0) + ((HEAP32[$4 >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$226 >> 2] = $222;
 HEAPF32[$226 + 4 >> 2] = $224;
 $231 = HEAP32[$59 >> 2] | 0;
 HEAPF32[$231 + ((HEAP32[$4 >> 2] | 0) * 12 | 0) + 8 >> 2] = $wA$0;
 $235 = +$236;
 $237 = +$238;
 $239 = $231 + ((HEAP32[$9 >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$239 >> 2] = $235;
 HEAPF32[$239 + 4 >> 2] = $237;
 HEAPF32[(HEAP32[$59 >> 2] | 0) + ((HEAP32[$9 >> 2] | 0) * 12 | 0) + 8 >> 2] = $wB$0;
 return;
}

function _getobjname($p, $lastpc, $reg, $name) {
 $p = $p | 0;
 $lastpc = $lastpc | 0;
 $reg = $reg | 0;
 $name = $name | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $104 = 0, $2 = 0, $23 = 0, $34 = 0, $35 = 0, $40 = 0, $42 = 0, $47 = 0, $5 = 0, $52 = 0, $54 = 0, $62 = 0, $66 = 0, $69 = 0, $7 = 0, $72 = 0, $8 = 0, $81 = 0, $83 = 0, $90 = 0, $93 = 0, $95 = 0, $jmptarget$06$i = 0, $jmptarget$1$i = 0, $lastpc$tr = 0, $pc$08$i = 0, $reg$tr = 0, $setreg$07$i = 0, $setreg$1$i = 0, label = 0;
 $0 = $p + 48 | 0;
 $lastpc$tr = $lastpc;
 $reg$tr = $reg;
 L1 : while (1) {
  $2 = _luaF_getlocalname($p, $reg$tr + 1 | 0, $lastpc$tr) | 0;
  HEAP32[$name >> 2] = $2;
  if ($2) {
   $$0 = 67640;
   label = 42;
   break;
  }
  if (($lastpc$tr | 0) <= 0) {
   $$0 = 0;
   label = 42;
   break;
  }
  $5 = HEAP32[$0 >> 2] | 0;
  $jmptarget$06$i = 0;
  $pc$08$i = 0;
  $setreg$07$i = -1;
  while (1) {
   $7 = HEAP32[$5 + ($pc$08$i << 2) >> 2] | 0;
   $8 = $7 & 63;
   $10 = $7 >>> 6 & 255;
   switch ($8 | 0) {
   case 4:
    {
     if (($10 | 0) > ($reg$tr | 0)) {
      $jmptarget$1$i = $jmptarget$06$i;
      $setreg$1$i = $setreg$07$i;
     } else if (($10 + ($7 >>> 23) | 0) < ($reg$tr | 0)) {
      $jmptarget$1$i = $jmptarget$06$i;
      $setreg$1$i = $setreg$07$i;
     } else {
      $jmptarget$1$i = $jmptarget$06$i;
      $setreg$1$i = ($pc$08$i | 0) < ($jmptarget$06$i | 0) ? -1 : $pc$08$i;
     }
     break;
    }
   case 37:
   case 36:
    {
     if (($10 | 0) > ($reg$tr | 0)) {
      $jmptarget$1$i = $jmptarget$06$i;
      $setreg$1$i = $setreg$07$i;
     } else {
      $jmptarget$1$i = $jmptarget$06$i;
      $setreg$1$i = ($pc$08$i | 0) < ($jmptarget$06$i | 0) ? -1 : $pc$08$i;
     }
     break;
    }
   case 41:
    {
     if (($10 + 2 | 0) > ($reg$tr | 0)) {
      $jmptarget$1$i = $jmptarget$06$i;
      $setreg$1$i = $setreg$07$i;
     } else {
      $jmptarget$1$i = $jmptarget$06$i;
      $setreg$1$i = ($pc$08$i | 0) < ($jmptarget$06$i | 0) ? -1 : $pc$08$i;
     }
     break;
    }
   case 30:
    {
     $23 = $pc$08$i + -131070 + ($7 >>> 14) | 0;
     $jmptarget$1$i = ($23 | 0) <= ($lastpc$tr | 0) & ($pc$08$i | 0) < ($23 | 0) & ($23 | 0) > ($jmptarget$06$i | 0) ? $23 : $jmptarget$06$i;
     $setreg$1$i = $setreg$07$i;
     break;
    }
   default:
    if ((HEAP8[59568 + $8 >> 0] & 64) != 0 & ($10 | 0) == ($reg$tr | 0)) {
     $jmptarget$1$i = $jmptarget$06$i;
     $setreg$1$i = ($pc$08$i | 0) < ($jmptarget$06$i | 0) ? -1 : $pc$08$i;
    } else {
     $jmptarget$1$i = $jmptarget$06$i;
     $setreg$1$i = $setreg$07$i;
    }
   }
   $pc$08$i = $pc$08$i + 1 | 0;
   if (($pc$08$i | 0) == ($lastpc$tr | 0)) break; else {
    $jmptarget$06$i = $jmptarget$1$i;
    $setreg$07$i = $setreg$1$i;
   }
  }
  if (($setreg$1$i | 0) == -1) {
   $$0 = 0;
   label = 42;
   break;
  }
  $34 = HEAP32[$5 + ($setreg$1$i << 2) >> 2] | 0;
  $35 = $34 & 63;
  switch ($35 | 0) {
  case 5:
   {
    label = 31;
    break L1;
    break;
   }
  case 1:
   {
    label = 32;
    break L1;
    break;
   }
  case 2:
   {
    label = 33;
    break L1;
    break;
   }
  case 7:
  case 6:
   {
    label = 20;
    break L1;
    break;
   }
  case 0:
   break;
  case 12:
   {
    label = 36;
    break L1;
    break;
   }
  default:
   {
    $$0 = 0;
    label = 42;
    break L1;
   }
  }
  $reg$tr = $34 >>> 23;
  if ($reg$tr >>> 0 >= ($34 >>> 6 & 255) >>> 0) {
   $$0 = 0;
   label = 42;
   break;
  } else $lastpc$tr = $setreg$1$i;
 }
 if ((label | 0) == 20) {
  $40 = $34 >>> 14;
  $42 = $34 >>> 23;
  if (($35 | 0) == 7) $66 = _luaF_getlocalname($p, $42 + 1 | 0, $setreg$1$i) | 0; else {
   $47 = HEAP32[(HEAP32[$p + 64 >> 2] | 0) + ($42 << 3) >> 2] | 0;
   $66 = ($47 | 0) == 0 ? 59048 : $47 + 24 | 0;
  }
  if (!($40 & 256)) {
   $62 = _getobjname($p, $setreg$1$i, $40 & 511, $name) | 0;
   if (!$62) label = 28; else if ((HEAP8[$62 >> 0] | 0) != 99) label = 28;
  } else {
   $52 = $40 & 255;
   $54 = HEAP32[$p + 44 >> 2] | 0;
   if ((HEAP32[$54 + ($52 << 3) + 4 >> 2] & 15 | 0) == 4) HEAP32[$name >> 2] = (HEAP32[$54 + ($52 << 3) >> 2] | 0) + 24; else label = 28;
  }
  if ((label | 0) == 28) HEAP32[$name >> 2] = 59048;
  if (!$66) {
   $$0 = 56056;
   return $$0 | 0;
  }
  $69 = (_strcmp($66, 66968) | 0) == 0;
  $$0 = $69 ? 56048 : 56056;
  return $$0 | 0;
 } else if ((label | 0) == 31) {
  $72 = HEAP32[(HEAP32[$p + 64 >> 2] | 0) + ($34 >>> 23 << 3) >> 2] | 0;
  HEAP32[$name >> 2] = ($72 | 0) == 0 ? 59048 : $72 + 24 | 0;
  $$0 = 56064;
  return $$0 | 0;
 } else if ((label | 0) == 32) $83 = $34 >>> 14; else if ((label | 0) == 33) $83 = (HEAP32[$5 + ($setreg$1$i + 1 << 2) >> 2] | 0) >>> 6; else if ((label | 0) == 36) {
  $90 = $34 >>> 14;
  if (!($90 & 256)) {
   $104 = _getobjname($p, $setreg$1$i, $90 & 511, $name) | 0;
   if ($104) if ((HEAP8[$104 >> 0] | 0) == 99) {
    $$0 = 56088;
    return $$0 | 0;
   }
  } else {
   $93 = $90 & 255;
   $95 = HEAP32[$p + 44 >> 2] | 0;
   if ((HEAP32[$95 + ($93 << 3) + 4 >> 2] & 15 | 0) == 4) {
    HEAP32[$name >> 2] = (HEAP32[$95 + ($93 << 3) >> 2] | 0) + 24;
    $$0 = 56088;
    return $$0 | 0;
   }
  }
  HEAP32[$name >> 2] = 59048;
  $$0 = 56088;
  return $$0 | 0;
 } else if ((label | 0) == 42) return $$0 | 0;
 $81 = HEAP32[$p + 44 >> 2] | 0;
 if ((HEAP32[$81 + ($83 << 3) + 4 >> 2] & 15 | 0) != 4) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP32[$name >> 2] = (HEAP32[$81 + ($83 << 3) >> 2] | 0) + 24;
 $$0 = 56072;
 return $$0 | 0;
}

function __ZN9b2Simplex9ReadCacheEPK14b2SimplexCachePK15b2DistanceProxyRK11b2TransformS5_S8_($this, $cache, $proxyA, $transformA, $proxyB, $transformB) {
 $this = $this | 0;
 $cache = $cache | 0;
 $proxyA = $proxyA | 0;
 $transformA = $transformA | 0;
 $proxyB = $proxyB | 0;
 $transformB = $transformB | 0;
 var $$0$i = 0.0, $$pr = 0, $$pr24 = 0, $1 = 0, $10 = 0, $103 = 0.0, $108 = 0.0, $11 = 0, $113 = 0.0, $12 = 0, $121 = 0.0, $126 = 0.0, $13 = 0, $14 = 0, $15 = 0, $150 = 0, $156 = 0.0, $157 = 0.0, $163 = 0, $169 = 0.0, $170 = 0.0, $172 = 0.0, $175 = 0.0, $179 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0, $19 = 0, $194 = 0.0, $197 = 0.0, $201 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $210 = 0, $217 = 0.0, $218 = 0.0, $219 = 0, $23 = 0, $29 = 0, $3 = 0, $35 = 0.0, $36 = 0.0, $4 = 0, $41 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $51 = 0.0, $55 = 0.0, $6 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $68 = 0.0, $7 = 0, $70 = 0.0, $74 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $9 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $i$027 = 0, label = 0;
 $1 = HEAP16[$cache + 4 >> 1] | 0;
 if (($1 & 65535) >= 4) ___assert_fail(82312, 82176, 102, 82336);
 $3 = $1 & 65535;
 $4 = $this + 108 | 0;
 HEAP32[$4 >> 2] = $3;
 L4 : do if (!($1 << 16 >> 16)) $$pr24 = $3; else {
  $6 = $proxyA + 20 | 0;
  $7 = $proxyA + 16 | 0;
  $8 = $proxyB + 20 | 0;
  $9 = $proxyB + 16 | 0;
  $10 = $transformA + 12 | 0;
  $11 = $transformA + 8 | 0;
  $12 = $transformA + 4 | 0;
  $13 = $transformB + 12 | 0;
  $14 = $transformB + 8 | 0;
  $15 = $transformB + 4 | 0;
  $i$027 = 0;
  while (1) {
   $19 = HEAPU8[$cache + $i$027 + 6 >> 0] | 0;
   HEAP32[$this + ($i$027 * 36 | 0) + 28 >> 2] = $19;
   $23 = HEAPU8[$cache + $i$027 + 9 >> 0] | 0;
   HEAP32[$this + ($i$027 * 36 | 0) + 32 >> 2] = $23;
   if ((HEAP32[$6 >> 2] | 0) <= ($19 | 0)) {
    label = 6;
    break;
   }
   $29 = (HEAP32[$7 >> 2] | 0) + ($19 << 3) | 0;
   $35 = +HEAPF32[$29 >> 2];
   $36 = +HEAPF32[$29 + 4 >> 2];
   if ((HEAP32[$8 >> 2] | 0) <= ($23 | 0)) {
    label = 8;
    break;
   }
   $41 = (HEAP32[$9 >> 2] | 0) + ($23 << 3) | 0;
   $47 = +HEAPF32[$41 >> 2];
   $48 = +HEAPF32[$41 + 4 >> 2];
   $49 = +HEAPF32[$10 >> 2];
   $51 = +HEAPF32[$11 >> 2];
   $55 = +HEAPF32[$transformA >> 2] + ($35 * $49 - $36 * $51);
   $61 = +$55;
   $62 = +($36 * $49 + $35 * $51 + +HEAPF32[$12 >> 2]);
   $63 = $this + ($i$027 * 36 | 0) | 0;
   HEAPF32[$63 >> 2] = $61;
   HEAPF32[$63 + 4 >> 2] = $62;
   $68 = +HEAPF32[$13 >> 2];
   $70 = +HEAPF32[$14 >> 2];
   $74 = +HEAPF32[$transformB >> 2] + ($47 * $68 - $48 * $70);
   $80 = +$74;
   $81 = +($48 * $68 + $47 * $70 + +HEAPF32[$15 >> 2]);
   $82 = $this + ($i$027 * 36 | 0) + 8 | 0;
   HEAPF32[$82 >> 2] = $80;
   HEAPF32[$82 + 4 >> 2] = $81;
   $93 = +($74 - $55);
   $94 = +(+HEAPF32[$this + ($i$027 * 36 | 0) + 12 >> 2] - +HEAPF32[$this + ($i$027 * 36 | 0) + 4 >> 2]);
   $95 = $this + ($i$027 * 36 | 0) + 16 | 0;
   HEAPF32[$95 >> 2] = $93;
   HEAPF32[$95 + 4 >> 2] = $94;
   HEAPF32[$this + ($i$027 * 36 | 0) + 24 >> 2] = 0.0;
   $i$027 = $i$027 + 1 | 0;
   $$pr = HEAP32[$4 >> 2] | 0;
   if (($i$027 | 0) >= ($$pr | 0)) {
    $$pr24 = $$pr;
    break L4;
   }
  }
  if ((label | 0) == 6) ___assert_fail(90792, 90824, 103, 90888); else if ((label | 0) == 8) ___assert_fail(90792, 90824, 103, 90888);
 } while (0);
 do if (($$pr24 | 0) > 1) {
  $103 = +HEAPF32[$cache >> 2];
  if (($$pr24 | 0) == 2) {
   $108 = +HEAPF32[$this + 16 >> 2] - +HEAPF32[$this + 52 >> 2];
   $113 = +HEAPF32[$this + 20 >> 2] - +HEAPF32[$this + 56 >> 2];
   $$0$i = +Math_sqrt(+($108 * $108 + $113 * $113));
  } else if (($$pr24 | 0) == 3) {
   $121 = +HEAPF32[$this + 16 >> 2];
   $126 = +HEAPF32[$this + 20 >> 2];
   $$0$i = (+HEAPF32[$this + 52 >> 2] - $121) * (+HEAPF32[$this + 92 >> 2] - $126) - (+HEAPF32[$this + 56 >> 2] - $126) * (+HEAPF32[$this + 88 >> 2] - $121);
  } else ___assert_fail(90768, 82176, 260, 82256);
  if (!($$0$i < $103 * .5)) if (!($103 * 2.0 < $$0$i | $$0$i < 1.1920928955078125e-07)) {
   label = 18;
   break;
  }
  HEAP32[$4 >> 2] = 0;
 } else label = 18; while (0);
 if ((label | 0) == 18) if ($$pr24) return;
 HEAP32[$this + 28 >> 2] = 0;
 HEAP32[$this + 32 >> 2] = 0;
 if ((HEAP32[$proxyA + 20 >> 2] | 0) <= 0) ___assert_fail(90792, 90824, 103, 90888);
 $150 = HEAP32[$proxyA + 16 >> 2] | 0;
 $156 = +HEAPF32[$150 >> 2];
 $157 = +HEAPF32[$150 + 4 >> 2];
 if ((HEAP32[$proxyB + 20 >> 2] | 0) <= 0) ___assert_fail(90792, 90824, 103, 90888);
 $163 = HEAP32[$proxyB + 16 >> 2] | 0;
 $169 = +HEAPF32[$163 >> 2];
 $170 = +HEAPF32[$163 + 4 >> 2];
 $172 = +HEAPF32[$transformA + 12 >> 2];
 $175 = +HEAPF32[$transformA + 8 >> 2];
 $179 = +HEAPF32[$transformA >> 2] + ($156 * $172 - $157 * $175);
 $185 = $157 * $172 + $156 * $175 + +HEAPF32[$transformA + 4 >> 2];
 $186 = +$179;
 $187 = +$185;
 $188 = $this;
 HEAPF32[$188 >> 2] = $186;
 HEAPF32[$188 + 4 >> 2] = $187;
 $194 = +HEAPF32[$transformB + 12 >> 2];
 $197 = +HEAPF32[$transformB + 8 >> 2];
 $201 = +HEAPF32[$transformB >> 2] + ($169 * $194 - $170 * $197);
 $207 = $170 * $194 + $169 * $197 + +HEAPF32[$transformB + 4 >> 2];
 $208 = +$201;
 $209 = +$207;
 $210 = $this + 8 | 0;
 HEAPF32[$210 >> 2] = $208;
 HEAPF32[$210 + 4 >> 2] = $209;
 $217 = +($201 - $179);
 $218 = +($207 - $185);
 $219 = $this + 16 | 0;
 HEAPF32[$219 >> 2] = $217;
 HEAPF32[$219 + 4 >> 2] = $218;
 HEAPF32[$this + 24 >> 2] = 1.0;
 HEAP32[$4 >> 2] = 1;
 return;
}

function _stbtt_FindGlyphIndex($info, $unicode_codepoint) {
 $info = $info | 0;
 $unicode_codepoint = $unicode_codepoint | 0;
 var $$0 = 0, $$search$1 = 0, $$sum1 = 0, $$sum10 = 0, $$sum12 = 0, $$sum14 = 0, $$sum19 = 0, $$sum2 = 0, $$sum25 = 0, $$sum28 = 0, $$sum32 = 0, $$sum38 = 0, $$sum9 = 0, $1 = 0, $12 = 0, $120 = 0, $138 = 0, $148 = 0, $171 = 0, $193 = 0, $212 = 0, $251 = 0, $3 = 0, $33 = 0, $63 = 0, $64 = 0, $81 = 0, $92 = 0, $entrySelector$074 = 0, $high$0 = 0, $high$0$ph = 0, $low$0$ph = 0, $search$1$lcssa = 0, $search$173 = 0, $searchRange$075 = 0, label = 0;
 $1 = HEAP32[$info + 4 >> 2] | 0;
 $3 = HEAP32[$info + 40 >> 2] | 0;
 $12 = ((HEAPU8[$1 + $3 >> 0] | 0) << 8 | (HEAPU8[$1 + ($3 + 1) >> 0] | 0)) & 65535;
 if (!($12 << 16 >> 16)) {
  if ((((HEAPU8[$1 + ($3 + 2) >> 0] | 0) << 8 | (HEAPU8[$1 + ($3 + 3) >> 0] | 0)) + -6 | 0) <= ($unicode_codepoint | 0)) {
   $$0 = 0;
   return $$0 | 0;
  }
  $$0 = HEAPU8[$1 + ($unicode_codepoint + 6 + $3) >> 0] | 0;
  return $$0 | 0;
 } else if ($12 << 16 >> 16 == 6) {
  $33 = (HEAPU8[$1 + ($3 + 6) >> 0] | 0) << 8 | (HEAPU8[$1 + ($3 + 7) >> 0] | 0);
  if ($33 >>> 0 > $unicode_codepoint >>> 0) {
   $$0 = 0;
   return $$0 | 0;
  }
  if ((((HEAPU8[$1 + ($3 + 8) >> 0] | 0) << 8 | (HEAPU8[$1 + ($3 + 9) >> 0] | 0)) + $33 | 0) >>> 0 <= $unicode_codepoint >>> 0) {
   $$0 = 0;
   return $$0 | 0;
  }
  $$sum38 = $3 + 10 + ($unicode_codepoint - $33 << 1) | 0;
  $$0 = (HEAPU8[$1 + $$sum38 >> 0] | 0) << 8 | (HEAPU8[$1 + ($$sum38 + 1) >> 0] | 0);
  return $$0 | 0;
 } else if ($12 << 16 >> 16 == 4) {
  $63 = ((HEAPU8[$1 + ($3 + 6) >> 0] | 0) << 8 | (HEAPU8[$1 + ($3 + 7) >> 0] | 0)) >>> 1;
  $64 = $3 + 14 | 0;
  if (($unicode_codepoint | 0) > 65535) {
   $$0 = 0;
   return $$0 | 0;
  }
  $81 = (HEAPU8[$1 + ($3 + 11) >> 0] | 0 | (HEAPU8[$1 + ($3 + 10) >> 0] | 0) << 8) & 65535;
  $$sum9 = ((HEAPU8[$1 + ($3 + 13) >> 0] | 0) & 254 | (HEAPU8[$1 + ($3 + 12) >> 0] | 0) << 8) + $64 | 0;
  $92 = (((HEAPU8[$1 + $$sum9 >> 0] | 0) << 8 | (HEAPU8[$1 + ($$sum9 + 1) >> 0] | 0) | 0) > ($unicode_codepoint | 0) ? $64 : $$sum9) + -2 | 0;
  if (!($81 << 16 >> 16)) $search$1$lcssa = $92; else {
   $entrySelector$074 = $81;
   $search$173 = $92;
   $searchRange$075 = ((HEAPU8[$1 + ($3 + 9) >> 0] | 0 | (HEAPU8[$1 + ($3 + 8) >> 0] | 0) << 8) & 65535) >>> 1;
   while (1) {
    $searchRange$075 = ($searchRange$075 & 65535) >>> 1;
    $$sum32 = (($searchRange$075 & 65535) << 1) + $search$173 | 0;
    $$search$1 = ((HEAPU8[$1 + $$sum32 >> 0] | 0) << 8 | (HEAPU8[$1 + ($$sum32 + 1) >> 0] | 0) | 0) < ($unicode_codepoint | 0) ? $$sum32 : $search$173;
    $entrySelector$074 = $entrySelector$074 + -1 << 16 >> 16;
    if (!($entrySelector$074 << 16 >> 16)) {
     $search$1$lcssa = $$search$1;
     break;
    } else $search$173 = $$search$1;
   }
  }
  $120 = -14 - $3 + 2 + $search$1$lcssa & 131070;
  $$sum10 = $120 + $64 | 0;
  if (((HEAPU8[$1 + $$sum10 >> 0] | 0) << 8 | (HEAPU8[$1 + ($$sum10 + 1) >> 0] | 0) | 0) < ($unicode_codepoint | 0)) ___assert_fail(81072, 81016, 931, 81048);
  $$sum12 = $3 + 16 | 0;
  $$sum14 = $$sum12 + ($63 << 1) + $120 | 0;
  $138 = (HEAPU8[$1 + $$sum14 >> 0] | 0) << 8 | (HEAPU8[$1 + ($$sum14 + 1) >> 0] | 0);
  if (($138 | 0) > ($unicode_codepoint | 0)) {
   $$0 = 0;
   return $$0 | 0;
  }
  $$sum19 = $$sum12 + ($63 * 6 | 0) + $120 | 0;
  $148 = (HEAPU8[$1 + $$sum19 >> 0] | 0) << 8 | (HEAPU8[$1 + ($$sum19 + 1) >> 0] | 0);
  if (!$148) {
   $$sum28 = $$sum12 + ($63 << 2) + $120 | 0;
   $$0 = ((HEAPU8[$1 + $$sum28 >> 0] | 0) << 8 | (HEAPU8[$1 + ($$sum28 + 1) >> 0] | 0)) + $unicode_codepoint & 65535;
   return $$0 | 0;
  } else {
   $$sum25 = $$sum19 + ($unicode_codepoint - $138 << 1) + $148 | 0;
   $$0 = (HEAPU8[$1 + $$sum25 >> 0] | 0) << 8 | (HEAPU8[$1 + ($$sum25 + 1) >> 0] | 0);
   return $$0 | 0;
  }
 } else if ($12 << 16 >> 16 == 2) ___assert_fail(81008, 81016, 893, 81048); else {
  $171 = $12 << 16 >> 16 == 12;
  if (($12 + -12 & 65535) >= 2) ___assert_fail(81008, 81016, 966, 81048);
  $$sum1 = $3 + 16 | 0;
  $high$0$ph = (HEAPU8[$1 + ($3 + 13) >> 0] | 0) << 16 | (HEAPU8[$1 + ($3 + 12) >> 0] | 0) << 24 | (HEAPU8[$1 + ($3 + 14) >> 0] | 0) << 8 | (HEAPU8[$1 + ($3 + 15) >> 0] | 0);
  $low$0$ph = 0;
  L19 : while (1) {
   $high$0 = $high$0$ph;
   while (1) {
    if (($low$0$ph | 0) >= ($high$0 | 0)) {
     $$0 = 0;
     label = 27;
     break L19;
    }
    $193 = ($high$0 - $low$0$ph >> 1) + $low$0$ph | 0;
    $$sum2 = $$sum1 + ($193 * 12 | 0) | 0;
    $212 = (HEAPU8[$1 + ($$sum2 + 1) >> 0] | 0) << 16 | (HEAPU8[$1 + $$sum2 >> 0] | 0) << 24 | (HEAPU8[$1 + ($$sum2 + 2) >> 0] | 0) << 8 | (HEAPU8[$1 + ($$sum2 + 3) >> 0] | 0);
    if ($212 >>> 0 > $unicode_codepoint >>> 0) $high$0 = $193; else break;
   }
   if (((HEAPU8[$1 + ($$sum2 + 4) >> 0] | 0) << 24 | (HEAPU8[$1 + ($$sum2 + 5) >> 0] | 0) << 16 | (HEAPU8[$1 + ($$sum2 + 6) >> 0] | 0) << 8 | (HEAPU8[$1 + ($$sum2 + 7) >> 0] | 0)) >>> 0 < $unicode_codepoint >>> 0) {
    $high$0$ph = $high$0;
    $low$0$ph = $193 + 1 | 0;
   } else break;
  }
  if ((label | 0) == 27) return $$0 | 0;
  $251 = (HEAPU8[$1 + ($$sum2 + 9) >> 0] | 0) << 16 | (HEAPU8[$1 + ($$sum2 + 8) >> 0] | 0) << 24 | (HEAPU8[$1 + ($$sum2 + 10) >> 0] | 0) << 8 | (HEAPU8[$1 + ($$sum2 + 11) >> 0] | 0);
  if (!$171) {
   $$0 = $251;
   return $$0 | 0;
  }
  $$0 = $unicode_codepoint - $212 + $251 | 0;
  return $$0 | 0;
 }
 return 0;
}

function _png_read_start_row($png_ptr) {
 $png_ptr = $png_ptr | 0;
 var $0 = 0, $102 = 0, $103 = 0, $112 = 0, $113 = 0, $114 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $14 = 0, $140 = 0, $145 = 0, $146 = 0, $153 = 0, $17 = 0, $20 = 0, $33 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $45 = 0, $47 = 0, $49 = 0, $68 = 0, $70 = 0, $71 = 0, $73 = 0, $8 = 0, $83 = 0, $87 = 0, $96 = 0, $max_pixel_depth$0 = 0, $max_pixel_depth$2 = 0, $max_pixel_depth$3 = 0, $max_pixel_depth$4 = 0, $max_pixel_depth$5 = 0, $max_pixel_depth$6 = 0, $storemerge = 0, label = 0;
 _png_init_read_transformations($png_ptr);
 $0 = $png_ptr + 432 | 0;
 if (!(HEAP8[$0 >> 0] | 0)) {
  HEAP32[$png_ptr + 356 >> 2] = HEAP32[$png_ptr + 352 >> 2];
  $33 = HEAP32[$png_ptr + 348 >> 2] | 0;
  HEAP32[$png_ptr + 368 >> 2] = $33;
  $102 = $33;
  $40 = HEAP32[$png_ptr + 216 >> 2] | 0;
 } else {
  $4 = HEAP32[$png_ptr + 216 >> 2] | 0;
  $8 = HEAP32[$png_ptr + 352 >> 2] | 0;
  if (!($4 & 2)) HEAP32[$png_ptr + 356 >> 2] = ($8 + 7 | 0) >>> 3; else HEAP32[$png_ptr + 356 >> 2] = $8;
  $14 = HEAP32[$png_ptr + 348 >> 2] | 0;
  $17 = HEAPU8[$png_ptr + 433 >> 0] | 0;
  $20 = HEAPU8[77e3 + $17 >> 0] | 0;
  HEAP32[$png_ptr + 368 >> 2] = (($14 + -1 + $20 - (HEAPU8[76992 + $17 >> 0] | 0) | 0) >>> 0) / ($20 >>> 0) | 0;
  $102 = $14;
  $40 = $4;
 }
 $37 = HEAPU8[$png_ptr + 438 >> 0] | 0;
 $38 = $png_ptr + 216 | 0;
 if (!($40 & 4)) $max_pixel_depth$0 = $37; else $max_pixel_depth$0 = (HEAPU8[$png_ptr + 436 >> 0] | 0) < 8 ? 8 : $37;
 $45 = HEAP32[$38 >> 2] | 0;
 $47 = ($45 & 4096 | 0) == 0;
 do if ($47) $max_pixel_depth$2 = $max_pixel_depth$0; else {
  $49 = HEAP8[$png_ptr + 435 >> 0] | 0;
  if (!($49 << 24 >> 24)) {
   $max_pixel_depth$2 = ($max_pixel_depth$0 >>> 0 < 8 ? 8 : $max_pixel_depth$0) << ((HEAP16[$png_ptr + 428 >> 1] | 0) != 0 & 1);
   break;
  } else if ($49 << 24 >> 24 == 3) {
   $max_pixel_depth$2 = (HEAP16[$png_ptr + 428 >> 1] | 0) == 0 ? 24 : 32;
   break;
  } else if ($49 << 24 >> 24 == 2) {
   if (!(HEAP16[$png_ptr + 428 >> 1] | 0)) {
    $max_pixel_depth$2 = $max_pixel_depth$0;
    break;
   }
   $max_pixel_depth$2 = ($max_pixel_depth$0 << 2 >>> 0) / 3 | 0;
   break;
  } else {
   $max_pixel_depth$2 = $max_pixel_depth$0;
   break;
  }
 } while (0);
 do if (!($45 & 512)) {
  $70 = $45;
  $max_pixel_depth$3 = $max_pixel_depth$2;
 } else if ($47) {
  $68 = $45 & -513;
  HEAP32[$38 >> 2] = $68;
  $70 = $68;
  $max_pixel_depth$3 = $max_pixel_depth$2;
  break;
 } else {
  $70 = $45;
  $max_pixel_depth$3 = $max_pixel_depth$2 << ((HEAPU8[$png_ptr + 436 >> 0] | 0) < 16 & 1);
  break;
 } while (0);
 $71 = ($70 & 32768 | 0) == 0;
 do if ($71) $max_pixel_depth$4 = $max_pixel_depth$3; else {
  $73 = HEAP8[$png_ptr + 435 >> 0] | 0;
  if (!($73 << 24 >> 24)) {
   $max_pixel_depth$4 = ($max_pixel_depth$3 | 0) < 9 ? 16 : 32;
   break;
  } else if ($73 << 24 >> 24 == 3 | $73 << 24 >> 24 == 2) {
   $max_pixel_depth$4 = ($max_pixel_depth$3 | 0) < 33 ? 32 : 64;
   break;
  } else {
   $max_pixel_depth$4 = $max_pixel_depth$3;
   break;
  }
 } while (0);
 do if (!($70 & 16384)) $max_pixel_depth$5 = $max_pixel_depth$4; else {
  if (!(HEAP16[$png_ptr + 428 >> 1] | 0)) {
   if ($71) label = 27;
  } else if (!(($70 & 4096 | 0) != 0 | $71 ^ 1)) label = 27;
  if ((label | 0) == 27) {
   $83 = HEAP8[$png_ptr + 435 >> 0] | 0;
   if ($83 << 24 >> 24 != 4) {
    $87 = $83 << 24 >> 24 == 6;
    if (($max_pixel_depth$4 | 0) < 9) {
     $max_pixel_depth$5 = $87 ? 32 : 24;
     break;
    } else {
     $max_pixel_depth$5 = $87 ? 64 : 48;
     break;
    }
   }
  }
  $max_pixel_depth$5 = ($max_pixel_depth$4 | 0) < 17 ? 32 : 64;
 } while (0);
 if (!($70 & 1048576)) $max_pixel_depth$6 = $max_pixel_depth$5; else {
  $96 = Math_imul(HEAPU8[$png_ptr + 205 >> 0] | 0, HEAPU8[$png_ptr + 204 >> 0] | 0) | 0;
  $max_pixel_depth$6 = ($96 | 0) > ($max_pixel_depth$5 | 0) ? $96 : $max_pixel_depth$5;
 }
 HEAP8[$png_ptr + 442 >> 0] = $max_pixel_depth$6;
 HEAP8[$png_ptr + 443 >> 0] = 0;
 $103 = $102 + 7 & -8;
 if (($max_pixel_depth$6 | 0) > 7) $113 = Math_imul($103, $max_pixel_depth$6 >>> 3) | 0; else $113 = (Math_imul($103, $max_pixel_depth$6) | 0) >>> 3;
 $112 = ($max_pixel_depth$6 + 7 >> 3) + 49 + $113 | 0;
 $114 = $png_ptr + 784 | 0;
 if ($112 >>> 0 > (HEAP32[$114 >> 2] | 0) >>> 0) {
  $117 = $png_ptr + 728 | 0;
  _png_free($png_ptr, HEAP32[$117 >> 2] | 0);
  $119 = $png_ptr + 804 | 0;
  _png_free($png_ptr, HEAP32[$119 >> 2] | 0);
  if (!(HEAP8[$0 >> 0] | 0)) $storemerge = _png_malloc($png_ptr, $112) | 0; else $storemerge = _png_calloc($png_ptr, $112) | 0;
  HEAP32[$117 >> 2] = $storemerge;
  $125 = _png_malloc($png_ptr, $112) | 0;
  HEAP32[$119 >> 2] = $125;
  $126 = HEAP32[$117 >> 2] | 0;
  HEAP32[$png_ptr + 384 >> 2] = $126 + ($126 + 32 & 15 ^ 31);
  HEAP32[$png_ptr + 380 >> 2] = $125 + ($125 + 32 & 15 ^ 31);
  HEAP32[$114 >> 2] = $112;
 }
 $140 = HEAP32[$png_ptr + 364 >> 2] | 0;
 if (($140 | 0) == -1) _png_error($png_ptr, 77008);
 _memset(HEAP32[$png_ptr + 380 >> 2] | 0, 0, $140 + 1 | 0) | 0;
 $145 = $png_ptr + 788 | 0;
 $146 = HEAP32[$145 >> 2] | 0;
 if ($146) {
  HEAP32[$png_ptr + 792 >> 2] = 0;
  HEAP32[$145 >> 2] = 0;
  _png_free($png_ptr, $146);
 }
 if (!(_png_inflate_claim($png_ptr, 1229209940) | 0)) {
  $153 = $png_ptr + 212 | 0;
  HEAP32[$153 >> 2] = HEAP32[$153 >> 2] | 64;
  return;
 } else _png_error($png_ptr, HEAP32[$png_ptr + 248 >> 2] | 0);
}

function _adler32($adler, $buf, $len) {
 $adler = $adler | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $$ = 0, $$010 = 0, $$0112 = 0, $$013 = 0, $$1239 = 0, $$140 = 0, $$16$lcssa = 0, $$1611 = 0, $$228 = 0, $$23 = 0, $$319 = 0, $$3427 = 0, $$3838 = 0, $$418 = 0, $$49 = 0, $$526 = 0, $$6$lcssa = 0, $$617 = 0, $$7 = 0, $0 = 0, $1 = 0, $102 = 0, $121 = 0, $126 = 0, $131 = 0, $136 = 0, $141 = 0, $146 = 0, $151 = 0, $156 = 0, $161 = 0, $166 = 0, $171 = 0, $176 = 0, $181 = 0, $186 = 0, $191 = 0, $204 = 0, $205 = 0, $21 = 0, $22 = 0, $32 = 0, $37 = 0, $42 = 0, $47 = 0, $5 = 0, $52 = 0, $57 = 0, $62 = 0, $67 = 0, $72 = 0, $77 = 0, $8 = 0, $82 = 0, $87 = 0, $92 = 0, $97 = 0, $n$0 = 0, $sum2$1$lcssa = 0, $sum2$114 = 0, $sum2$241 = 0, $sum2$3 = 0, $sum2$429 = 0, $sum2$5$lcssa = 0, $sum2$520 = 0, $sum2$6 = 0, label = 0;
 $0 = $adler >>> 16;
 $1 = $adler & 65535;
 if (($len | 0) == 1) {
  $5 = (HEAPU8[$buf >> 0] | 0) + $1 | 0;
  $$ = $5 >>> 0 > 65520 ? $5 + -65521 | 0 : $5;
  $8 = $$ + $0 | 0;
  $$010 = ($8 >>> 0 > 65520 ? $8 + 15 | 0 : $8) << 16 | $$;
  return $$010 | 0;
 }
 if (!$buf) {
  $$010 = 1;
  return $$010 | 0;
 }
 if ($len >>> 0 < 16) {
  if (!$len) {
   $$16$lcssa = $1;
   $sum2$1$lcssa = $0;
  } else {
   $$0112 = $buf;
   $$013 = $len;
   $$1611 = $1;
   $sum2$114 = $0;
   while (1) {
    $$013 = $$013 + -1 | 0;
    $21 = (HEAPU8[$$0112 >> 0] | 0) + $$1611 | 0;
    $22 = $21 + $sum2$114 | 0;
    if (!$$013) {
     $$16$lcssa = $21;
     $sum2$1$lcssa = $22;
     break;
    } else {
     $$0112 = $$0112 + 1 | 0;
     $$1611 = $21;
     $sum2$114 = $22;
    }
   }
  }
  $$010 = (($sum2$1$lcssa >>> 0) % 65521 | 0) << 16 | ($$16$lcssa >>> 0 > 65520 ? $$16$lcssa + -65521 | 0 : $$16$lcssa);
  return $$010 | 0;
 }
 if ($len >>> 0 > 5551) {
  $$1239 = $buf;
  $$140 = $len;
  $$3838 = $1;
  $sum2$241 = $0;
  do {
   $$140 = $$140 + -5552 | 0;
   $$23 = $$1239;
   $$49 = $$3838;
   $n$0 = 347;
   $sum2$3 = $sum2$241;
   while (1) {
    $32 = (HEAPU8[$$23 >> 0] | 0) + $$49 | 0;
    $37 = $32 + (HEAPU8[$$23 + 1 >> 0] | 0) | 0;
    $42 = $37 + (HEAPU8[$$23 + 2 >> 0] | 0) | 0;
    $47 = $42 + (HEAPU8[$$23 + 3 >> 0] | 0) | 0;
    $52 = $47 + (HEAPU8[$$23 + 4 >> 0] | 0) | 0;
    $57 = $52 + (HEAPU8[$$23 + 5 >> 0] | 0) | 0;
    $62 = $57 + (HEAPU8[$$23 + 6 >> 0] | 0) | 0;
    $67 = $62 + (HEAPU8[$$23 + 7 >> 0] | 0) | 0;
    $72 = $67 + (HEAPU8[$$23 + 8 >> 0] | 0) | 0;
    $77 = $72 + (HEAPU8[$$23 + 9 >> 0] | 0) | 0;
    $82 = $77 + (HEAPU8[$$23 + 10 >> 0] | 0) | 0;
    $87 = $82 + (HEAPU8[$$23 + 11 >> 0] | 0) | 0;
    $92 = $87 + (HEAPU8[$$23 + 12 >> 0] | 0) | 0;
    $97 = $92 + (HEAPU8[$$23 + 13 >> 0] | 0) | 0;
    $102 = $97 + (HEAPU8[$$23 + 14 >> 0] | 0) | 0;
    $$49 = $102 + (HEAPU8[$$23 + 15 >> 0] | 0) | 0;
    $sum2$3 = $32 + $sum2$3 + $37 + $42 + $47 + $52 + $57 + $62 + $67 + $72 + $77 + $82 + $87 + $92 + $97 + $102 + $$49 | 0;
    $n$0 = $n$0 + -1 | 0;
    if (!$n$0) break; else $$23 = $$23 + 16 | 0;
   }
   $$1239 = $$1239 + 5552 | 0;
   $$3838 = ($$49 >>> 0) % 65521 | 0;
   $sum2$241 = ($sum2$3 >>> 0) % 65521 | 0;
  } while ($$140 >>> 0 > 5551);
  if (!$$140) {
   $$7 = $$3838;
   $sum2$6 = $sum2$241;
  } else if ($$140 >>> 0 > 15) {
   $$228 = $$140;
   $$3427 = $$1239;
   $$526 = $$3838;
   $sum2$429 = $sum2$241;
   label = 15;
  } else {
   $$319 = $$140;
   $$418 = $$1239;
   $$617 = $$3838;
   $sum2$520 = $sum2$241;
   label = 16;
  }
 } else {
  $$228 = $len;
  $$3427 = $buf;
  $$526 = $1;
  $sum2$429 = $0;
  label = 15;
 }
 if ((label | 0) == 15) {
  while (1) {
   label = 0;
   $$228 = $$228 + -16 | 0;
   $121 = (HEAPU8[$$3427 >> 0] | 0) + $$526 | 0;
   $126 = $121 + (HEAPU8[$$3427 + 1 >> 0] | 0) | 0;
   $131 = $126 + (HEAPU8[$$3427 + 2 >> 0] | 0) | 0;
   $136 = $131 + (HEAPU8[$$3427 + 3 >> 0] | 0) | 0;
   $141 = $136 + (HEAPU8[$$3427 + 4 >> 0] | 0) | 0;
   $146 = $141 + (HEAPU8[$$3427 + 5 >> 0] | 0) | 0;
   $151 = $146 + (HEAPU8[$$3427 + 6 >> 0] | 0) | 0;
   $156 = $151 + (HEAPU8[$$3427 + 7 >> 0] | 0) | 0;
   $161 = $156 + (HEAPU8[$$3427 + 8 >> 0] | 0) | 0;
   $166 = $161 + (HEAPU8[$$3427 + 9 >> 0] | 0) | 0;
   $171 = $166 + (HEAPU8[$$3427 + 10 >> 0] | 0) | 0;
   $176 = $171 + (HEAPU8[$$3427 + 11 >> 0] | 0) | 0;
   $181 = $176 + (HEAPU8[$$3427 + 12 >> 0] | 0) | 0;
   $186 = $181 + (HEAPU8[$$3427 + 13 >> 0] | 0) | 0;
   $191 = $186 + (HEAPU8[$$3427 + 14 >> 0] | 0) | 0;
   $$526 = $191 + (HEAPU8[$$3427 + 15 >> 0] | 0) | 0;
   $sum2$429 = $121 + $sum2$429 + $126 + $131 + $136 + $141 + $146 + $151 + $156 + $161 + $166 + $171 + $176 + $181 + $186 + $191 + $$526 | 0;
   $$3427 = $$3427 + 16 | 0;
   if ($$228 >>> 0 <= 15) break; else label = 15;
  }
  if (!$$228) {
   $$6$lcssa = $$526;
   $sum2$5$lcssa = $sum2$429;
   label = 17;
  } else {
   $$319 = $$228;
   $$418 = $$3427;
   $$617 = $$526;
   $sum2$520 = $sum2$429;
   label = 16;
  }
 }
 if ((label | 0) == 16) while (1) {
  label = 0;
  $$319 = $$319 + -1 | 0;
  $204 = (HEAPU8[$$418 >> 0] | 0) + $$617 | 0;
  $205 = $204 + $sum2$520 | 0;
  if (!$$319) {
   $$6$lcssa = $204;
   $sum2$5$lcssa = $205;
   label = 17;
   break;
  } else {
   $$418 = $$418 + 1 | 0;
   $$617 = $204;
   $sum2$520 = $205;
   label = 16;
  }
 }
 if ((label | 0) == 17) {
  $$7 = ($$6$lcssa >>> 0) % 65521 | 0;
  $sum2$6 = ($sum2$5$lcssa >>> 0) % 65521 | 0;
 }
 $$010 = $sum2$6 << 16 | $$7;
 return $$010 | 0;
}

function __ZN11b2WeldJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $$pn = 0.0, $$pn30 = 0.0, $$pn31 = 0.0, $$pn32 = 0.0, $$pn33 = 0.0, $$pn34 = 0.0, $0 = 0, $1 = 0, $109 = 0.0, $11 = 0.0, $112 = 0.0, $119 = 0.0, $12 = 0.0, $122 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $14 = 0.0, $15 = 0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $165 = 0, $168 = 0, $18 = 0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $24 = 0.0, $25 = 0.0, $27 = 0.0, $29 = 0.0, $3 = 0, $31 = 0.0, $33 = 0.0, $35 = 0.0, $4 = 0, $47 = 0, $48 = 0.0, $5 = 0, $51 = 0.0, $52 = 0.0, $55 = 0.0, $57 = 0.0, $59 = 0.0, $62 = 0.0, $69 = 0.0, $72 = 0.0, $74 = 0.0, $75 = 0.0, $82 = 0.0, $89 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0, $95 = 0, $wA$0 = 0.0, $wB$0 = 0.0;
 $0 = $this + 116 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $data + 28 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $3 + ($1 * 12 | 0) | 0;
 $5 = $4;
 $11 = +HEAPF32[$5 >> 2];
 $12 = +HEAPF32[$5 + 4 >> 2];
 $14 = +HEAPF32[$3 + ($1 * 12 | 0) + 8 >> 2];
 $15 = $this + 120 | 0;
 $16 = HEAP32[$15 >> 2] | 0;
 $18 = $3 + ($16 * 12 | 0) | 0;
 $24 = +HEAPF32[$18 >> 2];
 $25 = +HEAPF32[$18 + 4 >> 2];
 $27 = +HEAPF32[$3 + ($16 * 12 | 0) + 8 >> 2];
 $29 = +HEAPF32[$this + 156 >> 2];
 $31 = +HEAPF32[$this + 160 >> 2];
 $33 = +HEAPF32[$this + 164 >> 2];
 $35 = +HEAPF32[$this + 168 >> 2];
 if (+HEAPF32[$this + 68 >> 2] > 0.0) {
  $47 = $this + 112 | 0;
  $48 = +HEAPF32[$47 >> 2];
  $51 = +HEAPF32[$this + 204 >> 2] * ($27 - $14 + +HEAPF32[$this + 76 >> 2] + +HEAPF32[$this + 100 >> 2] * $48);
  $52 = -$51;
  HEAPF32[$47 >> 2] = $48 - $51;
  $55 = $14 - $33 * $52;
  $57 = $27 + $35 * $52;
  $59 = +HEAPF32[$this + 136 >> 2];
  $62 = +HEAPF32[$this + 132 >> 2];
  $69 = +HEAPF32[$this + 128 >> 2];
  $72 = +HEAPF32[$this + 124 >> 2];
  $74 = $69 * $55 + ($24 - $59 * $57 - $11);
  $75 = $25 + $62 * $57 - $12 - $72 * $55;
  $82 = +HEAPF32[$this + 172 >> 2] * $74 + +HEAPF32[$this + 184 >> 2] * $75;
  $89 = +HEAPF32[$this + 176 >> 2] * $74 + +HEAPF32[$this + 188 >> 2] * $75;
  $90 = -$82;
  $91 = -$89;
  $92 = $this + 104 | 0;
  HEAPF32[$92 >> 2] = +HEAPF32[$92 >> 2] - $82;
  $95 = $this + 108 | 0;
  HEAPF32[$95 >> 2] = +HEAPF32[$95 >> 2] - $89;
  $$pn33 = $91;
  $$pn34 = $90;
  $wA$0 = $55 - $33 * ($72 * $91 - $69 * $90);
  $wB$0 = $57 + $35 * ($62 * $91 - $59 * $90);
  $$pn32 = $31 * $$pn34;
  $$pn31 = $31 * $$pn33;
  $$pn30 = $29 * $$pn34;
  $$pn = $29 * $$pn33;
  $183 = $24 + $$pn32;
  $184 = $25 + $$pn31;
  $185 = $11 - $$pn30;
  $186 = $12 - $$pn;
  $187 = +$185;
  $188 = +$186;
  $189 = $4;
  $190 = $189;
  HEAPF32[$190 >> 2] = $187;
  $191 = $189 + 4 | 0;
  $192 = $191;
  HEAPF32[$192 >> 2] = $188;
  $193 = HEAP32[$0 >> 2] | 0;
  $194 = HEAP32[$2 >> 2] | 0;
  $195 = $194 + ($193 * 12 | 0) + 8 | 0;
  HEAPF32[$195 >> 2] = $wA$0;
  $196 = HEAP32[$15 >> 2] | 0;
  $197 = $194 + ($196 * 12 | 0) | 0;
  $198 = +$183;
  $199 = +$184;
  $200 = $197;
  $201 = $200;
  HEAPF32[$201 >> 2] = $198;
  $202 = $200 + 4 | 0;
  $203 = $202;
  HEAPF32[$203 >> 2] = $199;
  $204 = HEAP32[$15 >> 2] | 0;
  $205 = HEAP32[$2 >> 2] | 0;
  $206 = $205 + ($204 * 12 | 0) + 8 | 0;
  HEAPF32[$206 >> 2] = $wB$0;
  return;
 } else {
  $109 = +HEAPF32[$this + 136 >> 2];
  $112 = +HEAPF32[$this + 132 >> 2];
  $119 = +HEAPF32[$this + 128 >> 2];
  $122 = +HEAPF32[$this + 124 >> 2];
  $124 = $24 - $27 * $109 - $11 + $14 * $119;
  $125 = $25 + $27 * $112 - $12 - $14 * $122;
  $126 = $27 - $14;
  $157 = $124 * +HEAPF32[$this + 172 >> 2] + $125 * +HEAPF32[$this + 184 >> 2] + $126 * +HEAPF32[$this + 196 >> 2];
  $158 = $124 * +HEAPF32[$this + 176 >> 2] + $125 * +HEAPF32[$this + 188 >> 2] + $126 * +HEAPF32[$this + 200 >> 2];
  $159 = $124 * +HEAPF32[$this + 180 >> 2] + $125 * +HEAPF32[$this + 192 >> 2] + $126 * +HEAPF32[$this + 204 >> 2];
  $160 = -$157;
  $161 = -$158;
  $162 = $this + 104 | 0;
  HEAPF32[$162 >> 2] = +HEAPF32[$162 >> 2] - $157;
  $165 = $this + 108 | 0;
  HEAPF32[$165 >> 2] = +HEAPF32[$165 >> 2] - $158;
  $168 = $this + 112 | 0;
  HEAPF32[$168 >> 2] = +HEAPF32[$168 >> 2] - $159;
  $$pn33 = $161;
  $$pn34 = $160;
  $wA$0 = $14 - $33 * ($122 * $161 - $119 * $160 - $159);
  $wB$0 = $27 + $35 * ($112 * $161 - $109 * $160 - $159);
  $$pn32 = $31 * $$pn34;
  $$pn31 = $31 * $$pn33;
  $$pn30 = $29 * $$pn34;
  $$pn = $29 * $$pn33;
  $183 = $24 + $$pn32;
  $184 = $25 + $$pn31;
  $185 = $11 - $$pn30;
  $186 = $12 - $$pn;
  $187 = +$185;
  $188 = +$186;
  $189 = $4;
  $190 = $189;
  HEAPF32[$190 >> 2] = $187;
  $191 = $189 + 4 | 0;
  $192 = $191;
  HEAPF32[$192 >> 2] = $188;
  $193 = HEAP32[$0 >> 2] | 0;
  $194 = HEAP32[$2 >> 2] | 0;
  $195 = $194 + ($193 * 12 | 0) + 8 | 0;
  HEAPF32[$195 >> 2] = $wA$0;
  $196 = HEAP32[$15 >> 2] | 0;
  $197 = $194 + ($196 * 12 | 0) | 0;
  $198 = +$183;
  $199 = +$184;
  $200 = $197;
  $201 = $200;
  HEAPF32[$201 >> 2] = $198;
  $202 = $200 + 4 | 0;
  $203 = $202;
  HEAPF32[$203 >> 2] = $199;
  $204 = HEAP32[$15 >> 2] | 0;
  $205 = HEAP32[$2 >> 2] | 0;
  $206 = $205 + ($204 * 12 | 0) + 8 | 0;
  HEAPF32[$206 >> 2] = $wB$0;
  return;
 }
}

function _convert_channels_short_interleaved($buf_c, $buffer, $data_c, $data, $d_offset, $len) {
 $buf_c = $buf_c | 0;
 $buffer = $buffer | 0;
 $data_c = $data_c | 0;
 $data = $data | 0;
 $d_offset = $d_offset | 0;
 $len = $len | 0;
 var $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$2$lcssa = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $19 = 0, $21 = 0, $23 = 0, $25 = 0, $28 = 0.0, $29 = 0, $30 = 0, $34 = 0, $4 = 0, $42 = 0, $5 = 0, $51 = 0, $58 = 0, $6 = 0, $61 = 0, $65 = 0, $66 = 0, $7 = 0, $82 = 0, $83 = 0, $84 = 0, $86 = 0, $87 = 0, $93 = 0, $94 = 0, $buffer$i = 0, $i$06 = 0, $i$08$i = 0, $i$1$lcssa = 0, $i$14$i = 0, $i$19 = 0, $i$21$i = 0, $i$313$i = 0, $indvars$iv29$i = 0, $j$011$i = 0, $j$018 = 0, $n$015$i = 0, $o$016$i = 0, $v$0 = 0, $v$0$i = 0, dest = 0, sp = 0, stop = 0, $n$015$i$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $buffer$i = sp;
 if (!(($buf_c | 0) != ($data_c | 0) & ($buf_c | 0) < 3 & ($data_c | 0) < 7)) {
  if (($len | 0) <= 0) {
   STACKTOP = sp;
   return;
  }
  $82 = ((($buf_c | 0) < ($data_c | 0) ? $buf_c : $data_c) | 0) > 0;
  $83 = ~$data_c;
  $84 = ~$buf_c;
  $86 = ~(($83 | 0) > ($84 | 0) ? $83 : $84);
  $$019 = $buffer;
  $j$018 = 0;
  while (1) {
   if ($82) {
    $87 = $j$018 + $d_offset | 0;
    $$110 = $$019;
    $i$19 = 0;
    while (1) {
     $93 = (HEAPF32[tempDoublePtr >> 2] = +HEAPF32[(HEAP32[$data + ($i$19 << 2) >> 2] | 0) + ($87 << 2) >> 2] + 384.0, HEAP32[tempDoublePtr >> 2] | 0);
     $94 = $93 + -1136656384 | 0;
     if (($93 + -1136623616 | 0) >>> 0 > 65535) $v$0 = ($94 >> 31 & -65535) + 32767 | 0; else $v$0 = $94;
     HEAP16[$$110 >> 1] = $v$0;
     $i$19 = $i$19 + 1 | 0;
     if (($i$19 | 0) == ($86 | 0)) break; else $$110 = $$110 + 2 | 0;
    }
    $$1$lcssa = $$019 + ($86 << 1) | 0;
    $i$1$lcssa = $86;
   } else {
    $$1$lcssa = $$019;
    $i$1$lcssa = 0;
   }
   if (($i$1$lcssa | 0) < ($buf_c | 0)) {
    _memset($$1$lcssa | 0, 0, $buf_c - $i$1$lcssa << 1 | 0) | 0;
    $$2$lcssa = $$1$lcssa + ($buf_c - $i$1$lcssa << 1) | 0;
   } else $$2$lcssa = $$1$lcssa;
   $j$018 = $j$018 + 1 | 0;
   if (($j$018 | 0) == ($len | 0)) break; else $$019 = $$2$lcssa;
  }
  STACKTOP = sp;
  return;
 }
 if (($buf_c | 0) != 2) ___assert_fail(78888, 78904, 5190, 78936);
 $4 = ($len | 0) > 0;
 $5 = ($data_c | 0) > 0;
 $6 = ~$len;
 $i$06 = 0;
 do {
  if ($4) {
   $indvars$iv29$i = -1;
   $n$015$i = 16;
   $o$016$i = 0;
   while (1) {
    $7 = $o$016$i << 1;
    dest = $buffer$i + 0 | 0;
    stop = dest + 128 | 0;
    do {
     HEAP32[dest >> 2] = 0;
     dest = dest + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    $n$015$i$looptemp = $n$015$i;
    $n$015$i = ($n$015$i + $o$016$i | 0) > ($len | 0) ? $len - $o$016$i | 0 : $n$015$i;
    if ($5) {
     $11 = ($n$015$i | 0) > 0;
     $12 = $o$016$i + $d_offset | 0;
     $13 = $indvars$iv29$i - $n$015$i$looptemp | 0;
     $15 = $indvars$iv29$i - (($13 | 0) > ($6 | 0) ? $13 : $6) | 0;
     $j$011$i = 0;
     do {
      $19 = (HEAPU8[78976 + ($data_c * 6 | 0) + $j$011$i >> 0] | 0) & 6;
      if (($19 | 0) == 2) {
       if ($11) {
        $23 = HEAP32[$data + ($j$011$i << 2) >> 2] | 0;
        $i$14$i = 0;
        do {
         $42 = $buffer$i + ($i$14$i << 1 << 2) | 0;
         HEAPF32[$42 >> 2] = +HEAPF32[$23 + ($i$14$i + $12 << 2) >> 2] + +HEAPF32[$42 >> 2];
         $i$14$i = $i$14$i + 1 | 0;
        } while (($i$14$i | 0) != ($15 | 0));
       }
      } else if (($19 | 0) == 4) {
       if ($11) {
        $25 = HEAP32[$data + ($j$011$i << 2) >> 2] | 0;
        $i$21$i = 0;
        do {
         $51 = $buffer$i + (($i$21$i << 1 | 1) << 2) | 0;
         HEAPF32[$51 >> 2] = +HEAPF32[$25 + ($i$21$i + $12 << 2) >> 2] + +HEAPF32[$51 >> 2];
         $i$21$i = $i$21$i + 1 | 0;
        } while (($i$21$i | 0) != ($15 | 0));
       }
      } else if (($19 | 0) == 6) if ($11) {
       $21 = HEAP32[$data + ($j$011$i << 2) >> 2] | 0;
       $i$08$i = 0;
       do {
        $28 = +HEAPF32[$21 + ($i$08$i + $12 << 2) >> 2];
        $29 = $i$08$i << 1;
        $30 = $buffer$i + ($29 << 2) | 0;
        HEAPF32[$30 >> 2] = $28 + +HEAPF32[$30 >> 2];
        $34 = $buffer$i + (($29 | 1) << 2) | 0;
        HEAPF32[$34 >> 2] = $28 + +HEAPF32[$34 >> 2];
        $i$08$i = $i$08$i + 1 | 0;
       } while (($i$08$i | 0) != ($15 | 0));
      }
      $j$011$i = $j$011$i + 1 | 0;
     } while (($j$011$i | 0) != ($data_c | 0));
    }
    if (($n$015$i << 1 | 0) > 0) {
     $58 = $indvars$iv29$i - $n$015$i$looptemp | 0;
     $61 = $indvars$iv29$i - (($58 | 0) > ($6 | 0) ? $58 : $6) << 1;
     $i$313$i = 0;
     do {
      $65 = (HEAPF32[tempDoublePtr >> 2] = +HEAPF32[$buffer$i + ($i$313$i << 2) >> 2] + 384.0, HEAP32[tempDoublePtr >> 2] | 0);
      $66 = $65 + -1136656384 | 0;
      if (($65 + -1136623616 | 0) >>> 0 > 65535) $v$0$i = ($66 >> 31 & -65535) + 32767 | 0; else $v$0$i = $66;
      HEAP16[$buffer + ($i$313$i + $7 << 1) >> 1] = $v$0$i;
      $i$313$i = $i$313$i + 1 | 0;
     } while (($i$313$i | 0) != ($61 | 0));
    }
    $o$016$i = $o$016$i + 16 | 0;
    if (($o$016$i | 0) >= ($len | 0)) break; else $indvars$iv29$i = $indvars$iv29$i + -16 | 0;
   }
  }
  $i$06 = $i$06 + 1 | 0;
 } while (($i$06 | 0) != 2);
 STACKTOP = sp;
 return;
}

function _assignment($ls, $lh, $nvars) {
 $ls = $ls | 0;
 $lh = $lh | 0;
 $nvars = $nvars | 0;
 var $$$i = 0, $$02$i = 0, $$pre = 0, $$pre$phi4Z2D = 0, $0 = 0, $10 = 0, $12 = 0, $13 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $23 = 0, $28 = 0, $3 = 0, $4 = 0, $41 = 0, $49 = 0, $5 = 0, $52 = 0, $55 = 0, $58 = 0, $59 = 0, $60 = 0, $64 = 0, $66 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $80 = 0, $83 = 0, $9 = 0, $90 = 0, $94 = 0, $conflict$01$i = 0, $conflict$1$i = 0, $conflict$2$i = 0, $e = 0, $ls$idx1$val = 0, $n$0$i$lcssa = 0, $n$0$i2 = 0, $nv = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $e = sp + 40 | 0;
 $nv = sp + 20 | 0;
 $0 = $lh + 4 | 0;
 if (((HEAP32[$0 >> 2] | 0) + -8 | 0) >>> 0 >= 3) _luaX_syntaxerror($ls, 60400);
 $3 = $ls + 12 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 do if (($4 | 0) == 44) {
  _luaX_next($ls);
  HEAP32[$nv >> 2] = $lh;
  $5 = $nv + 4 | 0;
  _suffixedexp($ls, $5);
  $$pre = $ls + 28 | 0;
  if ((HEAP32[$5 >> 2] | 0) != 10) {
   $ls$idx1$val = HEAP32[$$pre >> 2] | 0;
   $9 = HEAP8[$ls$idx1$val + 44 >> 0] | 0;
   $10 = $9 & 255;
   if ($lh) {
    $12 = $nv + 8 | 0;
    $13 = $9 & 255;
    $$02$i = $lh;
    $conflict$01$i = 0;
    while (1) {
     if ((HEAP32[$$02$i + 4 >> 2] | 0) == 10) {
      $17 = $$02$i + 8 | 0;
      $18 = $17 + 3 | 0;
      $20 = HEAPU8[$18 >> 0] | 0;
      $21 = HEAP32[$5 >> 2] | 0;
      if (($20 | 0) == ($21 | 0)) {
       $23 = $17 + 2 | 0;
       if ((HEAPU8[$23 >> 0] | 0) == (HEAP32[$12 >> 2] | 0)) {
        HEAP8[$18 >> 0] = 8;
        HEAP8[$23 >> 0] = $9;
        $28 = HEAP32[$5 >> 2] | 0;
        $conflict$1$i = 1;
       } else {
        $28 = $20;
        $conflict$1$i = $conflict$01$i;
       }
      } else {
       $28 = $21;
       $conflict$1$i = $conflict$01$i;
      }
      if (($28 | 0) == 8) if ((HEAP16[$17 >> 1] | 0) == (HEAP32[$12 >> 2] | 0)) {
       HEAP16[$17 >> 1] = $13;
       $conflict$2$i = 1;
      } else $conflict$2$i = $conflict$1$i; else $conflict$2$i = $conflict$1$i;
     } else $conflict$2$i = $conflict$01$i;
     $$02$i = HEAP32[$$02$i >> 2] | 0;
     if (!$$02$i) break; else $conflict$01$i = $conflict$2$i;
    }
    if ($conflict$2$i) {
     _luaK_codeABC($ls$idx1$val, (HEAP32[$5 >> 2] | 0) == 8 ? 0 : 5, $10, HEAP32[$12 >> 2] | 0, 0) | 0;
     _luaK_reserveregs($ls$idx1$val, 1);
    }
   }
  }
  $41 = HEAP32[$$pre >> 2] | 0;
  if (((HEAPU16[(HEAP32[$ls + 32 >> 2] | 0) + 106 >> 1] | 0) + $nvars | 0) <= 200) {
   _assignment($ls, $nv, $nvars + 1 | 0);
   $$pre$phi4Z2D = $e;
   break;
  }
  $49 = $41 + 8 | 0;
  $52 = HEAP32[(HEAP32[$49 >> 2] | 0) + 32 >> 2] | 0;
  $55 = HEAP32[(HEAP32[$41 >> 2] | 0) + 36 >> 2] | 0;
  if (!$55) {
   $58 = 60600;
   HEAP32[$vararg_buffer1 >> 2] = 60416;
   $vararg_ptr4 = $vararg_buffer1 + 4 | 0;
   HEAP32[$vararg_ptr4 >> 2] = 200;
   $vararg_ptr5 = $vararg_buffer1 + 8 | 0;
   HEAP32[$vararg_ptr5 >> 2] = $58;
   $59 = _luaO_pushfstring($52, 60640, $vararg_buffer1) | 0;
   $60 = HEAP32[$49 >> 2] | 0;
   _luaX_syntaxerror($60, $59);
  }
  HEAP32[$vararg_buffer >> 2] = $55;
  $58 = _luaO_pushfstring($52, 60616, $vararg_buffer) | 0;
  HEAP32[$vararg_buffer1 >> 2] = 60416;
  $vararg_ptr4 = $vararg_buffer1 + 4 | 0;
  HEAP32[$vararg_ptr4 >> 2] = 200;
  $vararg_ptr5 = $vararg_buffer1 + 8 | 0;
  HEAP32[$vararg_ptr5 >> 2] = $58;
  $59 = _luaO_pushfstring($52, 60640, $vararg_buffer1) | 0;
  $60 = HEAP32[$49 >> 2] | 0;
  _luaX_syntaxerror($60, $59);
 } else if (($4 | 0) == 61) {
  _luaX_next($ls);
  _subexpr($ls, $e, 0) | 0;
  $64 = $ls + 28 | 0;
  if ((HEAP32[$3 >> 2] | 0) == 44) {
   $n$0$i2 = 1;
   while (1) {
    _luaX_next($ls);
    _luaK_exp2nextreg(HEAP32[$64 >> 2] | 0, $e);
    _subexpr($ls, $e, 0) | 0;
    $66 = $n$0$i2 + 1 | 0;
    if ((HEAP32[$3 >> 2] | 0) == 44) $n$0$i2 = $66; else {
     $n$0$i$lcssa = $66;
     break;
    }
   }
  } else $n$0$i$lcssa = 1;
  $70 = HEAP32[$64 >> 2] | 0;
  if (($n$0$i$lcssa | 0) == ($nvars | 0)) {
   _luaK_setoneret($70, $e);
   _luaK_storevar(HEAP32[$64 >> 2] | 0, $0, $e);
   STACKTOP = sp;
   return;
  }
  $71 = $nvars - $n$0$i$lcssa | 0;
  $72 = HEAP32[$e >> 2] | 0;
  if (!$72) label = 30; else if (($72 | 0) == 14 | ($72 | 0) == 13) {
   $73 = $71 + 1 | 0;
   $$$i = ($73 | 0) < 0 ? 0 : $73;
   _luaK_setreturns($70, $e, $$$i);
   if (($$$i | 0) > 1) _luaK_reserveregs($70, $$$i + -1 | 0);
  } else {
   _luaK_exp2nextreg($70, $e);
   label = 30;
  }
  if ((label | 0) == 30) if (($71 | 0) > 0) {
   $80 = HEAPU8[$70 + 44 >> 0] | 0;
   _luaK_reserveregs($70, $71);
   _luaK_nil($70, $80, $71);
  }
  if (($n$0$i$lcssa | 0) > ($nvars | 0)) {
   $83 = (HEAP32[$64 >> 2] | 0) + 44 | 0;
   HEAP8[$83 >> 0] = $71 + (HEAPU8[$83 >> 0] | 0);
   $$pre$phi4Z2D = $e;
  } else $$pre$phi4Z2D = $e;
 } else _error_expected($ls, 61); while (0);
 $90 = HEAP32[$ls + 28 >> 2] | 0;
 $94 = (HEAPU8[$90 + 44 >> 0] | 0) + -1 | 0;
 HEAP32[$e + 8 >> 2] = -1;
 HEAP32[$e + 12 >> 2] = -1;
 HEAP32[$$pre$phi4Z2D >> 2] = 7;
 HEAP32[$e + 4 >> 2] = $94;
 _luaK_storevar($90, $0, $e);
 STACKTOP = sp;
 return;
}

function _luaK_prefix($fs, $op, $e, $line) {
 $fs = $fs | 0;
 $op = $op | 0;
 $e = $e | 0;
 $line = $line | 0;
 var $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i9$i = 0, $$03$i$i = 0, $$03$i6$i = 0, $$pre$phi$iZ2D = 0, $100 = 0, $14 = 0, $20 = 0, $21 = 0, $23 = 0, $25 = 0, $34 = 0, $35 = 0, $39 = 0, $40 = 0, $47 = 0, $5 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $61 = 0, $62 = 0, $68 = 0, $7 = 0, $76 = 0, $8 = 0, $81 = 0, $83 = 0, $85 = 0, $86 = 0, $92 = 0, $e$idx$val$i = 0, $e2 = 0, $fs$idx$val$idx$val$i = 0, $fs$idx1$val$idx$val$pre$i$i = 0, $fs$idx1$val$idx$val$pre$i4$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $e2 = sp;
 HEAP32[$e2 + 12 >> 2] = -1;
 HEAP32[$e2 + 8 >> 2] = -1;
 HEAP32[$e2 >> 2] = 6;
 HEAP32[$e2 + 4 >> 2] = 0;
 if (($op | 0) == 2) {
  _luaK_dischargevars($fs, $e);
  switch (HEAP32[$e >> 2] | 0) {
  case 3:
  case 1:
   {
    HEAP32[$e >> 2] = 2;
    break;
   }
  case 12:
   {
    $20 = $fs + 44 | 0;
    $21 = HEAP8[$20 >> 0] | 0;
    $23 = ($21 & 255) + 1 | 0;
    $25 = (HEAP32[$fs >> 2] | 0) + 8 | 0;
    do if ($23 >>> 0 > (HEAPU8[$25 >> 0] | 0) >>> 0) if ($23 >>> 0 > 249) _luaX_syntaxerror(HEAP32[$fs + 8 >> 2] | 0, 65488); else {
     HEAP8[$25 >> 0] = $23;
     $34 = HEAP8[$20 >> 0] | 0;
     break;
    } else $34 = $21; while (0);
    $35 = ($34 & 255) + 1 | 0;
    HEAP8[$20 >> 0] = $35;
    _discharge2reg($fs, $e, ($35 & 255) + -1 | 0);
    if ((HEAP32[$e >> 2] | 0) == 7) label = 16; else {
     $$pre$phi$iZ2D = $e + 4 | 0;
     label = 19;
    }
    break;
   }
  case 7:
   {
    label = 16;
    break;
   }
  case 2:
  case 6:
  case 5:
  case 4:
   {
    HEAP32[$e >> 2] = 3;
    break;
   }
  case 11:
   {
    $e$idx$val$i = HEAP32[$e + 4 >> 2] | 0;
    $fs$idx$val$idx$val$i = HEAP32[(HEAP32[$fs >> 2] | 0) + 48 >> 2] | 0;
    $5 = $fs$idx$val$idx$val$i + ($e$idx$val$i << 2) | 0;
    if (($e$idx$val$i | 0) > 0) {
     $7 = $fs$idx$val$idx$val$i + ($e$idx$val$i + -1 << 2) | 0;
     $8 = HEAP32[$7 >> 2] | 0;
     if ((HEAP8[59568 + ($8 & 63) >> 0] | 0) < 0) {
      $$0$i$i$i = $7;
      $14 = $8;
     } else label = 8;
    } else label = 8;
    if ((label | 0) == 8) {
     $$0$i$i$i = $5;
     $14 = HEAP32[$5 >> 2] | 0;
    }
    HEAP32[$$0$i$i$i >> 2] = (($14 & 16320 | 0) == 0 & 1) << 6 | $14 & -16321;
    break;
   }
  default:
   {}
  }
  if ((label | 0) == 16) {
   $39 = $e + 4 | 0;
   $40 = HEAP32[$39 >> 2] | 0;
   if (!($40 & 256)) if ((HEAPU8[$fs + 42 >> 0] | 0) > ($40 | 0)) {
    $$pre$phi$iZ2D = $39;
    label = 19;
   } else {
    $47 = $fs + 44 | 0;
    HEAP8[$47 >> 0] = (HEAP8[$47 >> 0] | 0) + -1 << 24 >> 24;
    $$pre$phi$iZ2D = $39;
    label = 19;
   } else {
    $$pre$phi$iZ2D = $39;
    label = 19;
   }
  }
  if ((label | 0) == 19) {
   HEAP32[$$pre$phi$iZ2D >> 2] = _luaK_code($fs, HEAP32[$$pre$phi$iZ2D >> 2] << 23 | 27) | 0;
   HEAP32[$e >> 2] = 12;
  }
  $54 = $e + 12 | 0;
  $55 = HEAP32[$54 >> 2] | 0;
  $56 = $e + 8 | 0;
  $57 = HEAP32[$56 >> 2] | 0;
  HEAP32[$54 >> 2] = $57;
  HEAP32[$56 >> 2] = $55;
  if (($57 | 0) == -1) $81 = $55; else {
   $fs$idx1$val$idx$val$pre$i4$i = HEAP32[(HEAP32[$fs >> 2] | 0) + 48 >> 2] | 0;
   $$03$i6$i = $57;
   do {
    $59 = $fs$idx1$val$idx$val$pre$i4$i + ($$03$i6$i << 2) | 0;
    if (($$03$i6$i | 0) > 0) {
     $61 = $fs$idx1$val$idx$val$pre$i4$i + ($$03$i6$i + -1 << 2) | 0;
     $62 = HEAP32[$61 >> 2] | 0;
     if ((HEAP8[59568 + ($62 & 63) >> 0] | 0) < 0) {
      $$0$i$i$i9$i = $61;
      $68 = $62;
     } else label = 24;
    } else label = 24;
    if ((label | 0) == 24) {
     label = 0;
     $$0$i$i$i9$i = $59;
     $68 = HEAP32[$59 >> 2] | 0;
    }
    if (($68 & 63 | 0) == 35) HEAP32[$$0$i$i$i9$i >> 2] = $68 & 8372224 | $68 >>> 23 << 6 | 34;
    $76 = ((HEAP32[$59 >> 2] | 0) >>> 14) + -131071 | 0;
    if (($76 | 0) == -1) break;
    $$03$i6$i = $$03$i6$i + 1 + $76 | 0;
   } while (($$03$i6$i | 0) != -1);
   $81 = HEAP32[$56 >> 2] | 0;
  }
  if (($81 | 0) == -1) {
   STACKTOP = sp;
   return;
  }
  $fs$idx1$val$idx$val$pre$i$i = HEAP32[(HEAP32[$fs >> 2] | 0) + 48 >> 2] | 0;
  $$03$i$i = $81;
  while (1) {
   $83 = $fs$idx1$val$idx$val$pre$i$i + ($$03$i$i << 2) | 0;
   if (($$03$i$i | 0) > 0) {
    $85 = $fs$idx1$val$idx$val$pre$i$i + ($$03$i$i + -1 << 2) | 0;
    $86 = HEAP32[$85 >> 2] | 0;
    if ((HEAP8[59568 + ($86 & 63) >> 0] | 0) < 0) {
     $$0$i$i$i$i = $85;
     $92 = $86;
    } else label = 34;
   } else label = 34;
   if ((label | 0) == 34) {
    label = 0;
    $$0$i$i$i$i = $83;
    $92 = HEAP32[$83 >> 2] | 0;
   }
   if (($92 & 63 | 0) == 35) HEAP32[$$0$i$i$i$i >> 2] = $92 & 8372224 | $92 >>> 23 << 6 | 34;
   $100 = ((HEAP32[$83 >> 2] | 0) >>> 14) + -131071 | 0;
   if (($100 | 0) == -1) {
    label = 39;
    break;
   }
   $$03$i$i = $$03$i$i + 1 + $100 | 0;
   if (($$03$i$i | 0) == -1) {
    label = 39;
    break;
   }
  }
  if ((label | 0) == 39) {
   STACKTOP = sp;
   return;
  }
 } else if (($op | 0) == 3 | ($op | 0) == 1 | ($op | 0) == 0) {
  _codeexpval($fs, $op + 25 | 0, $e, $e2, $line);
  STACKTOP = sp;
  return;
 } else {
  STACKTOP = sp;
  return;
 }
}

function _sound_play($sound, $volume, $x, $y, $pitch) {
 $sound = $sound | 0;
 $volume = +$volume;
 $x = +$x;
 $y = +$y;
 $pitch = +$pitch;
 var $1 = 0, $11 = 0, $13 = 0, $14 = 0, $18 = 0, $20 = 0, $21 = 0, $25 = 0, $27 = 0, $28 = 0, $3 = 0, $32 = 0, $34 = 0, $35 = 0, $39 = 0, $41 = 0, $42 = 0, $45 = 0, $48 = 0, $5 = 0, $50 = 0, $51 = 0, $55 = 0, $57 = 0, $58 = 0, $6 = 0, $62 = 0, $64 = 0, $65 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer16 = 0, $vararg_buffer22 = 0, $vararg_buffer28 = 0, $vararg_buffer34 = 0, $vararg_buffer4 = 0, $vararg_buffer40 = 0, $vararg_buffer46 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $vararg_buffer46 = sp + 128 | 0;
 $vararg_buffer40 = sp + 112 | 0;
 $vararg_buffer34 = sp + 96 | 0;
 $vararg_buffer28 = sp + 80 | 0;
 $vararg_buffer22 = sp + 64 | 0;
 $vararg_buffer16 = sp + 48 | 0;
 $vararg_buffer10 = sp + 32 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer = sp;
 if (!$sound) ___assert_fail(12e3, 11952, 134, 12064);
 $1 = _audio_get_free_source() | 0;
 if (!$1) {
  STACKTOP = sp;
  return;
 }
 $3 = _alGetError() | 0;
 if ($3) {
  $5 = $3;
  do {
   $6 = _alGetString($5 | 0) | 0;
   HEAP32[$vararg_buffer >> 2] = 11952;
   HEAP32[$vararg_buffer + 4 >> 2] = 140;
   HEAP32[$vararg_buffer + 8 >> 2] = 12064;
   HEAP32[$vararg_buffer + 12 >> 2] = $6;
   _log_internal(3, 12e3, 12024, $vararg_buffer);
   $5 = _alGetError() | 0;
  } while (($5 | 0) != 0);
 }
 _alSourcei(HEAP32[$1 >> 2] | 0, 4105, HEAP32[$sound >> 2] | 0);
 $11 = _alGetError() | 0;
 if ($11) {
  $13 = $11;
  do {
   $14 = _alGetString($13 | 0) | 0;
   HEAP32[$vararg_buffer4 >> 2] = 11952;
   HEAP32[$vararg_buffer4 + 4 >> 2] = 142;
   HEAP32[$vararg_buffer4 + 8 >> 2] = 12064;
   HEAP32[$vararg_buffer4 + 12 >> 2] = $14;
   _log_internal(3, 12e3, 12024, $vararg_buffer4);
   $13 = _alGetError() | 0;
  } while (($13 | 0) != 0);
 }
 _alSourcei(HEAP32[$1 >> 2] | 0, 514, 0);
 $18 = _alGetError() | 0;
 if ($18) {
  $20 = $18;
  do {
   $21 = _alGetString($20 | 0) | 0;
   HEAP32[$vararg_buffer10 >> 2] = 11952;
   HEAP32[$vararg_buffer10 + 4 >> 2] = 144;
   HEAP32[$vararg_buffer10 + 8 >> 2] = 12064;
   HEAP32[$vararg_buffer10 + 12 >> 2] = $21;
   _log_internal(3, 12e3, 12024, $vararg_buffer10);
   $20 = _alGetError() | 0;
  } while (($20 | 0) != 0);
 }
 _alSource3f(HEAP32[$1 >> 2] | 0, 4100, +$x, +$y, 0.0);
 $25 = _alGetError() | 0;
 if ($25) {
  $27 = $25;
  do {
   $28 = _alGetString($27 | 0) | 0;
   HEAP32[$vararg_buffer16 >> 2] = 11952;
   HEAP32[$vararg_buffer16 + 4 >> 2] = 146;
   HEAP32[$vararg_buffer16 + 8 >> 2] = 12064;
   HEAP32[$vararg_buffer16 + 12 >> 2] = $28;
   _log_internal(3, 12e3, 12024, $vararg_buffer16);
   $27 = _alGetError() | 0;
  } while (($27 | 0) != 0);
 }
 _alSourcei(HEAP32[$1 >> 2] | 0, 514, 0);
 $32 = _alGetError() | 0;
 if ($32) {
  $34 = $32;
  do {
   $35 = _alGetString($34 | 0) | 0;
   HEAP32[$vararg_buffer22 >> 2] = 11952;
   HEAP32[$vararg_buffer22 + 4 >> 2] = 148;
   HEAP32[$vararg_buffer22 + 8 >> 2] = 12064;
   HEAP32[$vararg_buffer22 + 12 >> 2] = $35;
   _log_internal(3, 12e3, 12024, $vararg_buffer22);
   $34 = _alGetError() | 0;
  } while (($34 | 0) != 0);
 }
 _alSource3f(HEAP32[$1 >> 2] | 0, 4100, +$x, +$y, 0.0);
 $39 = _alGetError() | 0;
 if ($39) {
  $41 = $39;
  do {
   $42 = _alGetString($41 | 0) | 0;
   HEAP32[$vararg_buffer28 >> 2] = 11952;
   HEAP32[$vararg_buffer28 + 4 >> 2] = 150;
   HEAP32[$vararg_buffer28 + 8 >> 2] = 12064;
   HEAP32[$vararg_buffer28 + 12 >> 2] = $42;
   _log_internal(3, 12e3, 12024, $vararg_buffer28);
   $41 = _alGetError() | 0;
  } while (($41 | 0) != 0);
 }
 $45 = HEAP32[$1 >> 2] | 0;
 _alSourcef($45 | 0, 4106, +(+_audio_get_sound_volume() * $volume));
 $48 = _alGetError() | 0;
 if ($48) {
  $50 = $48;
  do {
   $51 = _alGetString($50 | 0) | 0;
   HEAP32[$vararg_buffer34 >> 2] = 11952;
   HEAP32[$vararg_buffer34 + 4 >> 2] = 152;
   HEAP32[$vararg_buffer34 + 8 >> 2] = 12064;
   HEAP32[$vararg_buffer34 + 12 >> 2] = $51;
   _log_internal(3, 12e3, 12024, $vararg_buffer34);
   $50 = _alGetError() | 0;
  } while (($50 | 0) != 0);
 }
 _alSourcef(HEAP32[$1 >> 2] | 0, 4099, +$pitch);
 $55 = _alGetError() | 0;
 if ($55) {
  $57 = $55;
  do {
   $58 = _alGetString($57 | 0) | 0;
   HEAP32[$vararg_buffer40 >> 2] = 11952;
   HEAP32[$vararg_buffer40 + 4 >> 2] = 154;
   HEAP32[$vararg_buffer40 + 8 >> 2] = 12064;
   HEAP32[$vararg_buffer40 + 12 >> 2] = $58;
   _log_internal(3, 12e3, 12024, $vararg_buffer40);
   $57 = _alGetError() | 0;
  } while (($57 | 0) != 0);
 }
 _alSourcePlay(HEAP32[$1 >> 2] | 0);
 $62 = _alGetError() | 0;
 if ($62) {
  $64 = $62;
  do {
   $65 = _alGetString($64 | 0) | 0;
   HEAP32[$vararg_buffer46 >> 2] = 11952;
   HEAP32[$vararg_buffer46 + 4 >> 2] = 156;
   HEAP32[$vararg_buffer46 + 8 >> 2] = 12064;
   HEAP32[$vararg_buffer46 + 12 >> 2] = $65;
   _log_internal(3, 12e3, 12024, $vararg_buffer46);
   $64 = _alGetError() | 0;
  } while (($64 | 0) != 0);
 }
 HEAP32[$1 + 12 >> 2] = 1;
 HEAP32[$1 + 8 >> 2] = $sound;
 HEAP8[$1 + 4 >> 0] = 1;
 HEAPF32[$1 + 16 >> 2] = $volume;
 STACKTOP = sp;
 return;
}

function _png_set_text_2($png_ptr, $info_ptr, $text_ptr, $num_text) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 $text_ptr = $text_ptr | 0;
 $num_text = $num_text | 0;
 var $$0 = 0, $12 = 0, $16 = 0, $19 = 0, $22 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $36 = 0, $39 = 0, $4 = 0, $43 = 0, $46 = 0, $47 = 0, $52 = 0, $57 = 0, $58 = 0, $6 = 0, $66 = 0, $67 = 0, $7 = 0, $73 = 0, $74 = 0, $80 = 0, $85 = 0, $90 = 0, $92 = 0, $95 = 0, $i$07 = 0, $lang_key_len$0 = 0, $lang_len$0 = 0, $lang_len$1 = 0, $max_text$0 = 0, $text_length$0 = 0, label = 0;
 if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0 | ($num_text | 0) < 1 | ($text_ptr | 0) == 0) {
  $$0 = 0;
  return $$0 | 0;
 }
 $4 = $info_ptr + 132 | 0;
 $6 = $info_ptr + 128 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 do if (((HEAP32[$4 >> 2] | 0) - $7 | 0) < ($num_text | 0)) {
  if ((2147483647 - $7 | 0) >= ($num_text | 0)) {
   $12 = $7 + $num_text | 0;
   if (($12 | 0) < 2147483639) $max_text$0 = $12 + 8 & -8; else $max_text$0 = 2147483647;
   $16 = $info_ptr + 136 | 0;
   $19 = _png_realloc_array($png_ptr, HEAP32[$16 >> 2] | 0, $7, $max_text$0 - $7 | 0, 28) | 0;
   if ($19) {
    _png_free($png_ptr, HEAP32[$16 >> 2] | 0);
    HEAP32[$16 >> 2] = $19;
    $22 = $info_ptr + 232 | 0;
    HEAP32[$22 >> 2] = HEAP32[$22 >> 2] | 16384;
    HEAP32[$4 >> 2] = $max_text$0;
    break;
   }
  }
  _png_chunk_report($png_ptr, 77696, 1);
  $$0 = 1;
  return $$0 | 0;
 } while (0);
 if (($num_text | 0) <= 0) {
  $$0 = 0;
  return $$0 | 0;
 }
 $26 = $info_ptr + 136 | 0;
 $i$07 = 0;
 L18 : while (1) {
  $27 = HEAP32[$6 >> 2] | 0;
  $28 = HEAP32[$26 >> 2] | 0;
  $29 = $28 + ($27 * 28 | 0) | 0;
  $30 = $text_ptr + ($i$07 * 28 | 0) + 4 | 0;
  $31 = HEAP32[$30 >> 2] | 0;
  do if ($31) {
   $33 = $text_ptr + ($i$07 * 28 | 0) | 0;
   $34 = HEAP32[$33 >> 2] | 0;
   if (($34 + 1 | 0) >>> 0 > 3) {
    _png_chunk_report($png_ptr, 77720, 1);
    break;
   }
   $36 = _strlen($31 | 0) | 0;
   if (($34 | 0) < 1) {
    $lang_key_len$0 = 0;
    $lang_len$1 = 0;
   } else {
    $39 = HEAP32[$text_ptr + ($i$07 * 28 | 0) + 20 >> 2] | 0;
    if (!$39) $lang_len$0 = 0; else $lang_len$0 = _strlen($39 | 0) | 0;
    $43 = HEAP32[$text_ptr + ($i$07 * 28 | 0) + 24 >> 2] | 0;
    if (!$43) {
     $lang_key_len$0 = 0;
     $lang_len$1 = $lang_len$0;
    } else {
     $lang_key_len$0 = _strlen($43 | 0) | 0;
     $lang_len$1 = $lang_len$0;
    }
   }
   $46 = $text_ptr + ($i$07 * 28 | 0) + 8 | 0;
   $47 = HEAP32[$46 >> 2] | 0;
   if (!$47) label = 21; else if (!(HEAP8[$47 >> 0] | 0)) label = 21; else {
    $52 = _strlen($47 | 0) | 0;
    HEAP32[$29 >> 2] = $34;
    $text_length$0 = $52;
   }
   do if ((label | 0) == 21) {
    label = 0;
    if (($34 | 0) > 0) {
     HEAP32[$29 >> 2] = 1;
     $text_length$0 = 0;
     break;
    } else {
     HEAP32[$29 >> 2] = -1;
     $text_length$0 = 0;
     break;
    }
   } while (0);
   $57 = _png_malloc_base($png_ptr, $36 + 4 + $lang_len$1 + $lang_key_len$0 + $text_length$0 | 0) | 0;
   $58 = $28 + ($27 * 28 | 0) + 4 | 0;
   HEAP32[$58 >> 2] = $57;
   if (!$57) break L18;
   _memcpy($57 | 0, HEAP32[$30 >> 2] | 0, $36 | 0) | 0;
   HEAP8[(HEAP32[$58 >> 2] | 0) + $36 >> 0] = 0;
   if ((HEAP32[$33 >> 2] | 0) > 0) {
    $66 = (HEAP32[$58 >> 2] | 0) + ($36 + 1) | 0;
    $67 = $28 + ($27 * 28 | 0) + 20 | 0;
    HEAP32[$67 >> 2] = $66;
    _memcpy($66 | 0, HEAP32[$text_ptr + ($i$07 * 28 | 0) + 20 >> 2] | 0, $lang_len$1 | 0) | 0;
    HEAP8[(HEAP32[$67 >> 2] | 0) + $lang_len$1 >> 0] = 0;
    $73 = (HEAP32[$67 >> 2] | 0) + ($lang_len$1 + 1) | 0;
    $74 = $28 + ($27 * 28 | 0) + 24 | 0;
    HEAP32[$74 >> 2] = $73;
    _memcpy($73 | 0, HEAP32[$text_ptr + ($i$07 * 28 | 0) + 24 >> 2] | 0, $lang_key_len$0 | 0) | 0;
    HEAP8[(HEAP32[$74 >> 2] | 0) + $lang_key_len$0 >> 0] = 0;
    $80 = (HEAP32[$74 >> 2] | 0) + ($lang_key_len$0 + 1) | 0;
    HEAP32[$28 + ($27 * 28 | 0) + 8 >> 2] = $80;
    $90 = $80;
   } else {
    HEAP32[$28 + ($27 * 28 | 0) + 20 >> 2] = 0;
    HEAP32[$28 + ($27 * 28 | 0) + 24 >> 2] = 0;
    $85 = (HEAP32[$58 >> 2] | 0) + ($36 + 1) | 0;
    HEAP32[$28 + ($27 * 28 | 0) + 8 >> 2] = $85;
    $90 = $85;
   }
   if (!$text_length$0) $92 = $90; else {
    _memcpy($90 | 0, HEAP32[$46 >> 2] | 0, $text_length$0 | 0) | 0;
    $92 = HEAP32[$28 + ($27 * 28 | 0) + 8 >> 2] | 0;
   }
   HEAP8[$92 + $text_length$0 >> 0] = 0;
   $95 = $28 + ($27 * 28 | 0) + 12 | 0;
   if ((HEAP32[$29 >> 2] | 0) > 0) {
    HEAP32[$95 >> 2] = 0;
    HEAP32[$28 + ($27 * 28 | 0) + 16 >> 2] = $text_length$0;
   } else {
    HEAP32[$95 >> 2] = $text_length$0;
    HEAP32[$28 + ($27 * 28 | 0) + 16 >> 2] = 0;
   }
   HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1;
  } while (0);
  $i$07 = $i$07 + 1 | 0;
  if (($i$07 | 0) >= ($num_text | 0)) {
   $$0 = 0;
   label = 37;
   break;
  }
 }
 if ((label | 0) == 37) return $$0 | 0;
 _png_chunk_report($png_ptr, 77760, 1);
 $$0 = 1;
 return $$0 | 0;
}

function __ZN15b2RevoluteJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $102 = 0.0, $105 = 0.0, $11 = 0.0, $110 = 0.0, $115 = 0.0, $118 = 0.0, $12 = 0.0, $121 = 0.0, $126 = 0.0, $127 = 0.0, $131 = 0.0, $133 = 0.0, $135 = 0.0, $136 = 0.0, $138 = 0.0, $14 = 0.0, $142 = 0.0, $144 = 0.0, $145 = 0.0, $148 = 0.0, $15 = 0, $150 = 0.0, $154 = 0.0, $157 = 0.0, $16 = 0, $168 = 0.0, $169 = 0.0, $18 = 0, $188 = 0.0, $189 = 0.0, $190 = 0, $195 = 0, $199 = 0.0, $2 = 0, $200 = 0.0, $201 = 0, $210 = 0, $24 = 0.0, $25 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $33 = 0.0, $34 = 0.0, $38 = 0, $4 = 0, $43 = 0.0, $46 = 0.0, $48 = 0.0, $5 = 0, $50 = 0.0, $54 = 0.0, $59 = 0.0, $61 = 0.0, $63 = 0.0, $72 = 0.0, $73 = 0.0, $75 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $94 = 0.0, $99 = 0.0, $aA$0 = 0.0, $aB$0 = 0.0, $angularError$0 = 0.0, $angularError$1 = 0.0, $det$0$i = 0.0, $limitImpulse$0 = 0.0;
 $0 = $this + 128 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $data + 24 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $3 + ($1 * 12 | 0) | 0;
 $5 = $4;
 $11 = +HEAPF32[$5 >> 2];
 $12 = +HEAPF32[$5 + 4 >> 2];
 $14 = +HEAPF32[$3 + ($1 * 12 | 0) + 8 >> 2];
 $15 = $this + 132 | 0;
 $16 = HEAP32[$15 >> 2] | 0;
 $18 = $3 + ($16 * 12 | 0) | 0;
 $24 = +HEAPF32[$18 >> 2];
 $25 = +HEAPF32[$18 + 4 >> 2];
 $27 = +HEAPF32[$3 + ($16 * 12 | 0) + 8 >> 2];
 $28 = $this + 176 | 0;
 $29 = $this + 180 | 0;
 if (!(HEAP8[$this + 112 >> 0] | 0)) {
  $138 = +HEAPF32[$28 >> 2];
  $142 = +HEAPF32[$29 >> 2];
  $aA$0 = $14;
  $aB$0 = $27;
  $angularError$1 = 0.0;
 } else {
  $33 = +HEAPF32[$29 >> 2];
  $34 = +HEAPF32[$28 >> 2];
  $38 = HEAP32[$this + 224 >> 2] | 0;
  if (($38 | 0) == 0 | $33 + $34 == 0.0) {
   $138 = $34;
   $142 = $33;
   $aA$0 = $14;
   $aB$0 = $27;
   $angularError$1 = 0.0;
  } else {
   $43 = $27 - $14 - +HEAPF32[$this + 116 >> 2];
   if (($38 | 0) == 2) {
    $72 = $43 - +HEAPF32[$this + 124 >> 2];
    $73 = $72 + -.03490658849477768;
    $75 = $73 < .13962635397911072 ? $73 : .13962635397911072;
    $angularError$0 = $72;
    $limitImpulse$0 = -(+HEAPF32[$this + 220 >> 2] * ($75 < 0.0 ? 0.0 : $75));
   } else if (($38 | 0) == 1) {
    $59 = $43 - +HEAPF32[$this + 120 >> 2];
    $61 = $59 + .03490658849477768;
    $63 = $61 < 0.0 ? $61 : 0.0;
    $angularError$0 = -$59;
    $limitImpulse$0 = -(+HEAPF32[$this + 220 >> 2] * ($63 < -.13962635397911072 ? -.13962635397911072 : $63));
   } else if (($38 | 0) == 3) {
    $46 = $43 - +HEAPF32[$this + 120 >> 2];
    $48 = $46 < .13962635397911072 ? $46 : .13962635397911072;
    $50 = $48 < -.13962635397911072 ? -.13962635397911072 : $48;
    $54 = -(+HEAPF32[$this + 220 >> 2] * $50);
    if ($50 > 0.0) {
     $angularError$0 = $50;
     $limitImpulse$0 = $54;
    } else {
     $angularError$0 = -$50;
     $limitImpulse$0 = $54;
    }
   } else {
    $angularError$0 = 0.0;
    $limitImpulse$0 = 0.0;
   }
   $138 = $34;
   $142 = $33;
   $aA$0 = $14 - $limitImpulse$0 * $34;
   $aB$0 = $27 + $limitImpulse$0 * $33;
   $angularError$1 = $angularError$0;
  }
 }
 $86 = +Math_sin(+$aA$0);
 $87 = +Math_cos(+$aA$0);
 $88 = +Math_sin(+$aB$0);
 $89 = +Math_cos(+$aB$0);
 $94 = +HEAPF32[$this + 68 >> 2] - +HEAPF32[$this + 152 >> 2];
 $99 = +HEAPF32[$this + 72 >> 2] - +HEAPF32[$this + 156 >> 2];
 $102 = $87 * $94 - $86 * $99;
 $105 = $86 * $94 + $87 * $99;
 $110 = +HEAPF32[$this + 76 >> 2] - +HEAPF32[$this + 160 >> 2];
 $115 = +HEAPF32[$this + 80 >> 2] - +HEAPF32[$this + 164 >> 2];
 $118 = $89 * $110 - $88 * $115;
 $121 = $88 * $110 + $89 * $115;
 $126 = $24 + $118 - $11 - $102;
 $127 = $25 + $121 - $12 - $105;
 $131 = +Math_sqrt(+($126 * $126 + $127 * $127));
 $133 = +HEAPF32[$this + 168 >> 2];
 $135 = +HEAPF32[$this + 172 >> 2];
 $136 = $133 + $135;
 $144 = $136 + $105 * ($105 * $138) + $121 * ($121 * $142);
 $145 = $102 * $138;
 $148 = $118 * $142;
 $150 = -($105 * $145) - $121 * $148;
 $154 = $136 + $102 * $145 + $118 * $148;
 $157 = $144 * $154 - $150 * $150;
 if ($157 != 0.0) $det$0$i = 1.0 / $157; else $det$0$i = $157;
 $168 = -(($126 * $154 - $127 * $150) * $det$0$i);
 $169 = -(($127 * $144 - $126 * $150) * $det$0$i);
 $188 = +($11 - $133 * $168);
 $189 = +($12 - $133 * $169);
 $190 = $4;
 HEAPF32[$190 >> 2] = $188;
 HEAPF32[$190 + 4 >> 2] = $189;
 $195 = HEAP32[$2 >> 2] | 0;
 HEAPF32[$195 + ((HEAP32[$0 >> 2] | 0) * 12 | 0) + 8 >> 2] = $aA$0 - $138 * ($102 * $169 - $105 * $168);
 $199 = +($24 + $135 * $168);
 $200 = +($25 + $135 * $169);
 $201 = $195 + ((HEAP32[$15 >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$201 >> 2] = $199;
 HEAPF32[$201 + 4 >> 2] = $200;
 HEAPF32[(HEAP32[$2 >> 2] | 0) + ((HEAP32[$15 >> 2] | 0) * 12 | 0) + 8 >> 2] = $aB$0 + $142 * ($118 * $169 - $121 * $168);
 if (!($131 <= .004999999888241291)) {
  $210 = 0;
  return $210 | 0;
 }
 $210 = $angularError$1 <= .03490658849477768;
 return $210 | 0;
}

function __Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_($manifold, $edgeA, $xfA, $circleB, $xfB) {
 $manifold = $manifold | 0;
 $edgeA = $edgeA | 0;
 $xfA = $xfA | 0;
 $circleB = $circleB | 0;
 $xfB = $xfB | 0;
 var $0 = 0, $1 = 0, $100 = 0, $104 = 0, $108 = 0, $113 = 0, $114 = 0, $119 = 0.0, $120 = 0.0, $130 = 0, $136 = 0.0, $148 = 0, $152 = 0, $156 = 0, $161 = 0, $162 = 0, $168 = 0.0, $170 = 0.0, $179 = 0.0, $180 = 0.0, $186 = 0.0, $193 = 0.0, $195 = 0.0, $197 = 0.0, $199 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0, $21 = 0.0, $213 = 0, $217 = 0, $221 = 0, $226 = 0, $227 = 0, $24 = 0.0, $26 = 0.0, $29 = 0.0, $3 = 0.0, $31 = 0.0, $34 = 0.0, $36 = 0, $38 = 0, $4 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $45 = 0, $47 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $59 = 0.0, $60 = 0.0, $61 = 0.0, $64 = 0.0, $69 = 0.0, $7 = 0.0, $80 = 0, $86 = 0.0, $9 = 0.0;
 $0 = $manifold + 60 | 0;
 HEAP32[$0 >> 2] = 0;
 $1 = $circleB + 12 | 0;
 $3 = +HEAPF32[$xfB + 12 >> 2];
 $4 = +HEAPF32[$1 >> 2];
 $7 = +HEAPF32[$xfB + 8 >> 2];
 $9 = +HEAPF32[$circleB + 16 >> 2];
 $21 = +HEAPF32[$xfB >> 2] + ($3 * $4 - $7 * $9) - +HEAPF32[$xfA >> 2];
 $24 = $4 * $7 + $3 * $9 + +HEAPF32[$xfB + 4 >> 2] - +HEAPF32[$xfA + 4 >> 2];
 $26 = +HEAPF32[$xfA + 12 >> 2];
 $29 = +HEAPF32[$xfA + 8 >> 2];
 $31 = $21 * $26 + $24 * $29;
 $34 = $26 * $24 - $21 * $29;
 $36 = $edgeA + 12 | 0;
 $38 = HEAP32[$36 >> 2] | 0;
 $41 = HEAP32[$36 + 4 >> 2] | 0;
 $42 = (HEAP32[tempDoublePtr >> 2] = $38, +HEAPF32[tempDoublePtr >> 2]);
 $43 = (HEAP32[tempDoublePtr >> 2] = $41, +HEAPF32[tempDoublePtr >> 2]);
 $45 = $edgeA + 20 | 0;
 $47 = HEAP32[$45 >> 2] | 0;
 $50 = HEAP32[$45 + 4 >> 2] | 0;
 $51 = (HEAP32[tempDoublePtr >> 2] = $47, +HEAPF32[tempDoublePtr >> 2]);
 $52 = (HEAP32[tempDoublePtr >> 2] = $50, +HEAPF32[tempDoublePtr >> 2]);
 $53 = $51 - $42;
 $54 = $52 - $43;
 $59 = $53 * ($51 - $31) + $54 * ($52 - $34);
 $60 = $31 - $42;
 $61 = $34 - $43;
 $64 = $60 * $53 + $61 * $54;
 $69 = +HEAPF32[$edgeA + 8 >> 2] + +HEAPF32[$circleB + 8 >> 2];
 if ($64 <= 0.0) {
  if ($60 * $60 + $61 * $61 > $69 * $69) return;
  if (HEAP8[$edgeA + 44 >> 0] | 0) {
   $80 = $edgeA + 28 | 0;
   $86 = +HEAPF32[$80 >> 2];
   if (($42 - $31) * ($42 - $86) + ($43 - $34) * ($43 - +HEAPF32[$80 + 4 >> 2]) > 0.0) return;
  }
  HEAP32[$0 >> 2] = 1;
  HEAP32[$manifold + 56 >> 2] = 0;
  HEAPF32[$manifold + 40 >> 2] = 0.0;
  HEAPF32[$manifold + 44 >> 2] = 0.0;
  $100 = $manifold + 48 | 0;
  HEAP32[$100 >> 2] = $38;
  HEAP32[$100 + 4 >> 2] = $41;
  $104 = $manifold + 16 | 0;
  HEAP32[$104 >> 2] = 0;
  HEAP8[$104 >> 0] = 0;
  HEAP8[$104 + 1 >> 0] = 0;
  HEAP8[$104 + 2 >> 0] = 0;
  HEAP8[$104 + 3 >> 0] = 0;
  $108 = $1;
  $113 = HEAP32[$108 + 4 >> 2] | 0;
  $114 = $manifold;
  HEAP32[$114 >> 2] = HEAP32[$108 >> 2];
  HEAP32[$114 + 4 >> 2] = $113;
  return;
 }
 if ($59 <= 0.0) {
  $119 = $31 - $51;
  $120 = $34 - $52;
  if ($119 * $119 + $120 * $120 > $69 * $69) return;
  if (HEAP8[$edgeA + 45 >> 0] | 0) {
   $130 = $edgeA + 36 | 0;
   $136 = +HEAPF32[$130 >> 2];
   if ($119 * ($136 - $51) + $120 * (+HEAPF32[$130 + 4 >> 2] - $52) > 0.0) return;
  }
  HEAP32[$0 >> 2] = 1;
  HEAP32[$manifold + 56 >> 2] = 0;
  HEAPF32[$manifold + 40 >> 2] = 0.0;
  HEAPF32[$manifold + 44 >> 2] = 0.0;
  $148 = $manifold + 48 | 0;
  HEAP32[$148 >> 2] = $47;
  HEAP32[$148 + 4 >> 2] = $50;
  $152 = $manifold + 16 | 0;
  HEAP32[$152 >> 2] = 0;
  HEAP8[$152 >> 0] = 1;
  HEAP8[$152 + 1 >> 0] = 0;
  HEAP8[$152 + 2 >> 0] = 0;
  HEAP8[$152 + 3 >> 0] = 0;
  $156 = $1;
  $161 = HEAP32[$156 + 4 >> 2] | 0;
  $162 = $manifold;
  HEAP32[$162 >> 2] = HEAP32[$156 >> 2];
  HEAP32[$162 + 4 >> 2] = $161;
  return;
 }
 $168 = $53 * $53 + $54 * $54;
 if (!($168 > 0.0)) ___assert_fail(92608, 92624, 127, 92688);
 $170 = 1.0 / $168;
 $179 = $31 - ($42 * $59 + $51 * $64) * $170;
 $180 = $34 - ($43 * $59 + $52 * $64) * $170;
 if ($179 * $179 + $180 * $180 > $69 * $69) return;
 $186 = -$54;
 if ($53 * $61 + $60 * $186 < 0.0) {
  $193 = $54;
  $195 = -$53;
 } else {
  $193 = $186;
  $195 = $53;
 }
 $197 = +Math_sqrt(+($195 * $195 + $193 * $193));
 if ($197 < 1.1920928955078125e-07) {
  $205 = $193;
  $207 = $195;
 } else {
  $199 = 1.0 / $197;
  $205 = $193 * $199;
  $207 = $195 * $199;
 }
 HEAP32[$0 >> 2] = 1;
 HEAP32[$manifold + 56 >> 2] = 1;
 $204 = +$205;
 $206 = +$207;
 $208 = $manifold + 40 | 0;
 HEAPF32[$208 >> 2] = $204;
 HEAPF32[$208 + 4 >> 2] = $206;
 $213 = $manifold + 48 | 0;
 HEAP32[$213 >> 2] = $38;
 HEAP32[$213 + 4 >> 2] = $41;
 $217 = $manifold + 16 | 0;
 HEAP32[$217 >> 2] = 0;
 HEAP8[$217 >> 0] = 0;
 HEAP8[$217 + 1 >> 0] = 0;
 HEAP8[$217 + 2 >> 0] = 1;
 HEAP8[$217 + 3 >> 0] = 0;
 $221 = $1;
 $226 = HEAP32[$221 + 4 >> 2] | 0;
 $227 = $manifold;
 HEAP32[$227 >> 2] = HEAP32[$221 >> 2];
 HEAP32[$227 + 4 >> 2] = $226;
 return;
}

function _codeexpval($fs, $op, $e1, $e2, $line) {
 $fs = $fs | 0;
 $op = $op | 0;
 $e1 = $e1 | 0;
 $e2 = $e2 | 0;
 $line = $line | 0;
 var $$pre$phi$iZ2D = 0, $1 = 0, $10 = 0, $105 = 0, $112 = 0, $118 = 0, $125 = 0, $13 = 0.0, $141 = 0.0, $22 = 0, $24 = 0, $28 = 0.0, $31 = 0, $33 = 0, $36 = 0, $38 = 0, $41 = 0, $43 = 0.0, $54 = 0.0, $65 = 0, $66 = 0, $73 = 0, $79 = 0, $8 = 0, $86 = 0, $92 = 0, $99 = 0, $i$i$i = 0, $o1$0 = 0, $o2$0 = 0, $res$i = 0, $v1$i = 0, $v2$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $i$i$i = sp + 24 | 0;
 $v1$i = sp + 16 | 0;
 $v2$i = sp + 8 | 0;
 $res$i = sp;
 L1 : do if ($op >>> 0 < 27) {
  $1 = $op + -13 | 0;
  if ((HEAP32[$e1 + 8 >> 2] | 0) == -1) if ((HEAP32[$e1 + 12 >> 2] | 0) == -1) {
   $8 = HEAP32[$e1 >> 2] | 0;
   if (($8 | 0) == 5) {
    $13 = +HEAPF32[$e1 + 4 >> 2];
    HEAPF32[$v1$i >> 2] = $13;
    HEAP32[$v1$i + 4 >> 2] = 3;
    $31 = 3;
    $33 = (HEAPF32[tempDoublePtr >> 2] = $13, HEAP32[tempDoublePtr >> 2] | 0);
   } else if (($8 | 0) == 6) {
    $10 = HEAP32[$e1 + 4 >> 2] | 0;
    HEAP32[$v1$i >> 2] = $10;
    HEAP32[$v1$i + 4 >> 2] = 19;
    $31 = 19;
    $33 = $10;
   } else break;
   if ((HEAP32[$e2 + 8 >> 2] | 0) == -1) if ((HEAP32[$e2 + 12 >> 2] | 0) == -1) {
    $22 = HEAP32[$e2 >> 2] | 0;
    if (($22 | 0) == 6) {
     $24 = HEAP32[$e2 + 4 >> 2] | 0;
     HEAP32[$v2$i >> 2] = $24;
     HEAP32[$v2$i + 4 >> 2] = 19;
     $141 = (HEAP32[tempDoublePtr >> 2] = $24, +HEAPF32[tempDoublePtr >> 2]);
     $38 = 19;
     $41 = $24;
    } else if (($22 | 0) == 5) {
     $28 = +HEAPF32[$e2 + 4 >> 2];
     HEAPF32[$v2$i >> 2] = $28;
     HEAP32[$v2$i + 4 >> 2] = 3;
     $141 = $28;
     $38 = 3;
     $41 = (HEAPF32[tempDoublePtr >> 2] = $28, HEAP32[tempDoublePtr >> 2] | 0);
    } else break;
    switch ($op | 0) {
    case 16:
    case 19:
    case 18:
     {
      if (($38 | 0) == 19) $43 = +($41 | 0); else $43 = $141;
      if (!($43 != 0.0)) break L1;
      break;
     }
    case 26:
    case 24:
    case 23:
    case 22:
    case 21:
    case 20:
     {
      if (($31 | 0) == 19) {
       HEAP32[$i$i$i >> 2] = $33;
       $36 = $38;
      } else {
       if (!(_luaV_tointeger_($v1$i, $i$i$i) | 0)) break L1;
       $36 = HEAP32[$v2$i + 4 >> 2] | 0;
      }
      if (($36 | 0) != 19) if (!(_luaV_tointeger_($v2$i, $i$i$i) | 0)) break L1;
      break;
     }
    default:
     {}
    }
    _luaO_arith(HEAP32[(HEAP32[$fs + 8 >> 2] | 0) + 32 >> 2] | 0, $1, $v1$i, $v2$i, $res$i);
    if ((HEAP32[$res$i + 4 >> 2] | 0) == 19) {
     HEAP32[$e1 >> 2] = 6;
     HEAP32[$e1 + 4 >> 2] = HEAP32[$res$i >> 2];
     STACKTOP = sp;
     return;
    }
    $54 = +HEAPF32[$res$i >> 2];
    if (!($54 != $54 | 0.0 != 0.0 | $54 == 0.0)) {
     HEAP32[$e1 >> 2] = 5;
     HEAPF32[$e1 + 4 >> 2] = $54;
     STACKTOP = sp;
     return;
    }
   }
  }
 } while (0);
 do if (($op | 0) == 25 | ($op | 0) == 26 | ($op | 0) == 28) {
  _luaK_dischargevars($fs, $e1);
  if ((HEAP32[$e1 >> 2] | 0) == 7) {
   $65 = $e1 + 4 | 0;
   $66 = HEAP32[$65 >> 2] | 0;
   if ((HEAP32[$e1 + 8 >> 2] | 0) == (HEAP32[$e1 + 12 >> 2] | 0)) {
    $o1$0 = $66;
    $o2$0 = 0;
    break;
   }
   if (($66 | 0) < (HEAPU8[$fs + 42 >> 0] | 0 | 0)) $$pre$phi$iZ2D = $65; else {
    _exp2reg($fs, $e1, $66);
    $o1$0 = HEAP32[$65 >> 2] | 0;
    $o2$0 = 0;
    break;
   }
  } else $$pre$phi$iZ2D = $e1 + 4 | 0;
  _luaK_exp2nextreg($fs, $e1);
  $o1$0 = HEAP32[$$pre$phi$iZ2D >> 2] | 0;
  $o2$0 = 0;
 } else {
  $73 = _luaK_exp2RK($fs, $e2) | 0;
  $o1$0 = _luaK_exp2RK($fs, $e1) | 0;
  $o2$0 = $73;
 } while (0);
 if (($o1$0 | 0) > ($o2$0 | 0)) {
  if ((HEAP32[$e1 >> 2] | 0) == 7) {
   $79 = HEAP32[$e1 + 4 >> 2] | 0;
   if (!($79 & 256)) if ((HEAPU8[$fs + 42 >> 0] | 0 | 0) <= ($79 | 0)) {
    $86 = $fs + 44 | 0;
    HEAP8[$86 >> 0] = (HEAP8[$86 >> 0] | 0) + -1 << 24 >> 24;
   }
  }
  if ((HEAP32[$e2 >> 2] | 0) == 7) {
   $92 = HEAP32[$e2 + 4 >> 2] | 0;
   if (!($92 & 256)) if ((HEAPU8[$fs + 42 >> 0] | 0 | 0) <= ($92 | 0)) {
    $99 = $fs + 44 | 0;
    HEAP8[$99 >> 0] = (HEAP8[$99 >> 0] | 0) + -1 << 24 >> 24;
   }
  }
 } else {
  if ((HEAP32[$e2 >> 2] | 0) == 7) {
   $105 = HEAP32[$e2 + 4 >> 2] | 0;
   if (!($105 & 256)) if ((HEAPU8[$fs + 42 >> 0] | 0 | 0) <= ($105 | 0)) {
    $112 = $fs + 44 | 0;
    HEAP8[$112 >> 0] = (HEAP8[$112 >> 0] | 0) + -1 << 24 >> 24;
   }
  }
  if ((HEAP32[$e1 >> 2] | 0) == 7) {
   $118 = HEAP32[$e1 + 4 >> 2] | 0;
   if (!($118 & 256)) if ((HEAPU8[$fs + 42 >> 0] | 0 | 0) <= ($118 | 0)) {
    $125 = $fs + 44 | 0;
    HEAP8[$125 >> 0] = (HEAP8[$125 >> 0] | 0) + -1 << 24 >> 24;
   }
  }
 }
 HEAP32[$e1 + 4 >> 2] = _luaK_code($fs, $o1$0 << 23 | $op | $o2$0 << 14) | 0;
 HEAP32[$e1 >> 2] = 12;
 HEAP32[(HEAP32[(HEAP32[$fs >> 2] | 0) + 56 >> 2] | 0) + ((HEAP32[$fs + 16 >> 2] | 0) + -1 << 2) >> 2] = $line;
 STACKTOP = sp;
 return;
}

function _lua_resume($L, $from, $nargs) {
 $L = $L | 0;
 $from = $from | 0;
 $nargs = $nargs | 0;
 var $$$i$i = 0, $$lim$0$i$i$i = 0, $0 = 0, $1 = 0, $103 = 0, $110 = 0, $115 = 0, $116 = 0, $120 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $25 = 0, $29 = 0, $31 = 0, $32 = 0, $35 = 0, $41 = 0, $49 = 0, $54 = 0, $55 = 0, $59 = 0, $66 = 0, $7 = 0, $73 = 0, $75 = 0, $78 = 0, $8 = 0, $87 = 0, $89 = 0, $9 = 0, $93 = 0, $97 = 0, $ci$0$i$i = 0, $ci$01$i$i = 0, $ci$02$i$i = 0, $ci$03$i$i$i = 0, $lim$0$lcssa$i$i$i = 0, $lim$02$i$i$i = 0, $status = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $status = sp;
 $0 = $L + 104 | 0;
 $1 = HEAP16[$0 >> 1] | 0;
 if (!$from) $8 = 1; else $8 = (HEAPU16[$from + 106 >> 1] | 0) + 1 & 65535;
 $7 = $L + 106 | 0;
 HEAP16[$7 >> 1] = $8;
 HEAP16[$0 >> 1] = 0;
 $9 = $L + 8 | 0;
 $13 = _luaD_rawrunprotected($L, 80, (HEAP32[$9 >> 2] | 0) + (0 - $nargs << 3) | 0) | 0;
 HEAP32[$status >> 2] = $13;
 if (($13 | 0) == -1) {
  HEAP32[$status >> 2] = 2;
  $126 = 2;
  HEAP16[$0 >> 1] = $1;
  $124 = HEAP16[$7 >> 1] | 0;
  $125 = $124 + -1 << 16 >> 16;
  HEAP16[$7 >> 1] = $125;
  STACKTOP = sp;
  return $126 | 0;
 }
 if (($13 | 0) <= 1) {
  $126 = $13;
  HEAP16[$0 >> 1] = $1;
  $124 = HEAP16[$7 >> 1] | 0;
  $125 = $124 + -1 << 16 >> 16;
  HEAP16[$7 >> 1] = $125;
  STACKTOP = sp;
  return $126 | 0;
 }
 $16 = $L + 16 | 0;
 $17 = $L + 28 | 0;
 $18 = $L + 109 | 0;
 $19 = $L + 92 | 0;
 $20 = $L + 88 | 0;
 $21 = $L + 12 | 0;
 $89 = $13;
 L11 : while (1) {
  $ci$01$i$i = HEAP32[$16 >> 2] | 0;
  if (!$ci$01$i$i) break; else $ci$02$i$i = $ci$01$i$i;
  while (1) {
   $25 = $ci$02$i$i + 34 | 0;
   if (HEAP8[$25 >> 0] & 16) break;
   $ci$0$i$i = HEAP32[$ci$02$i$i + 8 >> 2] | 0;
   if (!$ci$0$i$i) break L11; else $ci$02$i$i = $ci$0$i$i;
  }
  $29 = HEAP32[$17 >> 2] | 0;
  $31 = HEAP32[$ci$02$i$i + 28 >> 2] | 0;
  $32 = $29 + $31 | 0;
  _luaF_close($L, $32);
  if (($89 | 0) == 6) {
   $41 = _luaS_newlstr($L, 56448, 23) | 0;
   HEAP32[$32 >> 2] = $41;
   HEAP32[$29 + ($31 + 4) >> 2] = HEAPU8[$41 + 4 >> 0] | 0 | 64;
  } else if (($89 | 0) == 4) {
   $35 = HEAP32[(HEAP32[$21 >> 2] | 0) + 132 >> 2] | 0;
   HEAP32[$32 >> 2] = $35;
   HEAP32[$29 + ($31 + 4) >> 2] = HEAPU8[$35 + 4 >> 0] | 0 | 64;
  } else {
   $49 = (HEAP32[$9 >> 2] | 0) + -8 | 0;
   $54 = HEAP32[$49 + 4 >> 2] | 0;
   $55 = $32;
   HEAP32[$55 >> 2] = HEAP32[$49 >> 2];
   HEAP32[$55 + 4 >> 2] = $54;
  }
  $59 = $29 + ($31 + 8) | 0;
  HEAP32[$9 >> 2] = $59;
  HEAP32[$16 >> 2] = $ci$02$i$i;
  HEAP8[$18 >> 0] = (HEAPU8[$25 >> 0] | 0) & 1;
  HEAP16[$0 >> 1] = 0;
  if (!$ci$02$i$i) $lim$0$lcssa$i$i$i = $59; else {
   $ci$03$i$i$i = $ci$02$i$i;
   $lim$02$i$i$i = $59;
   while (1) {
    $66 = HEAP32[$ci$03$i$i$i + 4 >> 2] | 0;
    $$lim$0$i$i$i = $lim$02$i$i$i >>> 0 < $66 >>> 0 ? $66 : $lim$02$i$i$i;
    $ci$03$i$i$i = HEAP32[$ci$03$i$i$i + 8 >> 2] | 0;
    if (!$ci$03$i$i$i) {
     $lim$0$lcssa$i$i$i = $$lim$0$i$i$i;
     break;
    } else $lim$02$i$i$i = $$lim$0$i$i$i;
   }
  }
  $73 = $lim$0$lcssa$i$i$i - (HEAP32[$17 >> 2] | 0) | 0;
  $75 = ($73 >> 3) + 1 | 0;
  $78 = (($75 | 0) / 8 | 0) + 10 + $75 | 0;
  $$$i$i = ($78 | 0) > 1e6 ? 1e6 : $78;
  if ((HEAP32[$19 >> 2] | 0) > 1e6) _luaE_freeCI($L); else _luaE_shrinkCI($L);
  if (($73 | 0) <= 7999992) if (($$$i$i | 0) < (HEAP32[$19 >> 2] | 0)) _luaD_reallocstack($L, $$$i$i);
  HEAP32[$20 >> 2] = HEAP32[$ci$02$i$i + 20 >> 2];
  $87 = _luaD_rawrunprotected($L, 81, $status) | 0;
  HEAP32[$status >> 2] = $87;
  if (($87 | 0) > 1) $89 = $87; else {
   $126 = $87;
   label = 29;
   break;
  }
 }
 if ((label | 0) == 29) {
  HEAP16[$0 >> 1] = $1;
  $124 = HEAP16[$7 >> 1] | 0;
  $125 = $124 + -1 << 16 >> 16;
  HEAP16[$7 >> 1] = $125;
  STACKTOP = sp;
  return $126 | 0;
 }
 if (($89 | 0) <= 1) {
  $126 = $89;
  HEAP16[$0 >> 1] = $1;
  $124 = HEAP16[$7 >> 1] | 0;
  $125 = $124 + -1 << 16 >> 16;
  HEAP16[$7 >> 1] = $125;
  STACKTOP = sp;
  return $126 | 0;
 }
 HEAP8[$L + 6 >> 0] = $89;
 $93 = HEAP32[$9 >> 2] | 0;
 if (($89 | 0) == 6) {
  $103 = _luaS_newlstr($L, 56448, 23) | 0;
  HEAP32[$93 >> 2] = $103;
  HEAP32[$93 + 4 >> 2] = HEAPU8[$103 + 4 >> 0] | 0 | 64;
 } else if (($89 | 0) == 4) {
  $97 = HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 132 >> 2] | 0;
  HEAP32[$93 >> 2] = $97;
  HEAP32[$93 + 4 >> 2] = HEAPU8[$97 + 4 >> 0] | 0 | 64;
 } else {
  $110 = $93 + -8 | 0;
  $115 = HEAP32[$110 + 4 >> 2] | 0;
  $116 = $93;
  HEAP32[$116 >> 2] = HEAP32[$110 >> 2];
  HEAP32[$116 + 4 >> 2] = $115;
 }
 $120 = $93 + 8 | 0;
 HEAP32[$9 >> 2] = $120;
 HEAP32[(HEAP32[$L + 16 >> 2] | 0) + 4 >> 2] = $120;
 $126 = HEAP32[$status >> 2] | 0;
 HEAP16[$0 >> 1] = $1;
 $124 = HEAP16[$7 >> 1] | 0;
 $125 = $124 + -1 << 16 >> 16;
 HEAP16[$7 >> 1] = $125;
 STACKTOP = sp;
 return $126 | 0;
}

function __ZN24b2PositionSolverManifold10InitializeEP27b2ContactPositionConstraintRK11b2TransformS4_i($this, $pc, $xfA, $xfB, $index) {
 $this = $this | 0;
 $pc = $pc | 0;
 $xfA = $xfA | 0;
 $xfB = $xfB | 0;
 $index = $index | 0;
 var $102 = 0.0, $104 = 0.0, $106 = 0.0, $108 = 0.0, $11 = 0.0, $120 = 0.0, $122 = 0.0, $125 = 0.0, $127 = 0.0, $13 = 0.0, $131 = 0.0, $137 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0, $157 = 0, $158 = 0.0, $160 = 0.0, $162 = 0, $163 = 0.0, $165 = 0.0, $167 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0, $177 = 0.0, $179 = 0.0, $181 = 0.0, $183 = 0.0, $195 = 0.0, $197 = 0.0, $200 = 0.0, $202 = 0.0, $206 = 0.0, $212 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0, $23 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0, $25 = 0.0, $26 = 0.0, $29 = 0.0, $31 = 0.0, $35 = 0.0, $4 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $53 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $6 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $71 = 0.0, $73 = 0.0, $8 = 0.0, $82 = 0, $83 = 0.0, $85 = 0.0, $87 = 0, $88 = 0.0, $90 = 0.0, $92 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0;
 if ((HEAP32[$pc + 84 >> 2] | 0) <= 0) ___assert_fail(93816, 93560, 618, 93840);
 $4 = HEAP32[$pc + 72 >> 2] | 0;
 if (!$4) {
  $6 = +HEAPF32[$xfA + 12 >> 2];
  $8 = +HEAPF32[$pc + 24 >> 2];
  $11 = +HEAPF32[$xfA + 8 >> 2];
  $13 = +HEAPF32[$pc + 28 >> 2];
  $17 = +HEAPF32[$xfA >> 2] + ($6 * $8 - $11 * $13);
  $23 = $8 * $11 + $6 * $13 + +HEAPF32[$xfA + 4 >> 2];
  $25 = +HEAPF32[$xfB + 12 >> 2];
  $26 = +HEAPF32[$pc >> 2];
  $29 = +HEAPF32[$xfB + 8 >> 2];
  $31 = +HEAPF32[$pc + 4 >> 2];
  $35 = +HEAPF32[$xfB >> 2] + ($25 * $26 - $29 * $31);
  $41 = $26 * $29 + $25 * $31 + +HEAPF32[$xfB + 4 >> 2];
  $42 = $35 - $17;
  $43 = $41 - $23;
  $44 = +$42;
  $45 = +$43;
  $46 = $this;
  HEAPF32[$46 >> 2] = $44;
  HEAPF32[$46 + 4 >> 2] = $45;
  $53 = +Math_sqrt(+($42 * $42 + $43 * $43));
  if ($53 < 1.1920928955078125e-07) {
   $71 = $42;
   $73 = $43;
  } else {
   $56 = 1.0 / $53;
   $57 = $42 * $56;
   HEAPF32[$this >> 2] = $57;
   $58 = $43 * $56;
   HEAPF32[$this + 4 >> 2] = $58;
   $71 = $57;
   $73 = $58;
  }
  $64 = +(($17 + $35) * .5);
  $65 = +(($23 + $41) * .5);
  $66 = $this + 8 | 0;
  HEAPF32[$66 >> 2] = $64;
  HEAPF32[$66 + 4 >> 2] = $65;
  HEAPF32[$this + 16 >> 2] = $42 * $71 + $43 * $73 - +HEAPF32[$pc + 76 >> 2] - +HEAPF32[$pc + 80 >> 2];
  return;
 } else if (($4 | 0) == 1) {
  $82 = $xfA + 12 | 0;
  $83 = +HEAPF32[$82 >> 2];
  $85 = +HEAPF32[$pc + 16 >> 2];
  $87 = $xfA + 8 | 0;
  $88 = +HEAPF32[$87 >> 2];
  $90 = +HEAPF32[$pc + 20 >> 2];
  $92 = $83 * $85 - $88 * $90;
  $95 = $85 * $88 + $83 * $90;
  $96 = +$92;
  $97 = +$95;
  $98 = $this;
  HEAPF32[$98 >> 2] = $96;
  HEAPF32[$98 + 4 >> 2] = $97;
  $102 = +HEAPF32[$82 >> 2];
  $104 = +HEAPF32[$pc + 24 >> 2];
  $106 = +HEAPF32[$87 >> 2];
  $108 = +HEAPF32[$pc + 28 >> 2];
  $120 = +HEAPF32[$xfB + 12 >> 2];
  $122 = +HEAPF32[$pc + ($index << 3) >> 2];
  $125 = +HEAPF32[$xfB + 8 >> 2];
  $127 = +HEAPF32[$pc + ($index << 3) + 4 >> 2];
  $131 = +HEAPF32[$xfB >> 2] + ($120 * $122 - $125 * $127);
  $137 = $122 * $125 + $120 * $127 + +HEAPF32[$xfB + 4 >> 2];
  HEAPF32[$this + 16 >> 2] = $92 * ($131 - (+HEAPF32[$xfA >> 2] + ($102 * $104 - $106 * $108))) + ($137 - ($104 * $106 + $102 * $108 + +HEAPF32[$xfA + 4 >> 2])) * $95 - +HEAPF32[$pc + 76 >> 2] - +HEAPF32[$pc + 80 >> 2];
  $151 = +$131;
  $152 = +$137;
  $153 = $this + 8 | 0;
  HEAPF32[$153 >> 2] = $151;
  HEAPF32[$153 + 4 >> 2] = $152;
  return;
 } else if (($4 | 0) == 2) {
  $157 = $xfB + 12 | 0;
  $158 = +HEAPF32[$157 >> 2];
  $160 = +HEAPF32[$pc + 16 >> 2];
  $162 = $xfB + 8 | 0;
  $163 = +HEAPF32[$162 >> 2];
  $165 = +HEAPF32[$pc + 20 >> 2];
  $167 = $158 * $160 - $163 * $165;
  $170 = $160 * $163 + $158 * $165;
  $171 = +$167;
  $172 = +$170;
  $173 = $this;
  HEAPF32[$173 >> 2] = $171;
  HEAPF32[$173 + 4 >> 2] = $172;
  $177 = +HEAPF32[$157 >> 2];
  $179 = +HEAPF32[$pc + 24 >> 2];
  $181 = +HEAPF32[$162 >> 2];
  $183 = +HEAPF32[$pc + 28 >> 2];
  $195 = +HEAPF32[$xfA + 12 >> 2];
  $197 = +HEAPF32[$pc + ($index << 3) >> 2];
  $200 = +HEAPF32[$xfA + 8 >> 2];
  $202 = +HEAPF32[$pc + ($index << 3) + 4 >> 2];
  $206 = +HEAPF32[$xfA >> 2] + ($195 * $197 - $200 * $202);
  $212 = $197 * $200 + $195 * $202 + +HEAPF32[$xfA + 4 >> 2];
  HEAPF32[$this + 16 >> 2] = $167 * ($206 - (+HEAPF32[$xfB >> 2] + ($177 * $179 - $181 * $183))) + ($212 - ($179 * $181 + $177 * $183 + +HEAPF32[$xfB + 4 >> 2])) * $170 - +HEAPF32[$pc + 76 >> 2] - +HEAPF32[$pc + 80 >> 2];
  $226 = +$206;
  $227 = +$212;
  $228 = $this + 8 | 0;
  HEAPF32[$228 >> 2] = $226;
  HEAPF32[$228 + 4 >> 2] = $227;
  $234 = +-$167;
  $235 = +-$170;
  $236 = $this;
  HEAPF32[$236 >> 2] = $234;
  HEAPF32[$236 + 4 >> 2] = $235;
  return;
 } else return;
}

function _codebook_decode_deinterleave_repeat($f, $c, $outputs, $ch, $c_inter_p, $p_inter_p, $len, $total_decode) {
 $f = $f | 0;
 $c = $c | 0;
 $outputs = $outputs | 0;
 $ch = $ch | 0;
 $c_inter_p = $c_inter_p | 0;
 $p_inter_p = $p_inter_p | 0;
 $len = $len | 0;
 $total_decode = $total_decode | 0;
 var $$0 = 0, $$0126 = 0, $$3 = 0, $$4 = 0, $$p_inter$1 = 0, $$p_inter$3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $27 = 0, $30 = 0, $31 = 0, $45 = 0, $52 = 0, $55 = 0, $56 = 0, $62 = 0, $64 = 0, $67 = 0, $68 = 0, $7 = 0, $72 = 0, $79 = 0, $8 = 0, $82 = 0, $83 = 0, $9 = 0, $c_inter$0$lcssa = 0, $c_inter$025 = 0, $c_inter$18 = 0, $c_inter$314 = 0, $c_inter$5 = 0, $effective$024 = 0, $effective$1 = 0, $i$06 = 0, $i$113 = 0, $last$07 = 0.0, $p_inter$0$lcssa = 0, $p_inter$023 = 0, $p_inter$15 = 0, $p_inter$312 = 0, $p_inter$5 = 0, $z$0 = 0, label = 0;
 $0 = HEAP32[$c_inter_p >> 2] | 0;
 $1 = HEAP32[$p_inter_p >> 2] | 0;
 $2 = HEAP32[$c >> 2] | 0;
 if (!(HEAP8[$c + 21 >> 0] | 0)) {
  HEAP32[$f + 116 >> 2] = 21;
  $$0 = 0;
  return $$0 | 0;
 }
 L5 : do if (($total_decode | 0) > 0) {
  $7 = $f + 1412 | 0;
  $8 = $f + 1408 | 0;
  $9 = $c + 8 | 0;
  $10 = $c + 23 | 0;
  $11 = Math_imul($len, $ch) | 0;
  $12 = $c + 22 | 0;
  $13 = $c + 28 | 0;
  $14 = $c + 2092 | 0;
  $$0126 = $total_decode;
  $c_inter$025 = $0;
  $effective$024 = $2;
  $p_inter$023 = $1;
  while (1) {
   if ((HEAP32[$7 >> 2] | 0) < 10) _prep_huffman($f);
   $18 = HEAP32[$8 >> 2] | 0;
   $21 = HEAP16[$c + (($18 & 1023) << 1) + 36 >> 1] | 0;
   $22 = $21 << 16 >> 16;
   if ($21 << 16 >> 16 > -1) {
    $27 = HEAPU8[(HEAP32[$9 >> 2] | 0) + $22 >> 0] | 0;
    HEAP32[$8 >> 2] = $18 >>> $27;
    $30 = (HEAP32[$7 >> 2] | 0) - $27 | 0;
    $31 = ($30 | 0) < 0;
    HEAP32[$7 >> 2] = $31 ? 0 : $30;
    $z$0 = $31 ? -1 : $22;
   } else $z$0 = _codebook_decode_scalar_raw($f, $c) | 0;
   if (HEAP8[$10 >> 0] | 0) if (($z$0 | 0) >= (HEAP32[$14 >> 2] | 0)) {
    label = 12;
    break;
   }
   if (($z$0 | 0) < 0) break;
   $45 = Math_imul($p_inter$023, $ch) | 0;
   if (($effective$024 + $45 + $c_inter$025 | 0) > ($11 | 0)) $effective$1 = $11 - $45 + $c_inter$025 | 0; else $effective$1 = $effective$024;
   $52 = Math_imul(HEAP32[$c >> 2] | 0, $z$0) | 0;
   $55 = ($effective$1 | 0) > 0;
   if (!(HEAP8[$12 >> 0] | 0)) if ($55) {
    $c_inter$314 = $c_inter$025;
    $i$113 = 0;
    $p_inter$312 = $p_inter$023;
    while (1) {
     $72 = HEAP32[$outputs + ($c_inter$314 << 2) >> 2] | 0;
     if ($72) {
      $79 = $72 + ($p_inter$312 << 2) | 0;
      HEAPF32[$79 >> 2] = +HEAPF32[$79 >> 2] + (+HEAPF32[(HEAP32[$13 >> 2] | 0) + ($i$113 + $52 << 2) >> 2] + 0.0);
     }
     $82 = $c_inter$314 + 1 | 0;
     $83 = ($82 | 0) == ($ch | 0);
     $$p_inter$3 = ($83 & 1) + $p_inter$312 | 0;
     $$4 = $83 ? 0 : $82;
     $i$113 = $i$113 + 1 | 0;
     if (($i$113 | 0) == ($effective$1 | 0)) {
      $c_inter$5 = $$4;
      $p_inter$5 = $$p_inter$3;
      break;
     } else {
      $c_inter$314 = $$4;
      $p_inter$312 = $$p_inter$3;
     }
    }
   } else {
    $c_inter$5 = $c_inter$025;
    $p_inter$5 = $p_inter$023;
   } else if ($55) {
    $56 = HEAP32[$13 >> 2] | 0;
    $c_inter$18 = $c_inter$025;
    $i$06 = 0;
    $last$07 = 0.0;
    $p_inter$15 = $p_inter$023;
    while (1) {
     $last$07 = $last$07 + +HEAPF32[$56 + ($i$06 + $52 << 2) >> 2];
     $62 = HEAP32[$outputs + ($c_inter$18 << 2) >> 2] | 0;
     if ($62) {
      $64 = $62 + ($p_inter$15 << 2) | 0;
      HEAPF32[$64 >> 2] = $last$07 + +HEAPF32[$64 >> 2];
     }
     $67 = $c_inter$18 + 1 | 0;
     $68 = ($67 | 0) == ($ch | 0);
     $$p_inter$1 = ($68 & 1) + $p_inter$15 | 0;
     $$3 = $68 ? 0 : $67;
     $i$06 = $i$06 + 1 | 0;
     if (($i$06 | 0) == ($effective$1 | 0)) {
      $c_inter$5 = $$3;
      $p_inter$5 = $$p_inter$1;
      break;
     } else {
      $c_inter$18 = $$3;
      $p_inter$15 = $$p_inter$1;
     }
    }
   } else {
    $c_inter$5 = $c_inter$025;
    $p_inter$5 = $p_inter$023;
   }
   $$0126 = $$0126 - $effective$1 | 0;
   if (($$0126 | 0) <= 0) {
    $c_inter$0$lcssa = $c_inter$5;
    $p_inter$0$lcssa = $p_inter$5;
    break L5;
   } else {
    $c_inter$025 = $c_inter$5;
    $effective$024 = $effective$1;
    $p_inter$023 = $p_inter$5;
   }
  }
  if ((label | 0) == 12) ___assert_fail(80712, 78904, 1805, 80752);
  if (!(HEAP8[$f + 1392 >> 0] | 0)) if (HEAP32[$f + 1400 >> 2] | 0) {
   $$0 = 0;
   return $$0 | 0;
  }
  HEAP32[$f + 116 >> 2] = 21;
  $$0 = 0;
  return $$0 | 0;
 } else {
  $c_inter$0$lcssa = $0;
  $p_inter$0$lcssa = $1;
 } while (0);
 HEAP32[$c_inter_p >> 2] = $c_inter$0$lcssa;
 HEAP32[$p_inter_p >> 2] = $p_inter$0$lcssa;
 $$0 = 1;
 return $$0 | 0;
}

function __ZN6b2BodyC2EPK9b2BodyDefP7b2World($this, $bd, $world) {
 $this = $this | 0;
 $bd = $bd | 0;
 $world = $world | 0;
 var $$ = 0, $112 = 0, $117 = 0, $118 = 0, $12 = 0, $135 = 0, $137 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $2 = 0, $22 = 0, $27 = 0, $32 = 0, $33 = 0.0, $38 = 0, $39 = 0.0, $44 = 0, $53 = 0, $58 = 0, $60 = 0, $65 = 0, $67 = 0, $72 = 0, $76 = 0, $78 = 0, $81 = 0, $82 = 0, $86 = 0.0, $94 = 0, $99 = 0;
 $2 = $bd + 4 | 0;
 if (((HEAPF32[tempDoublePtr >> 2] = +HEAPF32[$2 >> 2], HEAP32[tempDoublePtr >> 2] | 0) & 2139095040 | 0) == 2139095040) ___assert_fail(86976, 87e3, 27, 87056);
 if (((HEAPF32[tempDoublePtr >> 2] = +HEAPF32[$bd + 8 >> 2], HEAP32[tempDoublePtr >> 2] | 0) & 2139095040 | 0) == 2139095040) ___assert_fail(86976, 87e3, 27, 87056);
 $12 = $bd + 16 | 0;
 if (((HEAPF32[tempDoublePtr >> 2] = +HEAPF32[$12 >> 2], HEAP32[tempDoublePtr >> 2] | 0) & 2139095040 | 0) == 2139095040) ___assert_fail(87064, 87e3, 28, 87056);
 if (((HEAPF32[tempDoublePtr >> 2] = +HEAPF32[$bd + 20 >> 2], HEAP32[tempDoublePtr >> 2] | 0) & 2139095040 | 0) == 2139095040) ___assert_fail(87064, 87e3, 28, 87056);
 $22 = $bd + 12 | 0;
 if (((HEAPF32[tempDoublePtr >> 2] = +HEAPF32[$22 >> 2], HEAP32[tempDoublePtr >> 2] | 0) & 2139095040 | 0) == 2139095040) ___assert_fail(87096, 87e3, 29, 87056);
 $27 = $bd + 24 | 0;
 if (((HEAPF32[tempDoublePtr >> 2] = +HEAPF32[$27 >> 2], HEAP32[tempDoublePtr >> 2] | 0) & 2139095040 | 0) == 2139095040) ___assert_fail(87120, 87e3, 30, 87056);
 $32 = $bd + 32 | 0;
 $33 = +HEAPF32[$32 >> 2];
 if (((HEAPF32[tempDoublePtr >> 2] = $33, HEAP32[tempDoublePtr >> 2] | 0) & 2139095040 | 0) == 2139095040 | !($33 >= 0.0)) ___assert_fail(87152, 87e3, 31, 87056);
 $38 = $bd + 28 | 0;
 $39 = +HEAPF32[$38 >> 2];
 if (((HEAPF32[tempDoublePtr >> 2] = $39, HEAP32[tempDoublePtr >> 2] | 0) & 2139095040 | 0) == 2139095040 | !($39 >= 0.0)) ___assert_fail(87216, 87e3, 32, 87056);
 $44 = $this + 4 | 0;
 $$ = (HEAP8[$bd + 39 >> 0] | 0) == 0 ? 0 : 8;
 HEAP16[$44 >> 1] = $$;
 if (!(HEAP8[$bd + 38 >> 0] | 0)) $58 = $$; else {
  $53 = ($$ & 65535 | 16) & 65535;
  HEAP16[$44 >> 1] = $53;
  $58 = $53;
 }
 if (!(HEAP8[$bd + 36 >> 0] | 0)) $65 = $58; else {
  $60 = ($58 & 65535 | 4) & 65535;
  HEAP16[$44 >> 1] = $60;
  $65 = $60;
 }
 if (!(HEAP8[$bd + 37 >> 0] | 0)) $72 = $65; else {
  $67 = ($65 & 65535 | 2) & 65535;
  HEAP16[$44 >> 1] = $67;
  $72 = $67;
 }
 if (HEAP8[$bd + 40 >> 0] | 0) HEAP16[$44 >> 1] = $72 & 65535 | 32;
 HEAP32[$this + 88 >> 2] = $world;
 $76 = $2;
 $78 = HEAP32[$76 >> 2] | 0;
 $81 = HEAP32[$76 + 4 >> 2] | 0;
 $82 = $this + 12 | 0;
 HEAP32[$82 >> 2] = $78;
 HEAP32[$82 + 4 >> 2] = $81;
 $86 = +HEAPF32[$22 >> 2];
 HEAPF32[$this + 20 >> 2] = +Math_sin(+$86);
 HEAPF32[$this + 24 >> 2] = +Math_cos(+$86);
 HEAPF32[$this + 28 >> 2] = 0.0;
 HEAPF32[$this + 32 >> 2] = 0.0;
 $94 = $this + 36 | 0;
 HEAP32[$94 >> 2] = $78;
 HEAP32[$94 + 4 >> 2] = $81;
 $99 = $this + 44 | 0;
 HEAP32[$99 >> 2] = $78;
 HEAP32[$99 + 4 >> 2] = $81;
 HEAPF32[$this + 52 >> 2] = +HEAPF32[$22 >> 2];
 HEAPF32[$this + 56 >> 2] = +HEAPF32[$22 >> 2];
 HEAPF32[$this + 60 >> 2] = 0.0;
 HEAP32[$this + 108 >> 2] = 0;
 HEAP32[$this + 112 >> 2] = 0;
 HEAP32[$this + 92 >> 2] = 0;
 HEAP32[$this + 96 >> 2] = 0;
 $112 = $12;
 $117 = HEAP32[$112 + 4 >> 2] | 0;
 $118 = $this + 64 | 0;
 HEAP32[$118 >> 2] = HEAP32[$112 >> 2];
 HEAP32[$118 + 4 >> 2] = $117;
 HEAPF32[$this + 72 >> 2] = +HEAPF32[$27 >> 2];
 HEAPF32[$this + 132 >> 2] = +HEAPF32[$38 >> 2];
 HEAPF32[$this + 136 >> 2] = +HEAPF32[$32 >> 2];
 HEAPF32[$this + 140 >> 2] = +HEAPF32[$bd + 48 >> 2];
 HEAPF32[$this + 76 >> 2] = 0.0;
 HEAPF32[$this + 80 >> 2] = 0.0;
 HEAPF32[$this + 84 >> 2] = 0.0;
 HEAPF32[$this + 144 >> 2] = 0.0;
 $135 = HEAP32[$bd >> 2] | 0;
 HEAP32[$this >> 2] = $135;
 $137 = $this + 116 | 0;
 if (($135 | 0) == 2) {
  HEAPF32[$137 >> 2] = 1.0;
  HEAPF32[$this + 120 >> 2] = 1.0;
  $140 = $this + 124 | 0;
  HEAPF32[$140 >> 2] = 0.0;
  $141 = $this + 128 | 0;
  HEAPF32[$141 >> 2] = 0.0;
  $142 = $bd + 44 | 0;
  $143 = HEAP32[$142 >> 2] | 0;
  $144 = $this + 148 | 0;
  HEAP32[$144 >> 2] = $143;
  $145 = $this + 100 | 0;
  HEAP32[$145 >> 2] = 0;
  $146 = $this + 104 | 0;
  HEAP32[$146 >> 2] = 0;
  return;
 } else {
  HEAPF32[$137 >> 2] = 0.0;
  HEAPF32[$this + 120 >> 2] = 0.0;
  $140 = $this + 124 | 0;
  HEAPF32[$140 >> 2] = 0.0;
  $141 = $this + 128 | 0;
  HEAPF32[$141 >> 2] = 0.0;
  $142 = $bd + 44 | 0;
  $143 = HEAP32[$142 >> 2] | 0;
  $144 = $this + 148 | 0;
  HEAP32[$144 >> 2] = $143;
  $145 = $this + 100 | 0;
  HEAP32[$145 >> 2] = 0;
  $146 = $this + 104 | 0;
  HEAP32[$146 >> 2] = 0;
  return;
 }
}

function _music_stream($m) {
 $m = $m | 0;
 var $1 = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $24 = 0, $26 = 0, $27 = 0, $30 = 0, $33 = 0, $41 = 0, $43 = 0, $44 = 0, $5 = 0, $51 = 0, $54 = 0, $59 = 0, $65 = 0, $67 = 0, $68 = 0, $7 = 0, $72 = 0, $74 = 0, $75 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $buffer = 0, $nb_queued = 0, $processed = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer16 = 0, $vararg_buffer22 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $vararg_buffer22 = sp + 64 | 0;
 $vararg_buffer16 = sp + 48 | 0;
 $vararg_buffer10 = sp + 32 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer = sp;
 $processed = sp + 88 | 0;
 $buffer = sp + 84 | 0;
 $nb_queued = sp + 80 | 0;
 if (!$m) ___assert_fail(23232, 10720, 172, 10944);
 $1 = HEAP32[$m >> 2] | 0;
 $2 = $m + 32 | 0;
 $5 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * (HEAP32[$2 >> 2] << 1) | 0) + 15 & -16) | 0;
 _alGetSourcei(HEAP32[$1 >> 2] | 0, 4118, $processed | 0);
 $7 = _alGetError() | 0;
 if ($7) {
  $16 = $7;
  do {
   $17 = _alGetString($16 | 0) | 0;
   HEAP32[$vararg_buffer >> 2] = 10720;
   HEAP32[$vararg_buffer + 4 >> 2] = 178;
   HEAP32[$vararg_buffer + 8 >> 2] = 10944;
   HEAP32[$vararg_buffer + 12 >> 2] = $17;
   _log_internal(3, 12304, 12024, $vararg_buffer);
   $16 = _alGetError() | 0;
  } while (($16 | 0) != 0);
 }
 $9 = $m + 17 | 0;
 $10 = HEAP32[$processed >> 2] | 0;
 HEAP32[$processed >> 2] = $10 + -1;
 if (!$10) {
  $78 = HEAP32[$1 >> 2] | 0;
  _alGetSourcei($78 | 0, 4117, $nb_queued | 0);
  $79 = HEAP32[$nb_queued >> 2] | 0;
  $80 = ($79 | 0) == 0;
  $81 = $m + 16 | 0;
  $82 = $80 & 1;
  HEAP8[$81 >> 0] = $82;
  STACKTOP = sp;
  return;
 }
 $13 = $m + 20 | 0;
 $14 = $m + 24 | 0;
 $15 = $m + 28 | 0;
 while (1) {
  _alSourceUnqueueBuffers(HEAP32[$1 >> 2] | 0, 1, $buffer | 0);
  $24 = _alGetError() | 0;
  if ($24) {
   $26 = $24;
   do {
    $27 = _alGetString($26 | 0) | 0;
    HEAP32[$vararg_buffer4 >> 2] = 10720;
    HEAP32[$vararg_buffer4 + 4 >> 2] = 185;
    HEAP32[$vararg_buffer4 + 8 >> 2] = 10944;
    HEAP32[$vararg_buffer4 + 12 >> 2] = $27;
    _log_internal(3, 12304, 12024, $vararg_buffer4);
    $26 = _alGetError() | 0;
   } while (($26 | 0) != 0);
  }
  $30 = HEAP32[$13 >> 2] | 0;
  $33 = FUNCTION_TABLE_iiii[HEAP32[$30 >> 2] & 31]($30, $5, HEAP32[$2 >> 2] | 0) | 0;
  if (!$33) if (!(HEAP8[$9 >> 0] | 0)) {
   label = 20;
   break;
  }
  _alBufferData(HEAP32[$buffer >> 2] | 0, HEAP32[$14 >> 2] | 0, $5 | 0, $33 << 1 | 0, HEAP32[$15 >> 2] | 0);
  $41 = _alGetError() | 0;
  if ($41) {
   $43 = $41;
   do {
    $44 = _alGetString($43 | 0) | 0;
    HEAP32[$vararg_buffer10 >> 2] = 10720;
    HEAP32[$vararg_buffer10 + 4 >> 2] = 192;
    HEAP32[$vararg_buffer10 + 8 >> 2] = 10944;
    HEAP32[$vararg_buffer10 + 12 >> 2] = $44;
    _log_internal(3, 12304, 12024, $vararg_buffer10);
    $43 = _alGetError() | 0;
   } while (($43 | 0) != 0);
  }
  if ($33 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) if (HEAP8[$9 >> 0] | 0) {
   $51 = HEAP32[$13 >> 2] | 0;
   FUNCTION_TABLE_vi[HEAP32[$51 + 4 >> 2] & 127]($51);
   $54 = HEAP32[$13 >> 2] | 0;
   $59 = FUNCTION_TABLE_iiii[HEAP32[$54 >> 2] & 31]($54, $5 + ($33 << 1) | 0, (HEAP32[$2 >> 2] | 0) - $33 | 0) | 0;
   _alBufferData(HEAP32[$buffer >> 2] | 0, HEAP32[$14 >> 2] | 0, $5 | 0, $59 + $33 << 1 | 0, HEAP32[$15 >> 2] | 0);
   $65 = _alGetError() | 0;
   if ($65) {
    $67 = $65;
    do {
     $68 = _alGetString($67 | 0) | 0;
     HEAP32[$vararg_buffer16 >> 2] = 10720;
     HEAP32[$vararg_buffer16 + 4 >> 2] = 202;
     HEAP32[$vararg_buffer16 + 8 >> 2] = 10944;
     HEAP32[$vararg_buffer16 + 12 >> 2] = $68;
     _log_internal(3, 12304, 12024, $vararg_buffer16);
     $67 = _alGetError() | 0;
    } while (($67 | 0) != 0);
   }
  }
  _alSourceQueueBuffers(HEAP32[$1 >> 2] | 0, 1, $buffer | 0);
  $72 = _alGetError() | 0;
  if ($72) {
   $74 = $72;
   do {
    $75 = _alGetString($74 | 0) | 0;
    HEAP32[$vararg_buffer22 >> 2] = 10720;
    HEAP32[$vararg_buffer22 + 4 >> 2] = 207;
    HEAP32[$vararg_buffer22 + 8 >> 2] = 10944;
    HEAP32[$vararg_buffer22 + 12 >> 2] = $75;
    _log_internal(3, 12304, 12024, $vararg_buffer22);
    $74 = _alGetError() | 0;
   } while (($74 | 0) != 0);
  }
  $20 = HEAP32[$processed >> 2] | 0;
  HEAP32[$processed >> 2] = $20 + -1;
  if (!$20) {
   label = 20;
   break;
  }
 }
 if ((label | 0) == 20) {
  $78 = HEAP32[$1 >> 2] | 0;
  _alGetSourcei($78 | 0, 4117, $nb_queued | 0);
  $79 = HEAP32[$nb_queued >> 2] | 0;
  $80 = ($79 | 0) == 0;
  $81 = $m + 16 | 0;
  $82 = $80 & 1;
  HEAP8[$81 >> 0] = $82;
  STACKTOP = sp;
  return;
 }
}

function _traceback($L) {
 $L = $L | 0;
 var $1 = 0, $13 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $40 = 0, $42 = 0, $46 = 0, $48 = 0, $49 = 0, $5 = 0, $54 = 0, $56 = 0, $57 = 0, $60 = 0, $61 = 0, $62 = 0, $65 = 0, $67 = 0, $68 = 0, $72 = 0, $8 = 0, $d = 0, $hidden_levels$0$ph5 = 0, $level$0$ph7 = 0, $level$03 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer15 = 0, $vararg_buffer20 = 0, $vararg_buffer25 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 $vararg_buffer25 = sp + 80 | 0;
 $vararg_buffer20 = sp + 64 | 0;
 $vararg_buffer15 = sp + 48 | 0;
 $vararg_buffer9 = sp + 32 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $d = sp + 92 | 0;
 if (!$L) ___assert_fail(23976, 568, 99, 66488);
 $1 = _lua_tolstring($L, 1, 0) | 0;
 do if (!$1) {
  if ((_lua_type($L, 1) | 0) >= 1) if (!(_luaL_callmeta($L, 1, 56912) | 0)) _log_internal(0, 848, 592, $vararg_buffer7);
 } else {
  $3 = _strchr($1, 58) | 0;
  if ($3) {
   $5 = $3 + 1 | 0;
   if (HEAP8[$5 >> 0] | 0) {
    $8 = _strchr($5, 58) | 0;
    if ($8) if (HEAP8[$8 + 1 >> 0] | 0) {
     $13 = $8 + 2 | 0;
     if (HEAP8[$13 >> 0] | 0) {
      HEAP32[$vararg_buffer4 >> 2] = $13;
      _log_internal(0, 848, 57168, $vararg_buffer4);
      break;
     }
    }
    HEAP32[$vararg_buffer1 >> 2] = $1;
    _log_internal(0, 848, 57168, $vararg_buffer1);
    break;
   }
  }
  HEAP32[$vararg_buffer >> 2] = $1;
  _log_internal(0, 848, 57168, $vararg_buffer);
 } while (0);
 $20 = HEAP32[_stderr >> 2] | 0;
 _fwrite(616, 17, 1, $20 | 0) | 0;
 if (!(_lua_getstack($L, 0, $d) | 0)) {
  STACKTOP = sp;
  return 0;
 }
 $23 = $d + 12 | 0;
 $24 = $d + 36 | 0;
 $25 = $d + 20 | 0;
 $26 = $d + 8 | 0;
 $27 = $d + 35 | 0;
 $28 = $d + 4 | 0;
 $hidden_levels$0$ph5 = 0;
 $level$0$ph7 = 0;
 L22 : while (1) {
  $level$03 = $level$0$ph7;
  while (1) {
   _lua_getinfo($L, 55104, $d) | 0;
   if (($level$03 | 0) < 2) {
    if ((HEAP8[HEAP32[$23 >> 2] >> 0] | 0) == 67) break;
    if (!(_strncmp($24, 640, 7) | 0)) break;
   }
   $40 = _use_colors() | 0;
   $42 = _use_colors() | 0;
   HEAP32[$vararg_buffer9 >> 2] = $level$03 - $hidden_levels$0$ph5;
   HEAP32[$vararg_buffer9 + 4 >> 2] = $40 ? 672 : 62584;
   HEAP32[$vararg_buffer9 + 8 >> 2] = $24;
   HEAP32[$vararg_buffer9 + 12 >> 2] = $42 ? 680 : 62584;
   _fprintf($20 | 0, 648, $vararg_buffer9 | 0) | 0;
   if ((HEAP32[$25 >> 2] | 0) > 0) {
    $46 = _use_colors() | 0;
    $48 = HEAP32[$25 >> 2] | 0;
    $49 = _use_colors() | 0;
    HEAP32[$vararg_buffer15 >> 2] = $46 ? 696 : 62584;
    HEAP32[$vararg_buffer15 + 4 >> 2] = $48;
    HEAP32[$vararg_buffer15 + 8 >> 2] = $49 ? 680 : 62584;
    _fprintf($20 | 0, 688, $vararg_buffer15 | 0) | 0;
   }
   do if (!(HEAP8[HEAP32[$26 >> 2] >> 0] | 0)) {
    $60 = HEAP8[HEAP32[$23 >> 2] >> 0] | 0;
    if ($60 << 24 >> 24 == 109) {
     _fwrite(816, 14, 1, $20 | 0) | 0;
     break;
    } else if ($60 << 24 >> 24 != 67) break;
    $61 = _lua_gettop($L) | 0;
    _lua_getinfo($L, 58712, $d) | 0;
    _lua_rawgeti($L, -1001e3, 2) | 0;
    $62 = $61 + 1 | 0;
    if (!(_findfield($L, $62, 2) | 0)) {
     _lua_settop($L, $61);
     _fputc(63, $20 | 0) | 0;
     break;
    } else {
     _lua_copy($L, -1, $62);
     _lua_settop($L, -3);
     $65 = _use_colors() | 0;
     $67 = _lua_tolstring($L, -1, 0) | 0;
     $68 = _use_colors() | 0;
     HEAP32[$vararg_buffer25 >> 2] = $65 ? 808 : 62584;
     HEAP32[$vararg_buffer25 + 4 >> 2] = $67;
     HEAP32[$vararg_buffer25 + 8 >> 2] = $68 ? 680 : 62584;
     _fprintf($20 | 0, 784, $vararg_buffer25 | 0) | 0;
     _lua_rotate($L, -2, -1);
     _lua_settop($L, -2);
     break;
    }
   } else {
    $54 = _use_colors() | 0;
    $56 = HEAP32[$28 >> 2] | 0;
    $57 = _use_colors() | 0;
    HEAP32[$vararg_buffer20 >> 2] = $54 ? 808 : 62584;
    HEAP32[$vararg_buffer20 + 4 >> 2] = $56;
    HEAP32[$vararg_buffer20 + 8 >> 2] = $57 ? 680 : 62584;
    _fprintf($20 | 0, 784, $vararg_buffer20 | 0) | 0;
   } while (0);
   _fputc(10, $20 | 0) | 0;
   if (HEAP8[$27 >> 0] | 0) _fwrite(704, 21, 1, $20 | 0) | 0;
   $72 = $level$03 + 1 | 0;
   if (!(_lua_getstack($L, $72, $d) | 0)) {
    label = 34;
    break L22;
   } else $level$03 = $72;
  }
  $level$0$ph7 = $level$03 + 1 | 0;
  if (!(_lua_getstack($L, $level$0$ph7, $d) | 0)) {
   label = 34;
   break;
  } else $hidden_levels$0$ph5 = $hidden_levels$0$ph5 + 1 | 0;
 }
 if ((label | 0) == 34) {
  STACKTOP = sp;
  return 0;
 }
 return 0;
}

function __ZN12b2MouseJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $1 = 0, $102 = 0.0, $105 = 0.0, $109 = 0.0, $115 = 0, $12 = 0, $120 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $13 = 0, $133 = 0.0, $137 = 0, $139 = 0.0, $141 = 0.0, $142 = 0, $144 = 0.0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $18 = 0.0, $21 = 0.0, $24 = 0, $26 = 0, $3 = 0, $32 = 0.0, $33 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $45 = 0.0, $46 = 0.0, $48 = 0.0, $49 = 0.0, $50 = 0.0, $52 = 0.0, $55 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $73 = 0.0, $78 = 0.0, $81 = 0.0, $84 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $det$0$i = 0.0, $storemerge = 0.0, $wB$0 = 0.0;
 $1 = HEAP32[$this + 52 >> 2] | 0;
 $3 = HEAP32[$1 + 8 >> 2] | 0;
 $4 = $this + 116 | 0;
 HEAP32[$4 >> 2] = $3;
 $7 = $1 + 28 | 0;
 $9 = HEAP32[$7 >> 2] | 0;
 $12 = HEAP32[$7 + 4 >> 2] | 0;
 $13 = $this + 128 | 0;
 HEAP32[$13 >> 2] = $9;
 HEAP32[$13 + 4 >> 2] = $12;
 $18 = +HEAPF32[$1 + 120 >> 2];
 HEAPF32[$this + 136 >> 2] = $18;
 $21 = +HEAPF32[$1 + 128 >> 2];
 HEAPF32[$this + 140 >> 2] = $21;
 $24 = HEAP32[$data + 24 >> 2] | 0;
 $26 = $24 + ($3 * 12 | 0) | 0;
 $32 = +HEAPF32[$26 >> 2];
 $33 = +HEAPF32[$26 + 4 >> 2];
 $35 = +HEAPF32[$24 + ($3 * 12 | 0) + 8 >> 2];
 $36 = $data + 28 | 0;
 $37 = HEAP32[$36 >> 2] | 0;
 $39 = $37 + ($3 * 12 | 0) | 0;
 $45 = +HEAPF32[$39 >> 2];
 $46 = +HEAPF32[$39 + 4 >> 2];
 $48 = +HEAPF32[$37 + ($3 * 12 | 0) + 8 >> 2];
 $49 = +Math_sin(+$35);
 $50 = +Math_cos(+$35);
 $52 = +HEAPF32[$1 + 116 >> 2];
 $55 = +HEAPF32[$this + 84 >> 2] * 6.2831854820251465;
 $63 = +HEAPF32[$data >> 2];
 $64 = $63 * ($52 * ($55 * $55));
 $65 = $55 * ($52 * 2.0 * +HEAPF32[$this + 88 >> 2]) + $64;
 $67 = (HEAP32[tempDoublePtr >> 2] = $9, +HEAPF32[tempDoublePtr >> 2]);
 $68 = (HEAP32[tempDoublePtr >> 2] = $12, +HEAPF32[tempDoublePtr >> 2]);
 if (!($65 > 1.1920928955078125e-07)) ___assert_fail(85024, 84768, 125, 85064);
 $69 = $63 * $65;
 if ($69 != 0.0) $storemerge = 1.0 / $69; else $storemerge = $69;
 HEAPF32[$this + 108 >> 2] = $storemerge;
 $73 = $64 * $storemerge;
 HEAPF32[$this + 92 >> 2] = $73;
 $78 = +HEAPF32[$this + 68 >> 2] - $67;
 $81 = +HEAPF32[$this + 72 >> 2] - $68;
 $84 = $50 * $78 - $49 * $81;
 $87 = $49 * $78 + $50 * $81;
 $88 = +$84;
 $89 = +$87;
 $90 = $this + 120 | 0;
 HEAPF32[$90 >> 2] = $88;
 HEAPF32[$90 + 4 >> 2] = $89;
 $97 = $storemerge + ($18 + $87 * ($21 * $87));
 $98 = $21 * $84;
 $99 = $87 * $98;
 $102 = $storemerge + ($18 + $84 * $98);
 $105 = $97 * $102 - $99 * $99;
 if ($105 != 0.0) $det$0$i = 1.0 / $105; else $det$0$i = $105;
 $109 = $99 * $det$0$i;
 HEAPF32[$this + 144 >> 2] = $102 * $det$0$i;
 HEAPF32[$this + 148 >> 2] = $109;
 HEAPF32[$this + 152 >> 2] = $109;
 HEAPF32[$this + 156 >> 2] = $97 * $det$0$i;
 $115 = $this + 160 | 0;
 $120 = $32 + $84 - +HEAPF32[$this + 76 >> 2];
 $123 = $33 + $87 - +HEAPF32[$this + 80 >> 2];
 $124 = +$120;
 $125 = +$123;
 $126 = $115;
 HEAPF32[$126 >> 2] = $124;
 HEAPF32[$126 + 4 >> 2] = $125;
 HEAPF32[$115 >> 2] = $73 * $120;
 HEAPF32[$this + 164 >> 2] = $73 * $123;
 $133 = $48 * .9800000190734863;
 $137 = $this + 96 | 0;
 if (!(HEAP8[$data + 20 >> 0] | 0)) {
  HEAPF32[$137 >> 2] = 0.0;
  HEAPF32[$this + 100 >> 2] = 0.0;
  $158 = $45;
  $160 = $46;
  $wB$0 = $133;
  $155 = HEAP32[$36 >> 2] | 0;
  $156 = $155 + ($3 * 12 | 0) | 0;
  $157 = +$158;
  $159 = +$160;
  $161 = $156;
  $162 = $161;
  HEAPF32[$162 >> 2] = $157;
  $163 = $161 + 4 | 0;
  $164 = $163;
  HEAPF32[$164 >> 2] = $159;
  $165 = HEAP32[$4 >> 2] | 0;
  $166 = HEAP32[$36 >> 2] | 0;
  $167 = $166 + ($165 * 12 | 0) + 8 | 0;
  HEAPF32[$167 >> 2] = $wB$0;
  return;
 } else {
  $139 = +HEAPF32[$data + 8 >> 2];
  $141 = $139 * +HEAPF32[$137 >> 2];
  HEAPF32[$137 >> 2] = $141;
  $142 = $this + 100 | 0;
  $144 = $139 * +HEAPF32[$142 >> 2];
  HEAPF32[$142 >> 2] = $144;
  $158 = $45 + $18 * $141;
  $160 = $46 + $144 * $18;
  $wB$0 = $133 + $21 * ($144 * $84 - $141 * $87);
  $155 = HEAP32[$36 >> 2] | 0;
  $156 = $155 + ($3 * 12 | 0) | 0;
  $157 = +$158;
  $159 = +$160;
  $161 = $156;
  $162 = $161;
  HEAPF32[$162 >> 2] = $157;
  $163 = $161 + 4 | 0;
  $164 = $163;
  HEAPF32[$164 >> 2] = $159;
  $165 = HEAP32[$4 >> 2] | 0;
  $166 = HEAP32[$36 >> 2] | 0;
  $167 = $166 + ($165 * 12 | 0) + 8 | 0;
  HEAPF32[$167 >> 2] = $wB$0;
  return;
 }
}

function _crc32($crc, $buf, $len) {
 $crc = $crc | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $$0 = 0, $$0116$i = 0, $$017$i = 0, $$1$lcssa$i = 0, $$12$i = 0, $$19$i = 0, $$2$lcssa$i = 0, $$24$i = 0, $$3$i = 0, $1 = 0, $100 = 0, $120 = 0, $13 = 0, $14 = 0, $140 = 0, $158 = 0, $160 = 0, $177 = 0, $178 = 0, $180 = 0, $182 = 0, $199 = 0, $20 = 0, $200 = 0, $210 = 0, $40 = 0, $60 = 0, $80 = 0, $buf4$0$lcssa$i = 0, $buf4$011$i = 0, $buf4$1$lcssa$i = 0, $buf4$16$i = 0, $c$018$i = 0, $c$1$lcssa$i = 0, $c$110$i = 0, $c$2$lcssa$i = 0, $c$25$i = 0, $c$3$i = 0, $c$4$i = 0;
 if (!$buf) {
  $$0 = 0;
  return $$0 | 0;
 }
 $1 = ~$crc;
 L4 : do if (!$len) $c$4$i = $1; else {
  $$0116$i = $buf;
  $$017$i = $len;
  $c$018$i = $1;
  while (1) {
   if (!($$0116$i & 3)) break;
   $13 = HEAP32[94584 + (((HEAPU8[$$0116$i >> 0] | 0) ^ $c$018$i & 255) << 2) >> 2] ^ $c$018$i >>> 8;
   $14 = $$017$i + -1 | 0;
   if (!$14) {
    $c$4$i = $13;
    break L4;
   } else {
    $$0116$i = $$0116$i + 1 | 0;
    $$017$i = $14;
    $c$018$i = $13;
   }
  }
  if ($$017$i >>> 0 > 31) {
   $$19$i = $$017$i;
   $buf4$011$i = $$0116$i;
   $c$110$i = $c$018$i;
   while (1) {
    $20 = HEAP32[$buf4$011$i >> 2] ^ $c$110$i;
    $40 = HEAP32[96632 + (($20 >>> 8 & 255) << 2) >> 2] ^ HEAP32[97656 + (($20 & 255) << 2) >> 2] ^ HEAP32[95608 + (($20 >>> 16 & 255) << 2) >> 2] ^ HEAP32[94584 + ($20 >>> 24 << 2) >> 2] ^ HEAP32[$buf4$011$i + 4 >> 2];
    $60 = HEAP32[96632 + (($40 >>> 8 & 255) << 2) >> 2] ^ HEAP32[97656 + (($40 & 255) << 2) >> 2] ^ HEAP32[95608 + (($40 >>> 16 & 255) << 2) >> 2] ^ HEAP32[94584 + ($40 >>> 24 << 2) >> 2] ^ HEAP32[$buf4$011$i + 8 >> 2];
    $80 = HEAP32[96632 + (($60 >>> 8 & 255) << 2) >> 2] ^ HEAP32[97656 + (($60 & 255) << 2) >> 2] ^ HEAP32[95608 + (($60 >>> 16 & 255) << 2) >> 2] ^ HEAP32[94584 + ($60 >>> 24 << 2) >> 2] ^ HEAP32[$buf4$011$i + 12 >> 2];
    $100 = HEAP32[96632 + (($80 >>> 8 & 255) << 2) >> 2] ^ HEAP32[97656 + (($80 & 255) << 2) >> 2] ^ HEAP32[95608 + (($80 >>> 16 & 255) << 2) >> 2] ^ HEAP32[94584 + ($80 >>> 24 << 2) >> 2] ^ HEAP32[$buf4$011$i + 16 >> 2];
    $120 = HEAP32[96632 + (($100 >>> 8 & 255) << 2) >> 2] ^ HEAP32[97656 + (($100 & 255) << 2) >> 2] ^ HEAP32[95608 + (($100 >>> 16 & 255) << 2) >> 2] ^ HEAP32[94584 + ($100 >>> 24 << 2) >> 2] ^ HEAP32[$buf4$011$i + 20 >> 2];
    $140 = HEAP32[96632 + (($120 >>> 8 & 255) << 2) >> 2] ^ HEAP32[97656 + (($120 & 255) << 2) >> 2] ^ HEAP32[95608 + (($120 >>> 16 & 255) << 2) >> 2] ^ HEAP32[94584 + ($120 >>> 24 << 2) >> 2] ^ HEAP32[$buf4$011$i + 24 >> 2];
    $158 = $buf4$011$i + 32 | 0;
    $160 = HEAP32[96632 + (($140 >>> 8 & 255) << 2) >> 2] ^ HEAP32[97656 + (($140 & 255) << 2) >> 2] ^ HEAP32[95608 + (($140 >>> 16 & 255) << 2) >> 2] ^ HEAP32[94584 + ($140 >>> 24 << 2) >> 2] ^ HEAP32[$buf4$011$i + 28 >> 2];
    $177 = HEAP32[96632 + (($160 >>> 8 & 255) << 2) >> 2] ^ HEAP32[97656 + (($160 & 255) << 2) >> 2] ^ HEAP32[95608 + (($160 >>> 16 & 255) << 2) >> 2] ^ HEAP32[94584 + ($160 >>> 24 << 2) >> 2];
    $178 = $$19$i + -32 | 0;
    if ($178 >>> 0 > 31) {
     $$19$i = $178;
     $buf4$011$i = $158;
     $c$110$i = $177;
    } else {
     $$1$lcssa$i = $178;
     $buf4$0$lcssa$i = $158;
     $c$1$lcssa$i = $177;
     break;
    }
   }
  } else {
   $$1$lcssa$i = $$017$i;
   $buf4$0$lcssa$i = $$0116$i;
   $c$1$lcssa$i = $c$018$i;
  }
  if ($$1$lcssa$i >>> 0 > 3) {
   $$24$i = $$1$lcssa$i;
   $buf4$16$i = $buf4$0$lcssa$i;
   $c$25$i = $c$1$lcssa$i;
   while (1) {
    $180 = $buf4$16$i + 4 | 0;
    $182 = HEAP32[$buf4$16$i >> 2] ^ $c$25$i;
    $199 = HEAP32[96632 + (($182 >>> 8 & 255) << 2) >> 2] ^ HEAP32[97656 + (($182 & 255) << 2) >> 2] ^ HEAP32[95608 + (($182 >>> 16 & 255) << 2) >> 2] ^ HEAP32[94584 + ($182 >>> 24 << 2) >> 2];
    $200 = $$24$i + -4 | 0;
    if ($200 >>> 0 > 3) {
     $$24$i = $200;
     $buf4$16$i = $180;
     $c$25$i = $199;
    } else {
     $$2$lcssa$i = $200;
     $buf4$1$lcssa$i = $180;
     $c$2$lcssa$i = $199;
     break;
    }
   }
  } else {
   $$2$lcssa$i = $$1$lcssa$i;
   $buf4$1$lcssa$i = $buf4$0$lcssa$i;
   $c$2$lcssa$i = $c$1$lcssa$i;
  }
  if (!$$2$lcssa$i) $c$4$i = $c$2$lcssa$i; else {
   $$12$i = $buf4$1$lcssa$i;
   $$3$i = $$2$lcssa$i;
   $c$3$i = $c$2$lcssa$i;
   while (1) {
    $210 = HEAP32[94584 + (((HEAPU8[$$12$i >> 0] | 0) ^ $c$3$i & 255) << 2) >> 2] ^ $c$3$i >>> 8;
    $$3$i = $$3$i + -1 | 0;
    if (!$$3$i) {
     $c$4$i = $210;
     break;
    } else {
     $$12$i = $$12$i + 1 | 0;
     $c$3$i = $210;
    }
   }
  }
 } while (0);
 $$0 = ~$c$4$i;
 return $$0 | 0;
}

function __ZN6b2Body4DumpEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $17 = 0.0, $27 = 0, $8 = 0.0, $f$01 = 0, $f$02 = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer48 = 0, $vararg_buffer5 = 0, $vararg_buffer50 = 0, $vararg_buffer52 = 0, $vararg_buffer9 = 0, $vararg_ptr15 = 0, $vararg_ptr8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $vararg_buffer52 = sp + 168 | 0;
 $vararg_buffer50 = sp + 160 | 0;
 $vararg_buffer48 = sp + 152 | 0;
 $vararg_buffer43 = sp + 136 | 0;
 $vararg_buffer40 = sp + 128 | 0;
 $vararg_buffer37 = sp + 120 | 0;
 $vararg_buffer34 = sp + 112 | 0;
 $vararg_buffer31 = sp + 104 | 0;
 $vararg_buffer28 = sp + 96 | 0;
 $vararg_buffer25 = sp + 88 | 0;
 $vararg_buffer22 = sp + 80 | 0;
 $vararg_buffer19 = sp + 72 | 0;
 $vararg_buffer16 = sp + 64 | 0;
 $vararg_buffer12 = sp + 48 | 0;
 $vararg_buffer9 = sp + 40 | 0;
 $vararg_buffer5 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $0 = $this + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 __Z5b2LogPKcz(87440, sp);
 __Z5b2LogPKcz(87448, sp + 8 | 0);
 HEAP32[$vararg_buffer3 >> 2] = HEAP32[$this >> 2];
 __Z5b2LogPKcz(87472, $vararg_buffer3);
 $8 = +HEAPF32[$this + 16 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 12 >> 2];
 HEAP32[$vararg_buffer5 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer5 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr8 = $vararg_buffer5 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $8;
 HEAP32[$vararg_ptr8 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr8 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(87504, $vararg_buffer5);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 56 >> 2];
 HEAP32[$vararg_buffer9 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer9 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(87544, $vararg_buffer9);
 $17 = +HEAPF32[$this + 68 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 64 >> 2];
 HEAP32[$vararg_buffer12 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer12 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr15 = $vararg_buffer12 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $17;
 HEAP32[$vararg_ptr15 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr15 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(87568, $vararg_buffer12);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 72 >> 2];
 HEAP32[$vararg_buffer16 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer16 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(87616, $vararg_buffer16);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 132 >> 2];
 HEAP32[$vararg_buffer19 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer19 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(87656, $vararg_buffer19);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 136 >> 2];
 HEAP32[$vararg_buffer22 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer22 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(87688, $vararg_buffer22);
 $27 = $this + 4 | 0;
 HEAP32[$vararg_buffer25 >> 2] = (HEAPU16[$27 >> 1] | 0) & 4;
 __Z5b2LogPKcz(87720, $vararg_buffer25);
 HEAP32[$vararg_buffer28 >> 2] = (HEAPU16[$27 >> 1] | 0) & 2;
 __Z5b2LogPKcz(87752, $vararg_buffer28);
 HEAP32[$vararg_buffer31 >> 2] = (HEAPU16[$27 >> 1] | 0) & 16;
 __Z5b2LogPKcz(87776, $vararg_buffer31);
 HEAP32[$vararg_buffer34 >> 2] = (HEAPU16[$27 >> 1] | 0) & 8;
 __Z5b2LogPKcz(87808, $vararg_buffer34);
 HEAP32[$vararg_buffer37 >> 2] = (HEAPU16[$27 >> 1] | 0) & 32;
 __Z5b2LogPKcz(87840, $vararg_buffer37);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 140 >> 2];
 HEAP32[$vararg_buffer40 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer40 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(87872, $vararg_buffer40);
 HEAP32[$vararg_buffer43 >> 2] = HEAP32[$0 >> 2];
 __Z5b2LogPKcz(87904, $vararg_buffer43);
 __Z5b2LogPKcz(89176, sp + 144 | 0);
 $f$01 = HEAP32[$this + 100 >> 2] | 0;
 if (!$f$01) {
  __Z5b2LogPKcz(87968, $vararg_buffer52);
  STACKTOP = sp;
  return;
 } else $f$02 = $f$01;
 do {
  __Z5b2LogPKcz(87952, $vararg_buffer48);
  __ZN9b2Fixture4DumpEi($f$02, $1);
  __Z5b2LogPKcz(87960, $vararg_buffer50);
  $f$02 = HEAP32[$f$02 + 4 >> 2] | 0;
 } while (($f$02 | 0) != 0);
 __Z5b2LogPKcz(87968, $vararg_buffer52);
 STACKTOP = sp;
 return;
}

function _png_handle_sPLT($png_ptr, $info_ptr, $length) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 $length = $length | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $26 = 0, $29 = 0, $30 = 0, $32 = 0, $33 = 0, $37 = 0, $40 = 0, $44 = 0, $45 = 0, $48 = 0, $5 = 0, $buffer$1$i$ph3 = 0, $buffer$1$i$ph4 = 0, $entry_start$0 = 0, $entry_start$16 = 0, $entry_start$2 = 0, $i$05 = 0, $new_palette = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $new_palette = sp;
 $0 = $png_ptr + 756 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (($1 | 0) == 1) {
  _png_crc_finish($png_ptr, $length) | 0;
  STACKTOP = sp;
  return;
 } else if ($1) label = 3;
 if ((label | 0) == 3) {
  $2 = $1 + -1 | 0;
  HEAP32[$0 >> 2] = $2;
  if (($2 | 0) == 1) {
   _png_warning($png_ptr, 75784);
   _png_crc_finish($png_ptr, $length) | 0;
   STACKTOP = sp;
   return;
  }
 }
 $5 = HEAP32[$png_ptr + 208 >> 2] | 0;
 if (!($5 & 1)) _png_chunk_error($png_ptr, 75496);
 if ($5 & 4) {
  _png_crc_finish($png_ptr, $length) | 0;
  _png_chunk_benign_error($png_ptr, 75472);
  STACKTOP = sp;
  return;
 }
 $10 = $length + 1 | 0;
 $11 = $png_ptr + 788 | 0;
 $12 = HEAP32[$11 >> 2] | 0;
 if (!$12) label = 12; else {
  $14 = $png_ptr + 792 | 0;
  if ((HEAP32[$14 >> 2] | 0) >>> 0 < $10 >>> 0) {
   HEAP32[$11 >> 2] = 0;
   HEAP32[$14 >> 2] = 0;
   _png_free($png_ptr, $12);
   label = 12;
  } else {
   $buffer$1$i$ph3 = $12;
   label = 15;
  }
 }
 do if ((label | 0) == 12) {
  $17 = _png_malloc_base($png_ptr, $10) | 0;
  if ($17) {
   HEAP32[$11 >> 2] = $17;
   HEAP32[$png_ptr + 792 >> 2] = $10;
   if (!$png_ptr) {
    $buffer$1$i$ph4 = $17;
    break;
   } else {
    $buffer$1$i$ph3 = $17;
    label = 15;
    break;
   }
  }
  _png_crc_finish($png_ptr, $length) | 0;
  _png_chunk_benign_error($png_ptr, 75712);
  STACKTOP = sp;
  return;
 } while (0);
 if ((label | 0) == 15) {
  _png_read_data($png_ptr, $buffer$1$i$ph3, $length);
  _png_calculate_crc($png_ptr, $buffer$1$i$ph3, $length);
  $buffer$1$i$ph4 = $buffer$1$i$ph3;
 }
 if (_png_crc_finish($png_ptr, 0) | 0) {
  STACKTOP = sp;
  return;
 }
 HEAP8[$buffer$1$i$ph4 + $length >> 0] = 0;
 $entry_start$0 = $buffer$1$i$ph4;
 while (1) {
  $26 = $entry_start$0 + 1 | 0;
  if (!(HEAP8[$entry_start$0 >> 0] | 0)) break; else $entry_start$0 = $26;
 }
 if ($26 >>> 0 > ($buffer$1$i$ph4 + ($length + -2) | 0) >>> 0) {
  _png_warning($png_ptr, 75824);
  STACKTOP = sp;
  return;
 }
 $29 = $entry_start$0 + 2 | 0;
 $30 = HEAP8[$26 >> 0] | 0;
 HEAP8[$new_palette + 4 >> 0] = $30;
 $32 = $30 << 24 >> 24 == 8;
 $33 = $32 ? 6 : 10;
 $37 = $buffer$1$i$ph4 - $29 + $length | 0;
 if (($37 >>> 0) % ($33 >>> 0) | 0) {
  _png_warning($png_ptr, 75848);
  STACKTOP = sp;
  return;
 }
 $40 = ($37 >>> 0) / ($33 >>> 0) | 0;
 if ($40 >>> 0 > 429496729) {
  _png_warning($png_ptr, 75880);
  STACKTOP = sp;
  return;
 }
 HEAP32[$new_palette + 12 >> 2] = $40;
 $44 = _png_malloc_warn($png_ptr, $40 * 10 | 0) | 0;
 $45 = $new_palette + 8 | 0;
 HEAP32[$45 >> 2] = $44;
 if (!$44) {
  _png_warning($png_ptr, 75904);
  STACKTOP = sp;
  return;
 }
 if ($40) {
  $entry_start$16 = $29;
  $i$05 = 0;
  while (1) {
   $48 = $44 + ($i$05 * 10 | 0) | 0;
   if ($32) {
    HEAP16[$48 >> 1] = HEAPU8[$entry_start$16 >> 0] | 0;
    HEAP16[$44 + ($i$05 * 10 | 0) + 2 >> 1] = HEAPU8[$entry_start$16 + 1 >> 0] | 0;
    HEAP16[$44 + ($i$05 * 10 | 0) + 4 >> 1] = HEAPU8[$entry_start$16 + 2 >> 0] | 0;
    HEAP16[$44 + ($i$05 * 10 | 0) + 6 >> 1] = HEAPU8[$entry_start$16 + 3 >> 0] | 0;
    $entry_start$2 = $entry_start$16 + 4 | 0;
   } else {
    HEAP16[$48 >> 1] = HEAPU8[$entry_start$16 >> 0] << 8 | HEAPU8[$entry_start$16 + 1 >> 0];
    HEAP16[$44 + ($i$05 * 10 | 0) + 2 >> 1] = HEAPU8[$entry_start$16 + 2 >> 0] << 8 | HEAPU8[$entry_start$16 + 3 >> 0];
    HEAP16[$44 + ($i$05 * 10 | 0) + 4 >> 1] = HEAPU8[$entry_start$16 + 4 >> 0] << 8 | HEAPU8[$entry_start$16 + 5 >> 0];
    HEAP16[$44 + ($i$05 * 10 | 0) + 6 >> 1] = HEAPU8[$entry_start$16 + 6 >> 0] << 8 | HEAPU8[$entry_start$16 + 7 >> 0];
    $entry_start$2 = $entry_start$16 + 8 | 0;
   }
   HEAP16[$44 + ($i$05 * 10 | 0) + 8 >> 1] = HEAPU8[$entry_start$2 >> 0] << 8 | HEAPU8[$entry_start$2 + 1 >> 0];
   $i$05 = $i$05 + 1 | 0;
   if (($i$05 | 0) >= ($40 | 0)) break; else $entry_start$16 = $entry_start$2 + 2 | 0;
  }
 }
 HEAP32[$new_palette >> 2] = $buffer$1$i$ph4;
 _png_set_sPLT($png_ptr, $info_ptr, $new_palette, 1);
 _png_free($png_ptr, HEAP32[$45 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _str_find_aux($L, $find) {
 $L = $L | 0;
 $find = $find | 0;
 var $$$i = 0, $$0$i = 0, $$0$i512 = 0, $$014$i = 0, $$023$i = 0, $$1 = 0, $$lcssa17 = 0, $0 = 0, $1 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $23 = 0, $26 = 0, $29 = 0, $3 = 0, $33 = 0, $34 = 0, $35 = 0, $40 = 0, $42 = 0, $48 = 0, $52 = 0, $54 = 0, $57 = 0, $58 = 0, $62 = 0, $64 = 0, $66 = 0, $67 = 0, $69 = 0, $72 = 0, $77 = 0, $82 = 0, $i$01$i = 0, $i$01$i6 = 0, $init$0 = 0, $lp = 0, $ls = 0, $ms = 0, $p$0 = 0, $s1$0 = 0, $s1$0$lcssa = 0, $upto$0$i = 0, label = 0, sp = 0, $$023$i$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 $ls = sp + 284 | 0;
 $lp = sp + 280 | 0;
 $ms = sp;
 $0 = _luaL_checklstring($L, 1, $ls) | 0;
 $1 = _luaL_checklstring($L, 2, $lp) | 0;
 $2 = _luaL_optinteger($L, 3, 1) | 0;
 $3 = HEAP32[$ls >> 2] | 0;
 if (($2 | 0) > -1) {
  $$0$i = $2;
  label = 4;
 } else if ($3 >>> 0 < (0 - $2 | 0) >>> 0) $init$0 = 1; else {
  $$0$i = $2 + 1 + $3 | 0;
  label = 4;
 }
 if ((label | 0) == 4) if (($$0$i | 0) < 1) $init$0 = 1; else if (($$0$i | 0) > ($3 + 1 | 0)) {
  _lua_pushnil($L);
  $$1 = 1;
  STACKTOP = sp;
  return $$1 | 0;
 } else $init$0 = $$0$i;
 $12 = ($find | 0) != 0;
 L10 : do if ($12) {
  $14 = (_lua_toboolean($L, 4) | 0) == 0;
  $15 = HEAP32[$lp >> 2] | 0;
  if ($14) {
   $upto$0$i = 0;
   do {
    $16 = $1 + $upto$0$i | 0;
    if (_strpbrk($16, 62024) | 0) {
     label = 20;
     break L10;
    }
    $upto$0$i = $upto$0$i + 1 + (_strlen($16 | 0) | 0) | 0;
   } while ($upto$0$i >>> 0 <= $15 >>> 0);
  }
  $23 = $0 + ($init$0 + -1) | 0;
  $26 = (HEAP32[$ls >> 2] | 0) - $init$0 + 1 | 0;
  L17 : do if (!$15) if (!$23) break L10; else $$0$i512 = $23; else {
   if ($15 >>> 0 > $26 >>> 0) break L10;
   $29 = $15 + -1 | 0;
   if (($29 | 0) == ($26 | 0)) break L10;
   $33 = HEAP8[$1 >> 0] | 0;
   $34 = $1 + 1 | 0;
   $$014$i = $26 - $29 | 0;
   $$023$i = $23;
   while (1) {
    $35 = _memchr($$023$i, $33, $$014$i) | 0;
    if (!$35) break L10;
    $$023$i$looptemp = $$023$i;
    $$023$i = $35 + 1 | 0;
    if (!(_memcmp($$023$i, $34, $29) | 0)) {
     $$0$i512 = $35;
     break L17;
    }
    $40 = $$023$i;
    $42 = $$023$i$looptemp + $$014$i | 0;
    if (($42 | 0) == ($40 | 0)) break L10; else $$014$i = $42 - $40 | 0;
   }
  } while (0);
  $48 = $$0$i512 - $0 | 0;
  _lua_pushinteger($L, $48 + 1 | 0);
  _lua_pushinteger($L, $48 + (HEAP32[$lp >> 2] | 0) | 0);
  $$1 = 2;
  STACKTOP = sp;
  return $$1 | 0;
 } else label = 20; while (0);
 L28 : do if ((label | 0) == 20) {
  $52 = $0 + ($init$0 + -1) | 0;
  $54 = (HEAP8[$1 >> 0] | 0) == 94;
  if ($54) {
   $57 = (HEAP32[$lp >> 2] | 0) + -1 | 0;
   HEAP32[$lp >> 2] = $57;
   $64 = $57;
   $p$0 = $1 + 1 | 0;
  } else {
   $64 = HEAP32[$lp >> 2] | 0;
   $p$0 = $1;
  }
  $58 = $ms + 16 | 0;
  HEAP32[$58 >> 2] = $L;
  HEAP32[$ms >> 2] = 200;
  HEAP32[$ms + 4 >> 2] = $0;
  $62 = $ms + 8 | 0;
  HEAP32[$62 >> 2] = $0 + (HEAP32[$ls >> 2] | 0);
  HEAP32[$ms + 12 >> 2] = $p$0 + $64;
  $66 = $ms + 20 | 0;
  L34 : do if ($54) {
   HEAP32[$66 >> 2] = 0;
   $67 = _match($ms, $52, $p$0) | 0;
   if (!$67) break L28; else {
    $$lcssa17 = $67;
    $s1$0$lcssa = $52;
   }
  } else {
   $s1$0 = $52;
   while (1) {
    HEAP32[$66 >> 2] = 0;
    $69 = _match($ms, $s1$0, $p$0) | 0;
    if ($69) {
     $$lcssa17 = $69;
     $s1$0$lcssa = $s1$0;
     break L34;
    }
    if ($s1$0 >>> 0 >= (HEAP32[$62 >> 2] | 0) >>> 0) break L28;
    $s1$0 = $s1$0 + 1 | 0;
   }
  } while (0);
  if ($12) {
   $72 = $0;
   _lua_pushinteger($L, 1 - $72 + $s1$0$lcssa | 0);
   _lua_pushinteger($L, $$lcssa17 - $72 | 0);
   $77 = HEAP32[$66 >> 2] | 0;
   _luaL_checkstack(HEAP32[$58 >> 2] | 0, $77, 61736);
   if (($77 | 0) > 0) {
    $i$01$i6 = 0;
    do {
     _push_onecapture($ms, $i$01$i6, 0, 0);
     $i$01$i6 = $i$01$i6 + 1 | 0;
    } while (($i$01$i6 | 0) != ($77 | 0));
   }
   $$1 = $77 + 2 | 0;
   STACKTOP = sp;
   return $$1 | 0;
  } else {
   $82 = HEAP32[$66 >> 2] | 0;
   $$$i = ($82 | 0) != 0 | ($s1$0$lcssa | 0) == 0 ? $82 : 1;
   _luaL_checkstack(HEAP32[$58 >> 2] | 0, $$$i, 61736);
   if (($$$i | 0) > 0) $i$01$i = 0; else {
    $$1 = $82;
    STACKTOP = sp;
    return $$1 | 0;
   }
   do {
    _push_onecapture($ms, $i$01$i, $s1$0$lcssa, $$lcssa17);
    $i$01$i = $i$01$i + 1 | 0;
   } while (($i$01$i | 0) != ($$$i | 0));
   $$1 = $$$i;
   STACKTOP = sp;
   return $$1 | 0;
  }
 } while (0);
 _lua_pushnil($L);
 $$1 = 1;
 STACKTOP = sp;
 return $$1 | 0;
}

function _png_icc_check_header($png_ptr, $colorspace, $name, $profile_length, $profile, $color_type) {
 $png_ptr = $png_ptr | 0;
 $colorspace = $colorspace | 0;
 $name = $name | 0;
 $profile_length = $profile_length | 0;
 $profile = $profile | 0;
 $color_type = $color_type | 0;
 var $$0 = 0, $112 = 0, $134 = 0, $152 = 0, $16 = 0, $40 = 0, $62 = 0, $82 = 0, $87 = 0, $90 = 0, $message$i = 0, $number$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $message$i = sp + 24 | 0;
 $number$i = sp;
 $16 = (HEAPU8[$profile + 1 >> 0] | 0) << 16 | (HEAPU8[$profile >> 0] | 0) << 24 | (HEAPU8[$profile + 2 >> 0] | 0) << 8 | (HEAPU8[$profile + 3 >> 0] | 0);
 if (($16 | 0) != ($profile_length | 0)) {
  _png_icc_profile_error($png_ptr, $colorspace, $name, $16, 72344);
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!((HEAPU8[$profile + 8 >> 0] | 0) <= 3 | ($profile_length & 3 | 0) == 0)) {
  _png_icc_profile_error($png_ptr, $colorspace, $name, $profile_length, 72376);
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $40 = (HEAPU8[$profile + 129 >> 0] | 0) << 16 | (HEAPU8[$profile + 128 >> 0] | 0) << 24 | (HEAPU8[$profile + 130 >> 0] | 0) << 8 | (HEAPU8[$profile + 131 >> 0] | 0);
 if ($40 >>> 0 <= 357913930) if ((($40 * 12 | 0) + 132 | 0) >>> 0 <= $profile_length >>> 0) {
  $62 = (HEAPU8[$profile + 65 >> 0] | 0) << 16 | (HEAPU8[$profile + 64 >> 0] | 0) << 24 | (HEAPU8[$profile + 66 >> 0] | 0) << 8 | (HEAPU8[$profile + 67 >> 0] | 0);
  if ($62 >>> 0 > 65534) {
   _png_icc_profile_error($png_ptr, $colorspace, $name, $62, 72416);
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  if ($62 >>> 0 > 3) _png_icc_profile_error($png_ptr, 0, $name, $62, 72448);
  $82 = (HEAPU8[$profile + 37 >> 0] | 0) << 16 | (HEAPU8[$profile + 36 >> 0] | 0) << 24 | (HEAPU8[$profile + 38 >> 0] | 0) << 8 | (HEAPU8[$profile + 39 >> 0] | 0);
  if (($82 | 0) != 1633907568) {
   _png_icc_profile_error($png_ptr, $colorspace, $name, $82, 72480);
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  if (_memcmp($profile + 68 | 0, 72504, 12) | 0) {
   $87 = _png_safecat($message$i, 196, 0, 74024) | 0;
   $90 = _png_safecat($message$i, 196, _png_safecat($message$i, $87 + 79 | 0, $87, $name) | 0, 74040) | 0;
   _png_safecat($message$i, 196, _png_safecat($message$i, 196, _png_safecat($message$i, 196, $90, _png_format_number($number$i, $number$i + 24 | 0, 3, 0) | 0) | 0, 74048) | 0, 72520) | 0;
   _png_chunk_report($png_ptr, $message$i, 1);
  }
  $112 = (HEAPU8[$profile + 17 >> 0] | 0) << 16 | (HEAPU8[$profile + 16 >> 0] | 0) << 24 | (HEAPU8[$profile + 18 >> 0] | 0) << 8 | (HEAPU8[$profile + 19 >> 0] | 0);
  if (($112 | 0) == 1196573017) {
   if ($color_type & 2) {
    _png_icc_profile_error($png_ptr, $colorspace, $name, 1196573017, 72600);
    $$0 = 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
  } else if (($112 | 0) == 1380401696) {
   if (!($color_type & 2)) {
    _png_icc_profile_error($png_ptr, $colorspace, $name, 1380401696, 72552);
    $$0 = 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
  } else {
   _png_icc_profile_error($png_ptr, $colorspace, $name, $112, 72648);
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $134 = (HEAPU8[$profile + 13 >> 0] | 0) << 16 | (HEAPU8[$profile + 12 >> 0] | 0) << 24 | (HEAPU8[$profile + 14 >> 0] | 0) << 8 | (HEAPU8[$profile + 15 >> 0] | 0);
  if (($134 | 0) == 1818848875) {
   _png_icc_profile_error($png_ptr, $colorspace, $name, 1818848875, 72720);
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else if (($134 | 0) == 1852662636) _png_icc_profile_error($png_ptr, 0, $name, 1852662636, 72760); else if (($134 | 0) == 1633842036) {
   _png_icc_profile_error($png_ptr, $colorspace, $name, 1633842036, 72680);
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else if (!(($134 | 0) == 1936744803 | ($134 | 0) == 1886549106 | ($134 | 0) == 1835955314 | ($134 | 0) == 1935896178)) _png_icc_profile_error($png_ptr, 0, $name, $134, 72800);
  $152 = (HEAPU8[$profile + 21 >> 0] | 0) << 16 | (HEAPU8[$profile + 20 >> 0] | 0) << 24 | (HEAPU8[$profile + 22 >> 0] | 0) << 8 | (HEAPU8[$profile + 23 >> 0] | 0);
  if (($152 | 0) == 1281450528 | ($152 | 0) == 1482250784) {
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  }
  _png_icc_profile_error($png_ptr, $colorspace, $name, $152, 72832);
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _png_icc_profile_error($png_ptr, $colorspace, $name, $40, 72392);
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN6b2Body13ResetMassDataEv($this) {
 $this = $this | 0;
 var $$lcssa18 = 0.0, $$lcssa917 = 0.0, $0 = 0, $1 = 0, $103 = 0.0, $106 = 0.0, $11 = 0, $111 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $120 = 0, $124 = 0, $129 = 0.0, $134 = 0, $137 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $15 = 0, $2 = 0, $20 = 0, $27 = 0, $3 = 0, $33 = 0.0, $34 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $43 = 0, $47 = 0.0, $49 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $6 = 0, $60 = 0.0, $64 = 0.0, $65 = 0.0, $67 = 0.0, $69 = 0.0, $71 = 0.0, $77 = 0.0, $79 = 0.0, $82 = 0.0, $83 = 0.0, $86 = 0, $87 = 0, $9 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $f$010 = 0, $f$011 = 0, $massData = 0, $storemerge = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $massData = sp;
 $0 = $this + 116 | 0;
 $1 = $this + 120 | 0;
 $2 = $this + 124 | 0;
 $3 = $this + 128 | 0;
 $4 = $this + 28 | 0;
 HEAPF32[$4 >> 2] = 0.0;
 HEAPF32[$this + 32 >> 2] = 0.0;
 HEAP32[$0 + 0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 $6 = HEAP32[$this >> 2] | 0;
 if (($6 | 0) == 1 | ($6 | 0) == 0) {
  $9 = $this + 12 | 0;
  $11 = HEAP32[$9 >> 2] | 0;
  $14 = HEAP32[$9 + 4 >> 2] | 0;
  $15 = $this + 36 | 0;
  HEAP32[$15 >> 2] = $11;
  HEAP32[$15 + 4 >> 2] = $14;
  $20 = $this + 44 | 0;
  HEAP32[$20 >> 2] = $11;
  HEAP32[$20 + 4 >> 2] = $14;
  HEAPF32[$this + 52 >> 2] = +HEAPF32[$this + 56 >> 2];
  STACKTOP = sp;
  return;
 } else if (($6 | 0) == 2) {
  $27 = 90952;
  $33 = +HEAPF32[$27 >> 2];
  $34 = +HEAPF32[$27 + 4 >> 2];
  $f$010 = HEAP32[$this + 100 >> 2] | 0;
  if (!$f$010) {
   $$lcssa18 = $34;
   $$lcssa917 = $33;
   $140 = 0.0;
   label = 11;
  } else {
   $37 = $massData + 4 | 0;
   $38 = $massData + 8 | 0;
   $39 = $massData + 12 | 0;
   $141 = 0.0;
   $142 = 0.0;
   $55 = $33;
   $57 = $34;
   $f$011 = $f$010;
   while (1) {
    $40 = +HEAPF32[$f$011 >> 2];
    if ($40 == 0.0) {
     $143 = $141;
     $64 = $142;
     $67 = $55;
     $69 = $57;
    } else {
     $43 = HEAP32[$f$011 + 12 >> 2] | 0;
     FUNCTION_TABLE_viid[HEAP32[(HEAP32[$43 >> 2] | 0) + 28 >> 2] & 15]($43, $massData, $40);
     $47 = +HEAPF32[$massData >> 2];
     $49 = $47 + +HEAPF32[$0 >> 2];
     HEAPF32[$0 >> 2] = $49;
     $54 = $55 + $47 * +HEAPF32[$37 >> 2];
     $56 = $57 + $47 * +HEAPF32[$38 >> 2];
     $60 = +HEAPF32[$39 >> 2] + +HEAPF32[$2 >> 2];
     HEAPF32[$2 >> 2] = $60;
     $143 = $60;
     $64 = $49;
     $67 = $54;
     $69 = $56;
    }
    $f$011 = HEAP32[$f$011 + 4 >> 2] | 0;
    if (!$f$011) break; else {
     $141 = $143;
     $142 = $64;
     $55 = $67;
     $57 = $69;
    }
   }
   if ($64 > 0.0) {
    $65 = 1.0 / $64;
    HEAPF32[$1 >> 2] = $65;
    $71 = $143;
    $77 = $67 * $65;
    $79 = $69 * $65;
    $82 = $64;
   } else {
    $$lcssa18 = $69;
    $$lcssa917 = $67;
    $140 = $143;
    label = 11;
   }
  }
  if ((label | 0) == 11) {
   HEAPF32[$0 >> 2] = 1.0;
   HEAPF32[$1 >> 2] = 1.0;
   $71 = $140;
   $77 = $$lcssa917;
   $79 = $$lcssa18;
   $82 = 1.0;
  }
  do if ($71 > 0.0) if (!(HEAP16[$this + 4 >> 1] & 16)) {
   $83 = $71 - ($79 * $79 + $77 * $77) * $82;
   HEAPF32[$2 >> 2] = $83;
   if ($83 > 0.0) {
    $storemerge = 1.0 / $83;
    break;
   } else ___assert_fail(87376, 87e3, 334, 87360);
  } else label = 17; else label = 17; while (0);
  if ((label | 0) == 17) {
   HEAPF32[$2 >> 2] = 0.0;
   $storemerge = 0.0;
  }
  HEAPF32[$3 >> 2] = $storemerge;
  $86 = $this + 44 | 0;
  $87 = $86;
  $93 = +HEAPF32[$87 >> 2];
  $94 = +HEAPF32[$87 + 4 >> 2];
  $95 = +$77;
  $96 = +$79;
  $97 = $4;
  HEAPF32[$97 >> 2] = $95;
  HEAPF32[$97 + 4 >> 2] = $96;
  $103 = +HEAPF32[$this + 24 >> 2];
  $106 = +HEAPF32[$this + 20 >> 2];
  $111 = +HEAPF32[$this + 12 >> 2] + ($103 * $77 - $106 * $79);
  $117 = $77 * $106 + $103 * $79 + +HEAPF32[$this + 16 >> 2];
  $118 = +$111;
  $119 = +$117;
  $120 = $86;
  HEAPF32[$120 >> 2] = $118;
  HEAPF32[$120 + 4 >> 2] = $119;
  $124 = $this + 36 | 0;
  HEAPF32[$124 >> 2] = $118;
  HEAPF32[$124 + 4 >> 2] = $119;
  $129 = +HEAPF32[$this + 72 >> 2];
  $134 = $this + 64 | 0;
  HEAPF32[$134 >> 2] = +HEAPF32[$134 >> 2] - $129 * ($117 - $94);
  $137 = $this + 68 | 0;
  HEAPF32[$137 >> 2] = $129 * ($111 - $93) + +HEAPF32[$137 >> 2];
  STACKTOP = sp;
  return;
 } else ___assert_fail(87328, 87e3, 299, 87360);
}

function _vorbis_decode_initial($f, $p_left_start, $p_left_end, $p_right_start, $p_right_end, $mode) {
 $f = $f | 0;
 $p_left_start = $p_left_start | 0;
 $p_left_end = $p_left_end | 0;
 $p_right_start = $p_right_start | 0;
 $p_right_end = $p_right_end | 0;
 $mode = $mode | 0;
 var $$0 = 0, $$0$i = 0, $$pr$i$i = 0, $10 = 0, $107 = 0, $108 = 0, $11 = 0, $115 = 0, $116 = 0, $16 = 0, $2 = 0, $24 = 0, $27 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $82 = 0, $86 = 0, $9 = 0, $90 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $n$08 = 0, $n$09 = 0, $next$010 = 0, $next$011 = 0, $storemerge = 0, $storemerge1 = 0, label = 0;
 HEAP32[$f + 1444 >> 2] = 0;
 HEAP32[$f + 1440 >> 2] = 0;
 $2 = $f + 112 | 0;
 if (HEAP32[$2 >> 2] | 0) {
  $$0 = 0;
  return $$0 | 0;
 }
 $5 = $f + 1392 | 0;
 $6 = $f + 1400 | 0;
 $7 = $f + 1416 | 0;
 $8 = $f + 32 | 0;
 $9 = $f + 20 | 0;
 $10 = $f + 1412 | 0;
 $11 = $f + 40 | 0;
 L4 : while (1) {
  if (!(_maybe_start_packet($f) | 0)) {
   $$0 = 0;
   label = 44;
   break;
  }
  if (!(_get_bits($f, 1) | 0)) {
   label = 18;
   break;
  }
  while (1) {
   $16 = HEAP8[$5 >> 0] | 0;
   if (!($16 << 24 >> 24)) {
    if (HEAP32[$6 >> 2] | 0) break;
    if (!(_next_segment($f) | 0)) break;
    $$pr$i$i = HEAP8[$5 >> 0] | 0;
    if (!($$pr$i$i << 24 >> 24)) {
     label = 9;
     break L4;
    } else $24 = $$pr$i$i;
   } else $24 = $16;
   HEAP8[$5 >> 0] = $24 + -1 << 24 >> 24;
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1;
   $27 = HEAP32[$8 >> 2] | 0;
   do if (!$27) {
    if ((_fgetc(HEAP32[$9 >> 2] | 0) | 0) == -1) HEAP32[$2 >> 2] = 1;
   } else if ($27 >>> 0 < (HEAP32[$11 >> 2] | 0) >>> 0) {
    HEAP32[$8 >> 2] = $27 + 1;
    break;
   } else {
    HEAP32[$2 >> 2] = 1;
    break;
   } while (0);
   HEAP32[$10 >> 2] = 0;
  }
  HEAP32[$10 >> 2] = 0;
  if (HEAP32[$2 >> 2] | 0) {
   $$0 = 0;
   label = 44;
   break;
  }
 }
 if ((label | 0) == 9) ___assert_fail(79096, 78904, 1503, 79120); else if ((label | 0) == 18) {
  if (HEAP32[$f + 96 >> 2] | 0) if ((HEAP32[$f + 100 >> 2] | 0) != (HEAP32[$f + 108 >> 2] | 0)) ___assert_fail(79512, 78904, 3169, 80880);
  $45 = $f + 424 | 0;
  $46 = HEAP32[$45 >> 2] | 0;
  $47 = $46 + -1 | 0;
  do if (($46 | 0) < 16385) {
   if (($46 | 0) < 17) {
    $$0$i = HEAP8[79416 + $47 >> 0] | 0;
    break;
   }
   if (($46 | 0) < 513) {
    $$0$i = (HEAP8[79416 + ($47 >> 5) >> 0] | 0) + 5 | 0;
    break;
   } else {
    $$0$i = (HEAP8[79416 + ($47 >> 10) >> 0] | 0) + 10 | 0;
    break;
   }
  } else {
   if (($46 | 0) >= 16777217) {
    if (($46 | 0) >= 536870913) {
     $$0$i = 0;
     break;
    }
    $$0$i = (HEAP8[79416 + ($47 >> 25) >> 0] | 0) + 25 | 0;
    break;
   }
   if (($46 | 0) < 524289) {
    $$0$i = (HEAP8[79416 + ($47 >> 15) >> 0] | 0) + 15 | 0;
    break;
   } else {
    $$0$i = (HEAP8[79416 + ($47 >> 20) >> 0] | 0) + 20 | 0;
    break;
   }
  } while (0);
  $82 = _get_bits($f, $$0$i) | 0;
  if (($82 | 0) == -1) {
   $$0 = 0;
   return $$0 | 0;
  }
  if (($82 | 0) >= (HEAP32[$45 >> 2] | 0)) {
   $$0 = 0;
   return $$0 | 0;
  }
  HEAP32[$mode >> 2] = $82;
  $86 = $f + ($82 * 6 | 0) + 428 | 0;
  if (!(HEAP8[$86 >> 0] | 0)) {
   $90 = HEAP32[$f + 128 >> 2] | 0;
   $116 = $90 >> 1;
   $n$09 = $90;
   $next$011 = 0;
   label = 39;
  } else {
   $93 = HEAP32[$f + 132 >> 2] | 0;
   $94 = _get_bits($f, 1) | 0;
   $95 = _get_bits($f, 1) | 0;
   $96 = $93 >> 1;
   if ((HEAP8[$86 >> 0] | 0) != 0 & ($94 | 0) == 0) {
    $97 = $f + 128 | 0;
    HEAP32[$p_left_start >> 2] = $93 - (HEAP32[$97 >> 2] | 0) >> 2;
    $115 = $96;
    $n$08 = $93;
    $next$010 = $95;
    $storemerge = (HEAP32[$97 >> 2] | 0) + $93 >> 2;
   } else {
    $116 = $96;
    $n$09 = $93;
    $next$011 = $95;
    label = 39;
   }
  }
  if ((label | 0) == 39) {
   HEAP32[$p_left_start >> 2] = 0;
   $115 = $116;
   $n$08 = $n$09;
   $next$010 = $next$011;
   $storemerge = $116;
  }
  HEAP32[$p_left_end >> 2] = $storemerge;
  if ((HEAP8[$86 >> 0] | 0) != 0 & ($next$010 | 0) == 0) {
   $107 = $n$08 * 3 | 0;
   $108 = $f + 128 | 0;
   HEAP32[$p_right_start >> 2] = $107 - (HEAP32[$108 >> 2] | 0) >> 2;
   $storemerge1 = (HEAP32[$108 >> 2] | 0) + $107 >> 2;
  } else {
   HEAP32[$p_right_start >> 2] = $115;
   $storemerge1 = $n$08;
  }
  HEAP32[$p_right_end >> 2] = $storemerge1;
  $$0 = 1;
  return $$0 | 0;
 } else if ((label | 0) == 44) return $$0 | 0;
 return 0;
}

function _traverseephemeron($g, $h) {
 $g = $g | 0;
 $h = $h | 0;
 var $10 = 0, $11 = 0, $17 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $33 = 0, $4 = 0, $43 = 0, $5 = 0, $50 = 0, $57 = 0, $6 = 0, $63 = 0, $7 = 0, $73 = 0, $77 = 0, $8 = 0, $81 = 0, $84 = 0, $hasclears$0$lcssa = 0, $hasclears$01 = 0, $hasclears$1 = 0, $hasww$0$lcssa = 0, $hasww$03 = 0, $hasww$1 = 0, $i$012 = 0, $marked$0$lcssa = 0, $marked$011 = 0, $marked$1 = 0, $marked$2$lcssa = 0, $marked$27 = 0, $marked$3 = 0, $n$05 = 0, label = 0;
 $4 = $h + 16 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $5 + ((1 << HEAPU8[$h + 7 >> 0]) * 20 | 0) | 0;
 $7 = $h + 8 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 if (!$8) {
  $25 = $5;
  $marked$0$lcssa = 0;
 } else {
  $10 = $h + 12 | 0;
  $84 = $8;
  $i$012 = 0;
  $marked$011 = 0;
  while (1) {
   $11 = HEAP32[$10 >> 2] | 0;
   if (!(HEAP32[$11 + ($i$012 << 3) + 4 >> 2] & 64)) {
    $24 = $84;
    $marked$1 = $marked$011;
   } else {
    $17 = HEAP32[$11 + ($i$012 << 3) >> 2] | 0;
    if (!(HEAP8[$17 + 5 >> 0] & 3)) {
     $24 = $84;
     $marked$1 = $marked$011;
    } else {
     _reallymarkobject($g, $17);
     $24 = HEAP32[$7 >> 2] | 0;
     $marked$1 = 1;
    }
   }
   $i$012 = $i$012 + 1 | 0;
   if ($i$012 >>> 0 >= $24 >>> 0) break; else {
    $84 = $24;
    $marked$011 = $marked$1;
   }
  }
  $25 = HEAP32[$4 >> 2] | 0;
  $marked$0$lcssa = $marked$1;
 }
 if ($25 >>> 0 < $6 >>> 0) {
  $hasclears$01 = 0;
  $hasww$03 = 0;
  $marked$27 = $marked$0$lcssa;
  $n$05 = $25;
  while (1) {
   $27 = $n$05 + 4 | 0;
   $28 = HEAP32[$27 >> 2] | 0;
   $30 = $n$05 + 12 | 0;
   $31 = HEAP32[$30 >> 2] | 0;
   $33 = ($31 & 64 | 0) == 0;
   L14 : do if (!$28) if ($33) {
    $hasclears$1 = $hasclears$01;
    $hasww$1 = $hasww$03;
    $marked$3 = $marked$27;
   } else if (!(HEAP8[(HEAP32[$n$05 + 8 >> 2] | 0) + 5 >> 0] & 3)) {
    $hasclears$1 = $hasclears$01;
    $hasww$1 = $hasww$03;
    $marked$3 = $marked$27;
   } else {
    HEAP32[$30 >> 2] = 10;
    $hasclears$1 = $hasclears$01;
    $hasww$1 = $hasww$03;
    $marked$3 = $marked$27;
   } else {
    do if ($33) {
     $50 = $28;
     label = 18;
    } else {
     $43 = HEAP32[$n$05 + 8 >> 2] | 0;
     if (($31 & 15 | 0) == 4) {
      if (!$43) {
       $50 = $28;
       label = 18;
       break;
      }
      if (!(HEAP8[$43 + 5 >> 0] & 3)) {
       $50 = $28;
       label = 18;
       break;
      }
      _reallymarkobject($g, $43);
      $50 = HEAP32[$27 >> 2] | 0;
      label = 18;
      break;
     }
     $57 = ($28 & 64 | 0) == 0;
     if (!(HEAP8[$43 + 5 >> 0] & 3)) if ($57) {
      $hasclears$1 = $hasclears$01;
      $hasww$1 = $hasww$03;
      $marked$3 = $marked$27;
      break L14;
     } else break;
     if ($57) {
      $hasclears$1 = 1;
      $hasww$1 = $hasww$03;
      $marked$3 = $marked$27;
      break L14;
     }
     $hasclears$1 = 1;
     $hasww$1 = (HEAP8[(HEAP32[$n$05 >> 2] | 0) + 5 >> 0] & 3) == 0 ? $hasww$03 : 1;
     $marked$3 = $marked$27;
     break L14;
    } while (0);
    if ((label | 0) == 18) {
     label = 0;
     if (!($50 & 64)) {
      $hasclears$1 = $hasclears$01;
      $hasww$1 = $hasww$03;
      $marked$3 = $marked$27;
      break;
     }
    }
    $63 = HEAP32[$n$05 >> 2] | 0;
    if (!(HEAP8[$63 + 5 >> 0] & 3)) {
     $hasclears$1 = $hasclears$01;
     $hasww$1 = $hasww$03;
     $marked$3 = $marked$27;
    } else {
     _reallymarkobject($g, $63);
     $hasclears$1 = $hasclears$01;
     $hasww$1 = $hasww$03;
     $marked$3 = 1;
    }
   } while (0);
   $n$05 = $n$05 + 20 | 0;
   if ($n$05 >>> 0 >= $6 >>> 0) {
    $hasclears$0$lcssa = $hasclears$1;
    $hasww$0$lcssa = $hasww$1;
    $marked$2$lcssa = $marked$3;
    break;
   } else {
    $hasclears$01 = $hasclears$1;
    $hasww$03 = $hasww$1;
    $marked$27 = $marked$3;
   }
  }
 } else {
  $hasclears$0$lcssa = 0;
  $hasww$0$lcssa = 0;
  $marked$2$lcssa = $marked$0$lcssa;
 }
 if (!(HEAP8[$g + 49 >> 0] | 0)) {
  $73 = $g + 68 | 0;
  HEAP32[$h + 28 >> 2] = HEAP32[$73 >> 2];
  HEAP32[$73 >> 2] = $h;
  return $marked$2$lcssa | 0;
 }
 if ($hasww$0$lcssa) {
  $77 = $g + 76 | 0;
  HEAP32[$h + 28 >> 2] = HEAP32[$77 >> 2];
  HEAP32[$77 >> 2] = $h;
  return $marked$2$lcssa | 0;
 }
 if (!$hasclears$0$lcssa) return $marked$2$lcssa | 0;
 $81 = $g + 80 | 0;
 HEAP32[$h + 28 >> 2] = HEAP32[$81 >> 2];
 HEAP32[$81 >> 2] = $h;
 return $marked$2$lcssa | 0;
}

function _luaK_goiftrue($fs, $e) {
 $fs = $fs | 0;
 $e = $e | 0;
 var $$0$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $101 = 0, $17 = 0, $23 = 0, $26 = 0, $3 = 0, $31 = 0, $32 = 0, $34 = 0, $36 = 0, $4 = 0, $45 = 0, $46 = 0, $51 = 0, $58 = 0, $63 = 0, $65 = 0, $67 = 0, $68 = 0, $70 = 0, $73 = 0, $75 = 0, $84 = 0, $85 = 0, $89 = 0, $91 = 0, $93 = 0, $94 = 0, $96 = 0, $99 = 0, $e$idx = 0, $e$idx$val = 0, $fs$idx$val$idx$val = 0, $fs$idx$val$idx$val$i = 0, $fs$idx$val$idx$val$i$i = 0, $list$0$i = 0, $list$0$i$i = 0, $pc$0 = 0, label = 0;
 _luaK_dischargevars($fs, $e);
 $0 = HEAP32[$e >> 2] | 0;
 L1 : do switch ($0 | 0) {
 case 2:
 case 6:
 case 5:
 case 4:
  break;
 case 11:
  {
   $e$idx = $e + 4 | 0;
   $e$idx$val = HEAP32[$e$idx >> 2] | 0;
   $fs$idx$val$idx$val = HEAP32[(HEAP32[$fs >> 2] | 0) + 48 >> 2] | 0;
   $1 = $fs$idx$val$idx$val + ($e$idx$val << 2) | 0;
   if (($e$idx$val | 0) > 0) {
    $3 = $fs$idx$val$idx$val + ($e$idx$val + -1 << 2) | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    if ((HEAP8[59568 + ($4 & 63) >> 0] | 0) < 0) {
     $$0$i$i = $3;
     $10 = $4;
    } else label = 4;
   } else label = 4;
   if ((label | 0) == 4) {
    $$0$i$i = $1;
    $10 = HEAP32[$1 >> 2] | 0;
   }
   HEAP32[$$0$i$i >> 2] = (($10 & 16320 | 0) == 0 & 1) << 6 | $10 & -16321;
   $pc$0 = HEAP32[$e$idx >> 2] | 0;
   label = 18;
   break;
  }
 default:
  {
   $17 = $e + 4 | 0;
   if (($0 | 0) == 7) label = 14; else if (($0 | 0) == 12) {
    $23 = HEAP32[(HEAP32[(HEAP32[$fs >> 2] | 0) + 48 >> 2] | 0) + (HEAP32[$17 >> 2] << 2) >> 2] | 0;
    if (($23 & 63 | 0) == 27) {
     $26 = $fs + 16 | 0;
     HEAP32[$26 >> 2] = (HEAP32[$26 >> 2] | 0) + -1;
     $pc$0 = _condjump($fs, 34, $23 >>> 23, 0, 1) | 0;
     label = 18;
     break L1;
    } else label = 9;
   } else label = 9;
   if ((label | 0) == 9) {
    $31 = $fs + 44 | 0;
    $32 = HEAP8[$31 >> 0] | 0;
    $34 = ($32 & 255) + 1 | 0;
    $36 = (HEAP32[$fs >> 2] | 0) + 8 | 0;
    do if ($34 >>> 0 > (HEAPU8[$36 >> 0] | 0) >>> 0) if ($34 >>> 0 > 249) _luaX_syntaxerror(HEAP32[$fs + 8 >> 2] | 0, 65488); else {
     HEAP8[$36 >> 0] = $34;
     $45 = HEAP8[$31 >> 0] | 0;
     break;
    } else $45 = $32; while (0);
    $46 = ($45 & 255) + 1 | 0;
    HEAP8[$31 >> 0] = $46;
    _discharge2reg($fs, $e, ($46 & 255) + -1 | 0);
    if ((HEAP32[$e >> 2] | 0) == 7) label = 14;
   }
   if ((label | 0) == 14) {
    $51 = HEAP32[$17 >> 2] | 0;
    if (!($51 & 256)) if ((HEAPU8[$fs + 42 >> 0] | 0) <= ($51 | 0)) {
     $58 = $fs + 44 | 0;
     HEAP8[$58 >> 0] = (HEAP8[$58 >> 0] | 0) + -1 << 24 >> 24;
    }
   }
   $pc$0 = _condjump($fs, 35, 255, HEAP32[$17 >> 2] | 0, 0) | 0;
   label = 18;
  }
 } while (0);
 do if ((label | 0) == 18) {
  $63 = $e + 12 | 0;
  if (($pc$0 | 0) != -1) {
   $65 = HEAP32[$63 >> 2] | 0;
   if (($65 | 0) == -1) {
    HEAP32[$63 >> 2] = $pc$0;
    break;
   }
   $fs$idx$val$idx$val$i = HEAP32[(HEAP32[$fs >> 2] | 0) + 48 >> 2] | 0;
   $list$0$i = $65;
   while (1) {
    $67 = $fs$idx$val$idx$val$i + ($list$0$i << 2) | 0;
    $68 = HEAP32[$67 >> 2] | 0;
    $70 = ($68 >>> 14) + -131071 | 0;
    if (($70 | 0) == -1) break;
    $73 = $list$0$i + 1 + $70 | 0;
    if (($73 | 0) == -1) break; else $list$0$i = $73;
   }
   $75 = $pc$0 + ~$list$0$i | 0;
   if (((($75 | 0) > -1 ? $75 : 0 - $75 | 0) | 0) > 131071) _luaX_syntaxerror(HEAP32[$fs + 8 >> 2] | 0, 65576); else {
    HEAP32[$67 >> 2] = ($75 << 14) + 2147467264 | $68 & 16383;
    break;
   }
  }
 } while (0);
 $84 = $e + 8 | 0;
 $85 = HEAP32[$84 >> 2] | 0;
 HEAP32[$fs + 20 >> 2] = HEAP32[$fs + 16 >> 2];
 $89 = $fs + 24 | 0;
 if (($85 | 0) == -1) {
  HEAP32[$84 >> 2] = -1;
  return;
 }
 $91 = HEAP32[$89 >> 2] | 0;
 if (($91 | 0) == -1) {
  HEAP32[$89 >> 2] = $85;
  HEAP32[$84 >> 2] = -1;
  return;
 }
 $fs$idx$val$idx$val$i$i = HEAP32[(HEAP32[$fs >> 2] | 0) + 48 >> 2] | 0;
 $list$0$i$i = $91;
 while (1) {
  $93 = $fs$idx$val$idx$val$i$i + ($list$0$i$i << 2) | 0;
  $94 = HEAP32[$93 >> 2] | 0;
  $96 = ($94 >>> 14) + -131071 | 0;
  if (($96 | 0) == -1) break;
  $99 = $list$0$i$i + 1 + $96 | 0;
  if (($99 | 0) == -1) break; else $list$0$i$i = $99;
 }
 $101 = $85 + ~$list$0$i$i | 0;
 if (((($101 | 0) > -1 ? $101 : 0 - $101 | 0) | 0) > 131071) _luaX_syntaxerror(HEAP32[$fs + 8 >> 2] | 0, 65576);
 HEAP32[$93 >> 2] = ($101 << 14) + 2147467264 | $94 & 16383;
 HEAP32[$84 >> 2] = -1;
 return;
}

function __ZN11b2WeldJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $$pn27 = 0.0, $$pn28 = 0.0, $$pn3 = 0.0, $$pn4 = 0.0, $0 = 0, $1 = 0, $103 = 0.0, $116 = 0.0, $117 = 0.0, $122 = 0.0, $124 = 0.0, $127 = 0.0, $13 = 0.0, $137 = 0.0, $14 = 0.0, $141 = 0.0, $147 = 0.0, $150 = 0.0, $152 = 0.0, $16 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0, $175 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $190 = 0, $191 = 0.0, $2 = 0, $20 = 0, $26 = 0.0, $27 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $35 = 0.0, $37 = 0.0, $39 = 0.0, $4 = 0, $41 = 0.0, $46 = 0.0, $5 = 0, $51 = 0.0, $54 = 0.0, $57 = 0.0, $62 = 0.0, $67 = 0.0, $7 = 0, $70 = 0.0, $73 = 0.0, $74 = 0.0, $86 = 0.0, $91 = 0.0, $C = 0, $C1 = 0, $K = 0, $angularError$0 = 0.0, $positionError$0 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $K = sp + 40 | 0;
 $C1 = sp + 32 | 0;
 $0 = sp + 24 | 0;
 $C = sp + 12 | 0;
 $1 = sp;
 $2 = $this + 116 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $data + 24 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $7 = $5 + ($3 * 12 | 0) | 0;
 $13 = +HEAPF32[$7 >> 2];
 $14 = +HEAPF32[$7 + 4 >> 2];
 $16 = +HEAPF32[$5 + ($3 * 12 | 0) + 8 >> 2];
 $17 = $this + 120 | 0;
 $18 = HEAP32[$17 >> 2] | 0;
 $20 = $5 + ($18 * 12 | 0) | 0;
 $26 = +HEAPF32[$20 >> 2];
 $27 = +HEAPF32[$20 + 4 >> 2];
 $29 = +HEAPF32[$5 + ($18 * 12 | 0) + 8 >> 2];
 $30 = +Math_sin(+$16);
 $31 = +Math_cos(+$16);
 $32 = +Math_sin(+$29);
 $33 = +Math_cos(+$29);
 $35 = +HEAPF32[$this + 156 >> 2];
 $37 = +HEAPF32[$this + 160 >> 2];
 $39 = +HEAPF32[$this + 164 >> 2];
 $41 = +HEAPF32[$this + 168 >> 2];
 $46 = +HEAPF32[$this + 80 >> 2] - +HEAPF32[$this + 140 >> 2];
 $51 = +HEAPF32[$this + 84 >> 2] - +HEAPF32[$this + 144 >> 2];
 $54 = $31 * $46 - $30 * $51;
 $57 = $30 * $46 + $31 * $51;
 $62 = +HEAPF32[$this + 88 >> 2] - +HEAPF32[$this + 148 >> 2];
 $67 = +HEAPF32[$this + 92 >> 2] - +HEAPF32[$this + 152 >> 2];
 $70 = $33 * $62 - $32 * $67;
 $73 = $32 * $62 + $33 * $67;
 $74 = $35 + $37;
 HEAPF32[$K >> 2] = $74 + $39 * ($57 * $57) + $41 * ($73 * $73);
 $86 = -($39 * ($57 * $54)) - $41 * ($73 * $70);
 HEAPF32[$K + 12 >> 2] = $86;
 $91 = -($39 * $57) - $41 * $73;
 HEAPF32[$K + 24 >> 2] = $91;
 HEAPF32[$K + 4 >> 2] = $86;
 HEAPF32[$K + 16 >> 2] = $74 + $39 * ($54 * $54) + $41 * ($70 * $70);
 $103 = $39 * $54 + $41 * $70;
 HEAPF32[$K + 28 >> 2] = $103;
 HEAPF32[$K + 8 >> 2] = $91;
 HEAPF32[$K + 20 >> 2] = $103;
 HEAPF32[$K + 32 >> 2] = $39 + $41;
 $116 = $26 + $70 - $13 - $54;
 $117 = $27 + $73 - $14 - $57;
 if (+HEAPF32[$this + 68 >> 2] > 0.0) {
  HEAPF32[$C1 >> 2] = $116;
  HEAPF32[$C1 + 4 >> 2] = $117;
  $122 = +Math_sqrt(+($117 * $117 + $116 * $116));
  __ZNK7b2Mat337Solve22ERK6b2Vec2($0, $K, $C1);
  $124 = -+HEAPF32[$0 >> 2];
  $127 = -+HEAPF32[$0 + 4 >> 2];
  $$pn27 = $127;
  $$pn28 = $124;
  $$pn3 = $70 * $127 - $73 * $124;
  $$pn4 = $54 * $127 - $57 * $124;
  $angularError$0 = 0.0;
  $positionError$0 = $122;
 } else {
  $137 = $29 - $16 - +HEAPF32[$this + 96 >> 2];
  $141 = +Math_sqrt(+($116 * $116 + $117 * $117));
  if ($137 > 0.0) $191 = $137; else $191 = -$137;
  HEAPF32[$C >> 2] = $116;
  HEAPF32[$C + 4 >> 2] = $117;
  HEAPF32[$C + 8 >> 2] = $137;
  __ZNK7b2Mat337Solve33ERK6b2Vec3($1, $K, $C);
  $147 = -+HEAPF32[$1 >> 2];
  $150 = -+HEAPF32[$1 + 4 >> 2];
  $152 = +HEAPF32[$1 + 8 >> 2];
  $$pn27 = $150;
  $$pn28 = $147;
  $$pn3 = $70 * $150 - $73 * $147 - $152;
  $$pn4 = $54 * $150 - $57 * $147 - $152;
  $angularError$0 = $191;
  $positionError$0 = $141;
 }
 $168 = +($13 - $35 * $$pn28);
 $169 = +($14 - $35 * $$pn27);
 $170 = (HEAP32[$4 >> 2] | 0) + ((HEAP32[$2 >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$170 >> 2] = $168;
 HEAPF32[$170 + 4 >> 2] = $169;
 $175 = HEAP32[$4 >> 2] | 0;
 HEAPF32[$175 + ((HEAP32[$2 >> 2] | 0) * 12 | 0) + 8 >> 2] = $16 - $39 * $$pn4;
 $179 = +($26 + $37 * $$pn28);
 $180 = +($27 + $37 * $$pn27);
 $181 = $175 + ((HEAP32[$17 >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$181 >> 2] = $179;
 HEAPF32[$181 + 4 >> 2] = $180;
 HEAPF32[(HEAP32[$4 >> 2] | 0) + ((HEAP32[$17 >> 2] | 0) * 12 | 0) + 8 >> 2] = $29 + $41 * $$pn3;
 if (!($positionError$0 <= .004999999888241291)) {
  $190 = 0;
  STACKTOP = sp;
  return $190 | 0;
 }
 $190 = $angularError$0 <= .03490658849477768;
 STACKTOP = sp;
 return $190 | 0;
}

function _json_append_number($l, $json, $lindex) {
 $l = $l | 0;
 $json = $json | 0;
 $lindex = $lindex | 0;
 var $0 = 0.0, $1 = 0.0, $17 = 0, $19 = 0, $2 = 0, $30 = 0, $31 = 0, $39 = 0, $44 = 0, $51 = 0, $52 = 0, $53 = 0, $55 = 0, $6 = 0, $68 = 0, $69 = 0, $78 = 0, $json$idx1$val = 0, $s$idx1$i = 0, $s$idx1$i$i = 0, $s$idx1$i$i10 = 0, $s$idx1$i$i4 = 0, $s$idx1$val$i = 0, $s$idx1$val$i$i = 0, $s$idx1$val$i$i11 = 0, $s$idx1$val$i$i5 = 0, $vararg_buffer = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $0 = +_lua_tonumberx($l, $lindex, 0);
 $1 = $0;
 $2 = HEAP32[17295] | 0;
 do if (!$2) {
  HEAPF64[tempDoublePtr >> 3] = $1;
  $6 = HEAP32[tempDoublePtr + 4 >> 2] & 2146435072;
  if ($6 >>> 0 > 2146435071 | ($6 | 0) == 2146435071 & 0 > 4294967295) {
   if (!(HEAP32[17297] | 0)) _strbuf_free($json);
   HEAP32[$vararg_buffer >> 2] = _lua_typename($l, _lua_type($l, $lindex) | 0) | 0;
   HEAP32[$vararg_buffer + 4 >> 2] = 70088;
   _luaL_error($l, 69944, $vararg_buffer) | 0;
  }
 } else {
  HEAPF64[tempDoublePtr >> 3] = $1;
  $17 = HEAP32[tempDoublePtr >> 2] | 0;
  $19 = HEAP32[tempDoublePtr + 4 >> 2] & 2147483647;
  if (($2 | 0) != 1) {
   if (!($19 >>> 0 > 2146435071 | ($19 | 0) == 2146435071 & $17 >>> 0 > 4294967295)) break;
   $s$idx1$i$i = $json + 8 | 0;
   $s$idx1$val$i$i = HEAP32[$s$idx1$i$i >> 2] | 0;
   if (((HEAP32[$json + 4 >> 2] | 0) + -1 - $s$idx1$val$i$i | 0) < 4) {
    _strbuf_resize($json, $s$idx1$val$i$i + 4 | 0);
    $69 = HEAP32[$s$idx1$i$i >> 2] | 0;
   } else $69 = $s$idx1$val$i$i;
   $68 = (HEAP32[$json >> 2] | 0) + $69 | 0;
   HEAP8[$68 >> 0] = 110;
   HEAP8[$68 + 1 >> 0] = 117;
   HEAP8[$68 + 2 >> 0] = 108;
   HEAP8[$68 + 3 >> 0] = 108;
   HEAP32[$s$idx1$i$i >> 2] = (HEAP32[$s$idx1$i$i >> 2] | 0) + 4;
   STACKTOP = sp;
   return;
  }
  if ($19 >>> 0 > 2146435072 | ($19 | 0) == 2146435072 & $17 >>> 0 > 0) {
   $s$idx1$i$i4 = $json + 8 | 0;
   $s$idx1$val$i$i5 = HEAP32[$s$idx1$i$i4 >> 2] | 0;
   if (((HEAP32[$json + 4 >> 2] | 0) + -1 - $s$idx1$val$i$i5 | 0) < 3) {
    _strbuf_resize($json, $s$idx1$val$i$i5 + 3 | 0);
    $31 = HEAP32[$s$idx1$i$i4 >> 2] | 0;
   } else $31 = $s$idx1$val$i$i5;
   $30 = (HEAP32[$json >> 2] | 0) + $31 | 0;
   HEAP8[$30 + 0 >> 0] = HEAP8[70120] | 0;
   HEAP8[$30 + 1 >> 0] = HEAP8[70121] | 0;
   HEAP8[$30 + 2 >> 0] = HEAP8[70122] | 0;
   HEAP32[$s$idx1$i$i4 >> 2] = (HEAP32[$s$idx1$i$i4 >> 2] | 0) + 3;
   STACKTOP = sp;
   return;
  }
  if (($17 | 0) == 0 & ($19 | 0) == 2146435072) {
   $s$idx1$i$i10 = $json + 8 | 0;
   $s$idx1$val$i$i11 = HEAP32[$s$idx1$i$i10 >> 2] | 0;
   $39 = (HEAP32[$json + 4 >> 2] | 0) + -1 - $s$idx1$val$i$i11 | 0;
   if ($0 < 0.0) {
    if (($39 | 0) < 9) {
     _strbuf_resize($json, $s$idx1$val$i$i11 + 9 | 0);
     $44 = HEAP32[$s$idx1$i$i10 >> 2] | 0;
    } else $44 = $s$idx1$val$i$i11;
    dest = (HEAP32[$json >> 2] | 0) + $44 + 0 | 0;
    src = 70128 | 0;
    stop = dest + 9 | 0;
    do {
     HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
     dest = dest + 1 | 0;
     src = src + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    HEAP32[$s$idx1$i$i10 >> 2] = (HEAP32[$s$idx1$i$i10 >> 2] | 0) + 9;
    STACKTOP = sp;
    return;
   } else {
    if (($39 | 0) < 8) {
     _strbuf_resize($json, $s$idx1$val$i$i11 + 8 | 0);
     $51 = HEAP32[$s$idx1$i$i10 >> 2] | 0;
    } else $51 = $s$idx1$val$i$i11;
    $52 = (HEAP32[$json >> 2] | 0) + $51 | 0;
    $53 = $52;
    HEAP8[$53 >> 0] = 73;
    HEAP8[$53 + 1 >> 0] = 110;
    HEAP8[$53 + 2 >> 0] = 102;
    HEAP8[$53 + 3 >> 0] = 105;
    $55 = $52 + 4 | 0;
    HEAP8[$55 >> 0] = 110;
    HEAP8[$55 + 1 >> 0] = 105;
    HEAP8[$55 + 2 >> 0] = 116;
    HEAP8[$55 + 3 >> 0] = 121;
    HEAP32[$s$idx1$i$i10 >> 2] = (HEAP32[$s$idx1$i$i10 >> 2] | 0) + 8;
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 $s$idx1$i = $json + 8 | 0;
 $s$idx1$val$i = HEAP32[$s$idx1$i >> 2] | 0;
 if (((HEAP32[$json + 4 >> 2] | 0) + -1 - $s$idx1$val$i | 0) < 32) {
  _strbuf_resize($json, $s$idx1$val$i + 32 | 0);
  $json$idx1$val = HEAP32[$s$idx1$i >> 2] | 0;
 } else $json$idx1$val = $s$idx1$val$i;
 $78 = _fpconv_g_fmt((HEAP32[$json >> 2] | 0) + $json$idx1$val | 0, $1, HEAP32[17296] | 0) | 0;
 HEAP32[$s$idx1$i >> 2] = (HEAP32[$s$idx1$i >> 2] | 0) + $78;
 STACKTOP = sp;
 return;
}

function _str_unpack($L) {
 $L = $L | 0;
 var $$0$i = 0, $$016$i = 0, $$035$i = 0, $$07$i = 0, $$111$i = 0, $$1210$i = 0, $$149$i = 0, $$pre5$pre = 0, $0 = 0, $1 = 0, $11 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $24 = 0, $3 = 0, $30 = 0, $33 = 0, $46 = 0, $54 = 0, $55 = 0, $60 = 0, $61 = 0, $64 = 0, $65 = 0, $69 = 0, $70 = 0, $9 = 0, $fmt = 0, $h = 0, $ld = 0, $n$0$lcssa = 0, $n$02 = 0, $n$1 = 0, $ntoalign = 0, $num$0 = 0.0, $pos$0$lcssa = 0, $pos$03 = 0, $pos$1 = 0, $size = 0, $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $h = sp + 40 | 0;
 $fmt = sp + 36 | 0;
 $ld = sp + 32 | 0;
 $size = sp + 28 | 0;
 $ntoalign = sp + 24 | 0;
 $u = sp;
 $0 = _luaL_checklstring($L, 1, 0) | 0;
 HEAP32[$fmt >> 2] = $0;
 $1 = _luaL_checklstring($L, 2, $ld) | 0;
 $2 = _luaL_optinteger($L, 3, 1) | 0;
 $3 = HEAP32[$ld >> 2] | 0;
 if (($2 | 0) > -1) $$0$i = $2; else if ($3 >>> 0 < (0 - $2 | 0) >>> 0) $$0$i = 0; else $$0$i = $2 + 1 + $3 | 0;
 $9 = $$0$i + -1 | 0;
 if ($9 >>> 0 > $3 >>> 0) _luaL_argerror($L, 3, 63752) | 0;
 HEAP32[$h >> 2] = $L;
 $11 = $h + 4 | 0;
 HEAP32[$11 >> 2] = 1;
 HEAP32[$h + 8 >> 2] = 1;
 if (!(HEAP8[$0 >> 0] | 0)) {
  $n$0$lcssa = 0;
  $pos$0$lcssa = $9;
  $69 = $pos$0$lcssa + 1 | 0;
  _lua_pushinteger($L, $69);
  $70 = $n$0$lcssa + 1 | 0;
  STACKTOP = sp;
  return $70 | 0;
 }
 $n$02 = 0;
 $pos$03 = $9;
 while (1) {
  $15 = _getdetails($h, $pos$03, $fmt, $size, $ntoalign) | 0;
  $16 = HEAP32[$ntoalign >> 2] | 0;
  $17 = HEAP32[$size >> 2] | 0;
  $$pre5$pre = $16 + $pos$03 | 0;
  if (($17 + $16 | 0) >>> 0 > ~$pos$03 >>> 0) label = 10; else if (($$pre5$pre + $17 | 0) >>> 0 > (HEAP32[$ld >> 2] | 0) >>> 0) label = 10;
  if ((label | 0) == 10) {
   label = 0;
   _luaL_argerror($L, 2, 61224) | 0;
  }
  _luaL_checkstack($L, 2, 61248);
  $24 = $n$02 + 1 | 0;
  switch ($15 | 0) {
  case 2:
   {
    $30 = $1 + $$pre5$pre | 0;
    $33 = ($17 | 0) == 0;
    if ((HEAP32[$11 >> 2] | 0) == 1) {
     if (!$33) {
      $$016$i = $17;
      $$035$i = $30;
      $$07$i = $u;
      while (1) {
       $$016$i = $$016$i + -1 | 0;
       HEAP8[$$07$i >> 0] = HEAP8[$$035$i >> 0] | 0;
       if (!$$016$i) break; else {
        $$035$i = $$035$i + 1 | 0;
        $$07$i = $$07$i + 1 | 0;
       }
      }
     }
    } else if (!$33) {
     $$111$i = $u + ($17 + -1) | 0;
     $$1210$i = $17;
     $$149$i = $30;
     while (1) {
      $$1210$i = $$1210$i + -1 | 0;
      HEAP8[$$111$i >> 0] = HEAP8[$$149$i >> 0] | 0;
      if (!$$1210$i) break; else {
       $$111$i = $$111$i + -1 | 0;
       $$149$i = $$149$i + 1 | 0;
      }
     }
    }
    $46 = HEAP32[$size >> 2] | 0;
    if (($46 | 0) == 8) $num$0 = +HEAPF64[$u >> 3]; else if (($46 | 0) == 4) $num$0 = +HEAPF32[$u >> 2]; else $num$0 = +HEAPF32[$u >> 2];
    _lua_pushnumber($L, $num$0);
    $65 = HEAP32[$size >> 2] | 0;
    $n$1 = $24;
    $pos$1 = $$pre5$pre;
    break;
   }
  case 1:
  case 0:
   {
    _lua_pushinteger($L, _unpackint($L, $1 + $$pre5$pre | 0, HEAP32[$11 >> 2] | 0, $17, ($15 | 0) == 0 & 1) | 0);
    $65 = $17;
    $n$1 = $24;
    $pos$1 = $$pre5$pre;
    break;
   }
  case 5:
   {
    $60 = $1 + $$pre5$pre | 0;
    $61 = _strlen($60 | 0) | 0;
    _lua_pushlstring($L, $60, $61) | 0;
    $65 = $17;
    $n$1 = $24;
    $pos$1 = $$pre5$pre + 1 + $61 | 0;
    break;
   }
  case 8:
  case 6:
  case 7:
   {
    $65 = $17;
    $n$1 = $n$02;
    $pos$1 = $$pre5$pre;
    break;
   }
  case 3:
   {
    _lua_pushlstring($L, $1 + $$pre5$pre | 0, $17) | 0;
    $65 = $17;
    $n$1 = $24;
    $pos$1 = $$pre5$pre;
    break;
   }
  case 4:
   {
    $54 = _unpackint($L, $1 + $$pre5$pre | 0, HEAP32[$11 >> 2] | 0, $17, 0) | 0;
    $55 = $54 + $$pre5$pre | 0;
    if (($55 + $17 | 0) >>> 0 > (HEAP32[$ld >> 2] | 0) >>> 0) _luaL_argerror($L, 2, 61224) | 0;
    _lua_pushlstring($L, $1 + ($17 + $$pre5$pre) | 0, $54) | 0;
    $65 = $17;
    $n$1 = $24;
    $pos$1 = $55;
    break;
   }
  default:
   {
    $65 = $17;
    $n$1 = $24;
    $pos$1 = $$pre5$pre;
   }
  }
  $64 = $65 + $pos$1 | 0;
  if (!(HEAP8[HEAP32[$fmt >> 2] >> 0] | 0)) {
   $n$0$lcssa = $n$1;
   $pos$0$lcssa = $64;
   break;
  } else {
   $n$02 = $n$1;
   $pos$03 = $64;
  }
 }
 $69 = $pos$0$lcssa + 1 | 0;
 _lua_pushinteger($L, $69);
 $70 = $n$0$lcssa + 1 | 0;
 STACKTOP = sp;
 return $70 | 0;
}

function _forbody($ls, $base, $line, $nvars, $isnum) {
 $ls = $ls | 0;
 $base = $base | 0;
 $line = $line | 0;
 $nvars = $nvars | 0;
 $isnum = $isnum | 0;
 var $$idx$val$idx$val$pre$i = 0, $$idx$val$idx$val$pre$i8 = 0, $$idx1$i = 0, $$idx1$val$idx$val$idx$val$pre$i = 0, $$idx1$val$idx$val$idx$val$pre$i12 = 0, $$idx2$i = 0, $$idx2$i4 = 0, $0 = 0, $1 = 0, $100 = 0, $104 = 0, $2 = 0, $32 = 0, $35 = 0, $43 = 0, $5 = 0, $51 = 0, $53 = 0, $56 = 0, $59 = 0, $68 = 0, $7 = 0, $73 = 0, $81 = 0, $89 = 0, $97 = 0, $bl = 0, $bl$i = 0, $endfor$0 = 0, $ls$idx$val = 0, $ls$idx$val$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $bl$i = sp + 16 | 0;
 $bl = sp;
 $0 = $ls + 28 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $1 + 42 | 0;
 $5 = (HEAPU8[$2 >> 0] | 0) + 3 | 0;
 HEAP8[$2 >> 0] = $5;
 $7 = $1 + 16 | 0;
 $$idx1$i = $1 + 8 | 0;
 $$idx2$i = $1 + 36 | 0;
 $$idx$val$idx$val$pre$i = HEAP32[(HEAP32[$1 >> 2] | 0) + 60 >> 2] | 0;
 $$idx1$val$idx$val$idx$val$pre$i = HEAP32[HEAP32[(HEAP32[$$idx1$i >> 2] | 0) + 48 >> 2] >> 2] | 0;
 HEAP32[$$idx$val$idx$val$pre$i + ((HEAP16[$$idx1$val$idx$val$idx$val$pre$i + (($5 & 255) + -3 + (HEAP32[$$idx2$i >> 2] | 0) << 1) >> 1] | 0) * 12 | 0) + 4 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$$idx$val$idx$val$pre$i + ((HEAP16[$$idx1$val$idx$val$idx$val$pre$i + ((HEAPU8[$2 >> 0] | 0) + -2 + (HEAP32[$$idx2$i >> 2] | 0) << 1) >> 1] | 0) * 12 | 0) + 4 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$$idx$val$idx$val$pre$i + ((HEAP16[$$idx1$val$idx$val$idx$val$pre$i + ((HEAPU8[$2 >> 0] | 0) + -1 + (HEAP32[$$idx2$i >> 2] | 0) << 1) >> 1] | 0) * 12 | 0) + 4 >> 2] = HEAP32[$7 >> 2];
 $32 = $ls + 12 | 0;
 if ((HEAP32[$32 >> 2] | 0) != 259) _error_expected($ls, 259);
 _luaX_next($ls);
 $35 = ($isnum | 0) != 0;
 if ($35) $100 = _luaK_codeABx($1, 40, $base, 131070) | 0; else $100 = _luaK_jump($1) | 0;
 HEAP8[$bl + 14 >> 0] = 0;
 HEAP8[$bl + 12 >> 0] = HEAP8[$2 >> 0] | 0;
 $43 = HEAP32[(HEAP32[$$idx1$i >> 2] | 0) + 48 >> 2] | 0;
 HEAP32[$bl + 4 >> 2] = HEAP32[$43 + 28 >> 2];
 HEAP32[$bl + 8 >> 2] = HEAP32[$43 + 16 >> 2];
 HEAP8[$bl + 13 >> 0] = 0;
 $51 = $1 + 12 | 0;
 HEAP32[$bl >> 2] = HEAP32[$51 >> 2];
 HEAP32[$51 >> 2] = $bl;
 $ls$idx$val = HEAP32[$0 >> 2] | 0;
 $53 = $ls$idx$val + 42 | 0;
 $56 = (HEAPU8[$53 >> 0] | 0) + $nvars | 0;
 HEAP8[$53 >> 0] = $56;
 if ($nvars) {
  $59 = $ls$idx$val + 16 | 0;
  $$idx2$i4 = $ls$idx$val + 36 | 0;
  $$idx$val$idx$val$pre$i8 = HEAP32[(HEAP32[$ls$idx$val >> 2] | 0) + 60 >> 2] | 0;
  $$idx1$val$idx$val$idx$val$pre$i12 = HEAP32[HEAP32[(HEAP32[$ls$idx$val + 8 >> 2] | 0) + 48 >> 2] >> 2] | 0;
  HEAP32[$$idx$val$idx$val$pre$i8 + ((HEAP16[$$idx1$val$idx$val$idx$val$pre$i12 + (($56 & 255) - $nvars + (HEAP32[$$idx2$i4 >> 2] | 0) << 1) >> 1] | 0) * 12 | 0) + 4 >> 2] = HEAP32[$59 >> 2];
  $68 = $nvars + -1 | 0;
  if ($68) {
   $73 = $68;
   do {
    HEAP32[$$idx$val$idx$val$pre$i8 + ((HEAP16[$$idx1$val$idx$val$idx$val$pre$i12 + ((HEAPU8[$53 >> 0] | 0) - $73 + (HEAP32[$$idx2$i4 >> 2] | 0) << 1) >> 1] | 0) * 12 | 0) + 4 >> 2] = HEAP32[$59 >> 2];
    $73 = $73 + -1 | 0;
   } while (($73 | 0) != 0);
  }
 }
 _luaK_reserveregs($1, $nvars);
 $81 = HEAP32[$0 >> 2] | 0;
 HEAP8[$bl$i + 14 >> 0] = 0;
 HEAP8[$bl$i + 12 >> 0] = HEAP8[$81 + 42 >> 0] | 0;
 $89 = HEAP32[(HEAP32[$81 + 8 >> 2] | 0) + 48 >> 2] | 0;
 HEAP32[$bl$i + 4 >> 2] = HEAP32[$89 + 28 >> 2];
 HEAP32[$bl$i + 8 >> 2] = HEAP32[$89 + 16 >> 2];
 HEAP8[$bl$i + 13 >> 0] = 0;
 $97 = $81 + 12 | 0;
 HEAP32[$bl$i >> 2] = HEAP32[$97 >> 2];
 HEAP32[$97 >> 2] = $bl$i;
 L13 : do {
  $ls$idx$val$i$i = HEAP32[$32 >> 2] | 0;
  switch ($ls$idx$val$i$i | 0) {
  case 277:
  case 289:
  case 262:
  case 261:
  case 260:
   {
    break L13;
    break;
   }
  default:
   {}
  }
  _statement($ls);
 } while (($ls$idx$val$i$i | 0) != 274);
 _leaveblock($81);
 _leaveblock($1);
 _luaK_patchtohere($1, $100);
 if ($35) {
  $endfor$0 = _luaK_codeABx($1, 39, $base, 131070) | 0;
  $104 = $100 + 1 | 0;
  _luaK_patchlist($1, $endfor$0, $104);
  _luaK_fixline($1, $line);
  STACKTOP = sp;
  return;
 } else {
  _luaK_codeABC($1, 41, $base, 0, $nvars) | 0;
  _luaK_fixline($1, $line);
  $endfor$0 = _luaK_codeABx($1, 42, $base + 2 | 0, 131070) | 0;
  $104 = $100 + 1 | 0;
  _luaK_patchlist($1, $endfor$0, $104);
  _luaK_fixline($1, $line);
  STACKTOP = sp;
  return;
 }
}

function __ZN16b2PrismaticJoint4DumpEv($this) {
 $this = $this | 0;
 var $16 = 0.0, $22 = 0.0, $28 = 0.0, $3 = 0, $7 = 0, $vararg_buffer1 = 0, $vararg_buffer13 = 0, $vararg_buffer17 = 0, $vararg_buffer21 = 0, $vararg_buffer24 = 0, $vararg_buffer27 = 0, $vararg_buffer3 = 0, $vararg_buffer30 = 0, $vararg_buffer33 = 0, $vararg_buffer36 = 0, $vararg_buffer39 = 0, $vararg_buffer42 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $vararg_buffer42 = sp + 136 | 0;
 $vararg_buffer39 = sp + 128 | 0;
 $vararg_buffer36 = sp + 120 | 0;
 $vararg_buffer33 = sp + 112 | 0;
 $vararg_buffer30 = sp + 104 | 0;
 $vararg_buffer27 = sp + 96 | 0;
 $vararg_buffer24 = sp + 88 | 0;
 $vararg_buffer21 = sp + 80 | 0;
 $vararg_buffer17 = sp + 64 | 0;
 $vararg_buffer13 = sp + 48 | 0;
 $vararg_buffer9 = sp + 32 | 0;
 $vararg_buffer6 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $3 = HEAP32[(HEAP32[$this + 48 >> 2] | 0) + 8 >> 2] | 0;
 $7 = HEAP32[(HEAP32[$this + 52 >> 2] | 0) + 8 >> 2] | 0;
 __Z5b2LogPKcz(85216, sp);
 HEAP32[$vararg_buffer1 >> 2] = $3;
 __Z5b2LogPKcz(86496, $vararg_buffer1);
 HEAP32[$vararg_buffer3 >> 2] = $7;
 __Z5b2LogPKcz(86528, $vararg_buffer3);
 HEAP32[$vararg_buffer6 >> 2] = HEAPU8[$this + 61 >> 0];
 __Z5b2LogPKcz(86560, $vararg_buffer6);
 $16 = +HEAPF32[$this + 72 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 68 >> 2];
 HEAP32[$vararg_buffer9 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer9 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr12 = $vararg_buffer9 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $16;
 HEAP32[$vararg_ptr12 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr12 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(86600, $vararg_buffer9);
 $22 = +HEAPF32[$this + 80 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 76 >> 2];
 HEAP32[$vararg_buffer13 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer13 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr16 = $vararg_buffer13 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $22;
 HEAP32[$vararg_ptr16 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr16 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(86648, $vararg_buffer13);
 $28 = +HEAPF32[$this + 88 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 84 >> 2];
 HEAP32[$vararg_buffer17 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer17 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr20 = $vararg_buffer17 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $28;
 HEAP32[$vararg_ptr20 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr20 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(86696, $vararg_buffer17);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 100 >> 2];
 HEAP32[$vararg_buffer21 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer21 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(86352, $vararg_buffer21);
 HEAP32[$vararg_buffer24 >> 2] = HEAPU8[$this + 136 >> 0];
 __Z5b2LogPKcz(85992, $vararg_buffer24);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 120 >> 2];
 HEAP32[$vararg_buffer27 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer27 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(85248, $vararg_buffer27);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 124 >> 2];
 HEAP32[$vararg_buffer30 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer30 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(85288, $vararg_buffer30);
 HEAP32[$vararg_buffer33 >> 2] = HEAPU8[$this + 137 >> 0];
 __Z5b2LogPKcz(86736, $vararg_buffer33);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 132 >> 2];
 HEAP32[$vararg_buffer36 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer36 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(86768, $vararg_buffer36);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 128 >> 2];
 HEAP32[$vararg_buffer39 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer39 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(85328, $vararg_buffer39);
 HEAP32[$vararg_buffer42 >> 2] = HEAP32[$this + 56 >> 2];
 __Z5b2LogPKcz(86896, $vararg_buffer42);
 STACKTOP = sp;
 return;
}

function _event_update() {
 var $11 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $53 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $event = 0, $event1 = 0, $x$i = 0, $y$i = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $x$i = sp + 100 | 0;
 $y$i = sp + 96 | 0;
 $event1 = sp + 48 | 0;
 $event = sp;
 if (!(_SDL_PollEvent($event | 0) | 0)) {
  STACKTOP = sp;
  return;
 }
 $2 = $event1 + 16 | 0;
 $3 = $event1 + 8 | 0;
 $4 = $event1 + 20 | 0;
 $5 = $event1 + 24 | 0;
 $6 = $event1 + 28 | 0;
 $7 = $event1 + 32 | 0;
 $8 = $event1 + 20 | 0;
 $9 = $event1 + 20 | 0;
 do {
  dest = $event1 + 0 | 0;
  src = $event + 0 | 0;
  stop = dest + 48 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  L6 : do switch (HEAP32[$event1 >> 2] | 0) {
  case 771:
   {
    if (_dlua_get_function(23896) | 0) {
     $18 = _dlua_get_lua_state() | 0;
     _lua_pushstring($18, $3) | 0;
     _call_lua_function($18, 1, 0);
    }
    break;
   }
  case 256:
   {
    _engine_stop();
    break;
   }
  case 1026:
   {
    $37 = HEAP8[$2 >> 0] | 0;
    if (($37 + -1 & 255) < 3) {
     $38 = HEAP32[$8 >> 2] | 0;
     $39 = HEAP32[$5 >> 2] | 0;
     if (_dlua_get_function(23824) | 0) {
      $41 = _dlua_get_lua_state() | 0;
      _lua_pushnumber($41, +($38 | 0));
      _lua_pushnumber($41, +($39 | 0));
      _lua_pushnumber($41, +($37 & 255));
      _call_lua_function($41, 3, 0);
     }
    }
    break;
   }
  case 1024:
   {
    $19 = HEAP32[$4 >> 2] | 0;
    $20 = HEAP32[$5 >> 2] | 0;
    $21 = HEAP32[$6 >> 2] | 0;
    $22 = HEAP32[$7 >> 2] | 0;
    if (_dlua_get_function(23856) | 0) {
     $24 = _dlua_get_lua_state() | 0;
     _lua_pushnumber($24, +($19 | 0));
     _lua_pushnumber($24, +($20 | 0));
     _lua_pushnumber($24, +($21 | 0));
     _lua_pushnumber($24, +($22 | 0));
     _call_lua_function($24, 4, 0);
    }
    break;
   }
  case 1027:
   {
    if (!(HEAP8[$2 >> 0] | 0)) {
     _SDL_GetMouseState($x$i | 0, $y$i | 0) | 0;
     $49 = (HEAP32[$9 >> 2] | 0) > 0 ? 4 : 5;
     $50 = HEAP32[$x$i >> 2] | 0;
     $51 = HEAP32[$y$i >> 2] | 0;
     if (_dlua_get_function(23840) | 0) {
      $53 = _dlua_get_lua_state() | 0;
      _lua_pushnumber($53, +($50 | 0));
      _lua_pushnumber($53, +($51 | 0));
      _lua_pushnumber($53, +($49 >>> 0));
      _call_lua_function($53, 3, 0);
     }
     $57 = HEAP32[$x$i >> 2] | 0;
     $58 = HEAP32[$y$i >> 2] | 0;
     if (_dlua_get_function(23824) | 0) {
      $60 = _dlua_get_lua_state() | 0;
      _lua_pushnumber($60, +($57 | 0));
      _lua_pushnumber($60, +($58 | 0));
      _lua_pushnumber($60, +($49 >>> 0));
      _call_lua_function($60, 3, 0);
     }
    }
    break;
   }
  case 1025:
   {
    $29 = HEAP8[$2 >> 0] | 0;
    if (($29 + -1 & 255) < 3) {
     $30 = HEAP32[$8 >> 2] | 0;
     $31 = HEAP32[$5 >> 2] | 0;
     if (_dlua_get_function(23840) | 0) {
      $33 = _dlua_get_lua_state() | 0;
      _lua_pushnumber($33, +($30 | 0));
      _lua_pushnumber($33, +($31 | 0));
      _lua_pushnumber($33, +($29 & 255));
      _call_lua_function($33, 3, 0);
     }
    }
    break;
   }
  case 768:
   {
    $14 = HEAP32[$2 >> 2] | 0;
    if (($14 | 0) == 1082) {
     _engine_toggle_update();
     break L6;
    } else if (($14 | 0) == 1083) {
     _engine_toggle_draw();
     break L6;
    } else if (($14 | 0) == 1085) {
     _display_toggle_debug_mode();
     break L6;
    } else if (($14 | 0) == 1084) {
     _dlua_reload_code() | 0;
     break L6;
    } else {
     if (!(_dlua_get_function(23912) | 0)) break L6;
     $16 = _dlua_get_lua_state() | 0;
     _push_keyname($16, $14);
     _call_lua_function($16, 1, 0);
     break L6;
    }
    break;
   }
  case 769:
   {
    $11 = HEAP32[$2 >> 2] | 0;
    if (_dlua_get_function(23960) | 0) {
     $13 = _dlua_get_lua_state() | 0;
     _push_keyname($13, $11);
     _call_lua_function($13, 1, 0);
    }
    break;
   }
  default:
   {}
  } while (0);
 } while ((_SDL_PollEvent($event | 0) | 0) != 0);
 STACKTOP = sp;
 return;
}

function _png_read_transform_info($png_ptr, $info_ptr) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 var $1 = 0, $10 = 0, $104 = 0, $105 = 0, $108 = 0, $109 = 0, $113 = 0, $115 = 0, $116 = 0, $119 = 0, $121 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $20 = 0, $26 = 0, $27 = 0, $31 = 0, $32 = 0, $4 = 0, $40 = 0, $47 = 0, $5 = 0, $54 = 0, $55 = 0, $59 = 0, $6 = 0, $63 = 0, $70 = 0, $72 = 0, $73 = 0, $78 = 0, $83 = 0, $86 = 0, $89 = 0, $90 = 0, $94 = 0, $95 = 0;
 $1 = HEAP32[$png_ptr + 216 >> 2] | 0;
 do if ($1 & 4096) {
  $4 = $info_ptr + 25 | 0;
  $5 = HEAP8[$4 >> 0] | 0;
  $6 = $5 & 255;
  $10 = (HEAP16[$png_ptr + 428 >> 1] | 0) == 0;
  if ($5 << 24 >> 24 == 3) {
   HEAP8[$4 >> 0] = $10 ? 2 : 6;
   HEAP8[$info_ptr + 24 >> 0] = 8;
   HEAP16[$info_ptr + 22 >> 1] = 0;
   if (HEAP32[$png_ptr + 416 >> 2] | 0) break;
   _png_error($png_ptr, 75096);
  }
  if (!($10 | ($1 & 33554432 | 0) == 0)) HEAP8[$4 >> 0] = $6 | 4;
  $20 = $info_ptr + 24 | 0;
  if ((HEAPU8[$20 >> 0] | 0) < 8) HEAP8[$20 >> 0] = 8;
  HEAP16[$info_ptr + 22 >> 1] = 0;
 } while (0);
 if ($1 & 128) {
  $26 = $info_ptr + 170 | 0;
  $27 = $png_ptr + 452 | 0;
  HEAP16[$26 + 0 >> 1] = HEAP16[$27 + 0 >> 1] | 0;
  HEAP16[$26 + 2 >> 1] = HEAP16[$27 + 2 >> 1] | 0;
  HEAP16[$26 + 4 >> 1] = HEAP16[$27 + 4 >> 1] | 0;
  HEAP16[$26 + 6 >> 1] = HEAP16[$27 + 6 >> 1] | 0;
  HEAP16[$26 + 8 >> 1] = HEAP16[$27 + 8 >> 1] | 0;
 }
 HEAP32[$info_ptr + 40 >> 2] = HEAP32[$png_ptr + 824 >> 2];
 $31 = $info_ptr + 24 | 0;
 $32 = HEAP8[$31 >> 0] | 0;
 if ($32 << 24 >> 24 == 16) {
  if (!($1 & 67108864)) $130 = 16; else {
   HEAP8[$31 >> 0] = 8;
   $130 = 8;
  }
  if (!($1 & 1024)) $59 = $130; else {
   HEAP8[$31 >> 0] = 8;
   $59 = 8;
  }
 } else $59 = $32;
 if ($1 & 16384) {
  $40 = $info_ptr + 25 | 0;
  HEAP8[$40 >> 0] = HEAPU8[$40 >> 0] | 2;
 }
 if ($1 & 6291456) {
  $47 = $info_ptr + 25 | 0;
  HEAP8[$47 >> 0] = HEAPU8[$47 >> 0] & 253;
 }
 if (!($1 & 64)) $63 = $59; else {
  $54 = $info_ptr + 25 | 0;
  $55 = HEAP8[$54 >> 0] | 0;
  if ($55 << 24 >> 24 == 6 | $55 << 24 >> 24 == 2) if ((HEAP32[$png_ptr + 612 >> 2] | 0) != 0 & $59 << 24 >> 24 == 8) {
   HEAP8[$54 >> 0] = 3;
   $63 = 8;
  } else $63 = $59; else $63 = $59;
 }
 if (($1 & 512 | 0) != 0 & $63 << 24 >> 24 == 8) if ((HEAP8[$info_ptr + 25 >> 0] | 0) == 3) $70 = 8; else {
  HEAP8[$31 >> 0] = 16;
  $70 = 16;
 } else $70 = $63;
 if (($1 & 4 | 0) != 0 & ($70 & 255) < 8) {
  HEAP8[$31 >> 0] = 8;
  $105 = 8;
 } else $105 = $70;
 $72 = $info_ptr + 25 | 0;
 $73 = HEAP8[$72 >> 0] | 0;
 do if ($73 << 24 >> 24 == 3) {
  HEAP8[$info_ptr + 29 >> 0] = 1;
  $90 = 1;
 } else {
  $78 = $info_ptr + 29 | 0;
  if (!($73 & 2)) {
   HEAP8[$78 >> 0] = 1;
   $90 = 1;
   break;
  } else {
   HEAP8[$78 >> 0] = 3;
   $90 = 3;
   break;
  }
 } while (0);
 if (!($1 & 262144)) $86 = $73; else {
  $83 = $73 & 251;
  HEAP8[$72 >> 0] = $83;
  HEAP16[$info_ptr + 22 >> 1] = 0;
  $86 = $83;
 }
 if (!($86 & 4)) $95 = $90; else {
  $89 = $90 + 1 << 24 >> 24;
  HEAP8[$info_ptr + 29 >> 0] = $89;
  $95 = $89;
 }
 if (!($1 & 32768)) $109 = $95; else if ($86 << 24 >> 24 == 0 | $86 << 24 >> 24 == 2) {
  $94 = $95 + 1 << 24 >> 24;
  HEAP8[$info_ptr + 29 >> 0] = $94;
  if (!($1 & 16777216)) $109 = $94; else {
   HEAP8[$72 >> 0] = $86 & 255 | 4;
   $109 = $94;
  }
 } else $109 = $95;
 if (!($1 & 1048576)) {
  $113 = $109;
  $115 = $105;
 } else {
  $104 = HEAP8[$png_ptr + 204 >> 0] | 0;
  if (($105 & 255) < ($104 & 255)) {
   HEAP8[$31 >> 0] = $104;
   $131 = $104;
  } else $131 = $105;
  $108 = HEAP8[$png_ptr + 205 >> 0] | 0;
  if (($109 & 255) < ($108 & 255)) {
   HEAP8[$info_ptr + 29 >> 0] = $108;
   $113 = $108;
   $115 = $131;
  } else {
   $113 = $109;
   $115 = $131;
  }
 }
 $116 = Math_imul($115 & 255, $113 & 255) | 0;
 HEAP8[$info_ptr + 30 >> 0] = $116;
 $119 = $116 & 255;
 $121 = HEAP32[$info_ptr >> 2] | 0;
 if ($119 >>> 0 > 7) {
  $128 = Math_imul($119 >>> 3, $121) | 0;
  $127 = $info_ptr + 12 | 0;
  HEAP32[$127 >> 2] = $128;
  $129 = $png_ptr + 404 | 0;
  HEAP32[$129 >> 2] = $128;
  return;
 } else {
  $128 = ((Math_imul($119, $121) | 0) + 7 | 0) >>> 3;
  $127 = $info_ptr + 12 | 0;
  HEAP32[$127 >> 2] = $128;
  $129 = $png_ptr + 404 | 0;
  HEAP32[$129 >> 2] = $128;
  return;
 }
}

function _luaV_equalobj($L, $t1, $t2) {
 $L = $L | 0;
 $t1 = $t1 | 0;
 $t2 = $t2 | 0;
 var $$0 = 0, $1 = 0, $113 = 0, $115 = 0, $117 = 0, $122 = 0, $123 = 0, $2 = 0, $3 = 0, $4 = 0, $48 = 0, $49 = 0, $53 = 0, $63 = 0, $66 = 0, $67 = 0, $7 = 0, $78 = 0, $79 = 0, $83 = 0, $93 = 0, $96 = 0, $97 = 0, $storemerge1$i = 0.0, $storemerge1$i2 = 0.0, $tm$0 = 0, $tm$011 = 0, $x$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $x$i1 = sp;
 $1 = HEAP32[$t1 + 4 >> 2] | 0;
 $2 = $1 & 63;
 $3 = $t2 + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 L1 : do if (($2 | 0) == ($4 & 63 | 0)) {
  L13 : do switch ($2 | 0) {
  case 3:
   {
    $$0 = +HEAPF32[$t1 >> 2] == +HEAPF32[$t2 >> 2] & 1;
    break L1;
    break;
   }
  case 22:
   {
    $$0 = (HEAP32[$t1 >> 2] | 0) == (HEAP32[$t2 >> 2] | 0) & 1;
    break L1;
    break;
   }
  case 19:
   {
    $$0 = (HEAP32[$t1 >> 2] | 0) == (HEAP32[$t2 >> 2] | 0) & 1;
    break L1;
    break;
   }
  case 0:
   {
    $$0 = 1;
    break L1;
    break;
   }
  case 1:
   {
    $$0 = (HEAP32[$t1 >> 2] | 0) == (HEAP32[$t2 >> 2] | 0) & 1;
    break L1;
    break;
   }
  case 4:
   {
    $$0 = (HEAP32[$t1 >> 2] | 0) == (HEAP32[$t2 >> 2] | 0) & 1;
    break L1;
    break;
   }
  case 5:
   {
    $78 = HEAP32[$t1 >> 2] | 0;
    $79 = HEAP32[$t2 >> 2] | 0;
    if (($78 | 0) == ($79 | 0)) {
     $$0 = 1;
     break L1;
    }
    if (!$L) {
     $$0 = 0;
     break L1;
    }
    $83 = HEAP32[$78 + 24 >> 2] | 0;
    if (!$83) $96 = $79; else if (!(HEAP8[$83 + 6 >> 0] & 32)) {
     $93 = _luaT_gettm($83, 5, HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 156 >> 2] | 0) | 0;
     if ($93) {
      $tm$011 = $93;
      break L13;
     }
     $96 = HEAP32[$t2 >> 2] | 0;
    } else $96 = $79;
    $97 = HEAP32[$96 + 24 >> 2] | 0;
    if (!$97) {
     $$0 = 0;
     break L1;
    }
    if (HEAP8[$97 + 6 >> 0] & 32) {
     $$0 = 0;
     break L1;
    }
    $tm$0 = _luaT_gettm($97, 5, HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 156 >> 2] | 0) | 0;
    label = 37;
    break;
   }
  case 20:
   {
    $$0 = _luaS_eqlngstr(HEAP32[$t1 >> 2] | 0, HEAP32[$t2 >> 2] | 0) | 0;
    break L1;
    break;
   }
  case 2:
   {
    $$0 = (HEAP32[$t1 >> 2] | 0) == (HEAP32[$t2 >> 2] | 0) & 1;
    break L1;
    break;
   }
  case 7:
   {
    $48 = HEAP32[$t1 >> 2] | 0;
    $49 = HEAP32[$t2 >> 2] | 0;
    if (($48 | 0) == ($49 | 0)) {
     $$0 = 1;
     break L1;
    }
    if (!$L) {
     $$0 = 0;
     break L1;
    }
    $53 = HEAP32[$48 + 8 >> 2] | 0;
    if (!$53) $66 = $49; else if (!(HEAP8[$53 + 6 >> 0] & 32)) {
     $63 = _luaT_gettm($53, 5, HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 156 >> 2] | 0) | 0;
     if ($63) {
      $tm$011 = $63;
      break L13;
     }
     $66 = HEAP32[$t2 >> 2] | 0;
    } else $66 = $49;
    $67 = HEAP32[$66 + 8 >> 2] | 0;
    if (!$67) {
     $$0 = 0;
     break L1;
    }
    if (HEAP8[$67 + 6 >> 0] & 32) {
     $$0 = 0;
     break L1;
    }
    $tm$0 = _luaT_gettm($67, 5, HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 156 >> 2] | 0) | 0;
    label = 37;
    break;
   }
  default:
   {
    $$0 = (HEAP32[$t1 >> 2] | 0) == (HEAP32[$t2 >> 2] | 0) & 1;
    break L1;
   }
  } while (0);
  if ((label | 0) == 37) if (!$tm$0) {
   $$0 = 0;
   break;
  } else $tm$011 = $tm$0;
  $113 = $L + 8 | 0;
  _luaT_callTM($L, $tm$011, $t1, $t2, HEAP32[$113 >> 2] | 0, 1);
  $115 = HEAP32[$113 >> 2] | 0;
  $117 = HEAP32[$115 + 4 >> 2] | 0;
  if (!$117) $122 = 0; else if (($117 | 0) == 1) $122 = (HEAP32[$115 >> 2] | 0) != 0; else $122 = 1;
  $$0 = $122 & 1;
 } else {
  $7 = $1 & 15;
  if (($7 | 0) == ($4 & 15 | 0) & ($7 | 0) == 3) {
   if (($1 | 0) == 3) {
    $123 = $4;
    $storemerge1$i = +HEAPF32[$t1 >> 2];
   } else if (($1 | 0) == 19) {
    HEAPF32[$x$i1 >> 2] = +(HEAP32[$t1 >> 2] | 0);
    $123 = HEAP32[$3 >> 2] | 0;
    $storemerge1$i = +HEAPF32[$x$i1 >> 2];
   } else {
    $123 = $4;
    $storemerge1$i = 0.0;
   }
   if (($123 | 0) == 3) $storemerge1$i2 = +HEAPF32[$t2 >> 2]; else if (($123 | 0) == 19) {
    HEAPF32[$x$i1 >> 2] = +(HEAP32[$t2 >> 2] | 0);
    $storemerge1$i2 = +HEAPF32[$x$i1 >> 2];
   } else $storemerge1$i2 = 0.0;
   $$0 = $storemerge1$i == $storemerge1$i2 & 1;
  } else $$0 = 0;
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _mz_zip_reader_file_stat($pZip, $file_index, $pStat) {
 $pZip = $pZip | 0;
 $file_index = $file_index | 0;
 $pStat = $pStat | 0;
 var $$0 = 0, $$sum39 = 0, $12 = 0, $13 = 0, $133 = 0, $14 = 0, $156 = 0, $2 = 0, $208 = 0, $212 = 0, $215 = 0, $219 = 0, $221 = 0, $232 = 0, $234 = 0, $62 = 0, $65 = 0, $67 = 0, $70 = 0, $73 = 0, $75 = 0, $tm$i = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $tm$i = sp;
 if (!$pZip) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $2 = HEAP32[$pZip + 56 >> 2] | 0;
 if (!$2) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ((HEAP32[$pZip + 16 >> 2] | 0) >>> 0 <= $file_index >>> 0) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ((HEAP32[$pZip + 20 >> 2] | 0) != 1) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $12 = (HEAP32[$2 + 16 >> 2] | 0) + ($file_index << 2) | 0;
 $13 = HEAP32[$12 >> 2] | 0;
 $14 = HEAP32[$2 >> 2] | 0;
 if (($14 + $13 | 0) == 0 | ($pStat | 0) == 0) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[$pStat >> 2] = $file_index;
 HEAP32[$pStat + 4 >> 2] = HEAP32[$12 >> 2];
 HEAP16[$pStat + 8 >> 1] = (HEAPU8[$14 + ($13 + 5) >> 0] | 0) << 8 | (HEAPU8[$14 + ($13 + 4) >> 0] | 0);
 HEAP16[$pStat + 10 >> 1] = (HEAPU8[$14 + ($13 + 7) >> 0] | 0) << 8 | (HEAPU8[$14 + ($13 + 6) >> 0] | 0);
 HEAP16[$pStat + 12 >> 1] = (HEAPU8[$14 + ($13 + 9) >> 0] | 0) << 8 | (HEAPU8[$14 + ($13 + 8) >> 0] | 0);
 HEAP16[$pStat + 14 >> 1] = (HEAPU8[$14 + ($13 + 11) >> 0] | 0) << 8 | (HEAPU8[$14 + ($13 + 10) >> 0] | 0);
 $62 = HEAPU8[$14 + ($13 + 12) >> 0] | 0;
 $65 = HEAPU8[$14 + ($13 + 13) >> 0] | 0;
 $67 = $65 << 8 | $62;
 $70 = HEAPU8[$14 + ($13 + 14) >> 0] | 0;
 $73 = HEAPU8[$14 + ($13 + 15) >> 0] | 0;
 $75 = $73 << 8 | $70;
 dest = $tm$i + 0 | 0;
 stop = dest + 44 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$tm$i + 32 >> 2] = -1;
 HEAP32[$tm$i + 20 >> 2] = ($73 >>> 1) + 80;
 HEAP32[$tm$i + 16 >> 2] = ($75 >>> 5 & 15) + -1;
 HEAP32[$tm$i + 12 >> 2] = $70 & 31;
 HEAP32[$tm$i + 8 >> 2] = $65 >>> 3;
 HEAP32[$tm$i + 4 >> 2] = $67 >>> 5 & 63;
 HEAP32[$tm$i >> 2] = $62 << 1 & 62;
 HEAP32[$pStat + 16 >> 2] = _mktime($tm$i | 0) | 0;
 HEAP32[$pStat + 20 >> 2] = (HEAPU8[$14 + ($13 + 17) >> 0] | 0) << 8 | (HEAPU8[$14 + ($13 + 16) >> 0] | 0) | (HEAPU8[$14 + ($13 + 18) >> 0] | 0) << 16 | (HEAPU8[$14 + ($13 + 19) >> 0] | 0) << 24;
 $133 = $pStat + 24 | 0;
 HEAP32[$133 >> 2] = (HEAPU8[$14 + ($13 + 21) >> 0] | 0) << 8 | (HEAPU8[$14 + ($13 + 20) >> 0] | 0) | (HEAPU8[$14 + ($13 + 22) >> 0] | 0) << 16 | (HEAPU8[$14 + ($13 + 23) >> 0] | 0) << 24;
 HEAP32[$133 + 4 >> 2] = 0;
 $156 = $pStat + 32 | 0;
 HEAP32[$156 >> 2] = (HEAPU8[$14 + ($13 + 25) >> 0] | 0) << 8 | (HEAPU8[$14 + ($13 + 24) >> 0] | 0) | (HEAPU8[$14 + ($13 + 26) >> 0] | 0) << 16 | (HEAPU8[$14 + ($13 + 27) >> 0] | 0) << 24;
 HEAP32[$156 + 4 >> 2] = 0;
 HEAP16[$pStat + 40 >> 1] = (HEAPU8[$14 + ($13 + 37) >> 0] | 0) << 8 | (HEAPU8[$14 + ($13 + 36) >> 0] | 0);
 HEAP32[$pStat + 44 >> 2] = (HEAPU8[$14 + ($13 + 39) >> 0] | 0) << 8 | (HEAPU8[$14 + ($13 + 38) >> 0] | 0) | (HEAPU8[$14 + ($13 + 40) >> 0] | 0) << 16 | (HEAPU8[$14 + ($13 + 41) >> 0] | 0) << 24;
 $208 = $pStat + 48 | 0;
 HEAP32[$208 >> 2] = (HEAPU8[$14 + ($13 + 43) >> 0] | 0) << 8 | (HEAPU8[$14 + ($13 + 42) >> 0] | 0) | (HEAPU8[$14 + ($13 + 44) >> 0] | 0) << 16 | (HEAPU8[$14 + ($13 + 45) >> 0] | 0) << 24;
 HEAP32[$208 + 4 >> 2] = 0;
 $212 = $14 + ($13 + 28) | 0;
 $215 = $14 + ($13 + 29) | 0;
 $219 = (HEAPU8[$215 >> 0] | 0) << 8 | (HEAPU8[$212 >> 0] | 0);
 $221 = $219 >>> 0 < 259 ? $219 : 259;
 $$sum39 = $13 + 46 | 0;
 _memcpy($pStat + 60 | 0, $14 + $$sum39 | 0, $221 | 0) | 0;
 HEAP8[$pStat + $221 + 60 >> 0] = 0;
 $232 = (HEAPU8[$14 + ($13 + 33) >> 0] | 0) << 8 | (HEAPU8[$14 + ($13 + 32) >> 0] | 0);
 $234 = $232 >>> 0 < 255 ? $232 : 255;
 HEAP32[$pStat + 56 >> 2] = $234;
 _memcpy($pStat + 320 | 0, $14 + ($$sum39 + ((HEAPU8[$215 >> 0] | 0) << 8 | (HEAPU8[$212 >> 0] | 0)) + ((HEAPU8[$14 + ($13 + 31) >> 0] | 0) << 8 | (HEAPU8[$14 + ($13 + 30) >> 0] | 0))) | 0, $234 | 0) | 0;
 HEAP8[$pStat + $234 + 320 >> 0] = 0;
 $$0 = 1;
 STACKTOP = sp;
 return $$0 | 0;
}

function _display_flip() {
 var $0 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $18 = 0.0, $2 = 0, $20 = 0.0, $22 = 0.0, $23 = 0, $25 = 0, $3 = 0, $31 = 0, $35 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $45 = 0, $5 = 0, $50 = 0, $53 = 0.0, $56 = 0.0, $64 = 0, $68 = 0, $7 = 0, $74 = 0, $75 = 0, $77 = 0, $83 = 0, $85 = 0, $9 = 0, $93 = 0, $95 = 0, $vararg_buffer = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $vararg_buffer5 = sp + 24 | 0;
 $vararg_buffer = sp;
 $0 = _glGetError() | 0;
 if ($0) {
  $2 = _getGLError($0) | 0;
  HEAP32[$vararg_buffer >> 2] = 18224;
  HEAP32[$vararg_buffer + 4 >> 2] = 323;
  HEAP32[$vararg_buffer + 8 >> 2] = 18656;
  HEAP32[$vararg_buffer + 12 >> 2] = $2;
  HEAP32[$vararg_buffer + 16 >> 2] = 62584;
  _log_internal(3, 19424, 18624, $vararg_buffer);
  _exit(1);
 }
 $3 = HEAP32[4529] | 0;
 $4 = HEAP32[4530] | 0;
 $5 = HEAP32[4531] | 0;
 $7 = $5 & 255;
 $9 = ($5 & 65535) >>> 8 & 255;
 $11 = $5 >>> 16 & 255;
 $13 = $5 >>> 24 & 255;
 $14 = HEAP8[18140] | 0;
 $15 = HEAP32[4532] | 0;
 $16 = +HEAPF32[$15 >> 2];
 $18 = +HEAPF32[$15 + 4 >> 2];
 $20 = +HEAPF32[$15 + 8 >> 2];
 $22 = +HEAPF32[$15 + 12 >> 2];
 $23 = HEAP32[4522] | 0;
 if (!$23) ___assert_fail(22256, 18224, 876, 19264);
 HEAP32[4530] = $23;
 $25 = HEAP32[4527] | 0;
 if (!$25) ___assert_fail(23264, 19880, 113, 19312);
 HEAP32[$23 + 60 >> 2] = $25;
 HEAP32[$23 + 76 >> 2] = HEAP32[4528];
 HEAP32[$23 + 80 >> 2] = $3;
 $31 = HEAP32[4525] | 0;
 if (($3 | 0) == ($31 | 0)) $39 = $23; else {
  _buffer_check_empty($23);
  HEAP32[4529] = $31;
  if (!$31) _glBindTexture(3553, 0); else _surface_draw_from($31);
  $35 = HEAP32[4530] | 0;
  HEAP32[$35 + 80 >> 2] = HEAP32[4529];
  $39 = $35;
 }
 $37 = HEAP32[4526] | 0;
 if (!$37) ___assert_fail(22712, 18224, 837, 19240);
 _buffer_check_empty($39);
 HEAP32[4527] = $37;
 $40 = HEAP32[4530] | 0;
 if (!$40) ___assert_fail(23160, 19880, 112, 19312);
 HEAP32[$40 + 60 >> 2] = $37;
 HEAP32[4531] = -1;
 _buffer_check_empty($40);
 _camera_reset(HEAP32[4532] | 0);
 $45 = HEAP32[4528] | 0;
 _camera_update_matrix(HEAP32[4532] | 0, HEAP32[$45 + 4 >> 2] | 0, HEAP32[$45 + 8 >> 2] | 0);
 $50 = HEAP32[4525] | 0;
 $53 = +((HEAP32[$50 + 4 >> 2] | 0) >>> 0);
 $56 = +((HEAP32[$50 + 8 >> 2] | 0) >>> 0);
 HEAP8[18140] = 0;
 _glBindFramebuffer(36160, 0);
 _glClearColor(0.0, 0.0, 0.0, 1.0);
 _glClear(16384);
 _display_draw_surface(0.0, 0.0, $53, 0.0, $53, $56, 0.0, $56, $53, $56, $53, 0.0);
 _display_draw_surface(0.0, 0.0, $53, $56, 0.0, $56, 0.0, $56, $53, 0.0, 0.0, 0.0);
 _buffer_check_empty(HEAP32[4530] | 0);
 _SDL_GL_SwapWindow(HEAP32[4523] | 0);
 _surface_draw_on(HEAP32[4528] | 0);
 if ((HEAP32[4529] | 0) == ($3 | 0)) $74 = $3; else {
  _buffer_check_empty(HEAP32[4530] | 0);
  HEAP32[4529] = $3;
  if (!$3) _glBindTexture(3553, 0); else _surface_draw_from($3);
  $64 = HEAP32[4529] | 0;
  HEAP32[(HEAP32[4530] | 0) + 80 >> 2] = $64;
  $74 = $64;
 }
 if (!$4) ___assert_fail(22256, 18224, 876, 19264);
 HEAP32[4530] = $4;
 $68 = HEAP32[4527] | 0;
 if (!$68) ___assert_fail(23264, 19880, 113, 19312);
 HEAP32[$4 + 60 >> 2] = $68;
 HEAP32[$4 + 76 >> 2] = HEAP32[4528];
 HEAP32[$4 + 80 >> 2] = $74;
 HEAP8[18140] = $14;
 HEAP8[18124] = $7;
 HEAP8[18125] = $9;
 HEAP8[18126] = $11;
 HEAP8[18127] = $13;
 _buffer_check_empty($4);
 $75 = HEAP32[4532] | 0;
 HEAPF32[$75 + 12 >> 2] = $22;
 $77 = HEAP32[4528] | 0;
 _camera_update_matrix($75, HEAP32[$77 + 4 >> 2] | 0, HEAP32[$77 + 8 >> 2] | 0);
 _buffer_check_empty(HEAP32[4530] | 0);
 $83 = HEAP32[4532] | 0;
 HEAPF32[$83 >> 2] = $16;
 HEAPF32[$83 + 4 >> 2] = $18;
 $85 = HEAP32[4528] | 0;
 _camera_update_matrix($83, HEAP32[$85 + 4 >> 2] | 0, HEAP32[$85 + 8 >> 2] | 0);
 _buffer_check_empty(HEAP32[4530] | 0);
 HEAPF32[(HEAP32[4532] | 0) + 8 >> 2] = $20;
 $93 = _glGetError() | 0;
 if (!$93) {
  STACKTOP = sp;
  return;
 } else {
  $95 = _getGLError($93) | 0;
  HEAP32[$vararg_buffer5 >> 2] = 18224;
  HEAP32[$vararg_buffer5 + 4 >> 2] = 366;
  HEAP32[$vararg_buffer5 + 8 >> 2] = 18656;
  HEAP32[$vararg_buffer5 + 12 >> 2] = $95;
  HEAP32[$vararg_buffer5 + 16 >> 2] = 62584;
  _log_internal(3, 19424, 18624, $vararg_buffer5);
  _exit(1);
 }
}

function _luaU_dump($L, $f, $w, $data, $strip) {
 $L = $L | 0;
 $f = $f | 0;
 $w = $w | 0;
 $data = $data | 0;
 $strip = $strip | 0;
 var $$ph14$i = 0, $$ph15$i = 0, $$ph16$i = 0, $$ph17$i = 0, $0 = 0, $1 = 0, $11 = 0, $16 = 0, $21 = 0, $22 = 0, $27 = 0, $3 = 0, $32 = 0, $33 = 0, $38 = 0, $4 = 0, $43 = 0, $44 = 0, $49 = 0, $54 = 0, $58 = 0, $6 = 0, $64 = 0, $65 = 0, $66 = 0, $D = 0, $x$i = 0, $x$i$i = 0, $x$i1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $x$i = sp + 20 | 0;
 $x$i1$i = sp + 25 | 0;
 $x$i$i = sp + 24 | 0;
 $D = sp;
 HEAP32[$D >> 2] = $L;
 $0 = $D + 4 | 0;
 HEAP32[$0 >> 2] = $w;
 $1 = $D + 8 | 0;
 HEAP32[$1 >> 2] = $data;
 HEAP32[$D + 12 >> 2] = $strip;
 $3 = $D + 16 | 0;
 $4 = FUNCTION_TABLE_iiiii[$w & 7]($L, 63296, 4, $data) | 0;
 HEAP32[$3 >> 2] = $4;
 HEAP8[$x$i$i >> 0] = 83;
 do if (!$4) {
  $6 = FUNCTION_TABLE_iiiii[$w & 7]($L, $x$i$i, 1, $data) | 0;
  HEAP32[$3 >> 2] = $6;
  HEAP8[$x$i1$i >> 0] = 0;
  if (!$6) {
   $11 = FUNCTION_TABLE_iiiii[HEAP32[$0 >> 2] & 7](HEAP32[$D >> 2] | 0, $x$i1$i, 1, HEAP32[$1 >> 2] | 0) | 0;
   HEAP32[$3 >> 2] = $11;
   if (!$11) {
    $16 = FUNCTION_TABLE_iiiii[HEAP32[$0 >> 2] & 7](HEAP32[$D >> 2] | 0, 63408, 6, HEAP32[$1 >> 2] | 0) | 0;
    HEAP32[$3 >> 2] = $16;
    HEAP8[$x$i >> 0] = 4;
    if (!$16) {
     $21 = FUNCTION_TABLE_iiiii[HEAP32[$0 >> 2] & 7](HEAP32[$D >> 2] | 0, $x$i, 1, HEAP32[$1 >> 2] | 0) | 0;
     HEAP32[$3 >> 2] = $21;
     $22 = $21;
     label = 8;
     break;
    } else {
     HEAP8[$x$i >> 0] = 4;
     $$ph15$i = $16;
     label = 9;
     break;
    }
   } else {
    $$ph14$i = $11;
    label = 4;
   }
  } else {
   $$ph14$i = $6;
   label = 4;
  }
 } else {
  $$ph14$i = $4;
  label = 4;
 } while (0);
 if ((label | 0) == 4) {
  HEAP8[$x$i >> 0] = 4;
  $22 = $$ph14$i;
  label = 8;
 }
 do if ((label | 0) == 8) {
  HEAP8[$x$i >> 0] = 4;
  if (!$22) {
   $27 = FUNCTION_TABLE_iiiii[HEAP32[$0 >> 2] & 7](HEAP32[$D >> 2] | 0, $x$i, 1, HEAP32[$1 >> 2] | 0) | 0;
   HEAP32[$3 >> 2] = $27;
   HEAP8[$x$i >> 0] = 4;
   if (!$27) {
    $32 = FUNCTION_TABLE_iiiii[HEAP32[$0 >> 2] & 7](HEAP32[$D >> 2] | 0, $x$i, 1, HEAP32[$1 >> 2] | 0) | 0;
    HEAP32[$3 >> 2] = $32;
    $33 = $32;
    label = 13;
    break;
   } else {
    HEAP8[$x$i >> 0] = 4;
    $$ph16$i = $27;
    label = 14;
    break;
   }
  } else {
   $$ph15$i = $22;
   label = 9;
  }
 } while (0);
 if ((label | 0) == 9) {
  HEAP8[$x$i >> 0] = 4;
  $33 = $$ph15$i;
  label = 13;
 }
 do if ((label | 0) == 13) {
  HEAP8[$x$i >> 0] = 4;
  if (!$33) {
   $38 = FUNCTION_TABLE_iiiii[HEAP32[$0 >> 2] & 7](HEAP32[$D >> 2] | 0, $x$i, 1, HEAP32[$1 >> 2] | 0) | 0;
   HEAP32[$3 >> 2] = $38;
   HEAP8[$x$i >> 0] = 4;
   if (!$38) {
    $43 = FUNCTION_TABLE_iiiii[HEAP32[$0 >> 2] & 7](HEAP32[$D >> 2] | 0, $x$i, 1, HEAP32[$1 >> 2] | 0) | 0;
    HEAP32[$3 >> 2] = $43;
    $44 = $43;
    label = 18;
    break;
   } else {
    HEAP32[$x$i >> 2] = 22136;
    $$ph17$i = $x$i;
    $65 = $38;
    label = 19;
    break;
   }
  } else {
   $$ph16$i = $33;
   label = 14;
  }
 } while (0);
 if ((label | 0) == 14) {
  HEAP8[$x$i >> 0] = 4;
  $44 = $$ph16$i;
  label = 18;
 }
 if ((label | 0) == 18) {
  HEAP32[$x$i >> 2] = 22136;
  if (!$44) {
   $49 = FUNCTION_TABLE_iiiii[HEAP32[$0 >> 2] & 7](HEAP32[$D >> 2] | 0, $x$i, 4, HEAP32[$1 >> 2] | 0) | 0;
   HEAP32[$3 >> 2] = $49;
   HEAPF32[$x$i >> 2] = 370.5;
   if (!$49) {
    $54 = FUNCTION_TABLE_iiiii[HEAP32[$0 >> 2] & 7](HEAP32[$D >> 2] | 0, $x$i, 4, HEAP32[$1 >> 2] | 0) | 0;
    HEAP32[$3 >> 2] = $54;
    $58 = $54;
    $66 = $x$i;
   } else {
    $58 = $49;
    $66 = $x$i;
   }
  } else {
   $$ph17$i = $x$i;
   $65 = $44;
   label = 19;
  }
 }
 if ((label | 0) == 19) {
  HEAPF32[$x$i >> 2] = 370.5;
  $58 = $65;
  $66 = $x$i;
 }
 HEAP8[$x$i >> 0] = HEAP32[$f + 12 >> 2];
 if ($58) {
  _DumpFunction($f, 0, $D);
  $64 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $64 | 0;
 }
 HEAP32[$3 >> 2] = FUNCTION_TABLE_iiiii[HEAP32[$0 >> 2] & 7](HEAP32[$D >> 2] | 0, $x$i, 1, HEAP32[$1 >> 2] | 0) | 0;
 _DumpFunction($f, 0, $D);
 $64 = HEAP32[$3 >> 2] | 0;
 STACKTOP = sp;
 return $64 | 0;
}

function _luaO_str2num($s, $o) {
 $s = $s | 0;
 $o = $o | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i2$i = 0, $$lcssa$i = 0, $$lcssa1$i = 0, $$lcssa6 = 0, $$lcssa7 = 0, $$ph$i = 0, $$ph$i$pn = 0, $$pre$i = 0, $0 = 0, $102 = 0, $103 = 0, $12 = 0, $20 = 0, $21 = 0, $22 = 0, $29 = 0, $30 = 0, $38 = 0, $45 = 0, $46 = 0, $55 = 0, $56 = 0, $57 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $77 = 0, $8 = 0, $9 = 0, $91 = 0.0, $92 = 0, $94 = 0, $a$011$i = 0, $a$2$ph$i = 0, $e$0 = 0, $empty$2$ph$i = 0, $endptr$i = 0, $storemerge$i = 0, $storemerge110$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $endptr$i = sp;
 $storemerge$i = $s;
 while (1) {
  $0 = HEAP8[$storemerge$i >> 0] | 0;
  $7 = $storemerge$i + 1 | 0;
  if (!(HEAP8[($0 & 255) + 65881 >> 0] & 8)) break; else $storemerge$i = $7;
 }
 if ($0 << 24 >> 24 == 43) {
  $$0$i$i = 0;
  $9 = $7;
 } else if ($0 << 24 >> 24 == 45) {
  $$0$i$i = 1;
  $9 = $7;
 } else {
  $$0$i$i = 0;
  $9 = $storemerge$i;
 }
 $8 = HEAP8[$9 >> 0] | 0;
 if ($8 << 24 >> 24 == 48) {
  $12 = HEAP8[$9 + 1 >> 0] | 0;
  if ($12 << 24 >> 24 == 88 | $12 << 24 >> 24 == 120) {
   $29 = $9 + 2 | 0;
   $30 = HEAP8[$29 >> 0] | 0;
   if (!(HEAP8[($30 & 255) + 65881 >> 0] & 16)) {
    $$ph$i = $29;
    $38 = $30;
    $a$2$ph$i = 0;
    $empty$2$ph$i = 1;
   } else {
    $46 = $30;
    $a$011$i = 0;
    $storemerge110$i = $29;
    while (1) {
     $45 = $46 << 24 >> 24;
     if (!(HEAP8[$45 + 65881 >> 0] & 2)) $$0$i2$i = ($45 | 32) + -87 | 0; else $$0$i2$i = $45 + -48 | 0;
     $55 = $$0$i2$i + ($a$011$i << 4) | 0;
     $56 = $storemerge110$i + 1 | 0;
     $57 = HEAP8[$56 >> 0] | 0;
     if (!(HEAP8[($57 & 255) + 65881 >> 0] & 16)) {
      $$ph$i = $56;
      $38 = $57;
      $a$2$ph$i = $55;
      $empty$2$ph$i = 0;
      break;
     } else {
      $46 = $57;
      $a$011$i = $55;
      $storemerge110$i = $56;
     }
    }
   }
  } else label = 8;
 } else label = 8;
 if ((label | 0) == 8) if (!(HEAP8[($8 & 255) + 65881 >> 0] & 2)) {
  $$ph$i = $9;
  $38 = $8;
  $a$2$ph$i = 0;
  $empty$2$ph$i = 1;
 } else {
  $20 = ($8 << 24 >> 24) + -48 | 0;
  $21 = $9 + 1 | 0;
  $22 = HEAP8[$21 >> 0] | 0;
  if (!(HEAP8[($22 & 255) + 65881 >> 0] & 2)) {
   $$ph$i = $21;
   $38 = $22;
   $a$2$ph$i = $20;
   $empty$2$ph$i = 0;
  } else {
   $64 = $20;
   $66 = $22;
   $69 = $21;
   while (1) {
    $67 = ($64 * 10 | 0) + -48 + ($66 << 24 >> 24) | 0;
    $68 = $69 + 1 | 0;
    $70 = HEAP8[$68 >> 0] | 0;
    if (!(HEAP8[($70 & 255) + 65881 >> 0] & 2)) {
     $$ph$i = $68;
     $38 = $70;
     $a$2$ph$i = $67;
     $empty$2$ph$i = 0;
     break;
    } else {
     $64 = $67;
     $66 = $70;
     $69 = $68;
    }
   }
  }
 }
 if (!(HEAP8[($38 & 255) + 65881 >> 0] & 8)) {
  $$lcssa6 = $38;
  $$lcssa7 = $$ph$i;
 } else {
  $$ph$i$pn = $$ph$i;
  while (1) {
   $77 = $$ph$i$pn + 1 | 0;
   $$pre$i = HEAP8[$77 >> 0] | 0;
   if (!(HEAP8[($$pre$i & 255) + 65881 >> 0] & 8)) {
    $$lcssa6 = $$pre$i;
    $$lcssa7 = $77;
    break;
   } else $$ph$i$pn = $77;
  }
 }
 do if ($$lcssa6 << 24 >> 24 != 0 | ($empty$2$ph$i | 0) != 0 | ($$lcssa7 | 0) == 0) {
  if (_strpbrk($s, 59560) | 0) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $91 = +_strtof($s, $endptr$i);
  $92 = HEAP32[$endptr$i >> 2] | 0;
  if (($92 | 0) == ($s | 0)) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $94 = HEAP8[$92 >> 0] | 0;
  if (!(HEAP8[($94 & 255) + 65881 >> 0] & 8)) {
   $$lcssa$i = $92;
   $$lcssa1$i = $94;
  } else {
   $102 = $92;
   do {
    $102 = $102 + 1 | 0;
    $103 = HEAP8[$102 >> 0] | 0;
   } while ((HEAP8[($103 & 255) + 65881 >> 0] & 8) != 0);
   HEAP32[$endptr$i >> 2] = $102;
   $$lcssa$i = $102;
   $$lcssa1$i = $103;
  }
  if (($$lcssa$i | 0) == 0 | $$lcssa1$i << 24 >> 24 != 0) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else {
   HEAPF32[$o >> 2] = $91;
   HEAP32[$o + 4 >> 2] = 3;
   $e$0 = $$lcssa$i;
   break;
  }
 } else {
  HEAP32[$o >> 2] = ($$0$i$i | 0) != 0 ? 0 - $a$2$ph$i | 0 : $a$2$ph$i;
  HEAP32[$o + 4 >> 2] = 19;
  $e$0 = $$lcssa7;
 } while (0);
 $$0 = 1 - $s + $e$0 | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _luaL_gsub($L, $s, $p, $r) {
 $L = $L | 0;
 $s = $s | 0;
 $p = $p | 0;
 $r = $r | 0;
 var $$$i = 0, $$$i11 = 0, $$$i4 = 0, $$0$lcssa = 0, $$015 = 0, $$pre = 0, $$pre16 = 0, $0 = 0, $1 = 0, $10 = 0, $12 = 0, $13 = 0, $15 = 0, $2 = 0, $22 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $38 = 0, $4 = 0, $45 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $58 = 0, $60 = 0, $61 = 0, $63 = 0, $7 = 0, $70 = 0, $71 = 0, $77 = 0, $78 = 0, $80 = 0, $81 = 0, $85 = 0, $b = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2096 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $b = sp + 24 | 0;
 $0 = _strlen($p | 0) | 0;
 $1 = $b + 12 | 0;
 HEAP32[$1 >> 2] = $L;
 $2 = $b + 16 | 0;
 HEAP32[$b >> 2] = $2;
 $3 = $b + 8 | 0;
 HEAP32[$3 >> 2] = 0;
 $4 = $b + 4 | 0;
 HEAP32[$4 >> 2] = 2048;
 $5 = _strstr($s, $p) | 0;
 if (!$5) {
  $$0$lcssa = $s;
  $60 = 0;
  $61 = 2048;
  $70 = $L;
 } else {
  $$015 = $s;
  $12 = 0;
  $13 = 2048;
  $22 = $L;
  $7 = $5;
  while (1) {
   $10 = $7 - $$015 | 0;
   if (($13 - $12 | 0) >>> 0 < $10 >>> 0) {
    $15 = $13 << 1;
    $$$i = ($15 - $12 | 0) >>> 0 < $10 >>> 0 ? $12 + $10 | 0 : $15;
    if ($$$i >>> 0 < $12 >>> 0 | ($$$i - $12 | 0) >>> 0 < $10 >>> 0) _luaL_error($22, 55328, $vararg_buffer) | 0;
    $23 = _lua_newuserdata($22, $$$i) | 0;
    _memcpy($23 | 0, HEAP32[$b >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
    if ((HEAP32[$b >> 2] | 0) != ($2 | 0)) {
     _lua_rotate($22, -2, -1);
     _lua_settop($22, -2);
    }
    HEAP32[$b >> 2] = $23;
    HEAP32[$4 >> 2] = $$$i;
    $29 = $23;
    $30 = HEAP32[$3 >> 2] | 0;
   } else {
    $29 = HEAP32[$b >> 2] | 0;
    $30 = $12;
   }
   _memcpy($29 + $30 | 0, $$015 | 0, $10 | 0) | 0;
   $32 = (HEAP32[$3 >> 2] | 0) + $10 | 0;
   HEAP32[$3 >> 2] = $32;
   $33 = _strlen($r | 0) | 0;
   $34 = HEAP32[$1 >> 2] | 0;
   $35 = HEAP32[$4 >> 2] | 0;
   if (($35 - $32 | 0) >>> 0 < $33 >>> 0) {
    $38 = $35 << 1;
    $$$i4 = ($38 - $32 | 0) >>> 0 < $33 >>> 0 ? $32 + $33 | 0 : $38;
    if ($$$i4 >>> 0 < $32 >>> 0 | ($$$i4 - $32 | 0) >>> 0 < $33 >>> 0) _luaL_error($34, 55328, $vararg_buffer1) | 0;
    $45 = _lua_newuserdata($34, $$$i4) | 0;
    _memcpy($45 | 0, HEAP32[$b >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
    if ((HEAP32[$b >> 2] | 0) != ($2 | 0)) {
     _lua_rotate($34, -2, -1);
     _lua_settop($34, -2);
    }
    HEAP32[$b >> 2] = $45;
    HEAP32[$4 >> 2] = $$$i4;
    $51 = $45;
    $52 = HEAP32[$3 >> 2] | 0;
   } else {
    $51 = HEAP32[$b >> 2] | 0;
    $52 = $32;
   }
   _memcpy($51 + $52 | 0, $r | 0, $33 | 0) | 0;
   $54 = (HEAP32[$3 >> 2] | 0) + $33 | 0;
   HEAP32[$3 >> 2] = $54;
   $55 = $7 + $0 | 0;
   $7 = _strstr($55, $p) | 0;
   $$pre = HEAP32[$1 >> 2] | 0;
   $$pre16 = HEAP32[$4 >> 2] | 0;
   if (!$7) {
    $$0$lcssa = $55;
    $60 = $54;
    $61 = $$pre16;
    $70 = $$pre;
    break;
   } else {
    $$015 = $55;
    $12 = $54;
    $13 = $$pre16;
    $22 = $$pre;
   }
  }
 }
 $58 = _strlen($$0$lcssa | 0) | 0;
 if (($61 - $60 | 0) >>> 0 < $58 >>> 0) {
  $63 = $61 << 1;
  $$$i11 = ($63 - $60 | 0) >>> 0 < $58 >>> 0 ? $60 + $58 | 0 : $63;
  if ($$$i11 >>> 0 < $60 >>> 0 | ($$$i11 - $60 | 0) >>> 0 < $58 >>> 0) _luaL_error($70, 55328, $vararg_buffer3) | 0;
  $71 = _lua_newuserdata($70, $$$i11) | 0;
  _memcpy($71 | 0, HEAP32[$b >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
  if ((HEAP32[$b >> 2] | 0) != ($2 | 0)) {
   _lua_rotate($70, -2, -1);
   _lua_settop($70, -2);
  }
  HEAP32[$b >> 2] = $71;
  HEAP32[$4 >> 2] = $$$i11;
  $77 = $71;
  $78 = HEAP32[$3 >> 2] | 0;
 } else {
  $77 = HEAP32[$b >> 2] | 0;
  $78 = $60;
 }
 _memcpy($77 + $78 | 0, $$0$lcssa | 0, $58 | 0) | 0;
 $80 = (HEAP32[$3 >> 2] | 0) + $58 | 0;
 HEAP32[$3 >> 2] = $80;
 $81 = HEAP32[$1 >> 2] | 0;
 _lua_pushlstring($81, HEAP32[$b >> 2] | 0, $80) | 0;
 if ((HEAP32[$b >> 2] | 0) == ($2 | 0)) {
  $85 = _lua_tolstring($L, -1, 0) | 0;
  STACKTOP = sp;
  return $85 | 0;
 }
 _lua_rotate($81, -2, -1);
 _lua_settop($81, -2);
 $85 = _lua_tolstring($L, -1, 0) | 0;
 STACKTOP = sp;
 return $85 | 0;
}

function _png_create_png_struct($user_png_ver, $error_ptr, $error_fn, $warn_fn, $mem_ptr, $malloc_fn, $free_fn) {
 $user_png_ver = $user_png_ver | 0;
 $error_ptr = $error_ptr | 0;
 $error_fn = $error_fn | 0;
 $warn_fn = $warn_fn | 0;
 $mem_ptr = $mem_ptr | 0;
 $malloc_fn = $malloc_fn | 0;
 $free_fn = $free_fn | 0;
 var $$0$reg2mem$0 = 0, $$reg2mem38$0 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $create_jmp_buf = 0, $create_struct = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056 | 0;
 _setjmpTableSize = 4;
 _setjmpTable = _malloc(40) | 0;
 HEAP32[_setjmpTable >> 2] = 0;
 $create_struct = sp + 156 | 0;
 $create_jmp_buf = sp;
 _memset($create_struct | 0, 0, 900) | 0;
 HEAP32[$create_struct + 748 >> 2] = 2147483647;
 HEAP32[$create_struct + 752 >> 2] = 2147483647;
 HEAP32[$create_struct + 756 >> 2] = 0;
 HEAP32[$create_struct + 760 >> 2] = 0;
 __THREW__ = 0;
 invoke_viiii(15, $create_struct | 0, $mem_ptr | 0, $malloc_fn | 0, $free_fn | 0);
 $4 = __THREW__;
 __THREW__ = 0;
 if (($4 | 0) != 0 & (threwValue | 0) != 0) {
  $5 = _testSetjmp(HEAP32[$4 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
  if (!$5) _longjmp($4 | 0, threwValue | 0);
  tempRet0 = threwValue;
 } else $5 = -1;
 if (($5 | 0) == 1) $$reg2mem38$0 = tempRet0; else {
  __THREW__ = 0;
  invoke_viiii(16, $create_struct | 0, $error_ptr | 0, $error_fn | 0, $warn_fn | 0);
  $7 = __THREW__;
  __THREW__ = 0;
  if (($7 | 0) != 0 & (threwValue | 0) != 0) {
   $8 = _testSetjmp(HEAP32[$7 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
   if (!$8) _longjmp($7 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else $8 = -1;
  if (($8 | 0) == 1) $$reg2mem38$0 = tempRet0; else {
   _setjmpTable = _saveSetjmp($create_jmp_buf, 1, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
   _setjmpTableSize = tempRet0;
   __THREW__ = 0;
   $10 = __THREW__;
   __THREW__ = 0;
   if (($10 | 0) != 0 & (threwValue | 0) != 0) {
    $11 = _testSetjmp(HEAP32[$10 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
    if (!$11) _longjmp($10 | 0, threwValue | 0);
    tempRet0 = threwValue;
   } else $11 = -1;
   if (($11 | 0) == 1) $$reg2mem38$0 = tempRet0; else $$reg2mem38$0 = 0;
  }
 }
 while (1) {
  if ($$reg2mem38$0) {
   $$0$reg2mem$0 = 0;
   label = 11;
   break;
  }
  $14 = $create_struct + 160 | 0;
  HEAP32[$14 >> 2] = $create_jmp_buf;
  $15 = $create_struct + 164 | 0;
  HEAP32[$15 >> 2] = 0;
  $16 = $create_struct + 156 | 0;
  HEAP32[$16 >> 2] = 71;
  __THREW__ = 0;
  $17 = invoke_iii(21, $create_struct | 0, $user_png_ver | 0) | 0;
  $18 = __THREW__;
  __THREW__ = 0;
  if (($18 | 0) != 0 & (threwValue | 0) != 0) {
   $19 = _testSetjmp(HEAP32[$18 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
   if (!$19) _longjmp($18 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else $19 = -1;
  if (($19 | 0) == 1) {
   $$reg2mem38$0 = tempRet0;
   continue;
  }
  if (!$17) {
   $$0$reg2mem$0 = 0;
   label = 11;
   break;
  }
  __THREW__ = 0;
  $22 = invoke_iii(22, $create_struct | 0, 900) | 0;
  $23 = __THREW__;
  __THREW__ = 0;
  if (($23 | 0) != 0 & (threwValue | 0) != 0) {
   $24 = _testSetjmp(HEAP32[$23 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
   if (!$24) _longjmp($23 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else $24 = -1;
  if (($24 | 0) == 1) $$reg2mem38$0 = tempRet0; else {
   label = 9;
   break;
  }
 }
 if ((label | 0) == 9) {
  if (!$22) {
   $$0$reg2mem$0 = 0;
   _free(_setjmpTable | 0);
   STACKTOP = sp;
   return $$0$reg2mem$0 | 0;
  }
  HEAP32[$create_struct + 256 >> 2] = 22;
  HEAP32[$create_struct + 260 >> 2] = 86;
  HEAP32[$create_struct + 264 >> 2] = $22;
  HEAP32[$14 >> 2] = 0;
  HEAP32[$15 >> 2] = 0;
  HEAP32[$16 >> 2] = 0;
  _memcpy($22 | 0, $create_struct | 0, 900) | 0;
  $$0$reg2mem$0 = $22;
  _free(_setjmpTable | 0);
  STACKTOP = sp;
  return $$0$reg2mem$0 | 0;
 } else if ((label | 0) == 11) {
  _free(_setjmpTable | 0);
  STACKTOP = sp;
  return $$0$reg2mem$0 | 0;
 }
 return 0;
}

function _register_graphics($L) {
 $L = $L | 0;
 _lua_pushcclosure($L, 291, 0);
 _lua_setfield($L, -2, 13176);
 _lua_pushcclosure($L, 292, 0);
 _lua_setfield($L, -2, 13192);
 _lua_pushcclosure($L, 293, 0);
 _lua_setfield($L, -2, 13200);
 _lua_pushcclosure($L, 294, 0);
 _lua_setfield($L, -2, 13216);
 _lua_pushcclosure($L, 295, 0);
 _lua_setfield($L, -2, 13232);
 _lua_pushcclosure($L, 296, 0);
 _lua_setfield($L, -2, 13248);
 _lua_pushcclosure($L, 297, 0);
 _lua_setfield($L, -2, 13264);
 _lua_pushcclosure($L, 298, 0);
 _lua_setfield($L, -2, 13280);
 _lua_pushcclosure($L, 299, 0);
 _lua_setfield($L, -2, 13296);
 _lua_pushcclosure($L, 300, 0);
 _lua_setfield($L, -2, 13312);
 _lua_pushcclosure($L, 301, 0);
 _lua_setfield($L, -2, 13328);
 _lua_pushcclosure($L, 302, 0);
 _lua_setfield($L, -2, 13344);
 _lua_pushcclosure($L, 303, 0);
 _lua_setfield($L, -2, 13360);
 _lua_pushcclosure($L, 304, 0);
 _lua_setfield($L, -2, 13376);
 _lua_pushcclosure($L, 305, 0);
 _lua_setfield($L, -2, 13392);
 _lua_pushcclosure($L, 306, 0);
 _lua_setfield($L, -2, 13408);
 _lua_pushcclosure($L, 307, 0);
 _lua_setfield($L, -2, 13424);
 _lua_pushcclosure($L, 308, 0);
 _lua_setfield($L, -2, 13440);
 _luaL_newmetatable($L, 19976) | 0;
 _lua_pushlstring($L, 19976, 7) | 0;
 _lua_setfield($L, -2, 13456);
 _lua_pushcclosure($L, 309, 0);
 _lua_setfield($L, -2, 13464);
 _lua_pushcclosure($L, 310, 0);
 _lua_setfield($L, -2, 13480);
 _lua_pushcclosure($L, 311, 0);
 _lua_setfield($L, -2, 13488);
 _lua_pushcclosure($L, 312, 0);
 _lua_setfield($L, -2, 13504);
 _lua_pushcclosure($L, 313, 0);
 _lua_setfield($L, -2, 63064);
 _lua_pushcclosure($L, 314, 0);
 _lua_setfield($L, -2, 64992);
 _lua_setfield($L, -2, 13520);
 _lua_pushcclosure($L, 315, 0);
 _lua_setfield($L, -2, 13528);
 _lua_pushcclosure($L, 316, 0);
 _lua_setfield($L, -2, 13544);
 _luaL_newmetatable($L, 22256) | 0;
 _lua_pushlstring($L, 22256, 6) | 0;
 _lua_setfield($L, -2, 13456);
 _lua_pushcclosure($L, 317, 0);
 _lua_setfield($L, -2, 13568);
 _lua_pushcclosure($L, 318, 0);
 _lua_setfield($L, -2, 13576);
 _lua_pushcclosure($L, 319, 0);
 _lua_setfield($L, -2, 13584);
 _lua_pushcclosure($L, 320, 0);
 _lua_setfield($L, -2, 13592);
 _lua_pushcclosure($L, 321, 0);
 _lua_setfield($L, -2, 63064);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 64992);
 _lua_setfield($L, -2, 13608);
 _lua_pushcclosure($L, 322, 0);
 _lua_setfield($L, -2, 13616);
 _lua_pushcclosure($L, 323, 0);
 _lua_setfield($L, -2, 13632);
 _luaL_newmetatable($L, 22712) | 0;
 _lua_pushlstring($L, 22712, 6) | 0;
 _lua_setfield($L, -2, 13456);
 _lua_pushcclosure($L, 324, 0);
 _lua_setfield($L, -2, 13568);
 _lua_pushcclosure($L, 325, 0);
 _lua_setfield($L, -2, 13656);
 _lua_pushcclosure($L, 326, 0);
 _lua_setfield($L, -2, 63064);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 64992);
 _lua_setfield($L, -2, 13664);
 _push_surface($L, _display_get_screen() | 0);
 _lua_setfield($L, -1001e3, 20384);
 _lua_createtable($L, 0, 0);
 _lua_pushnumber($L, 0.0);
 _lua_setfield($L, -2, 13672);
 _lua_pushnumber($L, 0.0);
 _lua_setfield($L, -2, 13680);
 _lua_pushnumber($L, 1.0);
 _lua_setfield($L, -2, 13688);
 _lua_pushnumber($L, 2.0);
 _lua_setfield($L, -2, 13696);
 _lua_pushnumber($L, 0.0);
 _lua_setfield($L, -2, 13704);
 _lua_setfield($L, -2, 13720);
 _lua_createtable($L, 0, 0);
 _lua_pushnumber($L, 9729.0);
 _lua_setfield($L, -2, 13672);
 _lua_pushnumber($L, 9728.0);
 _lua_setfield($L, -2, 13728);
 _lua_pushnumber($L, 9729.0);
 _lua_setfield($L, -2, 13736);
 _lua_pushnumber($L, 9985.0);
 _lua_setfield($L, -2, 13744);
 _lua_pushnumber($L, 9987.0);
 _lua_setfield($L, -2, 13704);
 _lua_setfield($L, -2, 13760);
 _lua_createtable($L, 0, 0);
 _luaL_newmetatable($L, 13768) | 0;
 _lua_pushcclosure($L, 327, 0);
 _lua_setfield($L, -2, 63048);
 _lua_pushcclosure($L, 328, 0);
 _lua_setfield($L, -2, 64992);
 _lua_setmetatable($L, -2) | 0;
 _lua_pushcclosure($L, 329, 0);
 _lua_setfield($L, -2, 13584);
 _lua_pushcclosure($L, 330, 0);
 _lua_setfield($L, -2, 13784);
 _lua_pushcclosure($L, 331, 0);
 _lua_setfield($L, -2, 13792);
 _lua_setfield($L, -2, 13800);
 return;
}

function _auxsort($L, $ta, $l, $u) {
 $L = $L | 0;
 $ta = $ta | 0;
 $l = $l | 0;
 $u = $u | 0;
 var $$018 = 0, $$09 = 0, $$lcssa = 0, $$lcssa4 = 0, $1 = 0, $11 = 0, $26 = 0, $30 = 0, $34 = 0, $37 = 0, $40 = 0, $43 = 0, $46 = 0, $56 = 0, $57 = 0, $8 = 0, $i$0$lcssa = 0, $i$0$ph = 0, $j$0$ph = 0, $j$1$lcssa = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0, $$018$looptemp = 0, $$09$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 if (($l | 0) >= ($u | 0)) {
  STACKTOP = sp;
  return;
 }
 $1 = $ta + 4 | 0;
 $$018 = $l;
 $$09 = $u;
 while (1) {
  FUNCTION_TABLE_iiii[HEAP32[$ta >> 2] & 31]($L, 1, $$018) | 0;
  FUNCTION_TABLE_iiii[HEAP32[$ta >> 2] & 31]($L, 1, $$09) | 0;
  if (!(_sort_comp($L, -1, -2) | 0)) _lua_settop($L, -3); else {
   FUNCTION_TABLE_viii[HEAP32[$1 >> 2] & 15]($L, 1, $$018);
   FUNCTION_TABLE_viii[HEAP32[$1 >> 2] & 15]($L, 1, $$09);
  }
  $8 = $$09 - $$018 | 0;
  if (($8 | 0) == 1) {
   label = 25;
   break;
  }
  $11 = ($$09 + $$018 | 0) / 2 | 0;
  FUNCTION_TABLE_iiii[HEAP32[$ta >> 2] & 31]($L, 1, $11) | 0;
  FUNCTION_TABLE_iiii[HEAP32[$ta >> 2] & 31]($L, 1, $$018) | 0;
  do if (!(_sort_comp($L, -2, -1) | 0)) {
   _lua_settop($L, -2);
   FUNCTION_TABLE_iiii[HEAP32[$ta >> 2] & 31]($L, 1, $$09) | 0;
   if (!(_sort_comp($L, -1, -2) | 0)) {
    _lua_settop($L, -3);
    break;
   } else {
    FUNCTION_TABLE_viii[HEAP32[$1 >> 2] & 15]($L, 1, $11);
    FUNCTION_TABLE_viii[HEAP32[$1 >> 2] & 15]($L, 1, $$09);
    break;
   }
  } else {
   FUNCTION_TABLE_viii[HEAP32[$1 >> 2] & 15]($L, 1, $11);
   FUNCTION_TABLE_viii[HEAP32[$1 >> 2] & 15]($L, 1, $$018);
  } while (0);
  if (($8 | 0) == 2) {
   label = 25;
   break;
  }
  FUNCTION_TABLE_iiii[HEAP32[$ta >> 2] & 31]($L, 1, $11) | 0;
  _lua_pushvalue($L, -1);
  $26 = $$09 + -1 | 0;
  FUNCTION_TABLE_iiii[HEAP32[$ta >> 2] & 31]($L, 1, $26) | 0;
  FUNCTION_TABLE_viii[HEAP32[$1 >> 2] & 15]($L, 1, $11);
  FUNCTION_TABLE_viii[HEAP32[$1 >> 2] & 15]($L, 1, $26);
  $i$0$ph = $$018;
  $j$0$ph = $26;
  while (1) {
   $30 = $i$0$ph + 1 | 0;
   FUNCTION_TABLE_iiii[HEAP32[$ta >> 2] & 31]($L, 1, $30) | 0;
   if (!(_sort_comp($L, -1, -2) | 0)) {
    $$lcssa4 = $30;
    $i$0$lcssa = $i$0$ph;
   } else {
    $37 = $30;
    while (1) {
     if (($37 | 0) >= ($$09 | 0)) _luaL_error($L, 62592, $vararg_buffer) | 0;
     _lua_settop($L, -2);
     $40 = $37 + 1 | 0;
     FUNCTION_TABLE_iiii[HEAP32[$ta >> 2] & 31]($L, 1, $40) | 0;
     if (!(_sort_comp($L, -1, -2) | 0)) {
      $$lcssa4 = $40;
      $i$0$lcssa = $37;
      break;
     } else $37 = $40;
    }
   }
   $34 = $j$0$ph + -1 | 0;
   FUNCTION_TABLE_iiii[HEAP32[$ta >> 2] & 31]($L, 1, $34) | 0;
   if (!(_sort_comp($L, -3, -1) | 0)) {
    $$lcssa = $34;
    $j$1$lcssa = $j$0$ph;
   } else {
    $43 = $34;
    while (1) {
     if (($43 | 0) <= ($$018 | 0)) _luaL_error($L, 62592, $vararg_buffer1) | 0;
     _lua_settop($L, -2);
     $46 = $43 + -1 | 0;
     FUNCTION_TABLE_iiii[HEAP32[$ta >> 2] & 31]($L, 1, $46) | 0;
     if (!(_sort_comp($L, -3, -1) | 0)) {
      $$lcssa = $46;
      $j$1$lcssa = $43;
      break;
     } else $43 = $46;
    }
   }
   if (($j$1$lcssa | 0) <= ($$lcssa4 | 0)) break;
   FUNCTION_TABLE_viii[HEAP32[$1 >> 2] & 15]($L, 1, $$lcssa4);
   FUNCTION_TABLE_viii[HEAP32[$1 >> 2] & 15]($L, 1, $$lcssa);
   $i$0$ph = $$lcssa4;
   $j$0$ph = $$lcssa;
  }
  _lua_settop($L, -4);
  FUNCTION_TABLE_iiii[HEAP32[$ta >> 2] & 31]($L, 1, $26) | 0;
  FUNCTION_TABLE_iiii[HEAP32[$ta >> 2] & 31]($L, 1, $$lcssa4) | 0;
  FUNCTION_TABLE_viii[HEAP32[$1 >> 2] & 15]($L, 1, $26);
  FUNCTION_TABLE_viii[HEAP32[$1 >> 2] & 15]($L, 1, $$lcssa4);
  $56 = ($$lcssa4 - $$018 | 0) < ($$09 - $$lcssa4 | 0);
  $57 = $i$0$lcssa + 2 | 0;
  $$018$looptemp = $$018;
  $$018 = $56 ? $57 : $$018;
  $$09$looptemp = $$09;
  $$09 = $56 ? $$09 : $i$0$lcssa;
  _auxsort($L, $ta, $56 ? $$018$looptemp : $57, $56 ? $i$0$lcssa : $$09$looptemp);
  if (($$018 | 0) >= ($$09 | 0)) {
   label = 25;
   break;
  }
 }
 if ((label | 0) == 25) {
  STACKTOP = sp;
  return;
 }
}

function _png_do_strip_channel($row_info, $row, $at_start) {
 $row_info = $row_info | 0;
 $row = $row | 0;
 $at_start = $at_start | 0;
 var $0 = 0, $13 = 0, $2 = 0, $26 = 0, $3 = 0, $30 = 0, $34 = 0, $4 = 0, $47 = 0, $6 = 0, $72 = 0, $76 = 0, $dp$0$lcssa = 0, $dp$0$ph = 0, $dp$01 = 0, $dp$1$lcssa = 0, $dp$1$ph = 0, $dp$14 = 0, $dp$2 = 0, $dp$3$lcssa = 0, $dp$3$ph = 0, $dp$310 = 0, $dp$4$lcssa = 0, $dp$4$ph = 0, $dp$416 = 0, $dp$5 = 0, $dp$6 = 0, $sp$0$ph = 0, $sp$02 = 0, $sp$1$ph = 0, $sp$15 = 0, $sp$2$ph = 0, $sp$211 = 0, $sp$3$ph = 0, $sp$317 = 0;
 $0 = $row_info + 4 | 0;
 $2 = $row + (HEAP32[$0 >> 2] | 0) | 0;
 $3 = $row_info + 10 | 0;
 $4 = HEAP8[$3 >> 0] | 0;
 if ($4 << 24 >> 24 == 2) {
  $6 = HEAP8[$row_info + 9 >> 0] | 0;
  if ($6 << 24 >> 24 == 8) {
   if (!$at_start) {
    $dp$0$ph = $row + 1 | 0;
    $sp$0$ph = $row + 2 | 0;
   } else {
    $dp$0$ph = $row;
    $sp$0$ph = $row + 1 | 0;
   }
   if ($sp$0$ph >>> 0 < $2 >>> 0) {
    $dp$01 = $dp$0$ph;
    $sp$02 = $sp$0$ph;
    while (1) {
     $13 = $dp$01 + 1 | 0;
     HEAP8[$dp$01 >> 0] = HEAP8[$sp$02 >> 0] | 0;
     $sp$02 = $sp$02 + 2 | 0;
     if ($sp$02 >>> 0 >= $2 >>> 0) {
      $dp$0$lcssa = $13;
      break;
     } else $dp$01 = $13;
    }
   } else $dp$0$lcssa = $dp$0$ph;
   HEAP8[$row_info + 11 >> 0] = 8;
   $dp$2 = $dp$0$lcssa;
  } else if ($6 << 24 >> 24 == 16) {
   if (!$at_start) {
    $dp$1$ph = $row + 2 | 0;
    $sp$1$ph = $row + 4 | 0;
   } else {
    $dp$1$ph = $row;
    $sp$1$ph = $row + 2 | 0;
   }
   if ($sp$1$ph >>> 0 < $2 >>> 0) {
    $dp$14 = $dp$1$ph;
    $sp$15 = $sp$1$ph;
    while (1) {
     HEAP8[$dp$14 >> 0] = HEAP8[$sp$15 >> 0] | 0;
     $26 = $dp$14 + 2 | 0;
     HEAP8[$dp$14 + 1 >> 0] = HEAP8[$sp$15 + 1 >> 0] | 0;
     $sp$15 = $sp$15 + 4 | 0;
     if ($sp$15 >>> 0 >= $2 >>> 0) {
      $dp$1$lcssa = $26;
      break;
     } else $dp$14 = $26;
    }
   } else $dp$1$lcssa = $dp$1$ph;
   HEAP8[$row_info + 11 >> 0] = 16;
   $dp$2 = $dp$1$lcssa;
  } else return;
  HEAP8[$3 >> 0] = 1;
  $30 = $row_info + 8 | 0;
  if ((HEAP8[$30 >> 0] | 0) == 4) {
   HEAP8[$30 >> 0] = 0;
   $dp$6 = $dp$2;
  } else $dp$6 = $dp$2;
 } else if ($4 << 24 >> 24 == 4) {
  $34 = HEAP8[$row_info + 9 >> 0] | 0;
  if ($34 << 24 >> 24 == 8) {
   if (!$at_start) {
    $dp$3$ph = $row + 3 | 0;
    $sp$2$ph = $row + 4 | 0;
   } else {
    $dp$3$ph = $row;
    $sp$2$ph = $row + 1 | 0;
   }
   if ($sp$2$ph >>> 0 < $2 >>> 0) {
    $dp$310 = $dp$3$ph;
    $sp$211 = $sp$2$ph;
    while (1) {
     HEAP8[$dp$310 >> 0] = HEAP8[$sp$211 >> 0] | 0;
     HEAP8[$dp$310 + 1 >> 0] = HEAP8[$sp$211 + 1 >> 0] | 0;
     $47 = $dp$310 + 3 | 0;
     HEAP8[$dp$310 + 2 >> 0] = HEAP8[$sp$211 + 2 >> 0] | 0;
     $sp$211 = $sp$211 + 4 | 0;
     if ($sp$211 >>> 0 >= $2 >>> 0) {
      $dp$3$lcssa = $47;
      break;
     } else $dp$310 = $47;
    }
   } else $dp$3$lcssa = $dp$3$ph;
   HEAP8[$row_info + 11 >> 0] = 24;
   $dp$5 = $dp$3$lcssa;
  } else if ($34 << 24 >> 24 == 16) {
   if (!$at_start) {
    $dp$4$ph = $row + 6 | 0;
    $sp$3$ph = $row + 8 | 0;
   } else {
    $dp$4$ph = $row;
    $sp$3$ph = $row + 2 | 0;
   }
   if ($sp$3$ph >>> 0 < $2 >>> 0) {
    $dp$416 = $dp$4$ph;
    $sp$317 = $sp$3$ph;
    while (1) {
     HEAP8[$dp$416 >> 0] = HEAP8[$sp$317 >> 0] | 0;
     HEAP8[$dp$416 + 1 >> 0] = HEAP8[$sp$317 + 1 >> 0] | 0;
     HEAP8[$dp$416 + 2 >> 0] = HEAP8[$sp$317 + 2 >> 0] | 0;
     HEAP8[$dp$416 + 3 >> 0] = HEAP8[$sp$317 + 3 >> 0] | 0;
     HEAP8[$dp$416 + 4 >> 0] = HEAP8[$sp$317 + 4 >> 0] | 0;
     $72 = $dp$416 + 6 | 0;
     HEAP8[$dp$416 + 5 >> 0] = HEAP8[$sp$317 + 5 >> 0] | 0;
     $sp$317 = $sp$317 + 8 | 0;
     if ($sp$317 >>> 0 >= $2 >>> 0) {
      $dp$4$lcssa = $72;
      break;
     } else $dp$416 = $72;
    }
   } else $dp$4$lcssa = $dp$4$ph;
   HEAP8[$row_info + 11 >> 0] = 48;
   $dp$5 = $dp$4$lcssa;
  } else return;
  HEAP8[$3 >> 0] = 3;
  $76 = $row_info + 8 | 0;
  if ((HEAP8[$76 >> 0] | 0) == 6) {
   HEAP8[$76 >> 0] = 2;
   $dp$6 = $dp$5;
  } else $dp$6 = $dp$5;
 } else return;
 HEAP32[$0 >> 2] = $dp$6 - $row;
 return;
}

function _png_format_number($start, $end, $format, $number) {
 $start = $start | 0;
 $end = $end | 0;
 $format = $format | 0;
 $number = $number | 0;
 var $$0$be$us = 0, $$02$be$us = 0, $$02$lcssa = 0, $$026 = 0, $$026$us = 0, $$026$us15 = 0, $$07 = 0, $$07$us = 0, $$07$us14 = 0, $$1 = 0, $$13$us = 0, $$2 = 0, $0 = 0, $10 = 0, $15 = 0, $17 = 0, $24 = 0, $33 = 0, $38 = 0, $4 = 0, $9 = 0, $count$08 = 0, $count$08$us = 0, $count$08$us13 = 0, $mincount$09 = 0, $mincount$09$us = 0, $mincount$09$us12 = 0, $mincount$2 = 0, $mincount$3 = 0, $output$0$be$us = 0, $output$010$us = 0, $output$1$us = 0, label = 0;
 $0 = $end + -1 | 0;
 HEAP8[$0 >> 0] = 0;
 if ($0 >>> 0 <= $start >>> 0) {
  $$02$lcssa = $0;
  return $$02$lcssa | 0;
 }
 if (($format | 0) == 5) {
  $$026$us = $0;
  $$07$us = $number;
  $count$08$us = 0;
  $mincount$09$us = 1;
  $output$010$us = 0;
  while (1) {
   if (!(($$07$us | 0) != 0 | ($count$08$us | 0) < ($mincount$09$us | 0))) {
    $$02$lcssa = $$026$us;
    label = 20;
    break;
   }
   $4 = ($$07$us >>> 0) % 10 | 0;
   if (!($output$010$us | $4)) {
    $$13$us = $$026$us;
    $output$1$us = 0;
   } else {
    $9 = $$026$us + -1 | 0;
    HEAP8[$9 >> 0] = HEAP8[74168 + $4 >> 0] | 0;
    $$13$us = $9;
    $output$1$us = 1;
   }
   $10 = ($$07$us >>> 0) / 10 | 0;
   $count$08$us = $count$08$us + 1 | 0;
   do if (($count$08$us | 0) == 5 & $$13$us >>> 0 > $start >>> 0) {
    if ($output$1$us) {
     $15 = $$13$us + -1 | 0;
     HEAP8[$15 >> 0] = 46;
     $$0$be$us = $10;
     $$02$be$us = $15;
     $output$0$be$us = $output$1$us;
     break;
    }
    if ($$07$us >>> 0 < 10) {
     $17 = $$13$us + -1 | 0;
     HEAP8[$17 >> 0] = 48;
     $$0$be$us = 0;
     $$02$be$us = $17;
     $output$0$be$us = 0;
    } else {
     $$0$be$us = $10;
     $$02$be$us = $$13$us;
     $output$0$be$us = 0;
    }
   } else {
    $$0$be$us = $10;
    $$02$be$us = $$13$us;
    $output$0$be$us = $output$1$us;
   } while (0);
   if ($$02$be$us >>> 0 <= $start >>> 0) {
    $$02$lcssa = $$02$be$us;
    label = 20;
    break;
   } else {
    $$026$us = $$02$be$us;
    $$07$us = $$0$be$us;
    $mincount$09$us = 5;
    $output$010$us = $output$0$be$us;
   }
  }
  if ((label | 0) == 20) return $$02$lcssa | 0;
 } else if (($format | 0) == 2) {
  $$026$us15 = $0;
  $$07$us14 = $number;
  $count$08$us13 = 0;
  $mincount$09$us12 = 1;
  while (1) {
   if (!(($$07$us14 | 0) != 0 | ($count$08$us13 | 0) < ($mincount$09$us12 | 0))) {
    $$02$lcssa = $$026$us15;
    label = 20;
    break;
   }
   $24 = $$026$us15 + -1 | 0;
   HEAP8[$24 >> 0] = HEAP8[74168 + (($$07$us14 >>> 0) % 10 | 0) >> 0] | 0;
   if ($24 >>> 0 > $start >>> 0) {
    $$026$us15 = $24;
    $$07$us14 = ($$07$us14 >>> 0) / 10 | 0;
    $count$08$us13 = $count$08$us13 + 1 | 0;
    $mincount$09$us12 = 2;
   } else {
    $$02$lcssa = $24;
    label = 20;
    break;
   }
  }
  if ((label | 0) == 20) return $$02$lcssa | 0;
 } else {
  $$026 = $0;
  $$07 = $number;
  $count$08 = 0;
  $mincount$09 = 1;
  while (1) {
   if (!(($$07 | 0) != 0 | ($count$08 | 0) < ($mincount$09 | 0))) {
    $$02$lcssa = $$026;
    label = 20;
    break;
   }
   if (($format | 0) == 4) {
    $mincount$2 = 2;
    label = 18;
   } else if (($format | 0) == 1) {
    $33 = $$026 + -1 | 0;
    HEAP8[$33 >> 0] = HEAP8[74168 + (($$07 >>> 0) % 10 | 0) >> 0] | 0;
    $$1 = ($$07 >>> 0) / 10 | 0;
    $$2 = $33;
    $mincount$3 = $mincount$09;
   } else if (($format | 0) == 3) {
    $mincount$2 = $mincount$09;
    label = 18;
   } else {
    $$1 = 0;
    $$2 = $$026;
    $mincount$3 = $mincount$09;
   }
   if ((label | 0) == 18) {
    label = 0;
    $38 = $$026 + -1 | 0;
    HEAP8[$38 >> 0] = HEAP8[74168 + ($$07 & 15) >> 0] | 0;
    $$1 = $$07 >>> 4;
    $$2 = $38;
    $mincount$3 = $mincount$2;
   }
   if ($$2 >>> 0 > $start >>> 0) {
    $$026 = $$2;
    $$07 = $$1;
    $count$08 = $count$08 + 1 | 0;
    $mincount$09 = $mincount$3;
   } else {
    $$02$lcssa = $$2;
    label = 20;
    break;
   }
  }
  if ((label | 0) == 20) return $$02$lcssa | 0;
 }
 return 0;
}

function _png_xy_from_XYZ($xy, $XYZ) {
 $xy = $xy | 0;
 $XYZ = $XYZ | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $101 = 0, $103 = 0, $104 = 0, $105 = 0, $113 = 0.0, $117 = 0, $118 = 0, $125 = 0.0, $14 = 0.0, $18 = 0, $19 = 0, $26 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $39 = 0, $40 = 0, $48 = 0.0, $52 = 0, $53 = 0, $6 = 0, $60 = 0.0, $64 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $76 = 0, $77 = 0, $85 = 0.0, $89 = 0, $90 = 0, $97 = 0.0, $storemerge = 0, $storemerge36 = 0, $storemerge37 = 0, $storemerge38 = 0, $storemerge39 = 0, $storemerge40 = 0, $storemerge41 = 0;
 $0 = HEAP32[$XYZ >> 2] | 0;
 $1 = $XYZ + 4 | 0;
 $6 = (HEAP32[$1 >> 2] | 0) + $0 + (HEAP32[$XYZ + 8 >> 2] | 0) | 0;
 if (!$6) {
  $$0 = 1;
  return $$0 | 0;
 }
 do if (!$0) $storemerge = 0; else {
  $14 = +Math_floor(+(+($0 | 0) * 1.0e5 / +($6 | 0) + .5));
  if ($14 <= 2147483647.0 & $14 >= -2147483648.0) {
   $storemerge = ~~$14;
   break;
  } else {
   $$0 = 1;
   return $$0 | 0;
  }
 } while (0);
 HEAP32[$xy >> 2] = $storemerge;
 $18 = $xy + 4 | 0;
 $19 = HEAP32[$1 >> 2] | 0;
 do if (!$19) $storemerge36 = 0; else {
  $26 = +Math_floor(+(+($19 | 0) * 1.0e5 / +($6 | 0) + .5));
  if ($26 <= 2147483647.0 & $26 >= -2147483648.0) {
   $storemerge36 = ~~$26;
   break;
  } else {
   $$0 = 1;
   return $$0 | 0;
  }
 } while (0);
 HEAP32[$18 >> 2] = $storemerge36;
 $30 = HEAP32[$XYZ >> 2] | 0;
 $31 = HEAP32[$1 >> 2] | 0;
 $32 = $XYZ + 12 | 0;
 $33 = HEAP32[$32 >> 2] | 0;
 $34 = $XYZ + 16 | 0;
 $39 = (HEAP32[$34 >> 2] | 0) + $33 + (HEAP32[$XYZ + 20 >> 2] | 0) | 0;
 $40 = $xy + 8 | 0;
 if (!$39) {
  $$0 = 1;
  return $$0 | 0;
 }
 do if (!$33) $storemerge37 = 0; else {
  $48 = +Math_floor(+(+($33 | 0) * 1.0e5 / +($39 | 0) + .5));
  if ($48 <= 2147483647.0 & $48 >= -2147483648.0) {
   $storemerge37 = ~~$48;
   break;
  } else {
   $$0 = 1;
   return $$0 | 0;
  }
 } while (0);
 HEAP32[$40 >> 2] = $storemerge37;
 $52 = $xy + 12 | 0;
 $53 = HEAP32[$34 >> 2] | 0;
 do if (!$53) $storemerge38 = 0; else {
  $60 = +Math_floor(+(+($53 | 0) * 1.0e5 / +($39 | 0) + .5));
  if ($60 <= 2147483647.0 & $60 >= -2147483648.0) {
   $storemerge38 = ~~$60;
   break;
  } else {
   $$0 = 1;
   return $$0 | 0;
  }
 } while (0);
 HEAP32[$52 >> 2] = $storemerge38;
 $64 = $39 + $6 | 0;
 $66 = (HEAP32[$32 >> 2] | 0) + $30 | 0;
 $68 = (HEAP32[$34 >> 2] | 0) + $31 | 0;
 $69 = $XYZ + 24 | 0;
 $70 = HEAP32[$69 >> 2] | 0;
 $71 = $XYZ + 28 | 0;
 $76 = (HEAP32[$71 >> 2] | 0) + $70 + (HEAP32[$XYZ + 32 >> 2] | 0) | 0;
 $77 = $xy + 16 | 0;
 if (!$76) {
  $$0 = 1;
  return $$0 | 0;
 }
 do if (!$70) $storemerge39 = 0; else {
  $85 = +Math_floor(+(+($70 | 0) * 1.0e5 / +($76 | 0) + .5));
  if ($85 <= 2147483647.0 & $85 >= -2147483648.0) {
   $storemerge39 = ~~$85;
   break;
  } else {
   $$0 = 1;
   return $$0 | 0;
  }
 } while (0);
 HEAP32[$77 >> 2] = $storemerge39;
 $89 = $xy + 20 | 0;
 $90 = HEAP32[$71 >> 2] | 0;
 do if (!$90) $storemerge40 = 0; else {
  $97 = +Math_floor(+(+($90 | 0) * 1.0e5 / +($76 | 0) + .5));
  if ($97 <= 2147483647.0 & $97 >= -2147483648.0) {
   $storemerge40 = ~~$97;
   break;
  } else {
   $$0 = 1;
   return $$0 | 0;
  }
 } while (0);
 HEAP32[$89 >> 2] = $storemerge40;
 $101 = $64 + $76 | 0;
 $103 = $66 + (HEAP32[$69 >> 2] | 0) | 0;
 $104 = HEAP32[$71 >> 2] | 0;
 $105 = $xy + 24 | 0;
 if (!$101) {
  $$0 = 1;
  return $$0 | 0;
 }
 do if (!$103) $storemerge41 = 0; else {
  $113 = +Math_floor(+(+($103 | 0) * 1.0e5 / +($101 | 0) + .5));
  if ($113 <= 2147483647.0 & $113 >= -2147483648.0) {
   $storemerge41 = ~~$113;
   break;
  } else {
   $$0 = 1;
   return $$0 | 0;
  }
 } while (0);
 HEAP32[$105 >> 2] = $storemerge41;
 $117 = $68 + $104 | 0;
 $118 = $xy + 28 | 0;
 if (!$117) {
  HEAP32[$118 >> 2] = 0;
  $$0 = 0;
  return $$0 | 0;
 }
 $125 = +Math_floor(+(+($117 | 0) * 1.0e5 / +($101 | 0) + .5));
 if (!($125 <= 2147483647.0 & $125 >= -2147483648.0)) {
  $$0 = 1;
  return $$0 | 0;
 }
 HEAP32[$118 >> 2] = ~~$125;
 $$0 = 0;
 return $$0 | 0;
}

function __ZN9b2Contact6UpdateEP17b2ContactListener($this, $listener) {
 $this = $this | 0;
 $listener = $listener | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $29 = 0, $33 = 0, $35 = 0, $37 = 0, $39 = 0, $4 = 0, $44 = 0, $47 = 0, $50 = 0, $6 = 0, $60 = 0, $63 = 0, $65 = 0, $71 = 0, $73 = 0, $79 = 0, $82 = 0, $83 = 0, $i$011 = 0, $i$011$us = 0, $j$010$us = 0, $oldManifold = 0, $touching$0$off0 = 0, $touching$0$off0$not = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $oldManifold = sp;
 $0 = $this + 64 | 0;
 dest = $oldManifold + 0 | 0;
 src = $0 + 0 | 0;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $1 = $this + 4 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 HEAP32[$1 >> 2] = $2 | 4;
 $4 = $2 >>> 1;
 $6 = HEAP32[$this + 48 >> 2] | 0;
 $10 = HEAP32[$this + 52 >> 2] | 0;
 $14 = (HEAP8[$10 + 38 >> 0] | HEAP8[$6 + 38 >> 0]) << 24 >> 24 != 0;
 $16 = HEAP32[$6 + 8 >> 2] | 0;
 $18 = HEAP32[$10 + 8 >> 2] | 0;
 $19 = $16 + 12 | 0;
 $20 = $18 + 12 | 0;
 if ($14) {
  $29 = __Z13b2TestOverlapPK7b2ShapeiS1_iRK11b2TransformS4_(HEAP32[$6 + 12 >> 2] | 0, HEAP32[$this + 56 >> 2] | 0, HEAP32[$10 + 12 >> 2] | 0, HEAP32[$this + 60 >> 2] | 0, $19, $20) | 0;
  HEAP32[$this + 124 >> 2] = 0;
  $$pre$phiZ2D = $4 & 1;
  $touching$0$off0 = $29;
 } else {
  FUNCTION_TABLE_viiii[HEAP32[HEAP32[$this >> 2] >> 2] & 31]($this, $0, $19, $20);
  $33 = $this + 124 | 0;
  $35 = (HEAP32[$33 >> 2] | 0) > 0;
  L3 : do if ($35) {
   $37 = HEAP32[$oldManifold + 60 >> 2] | 0;
   if (($37 | 0) > 0) $i$011$us = 0; else {
    $i$011 = 0;
    while (1) {
     HEAPF32[$this + ($i$011 * 20 | 0) + 72 >> 2] = 0.0;
     HEAPF32[$this + ($i$011 * 20 | 0) + 76 >> 2] = 0.0;
     $i$011 = $i$011 + 1 | 0;
     if (($i$011 | 0) >= (HEAP32[$33 >> 2] | 0)) break L3;
    }
   }
   do {
    $47 = $this + ($i$011$us * 20 | 0) + 72 | 0;
    HEAPF32[$47 >> 2] = 0.0;
    $50 = $this + ($i$011$us * 20 | 0) + 76 | 0;
    HEAPF32[$50 >> 2] = 0.0;
    $44 = HEAP32[$this + ($i$011$us * 20 | 0) + 80 >> 2] | 0;
    $j$010$us = 0;
    while (1) {
     $39 = $j$010$us + 1 | 0;
     if ((HEAP32[$oldManifold + ($j$010$us * 20 | 0) + 16 >> 2] | 0) == ($44 | 0)) {
      label = 7;
      break;
     }
     if (($39 | 0) < ($37 | 0)) $j$010$us = $39; else break;
    }
    if ((label | 0) == 7) {
     label = 0;
     HEAPF32[$47 >> 2] = +HEAPF32[$oldManifold + ($j$010$us * 20 | 0) + 8 >> 2];
     HEAPF32[$50 >> 2] = +HEAPF32[$oldManifold + ($j$010$us * 20 | 0) + 12 >> 2];
    }
    $i$011$us = $i$011$us + 1 | 0;
   } while (($i$011$us | 0) < (HEAP32[$33 >> 2] | 0));
  } while (0);
  $60 = $4 & 1;
  if ($35 ^ ($60 | 0) != 0) {
   $63 = $16 + 4 | 0;
   $65 = HEAPU16[$63 >> 1] | 0;
   if (!($65 & 2)) {
    HEAP16[$63 >> 1] = $65 | 2;
    HEAPF32[$16 + 144 >> 2] = 0.0;
   }
   $71 = $18 + 4 | 0;
   $73 = HEAPU16[$71 >> 1] | 0;
   if (!($73 & 2)) {
    HEAP16[$71 >> 1] = $73 | 2;
    HEAPF32[$18 + 144 >> 2] = 0.0;
    $$pre$phiZ2D = $60;
    $touching$0$off0 = $35;
   } else {
    $$pre$phiZ2D = $60;
    $touching$0$off0 = $35;
   }
  } else {
   $$pre$phiZ2D = $60;
   $touching$0$off0 = $35;
  }
 }
 $79 = HEAP32[$1 >> 2] | 0;
 HEAP32[$1 >> 2] = $touching$0$off0 ? $79 | 2 : $79 & -3;
 $82 = ($$pre$phiZ2D | 0) == 0;
 $touching$0$off0$not = $touching$0$off0 ^ 1;
 $83 = ($listener | 0) == 0;
 if (!($82 ^ 1 | $touching$0$off0$not | $83)) FUNCTION_TABLE_vii[HEAP32[(HEAP32[$listener >> 2] | 0) + 8 >> 2] & 127]($listener, $this);
 if (!($82 | $touching$0$off0 | $83)) FUNCTION_TABLE_vii[HEAP32[(HEAP32[$listener >> 2] | 0) + 12 >> 2] & 127]($listener, $this);
 if ($14 | $touching$0$off0$not | $83) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[$listener >> 2] | 0) + 16 >> 2] & 15]($listener, $this, $oldManifold);
 STACKTOP = sp;
 return;
}

function __ZN13b2PulleyJoint4DumpEv($this) {
 $this = $this | 0;
 var $16 = 0.0, $22 = 0.0, $28 = 0.0, $3 = 0, $34 = 0.0, $7 = 0, $vararg_buffer1 = 0, $vararg_buffer13 = 0, $vararg_buffer17 = 0, $vararg_buffer21 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0, $vararg_ptr24 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $vararg_buffer34 = sp + 120 | 0;
 $vararg_buffer31 = sp + 112 | 0;
 $vararg_buffer28 = sp + 104 | 0;
 $vararg_buffer25 = sp + 96 | 0;
 $vararg_buffer21 = sp + 80 | 0;
 $vararg_buffer17 = sp + 64 | 0;
 $vararg_buffer13 = sp + 48 | 0;
 $vararg_buffer9 = sp + 32 | 0;
 $vararg_buffer6 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $3 = HEAP32[(HEAP32[$this + 48 >> 2] | 0) + 8 >> 2] | 0;
 $7 = HEAP32[(HEAP32[$this + 52 >> 2] | 0) + 8 >> 2] | 0;
 __Z5b2LogPKcz(85560, sp);
 HEAP32[$vararg_buffer1 >> 2] = $3;
 __Z5b2LogPKcz(86496, $vararg_buffer1);
 HEAP32[$vararg_buffer3 >> 2] = $7;
 __Z5b2LogPKcz(86528, $vararg_buffer3);
 HEAP32[$vararg_buffer6 >> 2] = HEAPU8[$this + 61 >> 0];
 __Z5b2LogPKcz(86560, $vararg_buffer6);
 $16 = +HEAPF32[$this + 72 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 68 >> 2];
 HEAP32[$vararg_buffer9 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer9 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr12 = $vararg_buffer9 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $16;
 HEAP32[$vararg_ptr12 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr12 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(85584, $vararg_buffer9);
 $22 = +HEAPF32[$this + 80 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 76 >> 2];
 HEAP32[$vararg_buffer13 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer13 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr16 = $vararg_buffer13 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $22;
 HEAP32[$vararg_ptr16 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr16 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(85632, $vararg_buffer13);
 $28 = +HEAPF32[$this + 96 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 92 >> 2];
 HEAP32[$vararg_buffer17 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer17 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr20 = $vararg_buffer17 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $28;
 HEAP32[$vararg_ptr20 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr20 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(86600, $vararg_buffer17);
 $34 = +HEAPF32[$this + 104 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 100 >> 2];
 HEAP32[$vararg_buffer21 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer21 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr24 = $vararg_buffer21 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $34;
 HEAP32[$vararg_ptr24 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr24 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(86648, $vararg_buffer21);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 84 >> 2];
 HEAP32[$vararg_buffer25 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer25 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(85680, $vararg_buffer25);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 88 >> 2];
 HEAP32[$vararg_buffer28 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer28 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(85712, $vararg_buffer28);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 112 >> 2];
 HEAP32[$vararg_buffer31 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer31 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(85744, $vararg_buffer31);
 HEAP32[$vararg_buffer34 >> 2] = HEAP32[$this + 56 >> 2];
 __Z5b2LogPKcz(86896, $vararg_buffer34);
 STACKTOP = sp;
 return;
}

function __ZNSt3__17__sort4IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_T_($__x1, $__x2, $__x3, $__x4, $__c) {
 $__x1 = $__x1 | 0;
 $__x2 = $__x2 | 0;
 $__x3 = $__x3 | 0;
 $__x4 = $__x4 | 0;
 $__c = $__c | 0;
 var $$0$i = 0, $1 = 0, $10 = 0, $104 = 0, $106 = 0, $109 = 0, $110 = 0, $115 = 0, $116 = 0, $120 = 0, $127 = 0, $129 = 0, $132 = 0, $133 = 0, $138 = 0, $139 = 0, $143 = 0, $15 = 0, $150 = 0, $152 = 0, $155 = 0, $156 = 0, $16 = 0, $161 = 0, $162 = 0, $166 = 0, $20 = 0, $26 = 0, $28 = 0, $3 = 0, $31 = 0, $32 = 0, $37 = 0, $38 = 0, $4 = 0, $42 = 0, $46 = 0, $48 = 0, $51 = 0, $52 = 0, $57 = 0, $58 = 0, $6 = 0, $62 = 0, $66 = 0, $71 = 0, $72 = 0, $76 = 0, $82 = 0, $84 = 0, $87 = 0, $88 = 0, $9 = 0, $93 = 0, $94 = 0, $98 = 0, $__r$0 = 0;
 $1 = FUNCTION_TABLE_iii[HEAP32[$__c >> 2] & 31]($__x2, $__x1) | 0;
 $3 = FUNCTION_TABLE_iii[HEAP32[$__c >> 2] & 31]($__x3, $__x2) | 0;
 do if ($1) {
  $46 = $__x1;
  $48 = HEAP32[$46 >> 2] | 0;
  $51 = HEAP32[$46 + 4 >> 2] | 0;
  if ($3) {
   $52 = $__x3;
   $57 = HEAP32[$52 + 4 >> 2] | 0;
   $58 = $__x1;
   HEAP32[$58 >> 2] = HEAP32[$52 >> 2];
   HEAP32[$58 + 4 >> 2] = $57;
   $62 = $__x3;
   HEAP32[$62 >> 2] = $48;
   HEAP32[$62 + 4 >> 2] = $51;
   $$0$i = 1;
   break;
  }
  $66 = $__x2;
  $71 = HEAP32[$66 + 4 >> 2] | 0;
  $72 = $__x1;
  HEAP32[$72 >> 2] = HEAP32[$66 >> 2];
  HEAP32[$72 + 4 >> 2] = $71;
  $76 = $__x2;
  HEAP32[$76 >> 2] = $48;
  HEAP32[$76 + 4 >> 2] = $51;
  if (FUNCTION_TABLE_iii[HEAP32[$__c >> 2] & 31]($__x3, $__x2) | 0) {
   $82 = $__x2;
   $84 = HEAP32[$82 >> 2] | 0;
   $87 = HEAP32[$82 + 4 >> 2] | 0;
   $88 = $__x3;
   $93 = HEAP32[$88 + 4 >> 2] | 0;
   $94 = $__x2;
   HEAP32[$94 >> 2] = HEAP32[$88 >> 2];
   HEAP32[$94 + 4 >> 2] = $93;
   $98 = $__x3;
   HEAP32[$98 >> 2] = $84;
   HEAP32[$98 + 4 >> 2] = $87;
   $$0$i = 2;
  } else $$0$i = 1;
 } else if ($3) {
  $4 = $__x2;
  $6 = HEAP32[$4 >> 2] | 0;
  $9 = HEAP32[$4 + 4 >> 2] | 0;
  $10 = $__x3;
  $15 = HEAP32[$10 + 4 >> 2] | 0;
  $16 = $__x2;
  HEAP32[$16 >> 2] = HEAP32[$10 >> 2];
  HEAP32[$16 + 4 >> 2] = $15;
  $20 = $__x3;
  HEAP32[$20 >> 2] = $6;
  HEAP32[$20 + 4 >> 2] = $9;
  if (FUNCTION_TABLE_iii[HEAP32[$__c >> 2] & 31]($__x2, $__x1) | 0) {
   $26 = $__x1;
   $28 = HEAP32[$26 >> 2] | 0;
   $31 = HEAP32[$26 + 4 >> 2] | 0;
   $32 = $__x2;
   $37 = HEAP32[$32 + 4 >> 2] | 0;
   $38 = $__x1;
   HEAP32[$38 >> 2] = HEAP32[$32 >> 2];
   HEAP32[$38 + 4 >> 2] = $37;
   $42 = $__x2;
   HEAP32[$42 >> 2] = $28;
   HEAP32[$42 + 4 >> 2] = $31;
   $$0$i = 2;
  } else $$0$i = 1;
 } else $$0$i = 0; while (0);
 if (!(FUNCTION_TABLE_iii[HEAP32[$__c >> 2] & 31]($__x4, $__x3) | 0)) {
  $__r$0 = $$0$i;
  return $__r$0 | 0;
 }
 $104 = $__x3;
 $106 = HEAP32[$104 >> 2] | 0;
 $109 = HEAP32[$104 + 4 >> 2] | 0;
 $110 = $__x4;
 $115 = HEAP32[$110 + 4 >> 2] | 0;
 $116 = $__x3;
 HEAP32[$116 >> 2] = HEAP32[$110 >> 2];
 HEAP32[$116 + 4 >> 2] = $115;
 $120 = $__x4;
 HEAP32[$120 >> 2] = $106;
 HEAP32[$120 + 4 >> 2] = $109;
 if (!(FUNCTION_TABLE_iii[HEAP32[$__c >> 2] & 31]($__x3, $__x2) | 0)) {
  $__r$0 = $$0$i + 1 | 0;
  return $__r$0 | 0;
 }
 $127 = $__x2;
 $129 = HEAP32[$127 >> 2] | 0;
 $132 = HEAP32[$127 + 4 >> 2] | 0;
 $133 = $__x3;
 $138 = HEAP32[$133 + 4 >> 2] | 0;
 $139 = $__x2;
 HEAP32[$139 >> 2] = HEAP32[$133 >> 2];
 HEAP32[$139 + 4 >> 2] = $138;
 $143 = $__x3;
 HEAP32[$143 >> 2] = $129;
 HEAP32[$143 + 4 >> 2] = $132;
 if (!(FUNCTION_TABLE_iii[HEAP32[$__c >> 2] & 31]($__x2, $__x1) | 0)) {
  $__r$0 = $$0$i + 2 | 0;
  return $__r$0 | 0;
 }
 $150 = $__x1;
 $152 = HEAP32[$150 >> 2] | 0;
 $155 = HEAP32[$150 + 4 >> 2] | 0;
 $156 = $__x2;
 $161 = HEAP32[$156 + 4 >> 2] | 0;
 $162 = $__x1;
 HEAP32[$162 >> 2] = HEAP32[$156 >> 2];
 HEAP32[$162 + 4 >> 2] = $161;
 $166 = $__x2;
 HEAP32[$166 >> 2] = $152;
 HEAP32[$166 + 4 >> 2] = $155;
 $__r$0 = $$0$i + 3 | 0;
 return $__r$0 | 0;
}

function __ZN12b2WheelJoint4DumpEv($this) {
 $this = $this | 0;
 var $16 = 0.0, $22 = 0.0, $28 = 0.0, $3 = 0, $7 = 0, $vararg_buffer1 = 0, $vararg_buffer13 = 0, $vararg_buffer17 = 0, $vararg_buffer21 = 0, $vararg_buffer24 = 0, $vararg_buffer27 = 0, $vararg_buffer3 = 0, $vararg_buffer30 = 0, $vararg_buffer33 = 0, $vararg_buffer36 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $vararg_buffer36 = sp + 120 | 0;
 $vararg_buffer33 = sp + 112 | 0;
 $vararg_buffer30 = sp + 104 | 0;
 $vararg_buffer27 = sp + 96 | 0;
 $vararg_buffer24 = sp + 88 | 0;
 $vararg_buffer21 = sp + 80 | 0;
 $vararg_buffer17 = sp + 64 | 0;
 $vararg_buffer13 = sp + 48 | 0;
 $vararg_buffer9 = sp + 32 | 0;
 $vararg_buffer6 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $3 = HEAP32[(HEAP32[$this + 48 >> 2] | 0) + 8 >> 2] | 0;
 $7 = HEAP32[(HEAP32[$this + 52 >> 2] | 0) + 8 >> 2] | 0;
 __Z5b2LogPKcz(86472, sp);
 HEAP32[$vararg_buffer1 >> 2] = $3;
 __Z5b2LogPKcz(86496, $vararg_buffer1);
 HEAP32[$vararg_buffer3 >> 2] = $7;
 __Z5b2LogPKcz(86528, $vararg_buffer3);
 HEAP32[$vararg_buffer6 >> 2] = HEAPU8[$this + 61 >> 0];
 __Z5b2LogPKcz(86560, $vararg_buffer6);
 $16 = +HEAPF32[$this + 80 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 76 >> 2];
 HEAP32[$vararg_buffer9 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer9 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr12 = $vararg_buffer9 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $16;
 HEAP32[$vararg_ptr12 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr12 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(86600, $vararg_buffer9);
 $22 = +HEAPF32[$this + 88 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 84 >> 2];
 HEAP32[$vararg_buffer13 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer13 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr16 = $vararg_buffer13 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $22;
 HEAP32[$vararg_ptr16 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr16 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(86648, $vararg_buffer13);
 $28 = +HEAPF32[$this + 96 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 92 >> 2];
 HEAP32[$vararg_buffer17 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer17 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr20 = $vararg_buffer17 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $28;
 HEAP32[$vararg_ptr20 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr20 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(86696, $vararg_buffer17);
 HEAP32[$vararg_buffer21 >> 2] = HEAPU8[$this + 128 >> 0];
 __Z5b2LogPKcz(86736, $vararg_buffer21);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 124 >> 2];
 HEAP32[$vararg_buffer24 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer24 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(86768, $vararg_buffer24);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 120 >> 2];
 HEAP32[$vararg_buffer27 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer27 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(86800, $vararg_buffer27);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 68 >> 2];
 HEAP32[$vararg_buffer30 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer30 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(86832, $vararg_buffer30);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 72 >> 2];
 HEAP32[$vararg_buffer33 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer33 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(86864, $vararg_buffer33);
 HEAP32[$vararg_buffer36 >> 2] = HEAP32[$this + 56 >> 2];
 __Z5b2LogPKcz(86896, $vararg_buffer36);
 STACKTOP = sp;
 return;
}

function __ZNK20b2SeparationFunction8EvaluateEiif($this, $indexA, $indexB, $t) {
 $this = $this | 0;
 $indexA = $indexA | 0;
 $indexB = $indexB | 0;
 $t = +$t;
 var $$0 = 0.0, $0 = 0.0, $104 = 0.0, $105 = 0.0, $132 = 0.0, $135 = 0.0, $142 = 0.0, $145 = 0.0, $154 = 0, $162 = 0, $168 = 0.0, $169 = 0.0, $184 = 0.0, $187 = 0.0, $194 = 0.0, $197 = 0.0, $205 = 0, $21 = 0.0, $213 = 0, $219 = 0.0, $22 = 0.0, $220 = 0.0, $23 = 0.0, $25 = 0.0, $28 = 0.0, $34 = 0.0, $35 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $60 = 0.0, $63 = 0.0, $69 = 0.0, $70 = 0.0, $72 = 0, $73 = 0, $81 = 0, $87 = 0.0, $88 = 0.0, $90 = 0, $98 = 0;
 $0 = 1.0 - $t;
 $21 = $0 * +HEAPF32[$this + 32 >> 2] + +HEAPF32[$this + 36 >> 2] * $t;
 $22 = +Math_sin(+$21);
 $23 = +Math_cos(+$21);
 $25 = +HEAPF32[$this + 8 >> 2];
 $28 = +HEAPF32[$this + 12 >> 2];
 $34 = $0 * +HEAPF32[$this + 16 >> 2] + +HEAPF32[$this + 24 >> 2] * $t - ($23 * $25 - $22 * $28);
 $35 = $0 * +HEAPF32[$this + 20 >> 2] + +HEAPF32[$this + 28 >> 2] * $t - ($22 * $25 + $23 * $28);
 $56 = $0 * +HEAPF32[$this + 68 >> 2] + +HEAPF32[$this + 72 >> 2] * $t;
 $57 = +Math_sin(+$56);
 $58 = +Math_cos(+$56);
 $60 = +HEAPF32[$this + 44 >> 2];
 $63 = +HEAPF32[$this + 48 >> 2];
 $69 = $0 * +HEAPF32[$this + 52 >> 2] + +HEAPF32[$this + 60 >> 2] * $t - ($58 * $60 - $57 * $63);
 $70 = $0 * +HEAPF32[$this + 56 >> 2] + +HEAPF32[$this + 64 >> 2] * $t - ($57 * $60 + $58 * $63);
 $72 = HEAP32[$this + 80 >> 2] | 0;
 if (($72 | 0) == 1) {
  $132 = +HEAPF32[$this + 92 >> 2];
  $135 = +HEAPF32[$this + 96 >> 2];
  $142 = +HEAPF32[$this + 84 >> 2];
  $145 = +HEAPF32[$this + 88 >> 2];
  $154 = HEAP32[$this + 4 >> 2] | 0;
  if (($indexB | 0) <= -1) ___assert_fail(90792, 90824, 103, 90888);
  if ((HEAP32[$154 + 20 >> 2] | 0) <= ($indexB | 0)) ___assert_fail(90792, 90824, 103, 90888);
  $162 = (HEAP32[$154 + 16 >> 2] | 0) + ($indexB << 3) | 0;
  $168 = +HEAPF32[$162 >> 2];
  $169 = +HEAPF32[$162 + 4 >> 2];
  $$0 = ($23 * $132 - $22 * $135) * ($69 + ($58 * $168 - $57 * $169) - ($34 + ($23 * $142 - $22 * $145))) + ($22 * $132 + $23 * $135) * ($70 + ($57 * $168 + $58 * $169) - ($35 + ($22 * $142 + $23 * $145)));
  return +$$0;
 } else if (!$72) {
  $73 = HEAP32[$this >> 2] | 0;
  if (($indexA | 0) <= -1) ___assert_fail(90792, 90824, 103, 90888);
  if ((HEAP32[$73 + 20 >> 2] | 0) <= ($indexA | 0)) ___assert_fail(90792, 90824, 103, 90888);
  $81 = (HEAP32[$73 + 16 >> 2] | 0) + ($indexA << 3) | 0;
  $87 = +HEAPF32[$81 >> 2];
  $88 = +HEAPF32[$81 + 4 >> 2];
  $90 = HEAP32[$this + 4 >> 2] | 0;
  if (($indexB | 0) <= -1) ___assert_fail(90792, 90824, 103, 90888);
  if ((HEAP32[$90 + 20 >> 2] | 0) <= ($indexB | 0)) ___assert_fail(90792, 90824, 103, 90888);
  $98 = (HEAP32[$90 + 16 >> 2] | 0) + ($indexB << 3) | 0;
  $104 = +HEAPF32[$98 >> 2];
  $105 = +HEAPF32[$98 + 4 >> 2];
  $$0 = +HEAPF32[$this + 92 >> 2] * ($69 + ($58 * $104 - $57 * $105) - ($34 + ($23 * $87 - $22 * $88))) + +HEAPF32[$this + 96 >> 2] * ($70 + ($57 * $104 + $58 * $105) - ($35 + ($22 * $87 + $23 * $88)));
  return +$$0;
 } else if (($72 | 0) == 2) {
  $184 = +HEAPF32[$this + 92 >> 2];
  $187 = +HEAPF32[$this + 96 >> 2];
  $194 = +HEAPF32[$this + 84 >> 2];
  $197 = +HEAPF32[$this + 88 >> 2];
  $205 = HEAP32[$this >> 2] | 0;
  if (($indexA | 0) <= -1) ___assert_fail(90792, 90824, 103, 90888);
  if ((HEAP32[$205 + 20 >> 2] | 0) <= ($indexA | 0)) ___assert_fail(90792, 90824, 103, 90888);
  $213 = (HEAP32[$205 + 16 >> 2] | 0) + ($indexA << 3) | 0;
  $219 = +HEAPF32[$213 >> 2];
  $220 = +HEAPF32[$213 + 4 >> 2];
  $$0 = ($58 * $184 - $57 * $187) * ($34 + ($23 * $219 - $22 * $220) - ($69 + ($58 * $194 - $57 * $197))) + ($57 * $184 + $58 * $187) * ($35 + ($22 * $219 + $23 * $220) - ($70 + ($57 * $194 + $58 * $197)));
  return +$$0;
 } else ___assert_fail(90768, 90688, 239, 90776);
 return +(0.0);
}

function _png_icc_set_sRGB($png_ptr, $colorspace, $profile, $adler) {
 $png_ptr = $png_ptr | 0;
 $colorspace = $colorspace | 0;
 $profile = $profile | 0;
 $adler = $adler | 0;
 var $$0$i = 0, $138 = 0, $145 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $i$05$i = 0, $intent$04$i = 0, $intent$1$i = 0, $intent$2$i = 0, $length$03$i = 0, $length$1$i = 0, $length$2$i = 0, label = 0;
 if ((HEAP8[$png_ptr + 644 >> 0] & 48) == 48) return;
 $21 = (HEAPU8[$profile + 85 >> 0] | 0) << 16 | (HEAPU8[$profile + 84 >> 0] | 0) << 24 | (HEAPU8[$profile + 86 >> 0] | 0) << 8 | (HEAPU8[$profile + 87 >> 0] | 0);
 $22 = $profile + 88 | 0;
 $23 = $profile + 89 | 0;
 $24 = $profile + 90 | 0;
 $25 = $profile + 91 | 0;
 $26 = $profile + 92 | 0;
 $27 = $profile + 93 | 0;
 $28 = $profile + 94 | 0;
 $29 = $profile + 95 | 0;
 $30 = $profile + 96 | 0;
 $31 = $profile + 97 | 0;
 $32 = $profile + 98 | 0;
 $33 = $profile + 99 | 0;
 $34 = $profile + 1 | 0;
 $35 = $profile + 2 | 0;
 $36 = $profile + 3 | 0;
 $37 = $profile + 64 | 0;
 $38 = $profile + 65 | 0;
 $39 = $profile + 66 | 0;
 $40 = $profile + 67 | 0;
 $i$05$i = 0;
 $intent$04$i = 65536;
 $length$03$i = 0;
 while (1) {
  if (($21 | 0) == (HEAP32[73676 + ($i$05$i << 5) >> 2] | 0)) if (((HEAPU8[$23 >> 0] | 0) << 16 | (HEAPU8[$22 >> 0] | 0) << 24 | (HEAPU8[$24 >> 0] | 0) << 8 | (HEAPU8[$25 >> 0] | 0) | 0) == (HEAP32[73680 + ($i$05$i << 5) >> 2] | 0)) if (((HEAPU8[$27 >> 0] | 0) << 16 | (HEAPU8[$26 >> 0] | 0) << 24 | (HEAPU8[$28 >> 0] | 0) << 8 | (HEAPU8[$29 >> 0] | 0) | 0) == (HEAP32[73684 + ($i$05$i << 5) >> 2] | 0)) if (((HEAPU8[$31 >> 0] | 0) << 16 | (HEAPU8[$30 >> 0] | 0) << 24 | (HEAPU8[$32 >> 0] | 0) << 8 | (HEAPU8[$33 >> 0] | 0) | 0) == (HEAP32[73688 + ($i$05$i << 5) >> 2] | 0)) {
   if (!$length$03$i) {
    $intent$1$i = (HEAPU8[$38 >> 0] | 0) << 16 | (HEAPU8[$37 >> 0] | 0) << 24 | (HEAPU8[$39 >> 0] | 0) << 8 | (HEAPU8[$40 >> 0] | 0);
    $length$1$i = (HEAPU8[$34 >> 0] | 0) << 16 | (HEAPU8[$profile >> 0] | 0) << 24 | (HEAPU8[$35 >> 0] | 0) << 8 | (HEAPU8[$36 >> 0] | 0);
   } else {
    $intent$1$i = $intent$04$i;
    $length$1$i = $length$03$i;
   }
   if (($length$1$i | 0) == (HEAP32[73672 + ($i$05$i << 5) >> 2] | 0)) if (($intent$1$i | 0) == (HEAPU16[73694 + ($i$05$i << 5) >> 1] | 0 | 0)) break; else {
    $intent$2$i = $intent$1$i;
    $length$2$i = $length$1$i;
   } else {
    $intent$2$i = $intent$1$i;
    $length$2$i = $length$1$i;
   }
  } else {
   $intent$2$i = $intent$04$i;
   $length$2$i = $length$03$i;
  } else {
   $intent$2$i = $intent$04$i;
   $length$2$i = $length$03$i;
  } else {
   $intent$2$i = $intent$04$i;
   $length$2$i = $length$03$i;
  } else {
   $intent$2$i = $intent$04$i;
   $length$2$i = $length$03$i;
  }
  $145 = $i$05$i + 1 | 0;
  if ($145 >>> 0 < 7) {
   $i$05$i = $145;
   $intent$04$i = $intent$2$i;
   $length$03$i = $length$2$i;
  } else {
   label = 22;
   break;
  }
 }
 if ((label | 0) == 22) return;
 if (!$adler) $$0$i = _adler32(_adler32(0, 0, 0) | 0, $profile, $length$1$i) | 0; else $$0$i = $adler;
 if (($$0$i | 0) == (HEAP32[73664 + ($i$05$i << 5) >> 2] | 0)) {
  $138 = _crc32(_crc32(0, 0, 0) | 0, $profile, $length$1$i) | 0;
  if (($138 | 0) == (HEAP32[73668 + ($i$05$i << 5) >> 2] | 0)) {
   if (($i$05$i + -5 | 0) >>> 0 < 2) _png_chunk_report($png_ptr, 73888, 2); else if (($i$05$i + -4 | 0) >>> 0 < 3) _png_chunk_report($png_ptr, 73920, 0);
   _png_colorspace_set_sRGB($png_ptr, $colorspace, (HEAPU8[$38 >> 0] | 0) << 16 | (HEAPU8[$37 >> 0] | 0) << 24 | (HEAPU8[$39 >> 0] | 0) << 8 | (HEAPU8[$40 >> 0] | 0)) | 0;
   return;
  }
 }
 _png_chunk_report($png_ptr, 73968, 0);
 return;
}

function __ZN12b2MotorJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $105 = 0.0, $106 = 0, $107 = 0, $11 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0, $118 = 0.0, $12 = 0.0, $121 = 0.0, $124 = 0.0, $127 = 0.0, $129 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $161 = 0.0, $162 = 0.0, $163 = 0, $168 = 0, $172 = 0.0, $173 = 0.0, $174 = 0, $18 = 0, $2 = 0, $24 = 0.0, $25 = 0.0, $27 = 0.0, $29 = 0.0, $3 = 0, $31 = 0.0, $33 = 0.0, $35 = 0.0, $36 = 0.0, $42 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $58 = 0.0, $60 = 0.0, $61 = 0.0, $63 = 0.0, $65 = 0.0, $67 = 0.0, $70 = 0.0, $77 = 0.0, $80 = 0.0, $90 = 0.0, $91 = 0.0;
 $0 = $this + 104 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $data + 28 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $5 = $3 + ($1 * 12 | 0) | 0;
 $11 = +HEAPF32[$5 >> 2];
 $12 = +HEAPF32[$5 + 4 >> 2];
 $14 = +HEAPF32[$3 + ($1 * 12 | 0) + 8 >> 2];
 $15 = $this + 108 | 0;
 $16 = HEAP32[$15 >> 2] | 0;
 $18 = $3 + ($16 * 12 | 0) | 0;
 $24 = +HEAPF32[$18 >> 2];
 $25 = +HEAPF32[$18 + 4 >> 2];
 $27 = +HEAPF32[$3 + ($16 * 12 | 0) + 8 >> 2];
 $29 = +HEAPF32[$this + 156 >> 2];
 $31 = +HEAPF32[$this + 160 >> 2];
 $33 = +HEAPF32[$this + 164 >> 2];
 $35 = +HEAPF32[$this + 168 >> 2];
 $36 = +HEAPF32[$data >> 2];
 $42 = +HEAPF32[$data + 4 >> 2] * +HEAPF32[$this + 100 >> 2];
 $50 = $this + 88 | 0;
 $51 = +HEAPF32[$50 >> 2];
 $54 = $36 * +HEAPF32[$this + 96 >> 2];
 $55 = $51 - +HEAPF32[$this + 188 >> 2] * ($27 - $14 + $42 * +HEAPF32[$this + 152 >> 2]);
 $56 = -$54;
 $58 = $55 < $54 ? $55 : $54;
 $60 = $58 < $56 ? $56 : $58;
 HEAPF32[$50 >> 2] = $60;
 $61 = $60 - $51;
 $63 = $14 - $33 * $61;
 $65 = $27 + $35 * $61;
 $67 = +HEAPF32[$this + 124 >> 2];
 $70 = +HEAPF32[$this + 120 >> 2];
 $77 = +HEAPF32[$this + 116 >> 2];
 $80 = +HEAPF32[$this + 112 >> 2];
 $90 = +HEAPF32[$this + 144 >> 2] * $42 + ($77 * $63 + ($24 - $67 * $65 - $11));
 $91 = $42 * +HEAPF32[$this + 148 >> 2] + ($25 + $70 * $65 - $12 - $80 * $63);
 $105 = +HEAPF32[$this + 176 >> 2] * $90 + +HEAPF32[$this + 184 >> 2] * $91;
 $106 = $this + 80 | 0;
 $107 = $106;
 $113 = +HEAPF32[$107 >> 2];
 $114 = +HEAPF32[$107 + 4 >> 2];
 $115 = $113 - (+HEAPF32[$this + 172 >> 2] * $90 + +HEAPF32[$this + 180 >> 2] * $91);
 HEAPF32[$106 >> 2] = $115;
 $116 = $this + 84 | 0;
 $118 = +HEAPF32[$116 >> 2] - $105;
 HEAPF32[$116 >> 2] = $118;
 $121 = $36 * +HEAPF32[$this + 92 >> 2];
 $124 = $115 * $115 + $118 * $118;
 if ($124 > $121 * $121) {
  $127 = +Math_sqrt(+$124);
  if ($127 < 1.1920928955078125e-07) {
   $133 = $115;
   $135 = $118;
  } else {
   $129 = 1.0 / $127;
   $130 = $115 * $129;
   HEAPF32[$106 >> 2] = $130;
   $131 = $118 * $129;
   HEAPF32[$116 >> 2] = $131;
   $133 = $130;
   $135 = $131;
  }
  $132 = $121 * $133;
  HEAPF32[$106 >> 2] = $132;
  $134 = $121 * $135;
  HEAPF32[$116 >> 2] = $134;
  $137 = $132;
  $139 = $134;
 } else {
  $137 = $115;
  $139 = $118;
 }
 $136 = $137 - $113;
 $138 = $139 - $114;
 $161 = +($11 - $29 * $136);
 $162 = +($12 - $29 * $138);
 $163 = (HEAP32[$2 >> 2] | 0) + ((HEAP32[$0 >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$163 >> 2] = $161;
 HEAPF32[$163 + 4 >> 2] = $162;
 $168 = HEAP32[$2 >> 2] | 0;
 HEAPF32[$168 + ((HEAP32[$0 >> 2] | 0) * 12 | 0) + 8 >> 2] = $63 - $33 * ($80 * $138 - $136 * $77);
 $172 = +($24 + $31 * $136);
 $173 = +($25 + $31 * $138);
 $174 = $168 + ((HEAP32[$15 >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$174 >> 2] = $172;
 HEAPF32[$174 + 4 >> 2] = $173;
 HEAPF32[(HEAP32[$2 >> 2] | 0) + ((HEAP32[$15 >> 2] | 0) * 12 | 0) + 8 >> 2] = $65 + $35 * ($138 * $70 - $136 * $67);
 return;
}

function _luaL_traceback($L, $L1, $msg, $level) {
 $L = $L | 0;
 $L1 = $L1 | 0;
 $msg = $msg | 0;
 $level = $level | 0;
 var $$0$be = 0, $$in = 0, $$le$1$i = 0, $0 = 0, $13 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $32 = 0, $35 = 0, $37 = 0, $38 = 0, $45 = 0, $46 = 0, $6 = 0, $8 = 0, $ar = 0, $ar$i = 0, $le$0$i = 0, $le$1$lcssa$i = 0, $le$11$i = 0, $li$0$i = 0, $li$0$i$phi = 0, $li$12$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $vararg_buffer14 = sp + 40 | 0;
 $vararg_buffer10 = sp + 32 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $ar$i = sp + 148 | 0;
 $ar = sp + 48 | 0;
 $0 = _lua_gettop($L) | 0;
 $le$0$i = 1;
 $li$0$i = 1;
 while (1) if (!(_lua_getstack($L1, $le$0$i, $ar$i) | 0)) break; else {
  $li$0$i$phi = $le$0$i;
  $le$0$i = $le$0$i << 1;
  $li$0$i = $li$0$i$phi;
 }
 if (($li$0$i | 0) < ($le$0$i | 0)) {
  $le$11$i = $le$0$i;
  $li$12$i = $li$0$i;
  while (1) {
   $6 = ($le$11$i + $li$12$i | 0) / 2 | 0;
   $8 = (_lua_getstack($L1, $6, $ar$i) | 0) == 0;
   $$le$1$i = $8 ? $6 : $le$11$i;
   $li$12$i = $8 ? $li$12$i : $6 + 1 | 0;
   if (($li$12$i | 0) >= ($$le$1$i | 0)) {
    $le$1$lcssa$i = $$le$1$i;
    break;
   } else $le$11$i = $$le$1$i;
  }
 } else $le$1$lcssa$i = $le$0$i;
 $13 = ($le$1$lcssa$i + -1 | 0) > 22 ? 12 : 0;
 if ($msg) {
  HEAP32[$vararg_buffer >> 2] = $msg;
  _lua_pushfstring($L, 66960, $vararg_buffer) | 0;
 }
 _lua_pushlstring($L, 55072, 16) | 0;
 if (!(_lua_getstack($L1, $level, $ar) | 0)) {
  $45 = _lua_gettop($L) | 0;
  $46 = $45 - $0 | 0;
  _lua_concat($L, $46);
  STACKTOP = sp;
  return;
 }
 $17 = $le$1$lcssa$i + -11 | 0;
 $18 = $ar + 36 | 0;
 $19 = $ar + 20 | 0;
 $20 = $ar + 8 | 0;
 $21 = $ar + 12 | 0;
 $22 = $ar + 24 | 0;
 $23 = $ar + 4 | 0;
 $24 = $ar + 35 | 0;
 $$in = $level;
 while (1) {
  $25 = $$in + 1 | 0;
  if (($25 | 0) == ($13 | 0)) {
   _lua_pushlstring($L, 55096, 5) | 0;
   $$0$be = $17;
  } else {
   _lua_getinfo($L1, 55104, $ar) | 0;
   HEAP32[$vararg_buffer1 >> 2] = $18;
   _lua_pushfstring($L, 55112, $vararg_buffer1) | 0;
   $27 = HEAP32[$19 >> 2] | 0;
   if (($27 | 0) > 0) {
    HEAP32[$vararg_buffer4 >> 2] = $27;
    _lua_pushfstring($L, 55120, $vararg_buffer4) | 0;
   }
   _lua_pushlstring($L, 55128, 4) | 0;
   do if (!(_pushglobalfuncname($L, $ar) | 0)) {
    $32 = HEAP32[$20 >> 2] | 0;
    if (HEAP8[$32 >> 0] | 0) {
     $35 = HEAP32[$23 >> 2] | 0;
     HEAP32[$vararg_buffer10 >> 2] = $32;
     HEAP32[$vararg_buffer10 + 4 >> 2] = $35;
     _lua_pushfstring($L, 55824, $vararg_buffer10) | 0;
     break;
    }
    $37 = HEAP8[HEAP32[$21 >> 2] >> 0] | 0;
    if ($37 << 24 >> 24 == 67) {
     _lua_pushlstring($L, 59048, 1) | 0;
     break;
    } else if ($37 << 24 >> 24 == 109) {
     _lua_pushlstring($L, 55832, 10) | 0;
     break;
    } else {
     $38 = HEAP32[$22 >> 2] | 0;
     HEAP32[$vararg_buffer14 >> 2] = $18;
     HEAP32[$vararg_buffer14 + 4 >> 2] = $38;
     _lua_pushfstring($L, 55848, $vararg_buffer14) | 0;
     break;
    }
   } else {
    HEAP32[$vararg_buffer7 >> 2] = _lua_tolstring($L, -1, 0) | 0;
    _lua_pushfstring($L, 55808, $vararg_buffer7) | 0;
    _lua_rotate($L, -2, -1);
    _lua_settop($L, -2);
   } while (0);
   if (HEAP8[$24 >> 0] | 0) _lua_pushlstring($L, 55136, 20) | 0;
   _lua_concat($L, (_lua_gettop($L) | 0) - $0 | 0);
   $$0$be = $25;
  }
  if (!(_lua_getstack($L1, $$0$be, $ar) | 0)) break; else $$in = $$0$be;
 }
 $45 = _lua_gettop($L) | 0;
 $46 = $45 - $0 | 0;
 _lua_concat($L, $46);
 STACKTOP = sp;
 return;
}

function _display_new_shader($strvert, $strfragcolor, $strfragtex, $error) {
 $strvert = $strvert | 0;
 $strfragcolor = $strfragcolor | 0;
 $strfragtex = $strfragtex | 0;
 $error = $error | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$034 = 0, $15 = 0, $17 = 0, $19 = 0, $21 = 0, $23 = 0, $28 = 0, $30 = 0, $36 = 0, $38 = 0, $new_strfragcolor = 0, $new_strfragtex = 0, $new_strvert = 0, $status = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $new_strvert = sp + 24 | 0;
 $new_strfragcolor = sp + 16 | 0;
 $new_strfragtex = sp + 8 | 0;
 $status = sp;
 if (!$strvert) label = 3; else if (!(HEAP8[$strvert >> 0] | 0)) label = 3; else $$01 = $strvert;
 if ((label | 0) == 3) $$01 = 16536;
 if (!$strfragcolor) label = 6; else if (!(HEAP8[$strfragcolor >> 0] | 0)) label = 6; else $$02 = $strfragcolor;
 if ((label | 0) == 6) $$02 = 17144;
 if (!$strfragtex) label = 9; else if (!(HEAP8[$strfragtex >> 0] | 0)) label = 9; else $$034 = $strfragtex;
 if ((label | 0) == 9) if (!17232) ___assert_fail(19048, 18224, 755, 19064); else $$034 = 17232;
 if (!$$02) ___assert_fail(19088, 18224, 756, 19064);
 if (!$$01) ___assert_fail(19104, 18224, 757, 19064);
 HEAP32[$new_strvert >> 2] = 16464;
 HEAP32[$new_strvert + 4 >> 2] = $$01;
 HEAP32[$new_strfragcolor >> 2] = 16464;
 HEAP32[$new_strfragcolor + 4 >> 2] = $$02;
 HEAP32[$new_strfragtex >> 2] = 16464;
 HEAP32[$new_strfragtex + 4 >> 2] = $$034;
 $15 = _glCreateShader(35633) | 0;
 if (!$15) ___assert_fail(19112, 18224, 773, 19064);
 _glShaderSource($15 | 0, 2, $new_strvert | 0, 0);
 _glCompileShader($15 | 0);
 $17 = _glCreateShader(35632) | 0;
 if (!$17) ___assert_fail(19120, 18224, 778, 19064);
 _glShaderSource($17 | 0, 2, $new_strfragcolor | 0, 0);
 _glCompileShader($17 | 0);
 $19 = _glCreateShader(35632) | 0;
 if (!$19) ___assert_fail(19136, 18224, 783, 19064);
 _glShaderSource($19 | 0, 2, $new_strfragtex | 0, 0);
 _glCompileShader($19 | 0);
 $21 = _glCreateProgram() | 0;
 if (!$21) ___assert_fail(19152, 18224, 788, 19064);
 _glBindAttribLocation($21 | 0, 0, 19168);
 _glBindAttribLocation($21 | 0, 1, 19184);
 _glBindAttribLocation($21 | 0, 2, 19192);
 _glBindAttribLocation($21 | 0, 3, 19208);
 _glAttachShader($21 | 0, $15 | 0);
 _glAttachShader($21 | 0, $17 | 0);
 _glLinkProgram($21 | 0);
 $23 = _glCreateProgram() | 0;
 if (!$23) ___assert_fail(19224, 18224, 798, 19064);
 _glBindAttribLocation($23 | 0, 0, 19168);
 _glBindAttribLocation($23 | 0, 1, 19184);
 _glBindAttribLocation($23 | 0, 2, 19192);
 _glBindAttribLocation($23 | 0, 3, 19208);
 _glAttachShader($23 | 0, $15 | 0);
 _glAttachShader($23 | 0, $19 | 0);
 _glLinkProgram($23 | 0);
 _glGetProgramiv($21 | 0, 35714, $status | 0);
 if ((HEAP32[$status >> 2] | 0) != 1) {
  if (!$error) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $28 = _getShaderError($15) | 0;
  HEAP32[$error >> 2] = $28;
  if ($28) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $30 = _getShaderError($17) | 0;
  HEAP32[$error >> 2] = $30;
  if ($30) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  HEAP32[$error >> 2] = _getShaderError($21) | 0;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _glGetProgramiv($23 | 0, 35714, $status | 0);
 if ((HEAP32[$status >> 2] | 0) == 1) {
  $$0 = _shader_new($21, $23, $15, $17, $19) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!$error) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $36 = _getShaderError($15) | 0;
 HEAP32[$error >> 2] = $36;
 if ($36) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $38 = _getShaderError($19) | 0;
 HEAP32[$error >> 2] = $38;
 if ($38) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[$error >> 2] = _getShaderError($23) | 0;
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN15b2RevoluteJoint4DumpEv($this) {
 $this = $this | 0;
 var $16 = 0.0, $22 = 0.0, $3 = 0, $7 = 0, $vararg_buffer1 = 0, $vararg_buffer13 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer32 = 0, $vararg_buffer35 = 0, $vararg_buffer38 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $vararg_buffer38 = sp + 120 | 0;
 $vararg_buffer35 = sp + 112 | 0;
 $vararg_buffer32 = sp + 104 | 0;
 $vararg_buffer29 = sp + 96 | 0;
 $vararg_buffer26 = sp + 88 | 0;
 $vararg_buffer23 = sp + 80 | 0;
 $vararg_buffer20 = sp + 72 | 0;
 $vararg_buffer17 = sp + 64 | 0;
 $vararg_buffer13 = sp + 48 | 0;
 $vararg_buffer9 = sp + 32 | 0;
 $vararg_buffer6 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $3 = HEAP32[(HEAP32[$this + 48 >> 2] | 0) + 8 >> 2] | 0;
 $7 = HEAP32[(HEAP32[$this + 52 >> 2] | 0) + 8 >> 2] | 0;
 __Z5b2LogPKcz(85960, sp);
 HEAP32[$vararg_buffer1 >> 2] = $3;
 __Z5b2LogPKcz(86496, $vararg_buffer1);
 HEAP32[$vararg_buffer3 >> 2] = $7;
 __Z5b2LogPKcz(86528, $vararg_buffer3);
 HEAP32[$vararg_buffer6 >> 2] = HEAPU8[$this + 61 >> 0];
 __Z5b2LogPKcz(86560, $vararg_buffer6);
 $16 = +HEAPF32[$this + 72 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 68 >> 2];
 HEAP32[$vararg_buffer9 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer9 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr12 = $vararg_buffer9 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $16;
 HEAP32[$vararg_ptr12 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr12 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(86600, $vararg_buffer9);
 $22 = +HEAPF32[$this + 80 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 76 >> 2];
 HEAP32[$vararg_buffer13 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer13 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr16 = $vararg_buffer13 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $22;
 HEAP32[$vararg_ptr16 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr16 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(86648, $vararg_buffer13);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 116 >> 2];
 HEAP32[$vararg_buffer17 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer17 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(86352, $vararg_buffer17);
 HEAP32[$vararg_buffer20 >> 2] = HEAPU8[$this + 112 >> 0];
 __Z5b2LogPKcz(85992, $vararg_buffer20);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 120 >> 2];
 HEAP32[$vararg_buffer23 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer23 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(86024, $vararg_buffer23);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 124 >> 2];
 HEAP32[$vararg_buffer26 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer26 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(86056, $vararg_buffer26);
 HEAP32[$vararg_buffer29 >> 2] = HEAPU8[$this + 100 >> 0];
 __Z5b2LogPKcz(86736, $vararg_buffer29);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 108 >> 2];
 HEAP32[$vararg_buffer32 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer32 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(86768, $vararg_buffer32);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 104 >> 2];
 HEAP32[$vararg_buffer35 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer35 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(86800, $vararg_buffer35);
 HEAP32[$vararg_buffer38 >> 2] = HEAP32[$this + 56 >> 2];
 __Z5b2LogPKcz(86896, $vararg_buffer38);
 STACKTOP = sp;
 return;
}

function __ZNSt3__118__insertion_sort_3IRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_($__first, $__last, $__comp) {
 $__first = $__first | 0;
 $__last = $__last | 0;
 $__comp = $__comp | 0;
 var $0 = 0, $1 = 0, $100 = 0, $104 = 0, $108 = 0, $11 = 0, $113 = 0, $114 = 0, $118 = 0, $12 = 0, $123 = 0, $124 = 0, $130 = 0, $132 = 0, $137 = 0, $138 = 0, $142 = 0, $17 = 0, $18 = 0, $22 = 0, $28 = 0, $3 = 0, $30 = 0, $33 = 0, $34 = 0, $39 = 0, $40 = 0, $44 = 0, $48 = 0, $5 = 0, $50 = 0, $53 = 0, $54 = 0, $59 = 0, $6 = 0, $60 = 0, $64 = 0, $68 = 0, $73 = 0, $74 = 0, $78 = 0, $8 = 0, $84 = 0, $86 = 0, $89 = 0, $90 = 0, $95 = 0, $96 = 0, $__i$02 = 0, $__j$01 = 0, $__j$01$phi = 0, $__j$1 = 0, $__j$1$phi = 0, $__k$0 = 0, $__t = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__t = sp;
 $0 = $__first + 16 | 0;
 $1 = $__first + 8 | 0;
 $3 = FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($1, $__first) | 0;
 $5 = FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($0, $1) | 0;
 do if ($3) {
  $48 = $__first;
  $50 = HEAP32[$48 >> 2] | 0;
  $53 = HEAP32[$48 + 4 >> 2] | 0;
  if ($5) {
   $54 = $0;
   $59 = HEAP32[$54 + 4 >> 2] | 0;
   $60 = $__first;
   HEAP32[$60 >> 2] = HEAP32[$54 >> 2];
   HEAP32[$60 + 4 >> 2] = $59;
   $64 = $0;
   HEAP32[$64 >> 2] = $50;
   HEAP32[$64 + 4 >> 2] = $53;
   break;
  }
  $68 = $1;
  $73 = HEAP32[$68 + 4 >> 2] | 0;
  $74 = $__first;
  HEAP32[$74 >> 2] = HEAP32[$68 >> 2];
  HEAP32[$74 + 4 >> 2] = $73;
  $78 = $1;
  HEAP32[$78 >> 2] = $50;
  HEAP32[$78 + 4 >> 2] = $53;
  if (FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($0, $1) | 0) {
   $84 = $1;
   $86 = HEAP32[$84 >> 2] | 0;
   $89 = HEAP32[$84 + 4 >> 2] | 0;
   $90 = $0;
   $95 = HEAP32[$90 + 4 >> 2] | 0;
   $96 = $1;
   HEAP32[$96 >> 2] = HEAP32[$90 >> 2];
   HEAP32[$96 + 4 >> 2] = $95;
   $100 = $0;
   HEAP32[$100 >> 2] = $86;
   HEAP32[$100 + 4 >> 2] = $89;
  }
 } else if ($5) {
  $6 = $1;
  $8 = HEAP32[$6 >> 2] | 0;
  $11 = HEAP32[$6 + 4 >> 2] | 0;
  $12 = $0;
  $17 = HEAP32[$12 + 4 >> 2] | 0;
  $18 = $1;
  HEAP32[$18 >> 2] = HEAP32[$12 >> 2];
  HEAP32[$18 + 4 >> 2] = $17;
  $22 = $0;
  HEAP32[$22 >> 2] = $8;
  HEAP32[$22 + 4 >> 2] = $11;
  if (FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($1, $__first) | 0) {
   $28 = $__first;
   $30 = HEAP32[$28 >> 2] | 0;
   $33 = HEAP32[$28 + 4 >> 2] | 0;
   $34 = $1;
   $39 = HEAP32[$34 + 4 >> 2] | 0;
   $40 = $__first;
   HEAP32[$40 >> 2] = HEAP32[$34 >> 2];
   HEAP32[$40 + 4 >> 2] = $39;
   $44 = $1;
   HEAP32[$44 >> 2] = $30;
   HEAP32[$44 + 4 >> 2] = $33;
  }
 } while (0);
 $104 = $__first + 24 | 0;
 if (($104 | 0) == ($__last | 0)) {
  STACKTOP = sp;
  return;
 } else {
  $__i$02 = $104;
  $__j$01 = $0;
 }
 while (1) {
  if (FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($__i$02, $__j$01) | 0) {
   $108 = $__i$02;
   $113 = HEAP32[$108 + 4 >> 2] | 0;
   $114 = $__t;
   HEAP32[$114 >> 2] = HEAP32[$108 >> 2];
   HEAP32[$114 + 4 >> 2] = $113;
   $__j$1 = $__i$02;
   $__k$0 = $__j$01;
   while (1) {
    $118 = $__k$0;
    $123 = HEAP32[$118 + 4 >> 2] | 0;
    $124 = $__j$1;
    HEAP32[$124 >> 2] = HEAP32[$118 >> 2];
    HEAP32[$124 + 4 >> 2] = $123;
    if (($__k$0 | 0) == ($__first | 0)) break;
    $130 = $__k$0 + -8 | 0;
    if (FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 31]($__t, $130) | 0) {
     $__j$1$phi = $__k$0;
     $__k$0 = $130;
     $__j$1 = $__j$1$phi;
    } else break;
   }
   $132 = $__t;
   $137 = HEAP32[$132 + 4 >> 2] | 0;
   $138 = $__k$0;
   HEAP32[$138 >> 2] = HEAP32[$132 >> 2];
   HEAP32[$138 + 4 >> 2] = $137;
  }
  $142 = $__i$02 + 8 | 0;
  if (($142 | 0) == ($__last | 0)) break; else {
   $__j$01$phi = $__i$02;
   $__i$02 = $142;
   $__j$01 = $__j$01$phi;
  }
 }
 STACKTOP = sp;
 return;
}

function _png_read_info($png_ptr, $info_ptr) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 var $18 = 0, $2 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0;
 if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) return;
 _png_read_sig($png_ptr, $info_ptr);
 $2 = $png_ptr + 376 | 0;
 $3 = $png_ptr + 208 | 0;
 $4 = $png_ptr + 435 | 0;
 L4 : while (1) {
  $5 = _png_read_chunk_header($png_ptr) | 0;
  $6 = HEAP32[$2 >> 2] | 0;
  $7 = ($6 | 0) == 1229209940;
  $8 = HEAP32[$3 >> 2] | 0;
  if ($7) {
   if (!($8 & 1)) {
    label = 5;
    break;
   }
   if ((HEAP8[$4 >> 0] | 0) == 3 & ($8 & 2 | 0) == 0) {
    label = 7;
    break;
   }
   if (!($8 & 8)) $18 = $8; else {
    _png_chunk_benign_error($png_ptr, 74472);
    $18 = HEAP32[$3 >> 2] | 0;
   }
   HEAP32[$3 >> 2] = $18 | 4;
  } else if ($8 & 4) HEAP32[$3 >> 2] = $8 | 8;
  if (($6 | 0) == 1229472850) {
   _png_handle_IHDR($png_ptr, $info_ptr, $5);
   continue;
  } else if (($6 | 0) == 1229278788) {
   _png_handle_IEND($png_ptr, $info_ptr, $5);
   continue;
  } else {
   $22 = _png_chunk_unknown_handling($png_ptr, $6) | 0;
   if ($22) {
    _png_handle_unknown($png_ptr, $info_ptr, $5, $22);
    if (($6 | 0) == 1347179589) {
     HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2;
     continue;
    } else if ($7) {
     label = 20;
     break;
    } else continue;
   }
   if (($6 | 0) == 1347179589) {
    _png_handle_PLTE($png_ptr, $info_ptr, $5);
    continue;
   }
   if ($7) {
    label = 24;
    break;
   }
   do if (($6 | 0) == 1665684045) {
    _png_handle_cHRM($png_ptr, $info_ptr, $5);
    continue L4;
   } else if (($6 | 0) == 1749635924) {
    _png_handle_hIST($png_ptr, $info_ptr, $5);
    continue L4;
   } else if (($6 | 0) == 1934642260) {
    _png_handle_sPLT($png_ptr, $info_ptr, $5);
    continue L4;
   } else if (($6 | 0) == 1883455820) {
    _png_handle_pCAL($png_ptr, $info_ptr, $5);
    continue L4;
   } else if (($6 | 0) == 1933787468) {
    _png_handle_sCAL($png_ptr, $info_ptr, $5);
    continue L4;
   } else if (($6 | 0) == 1950960965) {
    _png_handle_tIME($png_ptr, $info_ptr, $5);
    continue L4;
   } else if (($6 | 0) == 1933723988) {
    _png_handle_sBIT($png_ptr, $info_ptr, $5);
    continue L4;
   } else if (($6 | 0) == 1951551059) {
    _png_handle_tRNS($png_ptr, $info_ptr, $5);
    continue L4;
   } else if (($6 | 0) == 1649100612) {
    _png_handle_bKGD($png_ptr, $info_ptr, $5);
    continue L4;
   } else if (($6 | 0) == 1934772034) {
    _png_handle_sRGB($png_ptr, $info_ptr, $5);
    continue L4;
   } else if (($6 | 0) == 1766015824) {
    _png_handle_iCCP($png_ptr, $info_ptr, $5);
    continue L4;
   } else if (($6 | 0) == 1950701684) {
    _png_handle_tEXt($png_ptr, $info_ptr, $5);
    continue L4;
   } else if (($6 | 0) == 1767135348) {
    _png_handle_iTXt($png_ptr, $info_ptr, $5);
    continue L4;
   } else if (($6 | 0) == 2052348020) {
    _png_handle_zTXt($png_ptr, $info_ptr, $5);
    continue L4;
   } else if (($6 | 0) == 1883789683) {
    _png_handle_pHYs($png_ptr, $info_ptr, $5);
    continue L4;
   } else if (($6 | 0) == 1732332865) {
    _png_handle_gAMA($png_ptr, $info_ptr, $5);
    continue L4;
   } else if (($6 | 0) == 1866876531) {
    _png_handle_oFFs($png_ptr, $info_ptr, $5);
    continue L4;
   } else {
    _png_handle_unknown($png_ptr, $info_ptr, $5, 0);
    continue L4;
   } while (0);
  }
 }
 if ((label | 0) == 5) _png_chunk_error($png_ptr, 74408); else if ((label | 0) == 7) _png_chunk_error($png_ptr, 74440); else if ((label | 0) == 20) {
  HEAP32[$png_ptr + 408 >> 2] = 0;
  return;
 } else if ((label | 0) == 24) {
  HEAP32[$png_ptr + 408 >> 2] = $5;
  return;
 }
}

function _png_handle_pCAL($png_ptr, $info_ptr, $length) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 $length = $length | 0;
 var $1 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $18 = 0, $24 = 0, $27 = 0, $46 = 0, $64 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $81 = 0, $83 = 0, $86 = 0, $89 = 0, $buf$0 = 0, $buf$1 = 0, $buf$213 = 0, $buf$312 = 0, $buffer$1$i$ph6 = 0, $buffer$1$i$ph7 = 0, $i$014 = 0, label = 0;
 $1 = HEAP32[$png_ptr + 208 >> 2] | 0;
 if (!($1 & 1)) _png_chunk_error($png_ptr, 75496);
 if ($1 & 4) {
  _png_crc_finish($png_ptr, $length) | 0;
  _png_chunk_benign_error($png_ptr, 75472);
  return;
 }
 if ($info_ptr) if (HEAP32[$info_ptr + 8 >> 2] & 1024) {
  _png_crc_finish($png_ptr, $length) | 0;
  _png_chunk_benign_error($png_ptr, 75512);
  return;
 }
 $11 = $length + 1 | 0;
 $12 = $png_ptr + 788 | 0;
 $13 = HEAP32[$12 >> 2] | 0;
 if (!$13) label = 11; else {
  $15 = $png_ptr + 792 | 0;
  if ((HEAP32[$15 >> 2] | 0) >>> 0 < $11 >>> 0) {
   HEAP32[$12 >> 2] = 0;
   HEAP32[$15 >> 2] = 0;
   _png_free($png_ptr, $13);
   label = 11;
  } else {
   $buffer$1$i$ph6 = $13;
   label = 14;
  }
 }
 do if ((label | 0) == 11) {
  $18 = _png_malloc_base($png_ptr, $11) | 0;
  if ($18) {
   HEAP32[$12 >> 2] = $18;
   HEAP32[$png_ptr + 792 >> 2] = $11;
   if (!$png_ptr) {
    $buffer$1$i$ph7 = $18;
    break;
   } else {
    $buffer$1$i$ph6 = $18;
    label = 14;
    break;
   }
  }
  _png_crc_finish($png_ptr, $length) | 0;
  _png_chunk_benign_error($png_ptr, 75712);
  return;
 } while (0);
 if ((label | 0) == 14) {
  _png_read_data($png_ptr, $buffer$1$i$ph6, $length);
  _png_calculate_crc($png_ptr, $buffer$1$i$ph6, $length);
  $buffer$1$i$ph7 = $buffer$1$i$ph6;
 }
 if (_png_crc_finish($png_ptr, 0) | 0) return;
 $24 = $buffer$1$i$ph7 + $length | 0;
 HEAP8[$24 >> 0] = 0;
 $buf$0 = $buffer$1$i$ph7;
 while (1) {
  $27 = $buf$0 + 1 | 0;
  if (!(HEAP8[$buf$0 >> 0] | 0)) break; else $buf$0 = $27;
 }
 if ($24 >>> 0 <= ($buf$0 + 12 | 0) >>> 0) {
  _png_chunk_benign_error($png_ptr, 75488);
  return;
 }
 $46 = HEAPU8[$buf$0 + 2 >> 0] << 16 | HEAPU8[$27 >> 0] << 24 | HEAPU8[$buf$0 + 3 >> 0] << 8 | HEAPU8[$buf$0 + 4 >> 0];
 $64 = HEAPU8[$buf$0 + 6 >> 0] << 16 | HEAPU8[$buf$0 + 5 >> 0] << 24 | HEAPU8[$buf$0 + 7 >> 0] << 8 | HEAPU8[$buf$0 + 8 >> 0];
 $66 = HEAP8[$buf$0 + 9 >> 0] | 0;
 $68 = HEAP8[$buf$0 + 10 >> 0] | 0;
 $69 = $buf$0 + 11 | 0;
 $70 = $66 & 255;
 if ($66 << 24 >> 24 != 0 | $68 << 24 >> 24 == 2) if (($66 + -1 & 255) > 1 | $68 << 24 >> 24 == 3) if ($66 << 24 >> 24 != 3 | $68 << 24 >> 24 == 4) {
  if (($66 & 255) > 3) {
   _png_chunk_benign_error($png_ptr, 76016);
   $buf$1 = $69;
  } else $buf$1 = $69;
  while (1) if (!(HEAP8[$buf$1 >> 0] | 0)) break; else $buf$1 = $buf$1 + 1 | 0;
  $81 = $68 & 255;
  $83 = _png_malloc_warn($png_ptr, $81 << 2) | 0;
  if (!$83) {
   _png_chunk_benign_error($png_ptr, 75712);
   return;
  }
  L48 : do if ($68 << 24 >> 24) {
   $buf$213 = $buf$1;
   $i$014 = 0;
   L49 : while (1) {
    $86 = $buf$213 + 1 | 0;
    HEAP32[$83 + ($i$014 << 2) >> 2] = $86;
    if ($86 >>> 0 > $24 >>> 0) break; else $buf$312 = $86;
    while (1) {
     $89 = $buf$312 + 1 | 0;
     if (!(HEAP8[$buf$312 >> 0] | 0)) break;
     if ($89 >>> 0 > $24 >>> 0) break L49; else $buf$312 = $89;
    }
    $i$014 = $i$014 + 1 | 0;
    if (($i$014 | 0) >= ($81 | 0)) break L48; else $buf$213 = $buf$312;
   }
   _png_free($png_ptr, $83);
   _png_chunk_benign_error($png_ptr, 76048);
   return;
  } while (0);
  _png_set_pCAL($png_ptr, $info_ptr, $buffer$1$i$ph7, $46, $64, $70, $81, $69, $83);
  _png_free($png_ptr, $83);
  return;
 }
 _png_chunk_benign_error($png_ptr, 75992);
 return;
}

function _buffer_draw($b, $dx, $dy) {
 $b = $b | 0;
 $dx = +$dx;
 $dy = +$dy;
 var $1 = 0, $11 = 0, $13 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $27 = 0, $32 = 0, $5 = 0, $53 = 0, $58 = 0.0, $75 = 0, $83 = 0, $93 = 0, $98 = 0, $err = 0, $locationIndex$0 = 0, $shader$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $err = sp + 4 | 0;
 if (!$b) ___assert_fail(23160, 22016, 273, 22448);
 $1 = $b + 44 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!$2) {
  STACKTOP = sp;
  return;
 }
 $5 = HEAP32[$b + 60 >> 2] | 0;
 if ((HEAP32[$b >> 2] | 0) == 1) if (!(HEAP8[$b + 57 >> 0] | 0)) {
  $19 = $2;
  $shader$0 = $5;
 } else {
  $11 = HEAP32[5616] | 0;
  if (!$11) {
   $13 = _display_new_shader(16536, 0, 17488, $err) | 0;
   HEAP32[5616] = $13;
   if (!$13) {
    HEAP32[$vararg_buffer >> 2] = HEAP32[$err >> 2];
    _log_internal(0, 22256, 22472, $vararg_buffer);
    _free(HEAP32[$err >> 2] | 0);
    $98 = HEAP32[5616] | 0;
   } else $98 = $13;
  } else $98 = $11;
  $19 = HEAP32[$1 >> 2] | 0;
  $shader$0 = $98;
 } else {
  $19 = $2;
  $shader$0 = $5;
 }
 if (($19 | 0) != (HEAP32[$b + 40 >> 2] | 0)) ___assert_fail(22512, 22016, 295, 22448);
 $21 = $b + 57 | 0;
 $22 = HEAP8[$21 >> 0] | 0;
 $23 = $22 << 24 >> 24 == 0;
 if (!$23) if (($19 | 0) != (HEAP32[$b + 48 >> 2] | 0)) ___assert_fail(22552, 22016, 296, 22448);
 $27 = HEAP32[$b >> 2] | 0;
 if (($27 | 0) == 1) label = 16; else if (!$27) ___assert_fail(22688, 22016, 298, 22448);
 if ((label | 0) == 16) if (($19 | 0) != (HEAP32[$b + 52 >> 2] | 0)) ___assert_fail(22616, 22016, 297, 22448);
 if (!$shader$0) ___assert_fail(22712, 22016, 299, 22448);
 $32 = $b + 64 | 0;
 if (!(HEAP32[$32 >> 2] | 0)) ___assert_fail(22720, 22016, 300, 22448);
 $locationIndex$0 = ($22 ^ 1) & 255 ^ 1;
 _glUseProgram(HEAP32[($23 ? $shader$0 : $shader$0 + 4 | 0) >> 2] | 0);
 if (!(HEAP8[$b + 56 >> 0] | 0)) _buffer_upload($b, 35048);
 _glBindBuffer(34962, HEAP32[$b + 8 >> 2] | 0);
 _glVertexAttribPointer(0, 2, 5126, 0, 0, 0);
 _glBindBuffer(34962, HEAP32[$b + 12 >> 2] | 0);
 _glVertexAttribPointer(1, 4, 5121, 1, 0, 0);
 if (HEAP8[$21 >> 0] | 0) {
  _glBindBuffer(34962, HEAP32[$b + 16 >> 2] | 0);
  _glEnableVertexAttribArray(2);
  _glVertexAttribPointer(2, 2, 5126, 0, 0, 0);
 }
 if ((HEAP32[$b >> 2] | 0) == 1) {
  _glBindBuffer(34962, HEAP32[$b + 20 >> 2] | 0);
  _glEnableVertexAttribArray(3);
  _glVertexAttribPointer(3, 1, 5126, 0, 0, 0);
 }
 $53 = HEAP32[$32 >> 2] | 0;
 $58 = $dy - +HEAPF32[$53 + 4 >> 2];
 _glUniform1f(HEAP32[$shader$0 + ($locationIndex$0 * 24 | 0) + 20 >> 2] | 0, +($dx - +HEAPF32[$53 >> 2]));
 _glUniform1f(HEAP32[$shader$0 + ($locationIndex$0 * 24 | 0) + 24 >> 2] | 0, +$58);
 _glUniform1f(HEAP32[$shader$0 + ($locationIndex$0 * 24 | 0) + 28 >> 2] | 0, +(+HEAPF32[(HEAP32[$32 >> 2] | 0) + 8 >> 2]));
 _glUniformMatrix2fv(HEAP32[$shader$0 + ($locationIndex$0 * 24 | 0) + 32 >> 2] | 0, 1, 0, (HEAP32[$32 >> 2] | 0) + 16 | 0);
 $75 = HEAP32[$b + 76 >> 2] | 0;
 _glUniform2f(HEAP32[$shader$0 + ($locationIndex$0 * 24 | 0) + 36 >> 2] | 0, +(+((HEAP32[$75 + 12 >> 2] | 0) >>> 0)), +(+((HEAP32[$75 + 16 >> 2] | 0) >>> 0)));
 $83 = HEAP32[$b + 80 >> 2] | 0;
 if ($83) _glUniform2f(HEAP32[$shader$0 + ($locationIndex$0 * 24 | 0) + 40 >> 2] | 0, +(+((HEAP32[$83 + 12 >> 2] | 0) >>> 0)), +(+((HEAP32[$83 + 16 >> 2] | 0) >>> 0)));
 $93 = HEAP32[$b >> 2] | 0;
 _glDrawArrays((($93 | 0) == 1 ? 0 : ($93 | 0) == 2 ? 1 : 4) | 0, 0, $2 | 0);
 if (HEAP8[$21 >> 0] | 0) _glDisableVertexAttribArray(2);
 if ((HEAP32[$b >> 2] | 0) == 1) _glDisableVertexAttribArray(3);
 _glBindBuffer(34962, 0);
 STACKTOP = sp;
 return;
}

function __Z14mlua_new_shapeP9lua_State($L) {
 $L = $L | 0;
 var $0 = 0, $14 = 0, $2 = 0, $21 = 0.0, $23 = 0.0, $25 = 0.0, $27 = 0.0, $3 = 0, $30 = 0.0, $32 = 0.0, $33 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $49 = 0.0, $51 = 0.0, $52 = 0.0, $54 = 0.0, $59 = 0, $67 = 0, $68 = 0, $70 = 0, $73 = 0, $74 = 0.0, $79 = 0.0, $85 = 0, $86 = 0, $centerx$0 = 0.0, $centery$0 = 0.0, $i$02 = 0, sp = 0, $i$02$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 if (!$L) ___assert_fail(23976, 5080, 24, 5168);
 $2 = _luaL_checklstring($L, 1, 0) | 0;
 $3 = __Znwj(28) | 0;
 HEAP16[$3 + 22 >> 1] = 1;
 HEAP16[$3 + 24 >> 1] = -1;
 HEAP16[$3 + 26 >> 1] = 0;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 HEAPF32[$3 + 8 >> 2] = .20000000298023224;
 HEAPF32[$3 + 12 >> 2] = 0.0;
 HEAP8[$3 + 20 >> 0] = 0;
 HEAPF32[$3 + 16 >> 2] = 1.0;
 if (!(_strcmp($2, 5184) | 0)) {
  $14 = __Znwj(152) | 0;
  HEAP32[$14 >> 2] = 82040;
  HEAP32[$14 + 4 >> 2] = 2;
  HEAPF32[$14 + 8 >> 2] = .009999999776482582;
  HEAP32[$14 + 148 >> 2] = 0;
  HEAPF32[$14 + 12 >> 2] = 0.0;
  HEAPF32[$14 + 16 >> 2] = 0.0;
  $21 = +_luaL_checknumber($L, 2) * .5;
  $23 = $21 / +HEAPF32[616];
  $25 = +_luaL_checknumber($L, 3) * .5;
  $27 = $25 / +HEAPF32[616];
  if ((_lua_gettop($L) | 0) > 3) {
   $30 = +_luaL_checknumber($L, 4);
   $32 = $30 / +HEAPF32[616];
   $33 = +_luaL_checknumber($L, 5);
   $centerx$0 = $32;
   $centery$0 = $33 / +HEAPF32[616];
  } else {
   $centerx$0 = 0.0;
   $centery$0 = 0.0;
  }
  HEAPF32[$0 >> 2] = $23 + $centerx$0;
  HEAPF32[$0 + 4 >> 2] = $27 + $centery$0;
  __ZN14b2PolygonShape8SetAsBoxEffRK6b2Vec2f($14, $23, $27, $0, 0.0);
  HEAP32[$3 >> 2] = $14;
  $85 = __Znwj(8) | 0;
  HEAP32[$85 >> 2] = $3;
  $86 = $85 + 4 | 0;
  HEAP32[$86 >> 2] = 0;
  __Z10push_shapeP9lua_StateP5Shape($L, $85);
  STACKTOP = sp;
  return 1;
 }
 if (!(_strcmp($2, 5192) | 0)) {
  $41 = __Znwj(20) | 0;
  HEAP32[$41 >> 2] = 81712;
  $42 = $41 + 4 | 0;
  HEAP32[$42 + 0 >> 2] = 0;
  HEAP32[$42 + 4 >> 2] = 0;
  HEAP32[$42 + 8 >> 2] = 0;
  HEAP32[$42 + 12 >> 2] = 0;
  $43 = +_luaL_checknumber($L, 2);
  HEAPF32[$41 + 8 >> 2] = $43 / +HEAPF32[616];
  if ((_lua_gettop($L) | 0) > 2) {
   $49 = +_luaL_checknumber($L, 3);
   $51 = $49 / +HEAPF32[616];
   $52 = +_luaL_checknumber($L, 4);
   $54 = $52 / +HEAPF32[616];
   HEAPF32[$41 + 12 >> 2] = $51;
   HEAPF32[$41 + 16 >> 2] = $54;
  }
  HEAP32[$3 >> 2] = $41;
  $85 = __Znwj(8) | 0;
  HEAP32[$85 >> 2] = $3;
  $86 = $85 + 4 | 0;
  HEAP32[$86 >> 2] = 0;
  __Z10push_shapeP9lua_StateP5Shape($L, $85);
  STACKTOP = sp;
  return 1;
 }
 if (_strcmp($2, 5200) | 0) ___assert_fail(90768, 5080, 64, 5168);
 $59 = __Znwj(40) | 0;
 HEAP32[$59 >> 2] = 81304;
 HEAP32[$59 + 4 >> 2] = 3;
 HEAPF32[$59 + 8 >> 2] = .009999999776482582;
 HEAP32[$59 + 12 >> 2] = 0;
 HEAP32[$59 + 16 >> 2] = 0;
 HEAP8[$59 + 36 >> 0] = 0;
 HEAP8[$59 + 37 >> 0] = 0;
 $67 = (_lua_gettop($L) | 0) + -1 | 0;
 $68 = ($67 | 0) / 2 | 0;
 $70 = __Znaj($68 >>> 0 > 536870911 ? -1 : $68 << 3) | 0;
 if (($67 | 0) > 1) {
  $i$02 = 0;
  do {
   $i$02$looptemp = $i$02;
   $i$02 = $i$02 + 1 | 0;
   $73 = $i$02 << 1;
   $74 = +_luaL_checknumber($L, $73);
   HEAPF32[$70 + ($i$02$looptemp << 3) >> 2] = $74 / +HEAPF32[616];
   $79 = +_luaL_checknumber($L, $73 | 1);
   HEAPF32[$70 + ($i$02$looptemp << 3) + 4 >> 2] = $79 / +HEAPF32[616];
  } while (($i$02 | 0) < ($68 | 0));
 }
 __ZN12b2ChainShape10CreateLoopEPK6b2Vec2i($59, $70, $68);
 if ($70) __ZdaPv($70);
 HEAP32[$3 >> 2] = $59;
 $85 = __Znwj(8) | 0;
 HEAP32[$85 >> 2] = $3;
 $86 = $85 + 4 | 0;
 HEAP32[$86 >> 2] = 0;
 __Z10push_shapeP9lua_StateP5Shape($L, $85);
 STACKTOP = sp;
 return 1;
}

function _maybe_start_packet($f) {
 $f = $f | 0;
 var $$0 = 0, $$0$i = 0, $$0$i2 = 0, $$0$i4 = 0, $$0$i6 = 0, $$pre$phiZ2D = 0, $0 = 0, $14 = 0, $18 = 0, $23 = 0, $3 = 0, $32 = 0, $37 = 0, $4 = 0, $46 = 0, $51 = 0, $60 = 0, $67 = 0, label = 0;
 $0 = $f + 1396 | 0;
 do if ((HEAP32[$0 >> 2] | 0) == -1) {
  $3 = $f + 32 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  do if (!$4) {
   $14 = _fgetc(HEAP32[$f + 20 >> 2] | 0) | 0;
   if (($14 | 0) == -1) {
    HEAP32[$f + 112 >> 2] = 1;
    $$0$i = 0;
    break;
   } else {
    $$0$i = $14 & 255;
    break;
   }
  } else if ($4 >>> 0 < (HEAP32[$f + 40 >> 2] | 0) >>> 0) {
   HEAP32[$3 >> 2] = $4 + 1;
   $$0$i = HEAP8[$4 >> 0] | 0;
   break;
  } else {
   HEAP32[$f + 112 >> 2] = 1;
   $$0$i = 0;
   break;
  } while (0);
  $18 = $f + 112 | 0;
  if (HEAP32[$18 >> 2] | 0) {
   $$0 = 0;
   return $$0 | 0;
  }
  if ($$0$i << 24 >> 24 != 79) {
   HEAP32[$f + 116 >> 2] = 30;
   $$0 = 0;
   return $$0 | 0;
  }
  $23 = HEAP32[$3 >> 2] | 0;
  do if (!$23) {
   $32 = _fgetc(HEAP32[$f + 20 >> 2] | 0) | 0;
   if (($32 | 0) == -1) {
    HEAP32[$18 >> 2] = 1;
    break;
   } else {
    $$0$i2 = $32 & 255;
    label = 20;
    break;
   }
  } else if ($23 >>> 0 < (HEAP32[$f + 40 >> 2] | 0) >>> 0) {
   HEAP32[$3 >> 2] = $23 + 1;
   $$0$i2 = HEAP8[$23 >> 0] | 0;
   label = 20;
   break;
  } else {
   HEAP32[$18 >> 2] = 1;
   break;
  } while (0);
  if ((label | 0) == 20) if ($$0$i2 << 24 >> 24 == 103) {
   $37 = HEAP32[$3 >> 2] | 0;
   do if (!$37) {
    $46 = _fgetc(HEAP32[$f + 20 >> 2] | 0) | 0;
    if (($46 | 0) == -1) {
     HEAP32[$18 >> 2] = 1;
     break;
    } else {
     $$0$i4 = $46 & 255;
     label = 29;
     break;
    }
   } else if ($37 >>> 0 < (HEAP32[$f + 40 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = $37 + 1;
    $$0$i4 = HEAP8[$37 >> 0] | 0;
    label = 29;
    break;
   } else {
    HEAP32[$18 >> 2] = 1;
    break;
   } while (0);
   if ((label | 0) == 29) if ($$0$i4 << 24 >> 24 == 103) {
    $51 = HEAP32[$3 >> 2] | 0;
    do if (!$51) {
     $60 = _fgetc(HEAP32[$f + 20 >> 2] | 0) | 0;
     if (($60 | 0) == -1) {
      HEAP32[$18 >> 2] = 1;
      break;
     } else {
      $$0$i6 = $60 & 255;
      label = 38;
      break;
     }
    } else if ($51 >>> 0 < (HEAP32[$f + 40 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $51 + 1;
     $$0$i6 = HEAP8[$51 >> 0] | 0;
     label = 38;
     break;
    } else {
     HEAP32[$18 >> 2] = 1;
     break;
    } while (0);
    if ((label | 0) == 38) if ($$0$i6 << 24 >> 24 == 83) {
     if (!(_start_page_no_capturepattern($f) | 0)) {
      $$0 = 0;
      return $$0 | 0;
     }
     $67 = $f + 1391 | 0;
     if (!(HEAP8[$67 >> 0] & 1)) {
      $$pre$phiZ2D = $67;
      break;
     }
     HEAP32[$f + 1400 >> 2] = 0;
     HEAP8[$f + 1392 >> 0] = 0;
     HEAP32[$f + 116 >> 2] = 32;
     $$0 = 0;
     return $$0 | 0;
    }
    HEAP32[$f + 116 >> 2] = 30;
    $$0 = 0;
    return $$0 | 0;
   }
   HEAP32[$f + 116 >> 2] = 30;
   $$0 = 0;
   return $$0 | 0;
  }
  HEAP32[$f + 116 >> 2] = 30;
  $$0 = 0;
  return $$0 | 0;
 } else $$pre$phiZ2D = $f + 1391 | 0; while (0);
 while (1) {
  if ((HEAP32[$0 >> 2] | 0) != -1) {
   label = 48;
   break;
  }
  if (!(_start_page($f) | 0)) {
   $$0 = 0;
   label = 49;
   break;
  }
  if (HEAP8[$$pre$phiZ2D >> 0] & 1) {
   label = 47;
   break;
  }
 }
 if ((label | 0) == 47) {
  HEAP32[$f + 116 >> 2] = 32;
  $$0 = 0;
  return $$0 | 0;
 } else if ((label | 0) == 48) {
  HEAP32[$f + 1400 >> 2] = 0;
  HEAP32[$f + 1412 >> 2] = 0;
  HEAP32[$f + 1416 >> 2] = 0;
  HEAP8[$f + 1392 >> 0] = 0;
  $$0 = 1;
  return $$0 | 0;
 } else if ((label | 0) == 49) return $$0 | 0;
 return 0;
}

function _png_do_gray_to_rgb($row_info, $row) {
 $row_info = $row_info | 0;
 $row = $row | 0;
 var $$sum = 0, $$sum2 = 0, $$sum4 = 0, $$sum6 = 0, $0 = 0, $1 = 0, $105 = 0, $2 = 0, $28 = 0, $4 = 0, $42 = 0, $46 = 0, $5 = 0, $57 = 0, $64 = 0, $69 = 0, $82 = 0, $85 = 0, $94 = 0, $97 = 0, $dp$010 = 0, $dp2$014 = 0, $dp4$019 = 0, $dp6$024 = 0, $i$08 = 0, $i$112 = 0, $i$217 = 0, $i$322 = 0, $sp$09 = 0, $sp1$013 = 0, $sp3$018 = 0, $sp5$023 = 0;
 $0 = HEAP32[$row_info >> 2] | 0;
 $1 = $row_info + 9 | 0;
 $2 = HEAP8[$1 >> 0] | 0;
 if (($2 & 255) <= 7) return;
 $4 = $row_info + 8 | 0;
 $5 = HEAP8[$4 >> 0] | 0;
 if ($5 & 2) return;
 do if (!($5 << 24 >> 24)) if ($2 << 24 >> 24 == 8) {
  $$sum6 = $0 + -1 | 0;
  if (!$0) break;
  $dp$010 = $row + ($$sum6 + ($0 << 1)) | 0;
  $i$08 = 0;
  $sp$09 = $row + $$sum6 | 0;
  while (1) {
   HEAP8[$dp$010 >> 0] = HEAP8[$sp$09 >> 0] | 0;
   HEAP8[$dp$010 + -1 >> 0] = HEAP8[$sp$09 >> 0] | 0;
   HEAP8[$dp$010 + -2 >> 0] = HEAP8[$sp$09 >> 0] | 0;
   $i$08 = $i$08 + 1 | 0;
   if (($i$08 | 0) == ($0 | 0)) break; else {
    $dp$010 = $dp$010 + -3 | 0;
    $sp$09 = $sp$09 + -1 | 0;
   }
  }
 } else {
  $$sum4 = ($0 << 1) + -1 | 0;
  if (!$0) break;
  $dp2$014 = $row + ($$sum4 + ($0 << 2)) | 0;
  $i$112 = 0;
  $sp1$013 = $row + $$sum4 | 0;
  while (1) {
   HEAP8[$dp2$014 >> 0] = HEAP8[$sp1$013 >> 0] | 0;
   $28 = $sp1$013 + -1 | 0;
   HEAP8[$dp2$014 + -1 >> 0] = HEAP8[$28 >> 0] | 0;
   HEAP8[$dp2$014 + -2 >> 0] = HEAP8[$sp1$013 >> 0] | 0;
   HEAP8[$dp2$014 + -3 >> 0] = HEAP8[$28 >> 0] | 0;
   HEAP8[$dp2$014 + -4 >> 0] = HEAP8[$sp1$013 >> 0] | 0;
   HEAP8[$dp2$014 + -5 >> 0] = HEAP8[$28 >> 0] | 0;
   $i$112 = $i$112 + 1 | 0;
   if (($i$112 | 0) == ($0 | 0)) break; else {
    $dp2$014 = $dp2$014 + -6 | 0;
    $sp1$013 = $sp1$013 + -2 | 0;
   }
  }
 } else if ($5 << 24 >> 24 == 4) if ($2 << 24 >> 24 == 8) {
  $42 = $0 << 1;
  $$sum2 = $42 + -1 | 0;
  if (!$0) break;
  $dp4$019 = $row + ($$sum2 + $42) | 0;
  $i$217 = 0;
  $sp3$018 = $row + $$sum2 | 0;
  while (1) {
   $46 = $sp3$018 + -1 | 0;
   HEAP8[$dp4$019 >> 0] = HEAP8[$sp3$018 >> 0] | 0;
   HEAP8[$dp4$019 + -1 >> 0] = HEAP8[$46 >> 0] | 0;
   HEAP8[$dp4$019 + -2 >> 0] = HEAP8[$46 >> 0] | 0;
   HEAP8[$dp4$019 + -3 >> 0] = HEAP8[$46 >> 0] | 0;
   $i$217 = $i$217 + 1 | 0;
   if (($i$217 | 0) == ($0 | 0)) break; else {
    $dp4$019 = $dp4$019 + -4 | 0;
    $sp3$018 = $sp3$018 + -2 | 0;
   }
  }
 } else {
  $57 = $0 << 2;
  $$sum = $57 + -1 | 0;
  if (!$0) break;
  $dp6$024 = $row + ($$sum + $57) | 0;
  $i$322 = 0;
  $sp5$023 = $row + $$sum | 0;
  while (1) {
   HEAP8[$dp6$024 >> 0] = HEAP8[$sp5$023 >> 0] | 0;
   $64 = $sp5$023 + -2 | 0;
   HEAP8[$dp6$024 + -1 >> 0] = HEAP8[$sp5$023 + -1 >> 0] | 0;
   HEAP8[$dp6$024 + -2 >> 0] = HEAP8[$64 >> 0] | 0;
   $69 = $sp5$023 + -3 | 0;
   HEAP8[$dp6$024 + -3 >> 0] = HEAP8[$69 >> 0] | 0;
   HEAP8[$dp6$024 + -4 >> 0] = HEAP8[$64 >> 0] | 0;
   HEAP8[$dp6$024 + -5 >> 0] = HEAP8[$69 >> 0] | 0;
   HEAP8[$dp6$024 + -6 >> 0] = HEAP8[$64 >> 0] | 0;
   HEAP8[$dp6$024 + -7 >> 0] = HEAP8[$69 >> 0] | 0;
   $i$322 = $i$322 + 1 | 0;
   if (($i$322 | 0) == ($0 | 0)) break; else {
    $dp6$024 = $dp6$024 + -8 | 0;
    $sp5$023 = $sp5$023 + -4 | 0;
   }
  }
 } while (0);
 $82 = $row_info + 10 | 0;
 $85 = (HEAPU8[$82 >> 0] | 0) + 2 | 0;
 HEAP8[$82 >> 0] = $85;
 HEAP8[$4 >> 0] = HEAPU8[$4 >> 0] | 0 | 2;
 $94 = Math_imul(HEAPU8[$1 >> 0] | 0, $85 & 255) | 0;
 HEAP8[$row_info + 11 >> 0] = $94;
 $97 = $94 & 255;
 if ($97 >>> 0 > 7) $105 = Math_imul($97 >>> 3, $0) | 0; else $105 = ((Math_imul($97, $0) | 0) + 7 | 0) >>> 3;
 HEAP32[$row_info + 4 >> 2] = $105;
 return;
}

function _os_date($L) {
 $L = $L | 0;
 var $$0$i = 0, $0 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $47 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $62 = 0, $65 = 0, $b = 0, $buff = 0, $cc = 0, $i$01$i = 0, $s$0 = 0, $s$1 = 0, $stm$0 = 0, $t = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2288 | 0;
 $vararg_buffer = sp;
 $t = sp + 2072 | 0;
 $cc = sp + 2280 | 0;
 $b = sp + 8 | 0;
 $buff = sp + 2080 | 0;
 $0 = _luaL_optlstring($L, 1, 60048, 0) | 0;
 if ((_lua_type($L, 2) | 0) < 1) $5 = _time(0) | 0; else $5 = _luaL_checkinteger($L, 2) | 0;
 HEAP32[$t >> 2] = $5;
 if ((HEAP8[$0 >> 0] | 0) == 33) {
  $s$0 = $0 + 1 | 0;
  $stm$0 = _gmtime($t | 0) | 0;
 } else {
  $s$0 = $0;
  $stm$0 = _localtime($t | 0) | 0;
 }
 if (!$stm$0) {
  _lua_pushnil($L);
  STACKTOP = sp;
  return 1;
 }
 if (!(_strcmp($s$0, 60056) | 0)) {
  _lua_createtable($L, 0, 9);
  _lua_pushinteger($L, HEAP32[$stm$0 >> 2] | 0);
  _lua_setfield($L, -2, 59848);
  _lua_pushinteger($L, HEAP32[$stm$0 + 4 >> 2] | 0);
  _lua_setfield($L, -2, 59856);
  _lua_pushinteger($L, HEAP32[$stm$0 + 8 >> 2] | 0);
  _lua_setfield($L, -2, 59864);
  _lua_pushinteger($L, HEAP32[$stm$0 + 12 >> 2] | 0);
  _lua_setfield($L, -2, 59872);
  _lua_pushinteger($L, (HEAP32[$stm$0 + 16 >> 2] | 0) + 1 | 0);
  _lua_setfield($L, -2, 59880);
  _lua_pushinteger($L, (HEAP32[$stm$0 + 20 >> 2] | 0) + 1900 | 0);
  _lua_setfield($L, -2, 59888);
  _lua_pushinteger($L, (HEAP32[$stm$0 + 24 >> 2] | 0) + 1 | 0);
  _lua_setfield($L, -2, 60064);
  _lua_pushinteger($L, (HEAP32[$stm$0 + 28 >> 2] | 0) + 1 | 0);
  _lua_setfield($L, -2, 60072);
  $34 = HEAP32[$stm$0 + 32 >> 2] | 0;
  if (($34 | 0) < 0) {
   STACKTOP = sp;
   return 1;
  }
  _lua_pushboolean($L, $34);
  _lua_setfield($L, -2, 59896);
  STACKTOP = sp;
  return 1;
 }
 HEAP8[$cc >> 0] = 37;
 _luaL_buffinit($L, $b);
 $36 = $b + 8 | 0;
 $37 = $b + 4 | 0;
 $38 = $cc + 1 | 0;
 $39 = $cc + 2 | 0;
 $40 = $cc + 3 | 0;
 $s$1 = $s$0;
 while (1) {
  $41 = HEAP8[$s$1 >> 0] | 0;
  if (!($41 << 24 >> 24)) break; else if ($41 << 24 >> 24 != 37) {
   $42 = HEAP32[$36 >> 2] | 0;
   if ($42 >>> 0 < (HEAP32[$37 >> 2] | 0) >>> 0) {
    $47 = $42;
    $50 = $41;
   } else {
    _luaL_prepbuffsize($b, 1) | 0;
    $47 = HEAP32[$36 >> 2] | 0;
    $50 = HEAP8[$s$1 >> 0] | 0;
   }
   HEAP32[$36 >> 2] = $47 + 1;
   HEAP8[(HEAP32[$b >> 2] | 0) + $47 >> 0] = $50;
   $s$1 = $s$1 + 1 | 0;
   continue;
  }
  $51 = $s$1 + 1 | 0;
  $52 = $s$1 + 2 | 0;
  $i$01$i = 0;
  while (1) {
   $53 = HEAP8[$51 >> 0] | 0;
   if ($53 << 24 >> 24) if (_strchr(HEAP32[60080 + ($i$01$i << 2) >> 2] | 0, $53 << 24 >> 24) | 0) {
    HEAP8[$38 >> 0] = $53;
    $62 = HEAP32[60080 + (($i$01$i | 1) << 2) >> 2] | 0;
    if (!(HEAP8[$62 >> 0] | 0)) {
     label = 21;
     break;
    }
    $65 = HEAP8[$52 >> 0] | 0;
    if ($65 << 24 >> 24) if (_strchr($62, $65 << 24 >> 24) | 0) {
     label = 24;
     break;
    }
   }
   $i$01$i = $i$01$i + 2 | 0;
   if ($i$01$i >>> 0 >= 6) {
    label = 26;
    break;
   }
  }
  if ((label | 0) == 21) {
   label = 0;
   HEAP8[$39 >> 0] = 0;
   $$0$i = $52;
  } else if ((label | 0) == 24) {
   label = 0;
   HEAP8[$39 >> 0] = $65;
   HEAP8[$40 >> 0] = 0;
   $$0$i = $s$1 + 3 | 0;
  } else if ((label | 0) == 26) {
   label = 0;
   HEAP32[$vararg_buffer >> 2] = $51;
   _luaL_argerror($L, 1, _lua_pushfstring($L, 60184, $vararg_buffer) | 0) | 0;
   $$0$i = $51;
  }
  _luaL_addlstring($b, $buff, _strftime($buff | 0, 200, $cc | 0, $stm$0 | 0) | 0);
  $s$1 = $$0$i;
 }
 _luaL_pushresult($b);
 STACKTOP = sp;
 return 1;
}

function _png_handle_zTXt($png_ptr, $info_ptr, $length) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 $length = $length | 0;
 var $0 = 0, $1 = 0, $11 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $24 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $52 = 0, $buffer$1$i$ph4 = 0, $buffer$1$i$ph5 = 0, $errmsg$0 = 0, $errmsg$07 = 0, $keyword_length$0$lcssa = 0, $keyword_length$08 = 0, $text = 0, $uncompressed_length = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $uncompressed_length = sp + 28 | 0;
 $text = sp;
 $0 = $png_ptr + 756 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (($1 | 0) == 1) {
  _png_crc_finish($png_ptr, $length) | 0;
  STACKTOP = sp;
  return;
 } else if ($1) label = 3;
 if ((label | 0) == 3) {
  $2 = $1 + -1 | 0;
  HEAP32[$0 >> 2] = $2;
  if (($2 | 0) == 1) {
   _png_crc_finish($png_ptr, $length) | 0;
   _png_chunk_benign_error($png_ptr, 76176);
   STACKTOP = sp;
   return;
  }
 }
 $4 = $png_ptr + 208 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 if (!($5 & 1)) _png_chunk_error($png_ptr, 75496);
 if ($5 & 4) HEAP32[$4 >> 2] = $5 | 8;
 $11 = $png_ptr + 788 | 0;
 $12 = HEAP32[$11 >> 2] | 0;
 if (!$12) label = 12; else {
  $14 = $png_ptr + 792 | 0;
  if ((HEAP32[$14 >> 2] | 0) >>> 0 < $length >>> 0) {
   HEAP32[$11 >> 2] = 0;
   HEAP32[$14 >> 2] = 0;
   _png_free($png_ptr, $12);
   label = 12;
  } else {
   $buffer$1$i$ph4 = $12;
   label = 15;
  }
 }
 do if ((label | 0) == 12) {
  $17 = _png_malloc_base($png_ptr, $length) | 0;
  if ($17) {
   HEAP32[$11 >> 2] = $17;
   HEAP32[$png_ptr + 792 >> 2] = $length;
   if (!$png_ptr) {
    $buffer$1$i$ph5 = $17;
    break;
   } else {
    $buffer$1$i$ph4 = $17;
    label = 15;
    break;
   }
  }
  _png_crc_finish($png_ptr, $length) | 0;
  _png_chunk_benign_error($png_ptr, 75712);
  STACKTOP = sp;
  return;
 } while (0);
 if ((label | 0) == 15) {
  _png_read_data($png_ptr, $buffer$1$i$ph4, $length);
  _png_calculate_crc($png_ptr, $buffer$1$i$ph4, $length);
  $buffer$1$i$ph5 = $buffer$1$i$ph4;
 }
 if (_png_crc_finish($png_ptr, 0) | 0) {
  STACKTOP = sp;
  return;
 }
 if (!$length) $errmsg$07 = 75768; else {
  $keyword_length$08 = 0;
  while (1) {
   $24 = $keyword_length$08 + 1 | 0;
   if (!(HEAP8[$buffer$1$i$ph5 + $keyword_length$08 >> 0] | 0)) {
    $keyword_length$0$lcssa = $keyword_length$08;
    break;
   }
   if ($24 >>> 0 < $length >>> 0) $keyword_length$08 = $24; else {
    $keyword_length$0$lcssa = $24;
    break;
   }
  }
  if ($keyword_length$0$lcssa >>> 0 > 79 | ($keyword_length$0$lcssa | 0) == 0) $errmsg$07 = 75768; else if (($keyword_length$0$lcssa + 3 | 0) >>> 0 > $length >>> 0) $errmsg$07 = 75728; else if (!(HEAP8[$buffer$1$i$ph5 + ($keyword_length$0$lcssa + 1) >> 0] | 0)) {
   HEAP32[$uncompressed_length >> 2] = -1;
   $37 = $keyword_length$0$lcssa + 2 | 0;
   if ((_png_decompress_chunk($png_ptr, $length, $37, $uncompressed_length) | 0) == 1) {
    $40 = HEAP32[$11 >> 2] | 0;
    $41 = HEAP32[$uncompressed_length >> 2] | 0;
    HEAP8[$40 + ($41 + $37) >> 0] = 0;
    HEAP32[$text >> 2] = 0;
    HEAP32[$text + 4 >> 2] = $40;
    HEAP32[$text + 8 >> 2] = $40 + $37;
    HEAP32[$text + 12 >> 2] = $41;
    HEAP32[$text + 16 >> 2] = 0;
    HEAP32[$text + 20 >> 2] = 0;
    HEAP32[$text + 24 >> 2] = 0;
    $52 = (_png_set_text_2($png_ptr, $info_ptr, $text, 1) | 0) == 0;
    $errmsg$0 = $52 ? 0 : 76280;
   } else $errmsg$0 = HEAP32[$png_ptr + 248 >> 2] | 0;
   if (!$errmsg$0) {
    STACKTOP = sp;
    return;
   } else $errmsg$07 = $errmsg$0;
  } else $errmsg$07 = 76248;
 }
 _png_chunk_benign_error($png_ptr, $errmsg$07);
 STACKTOP = sp;
 return;
}

function __ZN11b2GearJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $107 = 0.0, $11 = 0.0, $110 = 0.0, $119 = 0.0, $12 = 0.0, $122 = 0.0, $131 = 0.0, $134 = 0.0, $14 = 0.0, $143 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0, $154 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $165 = 0, $169 = 0.0, $170 = 0.0, $171 = 0, $176 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $2 = 0, $24 = 0.0, $25 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $31 = 0, $37 = 0.0, $38 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $44 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $53 = 0.0, $57 = 0.0, $60 = 0.0, $66 = 0.0, $69 = 0.0, $74 = 0.0, $77 = 0.0, $81 = 0.0, $84 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $98 = 0.0;
 $0 = $this + 160 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $data + 28 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $5 = $3 + ($1 * 12 | 0) | 0;
 $11 = +HEAPF32[$5 >> 2];
 $12 = +HEAPF32[$5 + 4 >> 2];
 $14 = +HEAPF32[$3 + ($1 * 12 | 0) + 8 >> 2];
 $15 = $this + 164 | 0;
 $16 = HEAP32[$15 >> 2] | 0;
 $18 = $3 + ($16 * 12 | 0) | 0;
 $24 = +HEAPF32[$18 >> 2];
 $25 = +HEAPF32[$18 + 4 >> 2];
 $27 = +HEAPF32[$3 + ($16 * 12 | 0) + 8 >> 2];
 $28 = $this + 168 | 0;
 $29 = HEAP32[$28 >> 2] | 0;
 $31 = $3 + ($29 * 12 | 0) | 0;
 $37 = +HEAPF32[$31 >> 2];
 $38 = +HEAPF32[$31 + 4 >> 2];
 $40 = +HEAPF32[$3 + ($29 * 12 | 0) + 8 >> 2];
 $41 = $this + 172 | 0;
 $42 = HEAP32[$41 >> 2] | 0;
 $44 = $3 + ($42 * 12 | 0) | 0;
 $50 = +HEAPF32[$44 >> 2];
 $51 = +HEAPF32[$44 + 4 >> 2];
 $53 = +HEAPF32[$3 + ($42 * 12 | 0) + 8 >> 2];
 $57 = +HEAPF32[$this + 240 >> 2];
 $60 = +HEAPF32[$this + 244 >> 2];
 $66 = +HEAPF32[$this + 248 >> 2];
 $69 = +HEAPF32[$this + 252 >> 2];
 $74 = +HEAPF32[$this + 256 >> 2];
 $77 = +HEAPF32[$this + 264 >> 2];
 $81 = +HEAPF32[$this + 260 >> 2];
 $84 = +HEAPF32[$this + 268 >> 2];
 $91 = +HEAPF32[$this + 272 >> 2] * (($11 - $37) * $57 + ($12 - $38) * $60 + (($24 - $50) * $66 + ($25 - $51) * $69) + ($14 * $74 - $40 * $77 + ($27 * $81 - $53 * $84)));
 $92 = -$91;
 $93 = $this + 156 | 0;
 HEAPF32[$93 >> 2] = +HEAPF32[$93 >> 2] - $91;
 $98 = +HEAPF32[$this + 208 >> 2] * $92;
 $107 = $14 + +HEAPF32[$this + 224 >> 2] * $92 * $74;
 $110 = +HEAPF32[$this + 212 >> 2] * $92;
 $119 = $27 + +HEAPF32[$this + 228 >> 2] * $92 * $81;
 $122 = +HEAPF32[$this + 216 >> 2] * $92;
 $131 = $40 - +HEAPF32[$this + 232 >> 2] * $92 * $77;
 $134 = +HEAPF32[$this + 220 >> 2] * $92;
 $143 = $53 - +HEAPF32[$this + 236 >> 2] * $92 * $84;
 $147 = +($11 + $57 * $98);
 $148 = +($12 + $60 * $98);
 $149 = (HEAP32[$2 >> 2] | 0) + ((HEAP32[$0 >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$149 >> 2] = $147;
 HEAPF32[$149 + 4 >> 2] = $148;
 $154 = HEAP32[$2 >> 2] | 0;
 HEAPF32[$154 + ((HEAP32[$0 >> 2] | 0) * 12 | 0) + 8 >> 2] = $107;
 $158 = +($24 + $66 * $110);
 $159 = +($25 + $110 * $69);
 $160 = $154 + ((HEAP32[$15 >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$160 >> 2] = $158;
 HEAPF32[$160 + 4 >> 2] = $159;
 $165 = HEAP32[$2 >> 2] | 0;
 HEAPF32[$165 + ((HEAP32[$15 >> 2] | 0) * 12 | 0) + 8 >> 2] = $119;
 $169 = +($37 - $57 * $122);
 $170 = +($38 - $60 * $122);
 $171 = $165 + ((HEAP32[$28 >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$171 >> 2] = $169;
 HEAPF32[$171 + 4 >> 2] = $170;
 $176 = HEAP32[$2 >> 2] | 0;
 HEAPF32[$176 + ((HEAP32[$28 >> 2] | 0) * 12 | 0) + 8 >> 2] = $131;
 $180 = +($50 - $66 * $134);
 $181 = +($51 - $69 * $134);
 $182 = $176 + ((HEAP32[$41 >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$182 >> 2] = $180;
 HEAPF32[$182 + 4 >> 2] = $181;
 HEAPF32[(HEAP32[$2 >> 2] | 0) + ((HEAP32[$41 >> 2] | 0) * 12 | 0) + 8 >> 2] = $143;
 return;
}

function _luaK_goiffalse($fs, $e) {
 $fs = $fs | 0;
 $e = $e | 0;
 var $0 = 0, $12 = 0, $17 = 0, $18 = 0, $20 = 0, $22 = 0, $3 = 0, $31 = 0, $32 = 0, $37 = 0, $44 = 0, $49 = 0, $51 = 0, $53 = 0, $54 = 0, $56 = 0, $59 = 0, $61 = 0, $70 = 0, $71 = 0, $75 = 0, $77 = 0, $79 = 0, $80 = 0, $82 = 0, $85 = 0, $87 = 0, $9 = 0, $fs$idx$val$idx$val$i = 0, $fs$idx$val$idx$val$i$i = 0, $list$0$i = 0, $list$0$i$i = 0, $pc$0 = 0, label = 0;
 _luaK_dischargevars($fs, $e);
 $0 = HEAP32[$e >> 2] | 0;
 do if (($0 | 0) == 11) {
  $pc$0 = HEAP32[$e + 4 >> 2] | 0;
  label = 15;
 } else if (!(($0 | 0) == 3 | ($0 | 0) == 1)) {
  $3 = $e + 4 | 0;
  if (($0 | 0) == 12) {
   $9 = HEAP32[(HEAP32[(HEAP32[$fs >> 2] | 0) + 48 >> 2] | 0) + (HEAP32[$3 >> 2] << 2) >> 2] | 0;
   if (($9 & 63 | 0) == 27) {
    $12 = $fs + 16 | 0;
    HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + -1;
    $pc$0 = _condjump($fs, 34, $9 >>> 23, 0, 0) | 0;
    label = 15;
    break;
   } else label = 6;
  } else if (($0 | 0) == 7) label = 11; else label = 6;
  if ((label | 0) == 6) {
   $17 = $fs + 44 | 0;
   $18 = HEAP8[$17 >> 0] | 0;
   $20 = ($18 & 255) + 1 | 0;
   $22 = (HEAP32[$fs >> 2] | 0) + 8 | 0;
   do if ($20 >>> 0 > (HEAPU8[$22 >> 0] | 0) >>> 0) if ($20 >>> 0 > 249) _luaX_syntaxerror(HEAP32[$fs + 8 >> 2] | 0, 65488); else {
    HEAP8[$22 >> 0] = $20;
    $31 = HEAP8[$17 >> 0] | 0;
    break;
   } else $31 = $18; while (0);
   $32 = ($31 & 255) + 1 | 0;
   HEAP8[$17 >> 0] = $32;
   _discharge2reg($fs, $e, ($32 & 255) + -1 | 0);
   if ((HEAP32[$e >> 2] | 0) == 7) label = 11;
  }
  if ((label | 0) == 11) {
   $37 = HEAP32[$3 >> 2] | 0;
   if (!($37 & 256)) if ((HEAPU8[$fs + 42 >> 0] | 0 | 0) <= ($37 | 0)) {
    $44 = $fs + 44 | 0;
    HEAP8[$44 >> 0] = (HEAP8[$44 >> 0] | 0) + -1 << 24 >> 24;
   }
  }
  $pc$0 = _condjump($fs, 35, 255, HEAP32[$3 >> 2] | 0, 1) | 0;
  label = 15;
 } while (0);
 do if ((label | 0) == 15) {
  $49 = $e + 8 | 0;
  if (($pc$0 | 0) != -1) {
   $51 = HEAP32[$49 >> 2] | 0;
   if (($51 | 0) == -1) {
    HEAP32[$49 >> 2] = $pc$0;
    break;
   }
   $fs$idx$val$idx$val$i = HEAP32[(HEAP32[$fs >> 2] | 0) + 48 >> 2] | 0;
   $list$0$i = $51;
   while (1) {
    $53 = $fs$idx$val$idx$val$i + ($list$0$i << 2) | 0;
    $54 = HEAP32[$53 >> 2] | 0;
    $56 = ($54 >>> 14) + -131071 | 0;
    if (($56 | 0) == -1) break;
    $59 = $list$0$i + 1 + $56 | 0;
    if (($59 | 0) == -1) break; else $list$0$i = $59;
   }
   $61 = $pc$0 + ~$list$0$i | 0;
   if (((($61 | 0) > -1 ? $61 : 0 - $61 | 0) | 0) > 131071) _luaX_syntaxerror(HEAP32[$fs + 8 >> 2] | 0, 65576); else {
    HEAP32[$53 >> 2] = ($61 << 14) + 2147467264 | $54 & 16383;
    break;
   }
  }
 } while (0);
 $70 = $e + 12 | 0;
 $71 = HEAP32[$70 >> 2] | 0;
 HEAP32[$fs + 20 >> 2] = HEAP32[$fs + 16 >> 2];
 $75 = $fs + 24 | 0;
 if (($71 | 0) == -1) {
  HEAP32[$70 >> 2] = -1;
  return;
 }
 $77 = HEAP32[$75 >> 2] | 0;
 if (($77 | 0) == -1) {
  HEAP32[$75 >> 2] = $71;
  HEAP32[$70 >> 2] = -1;
  return;
 }
 $fs$idx$val$idx$val$i$i = HEAP32[(HEAP32[$fs >> 2] | 0) + 48 >> 2] | 0;
 $list$0$i$i = $77;
 while (1) {
  $79 = $fs$idx$val$idx$val$i$i + ($list$0$i$i << 2) | 0;
  $80 = HEAP32[$79 >> 2] | 0;
  $82 = ($80 >>> 14) + -131071 | 0;
  if (($82 | 0) == -1) break;
  $85 = $list$0$i$i + 1 + $82 | 0;
  if (($85 | 0) == -1) break; else $list$0$i$i = $85;
 }
 $87 = $71 + ~$list$0$i$i | 0;
 if (((($87 | 0) > -1 ? $87 : 0 - $87 | 0) | 0) > 131071) _luaX_syntaxerror(HEAP32[$fs + 8 >> 2] | 0, 65576);
 HEAP32[$79 >> 2] = ($87 << 14) + 2147467264 | $80 & 16383;
 HEAP32[$70 >> 2] = -1;
 return;
}

function _fmodf($x, $y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa = 0, $$lcssa6 = 0, $0 = 0, $1 = 0, $12 = 0.0, $14 = 0, $19 = 0, $21 = 0, $29 = 0, $3 = 0, $31 = 0, $39 = 0, $40 = 0, $43 = 0, $44 = 0, $46 = 0, $47 = 0, $5 = 0, $51 = 0, $52 = 0, $6 = 0, $62 = 0, $63 = 0, $7 = 0, $ex$0$lcssa = 0, $ex$025 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$211 = 0, $ex$3$lcssa = 0, $ex$38 = 0, $ey$0$lcssa = 0, $ey$019 = 0, $ey$1$ph = 0, $i$026 = 0, $i$120 = 0, $uxi$0 = 0, $uxi$1$lcssa = 0, $uxi$112 = 0, $uxi$2 = 0, $uxi$3$lcssa = 0, $uxi$3$ph = 0, $uxi$39 = 0, $uxi$4 = 0, $uy$sroa$0$0$ph = 0;
 $0 = (HEAPF32[tempDoublePtr >> 2] = $x, HEAP32[tempDoublePtr >> 2] | 0);
 $1 = (HEAPF32[tempDoublePtr >> 2] = $y, HEAP32[tempDoublePtr >> 2] | 0);
 $3 = $0 >>> 23 & 255;
 $5 = $1 >>> 23 & 255;
 $6 = $0 & -2147483648;
 $7 = $1 << 1;
 if ($7) if (!(($1 & 2147483647) >>> 0 > 2139095040 | ($3 | 0) == 255)) {
  $14 = $0 << 1;
  if ($14 >>> 0 <= $7 >>> 0) {
   if (($14 | 0) != ($7 | 0)) {
    $$0 = $x;
    return +$$0;
   }
   $$0 = $x * 0.0;
   return +$$0;
  }
  if (!$3) {
   $19 = $0 << 9;
   if (($19 | 0) > -1) {
    $ex$025 = 0;
    $i$026 = $19;
    while (1) {
     $21 = $ex$025 + -1 | 0;
     $i$026 = $i$026 << 1;
     if (($i$026 | 0) <= -1) {
      $ex$0$lcssa = $21;
      break;
     } else $ex$025 = $21;
    }
   } else $ex$0$lcssa = 0;
   $ex$1 = $ex$0$lcssa;
   $uxi$0 = $0 << 1 - $ex$0$lcssa;
  } else {
   $ex$1 = $3;
   $uxi$0 = $0 & 8388607 | 8388608;
  }
  if (!$5) {
   $29 = $1 << 9;
   if (($29 | 0) > -1) {
    $ey$019 = 0;
    $i$120 = $29;
    while (1) {
     $31 = $ey$019 + -1 | 0;
     $i$120 = $i$120 << 1;
     if (($i$120 | 0) <= -1) {
      $ey$0$lcssa = $31;
      break;
     } else $ey$019 = $31;
    }
   } else $ey$0$lcssa = 0;
   $ey$1$ph = $ey$0$lcssa;
   $uy$sroa$0$0$ph = $1 << 1 - $ey$0$lcssa;
  } else {
   $ey$1$ph = $5;
   $uy$sroa$0$0$ph = $1 & 8388607 | 8388608;
  }
  $39 = $uxi$0 - $uy$sroa$0$0$ph | 0;
  $40 = ($39 | 0) > -1;
  L27 : do if (($ex$1 | 0) > ($ey$1$ph | 0)) {
   $62 = $40;
   $63 = $39;
   $ex$211 = $ex$1;
   $uxi$112 = $uxi$0;
   while (1) {
    if ($62) if (($uxi$112 | 0) == ($uy$sroa$0$0$ph | 0)) break; else $uxi$2 = $63; else $uxi$2 = $uxi$112;
    $43 = $uxi$2 << 1;
    $44 = $ex$211 + -1 | 0;
    $46 = $43 - $uy$sroa$0$0$ph | 0;
    $47 = ($46 | 0) > -1;
    if (($44 | 0) > ($ey$1$ph | 0)) {
     $62 = $47;
     $63 = $46;
     $ex$211 = $44;
     $uxi$112 = $43;
    } else {
     $$lcssa = $46;
     $$lcssa6 = $47;
     $ex$2$lcssa = $44;
     $uxi$1$lcssa = $43;
     break L27;
    }
   }
   $$0 = $x * 0.0;
   return +$$0;
  } else {
   $$lcssa = $39;
   $$lcssa6 = $40;
   $ex$2$lcssa = $ex$1;
   $uxi$1$lcssa = $uxi$0;
  } while (0);
  if ($$lcssa6) if (($uxi$1$lcssa | 0) == ($uy$sroa$0$0$ph | 0)) {
   $$0 = $x * 0.0;
   return +$$0;
  } else $uxi$3$ph = $$lcssa; else $uxi$3$ph = $uxi$1$lcssa;
  if ($uxi$3$ph >>> 0 < 8388608) {
   $ex$38 = $ex$2$lcssa;
   $uxi$39 = $uxi$3$ph;
   while (1) {
    $51 = $uxi$39 << 1;
    $52 = $ex$38 + -1 | 0;
    if ($51 >>> 0 < 8388608) {
     $ex$38 = $52;
     $uxi$39 = $51;
    } else {
     $ex$3$lcssa = $52;
     $uxi$3$lcssa = $51;
     break;
    }
   }
  } else {
   $ex$3$lcssa = $ex$2$lcssa;
   $uxi$3$lcssa = $uxi$3$ph;
  }
  if (($ex$3$lcssa | 0) > 0) $uxi$4 = $uxi$3$lcssa + -8388608 | $ex$3$lcssa << 23; else $uxi$4 = $uxi$3$lcssa >>> (1 - $ex$3$lcssa | 0);
  $$0 = (HEAP32[tempDoublePtr >> 2] = $uxi$4 | $6, +HEAPF32[tempDoublePtr >> 2]);
  return +$$0;
 }
 $12 = $x * $y;
 $$0 = $12 / $12;
 return +$$0;
}

function _luaH_getn($t) {
 $t = $t | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i3$i = 0, $$0$i6$i = 0, $$01$i = 0, $$19$i = 0, $1 = 0, $11 = 0, $15 = 0, $19 = 0, $22 = 0, $23 = 0, $24 = 0, $41 = 0, $5 = 0, $51 = 0, $68 = 0, $76 = 0, $77 = 0, $94 = 0, $99 = 0, $i$0$ = 0, $i$0$i = 0, $i$0$i$phi = 0, $i$09 = 0, $i$1$i = 0, $i$2$$i = 0, $i$210$i = 0, $j$08 = 0, $n$0$i$i = 0, $n$0$i2$i = 0, $n$0$i5$i = 0, label = 0;
 $1 = HEAP32[$t + 8 >> 2] | 0;
 if ($1) {
  $5 = HEAP32[$t + 12 >> 2] | 0;
  if (!(HEAP32[$5 + ($1 + -1 << 3) + 4 >> 2] | 0)) {
   if ($1 >>> 0 > 1) {
    $i$09 = 0;
    $j$08 = $1;
   } else {
    $$0 = 0;
    return $$0 | 0;
   }
   while (1) {
    $11 = ($i$09 + $j$08 | 0) >>> 1;
    $15 = (HEAP32[$5 + ($11 + -1 << 3) + 4 >> 2] | 0) == 0;
    $j$08 = $15 ? $11 : $j$08;
    $i$0$ = $15 ? $i$09 : $11;
    if (($j$08 - $i$0$ | 0) >>> 0 <= 1) {
     $$0 = $i$0$;
     break;
    } else $i$09 = $i$0$;
   }
   return $$0 | 0;
  }
 }
 $19 = HEAP32[$t + 16 >> 2] | 0;
 if (($19 | 0) == 62336) {
  $$0 = $1;
  return $$0 | 0;
 }
 $22 = $t + 12 | 0;
 $23 = $t + 7 | 0;
 $$01$i = $1 + 1 | 0;
 $i$0$i = $1;
 while (1) {
  $24 = $$01$i + -1 | 0;
  L15 : do if ($24 >>> 0 < $1 >>> 0) $$0$i$i = (HEAP32[$22 >> 2] | 0) + ($24 << 3) | 0; else {
   $n$0$i$i = $19 + (((1 << (HEAPU8[$23 >> 0] | 0)) + -1 & $$01$i) * 20 | 0) | 0;
   while (1) {
    if ((HEAP32[$n$0$i$i + 12 >> 2] | 0) == 19) if ((HEAP32[$n$0$i$i + 8 >> 2] | 0) == ($$01$i | 0)) break;
    $41 = HEAP32[$n$0$i$i + 16 >> 2] | 0;
    if (!$41) {
     $$0$i$i = 59168;
     break L15;
    }
    $n$0$i$i = $n$0$i$i + ($41 * 20 | 0) | 0;
   }
   $$0$i$i = $n$0$i$i;
  } while (0);
  if (!(HEAP32[$$0$i$i + 4 >> 2] | 0)) break;
  if ($$01$i >>> 0 > 1073741823) {
   $i$1$i = 1;
   label = 18;
   break;
  } else {
   $i$0$i$phi = $$01$i;
   $$01$i = $$01$i << 1;
   $i$0$i = $i$0$i$phi;
  }
 }
 if ((label | 0) == 18) {
  while (1) {
   label = 0;
   $51 = $i$1$i + -1 | 0;
   L30 : do if ($51 >>> 0 < $1 >>> 0) $$0$i6$i = (HEAP32[$22 >> 2] | 0) + ($51 << 3) | 0; else {
    $n$0$i5$i = $19 + (((1 << (HEAPU8[$23 >> 0] | 0)) + -1 & $i$1$i) * 20 | 0) | 0;
    while (1) {
     if ((HEAP32[$n$0$i5$i + 12 >> 2] | 0) == 19) if ((HEAP32[$n$0$i5$i + 8 >> 2] | 0) == ($i$1$i | 0)) break;
     $68 = HEAP32[$n$0$i5$i + 16 >> 2] | 0;
     if (!$68) {
      $$0$i6$i = 59168;
      break L30;
     }
     $n$0$i5$i = $n$0$i5$i + ($68 * 20 | 0) | 0;
    }
    $$0$i6$i = $n$0$i5$i;
   } while (0);
   if (!(HEAP32[$$0$i6$i + 4 >> 2] | 0)) {
    $$0 = $51;
    break;
   } else {
    $i$1$i = $i$1$i + 1 | 0;
    label = 18;
   }
  }
  return $$0 | 0;
 }
 if (($$01$i - $i$0$i | 0) >>> 0 > 1) {
  $$19$i = $$01$i;
  $i$210$i = $i$0$i;
 } else {
  $$0 = $i$0$i;
  return $$0 | 0;
 }
 while (1) {
  $76 = ($$19$i + $i$210$i | 0) >>> 1;
  $77 = $76 + -1 | 0;
  L47 : do if ($77 >>> 0 < $1 >>> 0) $$0$i3$i = (HEAP32[$22 >> 2] | 0) + ($77 << 3) | 0; else {
   $n$0$i2$i = $19 + (((1 << (HEAPU8[$23 >> 0] | 0)) + 2147483647 & $76) * 20 | 0) | 0;
   while (1) {
    if ((HEAP32[$n$0$i2$i + 12 >> 2] | 0) == 19) if ((HEAP32[$n$0$i2$i + 8 >> 2] | 0) == ($76 | 0)) break;
    $94 = HEAP32[$n$0$i2$i + 16 >> 2] | 0;
    if (!$94) {
     $$0$i3$i = 59168;
     break L47;
    }
    $n$0$i2$i = $n$0$i2$i + ($94 * 20 | 0) | 0;
   }
   $$0$i3$i = $n$0$i2$i;
  } while (0);
  $99 = (HEAP32[$$0$i3$i + 4 >> 2] | 0) == 0;
  $$19$i = $99 ? $76 : $$19$i;
  $i$2$$i = $99 ? $i$210$i : $76;
  if (($$19$i - $i$2$$i | 0) >>> 0 <= 1) {
   $$0 = $i$2$$i;
   break;
  } else $i$210$i = $i$2$$i;
 }
 return $$0 | 0;
}

function _png_read_end($png_ptr, $info_ptr) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, label = 0;
 if (!$png_ptr) return;
 if (!(_png_chunk_unknown_handling($png_ptr, 1229209940) | 0)) _png_read_finish_IDAT($png_ptr);
 if ((HEAP8[$png_ptr + 435 >> 0] | 0) == 3) if ((HEAP32[$png_ptr + 424 >> 2] | 0) > (HEAPU16[$png_ptr + 420 >> 1] | 0)) _png_benign_error($png_ptr, 74840);
 $12 = $png_ptr + 376 | 0;
 $13 = ($info_ptr | 0) == 0;
 $14 = $png_ptr + 208 | 0;
 do {
  $15 = _png_read_chunk_header($png_ptr) | 0;
  $16 = HEAP32[$12 >> 2] | 0;
  L13 : do if (($16 | 0) == 1229472850) _png_handle_IHDR($png_ptr, $info_ptr, $15); else if (($16 | 0) == 1229278788) _png_handle_IEND($png_ptr, $info_ptr, $15); else {
   if ($13) {
    _png_crc_finish($png_ptr, $15) | 0;
    break;
   }
   $17 = _png_chunk_unknown_handling($png_ptr, $16) | 0;
   $19 = ($16 | 0) == 1229209940;
   if ($17) {
    do if ($19) {
     if (!$15) if (!(HEAP32[$14 >> 2] & 8192)) break;
     _png_benign_error($png_ptr, 74472);
    } while (0);
    _png_handle_unknown($png_ptr, $info_ptr, $15, $17);
    if (($16 | 0) != 1347179589) break;
    HEAP32[$14 >> 2] = HEAP32[$14 >> 2] | 2;
    break;
   }
   if ($19) {
    if (!$15) {
     if (HEAP32[$14 >> 2] & 8192) label = 23;
    } else label = 23;
    if ((label | 0) == 23) {
     label = 0;
     _png_benign_error($png_ptr, 74472);
    }
    _png_crc_finish($png_ptr, $15) | 0;
    break;
   }
   do if (($16 | 0) == 1649100612) {
    _png_handle_bKGD($png_ptr, $info_ptr, $15);
    break L13;
   } else if (($16 | 0) == 1732332865) {
    _png_handle_gAMA($png_ptr, $info_ptr, $15);
    break L13;
   } else if (($16 | 0) == 1934642260) {
    _png_handle_sPLT($png_ptr, $info_ptr, $15);
    break L13;
   } else if (($16 | 0) == 1749635924) {
    _png_handle_hIST($png_ptr, $info_ptr, $15);
    break L13;
   } else if (($16 | 0) == 1883455820) {
    _png_handle_pCAL($png_ptr, $info_ptr, $15);
    break L13;
   } else if (($16 | 0) == 1883789683) {
    _png_handle_pHYs($png_ptr, $info_ptr, $15);
    break L13;
   } else if (($16 | 0) == 1347179589) {
    _png_handle_PLTE($png_ptr, $info_ptr, $15);
    break L13;
   } else if (($16 | 0) == 1766015824) {
    _png_handle_iCCP($png_ptr, $info_ptr, $15);
    break L13;
   } else if (($16 | 0) == 1951551059) {
    _png_handle_tRNS($png_ptr, $info_ptr, $15);
    break L13;
   } else if (($16 | 0) == 1950701684) {
    _png_handle_tEXt($png_ptr, $info_ptr, $15);
    break L13;
   } else if (($16 | 0) == 2052348020) {
    _png_handle_zTXt($png_ptr, $info_ptr, $15);
    break L13;
   } else if (($16 | 0) == 1934772034) {
    _png_handle_sRGB($png_ptr, $info_ptr, $15);
    break L13;
   } else if (($16 | 0) == 1933723988) {
    _png_handle_sBIT($png_ptr, $info_ptr, $15);
    break L13;
   } else if (($16 | 0) == 1950960965) {
    _png_handle_tIME($png_ptr, $info_ptr, $15);
    break L13;
   } else if (($16 | 0) == 1767135348) {
    _png_handle_iTXt($png_ptr, $info_ptr, $15);
    break L13;
   } else if (($16 | 0) == 1866876531) {
    _png_handle_oFFs($png_ptr, $info_ptr, $15);
    break L13;
   } else if (($16 | 0) == 1665684045) {
    _png_handle_cHRM($png_ptr, $info_ptr, $15);
    break L13;
   } else if (($16 | 0) == 1933787468) {
    _png_handle_sCAL($png_ptr, $info_ptr, $15);
    break L13;
   } else {
    _png_handle_unknown($png_ptr, $info_ptr, $15, 0);
    break L13;
   } while (0);
  } while (0);
 } while ((HEAP32[$14 >> 2] & 16 | 0) == 0);
 return;
}

function __ZN15b2FrictionJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $101 = 0.0, $104 = 0.0, $107 = 0.0, $11 = 0.0, $110 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $14 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $15 = 0, $151 = 0, $155 = 0.0, $156 = 0.0, $157 = 0, $16 = 0, $18 = 0, $2 = 0, $24 = 0.0, $25 = 0.0, $27 = 0.0, $29 = 0.0, $3 = 0, $31 = 0.0, $33 = 0.0, $35 = 0.0, $36 = 0.0, $41 = 0, $42 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $49 = 0.0, $5 = 0, $51 = 0.0, $52 = 0.0, $54 = 0.0, $56 = 0.0, $58 = 0.0, $61 = 0.0, $68 = 0.0, $71 = 0.0, $73 = 0.0, $74 = 0.0, $88 = 0.0, $89 = 0, $90 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0;
 $0 = $this + 104 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $data + 28 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $5 = $3 + ($1 * 12 | 0) | 0;
 $11 = +HEAPF32[$5 >> 2];
 $12 = +HEAPF32[$5 + 4 >> 2];
 $14 = +HEAPF32[$3 + ($1 * 12 | 0) + 8 >> 2];
 $15 = $this + 108 | 0;
 $16 = HEAP32[$15 >> 2] | 0;
 $18 = $3 + ($16 * 12 | 0) | 0;
 $24 = +HEAPF32[$18 >> 2];
 $25 = +HEAPF32[$18 + 4 >> 2];
 $27 = +HEAPF32[$3 + ($16 * 12 | 0) + 8 >> 2];
 $29 = +HEAPF32[$this + 144 >> 2];
 $31 = +HEAPF32[$this + 148 >> 2];
 $33 = +HEAPF32[$this + 152 >> 2];
 $35 = +HEAPF32[$this + 156 >> 2];
 $36 = +HEAPF32[$data >> 2];
 $41 = $this + 92 | 0;
 $42 = +HEAPF32[$41 >> 2];
 $45 = $36 * +HEAPF32[$this + 100 >> 2];
 $46 = $42 - ($27 - $14) * +HEAPF32[$this + 176 >> 2];
 $47 = -$45;
 $49 = $46 < $45 ? $46 : $45;
 $51 = $49 < $47 ? $47 : $49;
 HEAPF32[$41 >> 2] = $51;
 $52 = $51 - $42;
 $54 = $14 - $33 * $52;
 $56 = $27 + $35 * $52;
 $58 = +HEAPF32[$this + 124 >> 2];
 $61 = +HEAPF32[$this + 120 >> 2];
 $68 = +HEAPF32[$this + 116 >> 2];
 $71 = +HEAPF32[$this + 112 >> 2];
 $73 = $68 * $54 + ($24 - $58 * $56 - $11);
 $74 = $25 + $61 * $56 - $12 - $71 * $54;
 $88 = +HEAPF32[$this + 164 >> 2] * $73 + +HEAPF32[$this + 172 >> 2] * $74;
 $89 = $this + 84 | 0;
 $90 = $89;
 $96 = +HEAPF32[$90 >> 2];
 $97 = +HEAPF32[$90 + 4 >> 2];
 $98 = $96 - (+HEAPF32[$this + 160 >> 2] * $73 + +HEAPF32[$this + 168 >> 2] * $74);
 HEAPF32[$89 >> 2] = $98;
 $99 = $this + 88 | 0;
 $101 = +HEAPF32[$99 >> 2] - $88;
 HEAPF32[$99 >> 2] = $101;
 $104 = $36 * +HEAPF32[$this + 96 >> 2];
 $107 = $98 * $98 + $101 * $101;
 if ($107 > $104 * $104) {
  $110 = +Math_sqrt(+$107);
  if ($110 < 1.1920928955078125e-07) {
   $116 = $98;
   $118 = $101;
  } else {
   $112 = 1.0 / $110;
   $113 = $98 * $112;
   HEAPF32[$89 >> 2] = $113;
   $114 = $101 * $112;
   HEAPF32[$99 >> 2] = $114;
   $116 = $113;
   $118 = $114;
  }
  $115 = $104 * $116;
  HEAPF32[$89 >> 2] = $115;
  $117 = $104 * $118;
  HEAPF32[$99 >> 2] = $117;
  $120 = $115;
  $122 = $117;
 } else {
  $120 = $98;
  $122 = $101;
 }
 $119 = $120 - $96;
 $121 = $122 - $97;
 $144 = +($11 - $29 * $119);
 $145 = +($12 - $29 * $121);
 $146 = (HEAP32[$2 >> 2] | 0) + ((HEAP32[$0 >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$146 >> 2] = $144;
 HEAPF32[$146 + 4 >> 2] = $145;
 $151 = HEAP32[$2 >> 2] | 0;
 HEAPF32[$151 + ((HEAP32[$0 >> 2] | 0) * 12 | 0) + 8 >> 2] = $54 - $33 * ($71 * $121 - $119 * $68);
 $155 = +($24 + $31 * $119);
 $156 = +($25 + $31 * $121);
 $157 = $151 + ((HEAP32[$15 >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$157 >> 2] = $155;
 HEAPF32[$157 + 4 >> 2] = $156;
 HEAPF32[(HEAP32[$2 >> 2] | 0) + ((HEAP32[$15 >> 2] | 0) * 12 | 0) + 8 >> 2] = $56 + $35 * ($121 * $61 - $119 * $58);
 return;
}

function _luaK_code($fs, $i) {
 $fs = $fs | 0;
 $i = $i | 0;
 var $$0$i$i$i = 0, $$0$i$i5$i = 0, $$02$i$i = 0, $$pre$phi7Z2D = 0, $$pre$phiZ2D = 0, $$pre4 = 0, $0 = 0, $1 = 0, $14 = 0, $15 = 0, $2 = 0, $21 = 0, $27 = 0, $3 = 0, $37 = 0, $4 = 0, $47 = 0, $49 = 0, $55 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $68 = 0, $7 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $9 = 0, $fs$idx$val$idx$val$i$pre$i = 0, $storemerge$i = 0, label = 0;
 $0 = HEAP32[$fs >> 2] | 0;
 $1 = $fs + 24 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $fs + 16 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 do if (($2 | 0) == -1) $49 = $4; else {
  $fs$idx$val$idx$val$i$pre$i = HEAP32[$0 + 48 >> 2] | 0;
  $$02$i$i = $2;
  while (1) {
   $6 = $fs$idx$val$idx$val$i$pre$i + ($$02$i$i << 2) | 0;
   $7 = HEAP32[$6 >> 2] | 0;
   $9 = ($7 >>> 14) + -131071 | 0;
   if (($9 | 0) == -1) $$0$i$i$i = -1; else $$0$i$i$i = $$02$i$i + 1 + $9 | 0;
   if (($$02$i$i | 0) > 0) {
    $14 = $fs$idx$val$idx$val$i$pre$i + ($$02$i$i + -1 << 2) | 0;
    $15 = HEAP32[$14 >> 2] | 0;
    if ((HEAP8[59568 + ($15 & 63) >> 0] | 0) < 0) {
     $$0$i$i5$i = $14;
     $21 = $15;
    } else label = 7;
   } else label = 7;
   if ((label | 0) == 7) {
    label = 0;
    $$0$i$i5$i = $6;
    $21 = $7;
   }
   if (($21 & 63 | 0) == 35) {
    HEAP32[$$0$i$i5$i >> 2] = $21 & 8372224 | $21 >>> 23 << 6 | 34;
    $27 = $4 + ~$$02$i$i | 0;
    if (((($27 | 0) > -1 ? $27 : 0 - $27 | 0) | 0) > 131071) {
     label = 10;
     break;
    }
    $storemerge$i = HEAP32[$6 >> 2] & 16383 | ($27 << 14) + 2147467264;
   } else {
    $37 = $4 + ~$$02$i$i | 0;
    if (((($37 | 0) > -1 ? $37 : 0 - $37 | 0) | 0) > 131071) {
     label = 13;
     break;
    }
    $storemerge$i = ($37 << 14) + 2147467264 | $7 & 16383;
   }
   HEAP32[$6 >> 2] = $storemerge$i;
   if (($$0$i$i$i | 0) == -1) {
    label = 16;
    break;
   } else $$02$i$i = $$0$i$i$i;
  }
  if ((label | 0) == 10) _luaX_syntaxerror(HEAP32[$fs + 8 >> 2] | 0, 65576); else if ((label | 0) == 13) _luaX_syntaxerror(HEAP32[$fs + 8 >> 2] | 0, 65576); else if ((label | 0) == 16) {
   $49 = HEAP32[$3 >> 2] | 0;
   break;
  }
 } while (0);
 HEAP32[$1 >> 2] = -1;
 $47 = $0 + 20 | 0;
 if (($49 | 0) < (HEAP32[$47 >> 2] | 0)) {
  $$pre$phiZ2D = $0 + 48 | 0;
  $60 = $49;
 } else {
  $55 = $0 + 48 | 0;
  HEAP32[$55 >> 2] = _luaM_growaux_(HEAP32[(HEAP32[$fs + 8 >> 2] | 0) + 32 >> 2] | 0, HEAP32[$55 >> 2] | 0, $47, 4, 2147483647, 65568) | 0;
  $$pre$phiZ2D = $55;
  $60 = HEAP32[$3 >> 2] | 0;
 }
 HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + ($60 << 2) >> 2] = $i;
 $61 = HEAP32[$3 >> 2] | 0;
 $62 = $0 + 24 | 0;
 $$pre4 = $fs + 8 | 0;
 if (($61 | 0) < (HEAP32[$62 >> 2] | 0)) {
  $$pre$phi7Z2D = $0 + 56 | 0;
  $76 = $61;
  $71 = HEAP32[$$pre4 >> 2] | 0;
  $72 = $71 + 8 | 0;
  $73 = HEAP32[$72 >> 2] | 0;
  $74 = HEAP32[$$pre$phi7Z2D >> 2] | 0;
  $75 = $74 + ($76 << 2) | 0;
  HEAP32[$75 >> 2] = $73;
  $77 = HEAP32[$3 >> 2] | 0;
  $78 = $77 + 1 | 0;
  HEAP32[$3 >> 2] = $78;
  return $77 | 0;
 } else {
  $68 = $0 + 56 | 0;
  HEAP32[$68 >> 2] = _luaM_growaux_(HEAP32[(HEAP32[$$pre4 >> 2] | 0) + 32 >> 2] | 0, HEAP32[$68 >> 2] | 0, $62, 4, 2147483647, 65568) | 0;
  $$pre$phi7Z2D = $68;
  $76 = HEAP32[$3 >> 2] | 0;
  $71 = HEAP32[$$pre4 >> 2] | 0;
  $72 = $71 + 8 | 0;
  $73 = HEAP32[$72 >> 2] | 0;
  $74 = HEAP32[$$pre$phi7Z2D >> 2] | 0;
  $75 = $74 + ($76 << 2) | 0;
  HEAP32[$75 >> 2] = $73;
  $77 = HEAP32[$3 >> 2] | 0;
  $78 = $77 + 1 | 0;
  HEAP32[$3 >> 2] = $78;
  return $77 | 0;
 }
 return 0;
}

function _luaU_undump($L, $Z, $buff, $name) {
 $L = $L | 0;
 $Z = $Z | 0;
 $buff = $buff | 0;
 $name = $name | 0;
 var $0 = 0, $31 = 0, $38 = 0, $45 = 0, $5 = 0, $52 = 0, $59 = 0, $76 = 0, $77 = 0, $78 = 0, $81 = 0, $88 = 0, $89 = 0, $S = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $x$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $vararg_buffer10 = sp + 32 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $x$i = sp + 56 | 0;
 $S = sp + 40 | 0;
 $0 = HEAP8[$name >> 0] | 0;
 if ($0 << 24 >> 24 == 27) HEAP32[$S + 12 >> 2] = 63304; else if ($0 << 24 >> 24 == 61 | $0 << 24 >> 24 == 64) HEAP32[$S + 12 >> 2] = $name + 1; else HEAP32[$S + 12 >> 2] = $name;
 HEAP32[$S >> 2] = $L;
 $5 = $S + 4 | 0;
 HEAP32[$5 >> 2] = $Z;
 HEAP32[$S + 8 >> 2] = $buff;
 if (_luaZ_read($Z, $x$i, 3) | 0) _error($S, 75728);
 if (_memcmp(63297, $x$i, 3) | 0) _error($S, 63352);
 if (_luaZ_read(HEAP32[$5 >> 2] | 0, $x$i, 1) | 0) _error($S, 75728);
 if ((HEAP8[$x$i >> 0] | 0) != 83) _error($S, 63360);
 if (_luaZ_read(HEAP32[$5 >> 2] | 0, $x$i, 1) | 0) _error($S, 75728);
 if (HEAP8[$x$i >> 0] | 0) _error($S, 63384);
 if (_luaZ_read(HEAP32[$5 >> 2] | 0, $x$i, 6) | 0) _error($S, 75728);
 if (_memcmp(63408, $x$i, 6) | 0) _error($S, 63416);
 if (_luaZ_read(HEAP32[$5 >> 2] | 0, $x$i, 1) | 0) _error($S, 75728);
 if ((HEAP8[$x$i >> 0] | 0) != 4) {
  $31 = HEAP32[$S >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = 63432;
  _error($S, _luaO_pushfstring($31, 63552, $vararg_buffer) | 0);
 }
 if (_luaZ_read(HEAP32[$5 >> 2] | 0, $x$i, 1) | 0) _error($S, 75728);
 if ((HEAP8[$x$i >> 0] | 0) != 4) {
  $38 = HEAP32[$S >> 2] | 0;
  HEAP32[$vararg_buffer1 >> 2] = 63440;
  _error($S, _luaO_pushfstring($38, 63552, $vararg_buffer1) | 0);
 }
 if (_luaZ_read(HEAP32[$5 >> 2] | 0, $x$i, 1) | 0) _error($S, 75728);
 if ((HEAP8[$x$i >> 0] | 0) != 4) {
  $45 = HEAP32[$S >> 2] | 0;
  HEAP32[$vararg_buffer4 >> 2] = 63448;
  _error($S, _luaO_pushfstring($45, 63552, $vararg_buffer4) | 0);
 }
 if (_luaZ_read(HEAP32[$5 >> 2] | 0, $x$i, 1) | 0) _error($S, 75728);
 if ((HEAP8[$x$i >> 0] | 0) != 4) {
  $52 = HEAP32[$S >> 2] | 0;
  HEAP32[$vararg_buffer7 >> 2] = 63464;
  _error($S, _luaO_pushfstring($52, 63552, $vararg_buffer7) | 0);
 }
 if (_luaZ_read(HEAP32[$5 >> 2] | 0, $x$i, 1) | 0) _error($S, 75728);
 if ((HEAP8[$x$i >> 0] | 0) != 4) {
  $59 = HEAP32[$S >> 2] | 0;
  HEAP32[$vararg_buffer10 >> 2] = 63480;
  _error($S, _luaO_pushfstring($59, 63552, $vararg_buffer10) | 0);
 }
 if (_luaZ_read(HEAP32[$5 >> 2] | 0, $x$i, 4) | 0) _error($S, 75728);
 if ((HEAP32[$x$i >> 2] | 0) != 22136) _error($S, 63496);
 if (_luaZ_read(HEAP32[$5 >> 2] | 0, $x$i, 4) | 0) _error($S, 75728);
 if (+HEAPF32[$x$i >> 2] != 370.5) _error($S, 63520);
 if (_luaZ_read(HEAP32[$5 >> 2] | 0, $x$i, 1) | 0) _error($S, 75728);
 $76 = _luaF_newLclosure($L, HEAPU8[$x$i >> 0] | 0) | 0;
 $77 = $L + 8 | 0;
 $78 = HEAP32[$77 >> 2] | 0;
 HEAP32[$78 >> 2] = $76;
 HEAP32[$78 + 4 >> 2] = 70;
 $81 = (HEAP32[$77 >> 2] | 0) + 8 | 0;
 HEAP32[$77 >> 2] = $81;
 if (((HEAP32[$L + 24 >> 2] | 0) - $81 | 0) >= 8) {
  $88 = _luaF_newproto($L) | 0;
  $89 = $76 + 12 | 0;
  HEAP32[$89 >> 2] = $88;
  _LoadFunction($S, $88, 0);
  STACKTOP = sp;
  return $76 | 0;
 }
 _luaD_growstack($L, 0);
 $88 = _luaF_newproto($L) | 0;
 $89 = $76 + 12 | 0;
 HEAP32[$89 >> 2] = $88;
 _LoadFunction($S, $88, 0);
 STACKTOP = sp;
 return $76 | 0;
}

function __ZN13b2PulleyJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $100 = 0.0, $102 = 0.0, $104 = 0.0, $105 = 0.0, $107 = 0.0, $109 = 0.0, $11 = 0.0, $114 = 0.0, $116 = 0.0, $12 = 0.0, $121 = 0.0, $124 = 0.0, $131 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $15 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $165 = 0, $169 = 0.0, $170 = 0.0, $171 = 0, $179 = 0.0, $18 = 0, $2 = 0, $24 = 0.0, $25 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $36 = 0.0, $4 = 0, $41 = 0.0, $44 = 0.0, $47 = 0.0, $5 = 0, $52 = 0.0, $57 = 0.0, $60 = 0.0, $63 = 0.0, $68 = 0.0, $71 = 0.0, $76 = 0.0, $79 = 0.0, $83 = 0.0, $87 = 0.0, $89 = 0.0, $93 = 0.0, $97 = 0.0, $99 = 0.0, $mass$0 = 0.0;
 $0 = $this + 120 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $data + 24 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $3 + ($1 * 12 | 0) | 0;
 $5 = $4;
 $11 = +HEAPF32[$5 >> 2];
 $12 = +HEAPF32[$5 + 4 >> 2];
 $14 = +HEAPF32[$3 + ($1 * 12 | 0) + 8 >> 2];
 $15 = $this + 124 | 0;
 $16 = HEAP32[$15 >> 2] | 0;
 $18 = $3 + ($16 * 12 | 0) | 0;
 $24 = +HEAPF32[$18 >> 2];
 $25 = +HEAPF32[$18 + 4 >> 2];
 $27 = +HEAPF32[$3 + ($16 * 12 | 0) + 8 >> 2];
 $28 = +Math_sin(+$14);
 $29 = +Math_cos(+$14);
 $30 = +Math_sin(+$27);
 $31 = +Math_cos(+$27);
 $36 = +HEAPF32[$this + 92 >> 2] - +HEAPF32[$this + 160 >> 2];
 $41 = +HEAPF32[$this + 96 >> 2] - +HEAPF32[$this + 164 >> 2];
 $44 = $29 * $36 - $28 * $41;
 $47 = $28 * $36 + $29 * $41;
 $52 = +HEAPF32[$this + 100 >> 2] - +HEAPF32[$this + 168 >> 2];
 $57 = +HEAPF32[$this + 104 >> 2] - +HEAPF32[$this + 172 >> 2];
 $60 = $31 * $52 - $30 * $57;
 $63 = $30 * $52 + $31 * $57;
 $68 = $11 + $44 - +HEAPF32[$this + 68 >> 2];
 $71 = $12 + $47 - +HEAPF32[$this + 72 >> 2];
 $76 = $24 + $60 - +HEAPF32[$this + 76 >> 2];
 $79 = $25 + $63 - +HEAPF32[$this + 80 >> 2];
 $83 = +Math_sqrt(+($68 * $68 + $71 * $71));
 $87 = +Math_sqrt(+($76 * $76 + $79 * $79));
 if ($83 > .04999999701976776) {
  $89 = 1.0 / $83;
  $97 = $71 * $89;
  $99 = $68 * $89;
 } else {
  $97 = 0.0;
  $99 = 0.0;
 }
 if ($87 > .04999999701976776) {
  $93 = 1.0 / $87;
  $102 = $79 * $93;
  $104 = $76 * $93;
 } else {
  $102 = 0.0;
  $104 = 0.0;
 }
 $100 = $44 * $97 - $47 * $99;
 $105 = $60 * $102 - $63 * $104;
 $107 = +HEAPF32[$this + 176 >> 2];
 $109 = +HEAPF32[$this + 184 >> 2];
 $114 = +HEAPF32[$this + 180 >> 2];
 $116 = +HEAPF32[$this + 188 >> 2];
 $121 = +HEAPF32[$this + 112 >> 2];
 $124 = $107 + $100 * ($100 * $109) + $121 * $121 * ($114 + $105 * ($105 * $116));
 if ($124 > 0.0) $mass$0 = 1.0 / $124; else $mass$0 = $124;
 $131 = +HEAPF32[$this + 108 >> 2] - $83 - $87 * $121;
 if ($131 > 0.0) $179 = $131; else $179 = -$131;
 $134 = $mass$0 * $131;
 $135 = $99 * $134;
 $136 = $97 * $134;
 $137 = $134 * $121;
 $138 = $104 * $137;
 $139 = $102 * $137;
 $158 = +($11 + $135 * $107);
 $159 = +($12 + $136 * $107);
 $160 = $4;
 HEAPF32[$160 >> 2] = $158;
 HEAPF32[$160 + 4 >> 2] = $159;
 $165 = HEAP32[$2 >> 2] | 0;
 HEAPF32[$165 + ((HEAP32[$0 >> 2] | 0) * 12 | 0) + 8 >> 2] = $14 + ($44 * $136 - $47 * $135) * $109;
 $169 = +($24 + $138 * $114);
 $170 = +($25 + $139 * $114);
 $171 = $165 + ((HEAP32[$15 >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$171 >> 2] = $169;
 HEAPF32[$171 + 4 >> 2] = $170;
 HEAPF32[(HEAP32[$2 >> 2] | 0) + ((HEAP32[$15 >> 2] | 0) * 12 | 0) + 8 >> 2] = $27 + $116 * ($60 * $139 - $63 * $138);
 return $179 < .004999999888241291 | 0;
}

function _png_handle_cHRM($png_ptr, $info_ptr, $length) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 $length = $length | 0;
 var $$0$i2 = 0, $$0$i3 = 0, $$0$i4 = 0, $$0$i5 = 0, $$0$i6 = 0, $1 = 0, $105 = 0, $125 = 0, $145 = 0, $165 = 0, $180 = 0, $182 = 0, $26 = 0, $28 = 0, $46 = 0, $48 = 0, $66 = 0, $85 = 0, $buf = 0, $xy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $buf = sp + 32 | 0;
 $xy = sp;
 $1 = HEAP32[$png_ptr + 208 >> 2] | 0;
 if (!($1 & 1)) _png_chunk_error($png_ptr, 75496);
 if ($1 & 6) {
  _png_crc_finish($png_ptr, $length) | 0;
  _png_chunk_benign_error($png_ptr, 75472);
  STACKTOP = sp;
  return;
 }
 if (($length | 0) != 32) {
  _png_crc_finish($png_ptr, $length) | 0;
  _png_chunk_benign_error($png_ptr, 75488);
  STACKTOP = sp;
  return;
 }
 if ($png_ptr) {
  _png_read_data($png_ptr, $buf, 32);
  _png_calculate_crc($png_ptr, $buf, 32);
 }
 if (_png_crc_finish($png_ptr, 0) | 0) {
  STACKTOP = sp;
  return;
 }
 $26 = (HEAPU8[$buf + 1 >> 0] | 0) << 16 | (HEAPU8[$buf >> 0] | 0) << 24 | (HEAPU8[$buf + 2 >> 0] | 0) << 8 | (HEAPU8[$buf + 3 >> 0] | 0);
 $28 = $xy + 24 | 0;
 HEAP32[$28 >> 2] = ($26 | 0) > -1 ? $26 : -1;
 $46 = (HEAPU8[$buf + 5 >> 0] | 0) << 16 | (HEAPU8[$buf + 4 >> 0] | 0) << 24 | (HEAPU8[$buf + 6 >> 0] | 0) << 8 | (HEAPU8[$buf + 7 >> 0] | 0);
 $48 = $xy + 28 | 0;
 HEAP32[$48 >> 2] = ($46 | 0) > -1 ? $46 : -1;
 $66 = (HEAPU8[$buf + 9 >> 0] | 0) << 16 | (HEAPU8[$buf + 8 >> 0] | 0) << 24 | (HEAPU8[$buf + 10 >> 0] | 0) << 8 | (HEAPU8[$buf + 11 >> 0] | 0);
 HEAP32[$xy >> 2] = ($66 | 0) > -1 ? $66 : -1;
 $85 = (HEAPU8[$buf + 13 >> 0] | 0) << 16 | (HEAPU8[$buf + 12 >> 0] | 0) << 24 | (HEAPU8[$buf + 14 >> 0] | 0) << 8 | (HEAPU8[$buf + 15 >> 0] | 0);
 $$0$i6 = ($85 | 0) > -1 ? $85 : -1;
 HEAP32[$xy + 4 >> 2] = $$0$i6;
 $105 = (HEAPU8[$buf + 17 >> 0] | 0) << 16 | (HEAPU8[$buf + 16 >> 0] | 0) << 24 | (HEAPU8[$buf + 18 >> 0] | 0) << 8 | (HEAPU8[$buf + 19 >> 0] | 0);
 $$0$i5 = ($105 | 0) > -1 ? $105 : -1;
 HEAP32[$xy + 8 >> 2] = $$0$i5;
 $125 = (HEAPU8[$buf + 21 >> 0] | 0) << 16 | (HEAPU8[$buf + 20 >> 0] | 0) << 24 | (HEAPU8[$buf + 22 >> 0] | 0) << 8 | (HEAPU8[$buf + 23 >> 0] | 0);
 $$0$i4 = ($125 | 0) > -1 ? $125 : -1;
 HEAP32[$xy + 12 >> 2] = $$0$i4;
 $145 = (HEAPU8[$buf + 25 >> 0] | 0) << 16 | (HEAPU8[$buf + 24 >> 0] | 0) << 24 | (HEAPU8[$buf + 26 >> 0] | 0) << 8 | (HEAPU8[$buf + 27 >> 0] | 0);
 $$0$i3 = ($145 | 0) > -1 ? $145 : -1;
 HEAP32[$xy + 16 >> 2] = $$0$i3;
 $165 = (HEAPU8[$buf + 29 >> 0] | 0) << 16 | (HEAPU8[$buf + 28 >> 0] | 0) << 24 | (HEAPU8[$buf + 30 >> 0] | 0) << 8 | (HEAPU8[$buf + 31 >> 0] | 0);
 $$0$i2 = ($165 | 0) > -1 ? $165 : -1;
 HEAP32[$xy + 20 >> 2] = $$0$i2;
 if (!((HEAP32[$28 >> 2] | 0) == -1 | (HEAP32[$48 >> 2] | 0) == -1)) if (!((HEAP32[$xy >> 2] | 0) == -1 | ($$0$i6 | 0) == -1 | ($$0$i5 | 0) == -1 | ($$0$i4 | 0) == -1)) if (!(($$0$i3 | 0) == -1 | ($$0$i2 | 0) == -1)) {
  $180 = $png_ptr + 898 | 0;
  $182 = HEAPU16[$180 >> 1] | 0;
  if ($182 & 32768) {
   STACKTOP = sp;
   return;
  }
  if (!($182 & 16)) {
   HEAP16[$180 >> 1] = $182 | 16;
   _png_colorspace_set_chromaticities($png_ptr, $png_ptr + 824 | 0, $xy, 1) | 0;
   _png_colorspace_sync($png_ptr, $info_ptr);
   STACKTOP = sp;
   return;
  } else {
   HEAP16[$180 >> 1] = $182 | 32768;
   _png_colorspace_sync($png_ptr, $info_ptr);
   _png_chunk_benign_error($png_ptr, 75512);
   STACKTOP = sp;
   return;
  }
 }
 _png_chunk_benign_error($png_ptr, 75632);
 STACKTOP = sp;
 return;
}

function _start_page_no_capturepattern($f) {
 $f = $f | 0;
 var $$0 = 0, $$0$i = 0, $$0$i2 = 0, $$0$i4 = 0, $0 = 0, $1 = 0, $11 = 0, $17 = 0, $27 = 0, $32 = 0, $33 = 0, $36 = 0, $46 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $55 = 0, $66 = 0, $78 = 0, $87 = 0, $i$0$in = 0, $i1$09 = 0, $len$0$lcssa = 0, $len$08 = 0, label = 0, $i$0$in$looptemp = 0;
 $0 = $f + 32 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 do if (!$1) {
  $11 = _fgetc(HEAP32[$f + 20 >> 2] | 0) | 0;
  if (($11 | 0) == -1) {
   HEAP32[$f + 112 >> 2] = 1;
   break;
  } else {
   $$0$i = $11 & 255;
   label = 8;
   break;
  }
 } else if ($1 >>> 0 < (HEAP32[$f + 40 >> 2] | 0) >>> 0) {
  HEAP32[$0 >> 2] = $1 + 1;
  $$0$i = HEAP8[$1 >> 0] | 0;
  label = 8;
  break;
 } else {
  HEAP32[$f + 112 >> 2] = 1;
  break;
 } while (0);
 if ((label | 0) == 8) if ($$0$i << 24 >> 24) {
  HEAP32[$f + 116 >> 2] = 31;
  $$0 = 0;
  return $$0 | 0;
 }
 $17 = HEAP32[$0 >> 2] | 0;
 do if (!$17) {
  $27 = _fgetc(HEAP32[$f + 20 >> 2] | 0) | 0;
  if (($27 | 0) == -1) {
   HEAP32[$f + 112 >> 2] = 1;
   $$0$i2 = 0;
   break;
  } else {
   $$0$i2 = $27 & 255;
   break;
  }
 } else if ($17 >>> 0 < (HEAP32[$f + 40 >> 2] | 0) >>> 0) {
  HEAP32[$0 >> 2] = $17 + 1;
  $$0$i2 = HEAP8[$17 >> 0] | 0;
  break;
 } else {
  HEAP32[$f + 112 >> 2] = 1;
  $$0$i2 = 0;
  break;
 } while (0);
 HEAP8[$f + 1391 >> 0] = $$0$i2;
 $32 = _get32($f) | 0;
 $33 = _get32($f) | 0;
 _get32($f) | 0;
 HEAP32[$f + 1128 >> 2] = _get32($f) | 0;
 _get32($f) | 0;
 $36 = HEAP32[$0 >> 2] | 0;
 do if (!$36) {
  $46 = _fgetc(HEAP32[$f + 20 >> 2] | 0) | 0;
  if (($46 | 0) == -1) {
   HEAP32[$f + 112 >> 2] = 1;
   $$0$i4 = 0;
   break;
  } else {
   $$0$i4 = $46 & 255;
   break;
  }
 } else if ($36 >>> 0 < (HEAP32[$f + 40 >> 2] | 0) >>> 0) {
  HEAP32[$0 >> 2] = $36 + 1;
  $$0$i4 = HEAP8[$36 >> 0] | 0;
  break;
 } else {
  HEAP32[$f + 112 >> 2] = 1;
  $$0$i4 = 0;
  break;
 } while (0);
 $50 = $$0$i4 & 255;
 $51 = $f + 1132 | 0;
 HEAP32[$51 >> 2] = $50;
 $52 = $f + 1136 | 0;
 $53 = HEAP32[$0 >> 2] | 0;
 do if (!$53) {
  if ((_fread($52 | 0, $50 | 0, 1, HEAP32[$f + 20 >> 2] | 0) | 0) != 1) {
   HEAP32[$f + 112 >> 2] = 1;
   label = 30;
  }
 } else {
  $55 = $53 + $50 | 0;
  if ($55 >>> 0 > (HEAP32[$f + 40 >> 2] | 0) >>> 0) {
   HEAP32[$f + 112 >> 2] = 1;
   label = 30;
   break;
  } else {
   _memcpy($52 | 0, $53 | 0, $50 | 0) | 0;
   HEAP32[$0 >> 2] = $55;
   break;
  }
 } while (0);
 if ((label | 0) == 30) {
  HEAP32[$f + 116 >> 2] = 10;
  $$0 = 0;
  return $$0 | 0;
 }
 $66 = $f + 1420 | 0;
 HEAP32[$66 >> 2] = -2;
 L46 : do if (!(($32 | 0) == -1 & ($33 | 0) == -1)) {
  $i$0$in = HEAP32[$51 >> 2] | 0;
  do {
   $i$0$in$looptemp = $i$0$in;
   $i$0$in = $i$0$in + -1 | 0;
   if (($i$0$in$looptemp | 0) <= 0) break L46;
  } while ((HEAP8[$f + $i$0$in + 1136 >> 0] | 0) == -1);
  HEAP32[$66 >> 2] = $i$0$in;
  HEAP32[$f + 1424 >> 2] = $32;
 } while (0);
 if (HEAP8[$f + 1393 >> 0] | 0) {
  $78 = HEAP32[$51 >> 2] | 0;
  if (($78 | 0) > 0) {
   $i1$09 = 0;
   $len$08 = 0;
   do {
    $len$08 = (HEAPU8[$f + $i1$09 + 1136 >> 0] | 0) + $len$08 | 0;
    $i1$09 = $i1$09 + 1 | 0;
   } while (($i1$09 | 0) < ($78 | 0));
   $len$0$lcssa = $len$08 + 27 | 0;
  } else $len$0$lcssa = 27;
  $87 = HEAP32[$f + 52 >> 2] | 0;
  HEAP32[$f + 56 >> 2] = $87;
  HEAP32[$f + 60 >> 2] = $len$0$lcssa + $78 + $87;
  HEAP32[$f + 64 >> 2] = $87;
  HEAP32[$f + 68 >> 2] = 0;
  HEAP32[$f + 72 >> 2] = $32;
 }
 HEAP32[$f + 1396 >> 2] = 0;
 $$0 = 1;
 return $$0 | 0;
}

function _luaH_resize($L, $t, $nasize, $nhsize) {
 $L = $L | 0;
 $t = $t | 0;
 $nasize = $nasize | 0;
 $nhsize = $nhsize | 0;
 var $$0$i = 0, $$0$i$i = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $14 = 0, $15 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $26 = 0, $27 = 0, $4 = 0, $44 = 0, $49 = 0, $5 = 0, $54 = 0, $55 = 0, $6 = 0, $61 = 0, $66 = 0, $73 = 0, $74 = 0, $77 = 0, $82 = 0, $83 = 0, $cell$0$i = 0, $i$01$i = 0, $i$04 = 0, $j$02$in = 0, $k$i = 0, $n$0$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $k$i = sp;
 $0 = $t + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $t + 7 | 0;
 $4 = HEAPU8[$2 >> 0] | 0;
 $5 = $t + 16 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 if ($1 >>> 0 < $nasize >>> 0) {
  if (($nasize + 1 | 0) >>> 0 > 536870911) _luaM_toobig($L);
  $10 = $t + 12 | 0;
  $14 = _luaM_realloc_($L, HEAP32[$10 >> 2] | 0, $1 << 3, $nasize << 3) | 0;
  HEAP32[$10 >> 2] = $14;
  $15 = HEAP32[$0 >> 2] | 0;
  if ($15 >>> 0 < $nasize >>> 0) {
   $i$01$i = $15;
   do {
    HEAP32[$14 + ($i$01$i << 3) + 4 >> 2] = 0;
    $i$01$i = $i$01$i + 1 | 0;
   } while (($i$01$i | 0) != ($nasize | 0));
  }
  HEAP32[$0 >> 2] = $nasize;
 }
 _setnodevector($L, $t, $nhsize);
 do if ($1 >>> 0 > $nasize >>> 0) {
  HEAP32[$0 >> 2] = $nasize;
  $20 = $t + 12 | 0;
  $21 = $k$i + 4 | 0;
  $i$04 = $nasize;
  while (1) {
   $22 = HEAP32[$20 >> 2] | 0;
   if (!(HEAP32[$22 + ($i$04 << 3) + 4 >> 2] | 0)) $$pre$phiZ2D = $i$04 + 1 | 0; else {
    $26 = $22 + ($i$04 << 3) | 0;
    $27 = $i$04 + 1 | 0;
    L18 : do if ($i$04 >>> 0 < (HEAP32[$0 >> 2] | 0) >>> 0) {
     $$0$i$i = $26;
     label = 18;
    } else {
     $n$0$i$i = (HEAP32[$5 >> 2] | 0) + (((1 << (HEAPU8[$2 >> 0] | 0)) + -1 & $27) * 20 | 0) | 0;
     while (1) {
      if ((HEAP32[$n$0$i$i + 12 >> 2] | 0) == 19) if ((HEAP32[$n$0$i$i + 8 >> 2] | 0) == ($27 | 0)) break;
      $44 = HEAP32[$n$0$i$i + 16 >> 2] | 0;
      if (!$44) {
       label = 19;
       break L18;
      }
      $n$0$i$i = $n$0$i$i + ($44 * 20 | 0) | 0;
     }
     $$0$i$i = $n$0$i$i;
     label = 18;
    } while (0);
    if ((label | 0) == 18) {
     label = 0;
     if (($$0$i$i | 0) == 59168) label = 19; else $cell$0$i = $$0$i$i;
    }
    if ((label | 0) == 19) {
     label = 0;
     HEAP32[$k$i >> 2] = $27;
     HEAP32[$21 >> 2] = 19;
     $cell$0$i = _luaH_newkey($L, $t, $k$i) | 0;
    }
    $49 = $26;
    $54 = HEAP32[$49 + 4 >> 2] | 0;
    $55 = $cell$0$i;
    HEAP32[$55 >> 2] = HEAP32[$49 >> 2];
    HEAP32[$55 + 4 >> 2] = $54;
    $$pre$phiZ2D = $27;
   }
   if (($$pre$phiZ2D | 0) == ($1 | 0)) break; else $i$04 = $$pre$phiZ2D;
  }
  if (($nasize + 1 | 0) >>> 0 > 536870911) _luaM_toobig($L); else {
   $61 = $t + 12 | 0;
   HEAP32[$61 >> 2] = _luaM_realloc_($L, HEAP32[$61 >> 2] | 0, $1 << 3, $nasize << 3) | 0;
   break;
  }
 } while (0);
 $66 = 1 << $4;
 if (($66 | 0) > 0) {
  $j$02$in = $66;
  do {
   $j$02$in = $j$02$in + -1 | 0;
   if (HEAP32[$6 + ($j$02$in * 20 | 0) + 4 >> 2] | 0) {
    $73 = $6 + ($j$02$in * 20 | 0) + 8 | 0;
    $74 = _luaH_get($t, $73) | 0;
    if (($74 | 0) == 59168) $$0$i = _luaH_newkey($L, $t, $73) | 0; else $$0$i = $74;
    $77 = $6 + ($j$02$in * 20 | 0) | 0;
    $82 = HEAP32[$77 + 4 >> 2] | 0;
    $83 = $$0$i;
    HEAP32[$83 >> 2] = HEAP32[$77 >> 2];
    HEAP32[$83 + 4 >> 2] = $82;
   }
  } while (($j$02$in | 0) > 0);
 }
 if (($6 | 0) == 62336) {
  STACKTOP = sp;
  return;
 }
 _luaM_realloc_($L, $6, 20 << $4, 0) | 0;
 STACKTOP = sp;
 return;
}

function __ZN15b2ContactSolver9WarmStartEv($this) {
 $this = $this | 0;
 var $$lcssa = 0.0, $$lcssa10 = 0.0, $$lcssa11 = 0.0, $$lcssa9 = 0.0, $0 = 0, $100 = 0, $103 = 0.0, $104 = 0.0, $105 = 0, $11 = 0.0, $13 = 0.0, $15 = 0.0, $17 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $31 = 0.0, $33 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $42 = 0.0, $44 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $54 = 0.0, $58 = 0.0, $61 = 0.0, $62 = 0.0, $7 = 0, $71 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $86 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $i$020 = 0, $j$014 = 0, $wA$0$lcssa = 0.0, $wA$012 = 0.0, $wB$0$lcssa = 0.0, $wB$013 = 0.0;
 $0 = $this + 48 | 0;
 if ((HEAP32[$0 >> 2] | 0) <= 0) return;
 $3 = $this + 40 | 0;
 $4 = $this + 28 | 0;
 $21 = HEAP32[$4 >> 2] | 0;
 $i$020 = 0;
 do {
  $5 = HEAP32[$3 >> 2] | 0;
  $7 = HEAP32[$5 + ($i$020 * 156 | 0) + 112 >> 2] | 0;
  $9 = HEAP32[$5 + ($i$020 * 156 | 0) + 116 >> 2] | 0;
  $11 = +HEAPF32[$5 + ($i$020 * 156 | 0) + 120 >> 2];
  $13 = +HEAPF32[$5 + ($i$020 * 156 | 0) + 128 >> 2];
  $15 = +HEAPF32[$5 + ($i$020 * 156 | 0) + 124 >> 2];
  $17 = +HEAPF32[$5 + ($i$020 * 156 | 0) + 132 >> 2];
  $19 = HEAP32[$5 + ($i$020 * 156 | 0) + 148 >> 2] | 0;
  $20 = $21 + ($7 * 12 | 0) | 0;
  $22 = $20;
  $28 = +HEAPF32[$22 >> 2];
  $29 = +HEAPF32[$22 + 4 >> 2];
  $31 = +HEAPF32[$21 + ($7 * 12 | 0) + 8 >> 2];
  $33 = $21 + ($9 * 12 | 0) | 0;
  $39 = +HEAPF32[$33 >> 2];
  $40 = +HEAPF32[$33 + 4 >> 2];
  $42 = +HEAPF32[$21 + ($9 * 12 | 0) + 8 >> 2];
  $44 = $5 + ($i$020 * 156 | 0) + 72 | 0;
  $50 = +HEAPF32[$44 >> 2];
  $51 = +HEAPF32[$44 + 4 >> 2];
  if (($19 | 0) > 0) {
   $75 = $28;
   $77 = $29;
   $90 = $39;
   $92 = $40;
   $j$014 = 0;
   $wA$012 = $31;
   $wB$013 = $42;
   while (1) {
    $54 = +HEAPF32[$5 + ($i$020 * 156 | 0) + ($j$014 * 36 | 0) + 16 >> 2];
    $58 = +HEAPF32[$5 + ($i$020 * 156 | 0) + ($j$014 * 36 | 0) + 20 >> 2];
    $61 = $50 * $54 + $51 * $58;
    $62 = $51 * $54 - $50 * $58;
    $71 = $wA$012 - $13 * (+HEAPF32[$5 + ($i$020 * 156 | 0) + ($j$014 * 36 | 0) >> 2] * $62 - +HEAPF32[$5 + ($i$020 * 156 | 0) + ($j$014 * 36 | 0) + 4 >> 2] * $61);
    $74 = $75 - $11 * $61;
    $76 = $77 - $11 * $62;
    $86 = $wB$013 + $17 * ($62 * +HEAPF32[$5 + ($i$020 * 156 | 0) + ($j$014 * 36 | 0) + 8 >> 2] - $61 * +HEAPF32[$5 + ($i$020 * 156 | 0) + ($j$014 * 36 | 0) + 12 >> 2]);
    $89 = $90 + $15 * $61;
    $91 = $92 + $15 * $62;
    $j$014 = $j$014 + 1 | 0;
    if (($j$014 | 0) == ($19 | 0)) {
     $$lcssa = $76;
     $$lcssa10 = $91;
     $$lcssa11 = $89;
     $$lcssa9 = $74;
     $wA$0$lcssa = $71;
     $wB$0$lcssa = $86;
     break;
    } else {
     $75 = $74;
     $77 = $76;
     $90 = $89;
     $92 = $91;
     $wA$012 = $71;
     $wB$013 = $86;
    }
   }
  } else {
   $$lcssa = $29;
   $$lcssa10 = $40;
   $$lcssa11 = $39;
   $$lcssa9 = $28;
   $wA$0$lcssa = $31;
   $wB$0$lcssa = $42;
  }
  $94 = +$$lcssa9;
  $95 = +$$lcssa;
  $96 = $20;
  HEAPF32[$96 >> 2] = $94;
  HEAPF32[$96 + 4 >> 2] = $95;
  $100 = HEAP32[$4 >> 2] | 0;
  HEAPF32[$100 + ($7 * 12 | 0) + 8 >> 2] = $wA$0$lcssa;
  $103 = +$$lcssa11;
  $104 = +$$lcssa10;
  $105 = $100 + ($9 * 12 | 0) | 0;
  HEAPF32[$105 >> 2] = $103;
  HEAPF32[$105 + 4 >> 2] = $104;
  $21 = HEAP32[$4 >> 2] | 0;
  HEAPF32[$21 + ($9 * 12 | 0) + 8 >> 2] = $wB$0$lcssa;
  $i$020 = $i$020 + 1 | 0;
 } while (($i$020 | 0) < (HEAP32[$0 >> 2] | 0));
 return;
}

function _luaY_parser($L, $z, $buff, $dyd, $name, $firstchar) {
 $L = $L | 0;
 $z = $z | 0;
 $buff = $buff | 0;
 $dyd = $dyd | 0;
 $name = $name | 0;
 $firstchar = $firstchar | 0;
 var $0 = 0, $1 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $23 = 0, $25 = 0, $29 = 0, $36 = 0, $39 = 0, $45 = 0, $5 = 0, $51 = 0, $52 = 0, $6 = 0, $62 = 0, $78 = 0, $80 = 0, $bl$i = 0, $funcstate = 0, $lexstate = 0, $ls$idx$val$i$i = 0, $v$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $bl$i = sp + 128 | 0;
 $v$i = sp + 112 | 0;
 $lexstate = sp + 48 | 0;
 $funcstate = sp;
 $0 = _luaF_newLclosure($L, 1) | 0;
 $1 = $L + 8 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = 70;
 $5 = (HEAP32[$1 >> 2] | 0) + 8 | 0;
 HEAP32[$1 >> 2] = $5;
 $6 = $L + 24 | 0;
 if (((HEAP32[$6 >> 2] | 0) - $5 | 0) < 8) _luaD_growstack($L, 0);
 $12 = _luaH_new($L) | 0;
 HEAP32[$lexstate + 44 >> 2] = $12;
 $14 = HEAP32[$1 >> 2] | 0;
 HEAP32[$14 >> 2] = $12;
 HEAP32[$14 + 4 >> 2] = 69;
 $17 = (HEAP32[$1 >> 2] | 0) + 8 | 0;
 HEAP32[$1 >> 2] = $17;
 if (((HEAP32[$6 >> 2] | 0) - $17 | 0) < 8) _luaD_growstack($L, 0);
 $23 = _luaF_newproto($L) | 0;
 HEAP32[$0 + 12 >> 2] = $23;
 HEAP32[$funcstate >> 2] = $23;
 $25 = _luaS_new($L, $name) | 0;
 HEAP32[(HEAP32[$funcstate >> 2] | 0) + 72 >> 2] = $25;
 HEAP32[$lexstate + 40 >> 2] = $buff;
 $29 = $lexstate + 48 | 0;
 HEAP32[$29 >> 2] = $dyd;
 HEAP32[$dyd + 28 >> 2] = 0;
 HEAP32[$dyd + 16 >> 2] = 0;
 HEAP32[$dyd + 4 >> 2] = 0;
 _luaX_setinput($L, $lexstate, $z, HEAP32[(HEAP32[$funcstate >> 2] | 0) + 72 >> 2] | 0, $firstchar);
 $36 = $lexstate + 28 | 0;
 HEAP32[$funcstate + 4 >> 2] = HEAP32[$36 >> 2];
 $39 = $funcstate + 8 | 0;
 HEAP32[$39 >> 2] = $lexstate;
 HEAP32[$36 >> 2] = $funcstate;
 HEAP32[$funcstate + 16 >> 2] = 0;
 HEAP32[$funcstate + 20 >> 2] = 0;
 HEAP32[$funcstate + 24 >> 2] = -1;
 HEAP32[$funcstate + 28 >> 2] = 0;
 HEAP32[$funcstate + 32 >> 2] = 0;
 $45 = $funcstate + 40 | 0;
 HEAP32[$45 + 0 >> 2] = 0;
 HEAP8[$45 + 4 >> 0] = 0;
 HEAP32[$funcstate + 36 >> 2] = HEAP32[(HEAP32[$29 >> 2] | 0) + 4 >> 2];
 $51 = $funcstate + 12 | 0;
 HEAP32[$51 >> 2] = 0;
 $52 = HEAP32[$funcstate >> 2] | 0;
 HEAP32[$52 + 72 >> 2] = HEAP32[$lexstate + 52 >> 2];
 HEAP8[$52 + 8 >> 0] = 2;
 HEAP8[$bl$i + 14 >> 0] = 0;
 HEAP8[$bl$i + 12 >> 0] = HEAP8[$funcstate + 42 >> 0] | 0;
 $62 = HEAP32[(HEAP32[$39 >> 2] | 0) + 48 >> 2] | 0;
 HEAP32[$bl$i + 4 >> 2] = HEAP32[$62 + 28 >> 2];
 HEAP32[$bl$i + 8 >> 2] = HEAP32[$62 + 16 >> 2];
 HEAP8[$bl$i + 13 >> 0] = 0;
 HEAP32[$bl$i >> 2] = HEAP32[$51 >> 2];
 HEAP32[$51 >> 2] = $bl$i;
 HEAP8[(HEAP32[$funcstate >> 2] | 0) + 7 >> 0] = 1;
 HEAP32[$v$i + 8 >> 2] = -1;
 HEAP32[$v$i + 12 >> 2] = -1;
 HEAP32[$v$i >> 2] = 8;
 HEAP32[$v$i + 4 >> 2] = 0;
 _newupvalue($funcstate, HEAP32[$lexstate + 56 >> 2] | 0, $v$i) | 0;
 _luaX_next($lexstate);
 $78 = $lexstate + 12 | 0;
 L7 : while (1) {
  $ls$idx$val$i$i = HEAP32[$78 >> 2] | 0;
  switch ($ls$idx$val$i$i | 0) {
  case 277:
  case 289:
  case 262:
  case 261:
  case 260:
   {
    $80 = $ls$idx$val$i$i;
    break L7;
    break;
   }
  default:
   {}
  }
  _statement($lexstate);
  if (($ls$idx$val$i$i | 0) == 274) {
   label = 8;
   break;
  }
 }
 if ((label | 0) == 8) $80 = HEAP32[$78 >> 2] | 0;
 if (($80 | 0) == 289) {
  _close_func($lexstate);
  HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + -8;
  STACKTOP = sp;
  return $0 | 0;
 } else _error_expected($lexstate, 289);
 return 0;
}

function __ZNK13b2DynamicTree5QueryI19b2WorldQueryWrapperEEvPT_RK6b2AABB($this, $callback, $aabb) {
 $this = $this | 0;
 $callback = $callback | 0;
 $aabb = $aabb | 0;
 var $$be = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $42 = 0, $45 = 0, $5 = 0, $54 = 0, $65 = 0, $7 = 0, $71 = 0, $74 = 0, $75 = 0, $8 = 0, $80 = 0, $89 = 0, $91 = 0, $stack = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 $stack = sp;
 $0 = $stack + 4 | 0;
 HEAP32[$stack >> 2] = $0;
 $1 = $stack + 1028 | 0;
 HEAP32[$1 >> 2] = 0;
 $2 = $stack + 1032 | 0;
 HEAP32[$2 >> 2] = 256;
 $5 = HEAP32[$stack >> 2] | 0;
 HEAP32[$5 + (HEAP32[$1 >> 2] << 2) >> 2] = HEAP32[$this >> 2];
 $7 = HEAP32[$1 >> 2] | 0;
 $8 = $7 + 1 | 0;
 HEAP32[$1 >> 2] = $8;
 L1 : do if (($7 | 0) > -1) {
  $10 = $this + 4 | 0;
  $11 = $aabb + 4 | 0;
  $12 = $aabb + 8 | 0;
  $13 = $aabb + 12 | 0;
  $14 = $callback + 4 | 0;
  $16 = $8;
  $18 = $5;
  L3 : while (1) {
   $15 = $16 + -1 | 0;
   HEAP32[$1 >> 2] = $15;
   $19 = HEAP32[$18 + ($15 << 2) >> 2] | 0;
   do if (($19 | 0) == -1) $$be = $15; else {
    $21 = HEAP32[$10 >> 2] | 0;
    if ((+HEAPF32[$aabb >> 2] - +HEAPF32[$21 + ($19 * 36 | 0) + 8 >> 2] > 0.0 ? 1 : +HEAPF32[$11 >> 2] - +HEAPF32[$21 + ($19 * 36 | 0) + 12 >> 2] > 0.0) | +HEAPF32[$21 + ($19 * 36 | 0) >> 2] - +HEAPF32[$12 >> 2] > 0.0 | +HEAPF32[$21 + ($19 * 36 | 0) + 4 >> 2] - +HEAPF32[$13 >> 2] > 0.0) $$be = $15; else {
     $42 = $21 + ($19 * 36 | 0) + 24 | 0;
     if ((HEAP32[$42 >> 2] | 0) == -1) {
      $45 = HEAP32[$callback >> 2] | 0;
      if (($19 | 0) <= -1) {
       label = 8;
       break L3;
      }
      if ((HEAP32[$45 + 12 >> 2] | 0) <= ($19 | 0)) {
       label = 8;
       break L3;
      }
      $54 = HEAP32[$14 >> 2] | 0;
      if (!(FUNCTION_TABLE_iii[HEAP32[(HEAP32[$54 >> 2] | 0) + 8 >> 2] & 31]($54, HEAP32[(HEAP32[(HEAP32[$45 + 4 >> 2] | 0) + ($19 * 36 | 0) + 16 >> 2] | 0) + 16 >> 2] | 0) | 0)) break L1;
      $$be = HEAP32[$1 >> 2] | 0;
      break;
     }
     if (($15 | 0) == (HEAP32[$2 >> 2] | 0)) {
      HEAP32[$2 >> 2] = $15 << 1;
      $65 = __Z7b2Alloci($15 << 3) | 0;
      HEAP32[$stack >> 2] = $65;
      _memcpy($65 | 0, $18 | 0, HEAP32[$1 >> 2] << 2 | 0) | 0;
      if (($18 | 0) != ($0 | 0)) __Z6b2FreePv($18);
     }
     $71 = HEAP32[$stack >> 2] | 0;
     HEAP32[$71 + (HEAP32[$1 >> 2] << 2) >> 2] = HEAP32[$42 >> 2];
     $74 = (HEAP32[$1 >> 2] | 0) + 1 | 0;
     HEAP32[$1 >> 2] = $74;
     $75 = $21 + ($19 * 36 | 0) + 28 | 0;
     if (($74 | 0) == (HEAP32[$2 >> 2] | 0)) {
      HEAP32[$2 >> 2] = $74 << 1;
      $80 = __Z7b2Alloci($74 << 3) | 0;
      HEAP32[$stack >> 2] = $80;
      _memcpy($80 | 0, $71 | 0, HEAP32[$1 >> 2] << 2 | 0) | 0;
      if (($71 | 0) != ($0 | 0)) __Z6b2FreePv($71);
     }
     HEAP32[(HEAP32[$stack >> 2] | 0) + (HEAP32[$1 >> 2] << 2) >> 2] = HEAP32[$75 >> 2];
     $89 = (HEAP32[$1 >> 2] | 0) + 1 | 0;
     HEAP32[$1 >> 2] = $89;
     $$be = $89;
    }
   } while (0);
   if (($$be | 0) <= 0) break L1;
   $16 = $$be;
   $18 = HEAP32[$stack >> 2] | 0;
  }
  if ((label | 0) == 8) ___assert_fail(90168, 89592, 158, 89672);
 } while (0);
 $91 = HEAP32[$stack >> 2] | 0;
 if (($91 | 0) == ($0 | 0)) {
  STACKTOP = sp;
  return;
 }
 __Z6b2FreePv($91);
 HEAP32[$stack >> 2] = 0;
 STACKTOP = sp;
 return;
}

function __ZL19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5_($edgeIndex, $poly1, $xf1, $poly2, $xf2) {
 $edgeIndex = $edgeIndex | 0;
 $poly1 = $poly1 | 0;
 $xf1 = $xf1 | 0;
 $poly2 = $poly2 | 0;
 $xf2 = $xf2 | 0;
 var $1 = 0, $10 = 0.0, $12 = 0.0, $14 = 0.0, $17 = 0.0, $20 = 0.0, $25 = 0.0, $28 = 0.0, $3 = 0, $31 = 0.0, $34 = 0, $39 = 0.0, $43 = 0.0, $45 = 0.0, $47 = 0.0, $48 = 0.0, $5 = 0.0, $52 = 0.0, $55 = 0.0, $60 = 0.0, $63 = 0.0, $69 = 0, $7 = 0.0, $bestIndex$0$lcssa = 0, $bestIndex$05 = 0, $bestIndex$05$us = 0, $bestIndex$1 = 0, $bestIndex$1$us = 0, $i$04 = 0, $i$04$us = 0, $j$02$us = 0, $maxSeparation$0$lcssa = 0.0, $maxSeparation$03 = 0.0, $maxSeparation$03$us = 0.0, $maxSeparation$1 = 0.0, $maxSeparation$1$us = 0.0, $si$01$us = 0.0;
 $1 = HEAP32[$poly1 + 148 >> 2] | 0;
 $3 = HEAP32[$poly2 + 148 >> 2] | 0;
 $5 = +HEAPF32[$xf2 + 12 >> 2];
 $7 = +HEAPF32[$xf1 + 8 >> 2];
 $10 = +HEAPF32[$xf2 + 8 >> 2];
 $12 = +HEAPF32[$xf1 + 12 >> 2];
 $14 = $5 * $7 - $10 * $12;
 $17 = $7 * $10 + $5 * $12;
 $20 = +HEAPF32[$xf1 >> 2] - +HEAPF32[$xf2 >> 2];
 $25 = +HEAPF32[$xf1 + 4 >> 2] - +HEAPF32[$xf2 + 4 >> 2];
 $28 = $5 * $20 + $10 * $25;
 $31 = $5 * $25 - $10 * $20;
 if (($1 | 0) <= 0) {
  $bestIndex$0$lcssa = 0;
  $maxSeparation$0$lcssa = -3402823466385288598117041.0e14;
  HEAP32[$edgeIndex >> 2] = $bestIndex$0$lcssa;
  return +$maxSeparation$0$lcssa;
 }
 if (($3 | 0) > 0) {
  $bestIndex$05$us = 0;
  $i$04$us = 0;
  $maxSeparation$03$us = -3402823466385288598117041.0e14;
 } else {
  $bestIndex$05 = 0;
  $i$04 = 0;
  $maxSeparation$03 = -3402823466385288598117041.0e14;
  while (1) {
   $69 = $maxSeparation$03 < 3402823466385288598117041.0e14;
   $maxSeparation$1 = $69 ? 3402823466385288598117041.0e14 : $maxSeparation$03;
   $bestIndex$1 = $69 ? $i$04 : $bestIndex$05;
   $i$04 = $i$04 + 1 | 0;
   if (($i$04 | 0) == ($1 | 0)) {
    $bestIndex$0$lcssa = $bestIndex$1;
    $maxSeparation$0$lcssa = $maxSeparation$1;
    break;
   } else {
    $bestIndex$05 = $bestIndex$1;
    $maxSeparation$03 = $maxSeparation$1;
   }
  }
  HEAP32[$edgeIndex >> 2] = $bestIndex$0$lcssa;
  return +$maxSeparation$0$lcssa;
 }
 while (1) {
  $52 = +HEAPF32[$poly1 + ($i$04$us << 3) + 84 >> 2];
  $55 = +HEAPF32[$poly1 + ($i$04$us << 3) + 88 >> 2];
  $45 = $17 * $52 - $14 * $55;
  $47 = $14 * $52 + $17 * $55;
  $60 = +HEAPF32[$poly1 + ($i$04$us << 3) + 20 >> 2];
  $63 = +HEAPF32[$poly1 + ($i$04$us << 3) + 24 >> 2];
  $39 = $28 + ($17 * $60 - $14 * $63);
  $43 = $31 + ($14 * $60 + $17 * $63);
  $j$02$us = 0;
  $si$01$us = 3402823466385288598117041.0e14;
  do {
   $48 = $45 * (+HEAPF32[$poly2 + ($j$02$us << 3) + 20 >> 2] - $39) + $47 * (+HEAPF32[$poly2 + ($j$02$us << 3) + 24 >> 2] - $43);
   $si$01$us = $48 < $si$01$us ? $48 : $si$01$us;
   $j$02$us = $j$02$us + 1 | 0;
  } while (($j$02$us | 0) != ($3 | 0));
  $34 = $si$01$us > $maxSeparation$03$us;
  $maxSeparation$1$us = $34 ? $si$01$us : $maxSeparation$03$us;
  $bestIndex$1$us = $34 ? $i$04$us : $bestIndex$05$us;
  $i$04$us = $i$04$us + 1 | 0;
  if (($i$04$us | 0) == ($1 | 0)) {
   $bestIndex$0$lcssa = $bestIndex$1$us;
   $maxSeparation$0$lcssa = $maxSeparation$1$us;
   break;
  } else {
   $bestIndex$05$us = $bestIndex$1$us;
   $maxSeparation$03$us = $maxSeparation$1$us;
  }
 }
 HEAP32[$edgeIndex >> 2] = $bestIndex$0$lcssa;
 return +$maxSeparation$0$lcssa;
}

function _png_do_check_palette_indexes($png_ptr, $row_info) {
 $png_ptr = $png_ptr | 0;
 $row_info = $row_info | 0;
 var $1 = 0, $15 = 0, $17 = 0, $19 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $35 = 0, $38 = 0, $40 = 0, $42 = 0, $45 = 0, $47 = 0, $49 = 0, $5 = 0, $52 = 0, $54 = 0, $56 = 0, $59 = 0, $61 = 0, $64 = 0, $67 = 0, $69 = 0, $71 = 0, $74 = 0, $76 = 0, $80 = 0, $82 = 0, $85 = 0, $86 = 0, $87 = 0, $padding$01 = 0, $padding$15 = 0, $padding$210 = 0, $rp$02 = 0, $rp$16 = 0, $rp$211 = 0, $rp$315 = 0;
 $1 = HEAP16[$png_ptr + 420 >> 1] | 0;
 $5 = HEAPU8[$row_info + 9 >> 0] | 0;
 if (($1 & 65535 | 0) >= (1 << $5 | 0) | $1 << 16 >> 16 == 0) return;
 $15 = (Math_imul(HEAP32[$row_info >> 2] | 0, 0 - (HEAPU8[$row_info + 11 >> 0] | 0) | 0) | 0) & 7;
 $17 = HEAP32[$png_ptr + 384 >> 2] | 0;
 $19 = HEAP32[$row_info + 4 >> 2] | 0;
 $20 = $17 + $19 | 0;
 if (($5 | 0) == 2) {
  if (($19 | 0) <= 0) return;
  $26 = $png_ptr + 424 | 0;
  $40 = HEAP32[$26 >> 2] | 0;
  $padding$15 = $15;
  $rp$16 = $20;
  while (1) {
   $35 = HEAP8[$rp$16 >> 0] | 0;
   $38 = ($35 & 255) >>> $padding$15 & 3;
   if (($38 | 0) > ($40 | 0)) {
    HEAP32[$26 >> 2] = $38;
    $42 = HEAP8[$rp$16 >> 0] | 0;
    $47 = $38;
   } else {
    $42 = $35;
    $47 = $40;
   }
   $45 = ($42 & 255) >>> $padding$15 >>> 2 & 3;
   if (($45 | 0) > ($47 | 0)) {
    HEAP32[$26 >> 2] = $45;
    $49 = HEAP8[$rp$16 >> 0] | 0;
    $54 = $45;
   } else {
    $49 = $42;
    $54 = $47;
   }
   $52 = ($49 & 255) >>> $padding$15 >>> 4 & 3;
   if (($52 | 0) > ($54 | 0)) {
    HEAP32[$26 >> 2] = $52;
    $56 = HEAP8[$rp$16 >> 0] | 0;
    $61 = $52;
   } else {
    $56 = $49;
    $61 = $54;
   }
   $59 = ($56 & 255) >>> $padding$15 >>> 6 & 3;
   if (($59 | 0) > ($61 | 0)) {
    HEAP32[$26 >> 2] = $59;
    $85 = $59;
   } else $85 = $61;
   $rp$16 = $rp$16 + -1 | 0;
   if ($rp$16 >>> 0 <= $17 >>> 0) break; else {
    $40 = $85;
    $padding$15 = 0;
   }
  }
  return;
 } else if (($5 | 0) == 1) {
  if (($19 | 0) <= 0) return;
  $28 = $png_ptr + 424 | 0;
  $padding$01 = $15;
  $rp$02 = $20;
  while (1) {
   if ((HEAPU8[$rp$02 >> 0] | 0) >>> $padding$01) HEAP32[$28 >> 2] = 1;
   $rp$02 = $rp$02 + -1 | 0;
   if ($rp$02 >>> 0 <= $17 >>> 0) break; else $padding$01 = 0;
  }
  return;
 } else if (($5 | 0) == 4) {
  if (($19 | 0) <= 0) return;
  $24 = $png_ptr + 424 | 0;
  $69 = HEAP32[$24 >> 2] | 0;
  $padding$210 = $15;
  $rp$211 = $20;
  while (1) {
   $64 = HEAP8[$rp$211 >> 0] | 0;
   $67 = ($64 & 255) >>> $padding$210 & 15;
   if (($67 | 0) > ($69 | 0)) {
    HEAP32[$24 >> 2] = $67;
    $71 = HEAP8[$rp$211 >> 0] | 0;
    $76 = $67;
   } else {
    $71 = $64;
    $76 = $69;
   }
   $74 = ($71 & 255) >>> $padding$210 >>> 4 & 15;
   if (($74 | 0) > ($76 | 0)) {
    HEAP32[$24 >> 2] = $74;
    $86 = $74;
   } else $86 = $76;
   $rp$211 = $rp$211 + -1 | 0;
   if ($rp$211 >>> 0 <= $17 >>> 0) break; else {
    $69 = $86;
    $padding$210 = 0;
   }
  }
  return;
 } else if (($5 | 0) == 8) {
  if (($19 | 0) <= 0) return;
  $22 = $png_ptr + 424 | 0;
  $82 = HEAP32[$22 >> 2] | 0;
  $rp$315 = $20;
  while (1) {
   $80 = HEAPU8[$rp$315 >> 0] | 0;
   if (($80 | 0) > ($82 | 0)) {
    HEAP32[$22 >> 2] = $80;
    $87 = $80;
   } else $87 = $82;
   $rp$315 = $rp$315 + -1 | 0;
   if ($rp$315 >>> 0 <= $17 >>> 0) break; else $82 = $87;
  }
  return;
 } else return;
}

function _get32($f) {
 $f = $f | 0;
 var $$0$i$ph = 0, $$0$i1$ph = 0, $$0$i3$ph = 0, $$0$i5 = 0, $$ph = 0, $$ph8 = 0, $$pr = 0, $$pr7 = 0, $$pr9 = 0, $0 = 0, $1 = 0, $12 = 0, $16 = 0, $18 = 0, $20 = 0, $25 = 0, $28 = 0, $31 = 0, $33 = 0, $35 = 0, $37 = 0, $4 = 0, $42 = 0, $45 = 0, $48 = 0, $50 = 0, $52 = 0, $58 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, label = 0;
 $0 = $f + 32 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 do if (!$1) {
  $12 = _fgetc(HEAP32[$f + 20 >> 2] | 0) | 0;
  if (($12 | 0) == -1) {
   HEAP32[$f + 112 >> 2] = 1;
   $$0$i$ph = 0;
   label = 8;
   break;
  } else {
   $$0$i$ph = $12 & 255;
   label = 8;
   break;
  }
 } else {
  $4 = HEAP32[$f + 40 >> 2] | 0;
  if ($1 >>> 0 < $4 >>> 0) {
   $7 = $1 + 1 | 0;
   HEAP32[$0 >> 2] = $7;
   $16 = $7;
   $18 = $4;
   $25 = HEAPU8[$1 >> 0] | 0;
   label = 10;
   break;
  } else {
   HEAP32[$f + 112 >> 2] = 1;
   $$0$i$ph = 0;
   label = 8;
   break;
  }
 } while (0);
 do if ((label | 0) == 8) {
  $$pr = HEAP32[$0 >> 2] | 0;
  if ($$pr) {
   $16 = $$pr;
   $18 = HEAP32[$f + 40 >> 2] | 0;
   $25 = $$0$i$ph;
   label = 10;
   break;
  }
  $28 = _fgetc(HEAP32[$f + 20 >> 2] | 0) | 0;
  if (($28 | 0) == -1) {
   HEAP32[$f + 112 >> 2] = 1;
   $$0$i1$ph = 0;
   $$ph = $$0$i$ph;
   label = 16;
   break;
  } else {
   $$0$i1$ph = $28 << 8 & 65280;
   $$ph = $$0$i$ph;
   label = 16;
   break;
  }
 } while (0);
 do if ((label | 0) == 10) if ($16 >>> 0 < $18 >>> 0) {
  $20 = $16 + 1 | 0;
  HEAP32[$0 >> 2] = $20;
  $33 = $20;
  $35 = $18;
  $42 = (HEAPU8[$16 >> 0] | 0) << 8 | $25;
  label = 18;
  break;
 } else {
  HEAP32[$f + 112 >> 2] = 1;
  $$0$i1$ph = 0;
  $$ph = $25;
  label = 16;
  break;
 } while (0);
 do if ((label | 0) == 16) {
  $$pr7 = HEAP32[$0 >> 2] | 0;
  $31 = $$0$i1$ph | $$ph;
  if ($$pr7) {
   $33 = $$pr7;
   $35 = HEAP32[$f + 40 >> 2] | 0;
   $42 = $31;
   label = 18;
   break;
  }
  $45 = _fgetc(HEAP32[$f + 20 >> 2] | 0) | 0;
  if (($45 | 0) == -1) {
   HEAP32[$f + 112 >> 2] = 1;
   $$0$i3$ph = 0;
   $$ph8 = $31;
   label = 24;
   break;
  } else {
   $$0$i3$ph = $45 << 16 & 16711680;
   $$ph8 = $31;
   label = 24;
   break;
  }
 } while (0);
 do if ((label | 0) == 18) if ($33 >>> 0 < $35 >>> 0) {
  $37 = $33 + 1 | 0;
  HEAP32[$0 >> 2] = $37;
  $50 = $37;
  $52 = $35;
  $66 = (HEAPU8[$33 >> 0] | 0) << 16 | $42;
  break;
 } else {
  HEAP32[$f + 112 >> 2] = 1;
  $$0$i3$ph = 0;
  $$ph8 = $42;
  label = 24;
  break;
 } while (0);
 do if ((label | 0) == 24) {
  $$pr9 = HEAP32[$0 >> 2] | 0;
  $48 = $$0$i3$ph | $$ph8;
  if ($$pr9) {
   $50 = $$pr9;
   $52 = HEAP32[$f + 40 >> 2] | 0;
   $66 = $48;
   break;
  }
  $58 = _fgetc(HEAP32[$f + 20 >> 2] | 0) | 0;
  if (($58 | 0) == -1) {
   HEAP32[$f + 112 >> 2] = 1;
   $$0$i5 = 0;
   $65 = $48;
   $62 = $$0$i5 & 255;
   $63 = $62 << 24;
   $64 = $63 | $65;
   return $64 | 0;
  } else {
   $$0$i5 = $58 & 255;
   $65 = $48;
   $62 = $$0$i5 & 255;
   $63 = $62 << 24;
   $64 = $63 | $65;
   return $64 | 0;
  }
 } while (0);
 if ($50 >>> 0 < $52 >>> 0) {
  HEAP32[$0 >> 2] = $50 + 1;
  $$0$i5 = HEAP8[$50 >> 0] | 0;
  $65 = $66;
  $62 = $$0$i5 & 255;
  $63 = $62 << 24;
  $64 = $63 | $65;
  return $64 | 0;
 } else {
  HEAP32[$f + 112 >> 2] = 1;
  $$0$i5 = 0;
  $65 = $66;
  $62 = $$0$i5 & 255;
  $63 = $62 << 24;
  $64 = $63 | $65;
  return $64 | 0;
 }
 return 0;
}

function _png_read_IDAT_data($png_ptr, $output, $avail_out) {
 $png_ptr = $png_ptr | 0;
 $output = $output | 0;
 $avail_out = $avail_out | 0;
 var $$ = 0, $$01 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $21 = 0, $25 = 0, $29 = 0, $30 = 0, $32 = 0, $35 = 0, $4 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer$1$i = 0, $storemerge = 0, $tmpbuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1024 | 0;
 $tmpbuf = sp;
 $0 = $png_ptr + 224 | 0;
 $1 = $png_ptr + 236 | 0;
 HEAP32[$1 >> 2] = $output;
 $2 = $png_ptr + 240 | 0;
 HEAP32[$2 >> 2] = 0;
 $4 = $png_ptr + 228 | 0;
 $5 = ($output | 0) != 0;
 $6 = $png_ptr + 408 | 0;
 $7 = $png_ptr + 376 | 0;
 $8 = $png_ptr + 796 | 0;
 $9 = $png_ptr + 788 | 0;
 $10 = $png_ptr + 792 | 0;
 $11 = ($png_ptr | 0) == 0;
 $$01 = ($output | 0) == 0 ? 0 : $avail_out;
 L1 : while (1) {
  if (!(HEAP32[$4 >> 2] | 0)) {
   $14 = HEAP32[$6 >> 2] | 0;
   while (1) {
    if ($14) break;
    _png_crc_finish($png_ptr, 0) | 0;
    $16 = _png_read_chunk_header($png_ptr) | 0;
    HEAP32[$6 >> 2] = $16;
    if ((HEAP32[$7 >> 2] | 0) == 1229209940) $14 = $16; else {
     label = 6;
     break L1;
    }
   }
   $19 = HEAP32[$8 >> 2] | 0;
   $$ = $19 >>> 0 > $14 >>> 0 ? $14 : $19;
   $21 = HEAP32[$9 >> 2] | 0;
   if (!$21) label = 10; else if ((HEAP32[$10 >> 2] | 0) >>> 0 < $$ >>> 0) {
    HEAP32[$9 >> 2] = 0;
    HEAP32[$10 >> 2] = 0;
    _png_free($png_ptr, $21);
    label = 10;
   } else $buffer$1$i = $21;
   if ((label | 0) == 10) {
    label = 0;
    $25 = _png_malloc_base($png_ptr, $$) | 0;
    if (!$25) {
     label = 12;
     break;
    }
    HEAP32[$9 >> 2] = $25;
    HEAP32[$10 >> 2] = $$;
    $buffer$1$i = $25;
   }
   if (!$11) {
    _png_read_data($png_ptr, $buffer$1$i, $$);
    _png_calculate_crc($png_ptr, $buffer$1$i, $$);
   }
   HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) - $$;
   HEAP32[$0 >> 2] = $buffer$1$i;
   HEAP32[$4 >> 2] = $$;
  }
  if ($5) {
   $$1 = 0;
   $storemerge = $$01;
  } else {
   HEAP32[$1 >> 2] = $tmpbuf;
   $$1 = $$01;
   $storemerge = 1024;
  }
  HEAP32[$2 >> 2] = $storemerge;
  $29 = _inflate($0, 0) | 0;
  $30 = HEAP32[$2 >> 2] | 0;
  $$01 = ($5 ? $30 : 1024 - $30 | 0) + $$1 | 0;
  HEAP32[$2 >> 2] = 0;
  if (($29 | 0) == 1) {
   label = 19;
   break;
  } else if ($29) {
   label = 22;
   break;
  }
  if (!$$01) {
   label = 30;
   break;
  }
 }
 if ((label | 0) == 6) _png_error($png_ptr, 76904); else if ((label | 0) == 12) _png_chunk_error($png_ptr, 77120); else if ((label | 0) == 19) {
  HEAP32[$1 >> 2] = 0;
  $32 = $png_ptr + 208 | 0;
  HEAP32[$32 >> 2] = HEAP32[$32 >> 2] | 8;
  $35 = $png_ptr + 212 | 0;
  HEAP32[$35 >> 2] = HEAP32[$35 >> 2] | 8;
  if (!(HEAP32[$4 >> 2] | 0)) {
   if (HEAP32[$6 >> 2] | 0) label = 21;
  } else label = 21;
  if ((label | 0) == 21) _png_chunk_benign_error($png_ptr, 76928);
  if (!$$01) {
   STACKTOP = sp;
   return;
  }
  if ($5) _png_error($png_ptr, 76904);
  _png_chunk_benign_error($png_ptr, 76952);
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 22) {
  _png_zstream_error($png_ptr, $29);
  $43 = HEAP32[$png_ptr + 248 >> 2] | 0;
  if ($5) _png_chunk_error($png_ptr, $43);
  _png_chunk_benign_error($png_ptr, $43);
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 30) {
  STACKTOP = sp;
  return;
 }
}

function _scanexp($f, $pok) {
 $f = $f | 0;
 $pok = $pok | 0;
 var $$lcssa18 = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $2 = 0, $20 = 0, $35 = 0, $36 = 0, $47 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $58 = 0, $60 = 0, $61 = 0, $62 = 0, $76 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $96 = 0, $97 = 0, $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$111 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $x$012 = 0;
 $0 = $f + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $f + 100 | 0;
 if ($1 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
  HEAP32[$0 >> 2] = $1 + 1;
  $9 = HEAPU8[$1 >> 0] | 0;
 } else $9 = ___shgetc($f) | 0;
 if (($9 | 0) == 43 | ($9 | 0) == 45) {
  $11 = ($9 | 0) == 45 & 1;
  $12 = HEAP32[$0 >> 2] | 0;
  if ($12 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
   HEAP32[$0 >> 2] = $12 + 1;
   $20 = HEAPU8[$12 >> 0] | 0;
  } else $20 = ___shgetc($f) | 0;
  if (($pok | 0) != 0 & ($20 + -48 | 0) >>> 0 > 9) if (!(HEAP32[$2 >> 2] | 0)) {
   $c$0 = $20;
   $neg$0 = $11;
  } else {
   HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
   $c$0 = $20;
   $neg$0 = $11;
  } else {
   $c$0 = $20;
   $neg$0 = $11;
  }
 } else {
  $c$0 = $9;
  $neg$0 = 0;
 }
 if (($c$0 + -48 | 0) >>> 0 > 9) {
  if (!(HEAP32[$2 >> 2] | 0)) {
   $96 = -2147483648;
   $97 = 0;
   tempRet0 = $96;
   return $97 | 0;
  }
  HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
  $96 = -2147483648;
  $97 = 0;
  tempRet0 = $96;
  return $97 | 0;
 } else {
  $c$111 = $c$0;
  $x$012 = 0;
 }
 while (1) {
  $35 = $c$111 + -48 + ($x$012 * 10 | 0) | 0;
  $36 = HEAP32[$0 >> 2] | 0;
  if ($36 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
   HEAP32[$0 >> 2] = $36 + 1;
   $c$1$be = HEAPU8[$36 >> 0] | 0;
  } else $c$1$be = ___shgetc($f) | 0;
  if (($c$1$be + -48 | 0) >>> 0 < 10 & ($35 | 0) < 214748364) {
   $c$111 = $c$1$be;
   $x$012 = $35;
  } else {
   $$lcssa18 = $35;
   $c$1$be$lcssa = $c$1$be;
   break;
  }
 }
 $47 = (($$lcssa18 | 0) < 0) << 31 >> 31;
 if (($c$1$be$lcssa + -48 | 0) >>> 0 < 10) {
  $52 = $$lcssa18;
  $53 = $47;
  $c$27 = $c$1$be$lcssa;
  while (1) {
   $54 = ___muldi3($52 | 0, $53 | 0, 10, 0) | 0;
   $55 = tempRet0;
   $58 = _i64Add($c$27 | 0, (($c$27 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0;
   $60 = _i64Add($58 | 0, tempRet0 | 0, $54 | 0, $55 | 0) | 0;
   $61 = tempRet0;
   $62 = HEAP32[$0 >> 2] | 0;
   if ($62 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
    HEAP32[$0 >> 2] = $62 + 1;
    $c$2$be = HEAPU8[$62 >> 0] | 0;
   } else $c$2$be = ___shgetc($f) | 0;
   if (($c$2$be + -48 | 0) >>> 0 < 10 & (($61 | 0) < 21474836 | ($61 | 0) == 21474836 & $60 >>> 0 < 2061584302)) {
    $52 = $60;
    $53 = $61;
    $c$27 = $c$2$be;
   } else {
    $90 = $60;
    $91 = $61;
    $c$2$lcssa = $c$2$be;
    break;
   }
  }
 } else {
  $90 = $$lcssa18;
  $91 = $47;
  $c$2$lcssa = $c$1$be$lcssa;
 }
 if (($c$2$lcssa + -48 | 0) >>> 0 < 10) do {
  $76 = HEAP32[$0 >> 2] | 0;
  if ($76 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
   HEAP32[$0 >> 2] = $76 + 1;
   $c$3$be = HEAPU8[$76 >> 0] | 0;
  } else $c$3$be = ___shgetc($f) | 0;
 } while (($c$3$be + -48 | 0) >>> 0 < 10);
 if (HEAP32[$2 >> 2] | 0) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
 $89 = ($neg$0 | 0) != 0;
 $92 = _i64Subtract(0, 0, $90 | 0, $91 | 0) | 0;
 $96 = $89 ? tempRet0 : $91;
 $97 = $89 ? $92 : $90;
 tempRet0 = $96;
 return $97 | 0;
}

function __ZN13b2DynamicTree10RemoveLeafEi($this, $leaf) {
 $this = $this | 0;
 $leaf = $leaf | 0;
 var $14 = 0, $2 = 0, $23 = 0, $26 = 0, $3 = 0, $31 = 0, $32 = 0, $34 = 0, $36 = 0, $39 = 0.0, $41 = 0.0, $45 = 0.0, $47 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $58 = 0.0, $6 = 0, $60 = 0.0, $64 = 0.0, $66 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $75 = 0, $77 = 0, $79 = 0, $9 = 0, $92 = 0, $95 = 0, $index$02 = 0, $sibling$0 = 0;
 if ((HEAP32[$this >> 2] | 0) == ($leaf | 0)) {
  HEAP32[$this >> 2] = -1;
  return;
 }
 $2 = $this + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $5 = HEAP32[$3 + ($leaf * 36 | 0) + 20 >> 2] | 0;
 $6 = $3 + ($5 * 36 | 0) + 20 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 $9 = HEAP32[$3 + ($5 * 36 | 0) + 24 >> 2] | 0;
 if (($9 | 0) == ($leaf | 0)) $sibling$0 = HEAP32[$3 + ($5 * 36 | 0) + 28 >> 2] | 0; else $sibling$0 = $9;
 if (($7 | 0) == -1) {
  HEAP32[$this >> 2] = $sibling$0;
  HEAP32[$3 + ($sibling$0 * 36 | 0) + 20 >> 2] = -1;
  if (($5 | 0) <= -1) ___assert_fail(90096, 90016, 94, 90136);
  if ((HEAP32[$this + 12 >> 2] | 0) <= ($5 | 0)) ___assert_fail(90096, 90016, 94, 90136);
  $92 = $this + 8 | 0;
  if ((HEAP32[$92 >> 2] | 0) <= 0) ___assert_fail(90152, 90016, 95, 90136);
  $95 = $this + 16 | 0;
  HEAP32[$6 >> 2] = HEAP32[$95 >> 2];
  HEAP32[$3 + ($5 * 36 | 0) + 32 >> 2] = -1;
  HEAP32[$95 >> 2] = $5;
  HEAP32[$92 >> 2] = (HEAP32[$92 >> 2] | 0) + -1;
  return;
 }
 $14 = $3 + ($7 * 36 | 0) + 24 | 0;
 if ((HEAP32[$14 >> 2] | 0) == ($5 | 0)) HEAP32[$14 >> 2] = $sibling$0; else HEAP32[$3 + ($7 * 36 | 0) + 28 >> 2] = $sibling$0;
 HEAP32[$3 + ($sibling$0 * 36 | 0) + 20 >> 2] = $7;
 if (($5 | 0) <= -1) ___assert_fail(90096, 90016, 94, 90136);
 if ((HEAP32[$this + 12 >> 2] | 0) <= ($5 | 0)) ___assert_fail(90096, 90016, 94, 90136);
 $23 = $this + 8 | 0;
 if ((HEAP32[$23 >> 2] | 0) <= 0) ___assert_fail(90152, 90016, 95, 90136);
 $26 = $this + 16 | 0;
 HEAP32[$6 >> 2] = HEAP32[$26 >> 2];
 HEAP32[$3 + ($5 * 36 | 0) + 32 >> 2] = -1;
 HEAP32[$26 >> 2] = $5;
 HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + -1;
 $index$02 = $7;
 do {
  $31 = __ZN13b2DynamicTree7BalanceEi($this, $index$02) | 0;
  $32 = HEAP32[$2 >> 2] | 0;
  $34 = HEAP32[$32 + ($31 * 36 | 0) + 24 >> 2] | 0;
  $36 = HEAP32[$32 + ($31 * 36 | 0) + 28 >> 2] | 0;
  $39 = +HEAPF32[$32 + ($34 * 36 | 0) >> 2];
  $41 = +HEAPF32[$32 + ($36 * 36 | 0) >> 2];
  $45 = +HEAPF32[$32 + ($34 * 36 | 0) + 4 >> 2];
  $47 = +HEAPF32[$32 + ($36 * 36 | 0) + 4 >> 2];
  $50 = +($39 < $41 ? $39 : $41);
  $51 = +($45 < $47 ? $45 : $47);
  $52 = $32 + ($31 * 36 | 0) | 0;
  HEAPF32[$52 >> 2] = $50;
  HEAPF32[$52 + 4 >> 2] = $51;
  $58 = +HEAPF32[$32 + ($34 * 36 | 0) + 8 >> 2];
  $60 = +HEAPF32[$32 + ($36 * 36 | 0) + 8 >> 2];
  $64 = +HEAPF32[$32 + ($34 * 36 | 0) + 12 >> 2];
  $66 = +HEAPF32[$32 + ($36 * 36 | 0) + 12 >> 2];
  $69 = +($58 > $60 ? $58 : $60);
  $70 = +($64 > $66 ? $64 : $66);
  $71 = $32 + ($31 * 36 | 0) + 8 | 0;
  HEAPF32[$71 >> 2] = $69;
  HEAPF32[$71 + 4 >> 2] = $70;
  $75 = HEAP32[$2 >> 2] | 0;
  $77 = HEAP32[$75 + ($34 * 36 | 0) + 32 >> 2] | 0;
  $79 = HEAP32[$75 + ($36 * 36 | 0) + 32 >> 2] | 0;
  HEAP32[$75 + ($31 * 36 | 0) + 32 >> 2] = (($77 | 0) > ($79 | 0) ? $77 : $79) + 1;
  $index$02 = HEAP32[$75 + ($31 * 36 | 0) + 20 >> 2] | 0;
 } while (($index$02 | 0) != -1);
 return;
}

function __ZN12b2WheelJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $1 = 0.0, $10 = 0, $101 = 0.0, $102 = 0.0, $104 = 0.0, $106 = 0.0, $11 = 0, $110 = 0.0, $113 = 0.0, $117 = 0.0, $121 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $13 = 0, $131 = 0.0, $132 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0, $157 = 0, $161 = 0.0, $162 = 0.0, $163 = 0, $19 = 0.0, $20 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $26 = 0, $3 = 0.0, $32 = 0.0, $33 = 0.0, $35 = 0.0, $39 = 0.0, $42 = 0.0, $46 = 0.0, $5 = 0.0, $50 = 0.0, $60 = 0, $61 = 0.0, $64 = 0.0, $65 = 0.0, $67 = 0.0, $68 = 0.0, $7 = 0.0, $73 = 0.0, $74 = 0.0, $76 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $82 = 0.0, $9 = 0, $90 = 0, $91 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $99 = 0.0;
 $1 = +HEAPF32[$this + 156 >> 2];
 $3 = +HEAPF32[$this + 160 >> 2];
 $5 = +HEAPF32[$this + 164 >> 2];
 $7 = +HEAPF32[$this + 168 >> 2];
 $8 = $this + 132 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 $10 = $data + 28 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 $13 = $11 + ($9 * 12 | 0) | 0;
 $19 = +HEAPF32[$13 >> 2];
 $20 = +HEAPF32[$13 + 4 >> 2];
 $22 = +HEAPF32[$11 + ($9 * 12 | 0) + 8 >> 2];
 $23 = $this + 136 | 0;
 $24 = HEAP32[$23 >> 2] | 0;
 $26 = $11 + ($24 * 12 | 0) | 0;
 $32 = +HEAPF32[$26 >> 2];
 $33 = +HEAPF32[$26 + 4 >> 2];
 $35 = +HEAPF32[$11 + ($24 * 12 | 0) + 8 >> 2];
 $39 = +HEAPF32[$this + 172 >> 2];
 $42 = +HEAPF32[$this + 176 >> 2];
 $46 = +HEAPF32[$this + 192 >> 2];
 $50 = +HEAPF32[$this + 188 >> 2];
 $60 = $this + 116 | 0;
 $61 = +HEAPF32[$60 >> 2];
 $64 = +HEAPF32[$this + 212 >> 2] * (+HEAPF32[$this + 216 >> 2] + ($35 * $46 + ($39 * ($32 - $19) + $42 * ($33 - $20)) - $22 * $50) + +HEAPF32[$this + 220 >> 2] * $61);
 $65 = -$64;
 HEAPF32[$60 >> 2] = $61 - $64;
 $67 = $39 * $65;
 $68 = $42 * $65;
 $73 = $19 - $1 * $67;
 $74 = $20 - $1 * $68;
 $76 = $22 - $5 * ($50 * $65);
 $79 = $32 + $3 * $67;
 $80 = $33 + $3 * $68;
 $82 = $35 + $7 * ($46 * $65);
 $90 = $this + 112 | 0;
 $91 = +HEAPF32[$90 >> 2];
 $95 = +HEAPF32[$data >> 2] * +HEAPF32[$this + 120 >> 2];
 $96 = $91 - +HEAPF32[$this + 208 >> 2] * ($82 - $76 - +HEAPF32[$this + 124 >> 2]);
 $97 = -$95;
 $99 = $96 < $95 ? $96 : $95;
 $101 = $99 < $97 ? $97 : $99;
 HEAPF32[$90 >> 2] = $101;
 $102 = $101 - $91;
 $104 = $76 - $5 * $102;
 $106 = $82 + $7 * $102;
 $110 = +HEAPF32[$this + 180 >> 2];
 $113 = +HEAPF32[$this + 184 >> 2];
 $117 = +HEAPF32[$this + 200 >> 2];
 $121 = +HEAPF32[$this + 196 >> 2];
 $126 = +HEAPF32[$this + 204 >> 2] * (($79 - $73) * $110 + ($80 - $74) * $113 + $117 * $106 - $121 * $104);
 $127 = -$126;
 $128 = $this + 108 | 0;
 HEAPF32[$128 >> 2] = +HEAPF32[$128 >> 2] - $126;
 $131 = $110 * $127;
 $132 = $113 * $127;
 $150 = +($73 - $1 * $131);
 $151 = +($74 - $1 * $132);
 $152 = (HEAP32[$10 >> 2] | 0) + ((HEAP32[$8 >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$152 >> 2] = $150;
 HEAPF32[$152 + 4 >> 2] = $151;
 $157 = HEAP32[$10 >> 2] | 0;
 HEAPF32[$157 + ((HEAP32[$8 >> 2] | 0) * 12 | 0) + 8 >> 2] = $104 - $5 * ($121 * $127);
 $161 = +($79 + $3 * $131);
 $162 = +($80 + $3 * $132);
 $163 = $157 + ((HEAP32[$23 >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$163 >> 2] = $161;
 HEAPF32[$163 + 4 >> 2] = $162;
 HEAPF32[(HEAP32[$10 >> 2] | 0) + ((HEAP32[$23 >> 2] | 0) * 12 | 0) + 8 >> 2] = $106 + $7 * ($117 * $127);
 return;
}

function __ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi($this, $output, $input, $xf, $childIndex) {
 $this = $this | 0;
 $output = $output | 0;
 $input = $input | 0;
 $xf = $xf | 0;
 $childIndex = $childIndex | 0;
 var $$0 = 0, $1 = 0.0, $11 = 0, $12 = 0.0, $14 = 0.0, $17 = 0.0, $2 = 0.0, $20 = 0.0, $23 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $34 = 0, $46 = 0.0, $49 = 0.0, $51 = 0.0, $54 = 0.0, $6 = 0.0, $7 = 0.0, $71 = 0.0, $73 = 0.0, $75 = 0.0, $77 = 0.0, $8 = 0, $83 = 0.0, $84 = 0.0, $85 = 0, $9 = 0.0, $i$011 = 0, $index$0$lcssa15 = 0, $index$010 = 0, $index$1 = 0, $lower$0$lcssa14 = 0.0, $lower$012 = 0.0, $lower$1 = 0.0, $upper$09 = 0.0, $upper$1 = 0.0, label = 0;
 $1 = +HEAPF32[$xf >> 2];
 $2 = +HEAPF32[$input >> 2] - $1;
 $6 = +HEAPF32[$xf + 4 >> 2];
 $7 = +HEAPF32[$input + 4 >> 2] - $6;
 $8 = $xf + 12 | 0;
 $9 = +HEAPF32[$8 >> 2];
 $11 = $xf + 8 | 0;
 $12 = +HEAPF32[$11 >> 2];
 $14 = $2 * $9 + $7 * $12;
 $17 = $9 * $7 - $2 * $12;
 $20 = +HEAPF32[$input + 8 >> 2] - $1;
 $23 = +HEAPF32[$input + 12 >> 2] - $6;
 $30 = $9 * $20 + $12 * $23 - $14;
 $31 = $9 * $23 - $12 * $20 - $17;
 $32 = $input + 16 | 0;
 $34 = HEAP32[$this + 148 >> 2] | 0;
 do if (($34 | 0) > 0) {
  $i$011 = 0;
  $index$010 = -1;
  $lower$012 = 0.0;
  $upper$09 = +HEAPF32[$32 >> 2];
  L3 : while (1) {
   $46 = +HEAPF32[$this + ($i$011 << 3) + 84 >> 2];
   $49 = +HEAPF32[$this + ($i$011 << 3) + 88 >> 2];
   $51 = (+HEAPF32[$this + ($i$011 << 3) + 20 >> 2] - $14) * $46 + (+HEAPF32[$this + ($i$011 << 3) + 24 >> 2] - $17) * $49;
   $54 = $30 * $46 + $31 * $49;
   do if ($54 == 0.0) if ($51 < 0.0) {
    $$0 = 0;
    label = 16;
    break L3;
   } else {
    $index$1 = $index$010;
    $lower$1 = $lower$012;
    $upper$1 = $upper$09;
   } else {
    if ($54 < 0.0 & $51 < $lower$012 * $54) {
     $index$1 = $i$011;
     $lower$1 = $51 / $54;
     $upper$1 = $upper$09;
     break;
    }
    if ($54 > 0.0 & $51 < $upper$09 * $54) {
     $index$1 = $index$010;
     $lower$1 = $lower$012;
     $upper$1 = $51 / $54;
    } else {
     $index$1 = $index$010;
     $lower$1 = $lower$012;
     $upper$1 = $upper$09;
    }
   } while (0);
   $i$011 = $i$011 + 1 | 0;
   if ($upper$1 < $lower$1) {
    $$0 = 0;
    label = 16;
    break;
   }
   if (($i$011 | 0) >= ($34 | 0)) {
    label = 11;
    break;
   } else {
    $index$010 = $index$1;
    $lower$012 = $lower$1;
    $upper$09 = $upper$1;
   }
  }
  if ((label | 0) == 11) {
   if ($lower$1 >= 0.0) {
    $index$0$lcssa15 = $index$1;
    $lower$0$lcssa14 = $lower$1;
    break;
   }
   ___assert_fail(81920, 81848, 319, 89664);
  } else if ((label | 0) == 16) return $$0 | 0;
 } else {
  $index$0$lcssa15 = -1;
  $lower$0$lcssa14 = 0.0;
 } while (0);
 if (!($lower$0$lcssa14 <= +HEAPF32[$32 >> 2])) ___assert_fail(81920, 81848, 319, 89664);
 if (($index$0$lcssa15 | 0) <= -1) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAPF32[$output + 8 >> 2] = $lower$0$lcssa14;
 $71 = +HEAPF32[$8 >> 2];
 $73 = +HEAPF32[$this + ($index$0$lcssa15 << 3) + 84 >> 2];
 $75 = +HEAPF32[$11 >> 2];
 $77 = +HEAPF32[$this + ($index$0$lcssa15 << 3) + 88 >> 2];
 $83 = +($71 * $73 - $75 * $77);
 $84 = +($73 * $75 + $71 * $77);
 $85 = $output;
 HEAPF32[$85 >> 2] = $83;
 HEAPF32[$85 + 4 >> 2] = $84;
 $$0 = 1;
 return $$0 | 0;
}

function _imdct_step3_inner_r_loop($lim, $e, $d0, $k_off, $A, $k1) {
 $lim = $lim | 0;
 $e = $e | 0;
 $d0 = $d0 | 0;
 $k_off = $k_off | 0;
 $A = $A | 0;
 $k1 = $k1 | 0;
 var $$09 = 0, $$sum1 = 0, $$sum2 = 0, $$sum34 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $0 = 0, $11 = 0.0, $17 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $36 = 0.0, $4 = 0.0, $42 = 0, $5 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0.0, $61 = 0.0, $67 = 0, $7 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0, $86 = 0.0, $9 = 0, $92 = 0, $e0$010 = 0, $e2$011 = 0, $i$08 = 0;
 $0 = $lim >> 2;
 if (($0 | 0) <= 0) return;
 $$sum1 = $k1 + 1 | 0;
 $$sum2 = $k1 << 1;
 $$sum34 = $$sum2 | 1;
 $$sum5 = $$sum2 + $k1 | 0;
 $$sum6 = $$sum5 + 1 | 0;
 $$sum7 = $$sum5 + $k1 | 0;
 $$09 = $A;
 $e0$010 = $e + ($d0 << 2) | 0;
 $e2$011 = $e + ($k_off + $d0 << 2) | 0;
 $i$08 = $0;
 while (1) {
  $4 = +HEAPF32[$e0$010 >> 2];
  $5 = +HEAPF32[$e2$011 >> 2];
  $6 = $4 - $5;
  $7 = $e0$010 + -4 | 0;
  $8 = +HEAPF32[$7 >> 2];
  $9 = $e2$011 + -4 | 0;
  $11 = $8 - +HEAPF32[$9 >> 2];
  HEAPF32[$e0$010 >> 2] = $4 + $5;
  HEAPF32[$7 >> 2] = +HEAPF32[$9 >> 2] + $8;
  $17 = $$09 + 4 | 0;
  HEAPF32[$e2$011 >> 2] = $6 * +HEAPF32[$$09 >> 2] - $11 * +HEAPF32[$17 >> 2];
  HEAPF32[$9 >> 2] = $11 * +HEAPF32[$$09 >> 2] + $6 * +HEAPF32[$17 >> 2];
  $26 = $$09 + ($k1 << 2) | 0;
  $27 = $e0$010 + -8 | 0;
  $28 = +HEAPF32[$27 >> 2];
  $29 = $e2$011 + -8 | 0;
  $30 = +HEAPF32[$29 >> 2];
  $31 = $28 - $30;
  $32 = $e0$010 + -12 | 0;
  $33 = +HEAPF32[$32 >> 2];
  $34 = $e2$011 + -12 | 0;
  $36 = $33 - +HEAPF32[$34 >> 2];
  HEAPF32[$27 >> 2] = $28 + $30;
  HEAPF32[$32 >> 2] = +HEAPF32[$34 >> 2] + $33;
  $42 = $$09 + ($$sum1 << 2) | 0;
  HEAPF32[$29 >> 2] = $31 * +HEAPF32[$26 >> 2] - $36 * +HEAPF32[$42 >> 2];
  HEAPF32[$34 >> 2] = $36 * +HEAPF32[$26 >> 2] + $31 * +HEAPF32[$42 >> 2];
  $51 = $$09 + ($$sum2 << 2) | 0;
  $52 = $e0$010 + -16 | 0;
  $53 = +HEAPF32[$52 >> 2];
  $54 = $e2$011 + -16 | 0;
  $55 = +HEAPF32[$54 >> 2];
  $56 = $53 - $55;
  $57 = $e0$010 + -20 | 0;
  $58 = +HEAPF32[$57 >> 2];
  $59 = $e2$011 + -20 | 0;
  $61 = $58 - +HEAPF32[$59 >> 2];
  HEAPF32[$52 >> 2] = $53 + $55;
  HEAPF32[$57 >> 2] = +HEAPF32[$59 >> 2] + $58;
  $67 = $$09 + ($$sum34 << 2) | 0;
  HEAPF32[$54 >> 2] = $56 * +HEAPF32[$51 >> 2] - $61 * +HEAPF32[$67 >> 2];
  HEAPF32[$59 >> 2] = $61 * +HEAPF32[$51 >> 2] + $56 * +HEAPF32[$67 >> 2];
  $76 = $$09 + ($$sum5 << 2) | 0;
  $77 = $e0$010 + -24 | 0;
  $78 = +HEAPF32[$77 >> 2];
  $79 = $e2$011 + -24 | 0;
  $80 = +HEAPF32[$79 >> 2];
  $81 = $78 - $80;
  $82 = $e0$010 + -28 | 0;
  $83 = +HEAPF32[$82 >> 2];
  $84 = $e2$011 + -28 | 0;
  $86 = $83 - +HEAPF32[$84 >> 2];
  HEAPF32[$77 >> 2] = $78 + $80;
  HEAPF32[$82 >> 2] = +HEAPF32[$84 >> 2] + $83;
  $92 = $$09 + ($$sum6 << 2) | 0;
  HEAPF32[$79 >> 2] = $81 * +HEAPF32[$76 >> 2] - $86 * +HEAPF32[$92 >> 2];
  HEAPF32[$84 >> 2] = $86 * +HEAPF32[$76 >> 2] + $81 * +HEAPF32[$92 >> 2];
  $i$08 = $i$08 + -1 | 0;
  if (($i$08 | 0) <= 0) break; else {
   $$09 = $$09 + ($$sum7 << 2) | 0;
   $e0$010 = $e0$010 + -32 | 0;
   $e2$011 = $e2$011 + -32 | 0;
  }
 }
 return;
}

function _load_luafiles($L, $traceback_index) {
 $L = $L | 0;
 $traceback_index = $traceback_index | 0;
 var $$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $vararg_buffer19 = sp + 56 | 0;
 $vararg_buffer16 = sp + 48 | 0;
 $vararg_buffer13 = sp + 40 | 0;
 $vararg_buffer10 = sp + 32 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 if (_luaL_loadbufferx($L, 24080, 1863, 24064, 0) | 0) {
  HEAP32[$vararg_buffer >> 2] = _lua_tolstring($L, -1, 0) | 0;
  _log_internal(0, 55032, 57168, $vararg_buffer);
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (_lua_pcallk($L, 0, 0, $traceback_index, 0, 0) | 0) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (_luaL_loadbufferx($L, 25952, 823, 25944, 0) | 0) {
  HEAP32[$vararg_buffer1 >> 2] = _lua_tolstring($L, -1, 0) | 0;
  _log_internal(0, 55032, 57168, $vararg_buffer1);
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (_lua_pcallk($L, 0, 0, $traceback_index, 0, 0) | 0) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (_luaL_loadbufferx($L, 26792, 2071, 26776, 0) | 0) {
  HEAP32[$vararg_buffer4 >> 2] = _lua_tolstring($L, -1, 0) | 0;
  _log_internal(0, 55032, 57168, $vararg_buffer4);
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (_lua_pcallk($L, 0, 0, $traceback_index, 0, 0) | 0) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (_luaL_loadbufferx($L, 28880, 1050, 28864, 0) | 0) {
  HEAP32[$vararg_buffer7 >> 2] = _lua_tolstring($L, -1, 0) | 0;
  _log_internal(0, 55032, 57168, $vararg_buffer7);
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (_lua_pcallk($L, 0, 0, $traceback_index, 0, 0) | 0) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (_luaL_loadbufferx($L, 29952, 5428, 29936, 0) | 0) {
  HEAP32[$vararg_buffer10 >> 2] = _lua_tolstring($L, -1, 0) | 0;
  _log_internal(0, 55032, 57168, $vararg_buffer10);
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (_lua_pcallk($L, 0, 0, $traceback_index, 0, 0) | 0) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (_luaL_loadbufferx($L, 35400, 4590, 35384, 0) | 0) {
  HEAP32[$vararg_buffer13 >> 2] = _lua_tolstring($L, -1, 0) | 0;
  _log_internal(0, 55032, 57168, $vararg_buffer13);
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (_lua_pcallk($L, 0, 0, $traceback_index, 0, 0) | 0) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (_luaL_loadbufferx($L, 40008, 1846, 39992, 0) | 0) {
  HEAP32[$vararg_buffer16 >> 2] = _lua_tolstring($L, -1, 0) | 0;
  _log_internal(0, 55032, 57168, $vararg_buffer16);
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (_lua_pcallk($L, 0, 0, $traceback_index, 0, 0) | 0) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!(_luaL_loadbufferx($L, 41872, 13157, 41856, 0) | 0)) {
  $$0 = (_lua_pcallk($L, 0, 0, $traceback_index, 0, 0) | 0) == 0 & 1;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  HEAP32[$vararg_buffer19 >> 2] = _lua_tolstring($L, -1, 0) | 0;
  _log_internal(0, 55032, 57168, $vararg_buffer19);
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _stbtt_BakeFontBitmap($data, $offset, $pixel_height, $pixels, $pw, $ph, $first_char, $num_chars, $chardata) {
 $data = $data | 0;
 $offset = $offset | 0;
 $pixel_height = +$pixel_height;
 $pixels = $pixels | 0;
 $pw = $pw | 0;
 $ph = $ph | 0;
 $first_char = $first_char | 0;
 $num_chars = $num_chars | 0;
 $chardata = $chardata | 0;
 var $$0 = 0, $$bottom_y$0 = 0, $2 = 0, $25 = 0.0, $28 = 0, $31 = 0, $34 = 0, $37 = 0, $38 = 0, $4 = 0, $42 = 0, $66 = 0, $68 = 0, $advance = 0, $bottom_y$07 = 0, $f = 0, $i$08 = 0, $lsb = 0, $x$0$ = 0, $x$010 = 0, $x0 = 0, $x1 = 0, $y$09 = 0, $y0 = 0, $y1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $f = sp + 24 | 0;
 $advance = sp + 20 | 0;
 $lsb = sp + 16 | 0;
 $x0 = sp + 12 | 0;
 $y0 = sp + 8 | 0;
 $x1 = sp + 4 | 0;
 $y1 = sp;
 _stbtt_InitFont($f, $data, $offset) | 0;
 _memset($pixels | 0, 0, Math_imul($ph, $pw) | 0) | 0;
 $2 = HEAP32[$f + 4 >> 2] | 0;
 $4 = HEAP32[$f + 28 >> 2] | 0;
 $25 = $pixel_height / +((((HEAPU8[$2 + ($4 + 4) >> 0] | 0) << 8 | (HEAPU8[$2 + ($4 + 5) >> 0] | 0)) << 16 >> 16) - (((HEAPU8[$2 + ($4 + 6) >> 0] | 0) << 8 | (HEAPU8[$2 + ($4 + 7) >> 0] | 0)) << 16 >> 16) | 0);
 if (($num_chars | 0) > 0) {
  $bottom_y$07 = 1;
  $i$08 = 0;
  $x$010 = 1;
  $y$09 = 1;
 } else {
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 while (1) {
  $28 = _stbtt_FindGlyphIndex($f, $i$08 + $first_char | 0) | 0;
  _stbtt_GetGlyphHMetrics($f, $28, $advance, $lsb);
  _stbtt_GetGlyphBitmapBoxSubpixel($f, $28, $25, $25, 0.0, 0.0, $x0, $y0, $x1, $y1);
  $31 = (HEAP32[$x1 >> 2] | 0) - (HEAP32[$x0 >> 2] | 0) | 0;
  $34 = (HEAP32[$y1 >> 2] | 0) - (HEAP32[$y0 >> 2] | 0) | 0;
  $37 = ($x$010 + 1 + $31 | 0) < ($pw | 0);
  $y$09 = $37 ? $y$09 : $bottom_y$07;
  $x$0$ = $37 ? $x$010 : 1;
  $38 = $y$09 + $34 | 0;
  if (($38 + 1 | 0) >= ($ph | 0)) {
   label = 3;
   break;
  }
  $42 = $x$0$ + $31 | 0;
  if (($42 | 0) >= ($pw | 0)) {
   label = 5;
   break;
  }
  if (($38 | 0) >= ($ph | 0)) {
   label = 7;
   break;
  }
  _stbtt_MakeGlyphBitmapSubpixel($f, $pixels + ((Math_imul($y$09, $pw) | 0) + $x$0$) | 0, $31, $34, $pw, $25, $25, 0.0, 0.0, $28);
  HEAP16[$chardata + ($i$08 * 20 | 0) >> 1] = $x$0$;
  HEAP16[$chardata + ($i$08 * 20 | 0) + 2 >> 1] = $y$09;
  HEAP16[$chardata + ($i$08 * 20 | 0) + 4 >> 1] = $42;
  HEAP16[$chardata + ($i$08 * 20 | 0) + 6 >> 1] = $38;
  HEAPF32[$chardata + ($i$08 * 20 | 0) + 16 >> 2] = $25 * +(HEAP32[$advance >> 2] | 0);
  HEAPF32[$chardata + ($i$08 * 20 | 0) + 8 >> 2] = +(HEAP32[$x0 >> 2] | 0);
  HEAPF32[$chardata + ($i$08 * 20 | 0) + 12 >> 2] = +(HEAP32[$y0 >> 2] | 0);
  $66 = $38 + 2 | 0;
  $$bottom_y$0 = ($66 | 0) > ($bottom_y$07 | 0) ? $66 : $bottom_y$07;
  $68 = $i$08 + 1 | 0;
  if (($68 | 0) >= ($num_chars | 0)) {
   $$0 = $$bottom_y$0;
   label = 9;
   break;
  } else {
   $bottom_y$07 = $$bottom_y$0;
   $i$08 = $68;
   $x$010 = $42 + 2 | 0;
  }
 }
 if ((label | 0) == 3) {
  $$0 = 0 - $i$08 | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else if ((label | 0) == 5) ___assert_fail(81152, 81016, 1872, 81168); else if ((label | 0) == 7) ___assert_fail(81192, 81016, 1873, 81168); else if ((label | 0) == 9) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _luaV_concat($L, $total) {
 $L = $L | 0;
 $total = $total | 0;
 var $$0 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $23 = 0, $28 = 0, $29 = 0, $3 = 0, $34 = 0, $37 = 0, $4 = 0, $40 = 0, $43 = 0, $44 = 0, $48 = 0, $5 = 0, $51 = 0, $53 = 0, $59 = 0, $60 = 0, $7 = 0, $i$0$lcssa = 0, $i$05 = 0, $i$1 = 0, $n$0 = 0, $tl$0$lcssa = 0, $tl$06 = 0, $tl$1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $0 = $L + 8 | 0;
 $1 = $L + 12 | 0;
 $$0 = $total;
 $3 = HEAP32[$0 >> 2] | 0;
 L1 : while (1) {
  $2 = $3 + -16 | 0;
  $4 = $3 + -12 | 0;
  $5 = HEAP32[$4 >> 2] | 0;
  $7 = $3 + -8 | 0;
  do if ((($5 & 15) + -3 | 0) >>> 0 < 2) {
   $10 = HEAP32[$3 + -4 >> 2] & 15;
   if (($10 | 0) == 4) $16 = $5; else if (($10 | 0) == 3) {
    _luaO_tostring($L, $7);
    $16 = HEAP32[$4 >> 2] | 0;
   } else {
    label = 5;
    break;
   }
   $13 = HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] | 0;
   $15 = $16 & 15;
   $17 = ($15 | 0) == 4;
   if (!$13) {
    if (!(($15 | 0) == 3 & ($17 ^ 1))) {
     $n$0 = 2;
     break;
    }
    _luaO_tostring($L, $2);
    $n$0 = 2;
    break;
   }
   if ($17) if (!(HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] | 0)) {
    $23 = $7;
    $28 = HEAP32[$23 + 4 >> 2] | 0;
    $29 = $2;
    HEAP32[$29 >> 2] = HEAP32[$23 >> 2];
    HEAP32[$29 + 4 >> 2] = $28;
    $n$0 = 2;
    break;
   }
   L16 : do if (($$0 | 0) > 1) {
    $i$05 = 1;
    $tl$06 = $13;
    while (1) {
     $$sum = ~$i$05;
     $34 = $3 + ($$sum << 3) | 0;
     $37 = HEAP32[$3 + ($$sum << 3) + 4 >> 2] & 15;
     if (($37 | 0) == 3) _luaO_tostring($L, $34); else if (($37 | 0) != 4) {
      $i$0$lcssa = $i$05;
      $tl$0$lcssa = $tl$06;
      break L16;
     }
     $40 = HEAP32[(HEAP32[$34 >> 2] | 0) + 12 >> 2] | 0;
     if ($40 >>> 0 >= (2147483647 - $tl$06 | 0) >>> 0) {
      label = 16;
      break L1;
     }
     $43 = $40 + $tl$06 | 0;
     $44 = $i$05 + 1 | 0;
     if (($44 | 0) < ($$0 | 0)) {
      $i$05 = $44;
      $tl$06 = $43;
     } else {
      $i$0$lcssa = $44;
      $tl$0$lcssa = $43;
      break;
     }
    }
   } else {
    $i$0$lcssa = 1;
    $tl$0$lcssa = $13;
   } while (0);
   $48 = _luaZ_openspace($L, (HEAP32[$1 >> 2] | 0) + 96 | 0, $tl$0$lcssa) | 0;
   $i$1 = $i$0$lcssa;
   $tl$1 = 0;
   do {
    $51 = HEAP32[$3 + (0 - $i$1 << 3) >> 2] | 0;
    $53 = HEAP32[$51 + 12 >> 2] | 0;
    _memcpy($48 + $tl$1 | 0, $51 + 24 | 0, $53 | 0) | 0;
    $tl$1 = $53 + $tl$1 | 0;
    $i$1 = $i$1 + -1 | 0;
   } while (($i$1 | 0) > 0);
   $59 = 0 - $i$0$lcssa | 0;
   $60 = _luaS_newlstr($L, $48, $tl$1) | 0;
   HEAP32[$3 + ($59 << 3) >> 2] = $60;
   HEAP32[$3 + ($59 << 3) + 4 >> 2] = HEAPU8[$60 + 4 >> 0] | 0 | 64;
   $n$0 = $i$0$lcssa;
  } else label = 5; while (0);
  if ((label | 0) == 5) {
   label = 0;
   _luaT_trybinTM($L, $2, $7, $2, 22);
   $n$0 = 2;
  }
  $$0 = $$0 + 1 - $n$0 | 0;
  $3 = (HEAP32[$0 >> 2] | 0) + (1 - $n$0 << 3) | 0;
  HEAP32[$0 >> 2] = $3;
  if (($$0 | 0) <= 1) {
   label = 22;
   break;
  }
 }
 if ((label | 0) == 16) _luaG_runerror($L, 64040, $vararg_buffer); else if ((label | 0) == 22) {
  STACKTOP = sp;
  return;
 }
}

function _png_handle_sCAL($png_ptr, $info_ptr, $length) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 $length = $length | 0;
 var $1 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $19 = 0, $29 = 0, $31 = 0, $39 = 0, $buffer$1$i$ph4 = 0, $buffer$1$i$ph5 = 0, $i = 0, $state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $i = sp + 4 | 0;
 $state = sp;
 $1 = HEAP32[$png_ptr + 208 >> 2] | 0;
 if (!($1 & 1)) _png_chunk_error($png_ptr, 75496);
 if ($1 & 4) {
  _png_crc_finish($png_ptr, $length) | 0;
  _png_chunk_benign_error($png_ptr, 75472);
  STACKTOP = sp;
  return;
 }
 if ($info_ptr) if (HEAP32[$info_ptr + 8 >> 2] & 16384) {
  _png_crc_finish($png_ptr, $length) | 0;
  _png_chunk_benign_error($png_ptr, 75512);
  STACKTOP = sp;
  return;
 }
 if ($length >>> 0 < 4) {
  _png_crc_finish($png_ptr, $length) | 0;
  _png_chunk_benign_error($png_ptr, 75488);
  STACKTOP = sp;
  return;
 }
 $12 = $length + 1 | 0;
 $13 = $png_ptr + 788 | 0;
 $14 = HEAP32[$13 >> 2] | 0;
 if (!$14) label = 13; else {
  $16 = $png_ptr + 792 | 0;
  if ((HEAP32[$16 >> 2] | 0) >>> 0 < $12 >>> 0) {
   HEAP32[$13 >> 2] = 0;
   HEAP32[$16 >> 2] = 0;
   _png_free($png_ptr, $14);
   label = 13;
  } else {
   $buffer$1$i$ph4 = $14;
   label = 16;
  }
 }
 do if ((label | 0) == 13) {
  $19 = _png_malloc_base($png_ptr, $12) | 0;
  if ($19) {
   HEAP32[$13 >> 2] = $19;
   HEAP32[$png_ptr + 792 >> 2] = $12;
   if (!$png_ptr) {
    $buffer$1$i$ph5 = $19;
    break;
   } else {
    $buffer$1$i$ph4 = $19;
    label = 16;
    break;
   }
  }
  _png_chunk_benign_error($png_ptr, 75712);
  _png_crc_finish($png_ptr, $length) | 0;
  STACKTOP = sp;
  return;
 } while (0);
 if ((label | 0) == 16) {
  _png_read_data($png_ptr, $buffer$1$i$ph4, $length);
  _png_calculate_crc($png_ptr, $buffer$1$i$ph4, $length);
  $buffer$1$i$ph5 = $buffer$1$i$ph4;
 }
 HEAP8[$buffer$1$i$ph5 + $length >> 0] = 0;
 if (_png_crc_finish($png_ptr, 0) | 0) {
  STACKTOP = sp;
  return;
 }
 if (((HEAP8[$buffer$1$i$ph5 >> 0] | 0) + -1 & 255) >= 2) {
  _png_chunk_benign_error($png_ptr, 76064);
  STACKTOP = sp;
  return;
 }
 HEAP32[$i >> 2] = 1;
 HEAP32[$state >> 2] = 0;
 if (_png_check_fp_number($buffer$1$i$ph5, $length, $state, $i) | 0) {
  $29 = HEAP32[$i >> 2] | 0;
  if ($29 >>> 0 < $length >>> 0) {
   $31 = $29 + 1 | 0;
   HEAP32[$i >> 2] = $31;
   if (!(HEAP8[$buffer$1$i$ph5 + $29 >> 0] | 0)) {
    if ((HEAP32[$state >> 2] & 392 | 0) != 264) {
     _png_chunk_benign_error($png_ptr, 76104);
     STACKTOP = sp;
     return;
    }
    HEAP32[$state >> 2] = 0;
    $39 = (_png_check_fp_number($buffer$1$i$ph5, $length, $state, $i) | 0) != 0;
    if (!($39 & (HEAP32[$i >> 2] | 0) == ($length | 0))) {
     _png_chunk_benign_error($png_ptr, 76128);
     STACKTOP = sp;
     return;
    }
    if ((HEAP32[$state >> 2] & 392 | 0) == 264) {
     _png_set_sCAL_s($png_ptr, $info_ptr, HEAPU8[$buffer$1$i$ph5 >> 0] | 0, $buffer$1$i$ph5 + 1 | 0, $buffer$1$i$ph5 + $31 | 0);
     STACKTOP = sp;
     return;
    } else {
     _png_chunk_benign_error($png_ptr, 76152);
     STACKTOP = sp;
     return;
    }
   }
  }
 }
 _png_chunk_benign_error($png_ptr, 76080);
 STACKTOP = sp;
 return;
}

function __ZN16b2ContactManager7AddPairEPvS0_($this, $proxyUserDataA, $proxyUserDataB) {
 $this = $this | 0;
 $proxyUserDataA = $proxyUserDataA | 0;
 $proxyUserDataB = $proxyUserDataB | 0;
 var $1 = 0, $104 = 0, $11 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $3 = 0, $39 = 0, $47 = 0, $5 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $61 = 0, $64 = 0, $67 = 0, $7 = 0, $70 = 0, $73 = 0, $76 = 0, $79 = 0, $88 = 0, $9 = 0, $90 = 0, $96 = 0, $98 = 0, $edge$07 = 0, $edge$08 = 0, label = 0;
 $1 = HEAP32[$proxyUserDataA + 16 >> 2] | 0;
 $3 = HEAP32[$proxyUserDataB + 16 >> 2] | 0;
 $5 = HEAP32[$proxyUserDataA + 20 >> 2] | 0;
 $7 = HEAP32[$proxyUserDataB + 20 >> 2] | 0;
 $9 = HEAP32[$1 + 8 >> 2] | 0;
 $11 = HEAP32[$3 + 8 >> 2] | 0;
 if (($9 | 0) == ($11 | 0)) return;
 $edge$07 = HEAP32[$11 + 112 >> 2] | 0;
 L4 : do if ($edge$07) {
  $edge$08 = $edge$07;
  while (1) {
   if ((HEAP32[$edge$08 >> 2] | 0) == ($9 | 0)) {
    $18 = HEAP32[$edge$08 + 4 >> 2] | 0;
    $20 = HEAP32[$18 + 48 >> 2] | 0;
    $22 = HEAP32[$18 + 52 >> 2] | 0;
    $24 = HEAP32[$18 + 56 >> 2] | 0;
    $26 = HEAP32[$18 + 60 >> 2] | 0;
    if (($20 | 0) == ($1 | 0) & ($22 | 0) == ($3 | 0) & ($24 | 0) == ($5 | 0) & ($26 | 0) == ($7 | 0)) {
     label = 24;
     break;
    }
    if (($20 | 0) == ($3 | 0) & ($22 | 0) == ($1 | 0) & ($24 | 0) == ($7 | 0) & ($26 | 0) == ($5 | 0)) {
     label = 24;
     break;
    }
   }
   $edge$08 = HEAP32[$edge$08 + 12 >> 2] | 0;
   if (!$edge$08) break L4;
  }
  if ((label | 0) == 24) return;
 } while (0);
 if (!(__ZNK6b2Body13ShouldCollideEPKS_($11, $9) | 0)) return;
 $39 = HEAP32[$this + 68 >> 2] | 0;
 if ($39) if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$39 >> 2] | 0) + 8 >> 2] & 31]($39, $1, $3) | 0)) return;
 $47 = __ZN9b2Contact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($1, $5, $3, $7, HEAP32[$this + 76 >> 2] | 0) | 0;
 if (!$47) return;
 $50 = HEAP32[$47 + 48 >> 2] | 0;
 $52 = HEAP32[$47 + 52 >> 2] | 0;
 $54 = HEAP32[$50 + 8 >> 2] | 0;
 $56 = HEAP32[$52 + 8 >> 2] | 0;
 HEAP32[$47 + 8 >> 2] = 0;
 $58 = $this + 60 | 0;
 HEAP32[$47 + 12 >> 2] = HEAP32[$58 >> 2];
 $61 = HEAP32[$58 >> 2] | 0;
 if ($61) HEAP32[$61 + 8 >> 2] = $47;
 HEAP32[$58 >> 2] = $47;
 $64 = $47 + 16 | 0;
 HEAP32[$47 + 20 >> 2] = $47;
 HEAP32[$64 >> 2] = $56;
 HEAP32[$47 + 24 >> 2] = 0;
 $67 = $54 + 112 | 0;
 HEAP32[$47 + 28 >> 2] = HEAP32[$67 >> 2];
 $70 = HEAP32[$67 >> 2] | 0;
 if ($70) HEAP32[$70 + 8 >> 2] = $64;
 HEAP32[$67 >> 2] = $64;
 $73 = $47 + 32 | 0;
 HEAP32[$47 + 36 >> 2] = $47;
 HEAP32[$73 >> 2] = $54;
 HEAP32[$47 + 40 >> 2] = 0;
 $76 = $56 + 112 | 0;
 HEAP32[$47 + 44 >> 2] = HEAP32[$76 >> 2];
 $79 = HEAP32[$76 >> 2] | 0;
 if ($79) HEAP32[$79 + 8 >> 2] = $73;
 HEAP32[$76 >> 2] = $73;
 if (!(HEAP8[$50 + 38 >> 0] | 0)) if (!(HEAP8[$52 + 38 >> 0] | 0)) {
  $88 = $54 + 4 | 0;
  $90 = HEAPU16[$88 >> 1] | 0;
  if (!($90 & 2)) {
   HEAP16[$88 >> 1] = $90 | 2;
   HEAPF32[$54 + 144 >> 2] = 0.0;
  }
  $96 = $56 + 4 | 0;
  $98 = HEAPU16[$96 >> 1] | 0;
  if (!($98 & 2)) {
   HEAP16[$96 >> 1] = $98 | 2;
   HEAPF32[$56 + 144 >> 2] = 0.0;
  }
 }
 $104 = $this + 64 | 0;
 HEAP32[$104 >> 2] = (HEAP32[$104 >> 2] | 0) + 1;
 return;
}

function _system_draw($s, $dx, $dy) {
 $s = $s | 0;
 $dx = +$dx;
 $dy = +$dy;
 var $1 = 0, $10 = 0, $101 = 0.0, $109 = 0.0, $111 = 0, $119 = 0, $135 = 0.0, $137 = 0, $145 = 0, $16 = 0.0, $166 = 0.0, $168 = 0.0, $18 = 0, $2 = 0, $20 = 0.0, $22 = 0.0, $25 = 0, $29 = 0.0, $3 = 0, $34 = 0.0, $36 = 0.0, $46 = 0.0, $48 = 0, $50 = 0.0, $63 = 0, $8 = 0, $80 = 0.0, $82 = 0.0, $84 = 0, $9 = 0, $92 = 0, $i$01 = 0, $i$02 = 0;
 if (!$s) ___assert_fail(23264, 10392, 91, 10472);
 $1 = _display_get_draw_from() | 0;
 $2 = $s + 396 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if ($3) _display_draw_from($3);
 $i$01 = (HEAP32[$s + 408 >> 2] | 0) + -1 | 0;
 if (($i$01 | 0) <= -1) {
  _display_draw_from($1);
  return;
 }
 $8 = $s + 468 | 0;
 $9 = $s + 472 | 0;
 $i$02 = $i$01;
 do {
  $10 = HEAP32[$s >> 2] | 0;
  $16 = 1.0 - +HEAPF32[$10 + ($i$02 * 56 | 0) + 24 >> 2] / +HEAPF32[$10 + ($i$02 * 56 | 0) + 28 >> 2];
  $18 = HEAP32[$10 + ($i$02 * 56 | 0) + 32 >> 2] | 0;
  $20 = +HEAPF32[$s + ($18 * 12 | 0) + 8 >> 2];
  $22 = +HEAPF32[$s + ($18 * 12 | 0) + 12 >> 2];
  $25 = $18 + 1 | 0;
  $29 = +HEAPF32[$s + ($25 * 12 | 0) + 12 >> 2];
  $34 = ($16 - $20) / (+HEAPF32[$s + ($25 * 12 | 0) + 8 >> 2] - $20);
  $36 = +HEAPF32[$10 + ($i$02 * 56 | 0) + 36 >> 2];
  $46 = (1.0 - $34) * ($22 + (+HEAPF32[$s + ($18 * 12 | 0) + 16 >> 2] - $22) * $36) + $34 * ($29 + (+HEAPF32[$s + ($25 * 12 | 0) + 16 >> 2] - $29) * $36);
  $48 = HEAP32[$10 + ($i$02 * 56 | 0) + 40 >> 2] | 0;
  $50 = +HEAPF32[$s + ($48 * 12 | 0) + 204 >> 2];
  $63 = $48 + 1 | 0;
  $80 = ($16 - $50) / (+HEAPF32[$s + ($63 * 12 | 0) + 204 >> 2] - $50);
  $82 = +HEAPF32[$10 + ($i$02 * 56 | 0) + 44 >> 2];
  $84 = HEAPU8[$s + ($48 * 12 | 0) + 208 >> 0] | 0;
  $92 = HEAPU8[$s + ($63 * 12 | 0) + 208 >> 0] | 0;
  $101 = 1.0 - $80;
  $109 = +HEAPF32[$10 + ($i$02 * 56 | 0) + 48 >> 2];
  $111 = HEAPU8[$s + ($48 * 12 | 0) + 210 >> 0] | 0;
  $119 = HEAPU8[$s + ($63 * 12 | 0) + 210 >> 0] | 0;
  $135 = +HEAPF32[$10 + ($i$02 * 56 | 0) + 52 >> 2];
  $137 = HEAPU8[$s + ($48 * 12 | 0) + 212 >> 0] | 0;
  $145 = HEAPU8[$s + ($63 * 12 | 0) + 212 >> 0] | 0;
  _display_set_color(~~($101 * +(~~(+($84 | 0) + +((HEAPU8[$s + ($48 * 12 | 0) + 209 >> 0] | 0) - $84 | 0) * $82) & 255 | 0) + $80 * +(~~(+($92 | 0) + +((HEAPU8[$s + ($63 * 12 | 0) + 209 >> 0] | 0) - $92 | 0) * $82) & 255 | 0)) & 255, ~~($101 * +(~~(+($111 | 0) + +((HEAPU8[$s + ($48 * 12 | 0) + 211 >> 0] | 0) - $111 | 0) * $109) & 255 | 0) + $80 * +(~~(+($119 | 0) + +((HEAPU8[$s + ($63 * 12 | 0) + 211 >> 0] | 0) - $119 | 0) * $109) & 255 | 0)) & 255, ~~($101 * +(~~(+($137 | 0) + +((HEAPU8[$s + ($48 * 12 | 0) + 213 >> 0] | 0) - $137 | 0) * $135) & 255 | 0) + $80 * +(~~(+($145 | 0) + +((HEAPU8[$s + ($63 * 12 | 0) + 213 >> 0] | 0) - $145 | 0) * $135) & 255 | 0)) & 255);
  $166 = +HEAPF32[$10 + ($i$02 * 56 | 0) + 4 >> 2];
  $168 = +HEAPF32[$10 + ($i$02 * 56 | 0) + 8 >> 2];
  if (!(HEAP32[$2 >> 2] | 0)) _display_draw_point($166 + $dx, $168 + $dy, $46); else _display_draw_point_tex(+(HEAP32[$8 >> 2] | 0), +(HEAP32[$9 >> 2] | 0), $166 + $dx, $168 + $dy, $46);
  $i$02 = $i$02 + -1 | 0;
 } while (($i$02 | 0) > -1);
 _display_draw_from($1);
 return;
}

function __ZN9b2Simplex6Solve3Ev($this) {
 $this = $this | 0;
 var $1 = 0, $100 = 0.0, $109 = 0.0, $11 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $21 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $33 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $41 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $49 = 0.0, $52 = 0.0, $55 = 0.0, $59 = 0.0, $63 = 0.0, $67 = 0.0, $7 = 0.0, $74 = 0.0, $8 = 0.0, $83 = 0.0, $9 = 0, dest = 0, src = 0, stop = 0;
 $1 = $this + 16 | 0;
 $7 = +HEAPF32[$1 >> 2];
 $8 = +HEAPF32[$1 + 4 >> 2];
 $9 = $this + 36 | 0;
 $11 = $this + 52 | 0;
 $17 = +HEAPF32[$11 >> 2];
 $18 = +HEAPF32[$11 + 4 >> 2];
 $19 = $this + 72 | 0;
 $21 = $this + 88 | 0;
 $27 = +HEAPF32[$21 >> 2];
 $28 = +HEAPF32[$21 + 4 >> 2];
 $29 = $17 - $7;
 $30 = $18 - $8;
 $33 = $7 * $29 + $8 * $30;
 $36 = $17 * $29 + $18 * $30;
 $37 = $27 - $7;
 $38 = $28 - $8;
 $41 = $7 * $37 + $8 * $38;
 $44 = $27 * $37 + $28 * $38;
 $45 = $27 - $17;
 $46 = $28 - $18;
 $49 = $17 * $45 + $18 * $46;
 $52 = $27 * $45 + $28 * $46;
 $55 = $29 * $38 - $30 * $37;
 $59 = ($17 * $28 - $18 * $27) * $55;
 $63 = ($8 * $27 - $7 * $28) * $55;
 $67 = ($7 * $18 - $8 * $17) * $55;
 if (!(!($33 >= -0.0) | !($41 >= -0.0))) {
  HEAPF32[$this + 24 >> 2] = 1.0;
  HEAP32[$this + 108 >> 2] = 1;
  return;
 }
 if (!(!($33 < -0.0) | !($36 > 0.0) | !($67 <= 0.0))) {
  $74 = 1.0 / ($36 - $33);
  HEAPF32[$this + 24 >> 2] = $36 * $74;
  HEAPF32[$this + 60 >> 2] = -($33 * $74);
  HEAP32[$this + 108 >> 2] = 2;
  return;
 }
 if (!(!($41 < -0.0) | !($44 > 0.0) | !($63 <= 0.0))) {
  $83 = 1.0 / ($44 - $41);
  HEAPF32[$this + 24 >> 2] = $44 * $83;
  HEAPF32[$this + 96 >> 2] = -($41 * $83);
  HEAP32[$this + 108 >> 2] = 2;
  dest = $9 + 0 | 0;
  src = $19 + 0 | 0;
  stop = dest + 36 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  return;
 }
 if (!(!($36 <= 0.0) | !($49 >= -0.0))) {
  HEAPF32[$this + 60 >> 2] = 1.0;
  HEAP32[$this + 108 >> 2] = 1;
  dest = $this + 0 | 0;
  src = $9 + 0 | 0;
  stop = dest + 36 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  return;
 }
 if (!(!($44 <= 0.0) | !($52 <= 0.0))) {
  HEAPF32[$this + 96 >> 2] = 1.0;
  HEAP32[$this + 108 >> 2] = 1;
  dest = $this + 0 | 0;
  src = $19 + 0 | 0;
  stop = dest + 36 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  return;
 }
 if (!($49 < -0.0) | !($52 > 0.0) | !($59 <= 0.0)) {
  $109 = 1.0 / ($67 + ($59 + $63));
  HEAPF32[$this + 24 >> 2] = $59 * $109;
  HEAPF32[$this + 60 >> 2] = $63 * $109;
  HEAPF32[$this + 96 >> 2] = $67 * $109;
  HEAP32[$this + 108 >> 2] = 3;
  return;
 } else {
  $100 = 1.0 / ($52 - $49);
  HEAPF32[$this + 60 >> 2] = $52 * $100;
  HEAPF32[$this + 96 >> 2] = -($49 * $100);
  HEAP32[$this + 108 >> 2] = 2;
  dest = $this + 0 | 0;
  src = $19 + 0 | 0;
  stop = dest + 36 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  return;
 }
}

function _byteoffset($L) {
 $L = $L | 0;
 var $$0$i = 0, $0 = 0, $1 = 0, $14 = 0, $18 = 0, $30 = 0, $33 = 0, $39 = 0, $5 = 0, $6 = 0, $7 = 0, $len = 0, $n$09 = 0, $n$1 = 0, $n$117 = 0, $n$119 = 0, $n$2 = 0, $posi$0 = 0, $posi$1 = 0, $posi$24 = 0, $posi$310 = 0, $posi$4 = 0, $posi$518 = 0, $posi$6 = 0, $posi$7 = 0, $posi$731 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $len = sp + 4 | 0;
 $0 = _luaL_checklstring($L, 1, $len) | 0;
 $1 = _luaL_checkinteger($L, 2) | 0;
 if (($1 | 0) > -1) $5 = 1; else $5 = (HEAP32[$len >> 2] | 0) + 1 | 0;
 $6 = _luaL_optinteger($L, 3, $5) | 0;
 $7 = HEAP32[$len >> 2] | 0;
 if (($6 | 0) > -1) {
  $$0$i = $6;
  label = 6;
 } else if ($7 >>> 0 < (0 - $6 | 0) >>> 0) {
  $posi$0 = 0;
  label = 8;
 } else {
  $$0$i = $6 + 1 + $7 | 0;
  label = 6;
 }
 if ((label | 0) == 6) if (($$0$i | 0) > 0) {
  $14 = $$0$i + -1 | 0;
  if (($14 | 0) > ($7 | 0)) {
   $posi$0 = $14;
   label = 8;
  } else $posi$1 = $14;
 } else {
  $posi$0 = $$0$i;
  label = 8;
 }
 if ((label | 0) == 8) {
  _luaL_argerror($L, 3, 63888) | 0;
  $posi$1 = $posi$0;
 }
 L13 : do if (!$1) if (($posi$1 | 0) > 0) {
  $posi$24 = $posi$1;
  while (1) {
   $18 = $posi$24 + -1 | 0;
   if ((HEAP8[$0 + $posi$24 >> 0] & -64) << 24 >> 24 != -128) {
    $posi$731 = $posi$24;
    break L13;
   }
   if (($18 | 0) > 0) $posi$24 = $18; else {
    $posi$731 = $18;
    break;
   }
  }
 } else $posi$731 = $posi$1; else {
  if ((HEAP8[$0 + $posi$1 >> 0] & -64) << 24 >> 24 == -128) _luaL_error($L, 63912, $vararg_buffer) | 0;
  L18 : do if (($1 | 0) < 0) {
   if (($posi$1 | 0) > 0) {
    $n$09 = $1;
    $posi$310 = $posi$1;
    L20 : while (1) {
     $posi$4 = $posi$310;
     do {
      $posi$4 = $posi$4 + -1 | 0;
      $33 = ($posi$4 | 0) > 0;
      if (!$33) break L20;
     } while ((HEAP8[$0 + $posi$4 >> 0] & -64) << 24 >> 24 == -128);
     $39 = $n$09 + 1 | 0;
     if (($39 | 0) < 0 & $33) {
      $n$09 = $39;
      $posi$310 = $posi$4;
     } else {
      $n$2 = $39;
      $posi$7 = $posi$4;
      label = 27;
      break L18;
     }
    }
    $n$2 = $n$09 + 1 | 0;
    $posi$7 = $posi$4;
    label = 27;
   }
  } else {
   $n$117 = $1 + -1 | 0;
   if (($n$117 | 0) > 0) {
    $30 = HEAP32[$len >> 2] | 0;
    $n$119 = $n$117;
    $posi$518 = $posi$1;
    while (1) {
     if (($posi$518 | 0) < ($30 | 0)) $posi$6 = $posi$518; else {
      $n$2 = $n$119;
      $posi$7 = $posi$518;
      label = 27;
      break L18;
     }
     do $posi$6 = $posi$6 + 1 | 0; while ((HEAP8[$0 + $posi$6 >> 0] & -64) << 24 >> 24 == -128);
     $n$1 = $n$119 + -1 | 0;
     if (($n$1 | 0) > 0) {
      $n$119 = $n$1;
      $posi$518 = $posi$6;
     } else {
      $n$2 = $n$1;
      $posi$7 = $posi$6;
      label = 27;
      break;
     }
    }
   } else {
    $n$2 = $n$117;
    $posi$7 = $posi$1;
    label = 27;
   }
  } while (0);
  if ((label | 0) == 27) if (!$n$2) {
   $posi$731 = $posi$7;
   break;
  }
  _lua_pushnil($L);
  STACKTOP = sp;
  return 1;
 } while (0);
 _lua_pushinteger($L, $posi$731 + 1 | 0);
 STACKTOP = sp;
 return 1;
}

function _luaH_next($L, $t, $key) {
 $L = $L | 0;
 $t = $t | 0;
 $key = $key | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $18 = 0, $2 = 0, $29 = 0, $31 = 0, $33 = 0, $35 = 0, $40 = 0, $41 = 0, $45 = 0, $48 = 0, $5 = 0, $53 = 0, $54 = 0, $58 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $72 = 0, $77 = 0, $78 = 0, $8 = 0, $85 = 0, $90 = 0, $91 = 0, $i$0 = 0, $i$0$ph = 0, $i$13 = 0, $n$0$lcssa$i = 0, $n$02$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $0 = $key + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (($1 | 0) == 19) {
  $2 = HEAP32[$key >> 2] | 0;
  if ($2 >>> 0 > 2147483648 | ($2 | 0) < 1 | ($2 | 0) == 0) label = 5; else {
   $5 = HEAP32[$t + 8 >> 2] | 0;
   if ($2 >>> 0 > $5 >>> 0) label = 5; else {
    $40 = $5;
    $i$0$ph = $2;
   }
  }
 } else if (!$1) {
  $40 = HEAP32[$t + 8 >> 2] | 0;
  $i$0$ph = 0;
 } else label = 5;
 if ((label | 0) == 5) {
  $7 = _mainposition($t, $key) | 0;
  $8 = $7 + 8 | 0;
  L7 : do if (!(_luaV_equalobj(0, $8, $key) | 0)) {
   $18 = $8;
   $n$02$i = $7;
   while (1) {
    if ((HEAP32[$n$02$i + 12 >> 2] | 0) == 10) if (HEAP32[$0 >> 2] & 64) if ((HEAP32[$18 >> 2] | 0) == (HEAP32[$key >> 2] | 0)) {
     $n$0$lcssa$i = $n$02$i;
     break L7;
    }
    $33 = HEAP32[$n$02$i + 16 >> 2] | 0;
    if (!$33) break;
    $35 = $n$02$i + ($33 * 20 | 0) | 0;
    $18 = $n$02$i + ($33 * 20 | 0) + 8 | 0;
    if (_luaV_equalobj(0, $18, $key) | 0) {
     $n$0$lcssa$i = $35;
     break L7;
    } else $n$02$i = $35;
   }
   _luaG_runerror($L, 62424, $vararg_buffer);
  } else $n$0$lcssa$i = $7; while (0);
  $29 = HEAP32[$t + 8 >> 2] | 0;
  $40 = $29;
  $i$0$ph = (($n$0$lcssa$i - (HEAP32[$t + 16 >> 2] | 0) | 0) / 20 | 0) + 1 + $29 | 0;
 }
 $31 = $t + 12 | 0;
 $i$0 = $i$0$ph;
 while (1) {
  if ($i$0 >>> 0 >= $40 >>> 0) break;
  $41 = HEAP32[$31 >> 2] | 0;
  $45 = $i$0 + 1 | 0;
  if (!(HEAP32[$41 + ($i$0 << 3) + 4 >> 2] | 0)) $i$0 = $45; else {
   label = 17;
   break;
  }
 }
 if ((label | 0) == 17) {
  HEAP32[$key >> 2] = $45;
  HEAP32[$0 >> 2] = 19;
  $48 = $41 + ($i$0 << 3) | 0;
  $53 = HEAP32[$48 + 4 >> 2] | 0;
  $54 = $key + 8 | 0;
  HEAP32[$54 >> 2] = HEAP32[$48 >> 2];
  HEAP32[$54 + 4 >> 2] = $53;
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $58 = $i$0 - $40 | 0;
 $62 = 1 << (HEAPU8[$t + 7 >> 0] | 0);
 if (($58 | 0) >= ($62 | 0)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $64 = $t + 16 | 0;
 $65 = HEAP32[$64 >> 2] | 0;
 $i$13 = $58;
 while (1) {
  $66 = $i$13 + 1 | 0;
  if (HEAP32[$65 + ($i$13 * 20 | 0) + 4 >> 2] | 0) break;
  if (($66 | 0) < ($62 | 0)) $i$13 = $66; else {
   $$0 = 0;
   label = 23;
   break;
  }
 }
 if ((label | 0) == 23) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 $72 = $65 + ($i$13 * 20 | 0) + 8 | 0;
 $77 = HEAP32[$72 + 4 >> 2] | 0;
 $78 = $key;
 HEAP32[$78 >> 2] = HEAP32[$72 >> 2];
 HEAP32[$78 + 4 >> 2] = $77;
 $85 = (HEAP32[$64 >> 2] | 0) + ($i$13 * 20 | 0) | 0;
 $90 = HEAP32[$85 + 4 >> 2] | 0;
 $91 = $key + 8 | 0;
 HEAP32[$91 >> 2] = HEAP32[$85 >> 2];
 HEAP32[$91 + 4 >> 2] = $90;
 $$0 = 1;
 STACKTOP = sp;
 return $$0 | 0;
}

function _new_localvar($ls, $name) {
 $ls = $ls | 0;
 $name = $name | 0;
 var $$pre$phiZ2D = 0, $1 = 0, $13 = 0, $17 = 0, $21 = 0, $3 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $47 = 0, $5 = 0, $50 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $6 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $oldsize$01$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $1 = HEAP32[$ls + 28 >> 2] | 0;
 $3 = HEAP32[$ls + 48 >> 2] | 0;
 $4 = HEAP32[$1 >> 2] | 0;
 $5 = $4 + 32 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = $1 + 40 | 0;
 if ((HEAP16[$7 >> 1] | 0) < ($6 | 0)) {
  $$pre$phiZ2D = $4 + 60 | 0;
  $17 = $6;
 } else {
  $13 = $4 + 60 | 0;
  HEAP32[$13 >> 2] = _luaM_growaux_(HEAP32[$ls + 32 >> 2] | 0, HEAP32[$13 >> 2] | 0, $5, 12, 32767, 60568) | 0;
  $$pre$phiZ2D = $13;
  $17 = HEAP32[$5 >> 2] | 0;
 }
 if (($6 | 0) < ($17 | 0)) {
  $oldsize$01$i = $6;
  do {
   HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + ($oldsize$01$i * 12 | 0) >> 2] = 0;
   $oldsize$01$i = $oldsize$01$i + 1 | 0;
  } while (($oldsize$01$i | 0) != ($17 | 0));
 }
 $21 = HEAP16[$7 >> 1] | 0;
 HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + (($21 << 16 >> 16) * 12 | 0) >> 2] = $name;
 if (!(HEAP8[$4 + 5 >> 0] & 4)) $36 = $21; else if (!(HEAP8[$name + 5 >> 0] & 3)) $36 = $21; else {
  _luaC_barrier_(HEAP32[$ls + 32 >> 2] | 0, $4, $name);
  $36 = HEAP16[$7 >> 1] | 0;
 }
 HEAP16[$7 >> 1] = $36 + 1 << 16 >> 16;
 $37 = $3 + 4 | 0;
 $38 = HEAP32[$37 >> 2] | 0;
 if (($38 + 1 - (HEAP32[$1 + 36 >> 2] | 0) | 0) > 200) {
  $44 = $1 + 8 | 0;
  $47 = HEAP32[(HEAP32[$44 >> 2] | 0) + 32 >> 2] | 0;
  $50 = HEAP32[(HEAP32[$1 >> 2] | 0) + 36 >> 2] | 0;
  if (!$50) {
   $53 = 60600;
   HEAP32[$vararg_buffer1 >> 2] = 60568;
   $vararg_ptr4 = $vararg_buffer1 + 4 | 0;
   HEAP32[$vararg_ptr4 >> 2] = 200;
   $vararg_ptr5 = $vararg_buffer1 + 8 | 0;
   HEAP32[$vararg_ptr5 >> 2] = $53;
   $54 = _luaO_pushfstring($47, 60640, $vararg_buffer1) | 0;
   $55 = HEAP32[$44 >> 2] | 0;
   _luaX_syntaxerror($55, $54);
  }
  HEAP32[$vararg_buffer >> 2] = $50;
  $53 = _luaO_pushfstring($47, 60616, $vararg_buffer) | 0;
  HEAP32[$vararg_buffer1 >> 2] = 60568;
  $vararg_ptr4 = $vararg_buffer1 + 4 | 0;
  HEAP32[$vararg_ptr4 >> 2] = 200;
  $vararg_ptr5 = $vararg_buffer1 + 8 | 0;
  HEAP32[$vararg_ptr5 >> 2] = $53;
  $54 = _luaO_pushfstring($47, 60640, $vararg_buffer1) | 0;
  $55 = HEAP32[$44 >> 2] | 0;
  _luaX_syntaxerror($55, $54);
 }
 $57 = $3 + 8 | 0;
 if (($38 + 2 | 0) > (HEAP32[$57 >> 2] | 0)) {
  $63 = _luaM_growaux_(HEAP32[$ls + 32 >> 2] | 0, HEAP32[$3 >> 2] | 0, $57, 2, 2147483647, 60568) | 0;
  HEAP32[$3 >> 2] = $63;
  $65 = HEAP32[$37 >> 2] | 0;
  $67 = $63;
  $64 = $65 + 1 | 0;
  HEAP32[$37 >> 2] = $64;
  $66 = $67 + ($65 << 1) | 0;
  HEAP16[$66 >> 1] = $36;
  STACKTOP = sp;
  return;
 } else {
  $65 = $38;
  $67 = HEAP32[$3 >> 2] | 0;
  $64 = $65 + 1 | 0;
  HEAP32[$37 >> 2] = $64;
  $66 = $67 + ($65 << 1) | 0;
  HEAP16[$66 >> 1] = $36;
  STACKTOP = sp;
  return;
 }
}

function _png_handle_PLTE($png_ptr, $info_ptr, $length) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 $length = $length | 0;
 var $$phi$trans$insert$pre$phiZZZZ2D = 0, $0 = 0, $1 = 0, $18 = 0, $21 = 0, $22 = 0, $39 = 0, $43 = 0, $44 = 0, $51 = 0, $9 = 0, $buf = 0, $i$05 = 0, $i$05$us = 0, $pal_ptr$06 = 0, $pal_ptr$06$us = 0, $palette = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 784 | 0;
 $palette = sp + 8 | 0;
 $buf = sp;
 $0 = $png_ptr + 208 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!($1 & 1)) _png_chunk_error($png_ptr, 75496);
 if ($1 & 2) _png_chunk_error($png_ptr, 75512);
 if ($1 & 4) {
  _png_crc_finish($png_ptr, $length) | 0;
  _png_chunk_benign_error($png_ptr, 75472);
  STACKTOP = sp;
  return;
 }
 HEAP32[$0 >> 2] = $1 | 2;
 $9 = $png_ptr + 435 | 0;
 if (!(HEAP8[$9 >> 0] & 2)) {
  _png_crc_finish($png_ptr, $length) | 0;
  _png_chunk_benign_error($png_ptr, 75528);
  STACKTOP = sp;
  return;
 }
 if (!($length >>> 0 < 769 & (($length >>> 0) % 3 | 0 | 0) == 0)) {
  _png_crc_finish($png_ptr, $length) | 0;
  if ((HEAP8[$9 >> 0] | 0) == 3) _png_chunk_error($png_ptr, 75488);
  _png_chunk_benign_error($png_ptr, 75488);
  STACKTOP = sp;
  return;
 }
 $18 = ($length | 0) / 3 | 0;
 if (($length | 0) > 2) {
  $21 = $buf + 1 | 0;
  $22 = $buf + 2 | 0;
  if (!$png_ptr) {
   $i$05$us = 0;
   $pal_ptr$06$us = $palette;
   while (1) {
    HEAP8[$pal_ptr$06$us >> 0] = HEAP8[$buf >> 0] | 0;
    HEAP8[$pal_ptr$06$us + 1 >> 0] = HEAP8[$21 >> 0] | 0;
    HEAP8[$pal_ptr$06$us + 2 >> 0] = HEAP8[$22 >> 0] | 0;
    $i$05$us = $i$05$us + 1 | 0;
    if (($i$05$us | 0) >= ($18 | 0)) break; else $pal_ptr$06$us = $pal_ptr$06$us + 3 | 0;
   }
  } else {
   $i$05 = 0;
   $pal_ptr$06 = $palette;
   while (1) {
    _png_read_data($png_ptr, $buf, 3);
    _png_calculate_crc($png_ptr, $buf, 3);
    HEAP8[$pal_ptr$06 >> 0] = HEAP8[$buf >> 0] | 0;
    HEAP8[$pal_ptr$06 + 1 >> 0] = HEAP8[$21 >> 0] | 0;
    HEAP8[$pal_ptr$06 + 2 >> 0] = HEAP8[$22 >> 0] | 0;
    $i$05 = $i$05 + 1 | 0;
    if (($i$05 | 0) >= ($18 | 0)) break; else $pal_ptr$06 = $pal_ptr$06 + 3 | 0;
   }
  }
 }
 _png_crc_finish($png_ptr, 0) | 0;
 _png_set_PLTE($png_ptr, $info_ptr, $palette, $18);
 $39 = $png_ptr + 428 | 0;
 do if (!(HEAP16[$39 >> 1] | 0)) {
  if (!$info_ptr) {
   STACKTOP = sp;
   return;
  }
  $43 = $info_ptr + 8 | 0;
  $44 = HEAP32[$43 >> 2] | 0;
  if (!($44 & 16)) $51 = $44; else {
   HEAP16[$39 >> 1] = 0;
   $$phi$trans$insert$pre$phiZZZZ2D = $43;
   label = 24;
  }
 } else {
  HEAP16[$39 >> 1] = 0;
  if ($info_ptr) {
   $$phi$trans$insert$pre$phiZZZZ2D = $info_ptr + 8 | 0;
   label = 24;
   break;
  }
  _png_chunk_benign_error($png_ptr, 75560);
  STACKTOP = sp;
  return;
 } while (0);
 if ((label | 0) == 24) {
  HEAP16[$info_ptr + 22 >> 1] = 0;
  _png_chunk_benign_error($png_ptr, 75560);
  $51 = HEAP32[$$phi$trans$insert$pre$phiZZZZ2D >> 2] | 0;
 }
 if ($51 & 64) _png_chunk_benign_error($png_ptr, 75584);
 if (!(HEAP32[$info_ptr + 8 >> 2] & 32)) {
  STACKTOP = sp;
  return;
 }
 _png_chunk_benign_error($png_ptr, 75608);
 STACKTOP = sp;
 return;
}

function _png_handle_tRNS($png_ptr, $info_ptr, $length) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 $length = $length | 0;
 var $1 = 0, $12 = 0, $17 = 0, $20 = 0, $28 = 0, $31 = 0, $36 = 0, $39 = 0, $44 = 0, $47 = 0, $64 = 0, $buf = 0, $buf1 = 0, $readbuf = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 $readbuf = sp + 8 | 0;
 $buf = sp + 6 | 0;
 $buf1 = sp;
 $1 = HEAP32[$png_ptr + 208 >> 2] | 0;
 if (!($1 & 1)) _png_chunk_error($png_ptr, 75496);
 if ($1 & 4) {
  _png_crc_finish($png_ptr, $length) | 0;
  _png_chunk_benign_error($png_ptr, 75472);
  STACKTOP = sp;
  return;
 }
 if ($info_ptr) if (HEAP32[$info_ptr + 8 >> 2] & 16) {
  _png_crc_finish($png_ptr, $length) | 0;
  _png_chunk_benign_error($png_ptr, 75512);
  STACKTOP = sp;
  return;
 }
 $12 = HEAP8[$png_ptr + 435 >> 0] | 0;
 if (!($12 << 24 >> 24)) {
  if (($length | 0) != 2) {
   _png_crc_finish($png_ptr, $length) | 0;
   _png_chunk_benign_error($png_ptr, 75488);
   STACKTOP = sp;
   return;
  }
  if (!$png_ptr) {
   $17 = 0;
   $20 = 0;
  } else {
   _png_read_data($png_ptr, $buf, 2);
   _png_calculate_crc($png_ptr, $buf, 2);
   $17 = HEAP8[$buf >> 0] | 0;
   $20 = HEAP8[$buf + 1 >> 0] | 0;
  }
  HEAP16[$png_ptr + 428 >> 1] = 1;
  HEAP16[$png_ptr + 540 >> 1] = ($17 & 255) << 8 | $20 & 255;
 } else if ($12 << 24 >> 24 == 2) {
  if (($length | 0) != 6) {
   _png_crc_finish($png_ptr, $length) | 0;
   _png_chunk_benign_error($png_ptr, 75488);
   STACKTOP = sp;
   return;
  }
  if (!$png_ptr) {
   $28 = 0;
   $31 = 0;
   $36 = 0;
   $39 = 0;
   $44 = 0;
   $47 = 0;
  } else {
   _png_read_data($png_ptr, $buf1, 6);
   _png_calculate_crc($png_ptr, $buf1, 6);
   $28 = HEAP8[$buf1 >> 0] | 0;
   $31 = HEAP8[$buf1 + 1 >> 0] | 0;
   $36 = HEAP8[$buf1 + 2 >> 0] | 0;
   $39 = HEAP8[$buf1 + 3 >> 0] | 0;
   $44 = HEAP8[$buf1 + 4 >> 0] | 0;
   $47 = HEAP8[$buf1 + 5 >> 0] | 0;
  }
  HEAP16[$png_ptr + 428 >> 1] = 1;
  HEAP16[$png_ptr + 534 >> 1] = ($28 & 255) << 8 | $31 & 255;
  HEAP16[$png_ptr + 536 >> 1] = ($36 & 255) << 8 | $39 & 255;
  HEAP16[$png_ptr + 538 >> 1] = ($44 & 255) << 8 | $47 & 255;
 } else if ($12 << 24 >> 24 == 3) {
  if (!($1 & 2)) {
   _png_crc_finish($png_ptr, $length) | 0;
   _png_chunk_benign_error($png_ptr, 75472);
   STACKTOP = sp;
   return;
  }
  if (($length >>> 0 > 256 ? 1 : (HEAPU16[$png_ptr + 420 >> 1] | 0) >>> 0 < $length >>> 0) | ($length | 0) == 0) {
   _png_crc_finish($png_ptr, $length) | 0;
   _png_chunk_benign_error($png_ptr, 75488);
   STACKTOP = sp;
   return;
  }
  if ($png_ptr) {
   _png_read_data($png_ptr, $readbuf, $length);
   _png_calculate_crc($png_ptr, $readbuf, $length);
  }
  HEAP16[$png_ptr + 428 >> 1] = $length;
 } else {
  _png_crc_finish($png_ptr, $length) | 0;
  _png_chunk_benign_error($png_ptr, 75944);
  STACKTOP = sp;
  return;
 }
 $64 = $png_ptr + 428 | 0;
 if (!(_png_crc_finish($png_ptr, 0) | 0)) {
  _png_set_tRNS($png_ptr, $info_ptr, $readbuf, HEAPU16[$64 >> 1] | 0, $png_ptr + 532 | 0);
  STACKTOP = sp;
  return;
 } else {
  HEAP16[$64 >> 1] = 0;
  STACKTOP = sp;
  return;
 }
}

function _png_handle_bKGD($png_ptr, $info_ptr, $length) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 $length = $length | 0;
 var $1 = 0, $11 = 0, $22 = 0, $24 = 0, $26 = 0, $29 = 0, $32 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $background = 0, $buf = 0, $truelen$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $buf = sp + 10 | 0;
 $background = sp;
 $1 = HEAP32[$png_ptr + 208 >> 2] | 0;
 if (!($1 & 1)) _png_chunk_error($png_ptr, 75496);
 if (!($1 & 4)) {
  $6 = $png_ptr + 435 | 0;
  $7 = HEAP8[$6 >> 0] | 0;
  $8 = $7 << 24 >> 24 == 3;
  if (!($8 & ($1 & 2 | 0) == 0)) {
   $11 = ($info_ptr | 0) != 0;
   if ($11) if (HEAP32[$info_ptr + 8 >> 2] & 32) {
    _png_crc_finish($png_ptr, $length) | 0;
    _png_chunk_benign_error($png_ptr, 75512);
    STACKTOP = sp;
    return;
   }
   if ($8) $truelen$0 = 1; else $truelen$0 = ($7 & 2) == 0 ? 2 : 6;
   if (($truelen$0 | 0) != ($length | 0)) {
    _png_crc_finish($png_ptr, $length) | 0;
    _png_chunk_benign_error($png_ptr, 75488);
    STACKTOP = sp;
    return;
   }
   if ($png_ptr) {
    _png_read_data($png_ptr, $buf, $length);
    _png_calculate_crc($png_ptr, $buf, $length);
   }
   if (_png_crc_finish($png_ptr, 0) | 0) {
    STACKTOP = sp;
    return;
   }
   $22 = HEAP8[$6 >> 0] | 0;
   do if ($22 << 24 >> 24 == 3) {
    $24 = HEAP8[$buf >> 0] | 0;
    HEAP8[$background >> 0] = $24;
    do if ($11) {
     $26 = HEAP16[$info_ptr + 20 >> 1] | 0;
     if (!($26 << 16 >> 16)) label = 22; else {
      $29 = $24 & 255;
      if ($29 >>> 0 < ($26 & 65535) >>> 0) {
       $32 = HEAP32[$png_ptr + 416 >> 2] | 0;
       HEAP16[$background + 2 >> 1] = HEAPU8[$32 + ($29 * 3 | 0) >> 0] | 0;
       HEAP16[$background + 4 >> 1] = HEAPU8[$32 + ($29 * 3 | 0) + 1 >> 0] | 0;
       HEAP16[$background + 6 >> 1] = HEAPU8[$32 + ($29 * 3 | 0) + 2 >> 0] | 0;
       break;
      }
      _png_chunk_benign_error($png_ptr, 75976);
      STACKTOP = sp;
      return;
     }
    } else label = 22; while (0);
    if ((label | 0) == 22) {
     HEAP16[$background + 6 >> 1] = 0;
     HEAP16[$background + 4 >> 1] = 0;
     HEAP16[$background + 2 >> 1] = 0;
    }
    HEAP16[$background + 8 >> 1] = 0;
   } else {
    HEAP8[$background >> 0] = 0;
    $58 = ((HEAPU8[$buf >> 0] | 0) << 8 | (HEAPU8[$buf + 1 >> 0] | 0)) & 65535;
    if (!($22 & 2)) {
     HEAP16[$background + 8 >> 1] = $58;
     HEAP16[$background + 6 >> 1] = $58;
     HEAP16[$background + 4 >> 1] = $58;
     HEAP16[$background + 2 >> 1] = $58;
     break;
    } else {
     HEAP16[$background + 2 >> 1] = $58;
     HEAP16[$background + 4 >> 1] = (HEAPU8[$buf + 2 >> 0] | 0) << 8 | (HEAPU8[$buf + 3 >> 0] | 0);
     HEAP16[$background + 6 >> 1] = (HEAPU8[$buf + 4 >> 0] | 0) << 8 | (HEAPU8[$buf + 5 >> 0] | 0);
     HEAP16[$background + 8 >> 1] = 0;
     break;
    }
   } while (0);
   _png_set_bKGD($png_ptr, $info_ptr, $background);
   STACKTOP = sp;
   return;
  }
 }
 _png_crc_finish($png_ptr, $length) | 0;
 _png_chunk_benign_error($png_ptr, 75472);
 STACKTOP = sp;
 return;
}

function _lua_setupvalue($L, $funcindex, $n) {
 $L = $L | 0;
 $funcindex = $funcindex | 0;
 $n = $n | 0;
 var $$0$i = 0, $$0$i1$ph = 0, $$0$i12 = 0, $$ph = 0, $$ph4 = 0, $$ph5 = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $31 = 0, $32 = 0, $4 = 0, $41 = 0, $43 = 0, $48 = 0, $51 = 0, $56 = 0, $59 = 0, $61 = 0, $62 = 0, $67 = 0, $68 = 0, $73 = 0, $82 = 0, $88 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($funcindex | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($funcindex << 3) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 59168;
 } else {
  if (($funcindex | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($funcindex << 3) | 0;
   break;
  }
  if (($funcindex | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $16 = -1001e3 - $funcindex | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 4 >> 2] | 0) == 22) $$0$i = 59168; else {
   $21 = HEAP32[$17 >> 2] | 0;
   if (($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0)) $$0$i = 59168; else $$0$i = $21 + 16 + ($16 + -1 << 3) | 0;
  }
 } while (0);
 $31 = HEAP32[$$0$i + 4 >> 2] & 63;
 do if (($31 | 0) == 38) {
  $32 = HEAP32[$$0$i >> 2] | 0;
  if (($n | 0) <= 0) {
   $$0$i12 = 0;
   return $$0$i12 | 0;
  }
  if ((HEAPU8[$32 + 6 >> 0] | 0 | 0) < ($n | 0)) {
   $$0$i12 = 0;
   return $$0$i12 | 0;
  } else {
   $$0$i1$ph = 62584;
   $$ph = $32 + 16 + ($n + -1 << 3) | 0;
   $$ph4 = $32;
   $$ph5 = 0;
   break;
  }
 } else if (($31 | 0) == 6) {
  $41 = HEAP32[$$0$i >> 2] | 0;
  $43 = HEAP32[$41 + 12 >> 2] | 0;
  if (($n | 0) <= 0) {
   $$0$i12 = 0;
   return $$0$i12 | 0;
  }
  if ((HEAP32[$43 + 12 >> 2] | 0) < ($n | 0)) {
   $$0$i12 = 0;
   return $$0$i12 | 0;
  } else {
   $48 = $n + -1 | 0;
   $51 = HEAP32[$41 + 16 + ($48 << 2) >> 2] | 0;
   $56 = HEAP32[(HEAP32[$43 + 64 >> 2] | 0) + ($48 << 3) >> 2] | 0;
   $$0$i1$ph = ($56 | 0) == 0 ? 55056 : $56 + 24 | 0;
   $$ph = HEAP32[$51 >> 2] | 0;
   $$ph4 = 0;
   $$ph5 = $51;
   break;
  }
 } else {
  $$0$i12 = 0;
  return $$0$i12 | 0;
 } while (0);
 $59 = $L + 8 | 0;
 $61 = (HEAP32[$59 >> 2] | 0) + -8 | 0;
 HEAP32[$59 >> 2] = $61;
 $62 = $61;
 $67 = HEAP32[$62 + 4 >> 2] | 0;
 $68 = $$ph;
 HEAP32[$68 >> 2] = HEAP32[$62 >> 2];
 HEAP32[$68 + 4 >> 2] = $67;
 if (!$$ph4) {
  if (!$$ph5) {
   $$0$i12 = $$0$i1$ph;
   return $$0$i12 | 0;
  }
  $88 = HEAP32[$$ph5 >> 2] | 0;
  if (!(HEAP32[$88 + 4 >> 2] & 64)) {
   $$0$i12 = $$0$i1$ph;
   return $$0$i12 | 0;
  }
  if (($88 | 0) != ($$ph5 + 8 | 0)) {
   $$0$i12 = $$0$i1$ph;
   return $$0$i12 | 0;
  }
  _luaC_upvalbarrier_($L, $$ph5);
  $$0$i12 = $$0$i1$ph;
  return $$0$i12 | 0;
 } else {
  $73 = HEAP32[$59 >> 2] | 0;
  if (!(HEAP32[$73 + 4 >> 2] & 64)) {
   $$0$i12 = $$0$i1$ph;
   return $$0$i12 | 0;
  }
  if (!(HEAP8[$$ph4 + 5 >> 0] & 4)) {
   $$0$i12 = $$0$i1$ph;
   return $$0$i12 | 0;
  }
  $82 = HEAP32[$73 >> 2] | 0;
  if (!(HEAP8[$82 + 5 >> 0] & 3)) {
   $$0$i12 = $$0$i1$ph;
   return $$0$i12 | 0;
  }
  _luaC_barrier_($L, $$ph4, $82);
  $$0$i12 = $$0$i1$ph;
  return $$0$i12 | 0;
 }
 return 0;
}

function _imdct_step3_iter0_loop($n, $e, $i_off, $k_off, $A) {
 $n = $n | 0;
 $e = $e | 0;
 $i_off = $i_off | 0;
 $k_off = $k_off | 0;
 $A = $A | 0;
 var $$04 = 0, $10 = 0.0, $11 = 0, $13 = 0.0, $19 = 0, $2 = 0, $28 = 0, $29 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $38 = 0.0, $44 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0, $63 = 0.0, $69 = 0, $7 = 0.0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0, $88 = 0.0, $9 = 0, $94 = 0, $ee0$03 = 0, $ee2$01 = 0, $i$02 = 0;
 if ($n & 3) ___assert_fail(79600, 78904, 2458, 79616);
 $2 = $n >> 2;
 if (($2 | 0) <= 0) return;
 $$04 = $A;
 $ee0$03 = $e + ($i_off << 2) | 0;
 $ee2$01 = $e + ($k_off + $i_off << 2) | 0;
 $i$02 = $2;
 while (1) {
  $6 = +HEAPF32[$ee0$03 >> 2];
  $7 = +HEAPF32[$ee2$01 >> 2];
  $8 = $6 - $7;
  $9 = $ee0$03 + -4 | 0;
  $10 = +HEAPF32[$9 >> 2];
  $11 = $ee2$01 + -4 | 0;
  $13 = $10 - +HEAPF32[$11 >> 2];
  HEAPF32[$ee0$03 >> 2] = $6 + $7;
  HEAPF32[$9 >> 2] = +HEAPF32[$11 >> 2] + $10;
  $19 = $$04 + 4 | 0;
  HEAPF32[$ee2$01 >> 2] = $8 * +HEAPF32[$$04 >> 2] - $13 * +HEAPF32[$19 >> 2];
  HEAPF32[$11 >> 2] = $13 * +HEAPF32[$$04 >> 2] + $8 * +HEAPF32[$19 >> 2];
  $28 = $$04 + 32 | 0;
  $29 = $ee0$03 + -8 | 0;
  $30 = +HEAPF32[$29 >> 2];
  $31 = $ee2$01 + -8 | 0;
  $32 = +HEAPF32[$31 >> 2];
  $33 = $30 - $32;
  $34 = $ee0$03 + -12 | 0;
  $35 = +HEAPF32[$34 >> 2];
  $36 = $ee2$01 + -12 | 0;
  $38 = $35 - +HEAPF32[$36 >> 2];
  HEAPF32[$29 >> 2] = $30 + $32;
  HEAPF32[$34 >> 2] = +HEAPF32[$36 >> 2] + $35;
  $44 = $$04 + 36 | 0;
  HEAPF32[$31 >> 2] = $33 * +HEAPF32[$28 >> 2] - $38 * +HEAPF32[$44 >> 2];
  HEAPF32[$36 >> 2] = $38 * +HEAPF32[$28 >> 2] + $33 * +HEAPF32[$44 >> 2];
  $53 = $$04 + 64 | 0;
  $54 = $ee0$03 + -16 | 0;
  $55 = +HEAPF32[$54 >> 2];
  $56 = $ee2$01 + -16 | 0;
  $57 = +HEAPF32[$56 >> 2];
  $58 = $55 - $57;
  $59 = $ee0$03 + -20 | 0;
  $60 = +HEAPF32[$59 >> 2];
  $61 = $ee2$01 + -20 | 0;
  $63 = $60 - +HEAPF32[$61 >> 2];
  HEAPF32[$54 >> 2] = $55 + $57;
  HEAPF32[$59 >> 2] = +HEAPF32[$61 >> 2] + $60;
  $69 = $$04 + 68 | 0;
  HEAPF32[$56 >> 2] = $58 * +HEAPF32[$53 >> 2] - $63 * +HEAPF32[$69 >> 2];
  HEAPF32[$61 >> 2] = $63 * +HEAPF32[$53 >> 2] + $58 * +HEAPF32[$69 >> 2];
  $78 = $$04 + 96 | 0;
  $79 = $ee0$03 + -24 | 0;
  $80 = +HEAPF32[$79 >> 2];
  $81 = $ee2$01 + -24 | 0;
  $82 = +HEAPF32[$81 >> 2];
  $83 = $80 - $82;
  $84 = $ee0$03 + -28 | 0;
  $85 = +HEAPF32[$84 >> 2];
  $86 = $ee2$01 + -28 | 0;
  $88 = $85 - +HEAPF32[$86 >> 2];
  HEAPF32[$79 >> 2] = $80 + $82;
  HEAPF32[$84 >> 2] = +HEAPF32[$86 >> 2] + $85;
  $94 = $$04 + 100 | 0;
  HEAPF32[$81 >> 2] = $83 * +HEAPF32[$78 >> 2] - $88 * +HEAPF32[$94 >> 2];
  HEAPF32[$86 >> 2] = $88 * +HEAPF32[$78 >> 2] + $83 * +HEAPF32[$94 >> 2];
  $i$02 = $i$02 + -1 | 0;
  if (($i$02 | 0) <= 0) break; else {
   $$04 = $$04 + 128 | 0;
   $ee0$03 = $ee0$03 + -32 | 0;
   $ee2$01 = $ee2$01 + -32 | 0;
  }
 }
 return;
}

function _expm1f($x) {
 $x = +$x;
 var $$0 = 0.0, $$02 = 0.0, $$pn = 0.0, $0 = 0, $1 = 0, $17 = 0, $18 = 0.0, $2 = 0, $22 = 0.0, $28 = 0.0, $29 = 0.0, $33 = 0.0, $35 = 0.0, $40 = 0.0, $48 = 0.0, $61 = 0.0, $64 = 0.0, $71 = 0, $__x = 0, $c$0 = 0.0, $hi$0 = 0.0, $k$0 = 0, $k$1 = 0, $lo$0 = 0.0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__x = sp;
 $0 = (HEAPF32[tempDoublePtr >> 2] = $x, HEAP32[tempDoublePtr >> 2] | 0);
 $1 = $0 & 2147483647;
 $2 = $0 >>> 31;
 do if ($1 >>> 0 > 1100331075) {
  if ($1 >>> 0 > 2139095040) {
   $$0 = $x;
   STACKTOP = sp;
   return +$$0;
  }
  if ($2) {
   $$0 = -1.0;
   STACKTOP = sp;
   return +$$0;
  }
  if ($x > 88.7216796875) {
   $$0 = $x * 1701411834604692317316873.0e14;
   STACKTOP = sp;
   return +$$0;
  } else label = 11;
 } else {
  if ($1 >>> 0 > 1051816472) {
   if ($1 >>> 0 >= 1065686418) {
    label = 11;
    break;
   }
   if (!$2) {
    $hi$0 = $x + -.6931381225585938;
    $k$0 = 1;
    $lo$0 = 9.05800061445916e-06;
    label = 12;
    break;
   } else {
    $hi$0 = $x + .6931381225585938;
    $k$0 = -1;
    $lo$0 = -9.05800061445916e-06;
    label = 12;
    break;
   }
  }
  if ($1 >>> 0 < 855638016) {
   if ($1 >>> 0 >= 8388608) {
    $$0 = $x;
    STACKTOP = sp;
    return +$$0;
   }
   HEAPF32[$__x >> 2] = $x * $x;
   $$0 = $x;
   STACKTOP = sp;
   return +$$0;
  } else {
   $$02 = $x;
   $c$0 = 0.0;
   $k$1 = 0;
  }
 } while (0);
 if ((label | 0) == 11) {
  $17 = ~~($x * 1.4426950216293335 + (($2 | 0) != 0 ? -.5 : .5));
  $18 = +($17 | 0);
  $hi$0 = $x - $18 * .6931381225585938;
  $k$0 = $17;
  $lo$0 = $18 * 9.05800061445916e-06;
  label = 12;
 }
 if ((label | 0) == 12) {
  $22 = $hi$0 - $lo$0;
  $$02 = $22;
  $c$0 = $hi$0 - $22 - $lo$0;
  $k$1 = $k$0;
 }
 $28 = $$02 * .5;
 $29 = $$02 * $28;
 $33 = $29 * ($29 * 1.5807170420885086e-03 + -.03333321213722229) + 1.0;
 $35 = 3.0 - $28 * $33;
 $40 = $29 * (($33 - $35) / (6.0 - $$02 * $35));
 if (!$k$1) {
  $$0 = $$02 - ($$02 * $40 - $29);
  STACKTOP = sp;
  return +$$0;
 }
 $48 = $$02 * ($40 - $c$0) - $c$0 - $29;
 if (($k$1 | 0) == 1) if ($$02 < -.25) {
  $$0 = ($48 - ($$02 + .5)) * -2.0;
  STACKTOP = sp;
  return +$$0;
 } else {
  $$0 = ($$02 - $48) * 2.0 + 1.0;
  STACKTOP = sp;
  return +$$0;
 } else if (($k$1 | 0) == -1) {
  $$0 = ($$02 - $48) * .5 + -.5;
  STACKTOP = sp;
  return +$$0;
 } else {
  $61 = (HEAP32[tempDoublePtr >> 2] = ($k$1 << 23) + 1065353216, +HEAPF32[tempDoublePtr >> 2]);
  if ($k$1 >>> 0 > 56) {
   $64 = $$02 - $48 + 1.0;
   if (($k$1 | 0) == 128) $y$0 = $64 * 2.0 * 1701411834604692317316873.0e14; else $y$0 = $61 * $64;
   $$0 = $y$0 + -1.0;
   STACKTOP = sp;
   return +$$0;
  } else {
   $71 = 127 - $k$1 << 23;
   if (($k$1 | 0) < 23) $$pn = 1.0 - (HEAP32[tempDoublePtr >> 2] = $71, +HEAPF32[tempDoublePtr >> 2]) + ($$02 - $48); else $$pn = $$02 - ((HEAP32[tempDoublePtr >> 2] = $71, +HEAPF32[tempDoublePtr >> 2]) + $48) + 1.0;
   $$0 = $61 * $$pn;
   STACKTOP = sp;
   return +$$0;
  }
 }
 return +(0.0);
}

function __ZN12b2WheelJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $104 = 0.0, $106 = 0.0, $109 = 0.0, $11 = 0.0, $113 = 0.0, $114 = 0.0, $12 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0, $139 = 0, $14 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0, $15 = 0, $154 = 0, $155 = 0.0, $16 = 0, $18 = 0, $2 = 0, $24 = 0.0, $25 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $36 = 0.0, $41 = 0.0, $44 = 0.0, $47 = 0.0, $5 = 0, $52 = 0.0, $57 = 0.0, $60 = 0.0, $63 = 0.0, $68 = 0.0, $69 = 0.0, $71 = 0.0, $74 = 0.0, $76 = 0.0, $79 = 0.0, $90 = 0.0, $92 = 0.0, $94 = 0.0, $97 = 0.0, $99 = 0.0, $impulse$0 = 0.0;
 $0 = $this + 132 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $data + 24 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $5 = $3 + ($1 * 12 | 0) | 0;
 $11 = +HEAPF32[$5 >> 2];
 $12 = +HEAPF32[$5 + 4 >> 2];
 $14 = +HEAPF32[$3 + ($1 * 12 | 0) + 8 >> 2];
 $15 = $this + 136 | 0;
 $16 = HEAP32[$15 >> 2] | 0;
 $18 = $3 + ($16 * 12 | 0) | 0;
 $24 = +HEAPF32[$18 >> 2];
 $25 = +HEAPF32[$18 + 4 >> 2];
 $27 = +HEAPF32[$3 + ($16 * 12 | 0) + 8 >> 2];
 $28 = +Math_sin(+$14);
 $29 = +Math_cos(+$14);
 $30 = +Math_sin(+$27);
 $31 = +Math_cos(+$27);
 $36 = +HEAPF32[$this + 76 >> 2] - +HEAPF32[$this + 140 >> 2];
 $41 = +HEAPF32[$this + 80 >> 2] - +HEAPF32[$this + 144 >> 2];
 $44 = $29 * $36 - $28 * $41;
 $47 = $28 * $36 + $29 * $41;
 $52 = +HEAPF32[$this + 84 >> 2] - +HEAPF32[$this + 148 >> 2];
 $57 = +HEAPF32[$this + 88 >> 2] - +HEAPF32[$this + 152 >> 2];
 $60 = $31 * $52 - $30 * $57;
 $63 = $30 * $52 + $31 * $57;
 $68 = $24 - $11 + $60 - $44;
 $69 = $25 - $12 + $63 - $47;
 $71 = +HEAPF32[$this + 100 >> 2];
 $74 = +HEAPF32[$this + 104 >> 2];
 $76 = $29 * $71 - $28 * $74;
 $79 = $28 * $71 + $29 * $74;
 $90 = $76 * $68 + $79 * $69;
 $92 = +HEAPF32[$this + 156 >> 2];
 $94 = +HEAPF32[$this + 160 >> 2];
 $97 = +HEAPF32[$this + 164 >> 2];
 $99 = +HEAPF32[$this + 196 >> 2];
 $104 = +HEAPF32[$this + 168 >> 2];
 $106 = +HEAPF32[$this + 200 >> 2];
 $109 = $92 + $94 + $99 * ($97 * $99) + $106 * ($104 * $106);
 if ($109 != 0.0) $impulse$0 = -$90 / $109; else $impulse$0 = 0.0;
 $113 = $76 * $impulse$0;
 $114 = $79 * $impulse$0;
 $132 = +($11 - $113 * $92);
 $133 = +($12 - $114 * $92);
 $134 = (HEAP32[$2 >> 2] | 0) + ((HEAP32[$0 >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$134 >> 2] = $132;
 HEAPF32[$134 + 4 >> 2] = $133;
 $139 = HEAP32[$2 >> 2] | 0;
 HEAPF32[$139 + ((HEAP32[$0 >> 2] | 0) * 12 | 0) + 8 >> 2] = $14 - ($79 * ($44 + $68) - $76 * ($47 + $69)) * $impulse$0 * $97;
 $143 = +($24 + $113 * $94);
 $144 = +($25 + $114 * $94);
 $145 = $139 + ((HEAP32[$15 >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$145 >> 2] = $143;
 HEAPF32[$145 + 4 >> 2] = $144;
 HEAPF32[(HEAP32[$2 >> 2] | 0) + ((HEAP32[$15 >> 2] | 0) * 12 | 0) + 8 >> 2] = $27 + ($60 * $79 - $63 * $76) * $impulse$0 * $104;
 if ($90 > 0.0) {
  $155 = $90;
  $154 = $155 <= .004999999888241291;
  return $154 | 0;
 }
 $155 = -$90;
 $154 = $155 <= .004999999888241291;
 return $154 | 0;
}

function __ZN7b2Joint6CreateEPK10b2JointDefP16b2BlockAllocator($def, $allocator) {
 $def = $def | 0;
 $allocator = $allocator | 0;
 var $1 = 0, $11 = 0, $13 = 0, $15 = 0, $17 = 0, $19 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $5 = 0, $7 = 0, $9 = 0, $joint$0 = 0;
 do switch (HEAP32[$def >> 2] | 0) {
 case 10:
  {
   $19 = __ZN16b2BlockAllocator8AllocateEi($allocator, 168) | 0;
   if (!$19) $32 = 0; else {
    __ZN11b2RopeJointC2EPK14b2RopeJointDef($19, $def);
    $32 = $19;
   }
   $joint$0 = $32;
   return $joint$0 | 0;
  }
 case 4:
  {
   $9 = __ZN16b2BlockAllocator8AllocateEi($allocator, 196) | 0;
   if (!$9) $27 = 0; else {
    __ZN13b2PulleyJointC2EPK16b2PulleyJointDef($9, $def);
    $27 = $9;
   }
   $joint$0 = $27;
   return $joint$0 | 0;
  }
 case 5:
  {
   $3 = __ZN16b2BlockAllocator8AllocateEi($allocator, 168) | 0;
   if (!$3) $24 = 0; else {
    __ZN12b2MouseJointC2EPK15b2MouseJointDef($3, $def);
    $24 = $3;
   }
   $joint$0 = $24;
   return $joint$0 | 0;
  }
 case 7:
  {
   $13 = __ZN16b2BlockAllocator8AllocateEi($allocator, 224) | 0;
   if (!$13) $29 = 0; else {
    __ZN12b2WheelJointC2EPK15b2WheelJointDef($13, $def);
    $29 = $13;
   }
   $joint$0 = $29;
   return $joint$0 | 0;
  }
 case 2:
  {
   $5 = __ZN16b2BlockAllocator8AllocateEi($allocator, 256) | 0;
   if (!$5) $25 = 0; else {
    __ZN16b2PrismaticJointC2EPK19b2PrismaticJointDef($5, $def);
    $25 = $5;
   }
   $joint$0 = $25;
   return $joint$0 | 0;
  }
 case 1:
  {
   $7 = __ZN16b2BlockAllocator8AllocateEi($allocator, 228) | 0;
   if (!$7) $26 = 0; else {
    __ZN15b2RevoluteJointC2EPK18b2RevoluteJointDef($7, $def);
    $26 = $7;
   }
   $joint$0 = $26;
   return $joint$0 | 0;
  }
 case 3:
  {
   $1 = __ZN16b2BlockAllocator8AllocateEi($allocator, 176) | 0;
   if (!$1) $23 = 0; else {
    __ZN15b2DistanceJointC2EPK18b2DistanceJointDef($1, $def);
    $23 = $1;
   }
   $joint$0 = $23;
   return $joint$0 | 0;
  }
 case 11:
  {
   $21 = __ZN16b2BlockAllocator8AllocateEi($allocator, 192) | 0;
   if (!$21) $33 = 0; else {
    __ZN12b2MotorJointC2EPK15b2MotorJointDef($21, $def);
    $33 = $21;
   }
   $joint$0 = $33;
   return $joint$0 | 0;
  }
 case 6:
  {
   $11 = __ZN16b2BlockAllocator8AllocateEi($allocator, 276) | 0;
   if (!$11) $28 = 0; else {
    __ZN11b2GearJointC2EPK14b2GearJointDef($11, $def);
    $28 = $11;
   }
   $joint$0 = $28;
   return $joint$0 | 0;
  }
 case 8:
  {
   $15 = __ZN16b2BlockAllocator8AllocateEi($allocator, 208) | 0;
   if (!$15) $30 = 0; else {
    __ZN11b2WeldJointC2EPK14b2WeldJointDef($15, $def);
    $30 = $15;
   }
   $joint$0 = $30;
   return $joint$0 | 0;
  }
 case 9:
  {
   $17 = __ZN16b2BlockAllocator8AllocateEi($allocator, 180) | 0;
   if (!$17) $31 = 0; else {
    __ZN15b2FrictionJointC2EPK18b2FrictionJointDef($17, $def);
    $31 = $17;
   }
   $joint$0 = $31;
   return $joint$0 | 0;
  }
 default:
  ___assert_fail(90768, 84184, 121, 91560);
 } while (0);
 return 0;
}

function _luaL_loadfilex($L, $filename, $mode) {
 $L = $L | 0;
 $filename = $filename | 0;
 $mode = $mode | 0;
 var $$0 = 0, $1 = 0, $10 = 0, $12 = 0, $15 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $26 = 0, $28 = 0, $29 = 0, $32 = 0, $36 = 0, $38 = 0, $39 = 0, $43 = 0, $45 = 0, $5 = 0, $c = 0, $lf = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1088 | 0;
 $vararg_buffer11 = sp + 40 | 0;
 $vararg_buffer6 = sp + 24 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $lf = sp + 56 | 0;
 $c = sp + 52 | 0;
 $1 = (_lua_gettop($L) | 0) + 1 | 0;
 $2 = ($filename | 0) == 0;
 if ($2) {
  _lua_pushlstring($L, 55352, 6) | 0;
  HEAP32[$lf + 4 >> 2] = HEAP32[_stdin >> 2];
 } else {
  HEAP32[$vararg_buffer >> 2] = $filename;
  _lua_pushfstring($L, 55360, $vararg_buffer) | 0;
  $5 = _fopen($filename | 0, 59072) | 0;
  HEAP32[$lf + 4 >> 2] = $5;
  if (!$5) {
   $10 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0;
   $12 = (_lua_tolstring($L, $1, 0) | 0) + 1 | 0;
   HEAP32[$vararg_buffer1 >> 2] = 57184;
   HEAP32[$vararg_buffer1 + 4 >> 2] = $12;
   HEAP32[$vararg_buffer1 + 8 >> 2] = $10;
   _lua_pushfstring($L, 55696, $vararg_buffer1) | 0;
   _lua_rotate($L, $1, -1);
   _lua_settop($L, -2);
   $$0 = 7;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 if (_skipcomment($lf, $c) | 0) {
  $15 = HEAP32[$lf >> 2] | 0;
  HEAP32[$lf >> 2] = $15 + 1;
  HEAP8[$lf + $15 + 8 >> 0] = 10;
 }
 $18 = HEAP32[$c >> 2] | 0;
 do if (($18 | 0) != 27 | $2) $29 = $18; else {
  $20 = $lf + 4 | 0;
  $22 = _freopen($filename | 0, 80904, HEAP32[$20 >> 2] | 0) | 0;
  HEAP32[$20 >> 2] = $22;
  if ($22) {
   _skipcomment($lf, $c) | 0;
   $29 = HEAP32[$c >> 2] | 0;
   break;
  }
  $26 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0;
  $28 = (_lua_tolstring($L, $1, 0) | 0) + 1 | 0;
  HEAP32[$vararg_buffer6 >> 2] = 55368;
  HEAP32[$vararg_buffer6 + 4 >> 2] = $28;
  HEAP32[$vararg_buffer6 + 8 >> 2] = $26;
  _lua_pushfstring($L, 55696, $vararg_buffer6) | 0;
  _lua_rotate($L, $1, -1);
  _lua_settop($L, -2);
  $$0 = 7;
  STACKTOP = sp;
  return $$0 | 0;
 } while (0);
 if (($29 | 0) != -1) {
  $32 = HEAP32[$lf >> 2] | 0;
  HEAP32[$lf >> 2] = $32 + 1;
  HEAP8[$lf + $32 + 8 >> 0] = $29;
 }
 $36 = _lua_load($L, 15, $lf, _lua_tolstring($L, -1, 0) | 0, $mode) | 0;
 $38 = HEAP32[$lf + 4 >> 2] | 0;
 $39 = _ferror($38 | 0) | 0;
 if (!$2) _fclose($38 | 0) | 0;
 if (!$39) {
  _lua_rotate($L, $1, -1);
  _lua_settop($L, -2);
  $$0 = $36;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  _lua_settop($L, $1);
  $43 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0;
  $45 = (_lua_tolstring($L, $1, 0) | 0) + 1 | 0;
  HEAP32[$vararg_buffer11 >> 2] = 56880;
  HEAP32[$vararg_buffer11 + 4 >> 2] = $45;
  HEAP32[$vararg_buffer11 + 8 >> 2] = $43;
  _lua_pushfstring($L, 55696, $vararg_buffer11) | 0;
  _lua_rotate($L, $1, -1);
  _lua_settop($L, -2);
  $$0 = 7;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function __ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT_($this, $callback) {
 $this = $this | 0;
 $callback = $callback | 0;
 var $0 = 0, $1 = 0, $11 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $44 = 0, $46 = 0, $5 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $i$04 = 0, $i1$02 = 0, $i1$1 = 0, $i1$1$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 $1 = $this + 52 | 0;
 HEAP32[$1 >> 2] = 0;
 $2 = $this + 40 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 do if (($3 | 0) > 0) {
  $5 = $this + 32 | 0;
  $6 = $this + 56 | 0;
  $7 = $this + 12 | 0;
  $8 = $this + 4 | 0;
  $55 = $3;
  $i$04 = 0;
  while (1) {
   $11 = HEAP32[(HEAP32[$5 >> 2] | 0) + ($i$04 << 2) >> 2] | 0;
   HEAP32[$6 >> 2] = $11;
   if (($11 | 0) == -1) $20 = $55; else {
    if (($11 | 0) <= -1) {
     label = 6;
     break;
    }
    if ((HEAP32[$7 >> 2] | 0) <= ($11 | 0)) {
     label = 6;
     break;
    }
    __ZNK13b2DynamicTree5QueryI12b2BroadPhaseEEvPT_RK6b2AABB($this, $this, (HEAP32[$8 >> 2] | 0) + ($11 * 36 | 0) | 0);
    $20 = HEAP32[$2 >> 2] | 0;
   }
   $i$04 = $i$04 + 1 | 0;
   if (($i$04 | 0) >= ($20 | 0)) {
    label = 9;
    break;
   } else $55 = $20;
  }
  if ((label | 0) == 6) ___assert_fail(90168, 89592, 164, 87992); else if ((label | 0) == 9) {
   $24 = HEAP32[$1 >> 2] | 0;
   break;
  }
 } else $24 = 0; while (0);
 HEAP32[$2 >> 2] = 0;
 $21 = $this + 44 | 0;
 $22 = HEAP32[$21 >> 2] | 0;
 HEAP32[$0 >> 2] = 26;
 __ZNSt3__16__sortIRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_($22, $22 + ($24 << 3) | 0, $0);
 if ((HEAP32[$1 >> 2] | 0) <= 0) {
  STACKTOP = sp;
  return;
 }
 $27 = $this + 12 | 0;
 $28 = $this + 4 | 0;
 $i1$02 = 0;
 L18 : while (1) {
  $29 = HEAP32[$21 >> 2] | 0;
  $30 = $29 + ($i1$02 << 3) | 0;
  $31 = HEAP32[$30 >> 2] | 0;
  if (($31 | 0) <= -1) {
   label = 14;
   break;
  }
  $33 = HEAP32[$27 >> 2] | 0;
  if (($33 | 0) <= ($31 | 0)) {
   label = 14;
   break;
  }
  $35 = HEAP32[$28 >> 2] | 0;
  $36 = $29 + ($i1$02 << 3) + 4 | 0;
  $37 = HEAP32[$36 >> 2] | 0;
  if (!(($37 | 0) > -1 & ($33 | 0) > ($37 | 0))) {
   label = 16;
   break;
  }
  __ZN16b2ContactManager7AddPairEPvS0_($callback, HEAP32[$35 + ($31 * 36 | 0) + 16 >> 2] | 0, HEAP32[$35 + ($37 * 36 | 0) + 16 >> 2] | 0);
  $44 = HEAP32[$1 >> 2] | 0;
  $i1$1$in = $i1$02;
  while (1) {
   $i1$1 = $i1$1$in + 1 | 0;
   if (($i1$1 | 0) >= ($44 | 0)) {
    label = 21;
    break L18;
   }
   $46 = HEAP32[$21 >> 2] | 0;
   if ((HEAP32[$46 + ($i1$1 << 3) >> 2] | 0) != (HEAP32[$30 >> 2] | 0)) {
    $i1$02 = $i1$1;
    continue L18;
   }
   if ((HEAP32[$46 + ($i1$1 << 3) + 4 >> 2] | 0) == (HEAP32[$36 >> 2] | 0)) $i1$1$in = $i1$1; else {
    $i1$02 = $i1$1;
    continue L18;
   }
  }
 }
 if ((label | 0) == 14) ___assert_fail(90168, 89592, 158, 89672); else if ((label | 0) == 16) ___assert_fail(90168, 89592, 158, 89672); else if ((label | 0) == 21) {
  STACKTOP = sp;
  return;
 }
}

function __ZN15b2DistanceJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $$0 = 0, $$0$i = 0.0, $108 = 0.0, $110 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $129 = 0, $133 = 0.0, $134 = 0.0, $135 = 0, $14 = 0.0, $145 = 0.0, $15 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $21 = 0, $27 = 0.0, $28 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $39 = 0.0, $4 = 0, $44 = 0.0, $47 = 0.0, $5 = 0, $50 = 0.0, $55 = 0.0, $6 = 0, $60 = 0.0, $63 = 0.0, $66 = 0.0, $7 = 0, $71 = 0.0, $72 = 0.0, $76 = 0.0, $78 = 0.0, $8 = 0, $83 = 0.0, $85 = 0.0, $87 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $97 = 0.0;
 if (+HEAPF32[$this + 68 >> 2] > 0.0) {
  $$0 = 1;
  return $$0 | 0;
 }
 $3 = $this + 108 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $data + 24 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = $6 + ($4 * 12 | 0) | 0;
 $8 = $7;
 $14 = +HEAPF32[$8 >> 2];
 $15 = +HEAPF32[$8 + 4 >> 2];
 $17 = +HEAPF32[$6 + ($4 * 12 | 0) + 8 >> 2];
 $18 = $this + 112 | 0;
 $19 = HEAP32[$18 >> 2] | 0;
 $21 = $6 + ($19 * 12 | 0) | 0;
 $27 = +HEAPF32[$21 >> 2];
 $28 = +HEAPF32[$21 + 4 >> 2];
 $30 = +HEAPF32[$6 + ($19 * 12 | 0) + 8 >> 2];
 $31 = +Math_sin(+$17);
 $32 = +Math_cos(+$17);
 $33 = +Math_sin(+$30);
 $34 = +Math_cos(+$30);
 $39 = +HEAPF32[$this + 80 >> 2] - +HEAPF32[$this + 140 >> 2];
 $44 = +HEAPF32[$this + 84 >> 2] - +HEAPF32[$this + 144 >> 2];
 $47 = $32 * $39 - $31 * $44;
 $50 = $31 * $39 + $32 * $44;
 $55 = +HEAPF32[$this + 88 >> 2] - +HEAPF32[$this + 148 >> 2];
 $60 = +HEAPF32[$this + 92 >> 2] - +HEAPF32[$this + 152 >> 2];
 $63 = $34 * $55 - $33 * $60;
 $66 = $33 * $55 + $34 * $60;
 $71 = $27 + $63 - $14 - $47;
 $72 = $28 + $66 - $15 - $50;
 $76 = +Math_sqrt(+($71 * $71 + $72 * $72));
 if ($76 < 1.1920928955078125e-07) {
  $$0$i = 0.0;
  $93 = $71;
  $95 = $72;
 } else {
  $78 = 1.0 / $76;
  $$0$i = $76;
  $93 = $71 * $78;
  $95 = $72 * $78;
 }
 $83 = $$0$i - +HEAPF32[$this + 104 >> 2];
 $85 = $83 < .20000000298023224 ? $83 : .20000000298023224;
 $87 = $85 < -.20000000298023224 ? -.20000000298023224 : $85;
 $91 = -(+HEAPF32[$this + 172 >> 2] * $87);
 $92 = $93 * $91;
 $94 = $95 * $91;
 $97 = +HEAPF32[$this + 156 >> 2];
 $108 = $17 - +HEAPF32[$this + 164 >> 2] * ($47 * $94 - $50 * $92);
 $110 = +HEAPF32[$this + 160 >> 2];
 $121 = $30 + +HEAPF32[$this + 168 >> 2] * ($63 * $94 - $66 * $92);
 $122 = +($14 - $97 * $92);
 $123 = +($15 - $97 * $94);
 $124 = $7;
 HEAPF32[$124 >> 2] = $122;
 HEAPF32[$124 + 4 >> 2] = $123;
 $129 = HEAP32[$5 >> 2] | 0;
 HEAPF32[$129 + ((HEAP32[$3 >> 2] | 0) * 12 | 0) + 8 >> 2] = $108;
 $133 = +($27 + $110 * $92);
 $134 = +($28 + $110 * $94);
 $135 = $129 + ((HEAP32[$18 >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$135 >> 2] = $133;
 HEAPF32[$135 + 4 >> 2] = $134;
 HEAPF32[(HEAP32[$5 >> 2] | 0) + ((HEAP32[$18 >> 2] | 0) * 12 | 0) + 8 >> 2] = $121;
 if ($87 > 0.0) $145 = $87; else $145 = -$87;
 $$0 = $145 < .004999999888241291;
 return $$0 | 0;
}

function _png_check_IHDR($png_ptr, $width, $height, $bit_depth, $color_type, $interlace_type, $compression_type, $filter_type) {
 $png_ptr = $png_ptr | 0;
 $width = $width | 0;
 $height = $height | 0;
 $bit_depth = $bit_depth | 0;
 $color_type = $color_type | 0;
 $interlace_type = $interlace_type | 0;
 $compression_type = $compression_type | 0;
 $filter_type = $filter_type | 0;
 var $22 = 0, $35 = 0, $41 = 0, $error$0 = 0, $error$1 = 0, $error$2 = 0, $error$3 = 0, $error$4 = 0, $error$5 = 0, $error$6 = 0, $error$7 = 0, $error$8 = 0, label = 0;
 do if (!$width) {
  _png_warning($png_ptr, 73032);
  $error$0 = 1;
 } else {
  if (($width | 0) < 0) {
   _png_warning($png_ptr, 73064);
   $error$0 = 1;
   break;
  }
  if (($width + 7 & -8) >>> 0 > 536870904) {
   _png_warning($png_ptr, 73096);
   $error$0 = 1;
   break;
  }
  if ((HEAP32[$png_ptr + 748 >> 2] | 0) >>> 0 < $width >>> 0) {
   _png_warning($png_ptr, 73144);
   $error$0 = 1;
  } else $error$0 = 0;
 } while (0);
 do if (!$height) {
  _png_warning($png_ptr, 73184);
  $error$1 = 1;
 } else {
  if (($height | 0) < 0) {
   _png_warning($png_ptr, 73216);
   $error$1 = 1;
   break;
  }
  if ((HEAP32[$png_ptr + 752 >> 2] | 0) >>> 0 < $height >>> 0) {
   _png_warning($png_ptr, 73248);
   $error$1 = 1;
  } else $error$1 = $error$0;
 } while (0);
 switch ($bit_depth | 0) {
 case 1:
 case 2:
 case 4:
 case 8:
 case 16:
  {
   $error$2 = $error$1;
   break;
  }
 default:
  {
   _png_warning($png_ptr, 73288);
   $error$2 = 1;
  }
 }
 if (($color_type | 0) < 0 | ($color_type | 0) == 1 | ($color_type | 0) == 5 | ($color_type | 0) > 6) {
  _png_warning($png_ptr, 73320);
  $error$3 = 1;
 } else $error$3 = $error$2;
 if (($color_type | 0) == 3 & ($bit_depth | 0) > 8) label = 22; else if (($color_type | 0) == 2 | ($color_type | 0) == 4 | ($color_type | 0) == 6) if (($bit_depth | 0) < 8) label = 22; else $error$4 = $error$3; else $error$4 = $error$3;
 if ((label | 0) == 22) {
  _png_warning($png_ptr, 73352);
  $error$4 = 1;
 }
 if (($interlace_type | 0) > 1) {
  _png_warning($png_ptr, 73408);
  $error$5 = 1;
 } else $error$5 = $error$4;
 if (!$compression_type) $error$6 = $error$5; else {
  _png_warning($png_ptr, 73448);
  $error$6 = 1;
 }
 $22 = $png_ptr + 208 | 0;
 if (HEAP32[$22 >> 2] & 4096) if (HEAP32[$png_ptr + 708 >> 2] | 0) _png_warning($png_ptr, 73488);
 if (!$filter_type) $error$8 = $error$6; else {
  if (($filter_type | 0) == 64 ? (HEAP32[$png_ptr + 708 >> 2] & 4 | 0) != 0 : 0) {
   $35 = HEAP32[$22 >> 2] | 0;
   if (($35 & 4096 | 0) == 0 & ($color_type & -5 | 0) == 2) {
    $41 = $35;
    $error$7 = $error$6;
   } else label = 33;
  } else label = 33;
  if ((label | 0) == 33) {
   _png_warning($png_ptr, 73544);
   $41 = HEAP32[$22 >> 2] | 0;
   $error$7 = 1;
  }
  if (!($41 & 4096)) $error$8 = $error$7; else {
   _png_warning($png_ptr, 73576);
   _png_error($png_ptr, 73608);
  }
 }
 if (($error$8 | 0) == 1) _png_error($png_ptr, 73608); else return;
}

function __ZN16b2ContactManager7CollideEv($this) {
 $this = $this | 0;
 var $1 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $25 = 0, $27 = 0, $3 = 0, $34 = 0, $4 = 0, $49 = 0, $5 = 0, $50 = 0, $56 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $8 = 0, $92 = 0, $c$0$be = 0, $c$01 = 0, label = 0;
 $1 = HEAP32[$this + 60 >> 2] | 0;
 if (!$1) return;
 $3 = $this + 12 | 0;
 $4 = $this + 4 | 0;
 $5 = $this + 72 | 0;
 $6 = $this + 68 | 0;
 $c$01 = $1;
 L4 : while (1) {
  $8 = HEAP32[$c$01 + 48 >> 2] | 0;
  $10 = HEAP32[$c$01 + 52 >> 2] | 0;
  $12 = HEAP32[$c$01 + 56 >> 2] | 0;
  $14 = HEAP32[$c$01 + 60 >> 2] | 0;
  $16 = HEAP32[$8 + 8 >> 2] | 0;
  $18 = HEAP32[$10 + 8 >> 2] | 0;
  $19 = $c$01 + 4 | 0;
  do if (!(HEAP32[$19 >> 2] & 8)) label = 11; else {
   if (!(__ZNK6b2Body13ShouldCollideEPKS_($18, $16) | 0)) {
    $25 = HEAP32[$c$01 + 12 >> 2] | 0;
    __ZN16b2ContactManager7DestroyEP9b2Contact($this, $c$01);
    $c$0$be = $25;
    break;
   }
   $27 = HEAP32[$6 >> 2] | 0;
   if ($27) if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$27 >> 2] | 0) + 8 >> 2] & 31]($27, $8, $10) | 0)) {
    $34 = HEAP32[$c$01 + 12 >> 2] | 0;
    __ZN16b2ContactManager7DestroyEP9b2Contact($this, $c$01);
    $c$0$be = $34;
    break;
   }
   HEAP32[$19 >> 2] = HEAP32[$19 >> 2] & -9;
   label = 11;
  } while (0);
  do if ((label | 0) == 11) {
   label = 0;
   if (!(HEAP16[$16 + 4 >> 1] & 2)) $50 = 0; else $50 = (HEAP32[$16 >> 2] | 0) != 0;
   if (!(HEAP16[$18 + 4 >> 1] & 2)) $49 = 0; else $49 = (HEAP32[$18 >> 2] | 0) != 0;
   if (!($50 | $49)) {
    $c$0$be = HEAP32[$c$01 + 12 >> 2] | 0;
    break;
   }
   $56 = HEAP32[(HEAP32[$8 + 24 >> 2] | 0) + ($12 * 28 | 0) + 24 >> 2] | 0;
   $60 = HEAP32[(HEAP32[$10 + 24 >> 2] | 0) + ($14 * 28 | 0) + 24 >> 2] | 0;
   if (($56 | 0) <= -1) {
    label = 19;
    break L4;
   }
   $62 = HEAP32[$3 >> 2] | 0;
   if (($62 | 0) <= ($56 | 0)) {
    label = 19;
    break L4;
   }
   $64 = HEAP32[$4 >> 2] | 0;
   if (!(($60 | 0) > -1 & ($62 | 0) > ($60 | 0))) {
    label = 21;
    break L4;
   }
   if ((+HEAPF32[$64 + ($60 * 36 | 0) >> 2] - +HEAPF32[$64 + ($56 * 36 | 0) + 8 >> 2] > 0.0 ? 1 : +HEAPF32[$64 + ($60 * 36 | 0) + 4 >> 2] - +HEAPF32[$64 + ($56 * 36 | 0) + 12 >> 2] > 0.0) | +HEAPF32[$64 + ($56 * 36 | 0) >> 2] - +HEAPF32[$64 + ($60 * 36 | 0) + 8 >> 2] > 0.0 | +HEAPF32[$64 + ($56 * 36 | 0) + 4 >> 2] - +HEAPF32[$64 + ($60 * 36 | 0) + 12 >> 2] > 0.0) {
    $92 = HEAP32[$c$01 + 12 >> 2] | 0;
    __ZN16b2ContactManager7DestroyEP9b2Contact($this, $c$01);
    $c$0$be = $92;
    break;
   } else {
    __ZN9b2Contact6UpdateEP17b2ContactListener($c$01, HEAP32[$5 >> 2] | 0);
    $c$0$be = HEAP32[$c$01 + 12 >> 2] | 0;
    break;
   }
  } while (0);
  if (!$c$0$be) {
   label = 25;
   break;
  } else $c$01 = $c$0$be;
 }
 if ((label | 0) == 19) ___assert_fail(90168, 89592, 164, 87992); else if ((label | 0) == 21) ___assert_fail(90168, 89592, 164, 87992); else if ((label | 0) == 25) return;
}

function __ZN7b2World11DestroyBodyEP6b2Body($this, $b) {
 $this = $this | 0;
 $b = $b | 0;
 var $$pre$phi16Z2D = 0, $$pre$phiZ2D = 0, $$pre13 = 0, $0 = 0, $10 = 0, $13 = 0, $18 = 0, $22 = 0, $23 = 0, $25 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $39 = 0, $47 = 0, $48 = 0, $52 = 0, $56 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $ce$02 = 0, $f$01 = 0, $je$06 = 0, $je$06$looptemp = 0, $ce$02$looptemp = 0, $f$01$looptemp = 0;
 $0 = $this + 102960 | 0;
 if ((HEAP32[$0 >> 2] | 0) <= 0) ___assert_fail(89344, 89272, 133, 89360);
 if (HEAP32[$this + 102868 >> 2] & 2) ___assert_fail(89248, 89272, 134, 89360);
 $7 = $b + 108 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 if ($8) {
  $10 = $this + 102980 | 0;
  $je$06 = $8;
  do {
   $je$06$looptemp = $je$06;
   $je$06 = HEAP32[$je$06 + 12 >> 2] | 0;
   $13 = HEAP32[$10 >> 2] | 0;
   if (!$13) $$pre$phi16Z2D = $je$06$looptemp + 4 | 0; else {
    $18 = $je$06$looptemp + 4 | 0;
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[$13 >> 2] | 0) + 8 >> 2] & 127]($13, HEAP32[$18 >> 2] | 0);
    $$pre$phi16Z2D = $18;
   }
   __ZN7b2World12DestroyJointEP7b2Joint($this, HEAP32[$$pre$phi16Z2D >> 2] | 0);
   HEAP32[$7 >> 2] = $je$06;
  } while (($je$06 | 0) != 0);
 }
 HEAP32[$7 >> 2] = 0;
 $22 = $b + 112 | 0;
 $23 = HEAP32[$22 >> 2] | 0;
 if ($23) {
  $25 = $this + 102872 | 0;
  $ce$02 = $23;
  do {
   $ce$02$looptemp = $ce$02;
   $ce$02 = HEAP32[$ce$02 + 12 >> 2] | 0;
   __ZN16b2ContactManager7DestroyEP9b2Contact($25, HEAP32[$ce$02$looptemp + 4 >> 2] | 0);
  } while (($ce$02 | 0) != 0);
 }
 HEAP32[$22 >> 2] = 0;
 $31 = $b + 100 | 0;
 $32 = HEAP32[$31 >> 2] | 0;
 if (!$32) $$pre$phiZ2D = $b + 104 | 0; else {
  $34 = $this + 102980 | 0;
  $35 = $this + 102872 | 0;
  $36 = $b + 104 | 0;
  $f$01 = $32;
  do {
   $f$01$looptemp = $f$01;
   $f$01 = HEAP32[$f$01 + 4 >> 2] | 0;
   $39 = HEAP32[$34 >> 2] | 0;
   if ($39) FUNCTION_TABLE_vii[HEAP32[(HEAP32[$39 >> 2] | 0) + 12 >> 2] & 127]($39, $f$01$looptemp);
   __ZN9b2Fixture14DestroyProxiesEP12b2BroadPhase($f$01$looptemp, $35);
   __ZN9b2Fixture7DestroyEP16b2BlockAllocator($f$01$looptemp, $this);
   __ZN16b2BlockAllocator4FreeEPvi($this, $f$01$looptemp, 44);
   HEAP32[$31 >> 2] = $f$01;
   HEAP32[$36 >> 2] = (HEAP32[$36 >> 2] | 0) + -1;
  } while (($f$01 | 0) != 0);
  $$pre$phiZ2D = $36;
 }
 HEAP32[$31 >> 2] = 0;
 HEAP32[$$pre$phiZ2D >> 2] = 0;
 $47 = $b + 92 | 0;
 $48 = HEAP32[$47 >> 2] | 0;
 $$pre13 = $b + 96 | 0;
 if ($48) HEAP32[$48 + 96 >> 2] = HEAP32[$$pre13 >> 2];
 $52 = HEAP32[$$pre13 >> 2] | 0;
 if ($52) HEAP32[$52 + 92 >> 2] = HEAP32[$47 >> 2];
 $56 = $this + 102952 | 0;
 if ((HEAP32[$56 >> 2] | 0) != ($b | 0)) {
  $60 = HEAP32[$0 >> 2] | 0;
  $61 = $60 + -1 | 0;
  HEAP32[$0 >> 2] = $61;
  __ZN16b2BlockAllocator4FreeEPvi($this, $b, 152);
  return;
 }
 HEAP32[$56 >> 2] = HEAP32[$$pre13 >> 2];
 $60 = HEAP32[$0 >> 2] | 0;
 $61 = $60 + -1 | 0;
 HEAP32[$0 >> 2] = $61;
 __ZN16b2BlockAllocator4FreeEPvi($this, $b, 152);
 return;
}

function _png_check_fp_number($string, $size, $statep, $whereami) {
 $string = $string | 0;
 $size = $size | 0;
 $statep = $statep | 0;
 $whereami = $whereami | 0;
 var $0 = 0, $1 = 0, $40 = 0, $i$0$lcssa = 0, $i$02 = 0, $state$0$lcssa = 0, $state$01 = 0, $state$1 = 0, $state$2 = 0, $type$0 = 0;
 $0 = HEAP32[$statep >> 2] | 0;
 $1 = HEAP32[$whereami >> 2] | 0;
 L1 : do if ($1 >>> 0 < $size >>> 0) {
  $i$02 = $1;
  $state$01 = $0;
  while (1) {
   switch (HEAP8[$string + $i$02 >> 0] | 0) {
   case 46:
    {
     $type$0 = 16;
     break;
    }
   case 43:
    {
     $type$0 = 4;
     break;
    }
   case 57:
   case 56:
   case 55:
   case 54:
   case 53:
   case 52:
   case 51:
   case 50:
   case 49:
    {
     $type$0 = 264;
     break;
    }
   case 45:
    {
     $type$0 = 132;
     break;
    }
   case 101:
   case 69:
    {
     $type$0 = 32;
     break;
    }
   case 48:
    {
     $type$0 = 8;
     break;
    }
   default:
    {
     $i$0$lcssa = $i$02;
     $state$0$lcssa = $state$01;
     break L1;
    }
   }
   L11 : do switch ($type$0 & 60 | $state$01 & 3 | 0) {
   case 6:
    {
     if ($state$01 & 60) {
      $i$0$lcssa = $i$02;
      $state$0$lcssa = $state$01;
      break L1;
     }
     $state$2 = $state$01 | 4;
     break;
    }
   case 8:
    {
     if (!($state$01 & 16)) $state$1 = $state$01; else $state$1 = $state$01 & 448 | 17;
     $state$2 = $type$0 | $state$1 | 64;
     break;
    }
   case 4:
    {
     if ($state$01 & 60) {
      $i$0$lcssa = $i$02;
      $state$0$lcssa = $state$01;
      break L1;
     }
     $state$2 = $type$0 | $state$01;
     break;
    }
   case 32:
    {
     if (!($state$01 & 8)) {
      $i$0$lcssa = $i$02;
      $state$0$lcssa = $state$01;
      break L1;
     }
     $state$2 = $state$01 & 448 | 2;
     break;
    }
   case 9:
    {
     $state$2 = $state$01 | $type$0 | 64;
     break;
    }
   case 16:
    {
     if ($state$01 & 16) {
      $i$0$lcssa = $i$02;
      $state$0$lcssa = $state$01;
      break L1;
     }
     if (!($state$01 & 8)) {
      $state$2 = $state$01 & 448 | $type$0 | 1;
      break L11;
     } else {
      $state$2 = $type$0 | $state$01;
      break L11;
     }
     break;
    }
   case 33:
    {
     if (!($state$01 & 8)) {
      $i$0$lcssa = $i$02;
      $state$0$lcssa = $state$01;
      break L1;
     }
     $state$2 = $state$01 & 448 | 2;
     break;
    }
   case 10:
    {
     $state$2 = $state$01 | 72;
     break;
    }
   default:
    {
     $i$0$lcssa = $i$02;
     $state$0$lcssa = $state$01;
     break L1;
    }
   } while (0);
   $40 = $i$02 + 1 | 0;
   if ($40 >>> 0 < $size >>> 0) {
    $i$02 = $40;
    $state$01 = $state$2;
   } else {
    $i$0$lcssa = $40;
    $state$0$lcssa = $state$2;
    break L1;
   }
  }
 } else {
  $i$0$lcssa = $1;
  $state$0$lcssa = $0;
 } while (0);
 HEAP32[$statep >> 2] = $state$0$lcssa;
 HEAP32[$whereami >> 2] = $i$0$lcssa;
 return $state$0$lcssa >>> 3 & 1 | 0;
}

function __Z13mlua_new_bodyP9lua_State($L) {
 $L = $L | 0;
 var $10 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $22 = 0, $28 = 0, $37 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $7 = 0.0, $9 = 0.0, $def = 0, $i$02 = 0, $i1$01 = 0, $index$0 = 0, $index$13 = 0, $x$0 = 0.0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $def = sp + 4 | 0;
 if (!$L) ___assert_fail(23976, 2472, 443, 3112);
 if (!(HEAP32[632] | 0)) _luaL_error($L, 3128, sp) | 0;
 $4 = (_lua_toboolean($L, 1) | 0) == 0;
 if (!(_lua_isnumber($L, 2) | 0)) {
  $index$0 = 2;
  $x$0 = 0.0;
  $y$0 = 0.0;
 } else {
  $7 = +_luaL_checknumber($L, 2);
  $9 = $7 / +HEAPF32[616];
  $10 = +_luaL_checknumber($L, 3);
  $index$0 = 4;
  $x$0 = $9;
  $y$0 = $10 / +HEAPF32[616];
 }
 $14 = (_lua_gettop($L) | 0) - $index$0 | 0;
 $15 = $14 + 1 | 0;
 $16 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($15 << 2) | 0) + 15 & -16) | 0;
 $17 = ($14 | 0) > -1;
 L10 : do if ($17) {
  $i$02 = 0;
  $index$13 = $index$0;
  while (1) {
   $22 = HEAP32[(__Z9pop_shapeP9lua_Statei($L, $index$13) | 0) >> 2] | 0;
   HEAP32[$16 + ($i$02 << 2) >> 2] = $22;
   if (!$22) {
    label = 10;
    break;
   }
   $i$02 = $i$02 + 1 | 0;
   if (!(HEAP32[$22 >> 2] | 0)) {
    label = 12;
    break;
   }
   if (($i$02 | 0) >= ($15 | 0)) break L10; else $index$13 = $index$13 + 1 | 0;
  }
  if ((label | 0) == 10) ___assert_fail(3184, 2472, 461, 3112); else if ((label | 0) == 12) ___assert_fail(3200, 2472, 462, 3112);
 } while (0);
 HEAP32[$def + 44 >> 2] = 0;
 $28 = $def + 4 | 0;
 HEAP32[$28 + 0 >> 2] = 0;
 HEAP32[$28 + 4 >> 2] = 0;
 HEAP32[$28 + 8 >> 2] = 0;
 HEAP32[$28 + 12 >> 2] = 0;
 HEAP32[$28 + 16 >> 2] = 0;
 HEAP32[$28 + 20 >> 2] = 0;
 HEAP32[$28 + 24 >> 2] = 0;
 HEAP32[$28 + 28 >> 2] = 0;
 HEAP8[$def + 36 >> 0] = 1;
 HEAP8[$def + 37 >> 0] = 1;
 HEAP8[$def + 38 >> 0] = 0;
 HEAP8[$def + 39 >> 0] = 0;
 HEAP32[$def >> 2] = 0;
 HEAP8[$def + 40 >> 0] = 1;
 HEAPF32[$def + 48 >> 2] = 1.0;
 if (!$4) HEAP32[$def >> 2] = 2;
 HEAPF32[$28 >> 2] = $x$0;
 HEAPF32[$def + 8 >> 2] = $y$0;
 $37 = __ZN7b2World10CreateBodyEPK9b2BodyDef(HEAP32[632] | 0, $def) | 0;
 if ($17) $i1$01 = 0; else {
  $42 = __Znwj(16) | 0;
  HEAP32[$42 >> 2] = $37;
  $43 = $42 + 12 | 0;
  HEAP32[$43 >> 2] = 0;
  $44 = $42 + 4 | 0;
  HEAP32[$44 >> 2] = 0;
  $45 = $42 + 8 | 0;
  HEAP8[$45 >> 0] = 0;
  $46 = $37 + 148 | 0;
  HEAP32[$46 >> 2] = $42;
  __Z9push_bodyP9lua_StateP4Body($L, $42);
  STACKTOP = sp;
  return 1;
 }
 do {
  __ZN6b2Body13CreateFixtureEPK12b2FixtureDef($37, HEAP32[$16 + ($i1$01 << 2) >> 2] | 0) | 0;
  $i1$01 = $i1$01 + 1 | 0;
 } while (($i1$01 | 0) < ($15 | 0));
 $42 = __Znwj(16) | 0;
 HEAP32[$42 >> 2] = $37;
 $43 = $42 + 12 | 0;
 HEAP32[$43 >> 2] = 0;
 $44 = $42 + 4 | 0;
 HEAP32[$44 >> 2] = 0;
 $45 = $42 + 8 | 0;
 HEAP8[$45 >> 0] = 0;
 $46 = $37 + 148 | 0;
 HEAP32[$46 >> 2] = $42;
 __Z9push_bodyP9lua_StateP4Body($L, $42);
 STACKTOP = sp;
 return 1;
}

function _png_format_buffer($png_ptr$0$44$val, $buffer, $error_message) {
 $png_ptr$0$44$val = $png_ptr$0$44$val | 0;
 $buffer = $buffer | 0;
 $error_message = $error_message | 0;
 var $0 = 0, $13 = 0, $14 = 0, $23 = 0, $26 = 0, $48 = 0, $49 = 0, $70 = 0, $iin$04 = 0, $iout$0$be = 0, $iout$0$be$1 = 0, $iout$0$be$2 = 0, $iout$0$be$3 = 0, $iout$1$lcssa = 0, $iout$13 = 0;
 $0 = $png_ptr$0$44$val >>> 24;
 if (($0 + -65 | 0) >>> 0 > 57 | ($0 + -91 | 0) >>> 0 < 6) {
  HEAP8[$buffer >> 0] = 91;
  HEAP8[$buffer + 1 >> 0] = HEAP8[107760 + ($png_ptr$0$44$val >>> 28) >> 0] | 0;
  HEAP8[$buffer + 2 >> 0] = HEAP8[107760 + ($0 & 15) >> 0] | 0;
  HEAP8[$buffer + 3 >> 0] = 93;
  $iout$0$be = 4;
 } else {
  HEAP8[$buffer >> 0] = $0;
  $iout$0$be = 1;
 }
 $13 = $png_ptr$0$44$val >>> 16;
 $14 = $13 & 255;
 if (($14 + -65 | 0) >>> 0 > 57 | ($14 + -91 | 0) >>> 0 < 6) {
  HEAP8[$buffer + $iout$0$be >> 0] = 91;
  HEAP8[$buffer + ($iout$0$be + 1) >> 0] = HEAP8[107760 + ($png_ptr$0$44$val >>> 20 & 15) >> 0] | 0;
  HEAP8[$buffer + ($iout$0$be | 2) >> 0] = HEAP8[107760 + ($13 & 15) >> 0] | 0;
  HEAP8[$buffer + ($iout$0$be + 3) >> 0] = 93;
  $iout$0$be$1 = $iout$0$be + 4 | 0;
 } else {
  HEAP8[$buffer + $iout$0$be >> 0] = $13;
  $iout$0$be$1 = $iout$0$be + 1 | 0;
 }
 $48 = $png_ptr$0$44$val >>> 8;
 $49 = $48 & 255;
 if (($49 + -65 | 0) >>> 0 > 57 | ($49 + -91 | 0) >>> 0 < 6) {
  HEAP8[$buffer + $iout$0$be$1 >> 0] = 91;
  HEAP8[$buffer + ($iout$0$be$1 + 1) >> 0] = HEAP8[107760 + ($png_ptr$0$44$val >>> 12 & 15) >> 0] | 0;
  HEAP8[$buffer + ($iout$0$be$1 + 2) >> 0] = HEAP8[107760 + ($48 & 15) >> 0] | 0;
  HEAP8[$buffer + ($iout$0$be$1 + 3) >> 0] = 93;
  $iout$0$be$2 = $iout$0$be$1 + 4 | 0;
 } else {
  HEAP8[$buffer + $iout$0$be$1 >> 0] = $48;
  $iout$0$be$2 = $iout$0$be$1 + 1 | 0;
 }
 $70 = $png_ptr$0$44$val & 255;
 if (($70 + -65 | 0) >>> 0 > 57 | ($70 + -91 | 0) >>> 0 < 6) {
  HEAP8[$buffer + $iout$0$be$2 >> 0] = 91;
  HEAP8[$buffer + ($iout$0$be$2 + 1) >> 0] = HEAP8[107760 + ($png_ptr$0$44$val >>> 4 & 15) >> 0] | 0;
  HEAP8[$buffer + ($iout$0$be$2 + 2) >> 0] = HEAP8[107760 + ($png_ptr$0$44$val & 15) >> 0] | 0;
  HEAP8[$buffer + ($iout$0$be$2 + 3) >> 0] = 93;
  $iout$0$be$3 = $iout$0$be$2 + 4 | 0;
 } else {
  HEAP8[$buffer + $iout$0$be$2 >> 0] = $png_ptr$0$44$val;
  $iout$0$be$3 = $iout$0$be$2 + 1 | 0;
 }
 if (!$error_message) {
  HEAP8[$buffer + $iout$0$be$3 >> 0] = 0;
  return;
 }
 HEAP8[$buffer + $iout$0$be$3 >> 0] = 58;
 HEAP8[$buffer + ($iout$0$be$3 + 1) >> 0] = 32;
 $iin$04 = 0;
 $iout$13 = $iout$0$be$3 + 2 | 0;
 while (1) {
  $23 = HEAP8[$error_message + $iin$04 >> 0] | 0;
  if (!($23 << 24 >> 24)) {
   $iout$1$lcssa = $iout$13;
   break;
  }
  $iin$04 = $iin$04 + 1 | 0;
  $26 = $iout$13 + 1 | 0;
  HEAP8[$buffer + $iout$13 >> 0] = $23;
  if (($iin$04 | 0) >= 195) {
   $iout$1$lcssa = $26;
   break;
  } else $iout$13 = $26;
 }
 HEAP8[$buffer + $iout$1$lcssa >> 0] = 0;
 return;
}

function _mz_zip_reader_init_mem($pZip, $pMem, $size, $flags) {
 $pZip = $pZip | 0;
 $pMem = $pMem | 0;
 $size = $size | 0;
 $flags = $flags | 0;
 var $$0 = 0, $$not = 0, $1 = 0, $10 = 0, $13 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $25 = 0, $35 = 0, $39 = 0, $4 = 0, $44 = 0, $46 = 0, $48 = 0, $49 = 0, $7 = 0, $8 = 0, dest = 0, stop = 0;
 if (!$pZip) {
  $$0 = 0;
  return $$0 | 0;
 }
 $1 = $pZip + 56 | 0;
 if (HEAP32[$1 >> 2] | 0) {
  $$0 = 0;
  return $$0 | 0;
 }
 $4 = $pZip + 20 | 0;
 if (HEAP32[$4 >> 2] | 0) {
  $$0 = 0;
  return $$0 | 0;
 }
 $7 = $pZip + 28 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 if (!$8) {
  HEAP32[$7 >> 2] = 23;
  $18 = 23;
 } else $18 = $8;
 $10 = $pZip + 32 | 0;
 if (!(HEAP32[$10 >> 2] | 0)) HEAP32[$10 >> 2] = 95;
 $13 = $pZip + 36 | 0;
 if (!(HEAP32[$13 >> 2] | 0)) HEAP32[$13 >> 2] = 5;
 HEAP32[$4 >> 2] = 1;
 $16 = $pZip + 40 | 0;
 HEAP32[$pZip + 0 >> 2] = 0;
 HEAP32[$pZip + 4 >> 2] = 0;
 HEAP32[$pZip + 8 >> 2] = 0;
 HEAP32[$pZip + 12 >> 2] = 0;
 HEAP32[$pZip + 16 >> 2] = 0;
 $19 = FUNCTION_TABLE_iiii[$18 & 31](HEAP32[$16 >> 2] | 0, 1, 64) | 0;
 HEAP32[$1 >> 2] = $19;
 if (!$19) {
  $$0 = 0;
  return $$0 | 0;
 }
 dest = $19 + 0 | 0;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $21 = HEAP32[$1 >> 2] | 0;
 HEAP32[$21 + 12 >> 2] = 1;
 HEAP32[$21 + 28 >> 2] = 4;
 HEAP32[$21 + 44 >> 2] = 4;
 $25 = $pZip;
 HEAP32[$25 >> 2] = $size;
 HEAP32[$25 + 4 >> 2] = 0;
 HEAP32[$pZip + 44 >> 2] = 12;
 HEAP32[$pZip + 52 >> 2] = $pZip;
 HEAP32[$21 + 52 >> 2] = $pMem;
 HEAP32[(HEAP32[$1 >> 2] | 0) + 56 >> 2] = $size;
 $$not = (_mz_zip_reader_read_central_dir($pZip, $flags) | 0) != 0;
 if ($$not) {
  $$0 = $$not & 1;
  return $$0 | 0;
 }
 $35 = HEAP32[$1 >> 2] | 0;
 if (!$35) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$7 >> 2] | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $39 = HEAP32[$10 >> 2] | 0;
 if (!$39) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$4 >> 2] | 0) != 1) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP32[$1 >> 2] = 0;
 FUNCTION_TABLE_vii[$39 & 127](HEAP32[$16 >> 2] | 0, HEAP32[$35 >> 2] | 0);
 HEAP32[$35 + 0 >> 2] = 0;
 HEAP32[$35 + 4 >> 2] = 0;
 HEAP32[$35 + 8 >> 2] = 0;
 HEAP32[$35 + 12 >> 2] = 0;
 $44 = $35 + 16 | 0;
 FUNCTION_TABLE_vii[HEAP32[$10 >> 2] & 127](HEAP32[$16 >> 2] | 0, HEAP32[$44 >> 2] | 0);
 HEAP32[$44 + 0 >> 2] = 0;
 HEAP32[$44 + 4 >> 2] = 0;
 HEAP32[$44 + 8 >> 2] = 0;
 HEAP32[$44 + 12 >> 2] = 0;
 $46 = $35 + 32 | 0;
 FUNCTION_TABLE_vii[HEAP32[$10 >> 2] & 127](HEAP32[$16 >> 2] | 0, HEAP32[$46 >> 2] | 0);
 HEAP32[$46 + 0 >> 2] = 0;
 HEAP32[$46 + 4 >> 2] = 0;
 HEAP32[$46 + 8 >> 2] = 0;
 HEAP32[$46 + 12 >> 2] = 0;
 $48 = $35 + 48 | 0;
 $49 = HEAP32[$48 >> 2] | 0;
 if ($49) {
  _fclose($49 | 0) | 0;
  HEAP32[$48 >> 2] = 0;
 }
 FUNCTION_TABLE_vii[HEAP32[$10 >> 2] & 127](HEAP32[$16 >> 2] | 0, $35);
 HEAP32[$4 >> 2] = 0;
 $$0 = 0;
 return $$0 | 0;
}

function _utflen($L) {
 $L = $L | 0;
 var $$0 = 0, $$0$i = 0, $$0$i2 = 0, $0 = 0, $1 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $29 = 0, $32 = 0, $37 = 0, $38 = 0, $44 = 0, $54 = 0, $55 = 0, $8 = 0, $9 = 0, $c$0$lcssa$i = 0, $c$04$i = 0, $count$0$lcssa$i = 0, $count$06$i = 0, $len = 0, $n$0$lcssa = 0, $n$013 = 0, $posi$0 = 0, $posi$1 = 0, $posi$214 = 0, $res$0$lcssa$i = 0, $res$05$i = 0, $s$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $len = sp;
 $0 = _luaL_checklstring($L, 1, $len) | 0;
 $1 = _luaL_optinteger($L, 2, 1) | 0;
 $2 = HEAP32[$len >> 2] | 0;
 if (($1 | 0) > -1) $$0$i = $1; else if ($2 >>> 0 < (0 - $1 | 0) >>> 0) $$0$i = 0; else $$0$i = $1 + 1 + $2 | 0;
 $8 = _luaL_optinteger($L, 3, -1) | 0;
 $9 = HEAP32[$len >> 2] | 0;
 if (($8 | 0) > -1) $$0$i2 = $8; else if ($9 >>> 0 < (0 - $8 | 0) >>> 0) $$0$i2 = 0; else $$0$i2 = $8 + 1 + $9 | 0;
 if (($$0$i | 0) > 0) {
  $16 = $$0$i + -1 | 0;
  if (($16 | 0) > ($9 | 0)) {
   $posi$0 = $16;
   label = 9;
  } else {
   $20 = $9;
   $posi$1 = $16;
  }
 } else {
  $posi$0 = $$0$i;
  label = 9;
 }
 if ((label | 0) == 9) {
  _luaL_argerror($L, 2, 63752) | 0;
  $20 = HEAP32[$len >> 2] | 0;
  $posi$1 = $posi$0;
 }
 $18 = $$0$i2 + -1 | 0;
 if (($$0$i2 | 0) > ($20 | 0)) _luaL_argerror($L, 3, 63784) | 0;
 L17 : do if (($posi$1 | 0) > ($18 | 0)) $n$0$lcssa = 0; else {
  $22 = $0;
  $n$013 = 0;
  $posi$214 = $posi$1;
  L19 : while (1) {
   $23 = $0 + $posi$214 | 0;
   $24 = HEAP8[$23 >> 0] | 0;
   $25 = $24 & 255;
   if ($24 << 24 >> 24 > -1) $s$0$i = $23; else {
    if (!($25 & 64)) {
     $c$0$lcssa$i = $25;
     $count$0$lcssa$i = 0;
     $res$0$lcssa$i = 0;
    } else {
     $c$04$i = $25;
     $count$06$i = 0;
     $res$05$i = 0;
     while (1) {
      $29 = $count$06$i + 1 | 0;
      $32 = HEAPU8[$0 + ($29 + $posi$214) >> 0] | 0;
      if (($32 & 192 | 0) != 128) break L19;
      $37 = $32 & 63 | $res$05$i << 6;
      $38 = $c$04$i << 1;
      if (!($38 & 64)) {
       $c$0$lcssa$i = $38;
       $count$0$lcssa$i = $29;
       $res$0$lcssa$i = $37;
       break;
      } else {
       $c$04$i = $38;
       $count$06$i = $29;
       $res$05$i = $37;
      }
     }
    }
    $44 = ($c$0$lcssa$i & 127) << $count$0$lcssa$i * 5 | $res$0$lcssa$i;
    if (($count$0$lcssa$i | 0) > 3 | $44 >>> 0 > 1114111) break;
    if ($44 >>> 0 <= (HEAP32[63736 + ($count$0$lcssa$i << 2) >> 2] | 0) >>> 0) break;
    $s$0$i = $0 + ($count$0$lcssa$i + $posi$214) | 0;
   }
   $54 = $s$0$i + 1 - $22 | 0;
   $55 = $n$013 + 1 | 0;
   if (($54 | 0) > ($18 | 0)) {
    $n$0$lcssa = $55;
    break L17;
   } else {
    $n$013 = $55;
    $posi$214 = $54;
   }
  }
  _lua_pushnil($L);
  _lua_pushinteger($L, $posi$214 + 1 | 0);
  $$0 = 2;
  STACKTOP = sp;
  return $$0 | 0;
 } while (0);
 _lua_pushinteger($L, $n$0$lcssa);
 $$0 = 1;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNK13b2DynamicTree5QueryI12b2BroadPhaseEEvPT_RK6b2AABB($this, $callback, $aabb) {
 $this = $this | 0;
 $callback = $callback | 0;
 $aabb = $aabb | 0;
 var $$be = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $41 = 0, $49 = 0, $5 = 0, $55 = 0, $58 = 0, $59 = 0, $64 = 0, $7 = 0, $73 = 0, $75 = 0, $8 = 0, $stack = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 $stack = sp;
 $0 = $stack + 4 | 0;
 HEAP32[$stack >> 2] = $0;
 $1 = $stack + 1028 | 0;
 HEAP32[$1 >> 2] = 0;
 $2 = $stack + 1032 | 0;
 HEAP32[$2 >> 2] = 256;
 $5 = HEAP32[$stack >> 2] | 0;
 HEAP32[$5 + (HEAP32[$1 >> 2] << 2) >> 2] = HEAP32[$this >> 2];
 $7 = HEAP32[$1 >> 2] | 0;
 $8 = $7 + 1 | 0;
 HEAP32[$1 >> 2] = $8;
 L1 : do if (($7 | 0) > -1) {
  $10 = $this + 4 | 0;
  $11 = $aabb + 4 | 0;
  $12 = $aabb + 8 | 0;
  $13 = $aabb + 12 | 0;
  $15 = $8;
  $17 = $5;
  while (1) {
   $14 = $15 + -1 | 0;
   HEAP32[$1 >> 2] = $14;
   $18 = HEAP32[$17 + ($14 << 2) >> 2] | 0;
   do if (($18 | 0) == -1) $$be = $14; else {
    $20 = HEAP32[$10 >> 2] | 0;
    if ((+HEAPF32[$aabb >> 2] - +HEAPF32[$20 + ($18 * 36 | 0) + 8 >> 2] > 0.0 ? 1 : +HEAPF32[$11 >> 2] - +HEAPF32[$20 + ($18 * 36 | 0) + 12 >> 2] > 0.0) | +HEAPF32[$20 + ($18 * 36 | 0) >> 2] - +HEAPF32[$12 >> 2] > 0.0 | +HEAPF32[$20 + ($18 * 36 | 0) + 4 >> 2] - +HEAPF32[$13 >> 2] > 0.0) $$be = $14; else {
     $41 = $20 + ($18 * 36 | 0) + 24 | 0;
     if ((HEAP32[$41 >> 2] | 0) == -1) {
      if (!(__ZN12b2BroadPhase13QueryCallbackEi($callback, $18) | 0)) break L1;
      $$be = HEAP32[$1 >> 2] | 0;
      break;
     }
     if (($14 | 0) == (HEAP32[$2 >> 2] | 0)) {
      HEAP32[$2 >> 2] = $14 << 1;
      $49 = __Z7b2Alloci($14 << 3) | 0;
      HEAP32[$stack >> 2] = $49;
      _memcpy($49 | 0, $17 | 0, HEAP32[$1 >> 2] << 2 | 0) | 0;
      if (($17 | 0) != ($0 | 0)) __Z6b2FreePv($17);
     }
     $55 = HEAP32[$stack >> 2] | 0;
     HEAP32[$55 + (HEAP32[$1 >> 2] << 2) >> 2] = HEAP32[$41 >> 2];
     $58 = (HEAP32[$1 >> 2] | 0) + 1 | 0;
     HEAP32[$1 >> 2] = $58;
     $59 = $20 + ($18 * 36 | 0) + 28 | 0;
     if (($58 | 0) == (HEAP32[$2 >> 2] | 0)) {
      HEAP32[$2 >> 2] = $58 << 1;
      $64 = __Z7b2Alloci($58 << 3) | 0;
      HEAP32[$stack >> 2] = $64;
      _memcpy($64 | 0, $55 | 0, HEAP32[$1 >> 2] << 2 | 0) | 0;
      if (($55 | 0) != ($0 | 0)) __Z6b2FreePv($55);
     }
     HEAP32[(HEAP32[$stack >> 2] | 0) + (HEAP32[$1 >> 2] << 2) >> 2] = HEAP32[$59 >> 2];
     $73 = (HEAP32[$1 >> 2] | 0) + 1 | 0;
     HEAP32[$1 >> 2] = $73;
     $$be = $73;
    }
   } while (0);
   if (($$be | 0) <= 0) break L1;
   $15 = $$be;
   $17 = HEAP32[$stack >> 2] | 0;
  }
 } while (0);
 $75 = HEAP32[$stack >> 2] | 0;
 if (($75 | 0) == ($0 | 0)) {
  STACKTOP = sp;
  return;
 }
 __Z6b2FreePv($75);
 HEAP32[$stack >> 2] = 0;
 STACKTOP = sp;
 return;
}

function _constructor($ls, $t) {
 $ls = $ls | 0;
 $t = $t | 0;
 var $0 = 0, $1 = 0, $16 = 0, $29 = 0, $3 = 0, $4 = 0, $40 = 0, $43 = 0, $45 = 0, $5 = 0, $56 = 0, $6 = 0, $62 = 0, $66 = 0, $7 = 0, $76 = 0, $8 = 0, $cc = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $cc = sp;
 $0 = $ls + 28 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $3 = HEAP32[$ls + 4 >> 2] | 0;
 $4 = _luaK_codeABC($1, 11, 0, 0, 0) | 0;
 $5 = $cc + 28 | 0;
 HEAP32[$5 >> 2] = 0;
 $6 = $cc + 20 | 0;
 HEAP32[$6 >> 2] = 0;
 $7 = $cc + 24 | 0;
 HEAP32[$7 >> 2] = 0;
 $8 = $cc + 16 | 0;
 HEAP32[$8 >> 2] = $t;
 HEAP32[$t + 8 >> 2] = -1;
 HEAP32[$t + 12 >> 2] = -1;
 HEAP32[$t >> 2] = 12;
 HEAP32[$t + 4 >> 2] = $4;
 HEAP32[$cc + 8 >> 2] = -1;
 HEAP32[$cc + 12 >> 2] = -1;
 HEAP32[$cc >> 2] = 0;
 HEAP32[$cc + 4 >> 2] = 0;
 _luaK_exp2nextreg(HEAP32[$0 >> 2] | 0, $t);
 $16 = $ls + 12 | 0;
 if ((HEAP32[$16 >> 2] | 0) != 123) _error_expected($ls, 123);
 _luaX_next($ls);
 L4 : do if ((HEAP32[$16 >> 2] | 0) != 125) do {
  if (HEAP32[$cc >> 2] | 0) {
   _luaK_exp2nextreg($1, $cc);
   HEAP32[$cc >> 2] = 0;
   if ((HEAP32[$5 >> 2] | 0) == 50) {
    _luaK_setlist($1, HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2] | 0, HEAP32[$7 >> 2] | 0, 50);
    HEAP32[$5 >> 2] = 0;
   }
  }
  $29 = HEAP32[$16 >> 2] | 0;
  do if (($29 | 0) == 292) if ((_luaX_lookahead($ls) | 0) == 61) {
   _recfield($ls, $cc);
   break;
  } else {
   _subexpr($ls, $cc, 0) | 0;
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1;
   HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1;
   break;
  } else if (($29 | 0) == 91) _recfield($ls, $cc); else {
   _subexpr($ls, $cc, 0) | 0;
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1;
   HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1;
  } while (0);
  $40 = HEAP32[$16 >> 2] | 0;
  if (($40 | 0) == 59) _luaX_next($ls); else if (($40 | 0) == 44) _luaX_next($ls); else break L4;
 } while ((HEAP32[$16 >> 2] | 0) != 125); while (0);
 _check_match($ls, 125, 123, $3);
 $43 = HEAP32[$5 >> 2] | 0;
 do if ($43) {
  $45 = HEAP32[$cc >> 2] | 0;
  if (!$45) $56 = $43; else if (($45 | 0) == 14 | ($45 | 0) == 13) {
   _luaK_setreturns($1, $cc, -1);
   _luaK_setlist($1, HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2] | 0, HEAP32[$7 >> 2] | 0, -1);
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1;
   break;
  } else {
   _luaK_exp2nextreg($1, $cc);
   $56 = HEAP32[$5 >> 2] | 0;
  }
  _luaK_setlist($1, HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2] | 0, HEAP32[$7 >> 2] | 0, $56);
 } while (0);
 $62 = HEAP32[(HEAP32[(HEAP32[$1 >> 2] | 0) + 48 >> 2] | 0) + ($4 << 2) >> 2] & 8388607;
 $66 = (_luaO_int2fb(HEAP32[$7 >> 2] | 0) | 0) << 23 | $62;
 HEAP32[(HEAP32[(HEAP32[$1 >> 2] | 0) + 48 >> 2] | 0) + ($4 << 2) >> 2] = $66;
 $76 = (_luaO_int2fb(HEAP32[$6 >> 2] | 0) | 0) << 14 & 8372224 | $66 & -8372225;
 HEAP32[(HEAP32[(HEAP32[$1 >> 2] | 0) + 48 >> 2] | 0) + ($4 << 2) >> 2] = $76;
 STACKTOP = sp;
 return;
}

function _codepoint($L) {
 $L = $L | 0;
 var $$0 = 0, $$0$i = 0, $$0$i2 = 0, $0 = 0, $1 = 0, $17 = 0, $2 = 0, $23 = 0, $26 = 0, $27 = 0, $31 = 0, $34 = 0, $39 = 0, $40 = 0, $46 = 0, $55 = 0, $8 = 0, $9 = 0, $c$0$lcssa$i = 0, $c$04$i = 0, $count$0$lcssa$i = 0, $count$06$i = 0, $len = 0, $n$012 = 0, $res$0$lcssa$i = 0, $res$05$i = 0, $res$1$i = 0, $s$0$i = 0, $s$011 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $len = sp + 12 | 0;
 $0 = _luaL_checklstring($L, 1, $len) | 0;
 $1 = _luaL_optinteger($L, 2, 1) | 0;
 $2 = HEAP32[$len >> 2] | 0;
 if (($1 | 0) > -1) $$0$i = $1; else if ($2 >>> 0 < (0 - $1 | 0) >>> 0) $$0$i = 0; else $$0$i = $1 + 1 + $2 | 0;
 $8 = _luaL_optinteger($L, 3, $$0$i) | 0;
 $9 = HEAP32[$len >> 2] | 0;
 if (($8 | 0) > -1) $$0$i2 = $8; else if ($9 >>> 0 < (0 - $8 | 0) >>> 0) $$0$i2 = 0; else $$0$i2 = $8 + 1 + $9 | 0;
 if (($$0$i | 0) > 0) $17 = $9; else {
  _luaL_argerror($L, 2, 63848) | 0;
  $17 = HEAP32[$len >> 2] | 0;
 }
 if (($$0$i2 | 0) > ($17 | 0)) _luaL_argerror($L, 3, 63848) | 0;
 if (($$0$i | 0) > ($$0$i2 | 0)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (($$0$i2 | 0) == 2147483647) {
  $$0 = _luaL_error($L, 63864, $vararg_buffer) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _luaL_checkstack($L, 1 - $$0$i + $$0$i2 | 0, 63864);
 $23 = $0 + $$0$i2 | 0;
 $n$012 = 0;
 $s$011 = $0 + ($$0$i + -1) | 0;
 L22 : while (1) {
  $26 = HEAP8[$s$011 >> 0] | 0;
  $27 = $26 & 255;
  if ($26 << 24 >> 24 > -1) {
   $res$1$i = $27;
   $s$0$i = $s$011;
  } else {
   if (!($27 & 64)) {
    $c$0$lcssa$i = $27;
    $count$0$lcssa$i = 0;
    $res$0$lcssa$i = 0;
   } else {
    $c$04$i = $27;
    $count$06$i = 0;
    $res$05$i = 0;
    while (1) {
     $31 = $count$06$i + 1 | 0;
     $34 = HEAPU8[$s$011 + $31 >> 0] | 0;
     if (($34 & 192 | 0) != 128) break L22;
     $39 = $34 & 63 | $res$05$i << 6;
     $40 = $c$04$i << 1;
     if (!($40 & 64)) {
      $c$0$lcssa$i = $40;
      $count$0$lcssa$i = $31;
      $res$0$lcssa$i = $39;
      break;
     } else {
      $c$04$i = $40;
      $count$06$i = $31;
      $res$05$i = $39;
     }
    }
   }
   $46 = ($c$0$lcssa$i & 127) << $count$0$lcssa$i * 5 | $res$0$lcssa$i;
   if (($count$0$lcssa$i | 0) > 3 | $46 >>> 0 > 1114111) break;
   if ($46 >>> 0 <= (HEAP32[63736 + ($count$0$lcssa$i << 2) >> 2] | 0) >>> 0) break;
   $res$1$i = $46;
   $s$0$i = $s$011 + $count$0$lcssa$i | 0;
  }
  $s$011 = $s$0$i + 1 | 0;
  _lua_pushinteger($L, $res$1$i);
  $55 = $n$012 + 1 | 0;
  if ($s$011 >>> 0 >= $23 >>> 0) {
   $$0 = $55;
   label = 24;
   break;
  } else $n$012 = $55;
 }
 if ((label | 0) == 24) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 $$0 = _luaL_error($L, 63712, $vararg_buffer1) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN15b2DistanceJoint4DumpEv($this) {
 $this = $this | 0;
 var $16 = 0.0, $22 = 0.0, $3 = 0, $7 = 0, $vararg_buffer1 = 0, $vararg_buffer13 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $vararg_buffer26 = sp + 88 | 0;
 $vararg_buffer23 = sp + 80 | 0;
 $vararg_buffer20 = sp + 72 | 0;
 $vararg_buffer17 = sp + 64 | 0;
 $vararg_buffer13 = sp + 48 | 0;
 $vararg_buffer9 = sp + 32 | 0;
 $vararg_buffer6 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $3 = HEAP32[(HEAP32[$this + 48 >> 2] | 0) + 8 >> 2] | 0;
 $7 = HEAP32[(HEAP32[$this + 52 >> 2] | 0) + 8 >> 2] | 0;
 __Z5b2LogPKcz(83328, sp);
 HEAP32[$vararg_buffer1 >> 2] = $3;
 __Z5b2LogPKcz(86496, $vararg_buffer1);
 HEAP32[$vararg_buffer3 >> 2] = $7;
 __Z5b2LogPKcz(86528, $vararg_buffer3);
 HEAP32[$vararg_buffer6 >> 2] = HEAPU8[$this + 61 >> 0];
 __Z5b2LogPKcz(86560, $vararg_buffer6);
 $16 = +HEAPF32[$this + 84 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 80 >> 2];
 HEAP32[$vararg_buffer9 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer9 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr12 = $vararg_buffer9 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $16;
 HEAP32[$vararg_ptr12 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr12 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(86600, $vararg_buffer9);
 $22 = +HEAPF32[$this + 92 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 88 >> 2];
 HEAP32[$vararg_buffer13 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer13 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr16 = $vararg_buffer13 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $22;
 HEAP32[$vararg_ptr16 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr16 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(86648, $vararg_buffer13);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 104 >> 2];
 HEAP32[$vararg_buffer17 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer17 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(83360, $vararg_buffer17);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 68 >> 2];
 HEAP32[$vararg_buffer20 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer20 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(86832, $vararg_buffer20);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 72 >> 2];
 HEAP32[$vararg_buffer23 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer23 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(86864, $vararg_buffer23);
 HEAP32[$vararg_buffer26 >> 2] = HEAP32[$this + 56 >> 2];
 __Z5b2LogPKcz(86896, $vararg_buffer26);
 STACKTOP = sp;
 return;
}

function __ZN11b2WeldJoint4DumpEv($this) {
 $this = $this | 0;
 var $16 = 0.0, $22 = 0.0, $3 = 0, $7 = 0, $vararg_buffer1 = 0, $vararg_buffer13 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $vararg_buffer26 = sp + 88 | 0;
 $vararg_buffer23 = sp + 80 | 0;
 $vararg_buffer20 = sp + 72 | 0;
 $vararg_buffer17 = sp + 64 | 0;
 $vararg_buffer13 = sp + 48 | 0;
 $vararg_buffer9 = sp + 32 | 0;
 $vararg_buffer6 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $3 = HEAP32[(HEAP32[$this + 48 >> 2] | 0) + 8 >> 2] | 0;
 $7 = HEAP32[(HEAP32[$this + 52 >> 2] | 0) + 8 >> 2] | 0;
 __Z5b2LogPKcz(86328, sp);
 HEAP32[$vararg_buffer1 >> 2] = $3;
 __Z5b2LogPKcz(86496, $vararg_buffer1);
 HEAP32[$vararg_buffer3 >> 2] = $7;
 __Z5b2LogPKcz(86528, $vararg_buffer3);
 HEAP32[$vararg_buffer6 >> 2] = HEAPU8[$this + 61 >> 0];
 __Z5b2LogPKcz(86560, $vararg_buffer6);
 $16 = +HEAPF32[$this + 84 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 80 >> 2];
 HEAP32[$vararg_buffer9 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer9 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr12 = $vararg_buffer9 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $16;
 HEAP32[$vararg_ptr12 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr12 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(86600, $vararg_buffer9);
 $22 = +HEAPF32[$this + 92 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 88 >> 2];
 HEAP32[$vararg_buffer13 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer13 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr16 = $vararg_buffer13 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $22;
 HEAP32[$vararg_ptr16 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr16 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(86648, $vararg_buffer13);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 96 >> 2];
 HEAP32[$vararg_buffer17 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer17 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(86352, $vararg_buffer17);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 68 >> 2];
 HEAP32[$vararg_buffer20 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer20 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(86832, $vararg_buffer20);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 72 >> 2];
 HEAP32[$vararg_buffer23 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer23 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(86864, $vararg_buffer23);
 HEAP32[$vararg_buffer26 >> 2] = HEAP32[$this + 56 >> 2];
 __Z5b2LogPKcz(86896, $vararg_buffer26);
 STACKTOP = sp;
 return;
}

function _codebook_decode_scalar_raw($f, $c) {
 $f = $f | 0;
 $c = $c | 0;
 var $$0 = 0, $1 = 0, $12 = 0, $13 = 0, $18 = 0, $2 = 0, $23 = 0, $28 = 0, $33 = 0, $36 = 0, $38 = 0, $40 = 0, $41 = 0, $44 = 0, $58 = 0, $59 = 0, $60 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $79 = 0, $84 = 0, $85 = 0, $91 = 0, $i$05 = 0, $n$07 = 0, $x$0$ = 0, $x$0$lcssa = 0, $x$06 = 0, $x$1 = 0, label = 0;
 _prep_huffman($f);
 $1 = HEAP32[$c + 2084 >> 2] | 0;
 $2 = ($1 | 0) == 0;
 if ($2) if (!(HEAP32[$c + 32 >> 2] | 0)) ___assert_fail(80792, 78904, 1584, 80832);
 $7 = HEAP32[$c + 4 >> 2] | 0;
 if (($7 | 0) > 8) {
  if (!$2) label = 7;
 } else if (!(HEAP32[$c + 32 >> 2] | 0)) label = 7;
 if ((label | 0) == 7) {
  $12 = $f + 1408 | 0;
  $13 = HEAP32[$12 >> 2] | 0;
  $18 = $13 >>> 1 & 1431655765 | $13 << 1 & -1431655766;
  $23 = $18 >>> 2 & 858993459 | $18 << 2 & -858993460;
  $28 = $23 >>> 4 & 252645135 | $23 << 4 & -252645136;
  $33 = $28 >>> 8 & 16711935 | $28 << 8 & -16711936;
  $36 = $33 >>> 16 | $33 << 16;
  $38 = HEAP32[$c + 2092 >> 2] | 0;
  if (($38 | 0) > 1) {
   $n$07 = $38;
   $x$06 = 0;
   while (1) {
    $40 = $n$07 >> 1;
    $41 = $40 + $x$06 | 0;
    $44 = (HEAP32[$1 + ($41 << 2) >> 2] | 0) >>> 0 > $36 >>> 0;
    $x$0$ = $44 ? $x$06 : $41;
    $n$07 = $44 ? $40 : $n$07 - $40 | 0;
    if (($n$07 | 0) <= 1) {
     $x$0$lcssa = $x$0$;
     break;
    } else $x$06 = $x$0$;
   }
  } else $x$0$lcssa = 0;
  if (!(HEAP8[$c + 23 >> 0] | 0)) $x$1 = HEAP32[(HEAP32[$c + 2088 >> 2] | 0) + ($x$0$lcssa << 2) >> 2] | 0; else $x$1 = $x$0$lcssa;
  $58 = HEAPU8[(HEAP32[$c + 8 >> 2] | 0) + $x$1 >> 0] | 0;
  $59 = $f + 1412 | 0;
  $60 = HEAP32[$59 >> 2] | 0;
  if (($60 | 0) < ($58 | 0)) {
   HEAP32[$59 >> 2] = 0;
   $$0 = -1;
   return $$0 | 0;
  } else {
   HEAP32[$12 >> 2] = $13 >>> $58;
   HEAP32[$59 >> 2] = $60 - $58;
   $$0 = $x$1;
   return $$0 | 0;
  }
 }
 if (HEAP8[$c + 23 >> 0] | 0) ___assert_fail(80864, 78904, 1617, 80832);
 L26 : do if (($7 | 0) > 0) {
  $69 = HEAP32[$c + 8 >> 2] | 0;
  $70 = $c + 32 | 0;
  $71 = $f + 1408 | 0;
  $i$05 = 0;
  while (1) {
   $72 = $69 + $i$05 | 0;
   $73 = HEAP8[$72 >> 0] | 0;
   $74 = $73 & 255;
   if ($73 << 24 >> 24 != -1) {
    $79 = HEAP32[$71 >> 2] | 0;
    if ((HEAP32[(HEAP32[$70 >> 2] | 0) + ($i$05 << 2) >> 2] | 0) == ($79 & (1 << $74) + -1 | 0)) break;
   }
   $91 = $i$05 + 1 | 0;
   if (($91 | 0) < ($7 | 0)) $i$05 = $91; else break L26;
  }
  $84 = $f + 1412 | 0;
  $85 = HEAP32[$84 >> 2] | 0;
  if (($85 | 0) < ($74 | 0)) {
   HEAP32[$84 >> 2] = 0;
   $$0 = -1;
   return $$0 | 0;
  } else {
   HEAP32[$71 >> 2] = $79 >>> $74;
   HEAP32[$84 >> 2] = $85 - (HEAPU8[$72 >> 0] | 0);
   $$0 = $i$05;
   return $$0 | 0;
  }
 } while (0);
 HEAP32[$f + 116 >> 2] = 21;
 HEAP32[$f + 1412 >> 2] = 0;
 $$0 = -1;
 return $$0 | 0;
}

function __ZN11b2RopeJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $$0$i = 0.0, $0 = 0, $1 = 0, $105 = 0.0, $107 = 0.0, $11 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0, $126 = 0, $130 = 0.0, $131 = 0.0, $132 = 0, $14 = 0.0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $24 = 0.0, $25 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $36 = 0.0, $4 = 0, $41 = 0.0, $44 = 0.0, $47 = 0.0, $5 = 0, $52 = 0.0, $57 = 0.0, $60 = 0.0, $63 = 0.0, $68 = 0.0, $69 = 0.0, $73 = 0.0, $75 = 0.0, $78 = 0, $80 = 0.0, $82 = 0.0, $88 = 0.0, $89 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $94 = 0.0;
 $0 = $this + 96 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $data + 24 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $3 + ($1 * 12 | 0) | 0;
 $5 = $4;
 $11 = +HEAPF32[$5 >> 2];
 $12 = +HEAPF32[$5 + 4 >> 2];
 $14 = +HEAPF32[$3 + ($1 * 12 | 0) + 8 >> 2];
 $15 = $this + 100 | 0;
 $16 = HEAP32[$15 >> 2] | 0;
 $18 = $3 + ($16 * 12 | 0) | 0;
 $24 = +HEAPF32[$18 >> 2];
 $25 = +HEAPF32[$18 + 4 >> 2];
 $27 = +HEAPF32[$3 + ($16 * 12 | 0) + 8 >> 2];
 $28 = +Math_sin(+$14);
 $29 = +Math_cos(+$14);
 $30 = +Math_sin(+$27);
 $31 = +Math_cos(+$27);
 $36 = +HEAPF32[$this + 68 >> 2] - +HEAPF32[$this + 128 >> 2];
 $41 = +HEAPF32[$this + 72 >> 2] - +HEAPF32[$this + 132 >> 2];
 $44 = $29 * $36 - $28 * $41;
 $47 = $28 * $36 + $29 * $41;
 $52 = +HEAPF32[$this + 76 >> 2] - +HEAPF32[$this + 136 >> 2];
 $57 = +HEAPF32[$this + 80 >> 2] - +HEAPF32[$this + 140 >> 2];
 $60 = $31 * $52 - $30 * $57;
 $63 = $30 * $52 + $31 * $57;
 $68 = $24 + $60 - $11 - $44;
 $69 = $25 + $63 - $12 - $47;
 $73 = +Math_sqrt(+($68 * $68 + $69 * $69));
 if ($73 < 1.1920928955078125e-07) {
  $$0$i = 0.0;
  $90 = $68;
  $92 = $69;
 } else {
  $75 = 1.0 / $73;
  $$0$i = $73;
  $90 = $68 * $75;
  $92 = $69 * $75;
 }
 $78 = $this + 84 | 0;
 $80 = $$0$i - +HEAPF32[$78 >> 2];
 $82 = $80 < .20000000298023224 ? $80 : .20000000298023224;
 $88 = -(+HEAPF32[$this + 160 >> 2] * ($82 < 0.0 ? 0.0 : $82));
 $89 = $90 * $88;
 $91 = $92 * $88;
 $94 = +HEAPF32[$this + 144 >> 2];
 $105 = $14 - +HEAPF32[$this + 152 >> 2] * ($44 * $91 - $47 * $89);
 $107 = +HEAPF32[$this + 148 >> 2];
 $118 = $27 + +HEAPF32[$this + 156 >> 2] * ($60 * $91 - $63 * $89);
 $119 = +($11 - $94 * $89);
 $120 = +($12 - $94 * $91);
 $121 = $4;
 HEAPF32[$121 >> 2] = $119;
 HEAPF32[$121 + 4 >> 2] = $120;
 $126 = HEAP32[$2 >> 2] | 0;
 HEAPF32[$126 + ((HEAP32[$0 >> 2] | 0) * 12 | 0) + 8 >> 2] = $105;
 $130 = +($24 + $107 * $89);
 $131 = +($25 + $107 * $91);
 $132 = $126 + ((HEAP32[$15 >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$132 >> 2] = $130;
 HEAPF32[$132 + 4 >> 2] = $131;
 HEAPF32[(HEAP32[$2 >> 2] | 0) + ((HEAP32[$15 >> 2] | 0) * 12 | 0) + 8 >> 2] = $118;
 return $$0$i - +HEAPF32[$78 >> 2] < .004999999888241291 | 0;
}

function _discharge2reg($fs, $e, $reg) {
 $fs = $fs | 0;
 $e = $e | 0;
 $reg = $reg | 0;
 var $$c$i = 0, $$from$i = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $3 = 0, $42 = 0, $44 = 0, $54 = 0, $56 = 0, $67 = 0, $69 = 0, $81 = 0, $88 = 0, $k$i = 0, $o$i3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $k$i = sp + 8 | 0;
 $o$i3 = sp;
 _luaK_dischargevars($fs, $e);
 $0 = HEAP32[$e >> 2] | 0;
 L1 : do switch ($0 | 0) {
 case 5:
  {
   HEAPF32[$k$i >> 2] = +HEAPF32[$e + 4 >> 2];
   HEAP32[$k$i + 4 >> 2] = 3;
   $54 = _addk($fs, $k$i, $k$i) | 0;
   $56 = $reg << 6;
   if (($54 | 0) < 262144) {
    _luaK_code($fs, $56 | $54 << 14 | 1) | 0;
    break L1;
   } else {
    _luaK_code($fs, $56 | 2) | 0;
    _luaK_code($fs, $54 << 6 | 46) | 0;
    break L1;
   }
   break;
  }
 case 4:
  {
   $42 = HEAP32[$e + 4 >> 2] | 0;
   $44 = $reg << 6;
   if (($42 | 0) < 262144) {
    _luaK_code($fs, $44 | $42 << 14 | 1) | 0;
    break L1;
   } else {
    _luaK_code($fs, $44 | 2) | 0;
    _luaK_code($fs, $42 << 6 | 46) | 0;
    break L1;
   }
   break;
  }
 case 1:
  {
   $1 = $reg + 1 | 0;
   $3 = HEAP32[$fs + 16 >> 2] | 0;
   do if (($3 | 0) > (HEAP32[$fs + 20 >> 2] | 0)) {
    $11 = (HEAP32[(HEAP32[$fs >> 2] | 0) + 48 >> 2] | 0) + ($3 + -1 << 2) | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    if (($12 & 63 | 0) == 4) {
     $16 = $12 >>> 6 & 255;
     $18 = $16 + ($12 >>> 23) | 0;
     if (($16 | 0) > ($reg | 0) | ($18 + 1 | 0) < ($reg | 0)) if (($16 | 0) < ($reg | 0) | ($16 | 0) > ($1 | 0)) break;
     $$from$i = ($16 | 0) < ($reg | 0) ? $16 : $reg;
     HEAP32[$11 >> 2] = $$from$i << 6 & 16320 | $12 & 8372287 | (($18 | 0) > ($reg | 0) ? $18 : $reg) - $$from$i << 23;
     break L1;
    }
   } while (0);
   _luaK_code($fs, $reg << 6 | 4) | 0;
   break;
  }
 case 2:
 case 3:
  {
   _luaK_code($fs, $reg << 6 | (($0 | 0) == 2 & 1) << 23 | 3) | 0;
   break;
  }
 case 7:
  {
   $88 = HEAP32[$e + 4 >> 2] | 0;
   if (($88 | 0) != ($reg | 0)) _luaK_code($fs, $88 << 23 | $reg << 6) | 0;
   break;
  }
 case 12:
  {
   $81 = (HEAP32[(HEAP32[$fs >> 2] | 0) + 48 >> 2] | 0) + (HEAP32[$e + 4 >> 2] << 2) | 0;
   HEAP32[$81 >> 2] = HEAP32[$81 >> 2] & -16321 | $reg << 6 & 16320;
   break;
  }
 case 6:
  {
   $$c$i = HEAP32[$e + 4 >> 2] | 0;
   HEAP32[$k$i >> 2] = $$c$i;
   HEAP32[$k$i + 4 >> 2] = 2;
   HEAP32[$o$i3 >> 2] = $$c$i;
   HEAP32[$o$i3 + 4 >> 2] = 19;
   $67 = _addk($fs, $k$i, $o$i3) | 0;
   $69 = $reg << 6;
   if (($67 | 0) < 262144) {
    _luaK_code($fs, $69 | $67 << 14 | 1) | 0;
    break L1;
   } else {
    _luaK_code($fs, $69 | 2) | 0;
    _luaK_code($fs, $67 << 6 | 46) | 0;
    break L1;
   }
   break;
  }
 default:
  {
   STACKTOP = sp;
   return;
  }
 } while (0);
 HEAP32[$e + 4 >> 2] = $reg;
 HEAP32[$e >> 2] = 7;
 STACKTOP = sp;
 return;
}

function _luaH_get($t, $key) {
 $t = $t | 0;
 $key = $key | 0;
 var $$0 = 0, $2 = 0, $22 = 0, $25 = 0, $26 = 0, $3 = 0, $49 = 0, $52 = 0.0, $57 = 0, $58 = 0, $81 = 0, $84 = 0, $89 = 0, $91 = 0, $n$0$i = 0, $n$0$i1 = 0, $n$0$i3 = 0, $n$0$lcssa = 0, $n$08 = 0, label = 0;
 $2 = HEAP32[$key + 4 >> 2] & 63;
 if (($2 | 0) == 3) {
  $52 = +HEAPF32[$key >> 2];
  if (+Math_floor(+$52) == $52) if ($52 >= -2147483648.0 & $52 < 2147483648.0) {
   $57 = ~~$52;
   $58 = $57 + -1 | 0;
   if ($58 >>> 0 < (HEAP32[$t + 8 >> 2] | 0) >>> 0) {
    $$0 = (HEAP32[$t + 12 >> 2] | 0) + ($58 << 3) | 0;
    return $$0 | 0;
   }
   $n$0$i3 = (HEAP32[$t + 16 >> 2] | 0) + (((1 << (HEAPU8[$t + 7 >> 0] | 0)) + -1 & $57) * 20 | 0) | 0;
   while (1) {
    if ((HEAP32[$n$0$i3 + 12 >> 2] | 0) == 19) if ((HEAP32[$n$0$i3 + 8 >> 2] | 0) == ($57 | 0)) break;
    $81 = HEAP32[$n$0$i3 + 16 >> 2] | 0;
    if (!$81) {
     $$0 = 59168;
     label = 30;
     break;
    }
    $n$0$i3 = $n$0$i3 + ($81 * 20 | 0) | 0;
   }
   if ((label | 0) == 30) return $$0 | 0;
   $$0 = $n$0$i3;
   return $$0 | 0;
  }
 } else if (($2 | 0) == 19) {
  $25 = HEAP32[$key >> 2] | 0;
  $26 = $25 + -1 | 0;
  if ($26 >>> 0 < (HEAP32[$t + 8 >> 2] | 0) >>> 0) {
   $$0 = (HEAP32[$t + 12 >> 2] | 0) + ($26 << 3) | 0;
   return $$0 | 0;
  }
  $n$0$i1 = (HEAP32[$t + 16 >> 2] | 0) + (((1 << (HEAPU8[$t + 7 >> 0] | 0)) + -1 & $25) * 20 | 0) | 0;
  while (1) {
   if ((HEAP32[$n$0$i1 + 12 >> 2] | 0) == 19) if ((HEAP32[$n$0$i1 + 8 >> 2] | 0) == ($25 | 0)) break;
   $49 = HEAP32[$n$0$i1 + 16 >> 2] | 0;
   if (!$49) {
    $$0 = 59168;
    label = 30;
    break;
   }
   $n$0$i1 = $n$0$i1 + ($49 * 20 | 0) | 0;
  }
  if ((label | 0) == 30) return $$0 | 0;
  $$0 = $n$0$i1;
  return $$0 | 0;
 } else if (!$2) {
  $$0 = 59168;
  return $$0 | 0;
 } else if (($2 | 0) == 4) {
  $3 = HEAP32[$key >> 2] | 0;
  $n$0$i = (HEAP32[$t + 16 >> 2] | 0) + (((1 << (HEAPU8[$t + 7 >> 0] | 0)) + -1 & HEAP32[$3 + 8 >> 2]) * 20 | 0) | 0;
  while (1) {
   if ((HEAP32[$n$0$i + 12 >> 2] | 0) == 68) if ((HEAP32[$n$0$i + 8 >> 2] | 0) == ($3 | 0)) break;
   $22 = HEAP32[$n$0$i + 16 >> 2] | 0;
   if (!$22) {
    $$0 = 59168;
    label = 30;
    break;
   }
   $n$0$i = $n$0$i + ($22 * 20 | 0) | 0;
  }
  if ((label | 0) == 30) return $$0 | 0;
  $$0 = $n$0$i;
  return $$0 | 0;
 }
 $84 = _mainposition($t, $key) | 0;
 L47 : do if (!(_luaV_equalobj(0, $84 + 8 | 0, $key) | 0)) {
  $n$08 = $84;
  while (1) {
   $89 = HEAP32[$n$08 + 16 >> 2] | 0;
   if (!$89) {
    $$0 = 59168;
    break;
   }
   $91 = $n$08 + ($89 * 20 | 0) | 0;
   if (!(_luaV_equalobj(0, $n$08 + ($89 * 20 | 0) + 8 | 0, $key) | 0)) $n$08 = $91; else {
    $n$0$lcssa = $91;
    break L47;
   }
  }
  return $$0 | 0;
 } else $n$0$lcssa = $84; while (0);
 $$0 = $n$0$lcssa;
 return $$0 | 0;
}

function _skip_sep($ls) {
 $ls = $ls | 0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $3 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $42 = 0, $45 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $54 = 0, $55 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $7 = 0, $count$0$ = 0, $count$0$lcssa = 0, $count$08 = 0, $not$ = 0, label = 0;
 $0 = HEAP32[$ls >> 2] | 0;
 $1 = $ls + 40 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $2 + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $6 = $2 + 8 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 do if (($4 + 1 | 0) >>> 0 > $7 >>> 0) if ($7 >>> 0 > 1073741822) _lexerror($ls, 67216, 0); else {
  $10 = $7 << 1;
  $14 = _luaM_realloc_(HEAP32[$ls + 32 >> 2] | 0, HEAP32[$2 >> 2] | 0, $7, $10) | 0;
  HEAP32[$2 >> 2] = $14;
  HEAP32[$6 >> 2] = $10;
  $17 = HEAP32[$3 >> 2] | 0;
  $19 = $14;
  break;
 } else {
  $17 = $4;
  $19 = HEAP32[$2 >> 2] | 0;
 } while (0);
 HEAP32[$3 >> 2] = $17 + 1;
 HEAP8[$19 + $17 >> 0] = $0;
 $20 = $ls + 36 | 0;
 $21 = HEAP32[$20 >> 2] | 0;
 $22 = HEAP32[$21 >> 2] | 0;
 HEAP32[$21 >> 2] = $22 + -1;
 if (!$22) $31 = _luaZ_fill($21) | 0; else {
  $25 = $21 + 4 | 0;
  $26 = HEAP32[$25 >> 2] | 0;
  HEAP32[$25 >> 2] = $26 + 1;
  $31 = HEAPU8[$26 >> 0] | 0;
 }
 HEAP32[$ls >> 2] = $31;
 if (($31 | 0) != 61) {
  $$lcssa = $31;
  $count$0$lcssa = 0;
  $not$ = ($$lcssa | 0) != ($0 | 0);
  $63 = $not$ << 31 >> 31;
  $count$0$ = $63 ^ $count$0$lcssa;
  return $count$0$ | 0;
 }
 $33 = $ls + 32 | 0;
 $count$08 = 0;
 while (1) {
  $34 = HEAP32[$1 >> 2] | 0;
  $35 = $34 + 4 | 0;
  $36 = HEAP32[$35 >> 2] | 0;
  $38 = $34 + 8 | 0;
  $39 = HEAP32[$38 >> 2] | 0;
  if (($36 + 1 | 0) >>> 0 > $39 >>> 0) {
   if ($39 >>> 0 > 1073741822) {
    label = 14;
    break;
   }
   $42 = $39 << 1;
   $45 = _luaM_realloc_(HEAP32[$33 >> 2] | 0, HEAP32[$34 >> 2] | 0, $39, $42) | 0;
   HEAP32[$34 >> 2] = $45;
   HEAP32[$38 >> 2] = $42;
   $47 = HEAP32[$35 >> 2] | 0;
   $49 = $45;
  } else {
   $47 = $36;
   $49 = HEAP32[$34 >> 2] | 0;
  }
  HEAP32[$35 >> 2] = $47 + 1;
  HEAP8[$49 + $47 >> 0] = 61;
  $50 = HEAP32[$20 >> 2] | 0;
  $51 = HEAP32[$50 >> 2] | 0;
  HEAP32[$50 >> 2] = $51 + -1;
  if (!$51) $60 = _luaZ_fill($50) | 0; else {
   $54 = $50 + 4 | 0;
   $55 = HEAP32[$54 >> 2] | 0;
   HEAP32[$54 >> 2] = $55 + 1;
   $60 = HEAPU8[$55 >> 0] | 0;
  }
  HEAP32[$ls >> 2] = $60;
  $61 = $count$08 + 1 | 0;
  if (($60 | 0) == 61) $count$08 = $61; else {
   $$lcssa = $60;
   $count$0$lcssa = $61;
   label = 20;
   break;
  }
 }
 if ((label | 0) == 14) _lexerror($ls, 67216, 0); else if ((label | 0) == 20) {
  $not$ = ($$lcssa | 0) != ($0 | 0);
  $63 = $not$ << 31 >> 31;
  $count$0$ = $63 ^ $count$0$lcssa;
  return $count$0$ | 0;
 }
 return 0;
}

function _newupvalue($fs, $name, $v) {
 $fs = $fs | 0;
 $name = $name | 0;
 $v = $v | 0;
 var $0 = 0, $1 = 0, $11 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $24 = 0, $28 = 0, $29 = 0, $3 = 0, $5 = 0, $64 = 0, $65 = 0, $66 = 0, $8 = 0, $oldsize$01 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $0 = HEAP32[$fs >> 2] | 0;
 $1 = $0 + 12 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $fs + 43 | 0;
 $5 = HEAPU8[$3 >> 0] | 0;
 if (($5 + 1 | 0) >>> 0 > 255) {
  $8 = $fs + 8 | 0;
  $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 32 >> 2] | 0;
  $13 = HEAP32[$0 + 36 >> 2] | 0;
  if (!$13) {
   $16 = 60600;
   HEAP32[$vararg_buffer1 >> 2] = 60928;
   $vararg_ptr4 = $vararg_buffer1 + 4 | 0;
   HEAP32[$vararg_ptr4 >> 2] = 255;
   $vararg_ptr5 = $vararg_buffer1 + 8 | 0;
   HEAP32[$vararg_ptr5 >> 2] = $16;
   $17 = _luaO_pushfstring($11, 60640, $vararg_buffer1) | 0;
   $18 = HEAP32[$8 >> 2] | 0;
   _luaX_syntaxerror($18, $17);
  }
  HEAP32[$vararg_buffer >> 2] = $13;
  $16 = _luaO_pushfstring($11, 60616, $vararg_buffer) | 0;
  HEAP32[$vararg_buffer1 >> 2] = 60928;
  $vararg_ptr4 = $vararg_buffer1 + 4 | 0;
  HEAP32[$vararg_ptr4 >> 2] = 255;
  $vararg_ptr5 = $vararg_buffer1 + 8 | 0;
  HEAP32[$vararg_ptr5 >> 2] = $16;
  $17 = _luaO_pushfstring($11, 60640, $vararg_buffer1) | 0;
  $18 = HEAP32[$8 >> 2] | 0;
  _luaX_syntaxerror($18, $17);
 }
 if (($5 | 0) < ($2 | 0)) $28 = $2; else {
  $24 = $0 + 64 | 0;
  HEAP32[$24 >> 2] = _luaM_growaux_(HEAP32[(HEAP32[$fs + 8 >> 2] | 0) + 32 >> 2] | 0, HEAP32[$24 >> 2] | 0, $1, 8, 255, 60928) | 0;
  $28 = HEAP32[$1 >> 2] | 0;
 }
 $29 = $0 + 64 | 0;
 if (($2 | 0) < ($28 | 0)) {
  $oldsize$01 = $2;
  do {
   HEAP32[(HEAP32[$29 >> 2] | 0) + ($oldsize$01 << 3) >> 2] = 0;
   $oldsize$01 = $oldsize$01 + 1 | 0;
  } while (($oldsize$01 | 0) < ($28 | 0));
 }
 HEAP8[(HEAP32[$29 >> 2] | 0) + ((HEAPU8[$3 >> 0] | 0) << 3) + 4 >> 0] = (HEAP32[$v >> 2] | 0) == 8 & 1;
 HEAP8[(HEAP32[$29 >> 2] | 0) + ((HEAPU8[$3 >> 0] | 0) << 3) + 5 >> 0] = HEAP32[$v + 4 >> 2];
 HEAP32[(HEAP32[$29 >> 2] | 0) + ((HEAPU8[$3 >> 0] | 0) << 3) >> 2] = $name;
 if (!(HEAP8[$0 + 5 >> 0] & 4)) {
  $64 = HEAP8[$3 >> 0] | 0;
  $65 = $64 + 1 << 24 >> 24;
  HEAP8[$3 >> 0] = $65;
  $66 = $64 & 255;
  STACKTOP = sp;
  return $66 | 0;
 }
 if (!(HEAP8[$name + 5 >> 0] & 3)) {
  $64 = HEAP8[$3 >> 0] | 0;
  $65 = $64 + 1 << 24 >> 24;
  HEAP8[$3 >> 0] = $65;
  $66 = $64 & 255;
  STACKTOP = sp;
  return $66 | 0;
 }
 _luaC_barrier_(HEAP32[(HEAP32[$fs + 8 >> 2] | 0) + 32 >> 2] | 0, $0, $name);
 $64 = HEAP8[$3 >> 0] | 0;
 $65 = $64 + 1 << 24 >> 24;
 HEAP8[$3 >> 0] = $65;
 $66 = $64 & 255;
 STACKTOP = sp;
 return $66 | 0;
}

function _sweeplist($L, $p, $count) {
 $L = $L | 0;
 $p = $p | 0;
 $count = $count | 0;
 var $$0$be = 0, $$015 = 0, $$03 = 0, $$06 = 0, $$lcssa$i$i = 0, $11 = 0, $12 = 0, $14 = 0, $22 = 0, $23 = 0, $27 = 0, $29 = 0, $31 = 0, $38 = 0, $4 = 0, $5 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $i$01$i$i = 0, label = 0;
 $4 = HEAPU8[(HEAP32[$L + 12 >> 2] | 0) + 48 >> 0] | 0;
 $5 = $4 ^ 3;
 $6 = $4 & 3;
 $7 = HEAP32[$p >> 2] | 0;
 if (!$7) {
  $$03 = $p;
  $58 = 0;
  $59 = ($58 | 0) == 0;
  $60 = $59 ? 0 : $$03;
  return $60 | 0;
 } else {
  $$015 = $count;
  $$06 = $p;
  $12 = $7;
 }
 while (1) {
  if (!$$015) {
   $$03 = $$06;
   $58 = $12;
   label = 21;
   break;
  }
  $$015 = $$015 + -1 | 0;
  $11 = $12 + 5 | 0;
  $14 = HEAPU8[$11 >> 0] | 0;
  L6 : do if (!(($14 ^ 3) & $5)) {
   HEAP32[$$06 >> 2] = HEAP32[$12 >> 2];
   switch (HEAPU8[$12 + 4 >> 0] | 0 | 0) {
   case 7:
    {
     _luaM_realloc_($L, $12, (HEAP32[$12 + 12 >> 2] | 0) + 24 | 0, 0) | 0;
     $$0$be = $$06;
     break L6;
     break;
    }
   case 5:
    {
     _luaH_free($L, $12);
     $$0$be = $$06;
     break L6;
     break;
    }
   case 38:
    {
     _luaM_realloc_($L, $12, ((HEAPU8[$12 + 6 >> 0] | 0) << 3) + 16 | 0, 0) | 0;
     $$0$be = $$06;
     break L6;
     break;
    }
   case 20:
    break;
   case 9:
    {
     _luaF_freeproto($L, $12);
     $$0$be = $$06;
     break L6;
     break;
    }
   case 8:
    {
     _luaE_freethread($L, $12);
     $$0$be = $$06;
     break L6;
     break;
    }
   case 6:
    {
     $22 = $12 + 6 | 0;
     $23 = HEAP8[$22 >> 0] | 0;
     if (!($23 << 24 >> 24)) $$lcssa$i$i = $23 & 255; else {
      $i$01$i$i = 0;
      do {
       $27 = HEAP32[$12 + ($i$01$i$i << 2) + 16 >> 2] | 0;
       if ($27) {
        $29 = $27 + 4 | 0;
        $31 = (HEAP32[$29 >> 2] | 0) + -1 | 0;
        HEAP32[$29 >> 2] = $31;
        if (!$31) if ((HEAP32[$27 >> 2] | 0) == ($27 + 8 | 0)) _luaM_realloc_($L, $27, 16, 0) | 0;
       }
       $i$01$i$i = $i$01$i$i + 1 | 0;
       $38 = HEAPU8[$22 >> 0] | 0;
      } while (($i$01$i$i | 0) < ($38 | 0));
      $$lcssa$i$i = $38;
     }
     _luaM_realloc_($L, $12, ($$lcssa$i$i << 2) + 16 | 0, 0) | 0;
     $$0$be = $$06;
     break L6;
     break;
    }
   case 4:
    {
     _luaS_remove($L, $12);
     break;
    }
   default:
    {
     $$0$be = $$06;
     break L6;
    }
   }
   _luaM_realloc_($L, $12, (HEAP32[$12 + 12 >> 2] | 0) + 25 | 0, 0) | 0;
   $$0$be = $$06;
  } else {
   HEAP8[$11 >> 0] = $14 & 248 | $6;
   $$0$be = $12;
  } while (0);
  $12 = HEAP32[$$0$be >> 2] | 0;
  if (!$12) {
   $$03 = $$0$be;
   $58 = 0;
   label = 21;
   break;
  } else $$06 = $$0$be;
 }
 if ((label | 0) == 21) {
  $59 = ($58 | 0) == 0;
  $60 = $59 ? 0 : $$03;
  return $60 | 0;
 }
 return 0;
}

function __ZN7b2World4StepEfii($this, $dt, $velocityIterations, $positionIterations) {
 $this = $this | 0;
 $dt = +$dt;
 $velocityIterations = $velocityIterations | 0;
 $positionIterations = $positionIterations | 0;
 var $0 = 0, $1 = 0, $15 = 0, $35 = 0.0, $40 = 0.0, $43 = 0, $53 = 0, $54 = 0.0, $55 = 0, $6 = 0, $8 = 0, $body$01$i = 0, $body$02$i = 0, $step = 0, $stepTimer = 0, $timer2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $stepTimer = sp + 27 | 0;
 $step = sp;
 $timer2 = sp + 24 | 0;
 $0 = $this + 102868 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!($1 & 1)) $8 = $1; else {
  __ZN16b2ContactManager15FindNewContactsEv($this + 102872 | 0);
  $6 = HEAP32[$0 >> 2] & -2;
  HEAP32[$0 >> 2] = $6;
  $8 = $6;
 }
 HEAP32[$0 >> 2] = $8 | 2;
 HEAPF32[$step >> 2] = $dt;
 HEAP32[$step + 12 >> 2] = $velocityIterations;
 HEAP32[$step + 16 >> 2] = $positionIterations;
 if ($dt > 0.0) HEAPF32[$step + 4 >> 2] = 1.0 / $dt; else HEAPF32[$step + 4 >> 2] = 0.0;
 $15 = $this + 102988 | 0;
 HEAPF32[$step + 8 >> 2] = +HEAPF32[$15 >> 2] * $dt;
 HEAP8[$step + 20 >> 0] = HEAP8[$this + 102992 >> 0] | 0;
 __ZN16b2ContactManager7CollideEv($this + 102872 | 0);
 HEAPF32[$this + 103e3 >> 2] = +__ZNK7b2Timer15GetMillisecondsEv(sp + 26 | 0);
 if ((HEAP8[$this + 102995 >> 0] | 0) != 0 & +HEAPF32[$step >> 2] > 0.0) {
  __ZN7b2World5SolveERK10b2TimeStep($this, $step);
  HEAPF32[$this + 103004 >> 2] = +__ZNK7b2Timer15GetMillisecondsEv(sp + 25 | 0);
 }
 if (!(HEAP8[$this + 102993 >> 0] | 0)) label = 11; else {
  $35 = +HEAPF32[$step >> 2];
  if ($35 > 0.0) {
   __ZN7b2World8SolveTOIERK10b2TimeStep($this, $step);
   HEAPF32[$this + 103024 >> 2] = +__ZNK7b2Timer15GetMillisecondsEv($timer2);
   label = 11;
  } else $40 = $35;
 }
 if ((label | 0) == 11) $40 = +HEAPF32[$step >> 2];
 if ($40 > 0.0) HEAPF32[$15 >> 2] = +HEAPF32[$step + 4 >> 2];
 $43 = HEAP32[$0 >> 2] | 0;
 if (!($43 & 4)) {
  $53 = $43 & -3;
  HEAP32[$0 >> 2] = $53;
  $54 = +__ZNK7b2Timer15GetMillisecondsEv($stepTimer);
  $55 = $this + 102996 | 0;
  HEAPF32[$55 >> 2] = $54;
  STACKTOP = sp;
  return;
 }
 $body$01$i = HEAP32[$this + 102952 >> 2] | 0;
 if (!$body$01$i) {
  $53 = $43 & -3;
  HEAP32[$0 >> 2] = $53;
  $54 = +__ZNK7b2Timer15GetMillisecondsEv($stepTimer);
  $55 = $this + 102996 | 0;
  HEAPF32[$55 >> 2] = $54;
  STACKTOP = sp;
  return;
 } else $body$02$i = $body$01$i;
 do {
  HEAPF32[$body$02$i + 76 >> 2] = 0.0;
  HEAPF32[$body$02$i + 80 >> 2] = 0.0;
  HEAPF32[$body$02$i + 84 >> 2] = 0.0;
  $body$02$i = HEAP32[$body$02$i + 96 >> 2] | 0;
 } while (($body$02$i | 0) != 0);
 $53 = $43 & -3;
 HEAP32[$0 >> 2] = $53;
 $54 = +__ZNK7b2Timer15GetMillisecondsEv($stepTimer);
 $55 = $this + 102996 | 0;
 HEAPF32[$55 >> 2] = $54;
 STACKTOP = sp;
 return;
}

function _png_decompress_chunk($png_ptr, $chunklength, $prefix_size, $newlength) {
 $png_ptr = $png_ptr | 0;
 $chunklength = $chunklength | 0;
 $prefix_size = $prefix_size | 0;
 $newlength = $newlength | 0;
 var $$0 = 0, $$pre = 0, $1 = 0, $11 = 0, $12 = 0, $14 = 0, $17 = 0, $22 = 0, $24 = 0, $25 = 0, $3 = 0, $31 = 0, $5 = 0, $6 = 0, $9 = 0, $limit$03 = 0, $lzsize = 0, $ret$0 = 0, $ret$1 = 0, $text$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $lzsize = sp;
 $1 = HEAP32[$png_ptr + 760 >> 2] | 0;
 if (($1 | 0) == -1 | ($1 | 0) == 0) {
  $6 = $prefix_size + 1 | 0;
  $limit$03 = -1;
 } else {
  $3 = $prefix_size + 1 | 0;
  if ($1 >>> 0 < $3 >>> 0) {
   _png_zstream_error($png_ptr, -4);
   $$0 = -4;
   STACKTOP = sp;
   return $$0 | 0;
  } else {
   $6 = $3;
   $limit$03 = $1;
  }
 }
 $5 = $limit$03 - $6 | 0;
 if ($5 >>> 0 < (HEAP32[$newlength >> 2] | 0) >>> 0) HEAP32[$newlength >> 2] = $5;
 $9 = $png_ptr + 376 | 0;
 $11 = _png_inflate_claim($png_ptr, HEAP32[$9 >> 2] | 0) | 0;
 if (($11 | 0) == 1) {
  $$0 = -7;
  STACKTOP = sp;
  return $$0 | 0;
 } else if (!$11) {
  $12 = $chunklength - $prefix_size | 0;
  HEAP32[$lzsize >> 2] = $12;
  $14 = $png_ptr + 788 | 0;
  $17 = _png_inflate($png_ptr, HEAP32[$9 >> 2] | 0, (HEAP32[$14 >> 2] | 0) + $prefix_size | 0, $lzsize, 0, $newlength) | 0;
  do if (($17 | 0) == 1) {
   if (_inflateReset($png_ptr + 224 | 0) | 0) {
    _png_zstream_error($png_ptr, 1);
    $ret$1 = -7;
    break;
   }
   $22 = HEAP32[$newlength >> 2] | 0;
   $24 = $prefix_size + 1 + $22 | 0;
   $25 = _png_malloc_base($png_ptr, $24) | 0;
   if (!$25) {
    _png_zstream_error($png_ptr, -4);
    $ret$1 = -4;
    break;
   }
   $31 = _png_inflate($png_ptr, HEAP32[$9 >> 2] | 0, (HEAP32[$14 >> 2] | 0) + $prefix_size | 0, $lzsize, $25 + $prefix_size | 0, $newlength) | 0;
   if (!$31) {
    $ret$0 = -7;
    $text$0 = $25;
   } else if (($31 | 0) == 1) if (($22 | 0) == (HEAP32[$newlength >> 2] | 0)) {
    HEAP8[$25 + ($22 + $prefix_size) >> 0] = 0;
    $$pre = HEAP32[$14 >> 2] | 0;
    if ($prefix_size) _memcpy($25 | 0, $$pre | 0, $prefix_size | 0) | 0;
    HEAP32[$14 >> 2] = $25;
    HEAP32[$png_ptr + 792 >> 2] = $24;
    $ret$0 = 1;
    $text$0 = $$pre;
   } else {
    $ret$0 = -7;
    $text$0 = $25;
   } else {
    $ret$0 = $31;
    $text$0 = $25;
   }
   _png_free($png_ptr, $text$0);
   if (($ret$0 | 0) != 1 ? 1 : ($12 | 0) == (HEAP32[$lzsize >> 2] | 0)) $ret$1 = $ret$0; else {
    _png_chunk_benign_error($png_ptr, 75688);
    $ret$1 = 1;
   }
  } else $ret$1 = ($17 | 0) == 0 ? -7 : $17; while (0);
  HEAP32[$png_ptr + 220 >> 2] = 0;
  $$0 = $ret$1;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $$0 = $11;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _lua_rotate($L, $idx, $n) {
 $L = $L | 0;
 $idx = $idx | 0;
 $n = $n | 0;
 var $$0$i = 0, $$011$i = 0, $$011$i3 = 0, $$011$i7 = 0, $$02$i = 0, $$02$i2 = 0, $$02$i6 = 0, $$sink = 0, $1 = 0, $15 = 0, $16 = 0, $2 = 0, $20 = 0, $29 = 0, $31 = 0, $33 = 0, $36 = 0, $37 = 0, $4 = 0, $42 = 0, $43 = 0, $47 = 0, $54 = 0, $56 = 0, $58 = 0, $61 = 0, $62 = 0, $67 = 0, $68 = 0, $7 = 0, $72 = 0, $80 = 0, $82 = 0, $85 = 0, $86 = 0, $91 = 0, $92 = 0, $96 = 0;
 $1 = HEAP32[$L + 8 >> 2] | 0;
 $2 = $1 + -8 | 0;
 $4 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $7 = (HEAP32[$4 >> 2] | 0) + ($idx << 3) | 0;
  $$0$i = $7 >>> 0 < $1 >>> 0 ? $7 : 59168;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = $1 + ($idx << 3) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $15 = -1001e3 - $idx | 0;
  $16 = HEAP32[$4 >> 2] | 0;
  if ((HEAP32[$16 + 4 >> 2] | 0) == 22) $$0$i = 59168; else {
   $20 = HEAP32[$16 >> 2] | 0;
   if (($15 | 0) > (HEAPU8[$20 + 6 >> 0] | 0 | 0)) $$0$i = 59168; else $$0$i = $20 + 16 + ($15 + -1 << 3) | 0;
  }
 } while (0);
 $$sink = ($n | 0) > -1 ? $1 : $$0$i;
 $29 = $$sink + (~$n << 3) | 0;
 if ($$0$i >>> 0 < $29 >>> 0) {
  $$011$i7 = $29;
  $$02$i6 = $$0$i;
  do {
   $31 = $$02$i6;
   $33 = HEAP32[$31 >> 2] | 0;
   $36 = HEAP32[$31 + 4 >> 2] | 0;
   $37 = $$011$i7;
   $42 = HEAP32[$37 + 4 >> 2] | 0;
   $43 = $$02$i6;
   HEAP32[$43 >> 2] = HEAP32[$37 >> 2];
   HEAP32[$43 + 4 >> 2] = $42;
   $47 = $$011$i7;
   HEAP32[$47 >> 2] = $33;
   HEAP32[$47 + 4 >> 2] = $36;
   $$02$i6 = $$02$i6 + 8 | 0;
   $$011$i7 = $$011$i7 + -8 | 0;
  } while ($$02$i6 >>> 0 < $$011$i7 >>> 0);
 }
 $54 = $$sink + (0 - $n << 3) | 0;
 if ($54 >>> 0 < $2 >>> 0) {
  $$011$i3 = $2;
  $$02$i2 = $54;
  do {
   $56 = $$02$i2;
   $58 = HEAP32[$56 >> 2] | 0;
   $61 = HEAP32[$56 + 4 >> 2] | 0;
   $62 = $$011$i3;
   $67 = HEAP32[$62 + 4 >> 2] | 0;
   $68 = $$02$i2;
   HEAP32[$68 >> 2] = HEAP32[$62 >> 2];
   HEAP32[$68 + 4 >> 2] = $67;
   $72 = $$011$i3;
   HEAP32[$72 >> 2] = $58;
   HEAP32[$72 + 4 >> 2] = $61;
   $$02$i2 = $$02$i2 + 8 | 0;
   $$011$i3 = $$011$i3 + -8 | 0;
  } while ($$02$i2 >>> 0 < $$011$i3 >>> 0);
 }
 if ($$0$i >>> 0 < $2 >>> 0) {
  $$011$i = $2;
  $$02$i = $$0$i;
 } else return;
 do {
  $80 = $$02$i;
  $82 = HEAP32[$80 >> 2] | 0;
  $85 = HEAP32[$80 + 4 >> 2] | 0;
  $86 = $$011$i;
  $91 = HEAP32[$86 + 4 >> 2] | 0;
  $92 = $$02$i;
  HEAP32[$92 >> 2] = HEAP32[$86 >> 2];
  HEAP32[$92 + 4 >> 2] = $91;
  $96 = $$011$i;
  HEAP32[$96 >> 2] = $82;
  HEAP32[$96 + 4 >> 2] = $85;
  $$02$i = $$02$i + 8 | 0;
  $$011$i = $$011$i + -8 | 0;
 } while ($$02$i >>> 0 < $$011$i >>> 0);
 return;
}

function _luaK_exp2RK($fs, $e) {
 $fs = $fs | 0;
 $e = $e | 0;
 var $$0 = 0, $$c$i = 0, $$pre$phi$iZ2D = 0, $0 = 0, $11 = 0, $16 = 0, $2 = 0, $33 = 0, $35 = 0, $39 = 0, $4 = 0, $40 = 0, $43 = 0, $44 = 0, $52 = 0, $53 = 0, $o$i2 = 0, $o$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $o$i3 = sp + 8 | 0;
 $o$i2 = sp;
 $0 = $e + 8 | 0;
 $2 = $e + 12 | 0;
 $4 = (HEAP32[$0 >> 2] | 0) == (HEAP32[$2 >> 2] | 0);
 _luaK_dischargevars($fs, $e);
 do if (!$4) {
  if ((HEAP32[$e >> 2] | 0) == 7) {
   $11 = HEAP32[$e + 4 >> 2] | 0;
   if ((HEAP32[$0 >> 2] | 0) == (HEAP32[$2 >> 2] | 0)) break;
   if (($11 | 0) >= (HEAPU8[$fs + 42 >> 0] | 0 | 0)) {
    _exp2reg($fs, $e, $11);
    break;
   }
  }
  _luaK_exp2nextreg($fs, $e);
 } while (0);
 $16 = HEAP32[$e >> 2] | 0;
 switch ($16 | 0) {
 case 6:
  {
   $35 = $e + 4 | 0;
   $$c$i = HEAP32[$35 >> 2] | 0;
   HEAP32[$o$i3 >> 2] = $$c$i;
   HEAP32[$o$i3 + 4 >> 2] = 2;
   HEAP32[$o$i2 >> 2] = $$c$i;
   HEAP32[$o$i2 + 4 >> 2] = 19;
   $39 = _addk($fs, $o$i3, $o$i2) | 0;
   HEAP32[$35 >> 2] = $39;
   HEAP32[$e >> 2] = 4;
   $44 = $39;
   label = 16;
   break;
  }
 case 1:
 case 3:
 case 2:
  {
   if ((HEAP32[$fs + 28 >> 2] | 0) < 256) {
    if (($16 | 0) == 1) {
     HEAP32[$o$i2 + 4 >> 2] = 0;
     HEAP32[$o$i3 >> 2] = HEAP32[(HEAP32[$fs + 8 >> 2] | 0) + 44 >> 2];
     HEAP32[$o$i3 + 4 >> 2] = 69;
     $33 = _addk($fs, $o$i3, $o$i2) | 0;
    } else {
     HEAP32[$o$i3 >> 2] = ($16 | 0) == 2 & 1;
     HEAP32[$o$i3 + 4 >> 2] = 1;
     $33 = _addk($fs, $o$i3, $o$i3) | 0;
    }
    HEAP32[$e + 4 >> 2] = $33;
    HEAP32[$e >> 2] = 4;
    $$0 = $33 | 256;
    STACKTOP = sp;
    return $$0 | 0;
   }
   break;
  }
 case 5:
  {
   $40 = $e + 4 | 0;
   HEAPF32[$o$i3 >> 2] = +HEAPF32[$40 >> 2];
   HEAP32[$o$i3 + 4 >> 2] = 3;
   $43 = _addk($fs, $o$i3, $o$i3) | 0;
   HEAP32[$40 >> 2] = $43;
   HEAP32[$e >> 2] = 4;
   $44 = $43;
   label = 16;
   break;
  }
 case 4:
  {
   $44 = HEAP32[$e + 4 >> 2] | 0;
   label = 16;
   break;
  }
 default:
  {}
 }
 if ((label | 0) == 16) if (($44 | 0) < 256) {
  $$0 = $44 | 256;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _luaK_dischargevars($fs, $e);
 if ((HEAP32[$e >> 2] | 0) == 7) {
  $52 = $e + 4 | 0;
  $53 = HEAP32[$52 >> 2] | 0;
  if ((HEAP32[$0 >> 2] | 0) == (HEAP32[$2 >> 2] | 0)) {
   $$0 = $53;
   STACKTOP = sp;
   return $$0 | 0;
  }
  if (($53 | 0) < (HEAPU8[$fs + 42 >> 0] | 0 | 0)) $$pre$phi$iZ2D = $52; else {
   _exp2reg($fs, $e, $53);
   $$0 = HEAP32[$52 >> 2] | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } else $$pre$phi$iZ2D = $e + 4 | 0;
 _luaK_exp2nextreg($fs, $e);
 $$0 = HEAP32[$$pre$phi$iZ2D >> 2] | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _luaK_patchlist($fs, $list, $target) {
 $fs = $fs | 0;
 $list = $list | 0;
 $target = $target | 0;
 var $$0$i$i = 0, $$0$i$i5 = 0, $$02$i = 0, $11 = 0, $14 = 0, $16 = 0, $26 = 0, $27 = 0, $29 = 0, $34 = 0, $35 = 0, $4 = 0, $41 = 0, $47 = 0, $57 = 0, $6 = 0, $8 = 0, $9 = 0, $fs$idx$val$idx$val$i$i = 0, $fs$idx$val$idx$val$i$pre = 0, $list$0$i$i = 0, $storemerge = 0, label = 0;
 if ((HEAP32[$fs + 16 >> 2] | 0) == ($target | 0)) {
  HEAP32[$fs + 20 >> 2] = $target;
  $4 = $fs + 24 | 0;
  if (($list | 0) == -1) return;
  $6 = HEAP32[$4 >> 2] | 0;
  if (($6 | 0) == -1) {
   HEAP32[$4 >> 2] = $list;
   return;
  }
  $fs$idx$val$idx$val$i$i = HEAP32[(HEAP32[$fs >> 2] | 0) + 48 >> 2] | 0;
  $list$0$i$i = $6;
  while (1) {
   $8 = $fs$idx$val$idx$val$i$i + ($list$0$i$i << 2) | 0;
   $9 = HEAP32[$8 >> 2] | 0;
   $11 = ($9 >>> 14) + -131071 | 0;
   if (($11 | 0) == -1) break;
   $14 = $list$0$i$i + 1 + $11 | 0;
   if (($14 | 0) == -1) break; else $list$0$i$i = $14;
  }
  $16 = ~$list$0$i$i + $list | 0;
  if (((($16 | 0) > -1 ? $16 : 0 - $16 | 0) | 0) > 131071) _luaX_syntaxerror(HEAP32[$fs + 8 >> 2] | 0, 65576);
  HEAP32[$8 >> 2] = ($16 << 14) + 2147467264 | $9 & 16383;
  return;
 }
 if (($list | 0) == -1) return;
 $fs$idx$val$idx$val$i$pre = HEAP32[(HEAP32[$fs >> 2] | 0) + 48 >> 2] | 0;
 $$02$i = $list;
 while (1) {
  $26 = $fs$idx$val$idx$val$i$pre + ($$02$i << 2) | 0;
  $27 = HEAP32[$26 >> 2] | 0;
  $29 = ($27 >>> 14) + -131071 | 0;
  if (($29 | 0) == -1) $$0$i$i = -1; else $$0$i$i = $$02$i + 1 + $29 | 0;
  if (($$02$i | 0) > 0) {
   $34 = $fs$idx$val$idx$val$i$pre + ($$02$i + -1 << 2) | 0;
   $35 = HEAP32[$34 >> 2] | 0;
   if ((HEAP8[59568 + ($35 & 63) >> 0] | 0) < 0) {
    $$0$i$i5 = $34;
    $41 = $35;
   } else label = 17;
  } else label = 17;
  if ((label | 0) == 17) {
   label = 0;
   $$0$i$i5 = $26;
   $41 = $27;
  }
  if (($41 & 63 | 0) == 35) {
   HEAP32[$$0$i$i5 >> 2] = $41 & 8372224 | $41 >>> 23 << 6 | 34;
   $47 = ~$$02$i + $target | 0;
   if (((($47 | 0) > -1 ? $47 : 0 - $47 | 0) | 0) > 131071) {
    label = 20;
    break;
   }
   $storemerge = HEAP32[$26 >> 2] & 16383 | ($47 << 14) + 2147467264;
  } else {
   $57 = ~$$02$i + $target | 0;
   if (((($57 | 0) > -1 ? $57 : 0 - $57 | 0) | 0) > 131071) {
    label = 23;
    break;
   }
   $storemerge = $27 & 16383 | ($57 << 14) + 2147467264;
  }
  HEAP32[$26 >> 2] = $storemerge;
  if (($$0$i$i | 0) == -1) {
   label = 26;
   break;
  } else $$02$i = $$0$i$i;
 }
 if ((label | 0) == 20) _luaX_syntaxerror(HEAP32[$fs + 8 >> 2] | 0, 65576); else if ((label | 0) == 23) _luaX_syntaxerror(HEAP32[$fs + 8 >> 2] | 0, 65576); else if ((label | 0) == 26) return;
}

function _png_set_pCAL($png_ptr, $info_ptr, $purpose, $X0, $X1, $type, $nparams, $units, $params) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 $purpose = $purpose | 0;
 $X0 = $X0 | 0;
 $X1 = $X1 | 0;
 $type = $type | 0;
 $nparams = $nparams | 0;
 $units = $units | 0;
 $params = $params | 0;
 var $13 = 0, $18 = 0, $28 = 0, $29 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $46 = 0, $51 = 0, $54 = 0, $7 = 0, $i$08 = 0, $i$17 = 0, label = 0;
 if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0 | ($purpose | 0) == 0 | ($units | 0) == 0) return;
 $4 = ($nparams | 0) > 0;
 if ($4 & ($params | 0) == 0) return;
 $7 = (_strlen($purpose | 0) | 0) + 1 | 0;
 if ($type >>> 0 > 3) _png_error($png_ptr, 77272);
 if ($nparams >>> 0 > 255) _png_error($png_ptr, 77304);
 L13 : do if ($4) {
  $i$08 = 0;
  while (1) {
   $13 = HEAP32[$params + ($i$08 << 2) >> 2] | 0;
   if (!$13) {
    label = 11;
    break;
   }
   $i$08 = $i$08 + 1 | 0;
   if (!(_png_check_fp_string($13, _strlen($13 | 0) | 0) | 0)) {
    label = 11;
    break;
   }
   if (($i$08 | 0) >= ($nparams | 0)) break L13;
  }
  if ((label | 0) == 11) _png_error($png_ptr, 77336);
 } while (0);
 $18 = _png_malloc_warn($png_ptr, $7) | 0;
 HEAP32[$info_ptr + 208 >> 2] = $18;
 if (!$18) {
  _png_warning($png_ptr, 77376);
  return;
 }
 _memcpy($18 | 0, $purpose | 0, $7 | 0) | 0;
 HEAP32[$info_ptr + 212 >> 2] = $X0;
 HEAP32[$info_ptr + 216 >> 2] = $X1;
 HEAP8[$info_ptr + 228 >> 0] = $type;
 HEAP8[$info_ptr + 229 >> 0] = $nparams;
 $28 = (_strlen($units | 0) | 0) + 1 | 0;
 $29 = _png_malloc_warn($png_ptr, $28) | 0;
 HEAP32[$info_ptr + 220 >> 2] = $29;
 if (!$29) {
  _png_warning($png_ptr, 77416);
  return;
 }
 _memcpy($29 | 0, $units | 0, $28 | 0) | 0;
 $33 = ($nparams << 2) + 4 | 0;
 $34 = _png_malloc_warn($png_ptr, $33) | 0;
 $35 = $info_ptr + 224 | 0;
 HEAP32[$35 >> 2] = $34;
 if (!$34) {
  _png_warning($png_ptr, 77456);
  return;
 }
 _memset($34 | 0, 0, $33 | 0) | 0;
 L34 : do if ($4) {
  $i$17 = 0;
  while (1) {
   $37 = $params + ($i$17 << 2) | 0;
   $40 = (_strlen(HEAP32[$37 >> 2] | 0) | 0) + 1 | 0;
   $41 = _png_malloc_warn($png_ptr, $40) | 0;
   HEAP32[(HEAP32[$35 >> 2] | 0) + ($i$17 << 2) >> 2] = $41;
   $46 = HEAP32[(HEAP32[$35 >> 2] | 0) + ($i$17 << 2) >> 2] | 0;
   if (!$46) break;
   _memcpy($46 | 0, HEAP32[$37 >> 2] | 0, $40 | 0) | 0;
   $i$17 = $i$17 + 1 | 0;
   if (($i$17 | 0) >= ($nparams | 0)) break L34;
  }
  _png_warning($png_ptr, 77496);
  return;
 } while (0);
 $51 = $info_ptr + 8 | 0;
 HEAP32[$51 >> 2] = HEAP32[$51 >> 2] | 1024;
 $54 = $info_ptr + 232 | 0;
 HEAP32[$54 >> 2] = HEAP32[$54 >> 2] | 128;
 return;
}

function _png_handle_tEXt($png_ptr, $info_ptr, $length) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 $length = $length | 0;
 var $0 = 0, $1 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $18 = 0, $2 = 0, $24 = 0, $27 = 0, $4 = 0, $5 = 0, $buffer$1$i$ph2 = 0, $buffer$1$i$ph3 = 0, $text$0 = 0, $text$0$ = 0, $text_info = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $text_info = sp;
 $0 = $png_ptr + 756 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (($1 | 0) == 1) {
  _png_crc_finish($png_ptr, $length) | 0;
  STACKTOP = sp;
  return;
 } else if ($1) label = 3;
 if ((label | 0) == 3) {
  $2 = $1 + -1 | 0;
  HEAP32[$0 >> 2] = $2;
  if (($2 | 0) == 1) {
   _png_crc_finish($png_ptr, $length) | 0;
   _png_chunk_benign_error($png_ptr, 76176);
   STACKTOP = sp;
   return;
  }
 }
 $4 = $png_ptr + 208 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 if (!($5 & 1)) _png_chunk_error($png_ptr, 75496);
 if ($5 & 4) HEAP32[$4 >> 2] = $5 | 8;
 $11 = $length + 1 | 0;
 $12 = $png_ptr + 788 | 0;
 $13 = HEAP32[$12 >> 2] | 0;
 if (!$13) label = 12; else {
  $15 = $png_ptr + 792 | 0;
  if ((HEAP32[$15 >> 2] | 0) >>> 0 < $11 >>> 0) {
   HEAP32[$12 >> 2] = 0;
   HEAP32[$15 >> 2] = 0;
   _png_free($png_ptr, $13);
   label = 12;
  } else {
   $buffer$1$i$ph2 = $13;
   label = 15;
  }
 }
 do if ((label | 0) == 12) {
  $18 = _png_malloc_base($png_ptr, $11) | 0;
  if ($18) {
   HEAP32[$12 >> 2] = $18;
   HEAP32[$png_ptr + 792 >> 2] = $11;
   if (!$png_ptr) {
    $buffer$1$i$ph3 = $18;
    break;
   } else {
    $buffer$1$i$ph2 = $18;
    label = 15;
    break;
   }
  }
  _png_chunk_warning($png_ptr, 77120);
  _png_chunk_benign_error($png_ptr, 75712);
  STACKTOP = sp;
  return;
 } while (0);
 if ((label | 0) == 15) {
  _png_read_data($png_ptr, $buffer$1$i$ph2, $length);
  _png_calculate_crc($png_ptr, $buffer$1$i$ph2, $length);
  $buffer$1$i$ph3 = $buffer$1$i$ph2;
 }
 if (_png_crc_finish($png_ptr, 0) | 0) {
  STACKTOP = sp;
  return;
 }
 $24 = $buffer$1$i$ph3 + $length | 0;
 HEAP8[$24 >> 0] = 0;
 $text$0 = $buffer$1$i$ph3;
 while (1) {
  $27 = $text$0 + 1 | 0;
  if (!(HEAP8[$text$0 >> 0] | 0)) break; else $text$0 = $27;
 }
 $text$0$ = ($text$0 | 0) == ($24 | 0) ? $text$0 : $27;
 HEAP32[$text_info >> 2] = -1;
 HEAP32[$text_info + 4 >> 2] = $buffer$1$i$ph3;
 HEAP32[$text_info + 20 >> 2] = 0;
 HEAP32[$text_info + 24 >> 2] = 0;
 HEAP32[$text_info + 16 >> 2] = 0;
 HEAP32[$text_info + 8 >> 2] = $text$0$;
 HEAP32[$text_info + 12 >> 2] = _strlen($text$0$ | 0) | 0;
 if (!(_png_set_text_2($png_ptr, $info_ptr, $text_info, 1) | 0)) {
  STACKTOP = sp;
  return;
 }
 _png_warning($png_ptr, 76200);
 STACKTOP = sp;
 return;
}

function _png_set_unknown_chunks($png_ptr, $info_ptr, $unknowns, $num_unknowns) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 $unknowns = $unknowns | 0;
 $num_unknowns = $num_unknowns | 0;
 var $$014 = 0, $$05 = 0, $$1$i = 0, $11 = 0, $17 = 0, $18 = 0, $23 = 0, $29 = 0, $32 = 0, $37 = 0, $38 = 0, $4 = 0, $42 = 0, $6 = 0, $8 = 0, $np$06 = 0, $np$1 = 0, label = 0;
 if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0 | ($num_unknowns | 0) < 1 | ($unknowns | 0) == 0) return;
 $4 = $info_ptr + 236 | 0;
 $6 = $info_ptr + 240 | 0;
 $8 = _png_realloc_array($png_ptr, HEAP32[$4 >> 2] | 0, HEAP32[$6 >> 2] | 0, $num_unknowns, 20) | 0;
 if (!$8) {
  _png_chunk_report($png_ptr, 77960, 1);
  return;
 }
 _png_free($png_ptr, HEAP32[$4 >> 2] | 0);
 HEAP32[$4 >> 2] = $8;
 $11 = $info_ptr + 232 | 0;
 HEAP32[$11 >> 2] = HEAP32[$11 >> 2] | 512;
 if (($num_unknowns | 0) <= 0) return;
 $17 = $png_ptr + 208 | 0;
 $$014 = $unknowns;
 $$05 = $num_unknowns;
 $np$06 = $8 + ((HEAP32[$6 >> 2] | 0) * 20 | 0) | 0;
 while (1) {
  $18 = HEAPU8[$$014 >> 0] | HEAPU8[$$014 + 1 >> 0] << 8 | HEAPU8[$$014 + 2 >> 0] << 16 | HEAPU8[$$014 + 3 >> 0] << 24;
  HEAP8[$np$06 >> 0] = $18;
  HEAP8[$np$06 + 1 >> 0] = $18 >> 8;
  HEAP8[$np$06 + 2 >> 0] = $18 >> 16;
  HEAP8[$np$06 + 3 >> 0] = $18 >> 24;
  HEAP8[$np$06 + 4 >> 0] = 0;
  $23 = (HEAPU8[$$014 + 16 >> 0] | 0) & 11;
  if (!$23) {
   if (HEAP32[$17 >> 2] & 32768) {
    label = 9;
    break;
   }
   _png_app_warning($png_ptr, 78016);
   $29 = HEAP32[$17 >> 2] & 11;
   if (!$29) {
    label = 9;
    break;
   } else $$1$i = $29;
  } else $$1$i = $23;
  while (1) {
   $32 = $$1$i & 0 - $$1$i;
   if (($$1$i | 0) == ($32 | 0)) break; else $$1$i = $32 ^ $$1$i;
  }
  HEAP8[$np$06 + 16 >> 0] = $$1$i;
  $37 = $$014 + 12 | 0;
  $38 = HEAP32[$37 >> 2] | 0;
  do if (!$38) {
   HEAP32[$np$06 + 8 >> 2] = 0;
   HEAP32[$np$06 + 12 >> 2] = 0;
   label = 16;
  } else {
   $42 = _png_malloc_base($png_ptr, $38) | 0;
   HEAP32[$np$06 + 8 >> 2] = $42;
   if (!$42) {
    _png_chunk_report($png_ptr, 77984, 1);
    $np$1 = $np$06;
    break;
   } else {
    _memcpy($42 | 0, HEAP32[$$014 + 8 >> 2] | 0, HEAP32[$37 >> 2] | 0) | 0;
    HEAP32[$np$06 + 12 >> 2] = HEAP32[$37 >> 2];
    label = 16;
    break;
   }
  } while (0);
  if ((label | 0) == 16) {
   label = 0;
   HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1;
   $np$1 = $np$06 + 20 | 0;
  }
  $$05 = $$05 + -1 | 0;
  if (($$05 | 0) <= 0) {
   label = 18;
   break;
  } else {
   $$014 = $$014 + 20 | 0;
   $np$06 = $np$1;
  }
 }
 if ((label | 0) == 9) _png_error($png_ptr, 78072); else if ((label | 0) == 18) return;
}

function _surface_get_pixel($s, $x, $y, $red, $green, $blue, $alpha, $current_on) {
 $s = $s | 0;
 $x = $x | 0;
 $y = $y | 0;
 $red = $red | 0;
 $green = $green | 0;
 $blue = $blue | 0;
 $alpha = $alpha | 0;
 $current_on = $current_on | 0;
 var $$pre$phi3Z2D = 0, $$pre$phi5Z2D = 0, $$pre$phi7Z2D = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $21 = 0, $24 = 0, $25 = 0, $27 = 0, $3 = 0, $38 = 0, $39 = 0, $vararg_buffer = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $vararg_buffer5 = sp + 24 | 0;
 $vararg_buffer = sp;
 if (!$s) ___assert_fail(23264, 16096, 288, 16208);
 if (!$current_on) ___assert_fail(16232, 16096, 289, 16208);
 if (($s | 0) == ($current_on | 0)) ___assert_fail(16248, 16096, 290, 16208);
 $3 = $s + 44 | 0;
 if (!(HEAP8[$3 >> 0] | 0)) {
  HEAP8[$s + 25 >> 0] = 0;
  HEAP8[$3 >> 0] = 0;
  if (!(HEAP8[$s + 24 >> 0] | 0)) _surface_create_fbo($s); else _glBindFramebuffer(36160, HEAP32[$s + 36 >> 2] | 0);
  HEAP8[$3 >> 0] = 1;
  $12 = $s + 40 | 0;
  $13 = HEAP32[$12 >> 2] | 0;
  $15 = $s + 4 | 0;
  if (!$13) {
   $17 = $s + 8 | 0;
   $21 = _xmalloc(Math_imul(HEAP32[$15 >> 2] << 2, HEAP32[$17 >> 2] | 0) | 0) | 0;
   HEAP32[$12 >> 2] = $21;
   $$pre$phi3Z2D = $17;
   $24 = $21;
  } else {
   $$pre$phi3Z2D = $s + 8 | 0;
   $24 = $13;
  }
  _glReadPixels(0, 0, HEAP32[$15 >> 2] | 0, HEAP32[$$pre$phi3Z2D >> 2] | 0, 6408, 5121, $24 | 0);
  $25 = _glGetError() | 0;
  if ($25) {
   $27 = _getGLError($25) | 0;
   HEAP32[$vararg_buffer >> 2] = 16096;
   HEAP32[$vararg_buffer + 4 >> 2] = 300;
   HEAP32[$vararg_buffer + 8 >> 2] = 16208;
   HEAP32[$vararg_buffer + 12 >> 2] = $27;
   HEAP32[$vararg_buffer + 16 >> 2] = 62584;
   _log_internal(3, 21800, 18624, $vararg_buffer);
   _exit(1);
  }
  HEAP8[$current_on + 25 >> 0] = 0;
  HEAP8[$current_on + 44 >> 0] = 0;
  if (!(HEAP8[$current_on + 24 >> 0] | 0)) _surface_create_fbo($current_on); else _glBindFramebuffer(36160, HEAP32[$current_on + 36 >> 2] | 0);
  HEAP32[$vararg_buffer5 >> 2] = 16096;
  HEAP32[$vararg_buffer5 + 4 >> 2] = 303;
  HEAP32[$vararg_buffer5 + 8 >> 2] = 16208;
  _log_internal(3, 21800, 16264, $vararg_buffer5);
  $$pre$phi5Z2D = $15;
  $$pre$phi7Z2D = $12;
 } else {
  $$pre$phi5Z2D = $s + 4 | 0;
  $$pre$phi7Z2D = $s + 40 | 0;
 }
 $38 = (Math_imul(HEAP32[$$pre$phi5Z2D >> 2] | 0, $y) | 0) + $x << 2;
 $39 = HEAP32[$$pre$phi7Z2D >> 2] | 0;
 HEAP32[$red >> 2] = HEAPU8[$39 + $38 >> 0];
 HEAP32[$green >> 2] = HEAPU8[$39 + ($38 | 1) >> 0];
 HEAP32[$blue >> 2] = HEAPU8[$39 + ($38 | 2) >> 0];
 HEAP32[$alpha >> 2] = HEAPU8[$39 + ($38 | 3) >> 0];
 STACKTOP = sp;
 return;
}

function _db_getinfo($L) {
 $L = $L | 0;
 var $$0 = 0, $$0$i = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, $ar = 0, $options$0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $vararg_buffer = sp;
 $ar = sp + 4 | 0;
 if ((_lua_type($L, 1) | 0) == 8) {
  $$0$i = _lua_tothread($L, 1) | 0;
  $4 = 1;
 } else {
  $$0$i = $L;
  $4 = 0;
 }
 $3 = $4 | 2;
 $5 = _luaL_optlstring($L, $3, 66688, 0) | 0;
 $6 = $4 + 1 | 0;
 if ((_lua_type($L, $6) | 0) == 6) {
  HEAP32[$vararg_buffer >> 2] = $5;
  $9 = _lua_pushfstring($L, 66696, $vararg_buffer) | 0;
  _lua_pushvalue($L, $6);
  _lua_xmove($L, $$0$i, 1);
  $options$0 = $9;
 } else if (!(_lua_getstack($$0$i, _luaL_checkinteger($L, $6) | 0, $ar) | 0)) {
  _lua_pushnil($L);
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 } else $options$0 = $5;
 if (!(_lua_getinfo($$0$i, $options$0, $ar) | 0)) {
  $$0 = _luaL_argerror($L, $3, 66704) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _lua_createtable($L, 0, 0);
 if (_strchr($options$0, 83) | 0) {
  _lua_pushstring($L, HEAP32[$ar + 16 >> 2] | 0) | 0;
  _lua_setfield($L, -2, 66720);
  _lua_pushstring($L, $ar + 36 | 0) | 0;
  _lua_setfield($L, -2, 66728);
  _lua_pushinteger($L, HEAP32[$ar + 24 >> 2] | 0);
  _lua_setfield($L, -2, 66744);
  _lua_pushinteger($L, HEAP32[$ar + 28 >> 2] | 0);
  _lua_setfield($L, -2, 66760);
  _lua_pushstring($L, HEAP32[$ar + 12 >> 2] | 0) | 0;
  _lua_setfield($L, -2, 66776);
 }
 if (_strchr($options$0, 108) | 0) {
  _lua_pushinteger($L, HEAP32[$ar + 20 >> 2] | 0);
  _lua_setfield($L, -2, 66784);
 }
 if (_strchr($options$0, 117) | 0) {
  _lua_pushinteger($L, HEAPU8[$ar + 32 >> 0] | 0);
  _lua_setfield($L, -2, 66800);
  _lua_pushinteger($L, HEAPU8[$ar + 33 >> 0] | 0);
  _lua_setfield($L, -2, 66808);
  _lua_pushboolean($L, HEAP8[$ar + 34 >> 0] | 0);
  _lua_setfield($L, -2, 66816);
 }
 if (_strchr($options$0, 110) | 0) {
  _lua_pushstring($L, HEAP32[$ar + 4 >> 2] | 0) | 0;
  _lua_setfield($L, -2, 66832);
  _lua_pushstring($L, HEAP32[$ar + 8 >> 2] | 0) | 0;
  _lua_setfield($L, -2, 66840);
 }
 if (_strchr($options$0, 116) | 0) {
  _lua_pushboolean($L, HEAP8[$ar + 35 >> 0] | 0);
  _lua_setfield($L, -2, 66856);
 }
 if (_strchr($options$0, 76) | 0) {
  if (($$0$i | 0) == ($L | 0)) _lua_rotate($L, -2, 1); else _lua_xmove($$0$i, $L, 1);
  _lua_setfield($L, -2, 66872);
 }
 if (!(_strchr($options$0, 102) | 0)) {
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (($$0$i | 0) == ($L | 0)) _lua_rotate($L, -2, 1); else _lua_xmove($$0$i, $L, 1);
 _lua_setfield($L, -2, 66888);
 $$0 = 1;
 STACKTOP = sp;
 return $$0 | 0;
}

function _mlua_new_system($L) {
 $L = $L | 0;
 var $1 = 0.0, $116 = 0.0, $134 = 0.0, $19 = 0.0, $2 = 0.0, $27 = 0.0, $4 = 0, $42 = 0, $43 = 0, $59 = 0, $60 = 0, $76 = 0, $77 = 0, $98 = 0.0;
 if (!$L) ___assert_fail(23976, 8472, 31, 8552); else {
  $1 = +_luaL_checknumber($L, 1);
  $2 = +_luaL_checknumber($L, 2);
  $4 = _system_new($1, $2, _luaL_optinteger($L, 3, 256) | 0) | 0;
  HEAPF32[$4 + 428 >> 2] = 0.0;
  HEAPF32[$4 + 432 >> 2] = 6.2831854820251465;
  HEAPF32[$4 + 8 >> 2] = 0.0;
  HEAPF32[$4 + 12 >> 2] = 5.0;
  HEAPF32[$4 + 16 >> 2] = 5.0;
  HEAPF32[$4 + 20 >> 2] = 1.0;
  HEAPF32[$4 + 24 >> 2] = 5.0;
  HEAPF32[$4 + 28 >> 2] = 5.0;
  HEAPF32[$4 + 436 >> 2] = 3.0;
  HEAPF32[$4 + 440 >> 2] = 10.0;
  $19 = +(_rand() | 0) * 4.656612873077393e-10 * 20.0 + -10.0;
  HEAPF32[$4 + 444 >> 2] = $19;
  HEAPF32[$4 + 448 >> 2] = $19 + 3.0;
  $27 = +(_rand() | 0) * 4.656612873077393e-10 * 90.0 + 10.0;
  HEAPF32[$4 + 452 >> 2] = $27;
  HEAPF32[$4 + 456 >> 2] = $27 + (+(_rand() | 0) * 4.656612873077393e-10 * 90.0 + 10.0);
  HEAPF32[$4 + 204 >> 2] = 0.0;
  $42 = ~~(+(_rand() | 0) * 4.656612873077393e-10 * 125.0 + 0.0) & 255;
  $43 = $4 + 208 | 0;
  HEAP8[$43 >> 0] = $42;
  HEAP8[$4 + 209 >> 0] = ~~(+(_rand() | 0) * 4.656612873077393e-10 * 50.0 + 0.0 + +($42 & 255 | 0));
  $59 = ~~(+(_rand() | 0) * 4.656612873077393e-10 * 125.0 + 0.0) & 255;
  $60 = $4 + 210 | 0;
  HEAP8[$60 >> 0] = $59;
  HEAP8[$4 + 211 >> 0] = ~~(+(_rand() | 0) * 4.656612873077393e-10 * 50.0 + 0.0 + +($59 & 255 | 0));
  $76 = ~~(+(_rand() | 0) * 4.656612873077393e-10 * 125.0 + 0.0) & 255;
  $77 = $4 + 212 | 0;
  HEAP8[$77 >> 0] = $76;
  HEAP8[$4 + 213 >> 0] = ~~(+(_rand() | 0) * 4.656612873077393e-10 * 50.0 + 0.0 + +($76 & 255 | 0));
  HEAPF32[$4 + 216 >> 2] = 1.0;
  HEAP8[$4 + 220 >> 0] = ~~(+(_rand() | 0) * 4.656612873077393e-10 * 125.0 + 0.0);
  $98 = +(HEAPU8[$43 >> 0] | 0 | 0);
  HEAP8[$4 + 221 >> 0] = ~~($98 + (+(_rand() | 0) * 4.656612873077393e-10 * 50.0 + 0.0));
  HEAP8[$4 + 222 >> 0] = ~~(+(_rand() | 0) * 4.656612873077393e-10 * 125.0 + 0.0);
  $116 = +(HEAPU8[$60 >> 0] | 0 | 0);
  HEAP8[$4 + 223 >> 0] = ~~($116 + (+(_rand() | 0) * 4.656612873077393e-10 * 50.0 + 0.0));
  HEAP8[$4 + 224 >> 0] = ~~(+(_rand() | 0) * 4.656612873077393e-10 * 125.0 + 0.0);
  $134 = +(HEAPU8[$77 >> 0] | 0 | 0);
  HEAP8[$4 + 225 >> 0] = ~~($134 + (+(_rand() | 0) * 4.656612873077393e-10 * 50.0 + 0.0));
  HEAPF32[$4 + 460 >> 2] = +(_rand() | 0) * 4.656612873077393e-10 * 18.0 + 1.0;
  HEAPF32[$4 + 420 >> 2] = 0.0;
  HEAPF32[$4 + 424 >> 2] = 0.0;
  _push_system($L, $4);
  return 1;
 }
 return 0;
}

function _luaV_lessequal($L, $l, $r) {
 $L = $L | 0;
 $l = $l | 0;
 $r = $r | 0;
 var $$0 = 0, $$0$i1 = 0, $0 = 0, $1 = 0, $15 = 0, $23 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $39 = 0, $41 = 0, $44 = 0, $49 = 0, $53 = 0, $55 = 0, $59 = 0, $l$01$i = 0, $ll$02$i = 0, $lr$04$i = 0, $r$03$i = 0, $storemerge1$i$ph = 0.0, $storemerge1$i3$ph = 0.0, $x$i = 0, $x$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $x$i2 = sp + 4 | 0;
 $x$i = sp;
 $0 = $l + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 do if (($1 | 0) == 19) {
  if ((HEAP32[$r + 4 >> 2] | 0) != 19) {
   HEAPF32[$x$i >> 2] = +(HEAP32[$l >> 2] | 0);
   $59 = $x$i;
   $storemerge1$i$ph = +HEAPF32[$x$i >> 2];
   label = 7;
   break;
  }
  $$0 = (HEAP32[$l >> 2] | 0) <= (HEAP32[$r >> 2] | 0) & 1;
  STACKTOP = sp;
  return $$0 | 0;
 } else if (($1 | 0) == 3) {
  $59 = $x$i;
  $storemerge1$i$ph = +HEAPF32[$l >> 2];
  label = 7;
 } else $23 = $1; while (0);
 do if ((label | 0) == 7) {
  $15 = HEAP32[$r + 4 >> 2] | 0;
  if (($15 | 0) == 3) $storemerge1$i3$ph = +HEAPF32[$r >> 2]; else if (($15 | 0) == 19) {
   HEAPF32[$x$i2 >> 2] = +(HEAP32[$r >> 2] | 0);
   $storemerge1$i3$ph = +HEAPF32[$x$i2 >> 2];
  } else {
   $23 = HEAP32[$0 >> 2] | 0;
   break;
  }
  $$0 = $storemerge1$i$ph <= $storemerge1$i3$ph & 1;
  STACKTOP = sp;
  return $$0 | 0;
 } while (0);
 if (($23 & 15 | 0) == 4) if ((HEAP32[$r + 4 >> 2] & 15 | 0) == 4) {
  $29 = HEAP32[$l >> 2] | 0;
  $30 = HEAP32[$r >> 2] | 0;
  $31 = $29 + 24 | 0;
  $32 = $30 + 24 | 0;
  $33 = _strcoll($31, $32) | 0;
  L21 : do if (!$33) {
   $l$01$i = $31;
   $ll$02$i = HEAP32[$29 + 12 >> 2] | 0;
   $lr$04$i = HEAP32[$30 + 12 >> 2] | 0;
   $r$03$i = $32;
   while (1) {
    $39 = _strlen($l$01$i | 0) | 0;
    $41 = ($39 | 0) == ($ll$02$i | 0);
    if (($39 | 0) == ($lr$04$i | 0)) break;
    if ($41) {
     $$0$i1 = -1;
     break L21;
    }
    $44 = $39 + 1 | 0;
    $l$01$i = $l$01$i + $44 | 0;
    $r$03$i = $r$03$i + $44 | 0;
    $49 = _strcoll($l$01$i, $r$03$i) | 0;
    if ($49) {
     $$0$i1 = $49;
     break L21;
    } else {
     $ll$02$i = $ll$02$i - $44 | 0;
     $lr$04$i = $lr$04$i - $44 | 0;
    }
   }
   $$0$i1 = $41 & 1 ^ 1;
  } else $$0$i1 = $33; while (0);
  $$0 = ($$0$i1 | 0) < 1 & 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $53 = _luaT_callorderTM($L, $l, $r, 21) | 0;
 if (($53 | 0) > -1) {
  $$0 = $53;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $55 = _luaT_callorderTM($L, $r, $l, 20) | 0;
 if (($55 | 0) < 0) _luaG_ordererror($L, $l, $r);
 $$0 = ($55 | 0) == 0 & 1;
 STACKTOP = sp;
 return $$0 | 0;
}

function _display_init() {
 var $$0 = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $15 = 0, $20 = 0, $22 = 0, $25 = 0, $26 = 0, $5 = 0, $error$i$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $vararg_buffer8 = sp + 32 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $error$i$i = sp + 52 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 44 | 0;
 HEAP32[4522] = _buffer_new(0, 24576) | 0;
 HEAP32[4532] = _camera_new() | 0;
 HEAP32[4523] = 0;
 HEAP32[4524] = 0;
 HEAP32[4525] = 0;
 HEAP32[4526] = 0;
 HEAP32[4527] = 0;
 HEAP32[4528] = 0;
 HEAP32[4529] = 0;
 HEAP32[4530] = HEAP32[4522];
 HEAP32[4531] = -1;
 HEAP32[4533] = 0;
 HEAP32[4534] = 0;
 HEAP8[18140] = 0;
 $5 = _SDL_InitSubSystem(32) | 0;
 if (($5 | 0) < 0) {
  HEAP32[$vararg_buffer >> 2] = _SDL_GetError() | 0;
  _log_internal(0, 19424, 18144, $vararg_buffer);
  $$0 = $5;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[$0 >> 2] = 2;
 HEAP32[$1 >> 2] = 2;
 HEAP32[4533] = 2;
 HEAP32[4534] = 2;
 _SDL_SetVideoMode(2, 2, 32, 67108864) | 0;
 _SDL_GL_SetSwapInterval(1) | 0;
 _SDL_GetWindowSize(HEAP32[4523] | 0, $0 | 0, $1 | 0);
 $11 = _display_new_surface(HEAP32[$0 >> 2] | 0, HEAP32[$1 >> 2] | 0, 1) | 0;
 HEAP32[4525] = $11;
 _display_draw_on($11);
 $12 = _display_new_shader(16536, 17144, 17232, $error$i$i) | 0;
 if (!$12) {
  HEAP32[$vararg_buffer8 >> 2] = HEAP32[$error$i$i >> 2];
  _log_internal(0, 19424, 19384, $vararg_buffer8);
  _free(HEAP32[$error$i$i >> 2] | 0);
  HEAP32[4526] = 0;
  _log_internal(0, 19424, 18192, sp + 40 | 0);
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[4526] = $12;
 _buffer_check_empty(HEAP32[4530] | 0);
 HEAP32[4527] = $12;
 $15 = HEAP32[4530] | 0;
 if (!$15) ___assert_fail(23160, 19880, 112, 19312);
 HEAP32[$15 + 60 >> 2] = $12;
 _buffer_allocate(HEAP32[4522] | 0);
 _buffer_check_empty(HEAP32[4530] | 0);
 _glBlendFunc(770, 771);
 _glBlendEquation(32774);
 _glEnable(3042);
 _glHint(33170, 4354);
 $20 = _glGetError() | 0;
 if ($20) {
  $22 = _getGLError($20) | 0;
  HEAP32[$vararg_buffer1 >> 2] = 18224;
  HEAP32[$vararg_buffer1 + 4 >> 2] = 122;
  HEAP32[$vararg_buffer1 + 8 >> 2] = 19360;
  HEAP32[$vararg_buffer1 + 12 >> 2] = $22;
  HEAP32[$vararg_buffer1 + 16 >> 2] = 62584;
  _log_internal(3, 19424, 18624, $vararg_buffer1);
  _exit(1);
 }
 $25 = HEAP32[4522] | 0;
 $26 = HEAP32[4532] | 0;
 if (!$25) ___assert_fail(23160, 19880, 120, 19336);
 if (!$26) ___assert_fail(23168, 19880, 121, 19336);
 HEAP32[$25 + 64 >> 2] = $26;
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _memchr($src, $c, $n) {
 $src = $src | 0;
 $c = $c | 0;
 $n = $n | 0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $13 = 0, $15 = 0, $17 = 0, $20 = 0, $26 = 0, $27 = 0, $32 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0;
 $0 = $c & 255;
 $4 = ($n | 0) != 0;
 L1 : do if ($4 & ($src & 3 | 0) != 0) {
  $5 = $c & 255;
  $$019 = $n;
  $s$020 = $src;
  while (1) {
   if ((HEAP8[$s$020 >> 0] | 0) == $5 << 24 >> 24) {
    $$0$lcssa44 = $$019;
    $s$0$lcssa43 = $s$020;
    label = 6;
    break L1;
   }
   $8 = $s$020 + 1 | 0;
   $9 = $$019 + -1 | 0;
   $13 = ($9 | 0) != 0;
   if ($13 & ($8 & 3 | 0) != 0) {
    $$019 = $9;
    $s$020 = $8;
   } else {
    $$0$lcssa = $9;
    $$lcssa = $13;
    $s$0$lcssa = $8;
    label = 5;
    break;
   }
  }
 } else {
  $$0$lcssa = $n;
  $$lcssa = $4;
  $s$0$lcssa = $src;
  label = 5;
 } while (0);
 if ((label | 0) == 5) if ($$lcssa) {
  $$0$lcssa44 = $$0$lcssa;
  $s$0$lcssa43 = $s$0$lcssa;
  label = 6;
 } else {
  $$3 = 0;
  $s$2 = $s$0$lcssa;
 }
 L8 : do if ((label | 0) == 6) {
  $15 = $c & 255;
  if ((HEAP8[$s$0$lcssa43 >> 0] | 0) == $15 << 24 >> 24) {
   $$3 = $$0$lcssa44;
   $s$2 = $s$0$lcssa43;
  } else {
   $17 = Math_imul($0, 16843009) | 0;
   L11 : do if ($$0$lcssa44 >>> 0 > 3) {
    $$110 = $$0$lcssa44;
    $w$011 = $s$0$lcssa43;
    while (1) {
     $20 = HEAP32[$w$011 >> 2] ^ $17;
     if (($20 & -2139062144 ^ -2139062144) & $20 + -16843009) {
      $$110$lcssa = $$110;
      $w$011$lcssa = $w$011;
      break;
     }
     $26 = $w$011 + 4 | 0;
     $27 = $$110 + -4 | 0;
     if ($27 >>> 0 > 3) {
      $$110 = $27;
      $w$011 = $26;
     } else {
      $$1$lcssa = $27;
      $w$0$lcssa = $26;
      label = 11;
      break L11;
     }
    }
    $$24 = $$110$lcssa;
    $s$15 = $w$011$lcssa;
   } else {
    $$1$lcssa = $$0$lcssa44;
    $w$0$lcssa = $s$0$lcssa43;
    label = 11;
   } while (0);
   if ((label | 0) == 11) if (!$$1$lcssa) {
    $$3 = 0;
    $s$2 = $w$0$lcssa;
    break;
   } else {
    $$24 = $$1$lcssa;
    $s$15 = $w$0$lcssa;
   }
   while (1) {
    if ((HEAP8[$s$15 >> 0] | 0) == $15 << 24 >> 24) {
     $$3 = $$24;
     $s$2 = $s$15;
     break L8;
    }
    $32 = $s$15 + 1 | 0;
    $$24 = $$24 + -1 | 0;
    if (!$$24) {
     $$3 = 0;
     $s$2 = $32;
     break;
    } else $s$15 = $32;
   }
  }
 } while (0);
 return (($$3 | 0) != 0 ? $s$2 : 0) | 0;
}

function __ZN12b2MotorJoint4DumpEv($this) {
 $this = $this | 0;
 var $16 = 0.0, $3 = 0, $7 = 0, $vararg_buffer1 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $vararg_buffer25 = sp + 80 | 0;
 $vararg_buffer22 = sp + 72 | 0;
 $vararg_buffer19 = sp + 64 | 0;
 $vararg_buffer16 = sp + 56 | 0;
 $vararg_buffer13 = sp + 48 | 0;
 $vararg_buffer9 = sp + 32 | 0;
 $vararg_buffer6 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $3 = HEAP32[(HEAP32[$this + 48 >> 2] | 0) + 8 >> 2] | 0;
 $7 = HEAP32[(HEAP32[$this + 52 >> 2] | 0) + 8 >> 2] | 0;
 __Z5b2LogPKcz(84448, sp);
 HEAP32[$vararg_buffer1 >> 2] = $3;
 __Z5b2LogPKcz(86496, $vararg_buffer1);
 HEAP32[$vararg_buffer3 >> 2] = $7;
 __Z5b2LogPKcz(86528, $vararg_buffer3);
 HEAP32[$vararg_buffer6 >> 2] = HEAPU8[$this + 61 >> 0];
 __Z5b2LogPKcz(86560, $vararg_buffer6);
 $16 = +HEAPF32[$this + 72 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 68 >> 2];
 HEAP32[$vararg_buffer9 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer9 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr12 = $vararg_buffer9 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $16;
 HEAP32[$vararg_ptr12 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr12 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(84472, $vararg_buffer9);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 76 >> 2];
 HEAP32[$vararg_buffer13 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer13 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(84520, $vararg_buffer13);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 92 >> 2];
 HEAP32[$vararg_buffer16 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer16 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(84552, $vararg_buffer16);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 96 >> 2];
 HEAP32[$vararg_buffer19 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer19 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(84584, $vararg_buffer19);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 100 >> 2];
 HEAP32[$vararg_buffer22 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer22 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(84616, $vararg_buffer22);
 HEAP32[$vararg_buffer25 >> 2] = HEAP32[$this + 56 >> 2];
 __Z5b2LogPKcz(86896, $vararg_buffer25);
 STACKTOP = sp;
 return;
}

function __ZN15b2FrictionJoint4DumpEv($this) {
 $this = $this | 0;
 var $16 = 0.0, $22 = 0.0, $3 = 0, $7 = 0, $vararg_buffer1 = 0, $vararg_buffer13 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $vararg_buffer23 = sp + 80 | 0;
 $vararg_buffer20 = sp + 72 | 0;
 $vararg_buffer17 = sp + 64 | 0;
 $vararg_buffer13 = sp + 48 | 0;
 $vararg_buffer9 = sp + 32 | 0;
 $vararg_buffer6 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $3 = HEAP32[(HEAP32[$this + 48 >> 2] | 0) + 8 >> 2] | 0;
 $7 = HEAP32[(HEAP32[$this + 52 >> 2] | 0) + 8 >> 2] | 0;
 __Z5b2LogPKcz(83688, sp);
 HEAP32[$vararg_buffer1 >> 2] = $3;
 __Z5b2LogPKcz(86496, $vararg_buffer1);
 HEAP32[$vararg_buffer3 >> 2] = $7;
 __Z5b2LogPKcz(86528, $vararg_buffer3);
 HEAP32[$vararg_buffer6 >> 2] = HEAPU8[$this + 61 >> 0];
 __Z5b2LogPKcz(86560, $vararg_buffer6);
 $16 = +HEAPF32[$this + 72 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 68 >> 2];
 HEAP32[$vararg_buffer9 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer9 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr12 = $vararg_buffer9 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $16;
 HEAP32[$vararg_ptr12 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr12 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(86600, $vararg_buffer9);
 $22 = +HEAPF32[$this + 80 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 76 >> 2];
 HEAP32[$vararg_buffer13 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer13 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr16 = $vararg_buffer13 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $22;
 HEAP32[$vararg_ptr16 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr16 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(86648, $vararg_buffer13);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 96 >> 2];
 HEAP32[$vararg_buffer17 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer17 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(84552, $vararg_buffer17);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 100 >> 2];
 HEAP32[$vararg_buffer20 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer20 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(84584, $vararg_buffer20);
 HEAP32[$vararg_buffer23 >> 2] = HEAP32[$this + 56 >> 2];
 __Z5b2LogPKcz(86896, $vararg_buffer23);
 STACKTOP = sp;
 return;
}

function _main($argc, $argv) {
 $argc = $argc | 0;
 $argv = $argv | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $4 = 0, $filename$03 = 0, $filename$1 = 0, $filename$2 = 0, $i$04 = 0, $i1$01 = 0, $newfilename$0 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $zipname$0$lcssa10 = 0, $zipname$0$lcssa11 = 0, $zipname$02 = 0, $zipname$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer2 = sp + 8 | 0;
 $vararg_buffer = sp;
 $0 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $argc | 0) + 15 & -16) | 0;
 $1 = ($argc | 0) > 1;
 if ($1) {
  $filename$03 = 0;
  $i$04 = 1;
  $zipname$02 = 1128;
  while (1) {
   $2 = $0 + $i$04 | 0;
   HEAP8[$2 >> 0] = 0;
   $4 = HEAP32[$argv + ($i$04 << 2) >> 2] | 0;
   do if (!(_strncmp($4, 1144, 6) | 0)) {
    $filename$1 = $filename$03;
    $zipname$1 = $4 + 6 | 0;
   } else if (!$filename$03) {
    $filename$1 = _xstrdup($4) | 0;
    $zipname$1 = $zipname$02;
    break;
   } else {
    HEAP8[$2 >> 0] = 1;
    $filename$1 = $filename$03;
    $zipname$1 = $zipname$02;
    break;
   } while (0);
   $i$04 = $i$04 + 1 | 0;
   if (($i$04 | 0) == ($argc | 0)) break; else {
    $filename$03 = $filename$1;
    $zipname$02 = $zipname$1;
   }
  }
  if (!$filename$1) {
   $zipname$0$lcssa11 = $zipname$1;
   label = 9;
  } else if (_is_directory($filename$1) | 0) {
   if (_endswith($filename$1, 58832) | 0) {
    HEAP32[$vararg_buffer >> 2] = 1112;
    HEAP32[$vararg_buffer + 4 >> 2] = 0;
    $newfilename$0 = _strjoin($filename$1, $vararg_buffer) | 0;
   } else {
    HEAP32[$vararg_buffer2 >> 2] = 58832;
    HEAP32[$vararg_buffer2 + 4 >> 2] = 1112;
    HEAP32[$vararg_buffer2 + 8 >> 2] = 0;
    $newfilename$0 = _strjoin($filename$1, $vararg_buffer2) | 0;
   }
   _free($filename$1);
   $filename$2 = $newfilename$0;
   $zipname$0$lcssa10 = $zipname$1;
  } else {
   $filename$2 = $filename$1;
   $zipname$0$lcssa10 = $zipname$1;
  }
 } else {
  $zipname$0$lcssa11 = 1128;
  label = 9;
 }
 if ((label | 0) == 9) {
  $filename$2 = _xstrdup(1112) | 0;
  $zipname$0$lcssa10 = $zipname$0$lcssa11;
 }
 if ((_engine_init($filename$2, 60) | 0) < 0) {
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ($1) {
  $i1$01 = 1;
  do {
   if (HEAP8[$0 + $i1$01 >> 0] | 0) _dlua_add_arg(HEAP32[$argv + ($i1$01 << 2) >> 2] | 0);
   $i1$01 = $i1$01 + 1 | 0;
  } while (($i1$01 | 0) != ($argc | 0));
 }
 _emscripten_async_wget_data($zipname$0$lcssa10 | 0, $zipname$0$lcssa10 | 0, 5, 80);
 _emscripten_set_main_loop(3, 0, 1);
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _luaS_newlstr($L, $str, $l) {
 $L = $L | 0;
 $str = $str | 0;
 $l = $l | 0;
 var $$0 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $26 = 0, $34 = 0, $37 = 0, $47 = 0, $5 = 0, $58 = 0, $62 = 0, $7 = 0, $73 = 0, $75 = 0, $79 = 0, $h$0$lcssa$i$i = 0, $h$02$i$i = 0, $l1$01$i$i = 0, $list$0$i = 0, $ts$0$i = 0, $ts$02$i = 0, $ts$03$i = 0;
 if ($l >>> 0 >= 41) {
  if (($l + 1 | 0) >>> 0 > 2147483627) _luaM_toobig($L);
  $73 = HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 44 >> 2] | 0;
  $75 = _luaC_newobj($L, 20, $l + 25 | 0) | 0;
  HEAP32[$75 + 12 >> 2] = $l;
  HEAP32[$75 + 8 >> 2] = $73;
  HEAP8[$75 + 6 >> 0] = 0;
  $79 = $75 + 24 | 0;
  _memcpy($79 | 0, $str | 0, $l | 0) | 0;
  HEAP8[$79 + $l >> 0] = 0;
  $$0 = $75;
  return $$0 | 0;
 }
 $2 = HEAP32[$L + 12 >> 2] | 0;
 $5 = HEAP32[$2 + 44 >> 2] ^ $l;
 $7 = ($l >>> 5) + 1 | 0;
 if ($7 >>> 0 > $l >>> 0) $h$0$lcssa$i$i = $5; else {
  $h$02$i$i = $5;
  $l1$01$i$i = $l;
  while (1) {
   $17 = ($h$02$i$i << 5) + ($h$02$i$i >>> 2) + (HEAPU8[$str + ($l1$01$i$i + -1) >> 0] | 0) ^ $h$02$i$i;
   $l1$01$i$i = $l1$01$i$i - $7 | 0;
   if ($l1$01$i$i >>> 0 < $7 >>> 0) {
    $h$0$lcssa$i$i = $17;
    break;
   } else $h$02$i$i = $17;
  }
 }
 $20 = $2 + 32 | 0;
 $21 = HEAP32[$20 >> 2] | 0;
 $24 = $2 + 24 | 0;
 $26 = (HEAP32[$24 >> 2] | 0) + (($21 + -1 & $h$0$lcssa$i$i) << 2) | 0;
 $ts$02$i = HEAP32[$26 >> 2] | 0;
 L12 : do if ($ts$02$i) {
  $ts$03$i = $ts$02$i;
  while (1) {
   if ((HEAP32[$ts$03$i + 12 >> 2] | 0) == ($l | 0)) if (!(_memcmp($str, $ts$03$i + 24 | 0, $l) | 0)) break;
   $ts$0$i = HEAP32[$ts$03$i + 16 >> 2] | 0;
   if (!$ts$0$i) break L12; else $ts$03$i = $ts$0$i;
  }
  $34 = $ts$03$i + 5 | 0;
  $37 = (HEAPU8[$34 >> 0] | 0) ^ 3;
  if (((HEAPU8[$2 + 48 >> 0] | 0) ^ 3) & $37) {
   $$0 = $ts$03$i;
   return $$0 | 0;
  }
  HEAP8[$34 >> 0] = $37;
  $$0 = $ts$03$i;
  return $$0 | 0;
 } while (0);
 $47 = $2 + 28 | 0;
 if (($21 | 0) < 1073741824 ? (HEAP32[$47 >> 2] | 0) >= ($21 | 0) : 0) {
  _luaS_resize($L, $21 << 1);
  $list$0$i = (HEAP32[$24 >> 2] | 0) + (((HEAP32[$20 >> 2] | 0) + -1 & $h$0$lcssa$i$i) << 2) | 0;
 } else $list$0$i = $26;
 $58 = _luaC_newobj($L, 4, $l + 25 | 0) | 0;
 HEAP32[$58 + 12 >> 2] = $l;
 HEAP32[$58 + 8 >> 2] = $h$0$lcssa$i$i;
 HEAP8[$58 + 6 >> 0] = 0;
 $62 = $58 + 24 | 0;
 _memcpy($62 | 0, $str | 0, $l | 0) | 0;
 HEAP8[$62 + $l >> 0] = 0;
 HEAP32[$58 + 16 >> 2] = HEAP32[$list$0$i >> 2];
 HEAP32[$list$0$i >> 2] = $58;
 HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + 1;
 $$0 = $58;
 return $$0 | 0;
}

function _system_emit($s) {
 $s = $s | 0;
 var $1 = 0, $10 = 0.0, $13 = 0.0, $15 = 0.0, $2 = 0, $21 = 0, $23 = 0.0, $26 = 0.0, $28 = 0.0, $3 = 0, $54 = 0.0, $58 = 0.0, $65 = 0.0, $69 = 0.0, $7 = 0, $76 = 0.0, $8 = 0, $80 = 0.0, $87 = 0.0, $91 = 0.0, $94 = 0.0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 if (!$s) ___assert_fail(23264, 10392, 147, 10488);
 $1 = $s + 408 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $s + 404 | 0;
 if (($2 | 0) == (HEAP32[$3 >> 2] | 0)) {
  _xrealloc($s, $3, $2 + 1 | 0, 56, 32) | 0;
  $7 = HEAP32[$3 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = 10392;
  HEAP32[$vararg_buffer + 4 >> 2] = 151;
  HEAP32[$vararg_buffer + 8 >> 2] = 10488;
  HEAP32[$vararg_buffer + 12 >> 2] = $7;
  _log_internal(3, 10712, 10504, $vararg_buffer);
  $21 = HEAP32[$1 >> 2] | 0;
 } else $21 = $2;
 $8 = HEAP32[$s >> 2] | 0;
 $10 = +HEAPF32[$s + 412 >> 2];
 $13 = +(_rand() | 0) * 4.656612873077393e-10;
 $15 = +HEAPF32[$s + 420 >> 2];
 HEAPF32[$8 + ($21 * 56 | 0) + 4 >> 2] = $10 + ($13 * ($15 + $15) - $15);
 $23 = +HEAPF32[$s + 416 >> 2];
 $26 = +(_rand() | 0) * 4.656612873077393e-10;
 $28 = +HEAPF32[$s + 424 >> 2];
 HEAPF32[$8 + ($21 * 56 | 0) + 8 >> 2] = $23 + ($26 * ($28 + $28) - $28);
 HEAPF32[$8 + ($21 * 56 | 0) + 36 >> 2] = +(_rand() | 0) * 4.656612873077393e-10;
 HEAPF32[$8 + ($21 * 56 | 0) + 44 >> 2] = +(_rand() | 0) * 4.656612873077393e-10;
 HEAPF32[$8 + ($21 * 56 | 0) + 48 >> 2] = +(_rand() | 0) * 4.656612873077393e-10;
 HEAPF32[$8 + ($21 * 56 | 0) + 52 >> 2] = +(_rand() | 0) * 4.656612873077393e-10;
 HEAP32[$8 + ($21 * 56 | 0) + 40 >> 2] = 0;
 HEAP32[$8 + ($21 * 56 | 0) + 32 >> 2] = 0;
 $54 = +(_rand() | 0) * 4.656612873077393e-10;
 $58 = +HEAPF32[$s + 428 >> 2];
 HEAPF32[$8 + ($21 * 56 | 0) + 20 >> 2] = $58 + $54 * (+HEAPF32[$s + 432 >> 2] - $58);
 $65 = +(_rand() | 0) * 4.656612873077393e-10;
 $69 = +HEAPF32[$s + 444 >> 2];
 HEAPF32[$8 + ($21 * 56 | 0) + 16 >> 2] = $69 + $65 * (+HEAPF32[$s + 448 >> 2] - $69);
 $76 = +(_rand() | 0) * 4.656612873077393e-10;
 $80 = +HEAPF32[$s + 452 >> 2];
 HEAPF32[$8 + ($21 * 56 | 0) + 12 >> 2] = $80 + $76 * (+HEAPF32[$s + 456 >> 2] - $80);
 $87 = +(_rand() | 0) * 4.656612873077393e-10;
 $91 = +HEAPF32[$s + 436 >> 2];
 $94 = $91 + $87 * (+HEAPF32[$s + 440 >> 2] - $91);
 HEAPF32[$8 + ($21 * 56 | 0) + 28 >> 2] = $94;
 HEAPF32[$8 + ($21 * 56 | 0) + 24 >> 2] = $94;
 HEAP8[$8 + ($21 * 56 | 0) >> 0] = 0;
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + 1;
 STACKTOP = sp;
 return;
}

function _register_particle($L) {
 $L = $L | 0;
 _lua_pushcclosure($L, 237, 0);
 _lua_setfield($L, -2, 9648);
 _luaL_newmetatable($L, 10712) | 0;
 _lua_pushlstring($L, 10712, 6) | 0;
 _lua_setfield($L, -2, 13456);
 _lua_pushcclosure($L, 238, 0);
 _lua_setfield($L, -2, 9664);
 _lua_pushcclosure($L, 239, 0);
 _lua_setfield($L, -2, 9672);
 _lua_pushcclosure($L, 240, 0);
 _lua_setfield($L, -2, 65056);
 _lua_pushcclosure($L, 241, 0);
 _lua_setfield($L, -2, 13584);
 _lua_pushcclosure($L, 242, 0);
 _lua_setfield($L, -2, 13576);
 _lua_pushcclosure($L, 243, 0);
 _lua_setfield($L, -2, 9680);
 _lua_pushcclosure($L, 244, 0);
 _lua_setfield($L, -2, 9688);
 _lua_pushcclosure($L, 245, 0);
 _lua_setfield($L, -2, 9704);
 _lua_pushcclosure($L, 246, 0);
 _lua_setfield($L, -2, 9720);
 _lua_pushcclosure($L, 247, 0);
 _lua_setfield($L, -2, 9736);
 _lua_pushcclosure($L, 248, 0);
 _lua_setfield($L, -2, 9752);
 _lua_pushcclosure($L, 249, 0);
 _lua_setfield($L, -2, 9768);
 _lua_pushcclosure($L, 250, 0);
 _lua_setfield($L, -2, 9784);
 _lua_pushcclosure($L, 251, 0);
 _lua_setfield($L, -2, 9800);
 _lua_pushcclosure($L, 252, 0);
 _lua_setfield($L, -2, 9816);
 _lua_pushcclosure($L, 253, 0);
 _lua_setfield($L, -2, 9832);
 _lua_pushcclosure($L, 254, 0);
 _lua_setfield($L, -2, 9856);
 _lua_pushcclosure($L, 255, 0);
 _lua_setfield($L, -2, 9880);
 _lua_pushcclosure($L, 256, 0);
 _lua_setfield($L, -2, 9904);
 _lua_pushcclosure($L, 257, 0);
 _lua_setfield($L, -2, 9928);
 _lua_pushcclosure($L, 258, 0);
 _lua_setfield($L, -2, 9952);
 _lua_pushcclosure($L, 259, 0);
 _lua_setfield($L, -2, 9976);
 _lua_pushcclosure($L, 260, 0);
 _lua_setfield($L, -2, 1e4);
 _lua_pushcclosure($L, 261, 0);
 _lua_setfield($L, -2, 10024);
 _lua_pushcclosure($L, 262, 0);
 _lua_setfield($L, -2, 10048);
 _lua_pushcclosure($L, 263, 0);
 _lua_setfield($L, -2, 10072);
 _lua_pushcclosure($L, 264, 0);
 _lua_setfield($L, -2, 10104);
 _lua_pushcclosure($L, 265, 0);
 _lua_setfield($L, -2, 10136);
 _lua_pushcclosure($L, 266, 0);
 _lua_setfield($L, -2, 10168);
 _lua_pushcclosure($L, 267, 0);
 _lua_setfield($L, -2, 10200);
 _lua_pushcclosure($L, 268, 0);
 _lua_setfield($L, -2, 10232);
 _lua_pushcclosure($L, 269, 0);
 _lua_setfield($L, -2, 10264);
 _lua_pushcclosure($L, 270, 0);
 _lua_setfield($L, -2, 10296);
 _lua_pushcclosure($L, 271, 0);
 _lua_setfield($L, -2, 10328);
 _lua_pushcclosure($L, 272, 0);
 _lua_setfield($L, -2, 63064);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 64992);
 _lua_setfield($L, -2, 10336);
 return;
}

function _png_chunk_report($png_ptr, $message, $error) {
 $png_ptr = $png_ptr | 0;
 $message = $message | 0;
 $error = $error | 0;
 var $11 = 0, $16 = 0, $22 = 0, $24 = 0, $25 = 0, $30 = 0, $36 = 0, $38 = 0, $39 = 0, $offset$04$i$i = 0, $offset$04$i$i1 = 0, $offset$11$i$i = 0, $offset$11$i$i3 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 if (HEAP32[$png_ptr + 208 >> 2] & 32768) {
  if (($error | 0) < 2) {
   _png_chunk_warning($png_ptr, $message);
   STACKTOP = sp;
   return;
  }
  if (!(HEAP32[$png_ptr + 212 >> 2] & 1048576)) _png_chunk_error($png_ptr, $message);
  _png_chunk_warning($png_ptr, $message);
  STACKTOP = sp;
  return;
 }
 $11 = HEAP32[$png_ptr + 212 >> 2] | 0;
 if (($error | 0) < 1) {
  if (!($11 & 2097152)) _png_error($png_ptr, $message);
  L31 : do if ((HEAP8[$message >> 0] | 0) == 35) {
   $offset$04$i$i = 1;
   while (1) {
    $16 = $offset$04$i$i + 1 | 0;
    if ((HEAP8[$message + $offset$04$i$i >> 0] | 0) == 32) {
     $offset$11$i$i = $offset$04$i$i;
     break L31;
    }
    if (($16 | 0) < 15) $offset$04$i$i = $16; else {
     $offset$11$i$i = $16;
     break;
    }
   }
  } else $offset$11$i$i = 0; while (0);
  $22 = HEAP32[$png_ptr + 172 >> 2] | 0;
  $24 = $message + $offset$11$i$i | 0;
  if (!$22) {
   $25 = HEAP32[_stderr >> 2] | 0;
   HEAP32[$vararg_buffer >> 2] = $24;
   _fprintf($25 | 0, 74264, $vararg_buffer | 0) | 0;
   _fputc(10, $25 | 0) | 0;
   STACKTOP = sp;
   return;
  } else {
   FUNCTION_TABLE_vii[$22 & 127]($png_ptr, $24);
   STACKTOP = sp;
   return;
  }
 } else {
  if (!($11 & 4194304)) _png_error($png_ptr, $message);
  L17 : do if ((HEAP8[$message >> 0] | 0) == 35) {
   $offset$04$i$i1 = 1;
   while (1) {
    $30 = $offset$04$i$i1 + 1 | 0;
    if ((HEAP8[$message + $offset$04$i$i1 >> 0] | 0) == 32) {
     $offset$11$i$i3 = $offset$04$i$i1;
     break L17;
    }
    if (($30 | 0) < 15) $offset$04$i$i1 = $30; else {
     $offset$11$i$i3 = $30;
     break;
    }
   }
  } else $offset$11$i$i3 = 0; while (0);
  $36 = HEAP32[$png_ptr + 172 >> 2] | 0;
  $38 = $message + $offset$11$i$i3 | 0;
  if (!$36) {
   $39 = HEAP32[_stderr >> 2] | 0;
   HEAP32[$vararg_buffer1 >> 2] = $38;
   _fprintf($39 | 0, 74264, $vararg_buffer1 | 0) | 0;
   _fputc(10, $39 | 0) | 0;
   STACKTOP = sp;
   return;
  } else {
   FUNCTION_TABLE_vii[$36 & 127]($png_ptr, $38);
   STACKTOP = sp;
   return;
  }
 }
}

function _suffixedexp($ls, $v) {
 $ls = $ls | 0;
 $v = $v | 0;
 var $$pre$phi2Z2D = 0, $0 = 0, $1 = 0, $12 = 0, $13 = 0, $14 = 0, $17 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $key = 0, $key$i$i = 0, $key1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $key$i$i = sp + 32 | 0;
 $key = sp + 16 | 0;
 $key1 = sp;
 $0 = $ls + 28 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $3 = HEAP32[$ls + 4 >> 2] | 0;
 $4 = $ls + 12 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 if (($5 | 0) == 292) {
  $7 = $ls + 16 | 0;
  $8 = HEAP32[$7 >> 2] | 0;
  _luaX_next($ls);
  $9 = HEAP32[$0 >> 2] | 0;
  if (!(_singlevaraux($9, $8, $v, 1) | 0)) {
   _singlevaraux($9, HEAP32[$ls + 56 >> 2] | 0, $v, 1) | 0;
   $17 = _luaK_stringK(HEAP32[$0 >> 2] | 0, $8) | 0;
   HEAP32[$key$i$i + 8 >> 2] = -1;
   HEAP32[$key$i$i + 12 >> 2] = -1;
   HEAP32[$key$i$i >> 2] = 4;
   HEAP32[$key$i$i + 4 >> 2] = $17;
   _luaK_indexed($9, $v, $key$i$i);
   $$pre$phi2Z2D = $7;
  } else $$pre$phi2Z2D = $7;
 } else if (($5 | 0) == 40) {
  _luaX_next($ls);
  _subexpr($ls, $v, 0) | 0;
  _check_match($ls, 41, 40, $3);
  _luaK_dischargevars(HEAP32[$0 >> 2] | 0, $v);
  $$pre$phi2Z2D = $ls + 16 | 0;
 } else _luaX_syntaxerror($ls, 60704);
 $12 = $key1 + 8 | 0;
 $13 = $key1 + 12 | 0;
 $14 = $key1 + 4 | 0;
 L7 : while (1) switch (HEAP32[$4 >> 2] | 0) {
 case 58:
  {
   _luaX_next($ls);
   if ((HEAP32[$4 >> 2] | 0) != 292) {
    label = 13;
    break L7;
   }
   $27 = HEAP32[$$pre$phi2Z2D >> 2] | 0;
   _luaX_next($ls);
   $28 = _luaK_stringK(HEAP32[$0 >> 2] | 0, $27) | 0;
   HEAP32[$12 >> 2] = -1;
   HEAP32[$13 >> 2] = -1;
   HEAP32[$key1 >> 2] = 4;
   HEAP32[$14 >> 2] = $28;
   _luaK_self($1, $v, $key1);
   _funcargs($ls, $v, $3);
   continue L7;
   break;
  }
 case 123:
 case 293:
 case 40:
  {
   _luaK_exp2nextreg($1, $v);
   _funcargs($ls, $v, $3);
   continue L7;
   break;
  }
 case 46:
  {
   _fieldsel($ls, $v);
   continue L7;
   break;
  }
 case 91:
  {
   _luaK_exp2anyregup($1, $v);
   _luaX_next($ls);
   _subexpr($ls, $key, 0) | 0;
   _luaK_exp2val(HEAP32[$0 >> 2] | 0, $key);
   if ((HEAP32[$4 >> 2] | 0) != 93) {
    label = 10;
    break L7;
   }
   _luaX_next($ls);
   _luaK_indexed($1, $v, $key);
   continue L7;
   break;
  }
 default:
  {
   label = 16;
   break L7;
  }
 }
 if ((label | 0) == 10) _error_expected($ls, 93); else if ((label | 0) == 13) _error_expected($ls, 292); else if ((label | 0) == 16) {
  STACKTOP = sp;
  return;
 }
}

function _os_time($L) {
 $L = $L | 0;
 var $$ = 0, $$0$i = 0, $$0$i12 = 0, $$0$i16 = 0, $$18 = 0, $10 = 0, $14 = 0, $19 = 0, $25 = 0, $3 = 0, $35 = 0, $6 = 0, $isnum$i14 = 0, $res$0$i2 = 0, $t$0 = 0, $ts = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $isnum$i14 = sp + 64 | 0;
 $ts = sp + 20 | 0;
 if ((_lua_type($L, 1) | 0) < 1) $t$0 = _time(0) | 0; else {
  _luaL_checktype($L, 1, 5);
  _lua_settop($L, 1);
  _lua_getfield($L, -1, 59848) | 0;
  $3 = _lua_tointegerx($L, -1, $isnum$i14) | 0;
  $$ = (HEAP32[$isnum$i14 >> 2] | 0) == 0 ? 0 : $3;
  _lua_settop($L, -2);
  HEAP32[$ts >> 2] = $$;
  _lua_getfield($L, -1, 59856) | 0;
  $6 = _lua_tointegerx($L, -1, $isnum$i14) | 0;
  $res$0$i2 = (HEAP32[$isnum$i14 >> 2] | 0) == 0 ? 0 : $6;
  _lua_settop($L, -2);
  HEAP32[$ts + 4 >> 2] = $res$0$i2;
  _lua_getfield($L, -1, 59864) | 0;
  $10 = _lua_tointegerx($L, -1, $isnum$i14) | 0;
  $$18 = (HEAP32[$isnum$i14 >> 2] | 0) == 0 ? 12 : $10;
  _lua_settop($L, -2);
  HEAP32[$ts + 8 >> 2] = $$18;
  _lua_getfield($L, -1, 59872) | 0;
  $14 = _lua_tointegerx($L, -1, $isnum$i14) | 0;
  if (!(HEAP32[$isnum$i14 >> 2] | 0)) {
   HEAP32[$vararg_buffer >> 2] = 59872;
   $$0$i = _luaL_error($L, 59904, $vararg_buffer) | 0;
  } else {
   _lua_settop($L, -2);
   $$0$i = $14;
  }
  HEAP32[$ts + 12 >> 2] = $$0$i;
  _lua_getfield($L, -1, 59880) | 0;
  $19 = _lua_tointegerx($L, -1, $isnum$i14) | 0;
  if (!(HEAP32[$isnum$i14 >> 2] | 0)) {
   HEAP32[$vararg_buffer1 >> 2] = 59880;
   $$0$i12 = _luaL_error($L, 59904, $vararg_buffer1) | 0;
  } else {
   _lua_settop($L, -2);
   $$0$i12 = $19;
  }
  HEAP32[$ts + 16 >> 2] = $$0$i12 + -1;
  _lua_getfield($L, -1, 59888) | 0;
  $25 = _lua_tointegerx($L, -1, $isnum$i14) | 0;
  if (!(HEAP32[$isnum$i14 >> 2] | 0)) {
   HEAP32[$vararg_buffer4 >> 2] = 59888;
   $$0$i16 = _luaL_error($L, 59904, $vararg_buffer4) | 0;
  } else {
   _lua_settop($L, -2);
   $$0$i16 = $25;
  }
  HEAP32[$ts + 20 >> 2] = $$0$i16 + -1900;
  if (!(_lua_getfield($L, -1, 59896) | 0)) $35 = -1; else $35 = _lua_toboolean($L, -1) | 0;
  _lua_settop($L, -2);
  HEAP32[$ts + 32 >> 2] = $35;
  $t$0 = _mktime($ts | 0) | 0;
 }
 if (($t$0 | 0) == -1) {
  _lua_pushnil($L);
  STACKTOP = sp;
  return 1;
 } else {
  _lua_pushinteger($L, $t$0);
  STACKTOP = sp;
  return 1;
 }
 return 0;
}

function _luaV_lessthan($L, $l, $r) {
 $L = $L | 0;
 $l = $l | 0;
 $r = $r | 0;
 var $$0 = 0, $$0$i1 = 0, $0 = 0, $1 = 0, $15 = 0, $23 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $39 = 0, $41 = 0, $44 = 0, $49 = 0, $51 = 0, $53 = 0, $l$01$i = 0, $ll$02$i = 0, $lr$04$i = 0, $r$03$i = 0, $storemerge1$i$ph = 0.0, $storemerge1$i3$ph = 0.0, $x$i = 0, $x$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $x$i2 = sp + 4 | 0;
 $x$i = sp;
 $0 = $l + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 do if (($1 | 0) == 19) {
  if ((HEAP32[$r + 4 >> 2] | 0) != 19) {
   HEAPF32[$x$i >> 2] = +(HEAP32[$l >> 2] | 0);
   $53 = $x$i;
   $storemerge1$i$ph = +HEAPF32[$x$i >> 2];
   label = 7;
   break;
  }
  $$0 = (HEAP32[$l >> 2] | 0) < (HEAP32[$r >> 2] | 0) & 1;
  STACKTOP = sp;
  return $$0 | 0;
 } else if (($1 | 0) == 3) {
  $53 = $x$i;
  $storemerge1$i$ph = +HEAPF32[$l >> 2];
  label = 7;
 } else $23 = $1; while (0);
 do if ((label | 0) == 7) {
  $15 = HEAP32[$r + 4 >> 2] | 0;
  if (($15 | 0) == 3) $storemerge1$i3$ph = +HEAPF32[$r >> 2]; else if (($15 | 0) == 19) {
   HEAPF32[$x$i2 >> 2] = +(HEAP32[$r >> 2] | 0);
   $storemerge1$i3$ph = +HEAPF32[$x$i2 >> 2];
  } else {
   $23 = HEAP32[$0 >> 2] | 0;
   break;
  }
  $$0 = $storemerge1$i$ph < $storemerge1$i3$ph & 1;
  STACKTOP = sp;
  return $$0 | 0;
 } while (0);
 if (($23 & 15 | 0) == 4) if ((HEAP32[$r + 4 >> 2] & 15 | 0) == 4) {
  $29 = HEAP32[$l >> 2] | 0;
  $30 = HEAP32[$r >> 2] | 0;
  $31 = $29 + 24 | 0;
  $32 = $30 + 24 | 0;
  $33 = _strcoll($31, $32) | 0;
  L21 : do if (!$33) {
   $l$01$i = $31;
   $ll$02$i = HEAP32[$29 + 12 >> 2] | 0;
   $lr$04$i = HEAP32[$30 + 12 >> 2] | 0;
   $r$03$i = $32;
   while (1) {
    $39 = _strlen($l$01$i | 0) | 0;
    $41 = ($39 | 0) == ($ll$02$i | 0);
    if (($39 | 0) == ($lr$04$i | 0)) break;
    if ($41) {
     $$0$i1 = -1;
     break L21;
    }
    $44 = $39 + 1 | 0;
    $l$01$i = $l$01$i + $44 | 0;
    $r$03$i = $r$03$i + $44 | 0;
    $49 = _strcoll($l$01$i, $r$03$i) | 0;
    if ($49) {
     $$0$i1 = $49;
     break L21;
    } else {
     $ll$02$i = $ll$02$i - $44 | 0;
     $lr$04$i = $lr$04$i - $44 | 0;
    }
   }
   $$0$i1 = $41 & 1 ^ 1;
  } else $$0$i1 = $33; while (0);
  $$0 = $$0$i1 >>> 31;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $51 = _luaT_callorderTM($L, $l, $r, 20) | 0;
 if (($51 | 0) < 0) _luaG_ordererror($L, $l, $r); else {
  $$0 = $51;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function __ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4_($this, $broadPhase, $transform1, $transform2) {
 $this = $this | 0;
 $broadPhase = $broadPhase | 0;
 $transform1 = $transform1 | 0;
 $transform2 = $transform2 | 0;
 var $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $19 = 0, $21 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $3 = 0, $31 = 0.0, $32 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $4 = 0, $42 = 0.0, $43 = 0.0, $46 = 0.0, $47 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $6 = 0, $61 = 0.0, $7 = 0, $8 = 0, $9 = 0, $aabb1 = 0, $aabb2 = 0, $displacement = 0, $i$01 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $aabb1 = sp + 24 | 0;
 $aabb2 = sp + 8 | 0;
 $displacement = sp;
 $0 = $this + 28 | 0;
 if ((HEAP32[$0 >> 2] | 0) <= 0) {
  STACKTOP = sp;
  return;
 }
 $3 = $this + 24 | 0;
 $4 = $this + 12 | 0;
 $5 = $aabb1 + 4 | 0;
 $6 = $aabb2 + 4 | 0;
 $7 = $aabb1 + 8 | 0;
 $8 = $aabb2 + 8 | 0;
 $9 = $aabb1 + 12 | 0;
 $10 = $aabb2 + 12 | 0;
 $11 = $transform2 + 4 | 0;
 $12 = $transform1 + 4 | 0;
 $13 = $displacement + 4 | 0;
 $i$01 = 0;
 do {
  $14 = HEAP32[$3 >> 2] | 0;
  $15 = HEAP32[$4 >> 2] | 0;
  $19 = $14 + ($i$01 * 28 | 0) + 20 | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$15 >> 2] | 0) + 24 >> 2] & 31]($15, $aabb1, $transform1, HEAP32[$19 >> 2] | 0);
  $21 = HEAP32[$4 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$21 >> 2] | 0) + 24 >> 2] & 31]($21, $aabb2, $transform2, HEAP32[$19 >> 2] | 0);
  $26 = $14 + ($i$01 * 28 | 0) | 0;
  $27 = +HEAPF32[$aabb1 >> 2];
  $28 = +HEAPF32[$aabb2 >> 2];
  $31 = +HEAPF32[$5 >> 2];
  $32 = +HEAPF32[$6 >> 2];
  $35 = +($27 < $28 ? $27 : $28);
  $36 = +($31 < $32 ? $31 : $32);
  $37 = $26;
  HEAPF32[$37 >> 2] = $35;
  HEAPF32[$37 + 4 >> 2] = $36;
  $42 = +HEAPF32[$7 >> 2];
  $43 = +HEAPF32[$8 >> 2];
  $46 = +HEAPF32[$9 >> 2];
  $47 = +HEAPF32[$10 >> 2];
  $50 = +($42 > $43 ? $42 : $43);
  $51 = +($46 > $47 ? $46 : $47);
  $52 = $14 + ($i$01 * 28 | 0) + 8 | 0;
  HEAPF32[$52 >> 2] = $50;
  HEAPF32[$52 + 4 >> 2] = $51;
  $61 = +HEAPF32[$11 >> 2] - +HEAPF32[$12 >> 2];
  HEAPF32[$displacement >> 2] = +HEAPF32[$transform2 >> 2] - +HEAPF32[$transform1 >> 2];
  HEAPF32[$13 >> 2] = $61;
  __ZN12b2BroadPhase9MoveProxyEiRK6b2AABBRK6b2Vec2($broadPhase, HEAP32[$14 + ($i$01 * 28 | 0) + 24 >> 2] | 0, $26, $displacement);
  $i$01 = $i$01 + 1 | 0;
 } while (($i$01 | 0) < (HEAP32[$0 >> 2] | 0));
 STACKTOP = sp;
 return;
}

function _vorbis_finish_frame($f, $len, $left, $right) {
 $f = $f | 0;
 $len = $len | 0;
 $left = $left | 0;
 $right = $right | 0;
 var $$0 = 0, $$0$i = 0, $$0$in$i = 0, $0 = 0, $1 = 0, $13 = 0, $16 = 0, $17 = 0, $19 = 0, $21 = 0, $23 = 0, $3 = 0, $38 = 0, $39 = 0, $41 = 0, $43 = 0, $45 = 0, $47 = 0, $50 = 0, $54 = 0, $57 = 0, $58 = 0, $61 = 0, $i$03 = 0, $i1$09 = 0, $j$02 = 0, $j2$06 = 0, label = 0;
 $0 = $f + 1008 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 do if (!$1) {
  $39 = HEAP32[$f + 4 >> 2] | 0;
  $61 = 0;
  label = 15;
 } else {
  $3 = $1 << 1;
  do if (($3 | 0) == (HEAP32[$f + 128 >> 2] | 0)) $$0$in$i = $f + 1108 | 0; else if (($3 | 0) == (HEAP32[$f + 132 >> 2] | 0)) {
   $$0$in$i = $f + 1112 | 0;
   break;
  } else ___assert_fail(81008, 78904, 3108, 79480); while (0);
  $$0$i = HEAP32[$$0$in$i >> 2] | 0;
  $13 = HEAP32[$f + 4 >> 2] | 0;
  if (($13 | 0) <= 0) {
   HEAP32[$0 >> 2] = $len - $right;
   $54 = $1;
   break;
  }
  $16 = ($1 | 0) > 0;
  $17 = $1 + -1 | 0;
  $i1$09 = 0;
  do {
   if ($16) {
    $19 = HEAP32[$f + ($i1$09 << 2) + 816 >> 2] | 0;
    $21 = HEAP32[$f + ($i1$09 << 2) + 944 >> 2] | 0;
    $j2$06 = 0;
    do {
     $23 = $19 + ($j2$06 + $left << 2) | 0;
     HEAPF32[$23 >> 2] = +HEAPF32[$23 >> 2] * +HEAPF32[$$0$i + ($j2$06 << 2) >> 2] + +HEAPF32[$21 + ($j2$06 << 2) >> 2] * +HEAPF32[$$0$i + ($17 - $j2$06 << 2) >> 2];
     $j2$06 = $j2$06 + 1 | 0;
    } while (($j2$06 | 0) != ($1 | 0));
   }
   $i1$09 = $i1$09 + 1 | 0;
  } while (($i1$09 | 0) < ($13 | 0));
  $39 = $13;
  $61 = $1;
  label = 15;
 } while (0);
 if ((label | 0) == 15) {
  $38 = $len - $right | 0;
  HEAP32[$0 >> 2] = $38;
  if (($39 | 0) > 0) {
   $41 = ($right | 0) < ($len | 0);
   $i$03 = 0;
   do {
    if ($41) {
     $43 = HEAP32[$f + ($i$03 << 2) + 816 >> 2] | 0;
     $45 = HEAP32[$f + ($i$03 << 2) + 944 >> 2] | 0;
     $47 = $right;
     $j$02 = 0;
     while (1) {
      HEAPF32[$45 + ($j$02 << 2) >> 2] = +HEAPF32[$43 + ($47 << 2) >> 2];
      $50 = $j$02 + 1 | 0;
      if (($50 | 0) == ($38 | 0)) break; else {
       $47 = $50 + $right | 0;
       $j$02 = $50;
      }
     }
    }
    $i$03 = $i$03 + 1 | 0;
   } while (($i$03 | 0) < ($39 | 0));
   $54 = $61;
  } else $54 = $61;
 }
 if (!$54) {
  $$0 = 0;
  return $$0 | 0;
 }
 $57 = (($len | 0) < ($right | 0) ? $len : $right) - $left | 0;
 $58 = $f + 1432 | 0;
 HEAP32[$58 >> 2] = (HEAP32[$58 >> 2] | 0) + $57;
 $$0 = $57;
 return $$0 | 0;
}

function __ZN7b2World12DestroyJointEP7b2Joint($this, $j) {
 $this = $this | 0;
 $j = $j | 0;
 var $$pre = 0, $$pre5 = 0, $$pre7 = 0, $11 = 0, $15 = 0, $20 = 0, $22 = 0, $23 = 0, $25 = 0, $31 = 0, $33 = 0, $40 = 0, $41 = 0, $45 = 0, $49 = 0, $5 = 0, $54 = 0, $55 = 0, $59 = 0, $6 = 0, $63 = 0, $67 = 0, $68 = 0, $7 = 0, $78 = 0, $edge$02 = 0, $edge$03 = 0;
 if (HEAP32[$this + 102868 >> 2] & 2) ___assert_fail(89248, 89272, 274, 89392);
 $5 = HEAP8[$j + 61 >> 0] | 0;
 $6 = $j + 8 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 $$pre = $j + 12 | 0;
 if ($7) HEAP32[$7 + 12 >> 2] = HEAP32[$$pre >> 2];
 $11 = HEAP32[$$pre >> 2] | 0;
 if ($11) HEAP32[$11 + 8 >> 2] = HEAP32[$6 >> 2];
 $15 = $this + 102956 | 0;
 if ((HEAP32[$15 >> 2] | 0) == ($j | 0)) HEAP32[$15 >> 2] = HEAP32[$$pre >> 2];
 $20 = HEAP32[$j + 48 >> 2] | 0;
 $22 = HEAP32[$j + 52 >> 2] | 0;
 $23 = $20 + 4 | 0;
 $25 = HEAPU16[$23 >> 1] | 0;
 if (!($25 & 2)) {
  HEAP16[$23 >> 1] = $25 | 2;
  HEAPF32[$20 + 144 >> 2] = 0.0;
 }
 $31 = $22 + 4 | 0;
 $33 = HEAPU16[$31 >> 1] | 0;
 if (!($33 & 2)) {
  HEAP16[$31 >> 1] = $33 | 2;
  HEAPF32[$22 + 144 >> 2] = 0.0;
 }
 $40 = $j + 24 | 0;
 $41 = HEAP32[$40 >> 2] | 0;
 $$pre5 = $j + 28 | 0;
 if ($41) HEAP32[$41 + 12 >> 2] = HEAP32[$$pre5 >> 2];
 $45 = HEAP32[$$pre5 >> 2] | 0;
 if ($45) HEAP32[$45 + 8 >> 2] = HEAP32[$40 >> 2];
 $49 = $20 + 108 | 0;
 if (($j + 16 | 0) == (HEAP32[$49 >> 2] | 0)) HEAP32[$49 >> 2] = HEAP32[$$pre5 >> 2];
 HEAP32[$40 >> 2] = 0;
 HEAP32[$$pre5 >> 2] = 0;
 $54 = $j + 40 | 0;
 $55 = HEAP32[$54 >> 2] | 0;
 $$pre7 = $j + 44 | 0;
 if ($55) HEAP32[$55 + 12 >> 2] = HEAP32[$$pre7 >> 2];
 $59 = HEAP32[$$pre7 >> 2] | 0;
 if ($59) HEAP32[$59 + 8 >> 2] = HEAP32[$54 >> 2];
 $63 = $22 + 108 | 0;
 if (($j + 32 | 0) == (HEAP32[$63 >> 2] | 0)) HEAP32[$63 >> 2] = HEAP32[$$pre7 >> 2];
 HEAP32[$54 >> 2] = 0;
 HEAP32[$$pre7 >> 2] = 0;
 __ZN7b2Joint7DestroyEPS_P16b2BlockAllocator($j, $this);
 $67 = $this + 102964 | 0;
 $68 = HEAP32[$67 >> 2] | 0;
 if (($68 | 0) <= 0) ___assert_fail(89408, 89272, 346, 89392);
 HEAP32[$67 >> 2] = $68 + -1;
 if ($5 << 24 >> 24) return;
 $edge$02 = HEAP32[$22 + 112 >> 2] | 0;
 if (!$edge$02) return; else $edge$03 = $edge$02;
 do {
  if ((HEAP32[$edge$03 >> 2] | 0) == ($20 | 0)) {
   $78 = (HEAP32[$edge$03 + 4 >> 2] | 0) + 4 | 0;
   HEAP32[$78 >> 2] = HEAP32[$78 >> 2] | 8;
  }
  $edge$03 = HEAP32[$edge$03 + 12 >> 2] | 0;
 } while (($edge$03 | 0) != 0);
 return;
}

function __ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi($this, $output, $input, $xf, $childIndex) {
 $this = $this | 0;
 $output = $output | 0;
 $input = $input | 0;
 $xf = $xf | 0;
 $childIndex = $childIndex | 0;
 var $$0 = 0, $1 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $12 = 0.0, $14 = 0.0, $17 = 0.0, $2 = 0.0, $20 = 0.0, $23 = 0.0, $30 = 0.0, $31 = 0.0, $33 = 0, $39 = 0.0, $40 = 0.0, $42 = 0, $48 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $55 = 0.0, $56 = 0.0, $58 = 0.0, $6 = 0.0, $64 = 0.0, $66 = 0.0, $67 = 0.0, $7 = 0.0, $70 = 0.0, $72 = 0.0, $8 = 0, $87 = 0.0, $9 = 0.0, $92 = 0.0, $94 = 0.0, $96 = 0.0, $99 = 0.0;
 $1 = +HEAPF32[$xf >> 2];
 $2 = +HEAPF32[$input >> 2] - $1;
 $6 = +HEAPF32[$xf + 4 >> 2];
 $7 = +HEAPF32[$input + 4 >> 2] - $6;
 $8 = $xf + 12 | 0;
 $9 = +HEAPF32[$8 >> 2];
 $11 = $xf + 8 | 0;
 $12 = +HEAPF32[$11 >> 2];
 $14 = $2 * $9 + $7 * $12;
 $17 = $9 * $7 - $2 * $12;
 $20 = +HEAPF32[$input + 8 >> 2] - $1;
 $23 = +HEAPF32[$input + 12 >> 2] - $6;
 $30 = $9 * $20 + $12 * $23 - $14;
 $31 = $9 * $23 - $12 * $20 - $17;
 $33 = $this + 12 | 0;
 $39 = +HEAPF32[$33 >> 2];
 $40 = +HEAPF32[$33 + 4 >> 2];
 $42 = $this + 20 | 0;
 $48 = +HEAPF32[$42 >> 2];
 $50 = $48 - $39;
 $51 = +HEAPF32[$42 + 4 >> 2] - $40;
 $52 = -$50;
 $55 = $50 * $50 + $51 * $51;
 $56 = +Math_sqrt(+$55);
 if ($56 < 1.1920928955078125e-07) {
  $64 = $51;
  $66 = $52;
 } else {
  $58 = 1.0 / $56;
  $64 = $51 * $58;
  $66 = $58 * $52;
 }
 $67 = ($40 - $17) * $66 + ($39 - $14) * $64;
 $70 = $31 * $66 + $30 * $64;
 if ($70 == 0.0) {
  $$0 = 0;
  return $$0 | 0;
 }
 $72 = $67 / $70;
 if ($72 < 0.0) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ($55 == 0.0 ? 1 : +HEAPF32[$input + 16 >> 2] < $72) {
  $$0 = 0;
  return $$0 | 0;
 }
 $87 = ($50 * ($14 + $30 * $72 - $39) + $51 * ($17 + $31 * $72 - $40)) / $55;
 if ($87 < 0.0 | $87 > 1.0) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAPF32[$output + 8 >> 2] = $72;
 $92 = +HEAPF32[$8 >> 2];
 $94 = +HEAPF32[$11 >> 2];
 $96 = $64 * $92 - $66 * $94;
 $99 = $66 * $92 + $64 * $94;
 if ($67 > 0.0) {
  $102 = +-$96;
  $103 = +-$99;
  $104 = $output;
  HEAPF32[$104 >> 2] = $102;
  HEAPF32[$104 + 4 >> 2] = $103;
  $$0 = 1;
  return $$0 | 0;
 } else {
  $108 = +$96;
  $109 = +$99;
  $110 = $output;
  HEAPF32[$110 >> 2] = $108;
  HEAPF32[$110 + 4 >> 2] = $109;
  $$0 = 1;
  return $$0 | 0;
 }
 return 0;
}

function _png_handle_IHDR($png_ptr, $info_ptr, $length) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 $length = $length | 0;
 var $0 = 0, $1 = 0, $23 = 0, $42 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $70 = 0, $71 = 0, $74 = 0, $81 = 0, $82 = 0, $buf = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $buf = sp;
 $0 = $png_ptr + 208 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ($1 & 1) _png_chunk_error($png_ptr, 75472);
 if (($length | 0) != 13) _png_chunk_error($png_ptr, 75488);
 HEAP32[$0 >> 2] = $1 | 1;
 if ($png_ptr) {
  _png_read_data($png_ptr, $buf, 13);
  _png_calculate_crc($png_ptr, $buf, 13);
 }
 _png_crc_finish($png_ptr, 0) | 0;
 $23 = (HEAPU8[$buf + 1 >> 0] | 0) << 16 | (HEAPU8[$buf >> 0] | 0) << 24 | (HEAPU8[$buf + 2 >> 0] | 0) << 8 | (HEAPU8[$buf + 3 >> 0] | 0);
 if (($23 | 0) < 0) _png_error($png_ptr, 75360);
 $42 = (HEAPU8[$buf + 5 >> 0] | 0) << 16 | (HEAPU8[$buf + 4 >> 0] | 0) << 24 | (HEAPU8[$buf + 6 >> 0] | 0) << 8 | (HEAPU8[$buf + 7 >> 0] | 0);
 if (($42 | 0) < 0) _png_error($png_ptr, 75360);
 $45 = HEAP8[$buf + 8 >> 0] | 0;
 $46 = $45 & 255;
 $48 = HEAP8[$buf + 9 >> 0] | 0;
 $49 = $48 & 255;
 $51 = HEAP8[$buf + 10 >> 0] | 0;
 $52 = $51 & 255;
 $54 = HEAP8[$buf + 11 >> 0] | 0;
 $55 = $54 & 255;
 $57 = HEAP8[$buf + 12 >> 0] | 0;
 $58 = $57 & 255;
 HEAP32[$png_ptr + 348 >> 2] = $23;
 HEAP32[$png_ptr + 352 >> 2] = $42;
 HEAP8[$png_ptr + 436 >> 0] = $45;
 HEAP8[$png_ptr + 432 >> 0] = $57;
 HEAP8[$png_ptr + 435 >> 0] = $48;
 HEAP8[$png_ptr + 712 >> 0] = $54;
 HEAP8[$png_ptr + 744 >> 0] = $51;
 if (($49 | 0) == 6) {
  HEAP8[$png_ptr + 439 >> 0] = 4;
  $71 = 4;
 } else if (($49 | 0) == 2) {
  HEAP8[$png_ptr + 439 >> 0] = 3;
  $71 = 3;
 } else if (($49 | 0) == 4) {
  HEAP8[$png_ptr + 439 >> 0] = 2;
  $71 = 2;
 } else {
  HEAP8[$png_ptr + 439 >> 0] = 1;
  $71 = 1;
 }
 $70 = Math_imul($71, $46) | 0;
 HEAP8[$png_ptr + 438 >> 0] = $70;
 $74 = $70 & 255;
 if ($74 >>> 0 > 7) {
  $82 = Math_imul($74 >>> 3, $23) | 0;
  $81 = $png_ptr + 364 | 0;
  HEAP32[$81 >> 2] = $82;
  _png_set_IHDR($png_ptr, $info_ptr, $23, $42, $46, $49, $58, $52, $55);
  STACKTOP = sp;
  return;
 } else {
  $82 = ((Math_imul($74, $23) | 0) + 7 | 0) >>> 3;
  $81 = $png_ptr + 364 | 0;
  HEAP32[$81 >> 2] = $82;
  _png_set_IHDR($png_ptr, $info_ptr, $23, $42, $46, $49, $58, $52, $55);
  STACKTOP = sp;
  return;
 }
}

function _lua_pcallk($L, $nargs, $nresults, $errfunc, $ctx, $k) {
 $L = $L | 0;
 $nargs = $nargs | 0;
 $nresults = $nresults | 0;
 $errfunc = $errfunc | 0;
 $ctx = $ctx | 0;
 $k = $k | 0;
 var $$0$i = 0, $17 = 0, $18 = 0, $2 = 0, $22 = 0, $35 = 0, $38 = 0, $5 = 0, $51 = 0, $61 = 0, $63 = 0, $64 = 0, $83 = 0, $85 = 0, $c = 0, $func$0 = 0, $status$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $c = sp;
 if (!$errfunc) $func$0 = 0; else {
  $2 = HEAP32[$L + 16 >> 2] | 0;
  do if (($errfunc | 0) > 0) {
   $5 = (HEAP32[$2 >> 2] | 0) + ($errfunc << 3) | 0;
   $$0$i = $5 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $5 : 59168;
  } else {
   if (($errfunc | 0) >= -1000999) {
    $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($errfunc << 3) | 0;
    break;
   }
   if (($errfunc | 0) == -1001e3) {
    $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
    break;
   }
   $17 = -1001e3 - $errfunc | 0;
   $18 = HEAP32[$2 >> 2] | 0;
   if ((HEAP32[$18 + 4 >> 2] | 0) == 22) $$0$i = 59168; else {
    $22 = HEAP32[$18 >> 2] | 0;
    if (($17 | 0) > (HEAPU8[$22 + 6 >> 0] | 0)) $$0$i = 59168; else $$0$i = $22 + 16 + ($17 + -1 << 3) | 0;
   }
  } while (0);
  $func$0 = $$0$i - (HEAP32[$L + 28 >> 2] | 0) | 0;
 }
 $35 = $L + 8 | 0;
 $38 = (HEAP32[$35 >> 2] | 0) + (~$nargs << 3) | 0;
 HEAP32[$c >> 2] = $38;
 if (!$k) label = 14; else if (!(HEAP16[$L + 104 >> 1] | 0)) {
  $51 = HEAP32[$L + 16 >> 2] | 0;
  HEAP32[$51 + 16 >> 2] = $k;
  HEAP32[$51 + 24 >> 2] = $ctx;
  HEAP32[$51 + 28 >> 2] = (HEAP32[$c >> 2] | 0) - (HEAP32[$L + 28 >> 2] | 0);
  $61 = $L + 88 | 0;
  $63 = $51 + 20 | 0;
  HEAP32[$63 >> 2] = HEAP32[$61 >> 2];
  HEAP32[$61 >> 2] = $func$0;
  $64 = $51 + 34 | 0;
  HEAP8[$64 >> 0] = HEAPU8[$L + 109 >> 0] | HEAPU8[$64 >> 0] & 238 | 16;
  _luaD_call($L, HEAP32[$c >> 2] | 0, $nresults, 1);
  HEAP8[$64 >> 0] = HEAPU8[$64 >> 0] & 239;
  HEAP32[$61 >> 2] = HEAP32[$63 >> 2];
  $status$0 = 0;
 } else label = 14;
 if ((label | 0) == 14) {
  HEAP32[$c + 4 >> 2] = $nresults;
  $status$0 = _luaD_pcall($L, 79, $c, $38 - (HEAP32[$L + 28 >> 2] | 0) | 0, $func$0) | 0;
 }
 if (($nresults | 0) != -1) {
  STACKTOP = sp;
  return $status$0 | 0;
 }
 $83 = (HEAP32[$L + 16 >> 2] | 0) + 4 | 0;
 $85 = HEAP32[$35 >> 2] | 0;
 if ((HEAP32[$83 >> 2] | 0) >>> 0 >= $85 >>> 0) {
  STACKTOP = sp;
  return $status$0 | 0;
 }
 HEAP32[$83 >> 2] = $85;
 STACKTOP = sp;
 return $status$0 | 0;
}

function _luaT_callbinTM($L, $p1, $p2, $res, $event) {
 $L = $L | 0;
 $p1 = $p1 | 0;
 $p2 = $p2 | 0;
 $res = $res | 0;
 $event = $event | 0;
 var $$0 = 0, $17 = 0, $2 = 0, $22 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $49 = 0, $50 = 0, $54 = 0, $56 = 0, $61 = 0, $62 = 0, $66 = 0, $68 = 0, $73 = 0, $74 = 0, $90 = 0, $92 = 0, $93 = 0, $98 = 0, $99 = 0, $mt$0$i = 0, $mt$0$i2 = 0, $mt$0$in$i = 0, $mt$0$in$i1 = 0, $tm$0 = 0;
 $2 = HEAP32[$p1 + 4 >> 2] & 15;
 if (($2 | 0) == 7) $mt$0$in$i = (HEAP32[$p1 >> 2] | 0) + 8 | 0; else if (($2 | 0) == 5) $mt$0$in$i = (HEAP32[$p1 >> 2] | 0) + 24 | 0; else $mt$0$in$i = (HEAP32[$L + 12 >> 2] | 0) + ($2 << 2) + 232 | 0;
 $mt$0$i = HEAP32[$mt$0$in$i >> 2] | 0;
 if (!$mt$0$i) $17 = 59168; else $17 = _luaH_getstr($mt$0$i, HEAP32[(HEAP32[$L + 12 >> 2] | 0) + ($event << 2) + 136 >> 2] | 0) | 0;
 if (!(HEAP32[$17 + 4 >> 2] | 0)) {
  $22 = HEAP32[$p2 + 4 >> 2] & 15;
  if (($22 | 0) == 7) $mt$0$in$i1 = (HEAP32[$p2 >> 2] | 0) + 8 | 0; else if (($22 | 0) == 5) $mt$0$in$i1 = (HEAP32[$p2 >> 2] | 0) + 24 | 0; else $mt$0$in$i1 = (HEAP32[$L + 12 >> 2] | 0) + ($22 << 2) + 232 | 0;
  $mt$0$i2 = HEAP32[$mt$0$in$i1 >> 2] | 0;
  if (!$mt$0$i2) $tm$0 = 59168; else $tm$0 = _luaH_getstr($mt$0$i2, HEAP32[(HEAP32[$L + 12 >> 2] | 0) + ($event << 2) + 136 >> 2] | 0) | 0;
 } else $tm$0 = $17;
 if (!(HEAP32[$tm$0 + 4 >> 2] | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $39 = $L + 28 | 0;
 $40 = HEAP32[$39 >> 2] | 0;
 $41 = $L + 8 | 0;
 $42 = HEAP32[$41 >> 2] | 0;
 HEAP32[$41 >> 2] = $42 + 8;
 $44 = $tm$0;
 $49 = HEAP32[$44 + 4 >> 2] | 0;
 $50 = $42;
 HEAP32[$50 >> 2] = HEAP32[$44 >> 2];
 HEAP32[$50 + 4 >> 2] = $49;
 $54 = HEAP32[$41 >> 2] | 0;
 HEAP32[$41 >> 2] = $54 + 8;
 $56 = $p1;
 $61 = HEAP32[$56 + 4 >> 2] | 0;
 $62 = $54;
 HEAP32[$62 >> 2] = HEAP32[$56 >> 2];
 HEAP32[$62 + 4 >> 2] = $61;
 $66 = HEAP32[$41 >> 2] | 0;
 HEAP32[$41 >> 2] = $66 + 8;
 $68 = $p2;
 $73 = HEAP32[$68 + 4 >> 2] | 0;
 $74 = $66;
 HEAP32[$74 >> 2] = HEAP32[$68 >> 2];
 HEAP32[$74 + 4 >> 2] = $73;
 _luaD_call($L, (HEAP32[$41 >> 2] | 0) + -24 | 0, 1, (HEAPU8[(HEAP32[$L + 16 >> 2] | 0) + 34 >> 0] | 0) & 2);
 $90 = (HEAP32[$39 >> 2] | 0) + ($res - $40) | 0;
 $92 = (HEAP32[$41 >> 2] | 0) + -8 | 0;
 HEAP32[$41 >> 2] = $92;
 $93 = $92;
 $98 = HEAP32[$93 + 4 >> 2] | 0;
 $99 = $90;
 HEAP32[$99 >> 2] = HEAP32[$93 >> 2];
 HEAP32[$99 + 4 >> 2] = $98;
 $$0 = 1;
 return $$0 | 0;
}

function _luaV_finishOp($L) {
 $L = $L | 0;
 var $1 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $20 = 0, $21 = 0, $25 = 0, $26 = 0, $28 = 0, $3 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $44 = 0, $50 = 0, $51 = 0, $54 = 0, $58 = 0, $60 = 0, $65 = 0, $66 = 0, $7 = 0, $78 = 0, $8 = 0, $83 = 0, $84 = 0, $res$0 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 $2 = $1 + 16 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $1 + 20 | 0;
 $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + -4 >> 2] | 0;
 $8 = $7 & 63;
 switch ($8 | 0) {
 case 29:
  {
   $50 = $L + 8 | 0;
   $51 = HEAP32[$50 >> 2] | 0;
   $54 = $51 + -16 | 0;
   $58 = $54 - ($3 + ($7 >>> 23 << 3)) | 0;
   $60 = $51 + -8 | 0;
   $65 = HEAP32[$60 + 4 >> 2] | 0;
   $66 = $51 + -24 | 0;
   HEAP32[$66 >> 2] = HEAP32[$60 >> 2];
   HEAP32[$66 + 4 >> 2] = $65;
   if (($58 | 0) > 8) {
    HEAP32[$50 >> 2] = $54;
    _luaV_concat($L, $58 >> 3);
   }
   $78 = (HEAP32[$50 >> 2] | 0) + -8 | 0;
   $83 = HEAP32[$78 + 4 >> 2] | 0;
   $84 = (HEAP32[$2 >> 2] | 0) + (($7 >>> 6 & 255) << 3) | 0;
   HEAP32[$84 >> 2] = HEAP32[$78 >> 2];
   HEAP32[$84 + 4 >> 2] = $83;
   HEAP32[$50 >> 2] = HEAP32[$1 + 4 >> 2];
   return;
  }
 case 36:
  {
   if (!($7 & 8372224)) return;
   HEAP32[$L + 8 >> 2] = HEAP32[$1 + 4 >> 2];
   return;
  }
 case 41:
  {
   HEAP32[$L + 8 >> 2] = HEAP32[$1 + 4 >> 2];
   return;
  }
 case 31:
 case 32:
 case 33:
  {
   $25 = $L + 8 | 0;
   $26 = HEAP32[$25 >> 2] | 0;
   $28 = HEAP32[$26 + -4 >> 2] | 0;
   if (!$28) $35 = 1; else if (($28 | 0) == 1) $35 = (HEAP32[$26 + -8 >> 2] | 0) == 0; else $35 = 0;
   $34 = $35 & 1;
   $36 = $34 ^ 1;
   HEAP32[$25 >> 2] = $26 + -8;
   if (($8 | 0) == 33) {
    $44 = (HEAP32[(_luaT_gettmbyobj($L, $3 + ($7 >>> 23 << 3) | 0, 21) | 0) + 4 >> 2] | 0) == 0;
    $res$0 = $44 ? $34 : $36;
   } else $res$0 = $36;
   if (($res$0 | 0) == ($7 >>> 6 & 255 | 0)) return;
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 4;
   return;
  }
 case 12:
 case 7:
 case 6:
 case 28:
 case 26:
 case 25:
 case 17:
 case 16:
 case 24:
 case 23:
 case 22:
 case 21:
 case 20:
 case 19:
 case 18:
 case 15:
 case 14:
 case 13:
  {
   $12 = $L + 8 | 0;
   $14 = (HEAP32[$12 >> 2] | 0) + -8 | 0;
   HEAP32[$12 >> 2] = $14;
   $15 = $14;
   $20 = HEAP32[$15 + 4 >> 2] | 0;
   $21 = $3 + (($7 >>> 6 & 255) << 3) | 0;
   HEAP32[$21 >> 2] = HEAP32[$15 >> 2];
   HEAP32[$21 + 4 >> 2] = $20;
   return;
  }
 default:
  return;
 }
}

function _lexerror($ls, $msg, $token) {
 $ls = $ls | 0;
 $msg = $msg | 0;
 $token = $token | 0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $19 = 0, $21 = 0, $23 = 0, $25 = 0, $26 = 0, $3 = 0, $34 = 0, $37 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $buff = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $vararg_buffer12 = sp + 40 | 0;
 $vararg_buffer9 = sp + 32 | 0;
 $vararg_buffer6 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $buff = sp + 48 | 0;
 _luaO_chunkid($buff, (HEAP32[$ls + 52 >> 2] | 0) + 24 | 0, 60);
 $3 = $ls + 32 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $6 = HEAP32[$ls + 4 >> 2] | 0;
 HEAP32[$vararg_buffer >> 2] = $buff;
 HEAP32[$vararg_buffer + 4 >> 2] = $6;
 HEAP32[$vararg_buffer + 8 >> 2] = $msg;
 $7 = _luaO_pushfstring($4, 67512, $vararg_buffer) | 0;
 if (!$token) {
  $37 = HEAP32[$3 >> 2] | 0;
  _luaD_throw($37, 3);
 }
 $9 = HEAP32[$3 >> 2] | 0;
 do if (($token + -290 | 0) >>> 0 < 4) {
  $10 = $ls + 40 | 0;
  $11 = HEAP32[$10 >> 2] | 0;
  $12 = $11 + 4 | 0;
  $13 = HEAP32[$12 >> 2] | 0;
  $15 = $11 + 8 | 0;
  $16 = HEAP32[$15 >> 2] | 0;
  do if (($13 + 1 | 0) >>> 0 > $16 >>> 0) if ($16 >>> 0 > 1073741822) _lexerror($ls, 67216, 0); else {
   $19 = $16 << 1;
   $21 = _luaM_realloc_($9, HEAP32[$11 >> 2] | 0, $16, $19) | 0;
   HEAP32[$11 >> 2] = $21;
   HEAP32[$15 >> 2] = $19;
   $23 = HEAP32[$12 >> 2] | 0;
   $25 = $21;
   break;
  } else {
   $23 = $13;
   $25 = HEAP32[$11 >> 2] | 0;
  } while (0);
  HEAP32[$12 >> 2] = $23 + 1;
  HEAP8[$25 + $23 >> 0] = 0;
  $26 = HEAP32[$3 >> 2] | 0;
  HEAP32[$vararg_buffer3 >> 2] = HEAP32[HEAP32[$10 >> 2] >> 2];
  $$0$i = _luaO_pushfstring($26, 67136, $vararg_buffer3) | 0;
 } else {
  if (($token | 0) < 257) {
   HEAP32[$vararg_buffer6 >> 2] = $token;
   $$0$i = _luaO_pushfstring($9, 67128, $vararg_buffer6) | 0;
   break;
  }
  $34 = HEAP32[66976 + ($token + -257 << 2) >> 2] | 0;
  if (($token | 0) < 289) {
   HEAP32[$vararg_buffer9 >> 2] = $34;
   $$0$i = _luaO_pushfstring($9, 67136, $vararg_buffer9) | 0;
  } else $$0$i = $34;
 } while (0);
 HEAP32[$vararg_buffer12 >> 2] = $7;
 HEAP32[$vararg_buffer12 + 4 >> 2] = $$0$i;
 _luaO_pushfstring($9, 67528, $vararg_buffer12) | 0;
 $37 = HEAP32[$3 >> 2] | 0;
 _luaD_throw($37, 3);
}

function __ZN11b2RopeJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $107 = 0, $11 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $12 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $24 = 0.0, $25 = 0.0, $27 = 0.0, $29 = 0.0, $3 = 0, $32 = 0.0, $37 = 0.0, $4 = 0, $40 = 0.0, $48 = 0.0, $5 = 0, $52 = 0.0, $55 = 0.0, $57 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $75 = 0.0, $86 = 0.0, $88 = 0.0, $99 = 0.0, $Cdot$0 = 0.0;
 $0 = $this + 96 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $data + 28 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $3 + ($1 * 12 | 0) | 0;
 $5 = $4;
 $11 = +HEAPF32[$5 >> 2];
 $12 = +HEAPF32[$5 + 4 >> 2];
 $14 = +HEAPF32[$3 + ($1 * 12 | 0) + 8 >> 2];
 $15 = $this + 100 | 0;
 $16 = HEAP32[$15 >> 2] | 0;
 $18 = $3 + ($16 * 12 | 0) | 0;
 $24 = +HEAPF32[$18 >> 2];
 $25 = +HEAPF32[$18 + 4 >> 2];
 $27 = +HEAPF32[$3 + ($16 * 12 | 0) + 8 >> 2];
 $29 = +HEAPF32[$this + 116 >> 2];
 $32 = +HEAPF32[$this + 112 >> 2];
 $37 = +HEAPF32[$this + 124 >> 2];
 $40 = +HEAPF32[$this + 120 >> 2];
 $48 = +HEAPF32[$this + 88 >> 2] - +HEAPF32[$this + 84 >> 2];
 $52 = +HEAPF32[$this + 104 >> 2];
 $55 = +HEAPF32[$this + 108 >> 2];
 $57 = ($24 - $27 * $37 - ($11 - $14 * $29)) * $52 + ($25 + $27 * $40 - ($12 + $14 * $32)) * $55;
 if ($48 < 0.0) $Cdot$0 = $57 + $48 * +HEAPF32[$data + 4 >> 2]; else $Cdot$0 = $57;
 $66 = $this + 92 | 0;
 $67 = +HEAPF32[$66 >> 2];
 $68 = $67 - $Cdot$0 * +HEAPF32[$this + 160 >> 2];
 $70 = $68 > 0.0 ? 0.0 : $68;
 HEAPF32[$66 >> 2] = $70;
 $71 = $70 - $67;
 $72 = $52 * $71;
 $73 = $55 * $71;
 $75 = +HEAPF32[$this + 144 >> 2];
 $86 = $14 - +HEAPF32[$this + 152 >> 2] * ($32 * $73 - $72 * $29);
 $88 = +HEAPF32[$this + 148 >> 2];
 $99 = $27 + +HEAPF32[$this + 156 >> 2] * ($73 * $40 - $72 * $37);
 $100 = +($11 - $75 * $72);
 $101 = +($12 - $75 * $73);
 $102 = $4;
 HEAPF32[$102 >> 2] = $100;
 HEAPF32[$102 + 4 >> 2] = $101;
 $107 = HEAP32[$2 >> 2] | 0;
 HEAPF32[$107 + ((HEAP32[$0 >> 2] | 0) * 12 | 0) + 8 >> 2] = $86;
 $111 = +($24 + $72 * $88);
 $112 = +($25 + $73 * $88);
 $113 = $107 + ((HEAP32[$15 >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$113 >> 2] = $111;
 HEAPF32[$113 + 4 >> 2] = $112;
 HEAPF32[(HEAP32[$2 >> 2] | 0) + ((HEAP32[$15 >> 2] | 0) * 12 | 0) + 8 >> 2] = $99;
 return;
}

function _mainposition($t, $key) {
 $t = $t | 0;
 $key = $key | 0;
 var $$0 = 0, $18 = 0, $22 = 0, $23 = 0, $31 = 0, $47 = 0, $48 = 0, $54 = 0, $58 = 0, $i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $i$i = sp;
 switch (HEAP32[$key + 4 >> 2] & 63 | 0) {
 case 22:
  {
   $$0 = (HEAP32[$t + 16 >> 2] | 0) + ((((HEAP32[$key >> 2] | 0) >>> 0) % (((1 << HEAPU8[$t + 7 >> 0]) + -1 | 1) >>> 0) | 0) * 20 | 0) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 20:
  {
   $47 = HEAP32[$key >> 2] | 0;
   $48 = $47 + 6 | 0;
   if (!(HEAP8[$48 >> 0] | 0)) {
    $54 = $47 + 8 | 0;
    HEAP32[$54 >> 2] = _luaS_hash($47 + 24 | 0, HEAP32[$47 + 12 >> 2] | 0, HEAP32[$54 >> 2] | 0) | 0;
    HEAP8[$48 >> 0] = 1;
    $58 = HEAP32[$key >> 2] | 0;
   } else $58 = $47;
   $$0 = (HEAP32[$t + 16 >> 2] | 0) + (((1 << HEAPU8[$t + 7 >> 0]) + -1 & HEAP32[$58 + 8 >> 2]) * 20 | 0) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 2:
  {
   $$0 = (HEAP32[$t + 16 >> 2] | 0) + ((((HEAP32[$key >> 2] | 0) >>> 0) % (((1 << HEAPU8[$t + 7 >> 0]) + -1 | 1) >>> 0) | 0) * 20 | 0) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 1:
  {
   $$0 = (HEAP32[$t + 16 >> 2] | 0) + (((1 << HEAPU8[$t + 7 >> 0]) + -1 & HEAP32[$key >> 2]) * 20 | 0) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 3:
  {
   $18 = ~~(+_frexpf(+HEAPF32[$key >> 2], $i$i) * 2147482624.0) + (HEAP32[$i$i >> 2] | 0) | 0;
   HEAP32[$i$i >> 2] = $18;
   if (($18 | 0) < 0) {
    if (($18 | 0) == (0 - $18 | 0)) {
     HEAP32[$i$i >> 2] = 0;
     $23 = 0;
    } else $23 = $18;
    $22 = 0 - $23 | 0;
    HEAP32[$i$i >> 2] = $22;
    $31 = $22;
   } else $31 = $18;
   $$0 = (HEAP32[$t + 16 >> 2] | 0) + ((($31 | 0) % ((1 << HEAPU8[$t + 7 >> 0]) + -1 | 1 | 0) | 0) * 20 | 0) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 4:
  {
   $$0 = (HEAP32[$t + 16 >> 2] | 0) + (((1 << HEAPU8[$t + 7 >> 0]) + -1 & HEAP32[(HEAP32[$key >> 2] | 0) + 8 >> 2]) * 20 | 0) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 19:
  {
   $$0 = (HEAP32[$t + 16 >> 2] | 0) + (((1 << HEAPU8[$t + 7 >> 0]) + -1 & HEAP32[$key >> 2]) * 20 | 0) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 default:
  {
   $$0 = (HEAP32[$t + 16 >> 2] | 0) + ((((HEAP32[$key >> 2] | 0) >>> 0) % (((1 << HEAPU8[$t + 7 >> 0]) + -1 | 1) >>> 0) | 0) * 20 | 0) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 return 0;
}

function _luaD_pcall($L, $func, $u, $old_top, $ef) {
 $L = $L | 0;
 $func = $func | 0;
 $u = $u | 0;
 $old_top = $old_top | 0;
 $ef = $ef | 0;
 var $$$i = 0, $$lim$0$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $16 = 0, $2 = 0, $22 = 0, $3 = 0, $31 = 0, $36 = 0, $37 = 0, $4 = 0, $41 = 0, $45 = 0, $5 = 0, $52 = 0, $54 = 0, $57 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $ci$03$i$i = 0, $lim$0$lcssa$i$i = 0, $lim$02$i$i = 0;
 $0 = $L + 16 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $L + 109 | 0;
 $3 = HEAP8[$2 >> 0] | 0;
 $4 = $L + 104 | 0;
 $5 = HEAP16[$4 >> 1] | 0;
 $6 = $L + 88 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 HEAP32[$6 >> 2] = $ef;
 $8 = _luaD_rawrunprotected($L, $func, $u) | 0;
 if (!$8) {
  HEAP32[$6 >> 2] = $7;
  return $8 | 0;
 }
 $10 = $L + 28 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 $12 = $11 + $old_top | 0;
 _luaF_close($L, $12);
 if (($8 | 0) == 4) {
  $16 = HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 132 >> 2] | 0;
  HEAP32[$12 >> 2] = $16;
  HEAP32[$11 + ($old_top + 4) >> 2] = HEAPU8[$16 + 4 >> 0] | 0 | 64;
 } else if (($8 | 0) == 6) {
  $22 = _luaS_newlstr($L, 56448, 23) | 0;
  HEAP32[$12 >> 2] = $22;
  HEAP32[$11 + ($old_top + 4) >> 2] = HEAPU8[$22 + 4 >> 0] | 0 | 64;
 } else {
  $31 = (HEAP32[$L + 8 >> 2] | 0) + -8 | 0;
  $36 = HEAP32[$31 + 4 >> 2] | 0;
  $37 = $12;
  HEAP32[$37 >> 2] = HEAP32[$31 >> 2];
  HEAP32[$37 + 4 >> 2] = $36;
 }
 $41 = $11 + ($old_top + 8) | 0;
 HEAP32[$L + 8 >> 2] = $41;
 HEAP32[$0 >> 2] = $1;
 HEAP8[$2 >> 0] = $3;
 HEAP16[$4 >> 1] = $5;
 if (!$1) $lim$0$lcssa$i$i = $41; else {
  $ci$03$i$i = $1;
  $lim$02$i$i = $41;
  while (1) {
   $45 = HEAP32[$ci$03$i$i + 4 >> 2] | 0;
   $$lim$0$i$i = $lim$02$i$i >>> 0 < $45 >>> 0 ? $45 : $lim$02$i$i;
   $ci$03$i$i = HEAP32[$ci$03$i$i + 8 >> 2] | 0;
   if (!$ci$03$i$i) {
    $lim$0$lcssa$i$i = $$lim$0$i$i;
    break;
   } else $lim$02$i$i = $$lim$0$i$i;
  }
 }
 $52 = $lim$0$lcssa$i$i - (HEAP32[$10 >> 2] | 0) | 0;
 $54 = ($52 >> 3) + 1 | 0;
 $57 = (($54 | 0) / 8 | 0) + 10 + $54 | 0;
 $$$i = ($57 | 0) > 1e6 ? 1e6 : $57;
 $59 = $L + 92 | 0;
 if ((HEAP32[$59 >> 2] | 0) > 1e6) _luaE_freeCI($L); else _luaE_shrinkCI($L);
 if (($52 | 0) > 7999992) {
  HEAP32[$6 >> 2] = $7;
  return $8 | 0;
 }
 if (($$$i | 0) >= (HEAP32[$59 >> 2] | 0)) {
  HEAP32[$6 >> 2] = $7;
  return $8 | 0;
 }
 _luaD_reallocstack($L, $$$i);
 HEAP32[$6 >> 2] = $7;
 return $8 | 0;
}

function _lua_setmetatable($L, $objindex) {
 $L = $L | 0;
 $objindex = $objindex | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $29 = 0, $30 = 0, $38 = 0, $4 = 0, $42 = 0, $51 = 0, $55 = 0, $64 = 0, $68 = 0, $69 = 0, $mt$0 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($objindex | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($objindex << 3) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 59168;
 } else {
  if (($objindex | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($objindex << 3) | 0;
   break;
  }
  if (($objindex | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $16 = -1001e3 - $objindex | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 4 >> 2] | 0) == 22) $$0$i = 59168; else {
   $21 = HEAP32[$17 >> 2] | 0;
   if (($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0)) $$0$i = 59168; else $$0$i = $21 + 16 + ($16 + -1 << 3) | 0;
  }
 } while (0);
 $29 = $L + 8 | 0;
 $30 = HEAP32[$29 >> 2] | 0;
 if (!(HEAP32[$30 + -4 >> 2] | 0)) $mt$0 = 0; else $mt$0 = HEAP32[$30 + -8 >> 2] | 0;
 $38 = HEAP32[$$0$i + 4 >> 2] & 15;
 if (($38 | 0) == 7) {
  HEAP32[(HEAP32[$$0$i >> 2] | 0) + 8 >> 2] = $mt$0;
  if (!$mt$0) {
   $68 = HEAP32[$29 >> 2] | 0;
   $69 = $68 + -8 | 0;
   HEAP32[$29 >> 2] = $69;
   return 1;
  }
  $55 = HEAP32[$$0$i >> 2] | 0;
  if (!(HEAP8[$55 + 5 >> 0] & 4)) $64 = $55; else if (!(HEAP8[$mt$0 + 5 >> 0] & 3)) $64 = $55; else {
   _luaC_barrier_($L, $55, $mt$0);
   $64 = HEAP32[$$0$i >> 2] | 0;
  }
  _luaC_checkfinalizer($L, $64, $mt$0);
  $68 = HEAP32[$29 >> 2] | 0;
  $69 = $68 + -8 | 0;
  HEAP32[$29 >> 2] = $69;
  return 1;
 } else if (($38 | 0) == 5) {
  HEAP32[(HEAP32[$$0$i >> 2] | 0) + 24 >> 2] = $mt$0;
  if (!$mt$0) {
   $68 = HEAP32[$29 >> 2] | 0;
   $69 = $68 + -8 | 0;
   HEAP32[$29 >> 2] = $69;
   return 1;
  }
  $42 = HEAP32[$$0$i >> 2] | 0;
  if (!(HEAP8[$42 + 5 >> 0] & 4)) $51 = $42; else if (!(HEAP8[$mt$0 + 5 >> 0] & 3)) $51 = $42; else {
   _luaC_barrier_($L, $42, $mt$0);
   $51 = HEAP32[$$0$i >> 2] | 0;
  }
  _luaC_checkfinalizer($L, $51, $mt$0);
  $68 = HEAP32[$29 >> 2] | 0;
  $69 = $68 + -8 | 0;
  HEAP32[$29 >> 2] = $69;
  return 1;
 } else {
  HEAP32[(HEAP32[$L + 12 >> 2] | 0) + ($38 << 2) + 232 >> 2] = $mt$0;
  $68 = HEAP32[$29 >> 2] | 0;
  $69 = $68 + -8 | 0;
  HEAP32[$29 >> 2] = $69;
  return 1;
 }
 return 0;
}

function _stbtt_InitFont($info, $data2, $fontstart) {
 $info = $info | 0;
 $data2 = $data2 | 0;
 $fontstart = $fontstart | 0;
 var $$0 = 0, $11 = 0, $2 = 0, $21 = 0, $3 = 0, $40 = 0, $41 = 0, $43 = 0, $45 = 0, $5 = 0, $61 = 0, $7 = 0, $80 = 0, $83 = 0, $9 = 0, $94 = 0, $i$013 = 0;
 HEAP32[$info + 4 >> 2] = $data2;
 HEAP32[$info + 8 >> 2] = $fontstart;
 $2 = _stbtt__find_table($data2, $fontstart, 80944) | 0;
 $3 = _stbtt__find_table($data2, $fontstart, 80952) | 0;
 HEAP32[$info + 16 >> 2] = $3;
 $5 = _stbtt__find_table($data2, $fontstart, 80960) | 0;
 HEAP32[$info + 20 >> 2] = $5;
 $7 = _stbtt__find_table($data2, $fontstart, 80968) | 0;
 HEAP32[$info + 24 >> 2] = $7;
 $9 = _stbtt__find_table($data2, $fontstart, 80976) | 0;
 HEAP32[$info + 28 >> 2] = $9;
 $11 = _stbtt__find_table($data2, $fontstart, 80984) | 0;
 HEAP32[$info + 32 >> 2] = $11;
 HEAP32[$info + 36 >> 2] = _stbtt__find_table($data2, $fontstart, 80992) | 0;
 if (($2 | 0) == 0 | ($3 | 0) == 0 | ($5 | 0) == 0 | ($7 | 0) == 0 | ($9 | 0) == 0 | ($11 | 0) == 0) {
  $$0 = 0;
  return $$0 | 0;
 }
 $21 = _stbtt__find_table($data2, $fontstart, 81e3) | 0;
 if (!$21) HEAP32[$info + 12 >> 2] = 65535; else HEAP32[$info + 12 >> 2] = (HEAPU8[$data2 + ($21 + 4) >> 0] | 0) << 8 | (HEAPU8[$data2 + ($21 + 5) >> 0] | 0);
 $40 = (HEAPU8[$data2 + ($2 + 2) >> 0] | 0) << 8 | (HEAPU8[$data2 + ($2 + 3) >> 0] | 0);
 $41 = $info + 40 | 0;
 HEAP32[$41 >> 2] = 0;
 if (!$40) {
  $$0 = 0;
  return $$0 | 0;
 }
 $43 = $2 + 4 | 0;
 $94 = 0;
 $i$013 = 0;
 while (1) {
  $45 = $43 + ($i$013 << 3) | 0;
  if (((HEAPU8[$data2 + $45 >> 0] | 0) << 8 | (HEAPU8[$data2 + ($45 + 1) >> 0] | 0) | 0) == 3) {
   $61 = (HEAPU8[$data2 + ($45 + 2) >> 0] | 0) << 8 | (HEAPU8[$data2 + ($45 + 3) >> 0] | 0);
   if (($61 | 0) == 10 | ($61 | 0) == 1) {
    $80 = ((HEAPU8[$data2 + ($45 + 5) >> 0] | 0) << 16 | (HEAPU8[$data2 + ($45 + 4) >> 0] | 0) << 24 | (HEAPU8[$data2 + ($45 + 6) >> 0] | 0) << 8 | (HEAPU8[$data2 + ($45 + 7) >> 0] | 0)) + $2 | 0;
    HEAP32[$41 >> 2] = $80;
    $83 = $80;
   } else $83 = $94;
  } else $83 = $94;
  $i$013 = $i$013 + 1 | 0;
  if (($i$013 | 0) >= ($40 | 0)) break; else $94 = $83;
 }
 if (!$83) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP32[$info + 44 >> 2] = (HEAPU8[$data2 + ($5 + 50) >> 0] | 0) << 8 | (HEAPU8[$data2 + ($5 + 51) >> 0] | 0);
 $$0 = 1;
 return $$0 | 0;
}

function _get_bits($f, $n) {
 $f = $f | 0;
 $n = $n | 0;
 var $$0 = 0, $$0$i1 = 0, $$pr$i = 0, $0 = 0, $1 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $28 = 0, $31 = 0, $38 = 0, $42 = 0, $46 = 0, $49 = 0, $5 = 0, $50 = 0, $56 = 0, label = 0;
 $0 = $f + 1412 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (($1 | 0) < 0) {
  $$0 = 0;
  return $$0 | 0;
 }
 do if (($1 | 0) < ($n | 0)) {
  if (($n | 0) > 24) {
   $5 = _get_bits($f, 24) | 0;
   return ((_get_bits($f, $n + -24 | 0) | 0) << 24) + $5 | 0;
  }
  if (!$1) HEAP32[$f + 1408 >> 2] = 0;
  $12 = $f + 1392 | 0;
  $13 = $f + 1400 | 0;
  $14 = $f + 1416 | 0;
  $15 = $f + 32 | 0;
  $16 = $f + 20 | 0;
  $17 = $f + 112 | 0;
  $18 = $f + 1408 | 0;
  $19 = $f + 40 | 0;
  while (1) {
   $20 = HEAP8[$12 >> 0] | 0;
   if (!($20 << 24 >> 24)) {
    if (HEAP32[$13 >> 2] | 0) {
     label = 20;
     break;
    }
    if (!(_next_segment($f) | 0)) {
     label = 20;
     break;
    }
    $$pr$i = HEAP8[$12 >> 0] | 0;
    if (!($$pr$i << 24 >> 24)) {
     label = 12;
     break;
    } else $28 = $$pr$i;
   } else $28 = $20;
   HEAP8[$12 >> 0] = $28 + -1 << 24 >> 24;
   HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 1;
   $31 = HEAP32[$15 >> 2] | 0;
   do if (!$31) {
    $38 = _fgetc(HEAP32[$16 >> 2] | 0) | 0;
    if (($38 | 0) == -1) {
     HEAP32[$17 >> 2] = 1;
     $$0$i1 = 0;
     break;
    } else {
     $$0$i1 = $38 & 255;
     break;
    }
   } else if ($31 >>> 0 < (HEAP32[$19 >> 2] | 0) >>> 0) {
    HEAP32[$15 >> 2] = $31 + 1;
    $$0$i1 = HEAP8[$31 >> 0] | 0;
    break;
   } else {
    HEAP32[$17 >> 2] = 1;
    $$0$i1 = 0;
    break;
   } while (0);
   $42 = HEAP32[$0 >> 2] | 0;
   HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + (($$0$i1 & 255) << $42);
   $46 = $42 + 8 | 0;
   HEAP32[$0 >> 2] = $46;
   if (($46 | 0) >= ($n | 0)) {
    label = 22;
    break;
   }
  }
  if ((label | 0) == 12) ___assert_fail(79096, 78904, 1503, 79120); else if ((label | 0) == 20) {
   HEAP32[$0 >> 2] = -1;
   $$0 = 0;
   return $$0 | 0;
  } else if ((label | 0) == 22) {
   if (($46 | 0) < 0) $$0 = 0; else {
    $56 = $46;
    break;
   }
   return $$0 | 0;
  }
 } else $56 = $1; while (0);
 $49 = $f + 1408 | 0;
 $50 = HEAP32[$49 >> 2] | 0;
 HEAP32[$49 >> 2] = $50 >>> $n;
 HEAP32[$0 >> 2] = $56 - $n;
 $$0 = $50 & (1 << $n) + -1;
 return $$0 | 0;
}

function __ZN13b2PulleyJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $107 = 0, $11 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $12 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $24 = 0.0, $25 = 0.0, $27 = 0.0, $29 = 0.0, $3 = 0, $32 = 0.0, $37 = 0.0, $4 = 0, $40 = 0.0, $45 = 0.0, $48 = 0.0, $5 = 0, $53 = 0.0, $55 = 0.0, $58 = 0.0, $65 = 0.0, $66 = 0, $69 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $75 = 0.0, $86 = 0.0, $88 = 0.0, $99 = 0.0;
 $0 = $this + 120 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $data + 28 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $3 + ($1 * 12 | 0) | 0;
 $5 = $4;
 $11 = +HEAPF32[$5 >> 2];
 $12 = +HEAPF32[$5 + 4 >> 2];
 $14 = +HEAPF32[$3 + ($1 * 12 | 0) + 8 >> 2];
 $15 = $this + 124 | 0;
 $16 = HEAP32[$15 >> 2] | 0;
 $18 = $3 + ($16 * 12 | 0) | 0;
 $24 = +HEAPF32[$18 >> 2];
 $25 = +HEAPF32[$18 + 4 >> 2];
 $27 = +HEAPF32[$3 + ($16 * 12 | 0) + 8 >> 2];
 $29 = +HEAPF32[$this + 148 >> 2];
 $32 = +HEAPF32[$this + 144 >> 2];
 $37 = +HEAPF32[$this + 156 >> 2];
 $40 = +HEAPF32[$this + 152 >> 2];
 $45 = +HEAPF32[$this + 128 >> 2];
 $48 = +HEAPF32[$this + 132 >> 2];
 $53 = +HEAPF32[$this + 112 >> 2];
 $55 = +HEAPF32[$this + 136 >> 2];
 $58 = +HEAPF32[$this + 140 >> 2];
 $65 = +HEAPF32[$this + 192 >> 2] * (-(($11 - $14 * $29) * $45 + ($12 + $14 * $32) * $48) - $53 * (($24 - $27 * $37) * $55 + ($25 + $27 * $40) * $58));
 $66 = $this + 116 | 0;
 HEAPF32[$66 >> 2] = +HEAPF32[$66 >> 2] - $65;
 $69 = $45 * $65;
 $70 = $48 * $65;
 $71 = $53 * $65;
 $72 = $55 * $71;
 $73 = $71 * $58;
 $75 = +HEAPF32[$this + 176 >> 2];
 $86 = $14 + +HEAPF32[$this + 184 >> 2] * ($70 * $32 - $69 * $29);
 $88 = +HEAPF32[$this + 180 >> 2];
 $99 = $27 + +HEAPF32[$this + 188 >> 2] * ($73 * $40 - $72 * $37);
 $100 = +($11 + $69 * $75);
 $101 = +($12 + $70 * $75);
 $102 = $4;
 HEAPF32[$102 >> 2] = $100;
 HEAPF32[$102 + 4 >> 2] = $101;
 $107 = HEAP32[$2 >> 2] | 0;
 HEAPF32[$107 + ((HEAP32[$0 >> 2] | 0) * 12 | 0) + 8 >> 2] = $86;
 $111 = +($24 + $72 * $88);
 $112 = +($25 + $73 * $88);
 $113 = $107 + ((HEAP32[$15 >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$113 >> 2] = $111;
 HEAPF32[$113 + 4 >> 2] = $112;
 HEAPF32[(HEAP32[$2 >> 2] | 0) + ((HEAP32[$15 >> 2] | 0) * 12 | 0) + 8 >> 2] = $99;
 return;
}

function _png_do_bgr($row_info, $row) {
 $row_info = $row_info | 0;
 $row = $row | 0;
 var $1 = 0, $10 = 0, $14 = 0, $15 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $9 = 0, $i$01 = 0, $i2$05 = 0, $i5$011 = 0, $i8$016 = 0, $rp$02 = 0, $rp1$06 = 0, $rp4$010 = 0, $rp7$015 = 0;
 $1 = HEAP8[$row_info + 8 >> 0] | 0;
 if (!($1 & 2)) return;
 $4 = HEAP32[$row_info >> 2] | 0;
 $6 = HEAP8[$row_info + 9 >> 0] | 0;
 if ($6 << 24 >> 24 == 8) if ($1 << 24 >> 24 == 2) {
  if (!$4) return; else {
   $i$01 = 0;
   $rp$02 = $row;
  }
  while (1) {
   $9 = HEAP8[$rp$02 >> 0] | 0;
   $10 = $rp$02 + 2 | 0;
   HEAP8[$rp$02 >> 0] = HEAP8[$10 >> 0] | 0;
   HEAP8[$10 >> 0] = $9;
   $i$01 = $i$01 + 1 | 0;
   if (($i$01 | 0) == ($4 | 0)) break; else $rp$02 = $rp$02 + 3 | 0;
  }
  return;
 } else if ($1 << 24 >> 24 == 6) {
  if (!$4) return; else {
   $i2$05 = 0;
   $rp1$06 = $row;
  }
  while (1) {
   $14 = HEAP8[$rp1$06 >> 0] | 0;
   $15 = $rp1$06 + 2 | 0;
   HEAP8[$rp1$06 >> 0] = HEAP8[$15 >> 0] | 0;
   HEAP8[$15 >> 0] = $14;
   $i2$05 = $i2$05 + 1 | 0;
   if (($i2$05 | 0) == ($4 | 0)) break; else $rp1$06 = $rp1$06 + 4 | 0;
  }
  return;
 } else return; else if ($6 << 24 >> 24 == 16) if ($1 << 24 >> 24 == 6) {
  if (!$4) return; else {
   $i8$016 = 0;
   $rp7$015 = $row;
  }
  while (1) {
   $30 = HEAP8[$rp7$015 >> 0] | 0;
   $31 = $rp7$015 + 4 | 0;
   HEAP8[$rp7$015 >> 0] = HEAP8[$31 >> 0] | 0;
   HEAP8[$31 >> 0] = $30;
   $33 = $rp7$015 + 1 | 0;
   $34 = HEAP8[$33 >> 0] | 0;
   $35 = $rp7$015 + 5 | 0;
   HEAP8[$33 >> 0] = HEAP8[$35 >> 0] | 0;
   HEAP8[$35 >> 0] = $34;
   $i8$016 = $i8$016 + 1 | 0;
   if (($i8$016 | 0) == ($4 | 0)) break; else $rp7$015 = $rp7$015 + 8 | 0;
  }
  return;
 } else if ($1 << 24 >> 24 == 2) {
  if (!$4) return; else {
   $i5$011 = 0;
   $rp4$010 = $row;
  }
  while (1) {
   $21 = HEAP8[$rp4$010 >> 0] | 0;
   $22 = $rp4$010 + 4 | 0;
   HEAP8[$rp4$010 >> 0] = HEAP8[$22 >> 0] | 0;
   HEAP8[$22 >> 0] = $21;
   $24 = $rp4$010 + 1 | 0;
   $25 = HEAP8[$24 >> 0] | 0;
   $26 = $rp4$010 + 5 | 0;
   HEAP8[$24 >> 0] = HEAP8[$26 >> 0] | 0;
   HEAP8[$26 >> 0] = $25;
   $i5$011 = $i5$011 + 1 | 0;
   if (($i5$011 | 0) == ($4 | 0)) break; else $rp4$010 = $rp4$010 + 6 | 0;
  }
  return;
 } else return; else return;
}

function _start_page($f) {
 $f = $f | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i1$i = 0, $$0$i3$i = 0, $$0$i5$i = 0, $0 = 0, $1 = 0, $11 = 0, $16 = 0, $26 = 0, $31 = 0, $41 = 0, $46 = 0, $56 = 0, label = 0;
 $0 = $f + 32 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 do if (!$1) {
  $11 = _fgetc(HEAP32[$f + 20 >> 2] | 0) | 0;
  if (($11 | 0) == -1) {
   HEAP32[$f + 112 >> 2] = 1;
   break;
  } else {
   $$0$i$i = $11 & 255;
   label = 8;
   break;
  }
 } else if ($1 >>> 0 < (HEAP32[$f + 40 >> 2] | 0) >>> 0) {
  HEAP32[$0 >> 2] = $1 + 1;
  $$0$i$i = HEAP8[$1 >> 0] | 0;
  label = 8;
  break;
 } else {
  HEAP32[$f + 112 >> 2] = 1;
  break;
 } while (0);
 L10 : do if ((label | 0) == 8) if ($$0$i$i << 24 >> 24 == 79) {
  $16 = HEAP32[$0 >> 2] | 0;
  do if (!$16) {
   $26 = _fgetc(HEAP32[$f + 20 >> 2] | 0) | 0;
   if (($26 | 0) == -1) {
    HEAP32[$f + 112 >> 2] = 1;
    break L10;
   } else {
    $$0$i1$i = $26 & 255;
    break;
   }
  } else if ($16 >>> 0 < (HEAP32[$f + 40 >> 2] | 0) >>> 0) {
   HEAP32[$0 >> 2] = $16 + 1;
   $$0$i1$i = HEAP8[$16 >> 0] | 0;
   break;
  } else {
   HEAP32[$f + 112 >> 2] = 1;
   break L10;
  } while (0);
  if ($$0$i1$i << 24 >> 24 == 103) {
   $31 = HEAP32[$0 >> 2] | 0;
   do if (!$31) {
    $41 = _fgetc(HEAP32[$f + 20 >> 2] | 0) | 0;
    if (($41 | 0) == -1) {
     HEAP32[$f + 112 >> 2] = 1;
     break L10;
    } else {
     $$0$i3$i = $41 & 255;
     break;
    }
   } else if ($31 >>> 0 < (HEAP32[$f + 40 >> 2] | 0) >>> 0) {
    HEAP32[$0 >> 2] = $31 + 1;
    $$0$i3$i = HEAP8[$31 >> 0] | 0;
    break;
   } else {
    HEAP32[$f + 112 >> 2] = 1;
    break L10;
   } while (0);
   if ($$0$i3$i << 24 >> 24 == 103) {
    $46 = HEAP32[$0 >> 2] | 0;
    do if (!$46) {
     $56 = _fgetc(HEAP32[$f + 20 >> 2] | 0) | 0;
     if (($56 | 0) == -1) {
      HEAP32[$f + 112 >> 2] = 1;
      break L10;
     } else {
      $$0$i5$i = $56 & 255;
      break;
     }
    } else if ($46 >>> 0 < (HEAP32[$f + 40 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $46 + 1;
     $$0$i5$i = HEAP8[$46 >> 0] | 0;
     break;
    } else {
     HEAP32[$f + 112 >> 2] = 1;
     break L10;
    } while (0);
    if ($$0$i5$i << 24 >> 24 == 83) {
     $$0 = _start_page_no_capturepattern($f) | 0;
     return $$0 | 0;
    }
   }
  }
 } while (0);
 HEAP32[$f + 116 >> 2] = 30;
 $$0 = 0;
 return $$0 | 0;
}

function _display_draw_surface($xi1, $yi1, $xi2, $yi2, $xi3, $yi3, $xo1, $yo1, $xo2, $yo2, $xo3, $yo3) {
 $xi1 = +$xi1;
 $yi1 = +$yi1;
 $xi2 = +$xi2;
 $yi2 = +$yi2;
 $xi3 = +$xi3;
 $yi3 = +$yi3;
 $xo1 = +$xo1;
 $yo1 = +$yo1;
 $xo2 = +$xo2;
 $yo2 = +$yo2;
 $xo3 = +$xo3;
 $yo3 = +$yo3;
 var $0 = 0, $1 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $28 = 0, $3 = 0, $30 = 0, $32 = 0, $5 = 0, $7 = 0, $9 = 0;
 $0 = HEAP32[4530] | 0;
 $1 = HEAP32[4531] | 0;
 $3 = $1 & 255;
 $5 = ($1 & 65535) >>> 8 & 255;
 $7 = $1 >>> 16 & 255;
 $9 = $1 >>> 24 & 255;
 if (HEAP8[18140] | 0) {
  $12 = $1 & 255;
  _buffer_check_type($0, 2);
  _buffer_check_not_use_texture($0);
  _buffer_check_not_full($0);
  _buffer_push_vertex($0, $xo1, $yo1);
  _buffer_push_vertex($0, $xo2, $yo2);
  _buffer_push_color($0, $12, $5, $7, $9);
  _buffer_push_color($0, $12, $5, $7, $9);
  $13 = HEAP32[4530] | 0;
  $14 = HEAP32[4531] | 0;
  $16 = $14 & 255;
  $18 = ($14 & 65535) >>> 8 & 255;
  $20 = $14 >>> 16 & 255;
  $22 = $14 >>> 24 & 255;
  _buffer_check_type($13, 2);
  _buffer_check_not_use_texture($13);
  _buffer_check_not_full($13);
  _buffer_push_vertex($13, $xo2, $yo2);
  _buffer_push_vertex($13, $xo3, $yo3);
  _buffer_push_color($13, $16, $18, $20, $22);
  _buffer_push_color($13, $16, $18, $20, $22);
  $23 = HEAP32[4530] | 0;
  $24 = HEAP32[4531] | 0;
  $26 = $24 & 255;
  $28 = ($24 & 65535) >>> 8 & 255;
  $30 = $24 >>> 16 & 255;
  $32 = $24 >>> 24 & 255;
  _buffer_check_type($23, 2);
  _buffer_check_not_use_texture($23);
  _buffer_check_not_full($23);
  _buffer_push_vertex($23, $xo3, $yo3);
  _buffer_push_vertex($23, $xo1, $yo1);
  _buffer_push_color($23, $26, $28, $30, $32);
  _buffer_push_color($23, $26, $28, $30, $32);
  return;
 }
 if (!(HEAP32[4529] | 0)) ___assert_fail(18976, 18224, 685, 19024);
 _buffer_check_type($0, 3);
 _buffer_check_use_texture($0);
 _buffer_check_not_full($0);
 _buffer_push_tex_coord($0, $xi1, $yi1);
 _buffer_push_tex_coord($0, $xi2, $yi2);
 _buffer_push_tex_coord($0, $xi3, $yi3);
 _buffer_push_vertex($0, $xo1, $yo1);
 _buffer_push_vertex($0, $xo2, $yo2);
 _buffer_push_vertex($0, $xo3, $yo3);
 _buffer_push_color($0, $3, $5, $7, $9);
 _buffer_push_color($0, $3, $5, $7, $9);
 _buffer_push_color($0, $3, $5, $7, $9);
 return;
}

function _lua_topointer($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0 = 0, $$0$i = 0, $$0$i$i = 0, $1 = 0, $16 = 0, $17 = 0, $2 = 0, $21 = 0, $38 = 0, $4 = 0, $50 = 0, $51 = 0, $55 = 0, $65 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 $2 = ($idx | 0) > 0;
 do if ($2) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 3) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 59168;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 3) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 4 >> 2] | 0) == 22) $$0$i = 59168; else {
   $21 = HEAP32[$17 >> 2] | 0;
   if (($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0)) $$0$i = 59168; else $$0$i = $21 + 16 + ($16 + -1 << 3) | 0;
  }
 } while (0);
 switch (HEAP32[$$0$i + 4 >> 2] & 63 | 0) {
 case 38:
  {
   $$0 = HEAP32[$$0$i >> 2] | 0;
   return $$0 | 0;
  }
 case 6:
  {
   $$0 = HEAP32[$$0$i >> 2] | 0;
   return $$0 | 0;
  }
 case 8:
  {
   $$0 = HEAP32[$$0$i >> 2] | 0;
   return $$0 | 0;
  }
 case 5:
  {
   $$0 = HEAP32[$$0$i >> 2] | 0;
   return $$0 | 0;
  }
 case 22:
  {
   $$0 = HEAP32[$$0$i >> 2] | 0;
   return $$0 | 0;
  }
 case 2:
 case 7:
  {
   do if ($2) {
    $38 = (HEAP32[$1 >> 2] | 0) + ($idx << 3) | 0;
    $$0$i$i = $38 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $38 : 59168;
   } else {
    if (($idx | 0) >= -1000999) {
     $$0$i$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 3) | 0;
     break;
    }
    if (($idx | 0) == -1001e3) {
     $$0$i$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
     break;
    }
    $50 = -1001e3 - $idx | 0;
    $51 = HEAP32[$1 >> 2] | 0;
    if ((HEAP32[$51 + 4 >> 2] | 0) == 22) $$0$i$i = 59168; else {
     $55 = HEAP32[$51 >> 2] | 0;
     if (($50 | 0) > (HEAPU8[$55 + 6 >> 0] | 0 | 0)) $$0$i$i = 59168; else $$0$i$i = $55 + 16 + ($50 + -1 << 3) | 0;
    }
   } while (0);
   $65 = HEAP32[$$0$i$i + 4 >> 2] & 15;
   if (($65 | 0) == 2) {
    $$0 = HEAP32[$$0$i$i >> 2] | 0;
    return $$0 | 0;
   } else if (($65 | 0) == 7) {
    $$0 = (HEAP32[$$0$i$i >> 2] | 0) + 24 | 0;
    return $$0 | 0;
   } else {
    $$0 = 0;
    return $$0 | 0;
   }
   break;
  }
 default:
  {
   $$0 = 0;
   return $$0 | 0;
  }
 }
 return 0;
}

function _png_icc_profile_error($png_ptr, $colorspace, $name, $value, $reason) {
 $png_ptr = $png_ptr | 0;
 $colorspace = $colorspace | 0;
 $name = $name | 0;
 $value = $value | 0;
 $reason = $reason | 0;
 var $0 = 0, $1 = 0, $10 = 0, $15 = 0, $16 = 0, $21 = 0, $22 = 0, $27 = 0, $55 = 0, $6 = 0, $9 = 0, $message = 0, $number = 0, $pos$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $message = sp + 24 | 0;
 $number = sp;
 $0 = ($colorspace | 0) != 0;
 if ($0) {
  $1 = $colorspace + 74 | 0;
  HEAP16[$1 >> 1] = HEAPU16[$1 >> 1] | 0 | 32768;
 }
 $6 = _png_safecat($message, 196, 0, 74024) | 0;
 $9 = _png_safecat($message, 196, _png_safecat($message, $6 + 79 | 0, $6, $name) | 0, 74040) | 0;
 $10 = $value >>> 24;
 if (($10 | 0) == 32 | ($10 + -48 | 0) >>> 0 < 10 | ($10 + -65 | 0) >>> 0 < 26 | ($10 + -97 | 0) >>> 0 < 26) {
  $15 = $value >>> 16;
  $16 = $15 & 255;
  if (($16 | 0) == 32 | ($16 + -48 | 0) >>> 0 < 10 | ($16 + -65 | 0) >>> 0 < 26 | ($16 + -97 | 0) >>> 0 < 26) {
   $21 = $value >>> 8;
   $22 = $21 & 255;
   if (($22 | 0) == 32 | ($22 + -48 | 0) >>> 0 < 10 | ($22 + -65 | 0) >>> 0 < 26 | ($22 + -97 | 0) >>> 0 < 26) {
    $27 = $value & 255;
    if (($27 | 0) == 32 | ($27 + -48 | 0) >>> 0 < 10 | ($27 + -65 | 0) >>> 0 < 26 | ($27 + -97 | 0) >>> 0 < 26) {
     HEAP8[$message + $9 >> 0] = 39;
     HEAP8[$message + ($9 + 1) >> 0] = ($10 + -32 | 0) >>> 0 < 95 ? $10 & 255 : 63;
     HEAP8[$message + ($9 + 2) >> 0] = ($16 + -32 | 0) >>> 0 < 95 ? $15 & 255 : 63;
     HEAP8[$message + ($9 + 3) >> 0] = ($22 + -32 | 0) >>> 0 < 95 ? $21 & 255 : 63;
     HEAP8[$message + ($9 + 4) >> 0] = ($27 + -32 | 0) >>> 0 < 95 ? $value & 255 : 63;
     HEAP8[$message + ($9 + 5) >> 0] = 39;
     HEAP8[$message + ($9 + 6) >> 0] = 58;
     HEAP8[$message + ($9 + 7) >> 0] = 32;
     $pos$0 = $9 + 8 | 0;
     _png_safecat($message, 196, $pos$0, $reason) | 0;
     $55 = $0 ? 2 : 1;
     _png_chunk_report($png_ptr, $message, $55);
     STACKTOP = sp;
     return;
    }
   }
  }
 }
 $pos$0 = _png_safecat($message, 196, _png_safecat($message, 196, $9, _png_format_number($number, $number + 24 | 0, 3, $value) | 0) | 0, 74048) | 0;
 _png_safecat($message, 196, $pos$0, $reason) | 0;
 $55 = $0 ? 2 : 1;
 _png_chunk_report($png_ptr, $message, $55);
 STACKTOP = sp;
 return;
}

function _luaG_traceexec($L) {
 $L = $L | 0;
 var $$c = 0, $$pre = 0, $$pre$phi2Z2D = 0, $$pre$phiZ2D = 0, $1 = 0, $12 = 0, $14 = 0, $24 = 0, $25 = 0, $26 = 0, $30 = 0, $33 = 0, $35 = 0, $36 = 0, $4 = 0, $41 = 0, $49 = 0, $51 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 $4 = HEAPU8[$L + 108 >> 0] | 0;
 if (!($4 & 8)) $67 = 0; else {
  $7 = $L + 100 | 0;
  if (!(HEAP32[$7 >> 2] | 0)) {
   HEAP32[$7 >> 2] = HEAP32[$L + 96 >> 2];
   $67 = 1;
  } else $67 = 0;
 }
 $12 = $1 + 34 | 0;
 $14 = HEAPU8[$12 >> 0] | 0;
 if ($14 & 64) {
  HEAP8[$12 >> 0] = $14 & 191;
  return;
 }
 if ($67) _luaD_hook($L, 3, -1);
 do if (!($4 & 4)) {
  $$pre = $1 + 20 | 0;
  $$pre$phi2Z2D = $$pre;
  $$pre$phiZ2D = $$pre;
 } else {
  $24 = HEAP32[(HEAP32[HEAP32[$1 >> 2] >> 2] | 0) + 12 >> 2] | 0;
  $25 = $1 + 20 | 0;
  $26 = HEAP32[$25 >> 2] | 0;
  $30 = HEAP32[$24 + 48 >> 2] | 0;
  $33 = ($26 - $30 >> 2) + -1 | 0;
  $35 = HEAP32[$24 + 56 >> 2] | 0;
  $36 = ($35 | 0) == 0;
  if ($36) $49 = -1; else $49 = HEAP32[$35 + ($33 << 2) >> 2] | 0;
  if ($33) {
   $41 = HEAP32[$L + 20 >> 2] | 0;
   if ($26 >>> 0 > $41 >>> 0) {
    if ($36) $51 = -1; else $51 = HEAP32[$35 + (($41 - $30 >> 2) + -1 << 2) >> 2] | 0;
    if (($49 | 0) == ($51 | 0)) {
     $$pre$phi2Z2D = $25;
     $$pre$phiZ2D = $25;
     break;
    }
   }
  }
  _luaD_hook($L, 2, $49);
  $$pre$phi2Z2D = $25;
  $$pre$phiZ2D = $25;
 } while (0);
 HEAP32[$L + 20 >> 2] = HEAP32[$$pre$phi2Z2D >> 2];
 if ((HEAP8[$L + 6 >> 0] | 0) != 1) return;
 if (!$67) {
  $58 = HEAP32[$$pre$phi2Z2D >> 2] | 0;
  $59 = $58 + -4 | 0;
  $$c = $59;
  HEAP32[$$pre$phiZ2D >> 2] = $$c;
  $60 = HEAP8[$12 >> 0] | 0;
  $61 = $60 & 255;
  $62 = $61 | 64;
  $63 = $62 & 255;
  HEAP8[$12 >> 0] = $63;
  $64 = $L + 8 | 0;
  $65 = HEAP32[$64 >> 2] | 0;
  $66 = $65 + -8 | 0;
  HEAP32[$1 >> 2] = $66;
  _luaD_throw($L, 1);
 }
 HEAP32[$L + 100 >> 2] = 1;
 $58 = HEAP32[$$pre$phi2Z2D >> 2] | 0;
 $59 = $58 + -4 | 0;
 $$c = $59;
 HEAP32[$$pre$phiZ2D >> 2] = $$c;
 $60 = HEAP8[$12 >> 0] | 0;
 $61 = $60 & 255;
 $62 = $61 | 64;
 $63 = $62 & 255;
 HEAP8[$12 >> 0] = $63;
 $64 = $L + 8 | 0;
 $65 = HEAP32[$64 >> 2] | 0;
 $66 = $65 + -8 | 0;
 HEAP32[$1 >> 2] = $66;
 _luaD_throw($L, 1);
}

function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $14 = 0, $20 = 0, $23 = 0, $24 = 0, $26 = 0, $33 = 0, $44 = 0, $6 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, label = 0;
 L1 : do if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
  if ((HEAP32[$info + 4 >> 2] | 0) == ($current_ptr | 0)) {
   $6 = $info + 28 | 0;
   if ((HEAP32[$6 >> 2] | 0) != 1) HEAP32[$6 >> 2] = $path_below;
  }
 } else {
  if (($this | 0) != (HEAP32[$info >> 2] | 0)) {
   $44 = HEAP32[$this + 8 >> 2] | 0;
   FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$44 >> 2] | 0) + 24 >> 2] & 3]($44, $info, $current_ptr, $path_below, $use_strcmp);
   break;
  }
  if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
   $14 = $info + 20 | 0;
   if ((HEAP32[$14 >> 2] | 0) != ($current_ptr | 0)) {
    HEAP32[$info + 32 >> 2] = $path_below;
    $20 = $info + 44 | 0;
    if ((HEAP32[$20 >> 2] | 0) == 4) break;
    $23 = $info + 52 | 0;
    HEAP8[$23 >> 0] = 0;
    $24 = $info + 53 | 0;
    HEAP8[$24 >> 0] = 0;
    $26 = HEAP32[$this + 8 >> 2] | 0;
    FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$26 >> 2] | 0) + 20 >> 2] & 3]($26, $info, $current_ptr, $current_ptr, 1, $use_strcmp);
    if (!(HEAP8[$24 >> 0] | 0)) {
     $is_dst_type_derived_from_static_type$0$off01 = 0;
     label = 13;
    } else if (!(HEAP8[$23 >> 0] | 0)) {
     $is_dst_type_derived_from_static_type$0$off01 = 1;
     label = 13;
    }
    do if ((label | 0) == 13) {
     HEAP32[$14 >> 2] = $current_ptr;
     $33 = $info + 40 | 0;
     HEAP32[$33 >> 2] = (HEAP32[$33 >> 2] | 0) + 1;
     if ((HEAP32[$info + 36 >> 2] | 0) == 1) if ((HEAP32[$info + 24 >> 2] | 0) == 2) {
      HEAP8[$info + 54 >> 0] = 1;
      if ($is_dst_type_derived_from_static_type$0$off01) break;
     } else label = 16; else label = 16;
     if ((label | 0) == 16) if ($is_dst_type_derived_from_static_type$0$off01) break;
     HEAP32[$20 >> 2] = 4;
     break L1;
    } while (0);
    HEAP32[$20 >> 2] = 3;
    break;
   }
  }
  if (($path_below | 0) == 1) HEAP32[$info + 32 >> 2] = 1;
 } while (0);
 return;
}

function __ZN12b2MouseJointC2EPK15b2MouseJointDef($this, $def) {
 $this = $this | 0;
 $def = $def | 0;
 var $12 = 0, $13 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $24 = 0, $25 = 0.0, $30 = 0, $32 = 0, $35 = 0, $36 = 0, $41 = 0, $44 = 0.0, $48 = 0.0, $50 = 0.0, $53 = 0.0, $59 = 0.0, $60 = 0.0, $61 = 0;
 __ZN7b2JointC2EPK10b2JointDef($this, $def);
 HEAP32[$this >> 2] = 84696;
 $2 = $def + 20 | 0;
 if (((HEAPF32[tempDoublePtr >> 2] = +HEAPF32[$2 >> 2], HEAP32[tempDoublePtr >> 2] | 0) & 2139095040 | 0) == 2139095040) ___assert_fail(84744, 84768, 34, 84832);
 if (((HEAPF32[tempDoublePtr >> 2] = +HEAPF32[$def + 24 >> 2], HEAP32[tempDoublePtr >> 2] | 0) & 2139095040 | 0) == 2139095040) ___assert_fail(84744, 84768, 34, 84832);
 $12 = $def + 28 | 0;
 $13 = +HEAPF32[$12 >> 2];
 if (((HEAPF32[tempDoublePtr >> 2] = $13, HEAP32[tempDoublePtr >> 2] | 0) & 2139095040 | 0) == 2139095040 | !($13 >= 0.0)) ___assert_fail(84848, 84768, 35, 84832);
 $18 = $def + 32 | 0;
 $19 = +HEAPF32[$18 >> 2];
 if (((HEAPF32[tempDoublePtr >> 2] = $19, HEAP32[tempDoublePtr >> 2] | 0) & 2139095040 | 0) == 2139095040 | !($19 >= 0.0)) ___assert_fail(84904, 84768, 36, 84832);
 $24 = $def + 36 | 0;
 $25 = +HEAPF32[$24 >> 2];
 if (((HEAPF32[tempDoublePtr >> 2] = $25, HEAP32[tempDoublePtr >> 2] | 0) & 2139095040 | 0) == 2139095040 | !($25 >= 0.0)) ___assert_fail(84960, 84768, 37, 84832); else {
  $30 = $2;
  $32 = HEAP32[$30 >> 2] | 0;
  $35 = HEAP32[$30 + 4 >> 2] | 0;
  $36 = $this + 76 | 0;
  HEAP32[$36 >> 2] = $32;
  HEAP32[$36 + 4 >> 2] = $35;
  $41 = HEAP32[$this + 52 >> 2] | 0;
  $44 = (HEAP32[tempDoublePtr >> 2] = $32, +HEAPF32[tempDoublePtr >> 2]) - +HEAPF32[$41 + 12 >> 2];
  $48 = (HEAP32[tempDoublePtr >> 2] = $35, +HEAPF32[tempDoublePtr >> 2]) - +HEAPF32[$41 + 16 >> 2];
  $50 = +HEAPF32[$41 + 24 >> 2];
  $53 = +HEAPF32[$41 + 20 >> 2];
  $59 = +($44 * $50 + $48 * $53);
  $60 = +($50 * $48 - $44 * $53);
  $61 = $this + 68 | 0;
  HEAPF32[$61 >> 2] = $59;
  HEAPF32[$61 + 4 >> 2] = $60;
  HEAPF32[$this + 104 >> 2] = +HEAPF32[$12 >> 2];
  HEAPF32[$this + 96 >> 2] = 0.0;
  HEAPF32[$this + 100 >> 2] = 0.0;
  HEAPF32[$this + 84 >> 2] = +HEAPF32[$18 >> 2];
  HEAPF32[$this + 88 >> 2] = +HEAPF32[$24 >> 2];
  HEAPF32[$this + 92 >> 2] = 0.0;
  HEAPF32[$this + 108 >> 2] = 0.0;
  return;
 }
}

function _iter_aux($L) {
 $L = $L | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $19 = 0, $22 = 0, $27 = 0, $28 = 0, $34 = 0, $4 = 0, $c$0$lcssa$i = 0, $c$04$i = 0, $count$0$lcssa$i = 0, $count$06$i = 0, $len = 0, $n$0 = 0, $n$1 = 0, $res$0$lcssa$i = 0, $res$05$i = 0, $res$1$i = 0, $s$0$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $len = sp + 4 | 0;
 $0 = _luaL_checklstring($L, 1, $len) | 0;
 $1 = _lua_tointegerx($L, 2, 0) | 0;
 if (($1 | 0) < 1) {
  $12 = HEAP32[$len >> 2] | 0;
  $n$1 = 0;
 } else {
  $4 = HEAP32[$len >> 2] | 0;
  if (($1 | 0) > ($4 | 0)) {
   $12 = $4;
   $n$1 = $1 + -1 | 0;
  } else {
   $n$0 = $1;
   while (1) if ((HEAP8[$0 + $n$0 >> 0] & -64) << 24 >> 24 == -128) $n$0 = $n$0 + 1 | 0; else {
    $12 = $4;
    $n$1 = $n$0;
    break;
   }
  }
 }
 if (($n$1 | 0) >= ($12 | 0)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $13 = $0 + $n$1 | 0;
 $14 = HEAP8[$13 >> 0] | 0;
 $15 = $14 & 255;
 L10 : do if ($14 << 24 >> 24 > -1) {
  $res$1$i = $15;
  $s$0$i = $13;
  label = 13;
 } else {
  if (!($15 & 64)) {
   $c$0$lcssa$i = $15;
   $count$0$lcssa$i = 0;
   $res$0$lcssa$i = 0;
  } else {
   $c$04$i = $15;
   $count$06$i = 0;
   $res$05$i = 0;
   while (1) {
    $19 = $count$06$i + 1 | 0;
    $22 = HEAPU8[$0 + ($19 + $n$1) >> 0] | 0;
    if (($22 & 192 | 0) != 128) break L10;
    $27 = $22 & 63 | $res$05$i << 6;
    $28 = $c$04$i << 1;
    if (!($28 & 64)) {
     $c$0$lcssa$i = $28;
     $count$0$lcssa$i = $19;
     $res$0$lcssa$i = $27;
     break;
    } else {
     $c$04$i = $28;
     $count$06$i = $19;
     $res$05$i = $27;
    }
   }
  }
  $34 = ($c$0$lcssa$i & 127) << $count$0$lcssa$i * 5 | $res$0$lcssa$i;
  if (!(($count$0$lcssa$i | 0) > 3 | $34 >>> 0 > 1114111)) if ($34 >>> 0 > (HEAP32[63736 + ($count$0$lcssa$i << 2) >> 2] | 0) >>> 0) {
   $res$1$i = $34;
   $s$0$i = $0 + ($count$0$lcssa$i + $n$1) | 0;
   label = 13;
  }
 } while (0);
 if ((label | 0) == 13) if ((HEAP8[$s$0$i + 1 >> 0] & -64) << 24 >> 24 != -128) {
  _lua_pushinteger($L, $n$1 + 1 | 0);
  _lua_pushinteger($L, $res$1$i);
  $$0 = 2;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $$0 = _luaL_error($L, 63712, $vararg_buffer) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _test_then_block($ls, $escapelist) {
 $ls = $ls | 0;
 $escapelist = $escapelist | 0;
 var $0 = 0, $1 = 0, $14 = 0, $2 = 0, $22 = 0, $36 = 0, $44 = 0, $5 = 0, $bl = 0, $jf$0 = 0, $ls$idx$val$i = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $bl = sp + 16 | 0;
 $v = sp;
 $0 = $ls + 28 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 _luaX_next($ls);
 _subexpr($ls, $v, 0) | 0;
 $2 = $ls + 12 | 0;
 if ((HEAP32[$2 >> 2] | 0) != 275) _error_expected($ls, 275);
 _luaX_next($ls);
 $5 = HEAP32[$2 >> 2] | 0;
 do if (($5 | 0) == 258 | ($5 | 0) == 266) {
  _luaK_goiffalse(HEAP32[$0 >> 2] | 0, $v);
  HEAP8[$bl + 14 >> 0] = 0;
  HEAP8[$bl + 12 >> 0] = HEAP8[$1 + 42 >> 0] | 0;
  $14 = HEAP32[(HEAP32[$1 + 8 >> 2] | 0) + 48 >> 2] | 0;
  HEAP32[$bl + 4 >> 2] = HEAP32[$14 + 28 >> 2];
  HEAP32[$bl + 8 >> 2] = HEAP32[$14 + 16 >> 2];
  HEAP8[$bl + 13 >> 0] = 0;
  $22 = $1 + 12 | 0;
  HEAP32[$bl >> 2] = HEAP32[$22 >> 2];
  HEAP32[$22 >> 2] = $bl;
  _gotostat($ls, HEAP32[$v + 8 >> 2] | 0);
  L7 : while (1) {
   switch (HEAP32[$2 >> 2] | 0) {
   case 288:
   case 59:
    break;
   case 289:
   case 262:
   case 261:
   case 260:
    {
     break L7;
     break;
    }
   default:
    {
     label = 8;
     break L7;
    }
   }
   _statement($ls);
  }
  if ((label | 0) == 8) {
   $jf$0 = _luaK_jump($1) | 0;
   break;
  }
  _leaveblock($1);
  STACKTOP = sp;
  return;
 } else {
  _luaK_goiftrue(HEAP32[$0 >> 2] | 0, $v);
  HEAP8[$bl + 14 >> 0] = 0;
  HEAP8[$bl + 12 >> 0] = HEAP8[$1 + 42 >> 0] | 0;
  $36 = HEAP32[(HEAP32[$1 + 8 >> 2] | 0) + 48 >> 2] | 0;
  HEAP32[$bl + 4 >> 2] = HEAP32[$36 + 28 >> 2];
  HEAP32[$bl + 8 >> 2] = HEAP32[$36 + 16 >> 2];
  HEAP8[$bl + 13 >> 0] = 0;
  $44 = $1 + 12 | 0;
  HEAP32[$bl >> 2] = HEAP32[$44 >> 2];
  HEAP32[$44 >> 2] = $bl;
  $jf$0 = HEAP32[$v + 12 >> 2] | 0;
 } while (0);
 L15 : do {
  $ls$idx$val$i = HEAP32[$2 >> 2] | 0;
  switch ($ls$idx$val$i | 0) {
  case 277:
  case 289:
  case 262:
  case 261:
  case 260:
   {
    break L15;
    break;
   }
  default:
   {}
  }
  _statement($ls);
 } while (($ls$idx$val$i | 0) != 274);
 _leaveblock($1);
 if (((HEAP32[$2 >> 2] | 0) + -260 | 0) >>> 0 < 2) _luaK_concat($1, $escapelist, _luaK_jump($1) | 0);
 _luaK_patchtohere($1, $jf$0);
 STACKTOP = sp;
 return;
}

function _unpackint($L, $str, $islittle, $size, $issigned) {
 $L = $L | 0;
 $str = $str | 0;
 $islittle = $islittle | 0;
 $size = $size | 0;
 $issigned = $issigned | 0;
 var $0 = 0, $1 = 0, $10 = 0, $16 = 0, $22 = 0, $29 = 0, $35 = 0, $4 = 0, $i$02 = 0, $i$04 = 0, $i$04$us = 0, $i$11 = 0, $i$11$us = 0, $res$0$lcssa = 0, $res$03 = 0, $res$03$us = 0, $res$1 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $0 = ($size | 0) > 4;
 $1 = $0 ? 4 : $size;
 $i$02 = $1 + -1 | 0;
 if (($1 | 0) > 0) {
  $4 = $size + -1 | 0;
  if (!$islittle) {
   $i$04$us = $i$02;
   $res$03$us = 0;
   while (1) {
    $10 = HEAPU8[$str + ($4 - $i$04$us) >> 0] | 0 | $res$03$us << 8;
    if (($i$04$us | 0) > 0) {
     $i$04$us = $i$04$us + -1 | 0;
     $res$03$us = $10;
    } else {
     $res$0$lcssa = $10;
     break;
    }
   }
  } else {
   $i$04 = $i$02;
   $res$03 = 0;
   while (1) {
    $16 = HEAPU8[$str + $i$04 >> 0] | 0 | $res$03 << 8;
    if (($i$04 | 0) > 0) {
     $i$04 = $i$04 + -1 | 0;
     $res$03 = $16;
    } else {
     $res$0$lcssa = $16;
     break;
    }
   }
  }
 } else $res$0$lcssa = 0;
 if (($size | 0) < 4) {
  if (!$issigned) {
   $res$1 = $res$0$lcssa;
   STACKTOP = sp;
   return $res$1 | 0;
  }
  $22 = 1 << ($size << 3) + -1;
  $res$1 = ($res$0$lcssa ^ $22) - $22 | 0;
  STACKTOP = sp;
  return $res$1 | 0;
 }
 if (!$0) {
  $res$1 = $res$0$lcssa;
  STACKTOP = sp;
  return $res$1 | 0;
 }
 if (!$issigned) $35 = 0; else $35 = $res$0$lcssa >> 31 & 255;
 $29 = $size + -1 | 0;
 if (!$islittle) {
  $i$11$us = $1;
  do {
   if ((HEAPU8[$str + ($29 - $i$11$us) >> 0] | 0 | 0) != ($35 | 0)) {
    HEAP32[$vararg_buffer >> 2] = $size;
    _luaL_error($L, 61272, $vararg_buffer) | 0;
   }
   $i$11$us = $i$11$us + 1 | 0;
  } while (($i$11$us | 0) < ($size | 0));
  $res$1 = $res$0$lcssa;
  STACKTOP = sp;
  return $res$1 | 0;
 } else {
  $i$11 = $1;
  do {
   if ((HEAPU8[$str + $i$11 >> 0] | 0 | 0) != ($35 | 0)) {
    HEAP32[$vararg_buffer1 >> 2] = $size;
    _luaL_error($L, 61272, $vararg_buffer1) | 0;
   }
   $i$11 = $i$11 + 1 | 0;
  } while (($i$11 | 0) < ($size | 0));
  $res$1 = $res$0$lcssa;
  STACKTOP = sp;
  return $res$1 | 0;
 }
 return 0;
}

function __ZN6b2Body11SetMassDataEPK10b2MassData($this, $massData) {
 $this = $this | 0;
 $massData = $massData | 0;
 var $10 = 0, $11 = 0.0, $16 = 0.0, $23 = 0.0, $26 = 0.0, $30 = 0.0, $34 = 0, $35 = 0, $41 = 0.0, $42 = 0.0, $44 = 0, $46 = 0, $49 = 0, $50 = 0, $56 = 0.0, $59 = 0.0, $60 = 0.0, $65 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $78 = 0, $8 = 0, $83 = 0.0, $88 = 0, $9 = 0, $91 = 0, $bitcast = 0.0, $storemerge = 0.0;
 if (HEAP32[(HEAP32[$this + 88 >> 2] | 0) + 102868 >> 2] & 2) ___assert_fail(87280, 87e3, 355, 87392);
 if ((HEAP32[$this >> 2] | 0) != 2) return;
 $8 = $this + 120 | 0;
 HEAPF32[$8 >> 2] = 0.0;
 $9 = $this + 124 | 0;
 HEAPF32[$9 >> 2] = 0.0;
 $10 = $this + 128 | 0;
 HEAPF32[$10 >> 2] = 0.0;
 $11 = +HEAPF32[$massData >> 2];
 $storemerge = !($11 <= 0.0) ? $11 : 1.0;
 HEAPF32[$this + 116 >> 2] = $storemerge;
 HEAPF32[$8 >> 2] = 1.0 / $storemerge;
 $16 = +HEAPF32[$massData + 12 >> 2];
 do if ($16 > 0.0) if (!(HEAP16[$this + 4 >> 1] & 16)) {
  $23 = +HEAPF32[$massData + 4 >> 2];
  $26 = +HEAPF32[$massData + 8 >> 2];
  $30 = $16 - $storemerge * ($23 * $23 + $26 * $26);
  HEAPF32[$9 >> 2] = $30;
  if ($30 > 0.0) {
   HEAPF32[$10 >> 2] = 1.0 / $30;
   break;
  } else ___assert_fail(87376, 87e3, 381, 87392);
 } while (0);
 $34 = $this + 44 | 0;
 $35 = $34;
 $41 = +HEAPF32[$35 >> 2];
 $42 = +HEAPF32[$35 + 4 >> 2];
 $44 = $massData + 4 | 0;
 $46 = HEAP32[$44 >> 2] | 0;
 $49 = HEAP32[$44 + 4 >> 2] | 0;
 $50 = $this + 28 | 0;
 HEAP32[$50 >> 2] = $46;
 HEAP32[$50 + 4 >> 2] = $49;
 $56 = +HEAPF32[$this + 24 >> 2];
 $bitcast = (HEAP32[tempDoublePtr >> 2] = $46, +HEAPF32[tempDoublePtr >> 2]);
 $59 = +HEAPF32[$this + 20 >> 2];
 $60 = (HEAP32[tempDoublePtr >> 2] = $49, +HEAPF32[tempDoublePtr >> 2]);
 $65 = +HEAPF32[$this + 12 >> 2] + ($56 * $bitcast - $59 * $60);
 $71 = $bitcast * $59 + $56 * $60 + +HEAPF32[$this + 16 >> 2];
 $72 = +$65;
 $73 = +$71;
 $74 = $34;
 HEAPF32[$74 >> 2] = $72;
 HEAPF32[$74 + 4 >> 2] = $73;
 $78 = $this + 36 | 0;
 HEAPF32[$78 >> 2] = $72;
 HEAPF32[$78 + 4 >> 2] = $73;
 $83 = +HEAPF32[$this + 72 >> 2];
 $88 = $this + 64 | 0;
 HEAPF32[$88 >> 2] = +HEAPF32[$88 >> 2] - $83 * ($71 - $42);
 $91 = $this + 68 | 0;
 HEAPF32[$91 >> 2] = $83 * ($65 - $41) + +HEAPF32[$91 >> 2];
 return;
}

function __ZN12b2ChainShape10CreateLoopEPK6b2Vec2i($this, $vertices, $count) {
 $this = $this | 0;
 $vertices = $vertices | 0;
 $count = $count | 0;
 var $$off0 = 0, $$off32 = 0, $0 = 0, $15 = 0.0, $16 = 0.0, $18 = 0, $24 = 0.0, $26 = 0.0, $27 = 0.0, $3 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $43 = 0, $44 = 0, $51 = 0, $53 = 0, $58 = 0, $59 = 0, $65 = 0, $7 = 0, $70 = 0, $71 = 0, $i$02 = 0, label = 0;
 $0 = $this + 12 | 0;
 if (HEAP32[$0 >> 2] | 0) ___assert_fail(81336, 81376, 33, 81440);
 $3 = $this + 16 | 0;
 if (HEAP32[$3 >> 2] | 0) ___assert_fail(81336, 81376, 33, 81440);
 if (($count | 0) <= 2) ___assert_fail(81456, 81376, 34, 81440);
 $7 = $vertices;
 $$off0 = HEAP32[$7 >> 2] | 0;
 $$off32 = HEAP32[$7 + 4 >> 2] | 0;
 $i$02 = 1;
 while (1) {
  $15 = (HEAP32[tempDoublePtr >> 2] = $$off0, +HEAPF32[tempDoublePtr >> 2]);
  $16 = (HEAP32[tempDoublePtr >> 2] = $$off32, +HEAPF32[tempDoublePtr >> 2]);
  $18 = $vertices + ($i$02 << 3) | 0;
  $$off0 = HEAP32[$18 >> 2] | 0;
  $$off32 = HEAP32[$18 + 4 >> 2] | 0;
  $24 = (HEAP32[tempDoublePtr >> 2] = $$off0, +HEAPF32[tempDoublePtr >> 2]);
  $26 = $15 - $24;
  $27 = $16 - (HEAP32[tempDoublePtr >> 2] = $$off32, +HEAPF32[tempDoublePtr >> 2]);
  $i$02 = $i$02 + 1 | 0;
  if (!($26 * $26 + $27 * $27 > 2.499999936844688e-05)) {
   label = 9;
   break;
  }
  if (($i$02 | 0) >= ($count | 0)) {
   label = 10;
   break;
  }
 }
 if ((label | 0) == 9) ___assert_fail(81472, 81376, 40, 81440); else if ((label | 0) == 10) {
  $32 = $count + 1 | 0;
  HEAP32[$3 >> 2] = $32;
  $34 = __Z7b2Alloci($32 << 3) | 0;
  HEAP32[$0 >> 2] = $34;
  _memcpy($34 | 0, $vertices | 0, $count << 3 | 0) | 0;
  $36 = HEAP32[$0 >> 2] | 0;
  $38 = $36;
  $43 = HEAP32[$38 + 4 >> 2] | 0;
  $44 = $36 + ($count << 3) | 0;
  HEAP32[$44 >> 2] = HEAP32[$38 >> 2];
  HEAP32[$44 + 4 >> 2] = $43;
  $51 = HEAP32[$0 >> 2] | 0;
  $53 = $51 + ((HEAP32[$3 >> 2] | 0) + -2 << 3) | 0;
  $58 = HEAP32[$53 + 4 >> 2] | 0;
  $59 = $this + 20 | 0;
  HEAP32[$59 >> 2] = HEAP32[$53 >> 2];
  HEAP32[$59 + 4 >> 2] = $58;
  $65 = $51 + 8 | 0;
  $70 = HEAP32[$65 + 4 >> 2] | 0;
  $71 = $this + 28 | 0;
  HEAP32[$71 >> 2] = HEAP32[$65 >> 2];
  HEAP32[$71 + 4 >> 2] = $70;
  HEAP8[$this + 36 >> 0] = 1;
  HEAP8[$this + 37 >> 0] = 1;
  return;
 }
}

function __ZN11b2RopeJoint4DumpEv($this) {
 $this = $this | 0;
 var $16 = 0.0, $22 = 0.0, $3 = 0, $7 = 0, $vararg_buffer1 = 0, $vararg_buffer13 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $vararg_buffer20 = sp + 72 | 0;
 $vararg_buffer17 = sp + 64 | 0;
 $vararg_buffer13 = sp + 48 | 0;
 $vararg_buffer9 = sp + 32 | 0;
 $vararg_buffer6 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $3 = HEAP32[(HEAP32[$this + 48 >> 2] | 0) + 8 >> 2] | 0;
 $7 = HEAP32[(HEAP32[$this + 52 >> 2] | 0) + 8 >> 2] | 0;
 __Z5b2LogPKcz(86184, sp);
 HEAP32[$vararg_buffer1 >> 2] = $3;
 __Z5b2LogPKcz(86496, $vararg_buffer1);
 HEAP32[$vararg_buffer3 >> 2] = $7;
 __Z5b2LogPKcz(86528, $vararg_buffer3);
 HEAP32[$vararg_buffer6 >> 2] = HEAPU8[$this + 61 >> 0];
 __Z5b2LogPKcz(86560, $vararg_buffer6);
 $16 = +HEAPF32[$this + 72 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 68 >> 2];
 HEAP32[$vararg_buffer9 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer9 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr12 = $vararg_buffer9 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $16;
 HEAP32[$vararg_ptr12 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr12 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(86600, $vararg_buffer9);
 $22 = +HEAPF32[$this + 80 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 76 >> 2];
 HEAP32[$vararg_buffer13 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer13 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr16 = $vararg_buffer13 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $22;
 HEAP32[$vararg_ptr16 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr16 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(86648, $vararg_buffer13);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 84 >> 2];
 HEAP32[$vararg_buffer17 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer17 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(86208, $vararg_buffer17);
 HEAP32[$vararg_buffer20 >> 2] = HEAP32[$this + 56 >> 2];
 __Z5b2LogPKcz(86896, $vararg_buffer20);
 STACKTOP = sp;
 return;
}

function __ZNK14b2PolygonShape11ComputeMassEP10b2MassDataf($this, $massData, $density) {
 $this = $this | 0;
 $massData = $massData | 0;
 $density = +$density;
 var $$pn$in = 0, $$sink$in = 0, $1 = 0, $10 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $21 = 0.0, $24 = 0.0, $26 = 0, $29 = 0.0, $30 = 0.0, $33 = 0.0, $34 = 0.0, $36 = 0.0, $42 = 0.0, $44 = 0.0, $59 = 0.0, $6 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $I$07 = 0.0, $area$08 = 0.0, $i$015 = 0, $i1$06 = 0;
 $1 = HEAP32[$this + 148 >> 2] | 0;
 if (($1 | 0) > 2) {
  $10 = 0.0;
  $6 = 0.0;
  $i$015 = 0;
 } else ___assert_fail(81968, 81848, 376, 81984);
 do {
  $6 = $6 + +HEAPF32[$this + ($i$015 << 3) + 20 >> 2];
  $10 = $10 + +HEAPF32[$this + ($i$015 << 3) + 24 >> 2];
  $i$015 = $i$015 + 1 | 0;
 } while (($i$015 | 0) < ($1 | 0));
 $14 = 1.0 / +($1 | 0);
 $15 = $6 * $14;
 $16 = $10 * $14;
 $17 = $this + 20 | 0;
 $18 = $this + 24 | 0;
 $42 = 0.0;
 $44 = 0.0;
 $I$07 = 0.0;
 $area$08 = 0.0;
 $i1$06 = 0;
 do {
  $21 = +HEAPF32[$this + ($i1$06 << 3) + 20 >> 2] - $15;
  $24 = +HEAPF32[$this + ($i1$06 << 3) + 24 >> 2] - $16;
  $i1$06 = $i1$06 + 1 | 0;
  $26 = ($i1$06 | 0) < ($1 | 0);
  if ($26) {
   $$pn$in = $this + ($i1$06 << 3) + 20 | 0;
   $$sink$in = $this + ($i1$06 << 3) + 24 | 0;
  } else {
   $$pn$in = $17;
   $$sink$in = $18;
  }
  $29 = +HEAPF32[$$pn$in >> 2] - $15;
  $30 = +HEAPF32[$$sink$in >> 2] - $16;
  $33 = $21 * $30 - $24 * $29;
  $34 = $33 * .5;
  $area$08 = $area$08 + $34;
  $36 = $34 * .3333333432674408;
  $42 = $42 + ($21 + $29) * $36;
  $44 = $44 + ($24 + $30) * $36;
  $I$07 = $I$07 + $33 * .0833333358168602 * ($29 * $29 + ($21 * $21 + $21 * $29) + ($30 * $30 + ($24 * $24 + $24 * $30)));
 } while ($26);
 $59 = $area$08 * $density;
 HEAPF32[$massData >> 2] = $59;
 if ($area$08 > 1.1920928955078125e-07) {
  $61 = 1.0 / $area$08;
  $62 = $42 * $61;
  $63 = $44 * $61;
  $65 = $15 + $62;
  $66 = $16 + $63;
  $67 = +$65;
  $68 = +$66;
  $69 = $massData + 4 | 0;
  HEAPF32[$69 >> 2] = $67;
  HEAPF32[$69 + 4 >> 2] = $68;
  HEAPF32[$massData + 12 >> 2] = $I$07 * $density + $59 * ($65 * $65 + $66 * $66 - ($62 * $62 + $63 * $63));
  return;
 } else ___assert_fail(82e3, 81848, 422, 81984);
}

function _lua_copy($L, $fromidx, $toidx) {
 $L = $L | 0;
 $fromidx = $fromidx | 0;
 $toidx = $toidx | 0;
 var $$0$i = 0, $$0$i2 = 0, $$0$i2$ph = 0, $0 = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $31 = 0, $4 = 0, $43 = 0, $44 = 0, $48 = 0, $56 = 0, $61 = 0, $62 = 0, $66 = 0, $71 = 0, $72 = 0, $83 = 0, $88 = 0;
 $0 = $L + 16 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 do if (($fromidx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($fromidx << 3) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 59168;
 } else {
  if (($fromidx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($fromidx << 3) | 0;
   break;
  }
  if (($fromidx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $16 = -1001e3 - $fromidx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 4 >> 2] | 0) == 22) $$0$i = 59168; else {
   $21 = HEAP32[$17 >> 2] | 0;
   if (($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0)) $$0$i = 59168; else $$0$i = $21 + 16 + ($16 + -1 << 3) | 0;
  }
 } while (0);
 do if (($toidx | 0) > 0) {
  $31 = (HEAP32[$1 >> 2] | 0) + ($toidx << 3) | 0;
  $$0$i2$ph = $31 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $31 : 59168;
 } else {
  if (($toidx | 0) >= -1000999) {
   $$0$i2$ph = (HEAP32[$L + 8 >> 2] | 0) + ($toidx << 3) | 0;
   break;
  }
  if (($toidx | 0) == -1001e3) {
   $$0$i2$ph = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $43 = -1001e3 - $toidx | 0;
  $44 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$44 + 4 >> 2] | 0) == 22) $$0$i2 = 59168; else {
   $48 = HEAP32[$44 >> 2] | 0;
   if (($43 | 0) > (HEAPU8[$48 + 6 >> 0] | 0 | 0)) $$0$i2 = 59168; else $$0$i2 = $48 + 16 + ($43 + -1 << 3) | 0;
  }
  $66 = $$0$i;
  $71 = HEAP32[$66 + 4 >> 2] | 0;
  $72 = $$0$i2;
  HEAP32[$72 >> 2] = HEAP32[$66 >> 2];
  HEAP32[$72 + 4 >> 2] = $71;
  if (($toidx | 0) >= -1001e3) return;
  if (!(HEAP32[$$0$i + 4 >> 2] & 64)) return;
  $83 = HEAP32[HEAP32[HEAP32[$0 >> 2] >> 2] >> 2] | 0;
  if (!(HEAP8[$83 + 5 >> 0] & 4)) return;
  $88 = HEAP32[$$0$i >> 2] | 0;
  if (!(HEAP8[$88 + 5 >> 0] & 3)) return;
  _luaC_barrier_($L, $83, $88);
  return;
 } while (0);
 $56 = $$0$i;
 $61 = HEAP32[$56 + 4 >> 2] | 0;
 $62 = $$0$i2$ph;
 HEAP32[$62 >> 2] = HEAP32[$56 >> 2];
 HEAP32[$62 + 4 >> 2] = $61;
 return;
}

function _lua_newstate($f, $ud) {
 $f = $f | 0;
 $ud = $ud | 0;
 var $$0 = 0, $0 = 0, $2 = 0, $25 = 0, $3 = 0, $34 = 0, $43 = 0, $buff$i = 0, $h$i = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $buff$i = sp + 8 | 0;
 $h$i = sp;
 $0 = FUNCTION_TABLE_iiiii[$f & 7]($ud, 0, 8, 384) | 0;
 if (!$0) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $2 = $0 + 4 | 0;
 $3 = $0 + 116 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP8[$0 + 8 >> 0] = 8;
 HEAP8[$0 + 164 >> 0] = 1;
 HEAP8[$0 + 9 >> 0] = 1;
 HEAP32[$0 + 16 >> 2] = $3;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 96 >> 2] = 0;
 HEAP32[$0 + 44 >> 2] = $2;
 HEAP32[$0 + 48 >> 2] = 0;
 HEAP16[$0 + 110 >> 1] = 0;
 HEAP32[$0 + 88 >> 2] = 0;
 HEAP8[$0 + 112 >> 0] = 0;
 HEAP32[$0 + 100 >> 2] = 0;
 HEAP8[$0 + 113 >> 0] = 1;
 HEAP32[$0 + 104 >> 2] = 0;
 HEAP32[$0 + 36 >> 2] = 0;
 HEAP16[$0 + 108 >> 1] = 1;
 HEAP8[$0 + 10 >> 0] = 0;
 HEAP32[$0 + 92 >> 2] = 0;
 HEAP32[$3 >> 2] = $f;
 HEAP32[$0 + 120 >> 2] = $ud;
 HEAP32[$0 + 240 >> 2] = $2;
 $25 = _time(0) | 0;
 HEAP32[$h$i >> 2] = $25;
 HEAP32[$buff$i >> 2] = $2;
 HEAP32[$buff$i + 4 >> 2] = $h$i;
 HEAP32[$buff$i + 8 >> 2] = 59168;
 HEAP32[$buff$i + 12 >> 2] = 20;
 HEAP32[$0 + 160 >> 2] = _luaS_hash($buff$i, 16, $25) | 0;
 HEAP8[$0 + 167 >> 0] = 0;
 $34 = $0 + 136 | 0;
 HEAP32[$0 + 156 >> 2] = 0;
 HEAP32[$0 + 212 >> 2] = 0;
 HEAP32[$0 + 220 >> 2] = 0;
 HEAP32[$0 + 236 >> 2] = 0;
 HEAP32[$0 + 244 >> 2] = 0;
 HEAP32[$34 + 0 >> 2] = 0;
 HEAP32[$34 + 4 >> 2] = 0;
 HEAP32[$34 + 8 >> 2] = 0;
 HEAP32[$34 + 12 >> 2] = 0;
 HEAP8[$0 + 165 >> 0] = 7;
 HEAP8[$0 + 166 >> 0] = 0;
 $43 = $0 + 124 | 0;
 dest = $0 + 168 | 0;
 stop = dest + 44 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$43 >> 2] = 384;
 HEAP32[$0 + 128 >> 2] = 0;
 HEAP32[$0 + 224 >> 2] = 0;
 HEAP32[$0 + 228 >> 2] = 200;
 HEAP32[$0 + 232 >> 2] = 200;
 dest = $0 + 348 | 0;
 stop = dest + 36 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 if (!(_luaD_rawrunprotected($2, 84, 0) | 0)) {
  $$0 = $2;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _close_state($2);
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _lua_newthread($L) {
 $L = $L | 0;
 var $1 = 0, $14 = 0, $16 = 0, $17 = 0, $22 = 0, $23 = 0, $24 = 0, $28 = 0, $29 = 0, $30 = 0, $32 = 0, $40 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $54 = 0, $6 = 0, $i$01$i = 0;
 $1 = HEAP32[$L + 12 >> 2] | 0;
 if ((HEAP32[$1 + 12 >> 2] | 0) > 0) _luaC_step($L);
 $5 = _luaM_realloc_($L, 0, 8, 116) | 0;
 $6 = $5 + 4 | 0;
 HEAP8[$5 + 9 >> 0] = (HEAPU8[$1 + 48 >> 0] | 0) & 3;
 HEAP8[$5 + 8 >> 0] = 8;
 $14 = $1 + 52 | 0;
 HEAP32[$6 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$14 >> 2] = $6;
 $16 = $L + 8 | 0;
 $17 = HEAP32[$16 >> 2] | 0;
 HEAP32[$17 >> 2] = $6;
 HEAP32[$17 + 4 >> 2] = 72;
 HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) + 8;
 HEAP32[$5 + 16 >> 2] = $1;
 $22 = $5 + 32 | 0;
 HEAP32[$22 >> 2] = 0;
 $23 = $5 + 20 | 0;
 HEAP32[$23 >> 2] = 0;
 $24 = $5 + 96 | 0;
 HEAP32[$24 >> 2] = 0;
 HEAP32[$5 + 44 >> 2] = $6;
 HEAP32[$5 + 48 >> 2] = 0;
 HEAP16[$5 + 110 >> 1] = 0;
 $28 = $5 + 88 | 0;
 HEAP32[$28 >> 2] = 0;
 $29 = $5 + 112 | 0;
 HEAP8[$29 >> 0] = 0;
 $30 = $5 + 100 | 0;
 HEAP32[$30 >> 2] = 0;
 HEAP8[$5 + 113 >> 0] = 1;
 $32 = $5 + 104 | 0;
 HEAP32[$32 >> 2] = 0;
 HEAP32[$5 + 36 >> 2] = 0;
 HEAP16[$5 + 108 >> 1] = 1;
 HEAP8[$5 + 10 >> 0] = 0;
 HEAP32[$5 + 92 >> 2] = 0;
 HEAP8[$29 >> 0] = HEAP8[$L + 108 >> 0] | 0;
 $40 = HEAP32[$L + 96 >> 2] | 0;
 HEAP32[$30 >> 2] = $40;
 HEAP32[$28 >> 2] = HEAP32[$L + 84 >> 2];
 HEAP32[$32 >> 2] = $40;
 $45 = (HEAP32[$1 + 124 >> 2] | 0) + -4 | 0;
 $46 = HEAPU8[$45 >> 0] | HEAPU8[$45 + 1 >> 0] << 8 | HEAPU8[$45 + 2 >> 0] << 16 | HEAPU8[$45 + 3 >> 0] << 24;
 HEAP8[$5 >> 0] = $46;
 HEAP8[$5 + 1 >> 0] = $46 >> 8;
 HEAP8[$5 + 2 >> 0] = $46 >> 16;
 HEAP8[$5 + 3 >> 0] = $46 >> 24;
 $47 = _luaM_realloc_($L, 0, 0, 320) | 0;
 HEAP32[$22 >> 2] = $47;
 HEAP32[$24 >> 2] = 40;
 $i$01$i = 0;
 do {
  HEAP32[$47 + ($i$01$i << 3) + 4 >> 2] = 0;
  $i$01$i = $i$01$i + 1 | 0;
 } while (($i$01$i | 0) != 40);
 HEAP32[$5 + 28 >> 2] = $47 + ((HEAP32[$24 >> 2] | 0) + -5 << 3);
 $54 = $5 + 52 | 0;
 HEAP32[$5 + 60 >> 2] = 0;
 HEAP32[$5 + 64 >> 2] = 0;
 HEAP8[$5 + 86 >> 0] = 0;
 HEAP32[$54 >> 2] = $47;
 HEAP32[$5 + 12 >> 2] = $47 + 8;
 HEAP32[$47 + 4 >> 2] = 0;
 HEAP32[$5 + 56 >> 2] = $47 + 168;
 HEAP32[$23 >> 2] = $54;
 return $6 | 0;
}

function _png_colorspace_set_rgb_coefficients($png_ptr) {
 $png_ptr = $png_ptr | 0;
 var $10 = 0, $12 = 0, $14 = 0, $22 = 0.0, $26 = 0, $33 = 0.0, $37 = 0, $44 = 0.0, $47 = 0, $50 = 0, $51 = 0, $63 = 0, $64 = 0, $66 = 0, $8 = 0, $add$025 = 0, label = 0;
 if (HEAP8[$png_ptr + 701 >> 0] | 0) return;
 if (!(HEAP16[$png_ptr + 898 >> 1] & 2)) return;
 $8 = HEAP32[$png_ptr + 864 >> 2] | 0;
 $10 = HEAP32[$png_ptr + 876 >> 2] | 0;
 $12 = HEAP32[$png_ptr + 888 >> 2] | 0;
 $14 = $10 + $8 + $12 | 0;
 if (($8 | 0) < 0 | ($14 | 0) < 1 | ($14 | 0) == 0) _png_error($png_ptr, 72992);
 do if (!$8) $26 = 0; else {
  $22 = +Math_floor(+(+($8 | 0) * 32768.0 / +($14 | 0) + .5));
  if ($22 <= 2147483647.0 & $22 >= -2147483648.0) {
   $26 = ~~$22;
   break;
  } else _png_error($png_ptr, 72992);
 } while (0);
 if (($10 | 0) < 0 | $26 >>> 0 > 32768) _png_error($png_ptr, 72992);
 do if (!$10) $37 = 0; else {
  $33 = +Math_floor(+(+($10 | 0) * 32768.0 / +($14 | 0) + .5));
  if ($33 <= 2147483647.0 & $33 >= -2147483648.0) {
   $37 = ~~$33;
   break;
  } else _png_error($png_ptr, 72992);
 } while (0);
 if (($12 | 0) < 0 | $37 >>> 0 > 32768) _png_error($png_ptr, 72992);
 if (!$12) $51 = 0; else {
  $44 = +Math_floor(+(+($12 | 0) * 32768.0 / +($14 | 0) + .5));
  if (!($44 <= 2147483647.0 & $44 >= -2147483648.0)) _png_error($png_ptr, 72992);
  $47 = ~~$44;
  if ($47 >>> 0 < 32769) $51 = $47; else _png_error($png_ptr, 72992);
 }
 $50 = $37 + $26 + $51 | 0;
 if (($50 | 0) >= 32770) _png_error($png_ptr, 72992);
 if (($50 | 0) > 32768) {
  $add$025 = -1;
  label = 18;
 } else if (($50 | 0) < 32768) {
  $add$025 = 1;
  label = 18;
 } else {
  $63 = $26;
  $64 = $37;
  $66 = $51;
 }
 do if ((label | 0) == 18) {
  if (!(($37 | 0) < ($26 | 0) | ($37 | 0) < ($51 | 0))) {
   $63 = $26;
   $64 = $add$025 + $37 | 0;
   $66 = $51;
   break;
  }
  if (($26 | 0) < ($37 | 0) | ($26 | 0) < ($51 | 0)) {
   $63 = $26;
   $64 = $37;
   $66 = $add$025 + $51 | 0;
   break;
  } else {
   $63 = $add$025 + $26 | 0;
   $64 = $37;
   $66 = $51;
   break;
  }
 } while (0);
 if (($64 + $63 + $66 | 0) != 32768) _png_error($png_ptr, 72944);
 HEAP16[$png_ptr + 702 >> 1] = $63;
 HEAP16[$png_ptr + 704 >> 1] = $64;
 return;
}

function _font_get_textsize_plain($font, $text, $w, $h) {
 $font = $font | 0;
 $text = $text | 0;
 $w = $w | 0;
 $h = $h | 0;
 var $$03 = 0, $10 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $29 = 0.0, $30 = 0.0, $33 = 0.0, $34 = 0.0, $4 = 0, $41 = 0.0, $42 = 0.0, $maxx$0$lcssa = 0, $maxx$01 = 0, $maxx$1 = 0, $maxy$0$lcssa = 0, $maxy$02 = 0, $maxy$1 = 0, $q = 0, $x = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $x = sp + 36 | 0;
 $y = sp + 32 | 0;
 $q = sp;
 if (!$font) ___assert_fail(7864, 5736, 249, 5808);
 if (!$text) ___assert_fail(56352, 5736, 250, 5808);
 if (!$w) ___assert_fail(57296, 5736, 251, 5808);
 if (!$h) ___assert_fail(23200, 5736, 252, 5808);
 HEAPF32[$x >> 2] = 0.0;
 $4 = $font + 4 | 0;
 HEAPF32[$y >> 2] = +HEAPF32[$4 >> 2] * 3.0 * .25 + 0.0;
 $10 = HEAP32[$font + 8 >> 2] | 0;
 $13 = (HEAP32[$font + 12 >> 2] | 0) + $10 | 0;
 $14 = HEAP8[$text >> 0] | 0;
 if (!($14 << 24 >> 24)) {
  $maxx$0$lcssa = 0;
  $maxy$0$lcssa = 0;
  $41 = +($maxx$0$lcssa | 0);
  HEAPF32[$w >> 2] = $41;
  $42 = +($maxy$0$lcssa | 0);
  HEAPF32[$h >> 2] = $42;
  STACKTOP = sp;
  return;
 }
 $16 = $font + 20 | 0;
 $17 = $q + 20 | 0;
 $18 = $q + 16 | 0;
 $$03 = $text;
 $20 = $14;
 $maxx$01 = 0;
 $maxy$02 = 0;
 while (1) {
  $19 = $20 << 24 >> 24;
  if ($20 << 24 >> 24 == 10) {
   HEAPF32[$x >> 2] = 0.0;
   HEAPF32[$y >> 2] = +HEAPF32[$4 >> 2] + +HEAPF32[$y >> 2];
   $maxx$1 = $maxx$01;
   $maxy$1 = $maxy$02;
  } else if (($19 | 0) >= ($10 | 0) & ($19 | 0) < ($13 | 0)) {
   _stbtt_GetBakedQuad(HEAP32[$16 >> 2] | 0, $19 - $10 | 0, $x, $y, $q, 1.0);
   $29 = +HEAPF32[$17 >> 2];
   $30 = +($maxy$02 | 0);
   $33 = +HEAPF32[$18 >> 2];
   $34 = +($maxx$01 | 0);
   $maxx$1 = ~~($34 > $33 ? $34 : $33);
   $maxy$1 = ~~($30 > $29 ? $30 : $29);
  } else {
   $maxx$1 = $maxx$01;
   $maxy$1 = $maxy$02;
  }
  $$03 = $$03 + 1 | 0;
  $20 = HEAP8[$$03 >> 0] | 0;
  if (!($20 << 24 >> 24)) {
   $maxx$0$lcssa = $maxx$1;
   $maxy$0$lcssa = $maxy$1;
   break;
  } else {
   $maxx$01 = $maxx$1;
   $maxy$02 = $maxy$1;
  }
 }
 $41 = +($maxx$0$lcssa | 0);
 HEAPF32[$w >> 2] = $41;
 $42 = +($maxy$0$lcssa | 0);
 HEAPF32[$h >> 2] = $42;
 STACKTOP = sp;
 return;
}

function _png_read_finish_row($png_ptr) {
 $png_ptr = $png_ptr | 0;
 var $$pr = 0, $0 = 0, $14 = 0, $16 = 0, $2 = 0, $21 = 0, $22 = 0, $26 = 0, $27 = 0, $29 = 0, $3 = 0, $31 = 0, $37 = 0, $39 = 0, $42 = 0, $49 = 0, $52 = 0, $56 = 0, $61 = 0, $64 = 0, $68 = 0, label = 0;
 $0 = $png_ptr + 372 | 0;
 $2 = (HEAP32[$0 >> 2] | 0) + 1 | 0;
 HEAP32[$0 >> 2] = $2;
 $3 = $png_ptr + 356 | 0;
 if ($2 >>> 0 < (HEAP32[$3 >> 2] | 0) >>> 0) return;
 do if (HEAP8[$png_ptr + 432 >> 0] | 0) {
  HEAP32[$0 >> 2] = 0;
  _memset(HEAP32[$png_ptr + 380 >> 2] | 0, 0, (HEAP32[$png_ptr + 364 >> 2] | 0) + 1 | 0) | 0;
  $14 = $png_ptr + 433 | 0;
  $16 = (HEAP8[$14 >> 0] | 0) + 1 << 24 >> 24;
  HEAP8[$14 >> 0] = $16;
  if (($16 & 255) <= 6) {
   $21 = (HEAP32[$png_ptr + 348 >> 2] | 0) + -1 | 0;
   $22 = $png_ptr + 368 | 0;
   $26 = (HEAP32[$png_ptr + 216 >> 2] & 2 | 0) == 0;
   $27 = $png_ptr + 352 | 0;
   $$pr = $16;
   $29 = $16 & 255;
   while (1) {
    $31 = HEAPU8[77e3 + $29 >> 0] | 0;
    $37 = (($21 + $31 - (HEAPU8[76992 + $29 >> 0] | 0) | 0) >>> 0) / ($31 >>> 0) | 0;
    if (!$26) break;
    $39 = $$pr & 255;
    $42 = HEAPU8[76984 + $39 >> 0] | 0;
    $49 = (((HEAP32[$27 >> 2] | 0) + -1 + $42 - (HEAPU8[76976 + $39 >> 0] | 0) | 0) >>> 0) / ($42 >>> 0) | 0;
    HEAP32[$3 >> 2] = $49;
    if (!(($49 | 0) == 0 | ($37 | 0) == 0)) break;
    $52 = $$pr + 1 << 24 >> 24;
    HEAP8[$14 >> 0] = $52;
    if (($52 & 255) > 6) {
     label = 9;
     break;
    } else {
     $$pr = $52;
     $29 = $52 & 255;
    }
   }
   if ((label | 0) == 9) {
    HEAP32[$22 >> 2] = $37;
    break;
   }
   HEAP32[$22 >> 2] = $37;
   if (($$pr & 255) < 7) return;
  }
 } while (0);
 $56 = $png_ptr + 212 | 0;
 if (!(HEAP32[$56 >> 2] & 8)) {
  _png_read_IDAT_data($png_ptr, 0, 0);
  HEAP32[$png_ptr + 236 >> 2] = 0;
  $61 = HEAP32[$56 >> 2] | 0;
  if (!($61 & 8)) {
   $64 = $png_ptr + 208 | 0;
   HEAP32[$64 >> 2] = HEAP32[$64 >> 2] | 8;
   HEAP32[$56 >> 2] = $61 | 8;
  }
 }
 $68 = $png_ptr + 220 | 0;
 if ((HEAP32[$68 >> 2] | 0) != 1229209940) return;
 HEAP32[$png_ptr + 224 >> 2] = 0;
 HEAP32[$png_ptr + 228 >> 2] = 0;
 HEAP32[$68 >> 2] = 0;
 _png_crc_finish($png_ptr, HEAP32[$png_ptr + 408 >> 2] | 0) | 0;
 return;
}

function _png_handle_unknown($png_ptr, $info_ptr, $length, $keep) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 $length = $length | 0;
 $keep = $keep | 0;
 var $$0 = 0, $$1 = 0, $0 = 0, $22 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $7 = 0, $handled$1 = 0, label = 0;
 $0 = $png_ptr + 684 | 0;
 do if (!(HEAP32[$0 >> 2] | 0)) {
  if (!$keep) $$0 = HEAP32[$png_ptr + 688 >> 2] | 0; else $$0 = $keep;
  if (($$0 | 0) == 2) if (!(HEAP32[$png_ptr + 376 >> 2] & 536870912)) label = 14; else label = 13; else if (($$0 | 0) == 3) label = 13; else label = 14;
  if ((label | 0) == 13) {
   $22 = (_png_cache_unknown_chunk($png_ptr, $length) | 0) == 0;
   $$1 = $22 ? 1 : $$0;
   label = 15;
   break;
  } else if ((label | 0) == 14) {
   _png_crc_finish($png_ptr, $length) | 0;
   $$1 = $$0;
   label = 15;
   break;
  }
 } else if (!(_png_cache_unknown_chunk($png_ptr, $length) | 0)) $handled$1 = 0; else {
  $7 = FUNCTION_TABLE_iii[HEAP32[$0 >> 2] & 31]($png_ptr, $png_ptr + 764 | 0) | 0;
  if (($7 | 0) < 0) _png_chunk_error($png_ptr, 76328);
  if (!$7) if (($keep | 0) < 2) if ((HEAP32[$png_ptr + 688 >> 2] | 0) < 2) {
   _png_chunk_warning($png_ptr, 76352);
   _png_app_warning($png_ptr, 76376);
   label = 16;
  } else label = 16; else {
   $$1 = $keep;
   label = 15;
  } else $handled$1 = 1;
 } while (0);
 if ((label | 0) == 15) if (($$1 | 0) == 3) label = 17; else if (($$1 | 0) == 2) label = 16; else $handled$1 = 0;
 if ((label | 0) == 16) if (!(HEAP32[$png_ptr + 376 >> 2] & 536870912)) $handled$1 = 0; else label = 17;
 do if ((label | 0) == 17) {
  $27 = $png_ptr + 756 | 0;
  $28 = HEAP32[$27 >> 2] | 0;
  if (($28 | 0) == 1) {
   $handled$1 = 0;
   break;
  } else if (($28 | 0) == 2) {
   HEAP32[$27 >> 2] = 1;
   _png_chunk_benign_error($png_ptr, 76176);
   $handled$1 = 0;
   break;
  } else if ($28) HEAP32[$27 >> 2] = $28 + -1;
  _png_set_unknown_chunks($png_ptr, $info_ptr, $png_ptr + 764 | 0, 1);
  $handled$1 = 1;
 } while (0);
 $31 = $png_ptr + 772 | 0;
 $32 = HEAP32[$31 >> 2] | 0;
 if ($32) _png_free($png_ptr, $32);
 HEAP32[$31 >> 2] = 0;
 if ($handled$1) return;
 if (!(HEAP32[$png_ptr + 376 >> 2] & 536870912)) _png_chunk_error($png_ptr, 76456); else return;
}

function _reallymarkobject($g, $o) {
 $g = $g | 0;
 $o = $o | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $17 = 0, $24 = 0, $3 = 0, $33 = 0, $4 = 0, $42 = 0, $45 = 0, $48 = 0, $5 = 0, $51 = 0, $54 = 0, label = 0;
 $0 = $g + 16 | 0;
 $$0 = $o;
 $3 = HEAP8[$o + 5 >> 0] | 0;
 L1 : while (1) {
  $1 = $$0 + 5 | 0;
  $4 = $3 & 252;
  $5 = $4 & 255;
  HEAP8[$1 >> 0] = $5;
  switch (HEAPU8[$$0 + 4 >> 0] | 0 | 0) {
  case 5:
   {
    label = 11;
    break L1;
    break;
   }
  case 38:
   {
    label = 10;
    break L1;
    break;
   }
  case 9:
   {
    label = 13;
    break L1;
    break;
   }
  case 8:
   {
    label = 12;
    break L1;
    break;
   }
  case 7:
   break;
  case 6:
   {
    label = 9;
    break L1;
    break;
   }
  case 20:
  case 4:
   {
    label = 3;
    break L1;
    break;
   }
  default:
   {
    label = 14;
    break L1;
   }
  }
  $17 = HEAP32[$$0 + 8 >> 2] | 0;
  if (!$17) $24 = $5; else if (!(HEAP8[$17 + 5 >> 0] & 3)) $24 = $5; else {
   _reallymarkobject($g, $17);
   $24 = HEAP8[$1 >> 0] | 0;
  }
  HEAP8[$1 >> 0] = $24 & 255 | 4;
  HEAP32[$0 >> 2] = (HEAP32[$$0 + 12 >> 2] | 0) + 24 + (HEAP32[$0 >> 2] | 0);
  $33 = HEAP32[$$0 + 16 >> 2] | 0;
  if (!(HEAP8[$$0 + 6 >> 0] & 64)) {
   label = 14;
   break;
  }
  $3 = HEAP8[$33 + 5 >> 0] | 0;
  if (!($3 & 3)) {
   label = 14;
   break;
  } else $$0 = $33;
 }
 if ((label | 0) == 3) {
  HEAP8[$1 >> 0] = $4 | 4;
  HEAP32[$0 >> 2] = (HEAP32[$$0 + 12 >> 2] | 0) + 25 + (HEAP32[$0 >> 2] | 0);
  return;
 } else if ((label | 0) == 9) {
  $42 = $g + 64 | 0;
  HEAP32[$$0 + 8 >> 2] = HEAP32[$42 >> 2];
  HEAP32[$42 >> 2] = $$0;
  return;
 } else if ((label | 0) == 10) {
  $45 = $g + 64 | 0;
  HEAP32[$$0 + 8 >> 2] = HEAP32[$45 >> 2];
  HEAP32[$45 >> 2] = $$0;
  return;
 } else if ((label | 0) == 11) {
  $48 = $g + 64 | 0;
  HEAP32[$$0 + 28 >> 2] = HEAP32[$48 >> 2];
  HEAP32[$48 >> 2] = $$0;
  return;
 } else if ((label | 0) == 12) {
  $51 = $g + 64 | 0;
  HEAP32[$$0 + 36 >> 2] = HEAP32[$51 >> 2];
  HEAP32[$51 >> 2] = $$0;
  return;
 } else if ((label | 0) == 13) {
  $54 = $g + 64 | 0;
  HEAP32[$$0 + 76 >> 2] = HEAP32[$54 >> 2];
  HEAP32[$54 >> 2] = $$0;
  return;
 } else if ((label | 0) == 14) return;
}

function _lua_tolstring($L, $idx, $len) {
 $L = $L | 0;
 $idx = $idx | 0;
 $len = $len | 0;
 var $$0 = 0, $$0$i = 0, $$0$i2 = 0, $$pre4 = 0, $0 = 0, $1 = 0, $16 = 0, $17 = 0, $2 = 0, $21 = 0, $31 = 0, $33 = 0, $39 = 0, $4 = 0, $40 = 0, $51 = 0, $52 = 0, $56 = 0, $o$0 = 0, label = 0;
 $0 = $L + 16 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = ($idx | 0) > 0;
 do if ($2) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 3) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 59168;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 3) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 4 >> 2] | 0) == 22) $$0$i = 59168; else {
   $21 = HEAP32[$17 >> 2] | 0;
   if (($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0)) $$0$i = 59168; else $$0$i = $21 + 16 + ($16 + -1 << 3) | 0;
  }
 } while (0);
 $31 = HEAP32[$$0$i + 4 >> 2] & 15;
 if (($31 | 0) == 4) $o$0 = $$0$i; else if (($31 | 0) == 3) label = 13; else {
  if (!$len) {
   $$0 = 0;
   return $$0 | 0;
  }
  HEAP32[$len >> 2] = 0;
  $$0 = 0;
  return $$0 | 0;
 }
 if ((label | 0) == 13) {
  $33 = $L + 12 | 0;
  if ((HEAP32[(HEAP32[$33 >> 2] | 0) + 12 >> 2] | 0) > 0) {
   _luaC_step($L);
   $39 = HEAP32[$0 >> 2] | 0;
  } else $39 = $1;
  do if ($2) {
   $40 = (HEAP32[$39 >> 2] | 0) + ($idx << 3) | 0;
   $$0$i2 = $40 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $40 : 59168;
  } else {
   if (($idx | 0) >= -1000999) {
    $$0$i2 = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 3) | 0;
    break;
   }
   if (($idx | 0) == -1001e3) {
    $$0$i2 = (HEAP32[$33 >> 2] | 0) + 36 | 0;
    break;
   }
   $51 = -1001e3 - $idx | 0;
   $52 = HEAP32[$39 >> 2] | 0;
   if ((HEAP32[$52 + 4 >> 2] | 0) == 22) $$0$i2 = 59168; else {
    $56 = HEAP32[$52 >> 2] | 0;
    if (($51 | 0) > (HEAPU8[$56 + 6 >> 0] | 0 | 0)) $$0$i2 = 59168; else $$0$i2 = $56 + 16 + ($51 + -1 << 3) | 0;
   }
  } while (0);
  _luaO_tostring($L, $$0$i2);
  $o$0 = $$0$i2;
 }
 $$pre4 = HEAP32[$o$0 >> 2] | 0;
 if ($len) HEAP32[$len >> 2] = HEAP32[$$pre4 + 12 >> 2];
 $$0 = $$pre4 + 24 | 0;
 return $$0 | 0;
}

function _png_handle_sBIT($png_ptr, $info_ptr, $length) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 $length = $length | 0;
 var $1 = 0, $11 = 0, $21 = 0, $22 = 0, $23 = 0, $31 = 0, $37 = 0, $38 = 0, $buf = 0, $i$03 = 0, $sample_depth$0 = 0, $truelen$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $buf = sp;
 $1 = HEAP32[$png_ptr + 208 >> 2] | 0;
 if (!($1 & 1)) _png_chunk_error($png_ptr, 75496);
 if ($1 & 6) {
  _png_crc_finish($png_ptr, $length) | 0;
  _png_chunk_benign_error($png_ptr, 75472);
  STACKTOP = sp;
  return;
 }
 if ($info_ptr) if (HEAP32[$info_ptr + 8 >> 2] & 2) {
  _png_crc_finish($png_ptr, $length) | 0;
  _png_chunk_benign_error($png_ptr, 75512);
  STACKTOP = sp;
  return;
 }
 $11 = $png_ptr + 435 | 0;
 if ((HEAP8[$11 >> 0] | 0) == 3) {
  $sample_depth$0 = 8;
  $truelen$0 = 3;
 } else {
  $sample_depth$0 = HEAP8[$png_ptr + 436 >> 0] | 0;
  $truelen$0 = HEAPU8[$png_ptr + 439 >> 0] | 0;
 }
 if (($truelen$0 | 0) != ($length | 0) | $length >>> 0 > 4) {
  _png_chunk_benign_error($png_ptr, 75488);
  _png_crc_finish($png_ptr, $length) | 0;
  STACKTOP = sp;
  return;
 }
 $21 = $buf + 3 | 0;
 $22 = $buf + 2 | 0;
 $23 = $buf + 1 | 0;
 _memset($buf | 0, $sample_depth$0 | 0, 4) | 0;
 if ($png_ptr) {
  _png_read_data($png_ptr, $buf, $length);
  _png_calculate_crc($png_ptr, $buf, $length);
 }
 if (_png_crc_finish($png_ptr, 0) | 0) {
  STACKTOP = sp;
  return;
 }
 L26 : do if ($length) {
  $i$03 = 0;
  while (1) {
   $31 = HEAP8[$buf + $i$03 >> 0] | 0;
   $i$03 = $i$03 + 1 | 0;
   if ($31 << 24 >> 24 == 0 | ($31 & 255) > ($sample_depth$0 & 255)) break;
   if ($i$03 >>> 0 >= $length >>> 0) break L26;
  }
  _png_chunk_benign_error($png_ptr, 75488);
  STACKTOP = sp;
  return;
 } while (0);
 $37 = HEAP8[$buf >> 0] | 0;
 $38 = $png_ptr + 516 | 0;
 if (!(HEAP8[$11 >> 0] & 2)) {
  _memset($38 | 0, $37 | 0, 4) | 0;
  HEAP8[$png_ptr + 520 >> 0] = HEAP8[$23 >> 0] | 0;
 } else {
  HEAP8[$38 >> 0] = $37;
  HEAP8[$png_ptr + 517 >> 0] = HEAP8[$23 >> 0] | 0;
  HEAP8[$png_ptr + 518 >> 0] = HEAP8[$22 >> 0] | 0;
  HEAP8[$png_ptr + 520 >> 0] = HEAP8[$21 >> 0] | 0;
 }
 _png_set_sBIT($png_ptr, $info_ptr, $38);
 STACKTOP = sp;
 return;
}

function _png_set_sPLT($png_ptr, $info_ptr, $entries, $nentries) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 $entries = $entries | 0;
 $nentries = $nentries | 0;
 var $$0 = 0, $$01 = 0, $11 = 0, $16 = 0, $19 = 0, $27 = 0, $28 = 0, $31 = 0, $33 = 0, $4 = 0, $48 = 0, $6 = 0, $8 = 0, $np$0 = 0, $np$1 = 0, label = 0;
 if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0 | ($nentries | 0) < 1 | ($entries | 0) == 0) return;
 $4 = $info_ptr + 244 | 0;
 $6 = $info_ptr + 248 | 0;
 $8 = _png_realloc_array($png_ptr, HEAP32[$4 >> 2] | 0, HEAP32[$6 >> 2] | 0, $nentries, 16) | 0;
 if (!$8) {
  _png_chunk_report($png_ptr, 77880, 1);
  return;
 }
 _png_free($png_ptr, HEAP32[$4 >> 2] | 0);
 HEAP32[$4 >> 2] = $8;
 $11 = $info_ptr + 232 | 0;
 HEAP32[$11 >> 2] = HEAP32[$11 >> 2] | 32;
 $16 = $info_ptr + 8 | 0;
 $$0 = $entries;
 $$01 = $nentries;
 $np$0 = $8 + (HEAP32[$6 >> 2] << 4) | 0;
 while (1) {
  if (!(HEAP32[$$0 >> 2] | 0)) label = 7; else {
   $19 = $$0 + 8 | 0;
   if (!(HEAP32[$19 >> 2] | 0)) label = 7; else {
    HEAP8[$np$0 + 4 >> 0] = HEAP8[$$0 + 4 >> 0] | 0;
    $27 = (_strlen(HEAP32[$$0 >> 2] | 0) | 0) + 1 | 0;
    $28 = _png_malloc_base($png_ptr, $27) | 0;
    HEAP32[$np$0 >> 2] = $28;
    if (!$28) break;
    _memcpy($28 | 0, HEAP32[$$0 >> 2] | 0, $27 | 0) | 0;
    $31 = $$0 + 12 | 0;
    $33 = _png_malloc_array($png_ptr, HEAP32[$31 >> 2] | 0, 10) | 0;
    HEAP32[$np$0 + 8 >> 2] = $33;
    if (!$33) {
     label = 10;
     break;
    }
    HEAP32[$np$0 + 12 >> 2] = HEAP32[$31 >> 2];
    _memcpy($33 | 0, HEAP32[$19 >> 2] | 0, (HEAP32[$31 >> 2] | 0) * 10 | 0) | 0;
    HEAP32[$16 >> 2] = HEAP32[$16 >> 2] | 8192;
    HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1;
    $np$1 = $np$0 + 16 | 0;
   }
  }
  if ((label | 0) == 7) {
   label = 0;
   _png_app_error($png_ptr, 77904);
   $np$1 = $np$0;
  }
  $48 = $$01 + -1 | 0;
  if (!$48) {
   label = 15;
   break;
  } else {
   $$0 = $$0 + 16 | 0;
   $$01 = $48;
   $np$0 = $np$1;
  }
 }
 if ((label | 0) == 10) {
  _png_free($png_ptr, HEAP32[$np$0 >> 2] | 0);
  HEAP32[$np$0 >> 2] = 0;
 } else if ((label | 0) == 15) return;
 if (($$01 | 0) <= 0) return;
 _png_chunk_report($png_ptr, 77936, 1);
 return;
}

function __ZN15b2DistanceJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $102 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $11 = 0.0, $12 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $24 = 0.0, $25 = 0.0, $27 = 0.0, $29 = 0.0, $3 = 0, $32 = 0.0, $37 = 0.0, $4 = 0, $40 = 0.0, $47 = 0.0, $5 = 0, $50 = 0.0, $60 = 0, $61 = 0.0, $64 = 0.0, $65 = 0.0, $67 = 0.0, $68 = 0.0, $70 = 0.0, $81 = 0.0, $83 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0;
 $0 = $this + 108 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $data + 28 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $3 + ($1 * 12 | 0) | 0;
 $5 = $4;
 $11 = +HEAPF32[$5 >> 2];
 $12 = +HEAPF32[$5 + 4 >> 2];
 $14 = +HEAPF32[$3 + ($1 * 12 | 0) + 8 >> 2];
 $15 = $this + 112 | 0;
 $16 = HEAP32[$15 >> 2] | 0;
 $18 = $3 + ($16 * 12 | 0) | 0;
 $24 = +HEAPF32[$18 >> 2];
 $25 = +HEAPF32[$18 + 4 >> 2];
 $27 = +HEAPF32[$3 + ($16 * 12 | 0) + 8 >> 2];
 $29 = +HEAPF32[$this + 128 >> 2];
 $32 = +HEAPF32[$this + 124 >> 2];
 $37 = +HEAPF32[$this + 136 >> 2];
 $40 = +HEAPF32[$this + 132 >> 2];
 $47 = +HEAPF32[$this + 116 >> 2];
 $50 = +HEAPF32[$this + 120 >> 2];
 $60 = $this + 100 | 0;
 $61 = +HEAPF32[$60 >> 2];
 $64 = +HEAPF32[$this + 172 >> 2] * (+HEAPF32[$this + 76 >> 2] + ($47 * ($24 - $27 * $37 - ($11 - $14 * $29)) + $50 * ($25 + $27 * $40 - ($12 + $14 * $32))) + +HEAPF32[$this + 96 >> 2] * $61);
 $65 = -$64;
 HEAPF32[$60 >> 2] = $61 - $64;
 $67 = $47 * $65;
 $68 = $50 * $65;
 $70 = +HEAPF32[$this + 156 >> 2];
 $81 = $14 - +HEAPF32[$this + 164 >> 2] * ($32 * $68 - $67 * $29);
 $83 = +HEAPF32[$this + 160 >> 2];
 $94 = $27 + +HEAPF32[$this + 168 >> 2] * ($68 * $40 - $67 * $37);
 $95 = +($11 - $70 * $67);
 $96 = +($12 - $70 * $68);
 $97 = $4;
 HEAPF32[$97 >> 2] = $95;
 HEAPF32[$97 + 4 >> 2] = $96;
 $102 = HEAP32[$2 >> 2] | 0;
 HEAPF32[$102 + ((HEAP32[$0 >> 2] | 0) * 12 | 0) + 8 >> 2] = $81;
 $106 = +($24 + $67 * $83);
 $107 = +($25 + $68 * $83);
 $108 = $102 + ((HEAP32[$15 >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$108 >> 2] = $106;
 HEAPF32[$108 + 4 >> 2] = $107;
 HEAPF32[(HEAP32[$2 >> 2] | 0) + ((HEAP32[$15 >> 2] | 0) * 12 | 0) + 8 >> 2] = $94;
 return;
}

function __ZN16b2PrismaticJointC2EPK19b2PrismaticJointDef($this, $def) {
 $this = $this | 0;
 $def = $def | 0;
 var $10 = 0, $11 = 0, $16 = 0, $2 = 0, $21 = 0, $22 = 0, $27 = 0, $29 = 0, $32 = 0, $33 = 0, $38 = 0.0, $41 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $59 = 0, $80 = 0, $bitcast = 0.0;
 __ZN7b2JointC2EPK10b2JointDef($this, $def);
 HEAP32[$this >> 2] = 85168;
 $2 = $this + 84 | 0;
 $5 = $def + 20 | 0;
 $10 = HEAP32[$5 + 4 >> 2] | 0;
 $11 = $this + 68 | 0;
 HEAP32[$11 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$11 + 4 >> 2] = $10;
 $16 = $def + 28 | 0;
 $21 = HEAP32[$16 + 4 >> 2] | 0;
 $22 = $this + 76 | 0;
 HEAP32[$22 >> 2] = HEAP32[$16 >> 2];
 HEAP32[$22 + 4 >> 2] = $21;
 $27 = $def + 36 | 0;
 $29 = HEAP32[$27 >> 2] | 0;
 $32 = HEAP32[$27 + 4 >> 2] | 0;
 $33 = $2;
 HEAP32[$33 >> 2] = $29;
 HEAP32[$33 + 4 >> 2] = $32;
 $bitcast = (HEAP32[tempDoublePtr >> 2] = $29, +HEAPF32[tempDoublePtr >> 2]);
 $38 = (HEAP32[tempDoublePtr >> 2] = $32, +HEAPF32[tempDoublePtr >> 2]);
 $41 = +Math_sqrt(+($bitcast * $bitcast + $38 * $38));
 if ($41 < 1.1920928955078125e-07) {
  $48 = $38;
  $51 = $bitcast;
 } else {
  $44 = 1.0 / $41;
  $45 = $bitcast * $44;
  HEAPF32[$2 >> 2] = $45;
  $46 = $38 * $44;
  HEAPF32[$this + 88 >> 2] = $46;
  $48 = $46;
  $51 = $45;
 }
 $49 = +-$48;
 $50 = +$51;
 $52 = $this + 92 | 0;
 HEAPF32[$52 >> 2] = $49;
 HEAPF32[$52 + 4 >> 2] = $50;
 HEAPF32[$this + 100 >> 2] = +HEAPF32[$def + 44 >> 2];
 $59 = $this + 104 | 0;
 HEAPF32[$this + 252 >> 2] = 0.0;
 HEAP32[$59 + 0 >> 2] = 0;
 HEAP32[$59 + 4 >> 2] = 0;
 HEAP32[$59 + 8 >> 2] = 0;
 HEAP32[$59 + 12 >> 2] = 0;
 HEAPF32[$this + 120 >> 2] = +HEAPF32[$def + 52 >> 2];
 HEAPF32[$this + 124 >> 2] = +HEAPF32[$def + 56 >> 2];
 HEAPF32[$this + 128 >> 2] = +HEAPF32[$def + 64 >> 2];
 HEAPF32[$this + 132 >> 2] = +HEAPF32[$def + 68 >> 2];
 HEAP8[$this + 136 >> 0] = HEAP8[$def + 48 >> 0] | 0;
 HEAP8[$this + 137 >> 0] = HEAP8[$def + 60 >> 0] | 0;
 HEAP32[$this + 140 >> 2] = 0;
 $80 = $this + 184 | 0;
 HEAP32[$80 + 0 >> 2] = 0;
 HEAP32[$80 + 4 >> 2] = 0;
 HEAP32[$80 + 8 >> 2] = 0;
 HEAP32[$80 + 12 >> 2] = 0;
 return;
}

function _lua_upvaluejoin($L, $fidx1, $n1, $fidx2, $n2) {
 $L = $L | 0;
 $fidx1 = $fidx1 | 0;
 $n1 = $n1 | 0;
 $fidx2 = $fidx2 | 0;
 $n2 = $n2 | 0;
 var $$0$i$i = 0, $$0$i$i2 = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $32 = 0, $35 = 0, $4 = 0, $47 = 0, $48 = 0, $52 = 0, $63 = 0, $65 = 0, $66 = 0, $69 = 0, $71 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($fidx1 | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($fidx1 << 3) | 0;
  $$0$i$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 59168;
 } else {
  if (($fidx1 | 0) >= -1000999) {
   $$0$i$i = (HEAP32[$L + 8 >> 2] | 0) + ($fidx1 << 3) | 0;
   break;
  }
  if (($fidx1 | 0) == -1001e3) {
   $$0$i$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $16 = -1001e3 - $fidx1 | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 4 >> 2] | 0) == 22) $$0$i$i = 59168; else {
   $21 = HEAP32[$17 >> 2] | 0;
   if (($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0)) $$0$i$i = 59168; else $$0$i$i = $21 + 16 + ($16 + -1 << 3) | 0;
  }
 } while (0);
 $32 = (HEAP32[$$0$i$i >> 2] | 0) + 16 + ($n1 + -1 << 2) | 0;
 do if (($fidx2 | 0) > 0) {
  $35 = (HEAP32[$1 >> 2] | 0) + ($fidx2 << 3) | 0;
  $$0$i$i2 = $35 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $35 : 59168;
 } else {
  if (($fidx2 | 0) >= -1000999) {
   $$0$i$i2 = (HEAP32[$L + 8 >> 2] | 0) + ($fidx2 << 3) | 0;
   break;
  }
  if (($fidx2 | 0) == -1001e3) {
   $$0$i$i2 = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $47 = -1001e3 - $fidx2 | 0;
  $48 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$48 + 4 >> 2] | 0) == 22) $$0$i$i2 = 59168; else {
   $52 = HEAP32[$48 >> 2] | 0;
   if (($47 | 0) > (HEAPU8[$52 + 6 >> 0] | 0 | 0)) $$0$i$i2 = 59168; else $$0$i$i2 = $52 + 16 + ($47 + -1 << 3) | 0;
  }
 } while (0);
 $63 = (HEAP32[$$0$i$i2 >> 2] | 0) + 16 + ($n2 + -1 << 2) | 0;
 _luaC_upvdeccount($L, HEAP32[$32 >> 2] | 0);
 $65 = HEAP32[$63 >> 2] | 0;
 HEAP32[$32 >> 2] = $65;
 $66 = $65 + 4 | 0;
 HEAP32[$66 >> 2] = (HEAP32[$66 >> 2] | 0) + 1;
 $69 = HEAP32[$65 >> 2] | 0;
 $71 = ($69 | 0) == ($65 + 8 | 0);
 if (!$71) HEAP32[$65 + 12 >> 2] = 1;
 if ((HEAP32[$69 + 4 >> 2] & 64 | 0) == 0 | $71 ^ 1) return;
 _luaC_upvalbarrier_($L, $65);
 return;
}

function _luaC_fullgc($L, $isemergency) {
 $L = $L | 0;
 $isemergency = $isemergency | 0;
 var $$pn = 0, $$pre = 0, $$pre11 = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $22 = 0, $31 = 0, $32 = 0, $33 = 0, $37 = 0, $43 = 0, $45 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $7 = 0, $9 = 0, label = 0;
 $0 = $L + 12 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ($isemergency) HEAP8[$1 + 50 >> 0] = 1;
 if ((HEAPU8[$1 + 49 >> 0] | 0) < 2) {
  $7 = HEAP32[$0 >> 2] | 0;
  HEAP8[$7 + 49 >> 0] = 2;
  $9 = $7 + 52 | 0;
  do $10 = _sweeplist($L, $9, 1) | 0; while (($10 | 0) == ($9 | 0));
  HEAP32[$7 + 56 >> 2] = $10;
 }
 $13 = HEAP32[$0 >> 2] | 0;
 $14 = $13 + 49 | 0;
 if ((HEAP8[$14 >> 0] | 0) == 7) {
  $20 = $13;
  $22 = 7;
 } else {
  do _singlestep($L) | 0; while ((HEAP8[$14 >> 0] | 0) != 7);
  $$pre = HEAP32[$0 >> 2] | 0;
  $20 = $$pre;
  $22 = HEAP8[$$pre + 49 >> 0] | 0;
 }
 $19 = $20 + 49 | 0;
 if (!(1 << ($22 & 255) & -129)) {
  do _singlestep($L) | 0; while ((1 << HEAPU8[$19 >> 0] & -129 | 0) == 0);
  $$pre8 = HEAP32[$0 >> 2] | 0;
  $32 = $$pre8;
  $33 = HEAP8[$$pre8 + 49 >> 0] | 0;
 } else {
  $32 = $20;
  $33 = $22;
 }
 $31 = $32 + 49 | 0;
 if ($33 << 24 >> 24 == 6) {
  $$pn = $32;
  label = 16;
 } else {
  do _singlestep($L) | 0; while ((HEAP8[$31 >> 0] | 0) != 6);
  $$pre11 = HEAP32[$0 >> 2] | 0;
  if ((HEAP8[$$pre11 + 49 >> 0] | 0) != 7) {
   $$pn = $$pre11;
   label = 16;
  }
 }
 if ((label | 0) == 16) {
  $37 = $$pn + 49 | 0;
  do _singlestep($L) | 0; while ((HEAP8[$37 >> 0] | 0) != 7);
 }
 HEAP8[$1 + 50 >> 0] = 0;
 $43 = ((HEAP32[$1 + 20 >> 2] | 0) >>> 0) / 100 | 0;
 $45 = HEAP32[$1 + 112 >> 2] | 0;
 if (($45 | 0) >= (2147483647 / ($43 >>> 0) | 0 | 0)) {
  $54 = 2147483647;
  $49 = $1 + 8 | 0;
  $50 = HEAP32[$49 >> 2] | 0;
  $51 = $1 + 12 | 0;
  $52 = HEAP32[$51 >> 2] | 0;
  $53 = $50 - $54 | 0;
  $55 = $53 + $52 | 0;
  _luaE_setdebt($1, $55);
  return;
 }
 $54 = Math_imul($45, $43) | 0;
 $49 = $1 + 8 | 0;
 $50 = HEAP32[$49 >> 2] | 0;
 $51 = $1 + 12 | 0;
 $52 = HEAP32[$51 >> 2] | 0;
 $53 = $50 - $54 | 0;
 $55 = $53 + $52 | 0;
 _luaE_setdebt($1, $55);
 return;
}

function __Z21mlua_apply_force_bodyP9lua_State($L) {
 $L = $L | 0;
 var $1 = 0, $12 = 0.0, $14 = 0.0, $15 = 0.0, $17 = 0.0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $25 = 0, $29 = 0, $32 = 0, $34 = 0, $37 = 0, $4 = 0.0, $49 = 0, $54 = 0, $55 = 0, $58 = 0, $6 = 0.0, $62 = 0, $65 = 0, $67 = 0, $7 = 0.0, $70 = 0, $9 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!$L) ___assert_fail(23976, 5248, 146, 5560);
 $1 = __Z8pop_bodyP9lua_Statei($L, 1) | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!$2) {
  _luaL_error($L, 5336, sp) | 0;
  $19 = HEAP32[$1 >> 2] | 0;
 } else $19 = $2;
 $4 = +_luaL_checknumber($L, 2);
 $6 = $4 / +HEAPF32[616];
 $7 = +_luaL_checknumber($L, 3);
 $9 = $7 / +HEAPF32[616];
 if ((_lua_gettop($L) | 0) > 4) {
  $12 = +_luaL_checknumber($L, 4);
  $14 = $12 / +HEAPF32[616];
  $15 = +_luaL_checknumber($L, 5);
  $17 = $15 / +HEAPF32[616];
  if ((HEAP32[$19 >> 2] | 0) != 2) {
   STACKTOP = sp;
   return 0;
  }
  $21 = $19 + 4 | 0;
  $22 = HEAP16[$21 >> 1] | 0;
  if (!($22 & 2)) {
   $25 = $22 & 65535;
   if (!($25 & 2)) {
    $29 = ($25 | 2) & 65535;
    HEAP16[$21 >> 1] = $29;
    HEAPF32[$19 + 144 >> 2] = 0.0;
    $32 = $29;
   } else $32 = $22;
  } else $32 = $22;
  if (!($32 & 2)) {
   STACKTOP = sp;
   return 0;
  }
  $34 = $19 + 76 | 0;
  HEAPF32[$34 >> 2] = $6 + +HEAPF32[$34 >> 2];
  $37 = $19 + 80 | 0;
  HEAPF32[$37 >> 2] = $9 + +HEAPF32[$37 >> 2];
  $49 = $19 + 84 | 0;
  HEAPF32[$49 >> 2] = +HEAPF32[$49 >> 2] + ($9 * ($14 - +HEAPF32[$19 + 44 >> 2]) - $6 * ($17 - +HEAPF32[$19 + 48 >> 2]));
  STACKTOP = sp;
  return 0;
 } else {
  if ((HEAP32[$19 >> 2] | 0) != 2) {
   STACKTOP = sp;
   return 0;
  }
  $54 = $19 + 4 | 0;
  $55 = HEAP16[$54 >> 1] | 0;
  if (!($55 & 2)) {
   $58 = $55 & 65535;
   if (!($58 & 2)) {
    $62 = ($58 | 2) & 65535;
    HEAP16[$54 >> 1] = $62;
    HEAPF32[$19 + 144 >> 2] = 0.0;
    $65 = $62;
   } else $65 = $55;
  } else $65 = $55;
  if (!($65 & 2)) {
   STACKTOP = sp;
   return 0;
  }
  $67 = $19 + 76 | 0;
  HEAPF32[$67 >> 2] = $6 + +HEAPF32[$67 >> 2];
  $70 = $19 + 80 | 0;
  HEAPF32[$70 >> 2] = $9 + +HEAPF32[$70 >> 2];
  STACKTOP = sp;
  return 0;
 }
 return 0;
}

function __ZN16b2BlockAllocator8AllocateEi($this, $size) {
 $this = $this | 0;
 $size = $size | 0;
 var $$0 = 0, $$lcssa2 = 0, $12 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $20 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $33 = 0, $36 = 0, $40 = 0, $44 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$looptemp = 0;
 if (!$size) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($size | 0) <= 0) ___assert_fail(83176, 83088, 102, 91128);
 if (($size | 0) > 640) {
  $$0 = __Z7b2Alloci($size) | 0;
  return $$0 | 0;
 }
 $5 = HEAP8[82408 + $size >> 0] | 0;
 $6 = $5 & 255;
 if (($5 & 255) >= 14) ___assert_fail(83192, 83088, 110, 91128);
 $8 = $this + ($6 << 2) + 12 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 if ($9) {
  HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
  $$0 = $9;
  return $$0 | 0;
 }
 $12 = $this + 4 | 0;
 $13 = HEAP32[$12 >> 2] | 0;
 $14 = $this + 8 | 0;
 if (($13 | 0) == (HEAP32[$14 >> 2] | 0)) {
  $17 = HEAP32[$this >> 2] | 0;
  $18 = $13 + 128 | 0;
  HEAP32[$14 >> 2] = $18;
  $20 = __Z7b2Alloci($18 << 3) | 0;
  HEAP32[$this >> 2] = $20;
  _memcpy($20 | 0, $17 | 0, HEAP32[$12 >> 2] << 3 | 0) | 0;
  _memset((HEAP32[$this >> 2] | 0) + (HEAP32[$12 >> 2] << 3) | 0, 0, 1024) | 0;
  __Z6b2FreePv($17);
  $29 = HEAP32[$12 >> 2] | 0;
 } else $29 = $13;
 $26 = HEAP32[$this >> 2] | 0;
 $27 = __Z7b2Alloci(16384) | 0;
 $28 = $26 + ($29 << 3) + 4 | 0;
 HEAP32[$28 >> 2] = $27;
 $31 = HEAP32[82352 + ($6 << 2) >> 2] | 0;
 HEAP32[$26 + ($29 << 3) >> 2] = $31;
 $33 = 16384 / ($31 | 0) | 0;
 if ((Math_imul($33, $31) | 0) >= 16385) ___assert_fail(83232, 83088, 138, 91128);
 $36 = $33 + -1 | 0;
 if (($36 | 0) > 0) {
  $40 = $27;
  $i$03 = 0;
  while (1) {
   $i$03$looptemp = $i$03;
   $i$03 = $i$03 + 1 | 0;
   HEAP32[$40 + (Math_imul($i$03$looptemp, $31) | 0) >> 2] = $40 + (Math_imul($i$03, $31) | 0);
   $44 = HEAP32[$28 >> 2] | 0;
   if (($i$03 | 0) == ($36 | 0)) {
    $$lcssa2 = $44;
    break;
   } else $40 = $44;
  }
 } else $$lcssa2 = $27;
 HEAP32[$$lcssa2 + (Math_imul($36, $31) | 0) >> 2] = 0;
 HEAP32[$8 >> 2] = HEAP32[HEAP32[$28 >> 2] >> 2];
 HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 1;
 $$0 = HEAP32[$28 >> 2] | 0;
 return $$0 | 0;
}

function _lua_getupvalue($L, $funcindex, $n) {
 $L = $L | 0;
 $funcindex = $funcindex | 0;
 $n = $n | 0;
 var $$0$i = 0, $$0$i1$ph = 0, $$0$i12 = 0, $$ph = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $31 = 0, $32 = 0, $4 = 0, $41 = 0, $43 = 0, $48 = 0, $56 = 0, $59 = 0, $61 = 0, $66 = 0, $67 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($funcindex | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($funcindex << 3) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 59168;
 } else {
  if (($funcindex | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($funcindex << 3) | 0;
   break;
  }
  if (($funcindex | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $16 = -1001e3 - $funcindex | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 4 >> 2] | 0) == 22) $$0$i = 59168; else {
   $21 = HEAP32[$17 >> 2] | 0;
   if (($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0)) $$0$i = 59168; else $$0$i = $21 + 16 + ($16 + -1 << 3) | 0;
  }
 } while (0);
 $31 = HEAP32[$$0$i + 4 >> 2] & 63;
 do if (($31 | 0) == 6) {
  $41 = HEAP32[$$0$i >> 2] | 0;
  $43 = HEAP32[$41 + 12 >> 2] | 0;
  if (($n | 0) <= 0) {
   $$0$i12 = 0;
   return $$0$i12 | 0;
  }
  if ((HEAP32[$43 + 12 >> 2] | 0) < ($n | 0)) {
   $$0$i12 = 0;
   return $$0$i12 | 0;
  } else {
   $48 = $n + -1 | 0;
   $56 = HEAP32[(HEAP32[$43 + 64 >> 2] | 0) + ($48 << 3) >> 2] | 0;
   $$0$i1$ph = ($56 | 0) == 0 ? 55056 : $56 + 24 | 0;
   $$ph = HEAP32[HEAP32[$41 + 16 + ($48 << 2) >> 2] >> 2] | 0;
   break;
  }
 } else if (($31 | 0) == 38) {
  $32 = HEAP32[$$0$i >> 2] | 0;
  if (($n | 0) <= 0) {
   $$0$i12 = 0;
   return $$0$i12 | 0;
  }
  if ((HEAPU8[$32 + 6 >> 0] | 0 | 0) < ($n | 0)) {
   $$0$i12 = 0;
   return $$0$i12 | 0;
  } else {
   $$0$i1$ph = 62584;
   $$ph = $32 + 16 + ($n + -1 << 3) | 0;
   break;
  }
 } else {
  $$0$i12 = 0;
  return $$0$i12 | 0;
 } while (0);
 $59 = $L + 8 | 0;
 $61 = $$ph;
 $66 = HEAP32[$61 + 4 >> 2] | 0;
 $67 = HEAP32[$59 >> 2] | 0;
 HEAP32[$67 >> 2] = HEAP32[$61 >> 2];
 HEAP32[$67 + 4 >> 2] = $66;
 HEAP32[$59 >> 2] = (HEAP32[$59 >> 2] | 0) + 8;
 $$0$i12 = $$0$i1$ph;
 return $$0$i12 | 0;
}

function _luaV_settable($L, $t, $key, $val) {
 $L = $L | 0;
 $t = $t | 0;
 $key = $key | 0;
 $val = $val | 0;
 var $$011 = 0, $0 = 0, $11 = 0, $20 = 0, $24 = 0, $29 = 0, $3 = 0, $30 = 0, $48 = 0, $5 = 0, $50 = 0, $53 = 0, $6 = 0, $loop$010 = 0, $oldval$0 = 0, $tm$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $0 = $L + 12 | 0;
 $$011 = $t;
 $3 = HEAP32[$t + 4 >> 2] | 0;
 $loop$010 = 0;
 while (1) {
  if (($3 | 0) == 69) {
   $5 = HEAP32[$$011 >> 2] | 0;
   $6 = _luaH_get($5, $key) | 0;
   if (HEAP32[$6 + 4 >> 2] | 0) {
    $oldval$0 = $6;
    break;
   }
   $11 = HEAP32[$5 + 24 >> 2] | 0;
   if (!$11) {
    label = 9;
    break;
   }
   if (HEAP8[$11 + 6 >> 0] & 2) {
    label = 9;
    break;
   }
   $20 = _luaT_gettm($11, 1, HEAP32[(HEAP32[$0 >> 2] | 0) + 140 >> 2] | 0) | 0;
   if (!$20) {
    label = 9;
    break;
   }
   $53 = HEAP32[$20 + 4 >> 2] | 0;
   $tm$0 = $20;
  } else {
   $48 = _luaT_gettmbyobj($L, $$011, 1) | 0;
   $50 = HEAP32[$48 + 4 >> 2] | 0;
   if (!$50) {
    label = 16;
    break;
   } else {
    $53 = $50;
    $tm$0 = $48;
   }
  }
  $loop$010 = $loop$010 + 1 | 0;
  if (($53 & 15 | 0) == 6) {
   label = 18;
   break;
  }
  if (($loop$010 | 0) >= 2e3) {
   label = 19;
   break;
  } else {
   $$011 = $tm$0;
   $3 = $53;
  }
 }
 if ((label | 0) == 9) if (($6 | 0) == 59168) $oldval$0 = _luaH_newkey($L, $5, $key) | 0; else $oldval$0 = $6; else if ((label | 0) == 16) _luaG_typeerror($L, $$011, 63952); else if ((label | 0) == 18) {
  _luaT_callTM($L, $tm$0, $$011, $key, $val, 0);
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 19) _luaG_runerror($L, 64e3, $vararg_buffer);
 $24 = $val;
 $29 = HEAP32[$24 + 4 >> 2] | 0;
 $30 = $oldval$0;
 HEAP32[$30 >> 2] = HEAP32[$24 >> 2];
 HEAP32[$30 + 4 >> 2] = $29;
 HEAP8[$5 + 6 >> 0] = 0;
 if (!(HEAP32[$val + 4 >> 2] & 64)) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP8[$5 + 5 >> 0] & 4)) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP8[(HEAP32[$val >> 2] | 0) + 5 >> 0] & 3)) {
  STACKTOP = sp;
  return;
 }
 _luaC_barrierback_($L, $5);
 STACKTOP = sp;
 return;
}

function __ZN12b2EPCollider24ComputePolygonSeparationEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $12 = 0.0, $14 = 0.0, $16 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0.0, $25 = 0.0, $28 = 0.0, $3 = 0.0, $30 = 0.0, $33 = 0.0, $37 = 0.0, $42 = 0.0, $44 = 0.0, $5 = 0.0, $58 = 0.0, $68 = 0, $7 = 0, $70 = 0.0, $i$08 = 0, label = 0;
 HEAP32[$agg$result >> 2] = 0;
 $0 = $agg$result + 4 | 0;
 HEAP32[$0 >> 2] = -1;
 $1 = $agg$result + 8 | 0;
 HEAPF32[$1 >> 2] = -3402823466385288598117041.0e14;
 $3 = +HEAPF32[$this + 216 >> 2];
 $5 = +HEAPF32[$this + 212 >> 2];
 $7 = HEAP32[$this + 128 >> 2] | 0;
 if (($7 | 0) <= 0) return;
 $10 = +HEAPF32[$this + 164 >> 2];
 $12 = +HEAPF32[$this + 168 >> 2];
 $14 = +HEAPF32[$this + 172 >> 2];
 $16 = +HEAPF32[$this + 176 >> 2];
 $18 = +HEAPF32[$this + 244 >> 2];
 $19 = $this + 228 | 0;
 $20 = $this + 232 | 0;
 $21 = $this + 236 | 0;
 $22 = $this + 240 | 0;
 $58 = -3402823466385288598117041.0e14;
 $i$08 = 0;
 while (1) {
  $24 = +HEAPF32[$this + ($i$08 << 3) + 64 >> 2];
  $25 = -$24;
  $28 = -+HEAPF32[$this + ($i$08 << 3) + 68 >> 2];
  $30 = +HEAPF32[$this + ($i$08 << 3) >> 2];
  $33 = +HEAPF32[$this + ($i$08 << 3) + 4 >> 2];
  $37 = ($30 - $10) * $25 + ($33 - $12) * $28;
  $42 = ($30 - $14) * $25 + ($33 - $16) * $28;
  $44 = $37 < $42 ? $37 : $42;
  if ($44 > $18) break;
  if (!($3 * $24 + $5 * $28 >= 0.0)) if ($44 > $58 ? !(($25 - +HEAPF32[$19 >> 2]) * $5 + ($28 - +HEAPF32[$20 >> 2]) * $3 < -.03490658849477768) : 0) label = 8; else $70 = $58; else if ($44 > $58 ? !(($25 - +HEAPF32[$21 >> 2]) * $5 + ($28 - +HEAPF32[$22 >> 2]) * $3 < -.03490658849477768) : 0) label = 8; else $70 = $58;
  if ((label | 0) == 8) {
   label = 0;
   HEAP32[$agg$result >> 2] = 2;
   HEAP32[$0 >> 2] = $i$08;
   HEAPF32[$1 >> 2] = $44;
   $70 = $44;
  }
  $68 = $i$08 + 1 | 0;
  if (($68 | 0) < ($7 | 0)) {
   $58 = $70;
   $i$08 = $68;
  } else {
   label = 10;
   break;
  }
 }
 if ((label | 0) == 10) return;
 HEAP32[$agg$result >> 2] = 2;
 HEAP32[$0 >> 2] = $i$08;
 HEAPF32[$1 >> 2] = $44;
 return;
}

function _buffer_check_not_full($b) {
 $b = $b | 0;
 var $1 = 0, $11 = 0, $17 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $31 = 0, $34 = 0, $40 = 0, $41 = 0, $5 = 0, $size_colors$i = 0, $size_point_size$i = 0, $size_positions$i = 0, $size_tex_coords$i = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp;
 $size_positions$i = sp + 16 | 0;
 $size_colors$i = sp + 12 | 0;
 $size_tex_coords$i = sp + 8 | 0;
 $size_point_size$i = sp + 4 | 0;
 if (!$b) ___assert_fail(23160, 22016, 156, 22088);
 $1 = HEAP32[$b >> 2] | 0;
 if (($1 | 0) == 1) {
  $5 = HEAP32[$b + 4 >> 2] | 0;
  if ((HEAP32[$b + 40 >> 2] | 0) >>> 0 > ($5 + -1 | 0) >>> 0) $25 = $5; else {
   STACKTOP = sp;
   return;
  }
 } else if (($1 | 0) == 3) {
  $17 = HEAP32[$b + 4 >> 2] | 0;
  if ((HEAP32[$b + 40 >> 2] | 0) >>> 0 > ($17 + -3 | 0) >>> 0) $25 = $17; else {
   STACKTOP = sp;
   return;
  }
 } else if (($1 | 0) == 2) {
  $11 = HEAP32[$b + 4 >> 2] | 0;
  if ((HEAP32[$b + 40 >> 2] | 0) >>> 0 > ($11 + -2 | 0) >>> 0) $25 = $11; else {
   STACKTOP = sp;
   return;
  }
 } else {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP8[$b + 68 >> 0] | 0)) {
  _buffer_draw($b, 0.0, 0.0);
  $41 = $b + 40 | 0;
  HEAP32[$41 + 0 >> 2] = 0;
  HEAP32[$41 + 4 >> 2] = 0;
  HEAP32[$41 + 8 >> 2] = 0;
  HEAP32[$41 + 12 >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 $24 = $25 << 1;
 HEAP32[$size_positions$i >> 2] = $24;
 $26 = $25 << 2;
 HEAP32[$size_colors$i >> 2] = $26;
 HEAP32[$size_tex_coords$i >> 2] = $24;
 HEAP32[$size_point_size$i >> 2] = $25;
 $28 = $24 + 2 | 0;
 _xrealloc($b + 24 | 0, $size_positions$i, $28, 4, 32) | 0;
 _xrealloc($b + 28 | 0, $size_colors$i, $26 + 4 | 0, 1, 32) | 0;
 $31 = $b + 32 | 0;
 if (HEAP32[$31 >> 2] | 0) _xrealloc($31, $size_tex_coords$i, $28, 4, 32) | 0;
 $34 = $b + 36 | 0;
 if (HEAP32[$34 >> 2] | 0) _xrealloc($34, $size_point_size$i, (HEAP32[$size_point_size$i >> 2] | 0) + 1 | 0, 4, 32) | 0;
 $40 = (HEAP32[$size_colors$i >> 2] | 0) >>> 2;
 HEAP32[$b + 4 >> 2] = $40;
 HEAP32[$vararg_buffer >> 2] = $40;
 _log_internal(2, 22256, 22752, $vararg_buffer);
 STACKTOP = sp;
 return;
}

function _gotostat($ls, $pc) {
 $ls = $ls | 0;
 $pc = $pc | 0;
 var $1 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $24 = 0, $26 = 0, $27 = 0, $29 = 0, $36 = 0, $39 = 0, $4 = 0, $41 = 0, $43 = 0, $45 = 0, $48 = 0, $50 = 0, $51 = 0, $53 = 0, $59 = 0, $8 = 0, $i$04$i = 0, $label$0 = 0, label = 0;
 $1 = HEAP32[$ls + 4 >> 2] | 0;
 $2 = $ls + 12 | 0;
 $4 = (HEAP32[$2 >> 2] | 0) == 266;
 _luaX_next($ls);
 do if ($4) if ((HEAP32[$2 >> 2] | 0) == 292) {
  $8 = HEAP32[$ls + 16 >> 2] | 0;
  _luaX_next($ls);
  $label$0 = $8;
  break;
 } else _error_expected($ls, 292); else $label$0 = _luaS_new(HEAP32[$ls + 32 >> 2] | 0, 67552) | 0; while (0);
 $12 = $ls + 48 | 0;
 $13 = HEAP32[$12 >> 2] | 0;
 $14 = $13 + 12 | 0;
 $15 = $13 + 16 | 0;
 $16 = HEAP32[$15 >> 2] | 0;
 $18 = $13 + 20 | 0;
 if (($16 | 0) < (HEAP32[$18 >> 2] | 0)) $26 = HEAP32[$14 >> 2] | 0; else {
  $24 = _luaM_growaux_(HEAP32[$ls + 32 >> 2] | 0, HEAP32[$14 >> 2] | 0, $18, 16, 32767, 60368) | 0;
  HEAP32[$14 >> 2] = $24;
  $26 = $24;
 }
 HEAP32[$26 + ($16 << 4) >> 2] = $label$0;
 $27 = HEAP32[$14 >> 2] | 0;
 HEAP32[$27 + ($16 << 4) + 8 >> 2] = $1;
 $29 = $ls + 28 | 0;
 HEAP8[$27 + ($16 << 4) + 12 >> 0] = HEAP8[(HEAP32[$29 >> 2] | 0) + 42 >> 0] | 0;
 HEAP32[(HEAP32[$14 >> 2] | 0) + ($16 << 4) + 4 >> 2] = $pc;
 HEAP32[$15 >> 2] = $16 + 1;
 $36 = HEAP32[$29 >> 2] | 0;
 $39 = HEAP32[$12 >> 2] | 0;
 $41 = HEAP32[$39 + 12 >> 2] | 0;
 $43 = HEAP32[(HEAP32[$36 + 12 >> 2] | 0) + 4 >> 2] | 0;
 $45 = HEAP32[$39 + 28 >> 2] | 0;
 if (($43 | 0) >= ($45 | 0)) return;
 $48 = HEAP32[$39 + 24 >> 2] | 0;
 $50 = HEAP32[$41 + ($16 << 4) >> 2] | 0;
 $i$04$i = $43;
 while (1) {
  $53 = $48 + ($i$04$i << 4) | 0;
  $51 = $i$04$i + 1 | 0;
  if ((HEAP32[$53 >> 2] | 0) == ($50 | 0)) break;
  if (($51 | 0) < ($45 | 0)) $i$04$i = $51; else {
   label = 16;
   break;
  }
 }
 if ((label | 0) == 16) return;
 $59 = HEAP8[$48 + ($i$04$i << 4) + 12 >> 0] | 0;
 if ((HEAPU8[$41 + ($16 << 4) + 12 >> 0] | 0) > ($59 & 255)) _luaK_patchclose($36, HEAP32[$41 + ($16 << 4) + 4 >> 2] | 0, $59 & 255);
 _closegoto($ls, $16, $53);
 return;
}

function _GCTM($L, $propagateerrors) {
 $L = $L | 0;
 $propagateerrors = $propagateerrors | 0;
 var $1 = 0, $2 = 0, $27 = 0, $3 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $44 = 0, $45 = 0, $5 = 0, $51 = 0, $56 = 0, $57 = 0, $61 = 0, $68 = 0, $7 = 0, $72 = 0, $80 = 0, $9 = 0, $status$0 = 0, $v = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp + 8 | 0;
 $v = sp;
 $1 = HEAP32[$L + 12 >> 2] | 0;
 $2 = $1 + 84 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 $5 = $1 + 52 | 0;
 HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$5 >> 2] = $3;
 $7 = $3 + 5 | 0;
 $9 = HEAPU8[$7 >> 0] | 0;
 HEAP8[$7 >> 0] = $9 & 247;
 if (((HEAP8[$1 + 49 >> 0] | 0) + -2 & 255) < 4) HEAP8[$7 >> 0] = (HEAPU8[$1 + 48 >> 0] | 0) & 3 | $9 & 240;
 HEAP32[$v >> 2] = $3;
 HEAP32[$v + 4 >> 2] = HEAPU8[$3 + 4 >> 0] | 0 | 64;
 $27 = _luaT_gettmbyobj($L, $v, 2) | 0;
 if (!$27) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$27 + 4 >> 2] & 15 | 0) != 6) {
  STACKTOP = sp;
  return;
 }
 $33 = $L + 109 | 0;
 $34 = HEAP8[$33 >> 0] | 0;
 $35 = $1 + 51 | 0;
 $36 = HEAP8[$35 >> 0] | 0;
 HEAP8[$33 >> 0] = 0;
 HEAP8[$35 >> 0] = 0;
 $37 = $L + 8 | 0;
 $39 = $27;
 $44 = HEAP32[$39 + 4 >> 2] | 0;
 $45 = HEAP32[$37 >> 2] | 0;
 HEAP32[$45 >> 2] = HEAP32[$39 >> 2];
 HEAP32[$45 + 4 >> 2] = $44;
 $51 = $v;
 $56 = HEAP32[$51 + 4 >> 2] | 0;
 $57 = (HEAP32[$37 >> 2] | 0) + 8 | 0;
 HEAP32[$57 >> 2] = HEAP32[$51 >> 2];
 HEAP32[$57 + 4 >> 2] = $56;
 $61 = HEAP32[$37 >> 2] | 0;
 HEAP32[$37 >> 2] = $61 + 16;
 $68 = _luaD_pcall($L, 83, 0, $61 - (HEAP32[$L + 28 >> 2] | 0) | 0, 0) | 0;
 HEAP8[$33 >> 0] = $34;
 HEAP8[$35 >> 0] = $36;
 if (($68 | 0) == 0 | ($propagateerrors | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 if (($68 | 0) != 2) {
  $status$0 = $68;
  _luaD_throw($L, $status$0);
 }
 $72 = HEAP32[$37 >> 2] | 0;
 if ((HEAP32[$72 + -4 >> 2] & 15 | 0) == 4) $80 = (HEAP32[$72 + -8 >> 2] | 0) + 24 | 0; else $80 = 56472;
 HEAP32[$vararg_buffer >> 2] = $80;
 _luaO_pushfstring($L, 56488, $vararg_buffer) | 0;
 $status$0 = 5;
 _luaD_throw($L, $status$0);
}

function _close_func($ls) {
 $ls = $ls | 0;
 var $1 = 0, $11 = 0, $17 = 0, $2 = 0, $20 = 0, $22 = 0, $28 = 0, $29 = 0, $3 = 0, $32 = 0, $34 = 0, $4 = 0, $40 = 0, $41 = 0, $44 = 0, $46 = 0, $5 = 0, $52 = 0, $54 = 0, $57 = 0, $6 = 0, $64 = 0, $66 = 0, $69 = 0, $9 = 0;
 $1 = HEAP32[$ls + 32 >> 2] | 0;
 $2 = $ls + 28 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 _luaK_ret($3, 0, 0);
 _leaveblock($3);
 $5 = $3 + 16 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 if (($6 + 1 | 0) >>> 0 > 1073741823) _luaM_toobig($1);
 $9 = $4 + 48 | 0;
 $11 = $4 + 20 | 0;
 HEAP32[$9 >> 2] = _luaM_realloc_($1, HEAP32[$9 >> 2] | 0, HEAP32[$11 >> 2] << 2, $6 << 2) | 0;
 HEAP32[$11 >> 2] = HEAP32[$5 >> 2];
 $17 = HEAP32[$5 >> 2] | 0;
 if (($17 + 1 | 0) >>> 0 > 1073741823) _luaM_toobig($1);
 $20 = $4 + 56 | 0;
 $22 = $4 + 24 | 0;
 HEAP32[$20 >> 2] = _luaM_realloc_($1, HEAP32[$20 >> 2] | 0, HEAP32[$22 >> 2] << 2, $17 << 2) | 0;
 HEAP32[$22 >> 2] = HEAP32[$5 >> 2];
 $28 = $3 + 28 | 0;
 $29 = HEAP32[$28 >> 2] | 0;
 if (($29 + 1 | 0) >>> 0 > 536870911) _luaM_toobig($1);
 $32 = $4 + 44 | 0;
 $34 = $4 + 16 | 0;
 HEAP32[$32 >> 2] = _luaM_realloc_($1, HEAP32[$32 >> 2] | 0, HEAP32[$34 >> 2] << 3, $29 << 3) | 0;
 HEAP32[$34 >> 2] = HEAP32[$28 >> 2];
 $40 = $3 + 32 | 0;
 $41 = HEAP32[$40 >> 2] | 0;
 if (($41 + 1 | 0) >>> 0 > 1073741823) _luaM_toobig($1);
 $44 = $4 + 52 | 0;
 $46 = $4 + 28 | 0;
 HEAP32[$44 >> 2] = _luaM_realloc_($1, HEAP32[$44 >> 2] | 0, HEAP32[$46 >> 2] << 2, $41 << 2) | 0;
 HEAP32[$46 >> 2] = HEAP32[$40 >> 2];
 $52 = $4 + 60 | 0;
 $54 = $4 + 32 | 0;
 $57 = $3 + 40 | 0;
 HEAP32[$52 >> 2] = _luaM_realloc_($1, HEAP32[$52 >> 2] | 0, (HEAP32[$54 >> 2] | 0) * 12 | 0, (HEAP16[$57 >> 1] | 0) * 12 | 0) | 0;
 HEAP32[$54 >> 2] = HEAP16[$57 >> 1];
 $64 = $4 + 64 | 0;
 $66 = $4 + 12 | 0;
 $69 = $3 + 43 | 0;
 HEAP32[$64 >> 2] = _luaM_realloc_($1, HEAP32[$64 >> 2] | 0, HEAP32[$66 >> 2] << 3, HEAPU8[$69 >> 0] << 3) | 0;
 HEAP32[$66 >> 2] = HEAPU8[$69 >> 0];
 HEAP32[$2 >> 2] = HEAP32[$3 + 4 >> 2];
 if ((HEAP32[(HEAP32[$1 + 12 >> 2] | 0) + 12 >> 2] | 0) <= 0) return;
 _luaC_step($1);
 return;
}

function _luaD_poscall($L, $firstResult) {
 $L = $L | 0;
 $firstResult = $firstResult | 0;
 var $$0 = 0, $$1 = 0, $$25 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $13 = 0, $16 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $31 = 0, $33 = 0, $38 = 0, $39 = 0, $4 = 0, $43 = 0, $49 = 0, $9 = 0, $i$03 = 0, $i$11 = 0, $res$04 = 0, $res$1$lcssa = 0, $res$12 = 0, label = 0;
 $0 = $L + 16 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $4 = HEAPU8[$L + 108 >> 0] | 0;
 if (!($4 & 6)) {
  $$1 = $firstResult;
  $$pre$phiZ2D = $1 + 8 | 0;
 } else {
  if (!($4 & 2)) $$0 = $firstResult; else {
   $9 = $L + 28 | 0;
   $13 = $firstResult - (HEAP32[$9 >> 2] | 0) | 0;
   _luaD_hook($L, 1, -1);
   $$0 = (HEAP32[$9 >> 2] | 0) + $13 | 0;
  }
  $16 = $1 + 8 | 0;
  HEAP32[$L + 20 >> 2] = HEAP32[(HEAP32[$16 >> 2] | 0) + 20 >> 2];
  $$1 = $$0;
  $$pre$phiZ2D = $16;
 }
 $21 = HEAP32[$1 >> 2] | 0;
 $23 = HEAP16[$1 + 32 >> 1] | 0;
 $24 = $23 << 16 >> 16;
 HEAP32[$0 >> 2] = HEAP32[$$pre$phiZ2D >> 2];
 $26 = $L + 8 | 0;
 if (!($23 << 16 >> 16)) {
  $res$1$lcssa = $21;
  HEAP32[$26 >> 2] = $res$1$lcssa;
  $49 = $24 + 1 | 0;
  return $49 | 0;
 } else {
  $$25 = $$1;
  $i$03 = $24;
  $res$04 = $21;
 }
 while (1) {
  if ($$25 >>> 0 >= (HEAP32[$26 >> 2] | 0) >>> 0) break;
  $31 = $res$04 + 8 | 0;
  $33 = $$25;
  $38 = HEAP32[$33 + 4 >> 2] | 0;
  $39 = $res$04;
  HEAP32[$39 >> 2] = HEAP32[$33 >> 2];
  HEAP32[$39 + 4 >> 2] = $38;
  $43 = $i$03 + -1 | 0;
  if (!$43) {
   $res$1$lcssa = $31;
   label = 12;
   break;
  } else {
   $$25 = $$25 + 8 | 0;
   $i$03 = $43;
   $res$04 = $31;
  }
 }
 if ((label | 0) == 12) {
  HEAP32[$26 >> 2] = $res$1$lcssa;
  $49 = $24 + 1 | 0;
  return $49 | 0;
 }
 if (($i$03 | 0) > 0) {
  $i$11 = $i$03;
  $res$12 = $res$04;
 } else {
  $res$1$lcssa = $res$04;
  HEAP32[$26 >> 2] = $res$1$lcssa;
  $49 = $24 + 1 | 0;
  return $49 | 0;
 }
 while (1) {
  $i$11 = $i$11 + -1 | 0;
  HEAP32[$res$12 + 4 >> 2] = 0;
  if (($i$11 | 0) <= 0) break; else $res$12 = $res$12 + 8 | 0;
 }
 $res$1$lcssa = $res$04 + ($i$03 << 3) | 0;
 HEAP32[$26 >> 2] = $res$1$lcssa;
 $49 = $24 + 1 | 0;
 return $49 | 0;
}

function __ZN13b2DynamicTree9MoveProxyEiRK6b2AABBRK6b2Vec2($this, $proxyId, $aabb, $displacement) {
 $this = $this | 0;
 $proxyId = $proxyId | 0;
 $aabb = $aabb | 0;
 $displacement = $displacement | 0;
 var $$0 = 0, $28 = 0, $34 = 0.0, $35 = 0.0, $37 = 0, $4 = 0, $43 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $5 = 0, $50 = 0.0, $53 = 0.0, $60 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0;
 if (($proxyId | 0) <= -1) ___assert_fail(90168, 90016, 132, 90264);
 if ((HEAP32[$this + 12 >> 2] | 0) <= ($proxyId | 0)) ___assert_fail(90168, 90016, 132, 90264);
 $4 = $this + 4 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 if ((HEAP32[$5 + ($proxyId * 36 | 0) + 24 >> 2] | 0) != -1) ___assert_fail(90232, 90016, 134, 90264);
 if (+HEAPF32[$5 + ($proxyId * 36 | 0) >> 2] <= +HEAPF32[$aabb >> 2]) if (+HEAPF32[$5 + ($proxyId * 36 | 0) + 4 >> 2] <= +HEAPF32[$aabb + 4 >> 2]) if (+HEAPF32[$aabb + 8 >> 2] <= +HEAPF32[$5 + ($proxyId * 36 | 0) + 8 >> 2]) if (+HEAPF32[$aabb + 12 >> 2] <= +HEAPF32[$5 + ($proxyId * 36 | 0) + 12 >> 2]) {
  $$0 = 0;
  return $$0 | 0;
 }
 __ZN13b2DynamicTree10RemoveLeafEi($this, $proxyId);
 $28 = $aabb;
 $34 = +HEAPF32[$28 >> 2];
 $35 = +HEAPF32[$28 + 4 >> 2];
 $37 = $aabb + 8 | 0;
 $43 = +HEAPF32[$37 >> 2];
 $45 = $34 + -.10000000149011612;
 $46 = $35 + -.10000000149011612;
 $47 = $43 + .10000000149011612;
 $48 = +HEAPF32[$37 + 4 >> 2] + .10000000149011612;
 $50 = +HEAPF32[$displacement >> 2] * 2.0;
 $53 = +HEAPF32[$displacement + 4 >> 2] * 2.0;
 if ($50 < 0.0) {
  $63 = $45 + $50;
  $72 = $47;
 } else {
  $63 = $45;
  $72 = $50 + $47;
 }
 if ($53 < 0.0) {
  $65 = $46 + $53;
  $74 = $48;
 } else {
  $65 = $46;
  $74 = $53 + $48;
 }
 $60 = HEAP32[$4 >> 2] | 0;
 $62 = +$63;
 $64 = +$65;
 $66 = $60 + ($proxyId * 36 | 0) | 0;
 HEAPF32[$66 >> 2] = $62;
 HEAPF32[$66 + 4 >> 2] = $64;
 $71 = +$72;
 $73 = +$74;
 $75 = $60 + ($proxyId * 36 | 0) + 8 | 0;
 HEAPF32[$75 >> 2] = $71;
 HEAPF32[$75 + 4 >> 2] = $73;
 __ZN13b2DynamicTree10InsertLeafEi($this, $proxyId);
 $$0 = 1;
 return $$0 | 0;
}

function __ZN12b2MouseJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $11 = 0.0, $12 = 0.0, $14 = 0.0, $16 = 0.0, $19 = 0.0, $2 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $34 = 0, $35 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $5 = 0, $54 = 0.0, $55 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $68 = 0.0, $71 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $80 = 0.0, $81 = 0.0, $83 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0;
 $0 = $this + 116 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $data + 28 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $3 + ($1 * 12 | 0) | 0;
 $5 = $4;
 $11 = +HEAPF32[$5 >> 2];
 $12 = +HEAPF32[$5 + 4 >> 2];
 $14 = +HEAPF32[$3 + ($1 * 12 | 0) + 8 >> 2];
 $16 = +HEAPF32[$this + 124 >> 2];
 $19 = +HEAPF32[$this + 120 >> 2];
 $30 = +HEAPF32[$this + 108 >> 2];
 $31 = $this + 96 | 0;
 $32 = +HEAPF32[$31 >> 2];
 $34 = $this + 100 | 0;
 $35 = +HEAPF32[$34 >> 2];
 $39 = -($11 - $14 * $16 + +HEAPF32[$this + 160 >> 2] + $30 * $32);
 $40 = -($12 + $14 * $19 + +HEAPF32[$this + 164 >> 2] + $30 * $35);
 $54 = +HEAPF32[$this + 148 >> 2] * $39 + +HEAPF32[$this + 156 >> 2] * $40;
 $55 = $31;
 $61 = +HEAPF32[$55 >> 2];
 $62 = +HEAPF32[$55 + 4 >> 2];
 $63 = $32 + (+HEAPF32[$this + 144 >> 2] * $39 + +HEAPF32[$this + 152 >> 2] * $40);
 HEAPF32[$31 >> 2] = $63;
 $64 = $54 + $35;
 HEAPF32[$34 >> 2] = $64;
 $68 = +HEAPF32[$data >> 2] * +HEAPF32[$this + 104 >> 2];
 $71 = $64 * $64 + $63 * $63;
 if ($71 > $68 * $68) {
  $75 = $68 / +Math_sqrt(+$71);
  $76 = $63 * $75;
  HEAPF32[$31 >> 2] = $76;
  $77 = $75 * $64;
  HEAPF32[$34 >> 2] = $77;
  $79 = $76;
  $81 = $77;
 } else {
  $79 = $63;
  $81 = $64;
 }
 $78 = $79 - $61;
 $80 = $81 - $62;
 $83 = +HEAPF32[$this + 136 >> 2];
 $94 = $14 + +HEAPF32[$this + 140 >> 2] * ($80 * $19 - $78 * $16);
 $95 = +($11 + $78 * $83);
 $96 = +($12 + $80 * $83);
 $97 = $4;
 HEAPF32[$97 >> 2] = $95;
 HEAPF32[$97 + 4 >> 2] = $96;
 HEAPF32[(HEAP32[$2 >> 2] | 0) + ((HEAP32[$0 >> 2] | 0) * 12 | 0) + 8 >> 2] = $94;
 return;
}

function _varinfo($L, $o) {
 $L = $L | 0;
 $o = $o | 0;
 var $$0$i$i = 0, $$idx$val$idx$val = 0, $1 = 0, $10 = 0, $11 = 0, $20 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $39 = 0, $49 = 0, $51 = 0, $53 = 0, $7 = 0, $9 = 0, $i$02$i = 0, $kind$03 = 0, $name = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $name = sp + 8 | 0;
 HEAP32[$name >> 2] = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 if (!(HEAP8[$1 + 34 >> 0] & 2)) {
  $53 = 62584;
  STACKTOP = sp;
  return $53 | 0;
 }
 $$idx$val$idx$val = HEAP32[HEAP32[$1 >> 2] >> 2] | 0;
 $7 = HEAP8[$$idx$val$idx$val + 6 >> 0] | 0;
 L4 : do if (!($7 << 24 >> 24)) label = 7; else {
  $9 = $$idx$val$idx$val + 16 | 0;
  $10 = $7 & 255;
  $i$02$i = 0;
  while (1) {
   $11 = $i$02$i + 1 | 0;
   if ((HEAP32[HEAP32[$9 + ($i$02$i << 2) >> 2] >> 2] | 0) == ($o | 0)) break;
   if (($11 | 0) < ($10 | 0)) $i$02$i = $11; else {
    label = 7;
    break L4;
   }
  }
  $20 = HEAP32[(HEAP32[(HEAP32[$$idx$val$idx$val + 12 >> 2] | 0) + 64 >> 2] | 0) + ($i$02$i << 3) >> 2] | 0;
  $$0$i$i = ($20 | 0) == 0 ? 59048 : $20 + 24 | 0;
  HEAP32[$name >> 2] = $$0$i$i;
  $51 = $$0$i$i;
  $kind$03 = 56064;
 } while (0);
 do if ((label | 0) == 7) {
  $24 = HEAP32[$1 + 16 >> 2] | 0;
  $26 = $24;
  $27 = $o - $26 | 0;
  $28 = $27 >> 3;
  if (($27 | 0) <= -8) {
   $53 = 62584;
   STACKTOP = sp;
   return $53 | 0;
  }
  if (!(($24 + ($28 << 3) | 0) == ($o | 0) ? ($28 | 0) < ((HEAP32[$1 + 4 >> 2] | 0) - $26 >> 3 | 0) : 0)) {
   $53 = 62584;
   STACKTOP = sp;
   return $53 | 0;
  }
  $39 = HEAP32[$$idx$val$idx$val + 12 >> 2] | 0;
  $49 = _getobjname($39, ((HEAP32[$1 + 20 >> 2] | 0) - (HEAP32[$39 + 48 >> 2] | 0) >> 2) + -1 | 0, $28, $name) | 0;
  if (!$49) {
   $53 = 62584;
   STACKTOP = sp;
   return $53 | 0;
  } else {
   $51 = HEAP32[$name >> 2] | 0;
   $kind$03 = $49;
   break;
  }
 } while (0);
 HEAP32[$vararg_buffer >> 2] = $kind$03;
 HEAP32[$vararg_buffer + 4 >> 2] = $51;
 $53 = _luaO_pushfstring($L, 56032, $vararg_buffer) | 0;
 STACKTOP = sp;
 return $53 | 0;
}

function _singlevaraux($fs, $n, $var, $base) {
 $fs = $fs | 0;
 $n = $n | 0;
 $var = $var | 0;
 $base = $base | 0;
 var $$0 = 0, $23 = 0, $25 = 0, $27 = 0, $28 = 0, $bl$0$in$i = 0, $fs$idx$val$i = 0, $fs$idx1$i = 0, $fs$idx2$i = 0, $i$0$in$i = 0, $i$01$i = 0, $idx$0 = 0, label = 0, $i$0$in$i$looptemp = 0;
 if (!$fs) {
  $$0 = 0;
  return $$0 | 0;
 }
 $fs$idx1$i = $fs + 8 | 0;
 $fs$idx2$i = $fs + 36 | 0;
 $i$0$in$i = HEAPU8[$fs + 42 >> 0] | 0;
 while (1) {
  $i$0$in$i$looptemp = $i$0$in$i;
  $i$0$in$i = $i$0$in$i + -1 | 0;
  $fs$idx$val$i = HEAP32[$fs >> 2] | 0;
  if (($i$0$in$i$looptemp | 0) <= 0) break;
  if ((HEAP32[(HEAP32[$fs$idx$val$i + 60 >> 2] | 0) + ((HEAP16[(HEAP32[HEAP32[(HEAP32[$fs$idx1$i >> 2] | 0) + 48 >> 2] >> 2] | 0) + ((HEAP32[$fs$idx2$i >> 2] | 0) + $i$0$in$i << 1) >> 1] | 0) * 12 | 0) >> 2] | 0) == ($n | 0)) {
   label = 5;
   break;
  }
 }
 if ((label | 0) == 5) {
  HEAP32[$var + 8 >> 2] = -1;
  HEAP32[$var + 12 >> 2] = -1;
  HEAP32[$var >> 2] = 8;
  HEAP32[$var + 4 >> 2] = $i$0$in$i;
  if ($base) {
   $$0 = 8;
   return $$0 | 0;
  }
  $bl$0$in$i = $fs + 12 | 0;
  do $bl$0$in$i = HEAP32[$bl$0$in$i >> 2] | 0; while ((HEAPU8[$bl$0$in$i + 12 >> 0] | 0) > ($i$0$in$i | 0));
  HEAP8[$bl$0$in$i + 13 >> 0] = 1;
  $$0 = 8;
  return $$0 | 0;
 }
 $23 = HEAP32[$fs$idx$val$i + 64 >> 2] | 0;
 $25 = HEAP8[$fs + 43 >> 0] | 0;
 L17 : do if (!($25 << 24 >> 24)) label = 14; else {
  $27 = $25 & 255;
  $i$01$i = 0;
  while (1) {
   $28 = $i$01$i + 1 | 0;
   if ((HEAP32[$23 + ($i$01$i << 3) >> 2] | 0) == ($n | 0)) break;
   if (($28 | 0) < ($27 | 0)) $i$01$i = $28; else {
    label = 14;
    break L17;
   }
  }
  if (($i$01$i | 0) < 0) label = 14; else $idx$0 = $i$01$i;
 } while (0);
 do if ((label | 0) == 14) if (!(_singlevaraux(HEAP32[$fs + 4 >> 2] | 0, $n, $var, 0) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 } else {
  $idx$0 = _newupvalue($fs, $n, $var) | 0;
  break;
 } while (0);
 HEAP32[$var + 8 >> 2] = -1;
 HEAP32[$var + 12 >> 2] = -1;
 HEAP32[$var >> 2] = 9;
 HEAP32[$var + 4 >> 2] = $idx$0;
 $$0 = 9;
 return $$0 | 0;
}

function _png_colorspace_set_sRGB($png_ptr, $colorspace, $intent) {
 $png_ptr = $png_ptr | 0;
 $colorspace = $colorspace | 0;
 $intent = $intent | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $20 = 0, $22 = 0, $28 = 0.0, $34 = 0, $35 = 0, $36 = 0, dest = 0, src = 0, stop = 0;
 $0 = $colorspace + 74 | 0;
 $1 = HEAP16[$0 >> 1] | 0;
 $2 = $1 & 65535;
 if ($2 & 32768) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ($intent >>> 0 > 3) {
  _png_icc_profile_error($png_ptr, $colorspace, 72168, $intent, 72176);
  $$0 = 0;
  return $$0 | 0;
 }
 if ($2 & 4) if ((HEAPU16[$colorspace + 72 >> 1] | 0 | 0) != ($intent | 0)) {
  _png_icc_profile_error($png_ptr, $colorspace, 72168, $intent, 72208);
  $$0 = 0;
  return $$0 | 0;
 }
 if ($2 & 32) {
  _png_benign_error($png_ptr, 72240);
  $$0 = 0;
  return $$0 | 0;
 }
 if (!($2 & 2)) $20 = $1; else if (!(_png_colorspace_endpoints_match(72280, $colorspace + 4 | 0, 100) | 0)) {
  _png_chunk_report($png_ptr, 72312, 2);
  $20 = HEAP16[$0 >> 1] | 0;
 } else $20 = $1;
 do if (!($20 & 1)) $35 = $20; else {
  $22 = HEAP32[$colorspace >> 2] | 0;
  if ($22) {
   $28 = +Math_floor(+(+($22 | 0) * 1.0e5 / 45455.0 + .5));
   if ($28 <= 2147483647.0 & $28 >= -2147483648.0) if ((~~$28 + -95e3 | 0) >>> 0 <= 1e4) {
    $35 = $20;
    break;
   }
  }
  _png_chunk_report($png_ptr, 74088, 2);
  $35 = HEAP16[$0 >> 1] | 0;
 } while (0);
 HEAP16[$colorspace + 72 >> 1] = $intent;
 $34 = $35 & 65535;
 $36 = $colorspace + 4 | 0;
 HEAP32[$36 + 0 >> 2] = HEAP32[18070];
 HEAP32[$36 + 4 >> 2] = HEAP32[18071];
 HEAP32[$36 + 8 >> 2] = HEAP32[18072];
 HEAP32[$36 + 12 >> 2] = HEAP32[18073];
 HEAP32[$36 + 16 >> 2] = HEAP32[18074];
 HEAP32[$36 + 20 >> 2] = HEAP32[18075];
 HEAP32[$36 + 24 >> 2] = HEAP32[18076];
 HEAP32[$36 + 28 >> 2] = HEAP32[18077];
 dest = $colorspace + 36 | 0;
 src = 72128 | 0;
 stop = dest + 36 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$colorspace >> 2] = 45455;
 HEAP16[$0 >> 1] = $34 | 231;
 $$0 = 1;
 return $$0 | 0;
}

function _png_destroy_gamma_table($png_ptr) {
 $png_ptr = $png_ptr | 0;
 var $$lcssa = 0, $$lcssa2 = 0, $$lcssa8 = 0, $0 = 0, $11 = 0, $14 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $25 = 0, $28 = 0, $3 = 0, $31 = 0, $32 = 0, $33 = 0, $38 = 0, $41 = 0, $44 = 0, $8 = 0, $i$09 = 0, $i1$03 = 0, $i3$01 = 0;
 $0 = $png_ptr + 492 | 0;
 _png_free($png_ptr, HEAP32[$0 >> 2] | 0);
 HEAP32[$0 >> 2] = 0;
 $2 = $png_ptr + 496 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if ($3) {
  $8 = 1 << 8 - (HEAP32[$png_ptr + 484 >> 2] | 0);
  if (($8 | 0) > 0) {
   $11 = $3;
   $i$09 = 0;
   while (1) {
    _png_free($png_ptr, HEAP32[$11 + ($i$09 << 2) >> 2] | 0);
    $i$09 = $i$09 + 1 | 0;
    $14 = HEAP32[$2 >> 2] | 0;
    if (($i$09 | 0) == ($8 | 0)) {
     $$lcssa8 = $14;
     break;
    } else $11 = $14;
   }
  } else $$lcssa8 = $3;
  _png_free($png_ptr, $$lcssa8);
  HEAP32[$2 >> 2] = 0;
 }
 $15 = $png_ptr + 500 | 0;
 _png_free($png_ptr, HEAP32[$15 >> 2] | 0);
 HEAP32[$15 >> 2] = 0;
 $17 = $png_ptr + 504 | 0;
 _png_free($png_ptr, HEAP32[$17 >> 2] | 0);
 HEAP32[$17 >> 2] = 0;
 $19 = $png_ptr + 508 | 0;
 $20 = HEAP32[$19 >> 2] | 0;
 if ($20) {
  $25 = 1 << 8 - (HEAP32[$png_ptr + 484 >> 2] | 0);
  if (($25 | 0) > 0) {
   $28 = $20;
   $i1$03 = 0;
   while (1) {
    _png_free($png_ptr, HEAP32[$28 + ($i1$03 << 2) >> 2] | 0);
    $i1$03 = $i1$03 + 1 | 0;
    $31 = HEAP32[$19 >> 2] | 0;
    if (($i1$03 | 0) == ($25 | 0)) {
     $$lcssa2 = $31;
     break;
    } else $28 = $31;
   }
  } else $$lcssa2 = $20;
  _png_free($png_ptr, $$lcssa2);
  HEAP32[$19 >> 2] = 0;
 }
 $32 = $png_ptr + 512 | 0;
 $33 = HEAP32[$32 >> 2] | 0;
 if (!$33) return;
 $38 = 1 << 8 - (HEAP32[$png_ptr + 484 >> 2] | 0);
 if (($38 | 0) > 0) {
  $41 = $33;
  $i3$01 = 0;
  while (1) {
   _png_free($png_ptr, HEAP32[$41 + ($i3$01 << 2) >> 2] | 0);
   $i3$01 = $i3$01 + 1 | 0;
   $44 = HEAP32[$32 >> 2] | 0;
   if (($i3$01 | 0) == ($38 | 0)) {
    $$lcssa = $44;
    break;
   } else $41 = $44;
  }
 } else $$lcssa = $33;
 _png_free($png_ptr, $$lcssa);
 HEAP32[$32 >> 2] = 0;
 return;
}

function _stb_vorbis_get_samples_short_interleaved($f, $channels, $buffer, $num_shorts) {
 $f = $f | 0;
 $channels = $channels | 0;
 $buffer = $buffer | 0;
 $num_shorts = $num_shorts | 0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $14 = 0, $16 = 0, $2 = 0, $23 = 0, $25 = 0, $3 = 0, $4 = 0, $7 = 0, $8 = 0, $i$01$i = 0, $left$i = 0, $len$i = 0, $n$0 = 0, $n$1 = 0, $right$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $len$i = sp + 8 | 0;
 $right$i = sp + 4 | 0;
 $left$i = sp;
 $0 = ($num_shorts | 0) / ($channels | 0) | 0;
 $1 = $f + 4 | 0;
 $2 = $f + 1444 | 0;
 $3 = $f + 1440 | 0;
 $4 = $f + 816 | 0;
 $$0 = $buffer;
 $n$0 = 0;
 while (1) {
  if (($n$0 | 0) >= ($0 | 0)) {
   $n$1 = $n$0;
   label = 11;
   break;
  }
  $7 = HEAP32[$3 >> 2] | 0;
  $8 = (HEAP32[$2 >> 2] | 0) - $7 | 0;
  $$ = ($8 + $n$0 | 0) < ($0 | 0) ? $8 : $0 - $n$0 | 0;
  if (!$$) $16 = $7; else {
   _convert_channels_short_interleaved($channels, $$0, HEAP32[$1 >> 2] | 0, $4, $7, $$);
   $16 = HEAP32[$3 >> 2] | 0;
  }
  $14 = $$ + $n$0 | 0;
  HEAP32[$3 >> 2] = $16 + $$;
  if (($14 | 0) == ($0 | 0)) {
   $n$1 = $0;
   label = 11;
   break;
  }
  $$0 = $$0 + ((Math_imul($$, $channels) | 0) << 1) | 0;
  if (!(_vorbis_decode_packet($f, $len$i, $left$i, $right$i) | 0)) {
   label = 7;
   break;
  }
  $23 = HEAP32[$left$i >> 2] | 0;
  $25 = _vorbis_finish_frame($f, HEAP32[$len$i >> 2] | 0, $23, HEAP32[$right$i >> 2] | 0) | 0;
  HEAP32[$len$i >> 2] = $25;
  if ((HEAP32[$1 >> 2] | 0) > 0) {
   $i$01$i = 0;
   do {
    HEAP32[$f + ($i$01$i << 2) + 880 >> 2] = (HEAP32[$f + ($i$01$i << 2) + 816 >> 2] | 0) + ($23 << 2);
    $i$01$i = $i$01$i + 1 | 0;
   } while (($i$01$i | 0) < (HEAP32[$1 >> 2] | 0));
  }
  HEAP32[$3 >> 2] = $23;
  HEAP32[$2 >> 2] = $25 + $23;
  if (!$25) {
   $n$1 = $14;
   label = 11;
   break;
  } else $n$0 = $14;
 }
 if ((label | 0) == 7) {
  HEAP32[$2 >> 2] = 0;
  HEAP32[$3 >> 2] = 0;
  $n$1 = $14;
  STACKTOP = sp;
  return $n$1 | 0;
 } else if ((label | 0) == 11) {
  STACKTOP = sp;
  return $n$1 | 0;
 }
 return 0;
}

function _lua_compare($L, $index1, $index2, $op) {
 $L = $L | 0;
 $index1 = $index1 | 0;
 $index2 = $index2 | 0;
 $op = $op | 0;
 var $$0$i = 0, $$0$i2 = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $31 = 0, $4 = 0, $43 = 0, $44 = 0, $48 = 0, $i$0 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($index1 | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($index1 << 3) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 59168;
 } else {
  if (($index1 | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($index1 << 3) | 0;
   break;
  }
  if (($index1 | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $16 = -1001e3 - $index1 | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 4 >> 2] | 0) == 22) $$0$i = 59168; else {
   $21 = HEAP32[$17 >> 2] | 0;
   if (($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0)) $$0$i = 59168; else $$0$i = $21 + 16 + ($16 + -1 << 3) | 0;
  }
 } while (0);
 do if (($index2 | 0) > 0) {
  $31 = (HEAP32[$1 >> 2] | 0) + ($index2 << 3) | 0;
  $$0$i2 = $31 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $31 : 59168;
 } else {
  if (($index2 | 0) >= -1000999) {
   $$0$i2 = (HEAP32[$L + 8 >> 2] | 0) + ($index2 << 3) | 0;
   break;
  }
  if (($index2 | 0) == -1001e3) {
   $$0$i2 = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $43 = -1001e3 - $index2 | 0;
  $44 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$44 + 4 >> 2] | 0) == 22) {
   $i$0 = 0;
   return $i$0 | 0;
  }
  $48 = HEAP32[$44 >> 2] | 0;
  if (($43 | 0) > (HEAPU8[$48 + 6 >> 0] | 0 | 0)) {
   $i$0 = 0;
   return $i$0 | 0;
  } else {
   $$0$i2 = $48 + 16 + ($43 + -1 << 3) | 0;
   break;
  }
 } while (0);
 if (($$0$i | 0) == 59168 | ($$0$i2 | 0) == 59168) {
  $i$0 = 0;
  return $i$0 | 0;
 }
 if (($op | 0) == 1) {
  $i$0 = _luaV_lessthan($L, $$0$i, $$0$i2) | 0;
  return $i$0 | 0;
 } else if (($op | 0) == 2) {
  $i$0 = _luaV_lessequal($L, $$0$i, $$0$i2) | 0;
  return $i$0 | 0;
 } else if (!$op) {
  $i$0 = _luaV_equalobj($L, $$0$i, $$0$i2) | 0;
  return $i$0 | 0;
 } else {
  $i$0 = 0;
  return $i$0 | 0;
 }
 return 0;
}

function _png_colorspace_set_chromaticities($png_ptr, $colorspace, $xy, $preferred) {
 $png_ptr = $png_ptr | 0;
 $colorspace = $colorspace | 0;
 $xy = $xy | 0;
 $preferred = $preferred | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $15 = 0, $18 = 0, $22 = 0, $27 = 0, $3 = 0, $XYZ = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $XYZ = sp;
 $0 = _png_colorspace_check_xy($XYZ, $xy) | 0;
 if (($0 | 0) == 1) {
  $22 = $colorspace + 74 | 0;
  HEAP16[$22 >> 1] = HEAPU16[$22 >> 1] | 0 | 32768;
  _png_benign_error($png_ptr, 72064);
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else if (!$0) {
  $1 = $colorspace + 74 | 0;
  $3 = HEAPU16[$1 >> 1] | 0;
  if ($3 & 32768) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  do if (!(($preferred | 0) >= 2 | ($3 & 2 | 0) == 0)) if (!(_png_colorspace_endpoints_match($xy, $colorspace + 4 | 0, 100) | 0)) {
   HEAP16[$1 >> 1] = $3 | 32768;
   _png_benign_error($png_ptr, 74056);
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else {
   if (!$preferred) $$0 = 1; else break;
   STACKTOP = sp;
   return $$0 | 0;
  } while (0);
  $15 = $colorspace + 4 | 0;
  HEAP32[$15 + 0 >> 2] = HEAP32[$xy + 0 >> 2];
  HEAP32[$15 + 4 >> 2] = HEAP32[$xy + 4 >> 2];
  HEAP32[$15 + 8 >> 2] = HEAP32[$xy + 8 >> 2];
  HEAP32[$15 + 12 >> 2] = HEAP32[$xy + 12 >> 2];
  HEAP32[$15 + 16 >> 2] = HEAP32[$xy + 16 >> 2];
  HEAP32[$15 + 20 >> 2] = HEAP32[$xy + 20 >> 2];
  HEAP32[$15 + 24 >> 2] = HEAP32[$xy + 24 >> 2];
  HEAP32[$15 + 28 >> 2] = HEAP32[$xy + 28 >> 2];
  dest = $colorspace + 36 | 0;
  src = $XYZ + 0 | 0;
  stop = dest + 36 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $18 = (_png_colorspace_endpoints_match($xy, 72280, 1e3) | 0) == 0;
  HEAP16[$1 >> 1] = $18 ? $3 & 65469 | 2 : $3 | 66;
  $$0 = 2;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $27 = $colorspace + 74 | 0;
  HEAP16[$27 >> 1] = HEAPU16[$27 >> 1] | 0 | 32768;
  _png_error($png_ptr, 72088);
 }
 return 0;
}

function _luaB_tonumber($L) {
 $L = $L | 0;
 var $$0$i = 0, $$01$i = 0, $$1$i = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $22 = 0, $23 = 0, $28 = 0, $32 = 0, $38 = 0, $4 = 0, $45 = 0, $6 = 0, $l = 0, $l1 = 0, $n$0$i = 0, $neg$0$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $l = sp + 4 | 0;
 $l1 = sp;
 if ((_lua_type($L, 2) | 0) < 1) {
  _luaL_checkany($L, 1);
  if ((_lua_type($L, 1) | 0) == 3) {
   _lua_settop($L, 1);
   STACKTOP = sp;
   return 1;
  }
  $4 = _lua_tolstring($L, 1, $l) | 0;
  if ($4) {
   $6 = _lua_stringtonumber($L, $4) | 0;
   if (($6 | 0) == ((HEAP32[$l >> 2] | 0) + 1 | 0)) {
    STACKTOP = sp;
    return 1;
   }
  }
 } else {
  $10 = _luaL_checkinteger($L, 2) | 0;
  _luaL_checktype($L, 1, 4);
  $11 = _luaL_checklstring($L, 1, $l1) | 0;
  if (($10 + -2 | 0) >>> 0 >= 35) _luaL_argerror($L, 2, 64704) | 0;
  $13 = _strspn($11, 64728) | 0;
  $14 = $11 + $13 | 0;
  $15 = HEAP8[$14 >> 0] | 0;
  if ($15 << 24 >> 24 == 43) {
   $$01$i = $11 + ($13 + 1) | 0;
   $neg$0$i = 0;
  } else if ($15 << 24 >> 24 == 45) {
   $$01$i = $11 + ($13 + 1) | 0;
   $neg$0$i = 1;
  } else {
   $$01$i = $14;
   $neg$0$i = 0;
  }
  L17 : do if (!(_isalnum(HEAPU8[$$01$i >> 0] | 0) | 0)) {
   $$0$i = 0;
   $45 = 0;
  } else {
   $$1$i = $$01$i;
   $n$0$i = 0;
   while (1) {
    $22 = HEAP8[$$1$i >> 0] | 0;
    $23 = $22 & 255;
    if (($23 + -48 | 0) >>> 0 < 10) $28 = ($22 << 24 >> 24) + -48 | 0; else $28 = (_toupper($23) | 0) + -55 | 0;
    if (($28 | 0) >= ($10 | 0)) {
     $$0$i = 0;
     $45 = 0;
     break L17;
    }
    $n$0$i = $28 + (Math_imul($n$0$i, $10) | 0) | 0;
    $32 = $$1$i + 1 | 0;
    if (!(_isalnum(HEAPU8[$32 >> 0] | 0) | 0)) break; else $$1$i = $32;
   }
   $38 = $$1$i + ((_strspn($32, 64728) | 0) + 1) | 0;
   $$0$i = $38;
   $45 = ($neg$0$i | 0) != 0 ? 0 - $n$0$i | 0 : $n$0$i;
  } while (0);
  if (($$0$i | 0) == ($11 + (HEAP32[$l1 >> 2] | 0) | 0)) {
   _lua_pushinteger($L, $45);
   STACKTOP = sp;
   return 1;
  }
 }
 _lua_pushnil($L);
 STACKTOP = sp;
 return 1;
}

function _stb_vorbis_open_file_section($file, $close_on_free, $error, $alloc, $length) {
 $file = $file | 0;
 $close_on_free = $close_on_free | 0;
 $error = $error | 0;
 $alloc = $alloc | 0;
 $length = $length | 0;
 var $$0 = 0, $$0$i$i = 0, $14 = 0, $17 = 0, $2 = 0, $21 = 0, $28 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $7 = 0, $8 = 0, $left$i = 0, $len$i = 0, $p = 0, $right$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1472 | 0;
 $len$i = sp + 1456 | 0;
 $right$i = sp + 1452 | 0;
 $left$i = sp + 1448 | 0;
 $p = sp;
 _memset($p | 0, 0, 1448) | 0;
 if ($alloc) {
  $2 = $alloc;
  $7 = HEAP32[$2 + 4 >> 2] | 0;
  $8 = $p + 96 | 0;
  HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$8 + 4 >> 2] = $7;
  $14 = $7 + 3 & -4;
  HEAP32[$p + 100 >> 2] = $14;
  HEAP32[$p + 108 >> 2] = $14;
 }
 HEAP32[$p + 112 >> 2] = 0;
 $17 = $p + 116 | 0;
 HEAP32[$17 >> 2] = 0;
 HEAP32[$p + 32 >> 2] = 0;
 HEAP32[$p + 140 >> 2] = 0;
 HEAP32[$p + 1436 >> 2] = -1;
 $21 = $p + 28 | 0;
 HEAP32[$21 >> 2] = 0;
 HEAP32[$p + 20 >> 2] = $file;
 HEAP32[$p + 24 >> 2] = _ftell($file | 0) | 0;
 HEAP32[$p + 44 >> 2] = $length;
 HEAP32[$21 >> 2] = $close_on_free;
 do if (_start_decoder($p) | 0) {
  $28 = $p + 8 | 0;
  HEAP32[$28 >> 2] = (HEAP32[$28 >> 2] | 0) + 1448;
  $32 = HEAP32[$p + 96 >> 2] | 0;
  if (!$32) $$0$i$i = _malloc(1448) | 0; else {
   $34 = $p + 104 | 0;
   $35 = HEAP32[$34 >> 2] | 0;
   $36 = $35 + 1448 | 0;
   if (($36 | 0) > (HEAP32[$p + 108 >> 2] | 0)) break;
   HEAP32[$34 >> 2] = $36;
   $$0$i$i = $32 + $35 | 0;
  }
  if ($$0$i$i) {
   _memcpy($$0$i$i | 0, $p | 0, 1448) | 0;
   if (!(_vorbis_decode_packet($$0$i$i, $len$i, $left$i, $right$i) | 0)) {
    $$0 = $$0$i$i;
    STACKTOP = sp;
    return $$0 | 0;
   }
   _vorbis_finish_frame($$0$i$i, HEAP32[$len$i >> 2] | 0, HEAP32[$left$i >> 2] | 0, HEAP32[$right$i >> 2] | 0) | 0;
   $$0 = $$0$i$i;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 if ($error) HEAP32[$error >> 2] = HEAP32[$17 >> 2];
 _vorbis_deinit($p);
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _addk($fs, $key, $v) {
 $fs = $fs | 0;
 $key = $key | 0;
 $v = $v | 0;
 var $$0 = 0, $$pre$phiZ2D = 0, $1 = 0, $11 = 0, $12 = 0, $16 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $36 = 0, $38 = 0, $4 = 0, $44 = 0, $49 = 0, $50 = 0, $64 = 0, $7 = 0, $8 = 0, $oldsize$01 = 0;
 $1 = HEAP32[$fs + 8 >> 2] | 0;
 $3 = HEAP32[$1 + 32 >> 2] | 0;
 $4 = HEAP32[$fs >> 2] | 0;
 $7 = _luaH_set($3, HEAP32[$1 + 44 >> 2] | 0, $key) | 0;
 $8 = $7 + 4 | 0;
 if ((HEAP32[$8 >> 2] | 0) == 19) {
  $11 = HEAP32[$7 >> 2] | 0;
  $12 = $fs + 28 | 0;
  if (($11 | 0) < (HEAP32[$12 >> 2] | 0)) {
   $16 = HEAP32[$4 + 44 >> 2] | 0;
   if (!((HEAP32[$v + 4 >> 2] ^ HEAP32[$16 + ($11 << 3) + 4 >> 2]) & 63)) if (!(_luaV_equalobj(0, $16 + ($11 << 3) | 0, $v) | 0)) $$pre$phiZ2D = $12; else {
    $$0 = $11;
    return $$0 | 0;
   } else $$pre$phiZ2D = $12;
  } else $$pre$phiZ2D = $12;
 } else $$pre$phiZ2D = $fs + 28 | 0;
 $27 = $4 + 16 | 0;
 $28 = HEAP32[$27 >> 2] | 0;
 $29 = HEAP32[$$pre$phiZ2D >> 2] | 0;
 HEAP32[$7 >> 2] = $29;
 HEAP32[$8 >> 2] = 19;
 $30 = HEAP32[$27 >> 2] | 0;
 if (($29 | 0) < ($30 | 0)) $36 = $30; else {
  $32 = $4 + 44 | 0;
  HEAP32[$32 >> 2] = _luaM_growaux_($3, HEAP32[$32 >> 2] | 0, $27, 8, 67108863, 65552) | 0;
  $36 = HEAP32[$27 >> 2] | 0;
 }
 $38 = HEAP32[$4 + 44 >> 2] | 0;
 if (($28 | 0) < ($36 | 0)) {
  $oldsize$01 = $28;
  do {
   HEAP32[$38 + ($oldsize$01 << 3) + 4 >> 2] = 0;
   $oldsize$01 = $oldsize$01 + 1 | 0;
  } while (($oldsize$01 | 0) < (HEAP32[$27 >> 2] | 0));
 }
 $44 = $v;
 $49 = HEAP32[$44 + 4 >> 2] | 0;
 $50 = $38 + ($29 << 3) | 0;
 HEAP32[$50 >> 2] = HEAP32[$44 >> 2];
 HEAP32[$50 + 4 >> 2] = $49;
 HEAP32[$$pre$phiZ2D >> 2] = (HEAP32[$$pre$phiZ2D >> 2] | 0) + 1;
 if (!(HEAP32[$v + 4 >> 2] & 64)) {
  $$0 = $29;
  return $$0 | 0;
 }
 if (!(HEAP8[$4 + 5 >> 0] & 4)) {
  $$0 = $29;
  return $$0 | 0;
 }
 $64 = HEAP32[$v >> 2] | 0;
 if (!(HEAP8[$64 + 5 >> 0] & 3)) {
  $$0 = $29;
  return $$0 | 0;
 }
 _luaC_barrier_($3, $4, $64);
 $$0 = $29;
 return $$0 | 0;
}

function __ZNK9b2Simplex16GetWitnessPointsEP6b2Vec2S1_($this, $pA, $pB) {
 $this = $this | 0;
 $pA = $pA | 0;
 $pB = $pB | 0;
 var $1 = 0, $101 = 0, $13 = 0, $18 = 0, $19 = 0, $2 = 0, $23 = 0, $24 = 0.0, $30 = 0, $31 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $46 = 0.0, $53 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $69 = 0.0, $7 = 0, $76 = 0.0, $8 = 0, $86 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0;
 $1 = HEAP32[$this + 108 >> 2] | 0;
 if (($1 | 0) == 2) {
  $23 = $this + 24 | 0;
  $24 = +HEAPF32[$23 >> 2];
  $30 = $this + 60 | 0;
  $31 = +HEAPF32[$30 >> 2];
  $40 = +($24 * +HEAPF32[$this >> 2] + $31 * +HEAPF32[$this + 36 >> 2]);
  $41 = +($24 * +HEAPF32[$this + 4 >> 2] + $31 * +HEAPF32[$this + 40 >> 2]);
  $42 = $pA;
  HEAPF32[$42 >> 2] = $40;
  HEAPF32[$42 + 4 >> 2] = $41;
  $46 = +HEAPF32[$23 >> 2];
  $53 = +HEAPF32[$30 >> 2];
  $62 = +($46 * +HEAPF32[$this + 8 >> 2] + $53 * +HEAPF32[$this + 44 >> 2]);
  $63 = +($46 * +HEAPF32[$this + 12 >> 2] + $53 * +HEAPF32[$this + 48 >> 2]);
  $64 = $pB;
  HEAPF32[$64 >> 2] = $62;
  HEAPF32[$64 + 4 >> 2] = $63;
  return;
 } else if (($1 | 0) == 1) {
  $2 = $this;
  $7 = HEAP32[$2 + 4 >> 2] | 0;
  $8 = $pA;
  HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$8 + 4 >> 2] = $7;
  $13 = $this + 8 | 0;
  $18 = HEAP32[$13 + 4 >> 2] | 0;
  $19 = $pB;
  HEAP32[$19 >> 2] = HEAP32[$13 >> 2];
  HEAP32[$19 + 4 >> 2] = $18;
  return;
 } else if (($1 | 0) == 3) {
  $69 = +HEAPF32[$this + 24 >> 2];
  $76 = +HEAPF32[$this + 60 >> 2];
  $86 = +HEAPF32[$this + 96 >> 2];
  $95 = +($69 * +HEAPF32[$this >> 2] + $76 * +HEAPF32[$this + 36 >> 2] + $86 * +HEAPF32[$this + 72 >> 2]);
  $96 = +($69 * +HEAPF32[$this + 4 >> 2] + $76 * +HEAPF32[$this + 40 >> 2] + $86 * +HEAPF32[$this + 76 >> 2]);
  $97 = $pA;
  HEAPF32[$97 >> 2] = $95;
  HEAPF32[$97 + 4 >> 2] = $96;
  $101 = $pB;
  HEAPF32[$101 >> 2] = $95;
  HEAPF32[$101 + 4 >> 2] = $96;
  return;
 } else if (!$1) ___assert_fail(90768, 82176, 218, 82272); else ___assert_fail(90768, 82176, 237, 82272);
}

function _display_draw_triangle($x1, $y1, $x2, $y2, $x3, $y3) {
 $x1 = +$x1;
 $y1 = +$y1;
 $x2 = +$x2;
 $y2 = +$y2;
 $x3 = +$x3;
 $y3 = +$y3;
 var $0 = 0, $1 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $28 = 0, $3 = 0, $30 = 0, $32 = 0, $5 = 0, $7 = 0, $9 = 0;
 $0 = HEAP32[4530] | 0;
 $1 = HEAP32[4531] | 0;
 $3 = $1 & 255;
 $5 = ($1 & 65535) >>> 8 & 255;
 $7 = $1 >>> 16 & 255;
 $9 = $1 >>> 24 & 255;
 if (!(HEAP8[18140] | 0)) {
  _buffer_check_type($0, 3);
  _buffer_check_not_use_texture($0);
  _buffer_check_not_full($0);
  _buffer_push_vertex($0, $x1, $y1);
  _buffer_push_vertex($0, $x2, $y2);
  _buffer_push_vertex($0, $x3, $y3);
  _buffer_push_color($0, $3, $5, $7, $9);
  _buffer_push_color($0, $3, $5, $7, $9);
  _buffer_push_color($0, $3, $5, $7, $9);
  return;
 } else {
  $12 = $1 & 255;
  _buffer_check_type($0, 2);
  _buffer_check_not_use_texture($0);
  _buffer_check_not_full($0);
  _buffer_push_vertex($0, $x1, $y1);
  _buffer_push_vertex($0, $x2, $y2);
  _buffer_push_color($0, $12, $5, $7, $9);
  _buffer_push_color($0, $12, $5, $7, $9);
  $13 = HEAP32[4530] | 0;
  $14 = HEAP32[4531] | 0;
  $16 = $14 & 255;
  $18 = ($14 & 65535) >>> 8 & 255;
  $20 = $14 >>> 16 & 255;
  $22 = $14 >>> 24 & 255;
  _buffer_check_type($13, 2);
  _buffer_check_not_use_texture($13);
  _buffer_check_not_full($13);
  _buffer_push_vertex($13, $x2, $y2);
  _buffer_push_vertex($13, $x3, $y3);
  _buffer_push_color($13, $16, $18, $20, $22);
  _buffer_push_color($13, $16, $18, $20, $22);
  $23 = HEAP32[4530] | 0;
  $24 = HEAP32[4531] | 0;
  $26 = $24 & 255;
  $28 = ($24 & 65535) >>> 8 & 255;
  $30 = $24 >>> 16 & 255;
  $32 = $24 >>> 24 & 255;
  _buffer_check_type($23, 2);
  _buffer_check_not_use_texture($23);
  _buffer_check_not_full($23);
  _buffer_push_vertex($23, $x3, $y3);
  _buffer_push_vertex($23, $x1, $y1);
  _buffer_push_color($23, $26, $28, $30, $32);
  _buffer_push_color($23, $26, $28, $30, $32);
  return;
 }
}

function __ZN14b2PolygonShape8SetAsBoxEffRK6b2Vec2f($this, $hx, $hy, $center, $angle) {
 $this = $this | 0;
 $hx = +$hx;
 $hy = +$hy;
 $center = $center | 0;
 $angle = +$angle;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $20 = 0, $25 = 0, $26 = 0, $30 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0.0, $44 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $57 = 0, $58 = 0.0, $61 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $72 = 0, $i$04 = 0;
 $0 = $this + 148 | 0;
 HEAP32[$0 >> 2] = 4;
 $1 = -$hx;
 $2 = -$hy;
 HEAPF32[$this + 20 >> 2] = $1;
 HEAPF32[$this + 24 >> 2] = $2;
 HEAPF32[$this + 28 >> 2] = $hx;
 HEAPF32[$this + 32 >> 2] = $2;
 HEAPF32[$this + 36 >> 2] = $hx;
 HEAPF32[$this + 40 >> 2] = $hy;
 HEAPF32[$this + 44 >> 2] = $1;
 HEAPF32[$this + 48 >> 2] = $hy;
 HEAPF32[$this + 84 >> 2] = 0.0;
 HEAPF32[$this + 88 >> 2] = -1.0;
 HEAPF32[$this + 92 >> 2] = 1.0;
 HEAPF32[$this + 96 >> 2] = 0.0;
 HEAPF32[$this + 100 >> 2] = 0.0;
 HEAPF32[$this + 104 >> 2] = 1.0;
 HEAPF32[$this + 108 >> 2] = -1.0;
 HEAPF32[$this + 112 >> 2] = 0.0;
 $20 = $center;
 $25 = HEAP32[$20 + 4 >> 2] | 0;
 $26 = $this + 12 | 0;
 HEAP32[$26 >> 2] = HEAP32[$20 >> 2];
 HEAP32[$26 + 4 >> 2] = $25;
 $30 = $center;
 $36 = +HEAPF32[$30 >> 2];
 $37 = +HEAPF32[$30 + 4 >> 2];
 $38 = +Math_sin(+$angle);
 $39 = +Math_cos(+$angle);
 $44 = $2;
 $61 = -1.0;
 $i$04 = 0;
 while (1) {
  $40 = $this + ($i$04 << 3) + 20 | 0;
  $41 = +HEAPF32[$40 >> 2];
  $51 = +($36 + ($39 * $41 - $38 * $44));
  $52 = +($37 + ($38 * $41 + $39 * $44));
  $53 = $40;
  HEAPF32[$53 >> 2] = $51;
  HEAPF32[$53 + 4 >> 2] = $52;
  $57 = $this + ($i$04 << 3) + 84 | 0;
  $58 = +HEAPF32[$57 >> 2];
  $66 = +($39 * $58 - $38 * $61);
  $67 = +($38 * $58 + $39 * $61);
  $68 = $57;
  HEAPF32[$68 >> 2] = $66;
  HEAPF32[$68 + 4 >> 2] = $67;
  $72 = $i$04 + 1 | 0;
  if (($72 | 0) >= (HEAP32[$0 >> 2] | 0)) break;
  $44 = +HEAPF32[$this + ($72 << 3) + 24 >> 2];
  $61 = +HEAPF32[$this + ($72 << 3) + 88 >> 2];
  $i$04 = $72;
 }
 return;
}

function _surface_new($w, $h, $texw, $texh, $format, $pixels, $current_from, $current_on) {
 $w = $w | 0;
 $h = $h | 0;
 $texw = $texw | 0;
 $texh = $texh | 0;
 $format = $format | 0;
 $pixels = $pixels | 0;
 $current_from = $current_from | 0;
 $current_on = $current_on | 0;
 var $0 = 0, $1 = 0, $10 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp;
 $0 = _xcalloc(1, 48) | 0;
 $1 = $0 + 4 | 0;
 HEAP32[$1 >> 2] = $w;
 $2 = $0 + 8 | 0;
 HEAP32[$2 >> 2] = $h;
 $3 = $0 + 12 | 0;
 HEAP32[$3 >> 2] = $texw;
 $4 = $0 + 16 | 0;
 HEAP32[$4 >> 2] = $texh;
 $5 = $0 + 20 | 0;
 HEAP32[$5 >> 2] = 9729;
 $6 = $0 + 32 | 0;
 _glGenTextures(1, $6 | 0);
 _glBindTexture(3553, HEAP32[$6 >> 2] | 0);
 _glTexImage2D(3553, 0, $format | 0, HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0, 0, $format | 0, 5121, 0);
 $10 = ($pixels | 0) != 0;
 if ($10) _glTexSubImage2D(3553, 0, 0, 0, HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0, $format | 0, 5121, $pixels | 0);
 _glTexParameteri(3553, 10241, HEAP32[$5 >> 2] | 0);
 _glTexParameteri(3553, 10240, HEAP32[$5 >> 2] | 0);
 _glTexParameteri(3553, 10242, 33071);
 _glTexParameteri(3553, 10243, 33071);
 if (!$current_from) $18 = 0; else $18 = HEAP32[$current_from + 32 >> 2] | 0;
 _glBindTexture(3553, $18 | 0);
 if (!$10) {
  _surface_create_fbo($0);
  _glClearColor(0.0, 0.0, 0.0, 0.0);
  _glClear(16384);
  if (!$current_on) $22 = 0; else $22 = HEAP32[$current_on + 36 >> 2] | 0;
  _glBindFramebuffer(36160, $22 | 0);
 }
 $23 = _glGetError() | 0;
 if (!$23) {
  STACKTOP = sp;
  return $0 | 0;
 } else {
  $25 = _getGLError($23) | 0;
  HEAP32[$vararg_buffer >> 2] = 16096;
  HEAP32[$vararg_buffer + 4 >> 2] = 215;
  HEAP32[$vararg_buffer + 8 >> 2] = 16128;
  HEAP32[$vararg_buffer + 12 >> 2] = $25;
  HEAP32[$vararg_buffer + 16 >> 2] = 62584;
  _log_internal(3, 21800, 18624, $vararg_buffer);
  _exit(1);
 }
 return 0;
}

function _lua_gc($L, $what, $data) {
 $L = $L | 0;
 $what = $what | 0;
 $data = $data | 0;
 var $$ = 0, $0 = 0, $1 = 0, $16 = 0, $17 = 0, $22 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $res$0 = 0;
 $0 = $L + 12 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 do switch ($what | 0) {
 case 6:
  {
   $31 = $1 + 112 | 0;
   $32 = HEAP32[$31 >> 2] | 0;
   HEAP32[$31 >> 2] = $data;
   $res$0 = $32;
   return $res$0 | 0;
  }
 case 0:
  {
   HEAP8[$1 + 51 >> 0] = 0;
   $res$0 = 0;
   return $res$0 | 0;
  }
 case 1:
  {
   _luaE_setdebt($1, 0);
   HEAP8[$1 + 51 >> 0] = 1;
   $res$0 = 0;
   return $res$0 | 0;
  }
 case 4:
  {
   $res$0 = (HEAP32[$1 + 12 >> 2] | 0) + (HEAP32[$1 + 8 >> 2] | 0) & 1023;
   return $res$0 | 0;
  }
 case 5:
  {
   $16 = $1 + 51 | 0;
   $17 = HEAP8[$16 >> 0] | 0;
   HEAP8[$16 >> 0] = 1;
   if (!$data) {
    _luaE_setdebt($1, -2e3);
    _luaC_step($L);
    HEAP8[$16 >> 0] = $17;
    $28 = $1 + 49 | 0;
    $29 = HEAP8[$28 >> 0] | 0;
    $30 = $29 << 24 >> 24 == 7;
    $$ = $30 & 1;
    return $$ | 0;
   }
   $22 = (HEAP32[$1 + 12 >> 2] | 0) + ($data << 10) | 0;
   _luaE_setdebt($1, $22);
   if ((HEAP32[(HEAP32[$0 >> 2] | 0) + 12 >> 2] | 0) > 0) _luaC_step($L);
   HEAP8[$16 >> 0] = $17;
   if (($22 | 0) > 0) {
    $28 = $1 + 49 | 0;
    $29 = HEAP8[$28 >> 0] | 0;
    $30 = $29 << 24 >> 24 == 7;
    $$ = $30 & 1;
    return $$ | 0;
   } else {
    $res$0 = 0;
    return $res$0 | 0;
   }
   break;
  }
 case 3:
  {
   $res$0 = ((HEAP32[$1 + 12 >> 2] | 0) + (HEAP32[$1 + 8 >> 2] | 0) | 0) >>> 10;
   return $res$0 | 0;
  }
 case 7:
  {
   $33 = $1 + 116 | 0;
   $34 = HEAP32[$33 >> 2] | 0;
   HEAP32[$33 >> 2] = ($data | 0) < 40 ? 40 : $data;
   $res$0 = $34;
   return $res$0 | 0;
  }
 case 2:
  {
   _luaC_fullgc($L, 0);
   $res$0 = 0;
   return $res$0 | 0;
  }
 case 9:
  {
   $res$0 = HEAPU8[$1 + 51 >> 0] | 0;
   return $res$0 | 0;
  }
 default:
  {
   $res$0 = -1;
   return $res$0 | 0;
  }
 } while (0);
 return 0;
}

function __ZN16b2ContactManager7DestroyEP9b2Contact($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $$pre = 0, $$pre3 = 0, $$pre5 = 0, $18 = 0, $19 = 0, $23 = 0, $27 = 0, $32 = 0, $33 = 0, $37 = 0, $41 = 0, $46 = 0, $47 = 0, $5 = 0, $51 = 0, $55 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $9 = 0;
 $5 = HEAP32[(HEAP32[$c + 48 >> 2] | 0) + 8 >> 2] | 0;
 $7 = HEAP32[(HEAP32[$c + 52 >> 2] | 0) + 8 >> 2] | 0;
 $9 = HEAP32[$this + 72 >> 2] | 0;
 if ($9) if (HEAP32[$c + 4 >> 2] & 2) FUNCTION_TABLE_vii[HEAP32[(HEAP32[$9 >> 2] | 0) + 12 >> 2] & 127]($9, $c);
 $18 = $c + 8 | 0;
 $19 = HEAP32[$18 >> 2] | 0;
 $$pre = $c + 12 | 0;
 if ($19) HEAP32[$19 + 12 >> 2] = HEAP32[$$pre >> 2];
 $23 = HEAP32[$$pre >> 2] | 0;
 if ($23) HEAP32[$23 + 8 >> 2] = HEAP32[$18 >> 2];
 $27 = $this + 60 | 0;
 if ((HEAP32[$27 >> 2] | 0) == ($c | 0)) HEAP32[$27 >> 2] = HEAP32[$$pre >> 2];
 $32 = $c + 24 | 0;
 $33 = HEAP32[$32 >> 2] | 0;
 $$pre3 = $c + 28 | 0;
 if ($33) HEAP32[$33 + 12 >> 2] = HEAP32[$$pre3 >> 2];
 $37 = HEAP32[$$pre3 >> 2] | 0;
 if ($37) HEAP32[$37 + 8 >> 2] = HEAP32[$32 >> 2];
 $41 = $5 + 112 | 0;
 if (($c + 16 | 0) == (HEAP32[$41 >> 2] | 0)) HEAP32[$41 >> 2] = HEAP32[$$pre3 >> 2];
 $46 = $c + 40 | 0;
 $47 = HEAP32[$46 >> 2] | 0;
 $$pre5 = $c + 44 | 0;
 if ($47) HEAP32[$47 + 12 >> 2] = HEAP32[$$pre5 >> 2];
 $51 = HEAP32[$$pre5 >> 2] | 0;
 if ($51) HEAP32[$51 + 8 >> 2] = HEAP32[$46 >> 2];
 $55 = $7 + 112 | 0;
 if (($c + 32 | 0) != (HEAP32[$55 >> 2] | 0)) {
  $59 = $this + 76 | 0;
  $60 = HEAP32[$59 >> 2] | 0;
  __ZN9b2Contact7DestroyEPS_P16b2BlockAllocator($c, $60);
  $61 = $this + 64 | 0;
  $62 = HEAP32[$61 >> 2] | 0;
  $63 = $62 + -1 | 0;
  HEAP32[$61 >> 2] = $63;
  return;
 }
 HEAP32[$55 >> 2] = HEAP32[$$pre5 >> 2];
 $59 = $this + 76 | 0;
 $60 = HEAP32[$59 >> 2] | 0;
 __ZN9b2Contact7DestroyEPS_P16b2BlockAllocator($c, $60);
 $61 = $this + 64 | 0;
 $62 = HEAP32[$61 >> 2] | 0;
 $63 = $62 + -1 | 0;
 HEAP32[$61 >> 2] = $63;
 return;
}

function _font_draw_plain($font, $text, $x, $y) {
 $font = $font | 0;
 $text = $text | 0;
 $x = +$x;
 $y = +$y;
 var $$02 = 0, $0 = 0, $1 = 0, $14 = 0, $16 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $5 = 0, $8 = 0, $9 = 0, $q = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = sp + 36 | 0;
 $1 = sp + 32 | 0;
 $q = sp;
 HEAPF32[$0 >> 2] = $x;
 HEAPF32[$1 >> 2] = $y;
 if (!$font) ___assert_fail(7864, 5736, 135, 5776);
 if (!$text) ___assert_fail(56352, 5736, 136, 5776);
 $5 = HEAP32[$font + 8 >> 2] | 0;
 $8 = (HEAP32[$font + 12 >> 2] | 0) + $5 | 0;
 $9 = $font + 4 | 0;
 HEAPF32[$1 >> 2] = +HEAPF32[$9 >> 2] * 3.0 * .25 + $y;
 $14 = _display_get_draw_from() | 0;
 _display_draw_from(HEAP32[$font >> 2] | 0);
 $16 = HEAP8[$text >> 0] | 0;
 if (!($16 << 24 >> 24)) {
  _display_draw_from($14);
  STACKTOP = sp;
  return;
 }
 $19 = +(~~$x | 0);
 $20 = $font + 20 | 0;
 $21 = $q + 4 | 0;
 $22 = $q + 8 | 0;
 $23 = $q + 12 | 0;
 $24 = $q + 16 | 0;
 $25 = $q + 20 | 0;
 $26 = $q + 24 | 0;
 $27 = $q + 28 | 0;
 $$02 = $text;
 $29 = $16;
 do {
  $28 = $29 << 24 >> 24;
  if ($29 << 24 >> 24 == 10) {
   HEAPF32[$0 >> 2] = $19;
   HEAPF32[$1 >> 2] = +HEAPF32[$9 >> 2] + +HEAPF32[$1 >> 2];
  } else if (($28 | 0) >= ($5 | 0) & ($28 | 0) < ($8 | 0)) {
   _stbtt_GetBakedQuad(HEAP32[$20 >> 2] | 0, $28 - $5 | 0, $0, $1, $q, 1.0);
   $38 = +HEAPF32[$q >> 2];
   $39 = +HEAPF32[$21 >> 2];
   $40 = +HEAPF32[$22 >> 2];
   $41 = +HEAPF32[$23 >> 2];
   $42 = +HEAPF32[$24 >> 2];
   $43 = +HEAPF32[$25 >> 2];
   $44 = +HEAPF32[$26 >> 2];
   $45 = +HEAPF32[$27 >> 2];
   _display_draw_quad($40, $41, $44, $41, $44, $45, $40, $45, $38, $39, $42, $39, $42, $43, $38, $43);
  }
  $$02 = $$02 + 1 | 0;
  $29 = HEAP8[$$02 >> 0] | 0;
 } while ($29 << 24 >> 24 != 0);
 _display_draw_from($14);
 STACKTOP = sp;
 return;
}

function __ZNK12b2ChainShape12GetChildEdgeEP11b2EdgeShapei($this, $edge, $index) {
 $this = $this | 0;
 $edge = $edge | 0;
 $index = $index | 0;
 var $1 = 0, $10 = 0, $13 = 0, $18 = 0, $19 = 0, $27 = 0, $32 = 0, $33 = 0, $38 = 0, $42 = 0, $47 = 0, $48 = 0, $54 = 0, $59 = 0, $60 = 0, $70 = 0, $74 = 0, $79 = 0, $80 = 0, $86 = 0, $91 = 0, $92 = 0;
 if (($index | 0) <= -1) ___assert_fail(81552, 81376, 108, 81592);
 $1 = $this + 16 | 0;
 if (((HEAP32[$1 >> 2] | 0) + -1 | 0) <= ($index | 0)) ___assert_fail(81552, 81376, 108, 81592);
 HEAP32[$edge + 4 >> 2] = 1;
 HEAPF32[$edge + 8 >> 2] = +HEAPF32[$this + 8 >> 2];
 $10 = $this + 12 | 0;
 $13 = (HEAP32[$10 >> 2] | 0) + ($index << 3) | 0;
 $18 = HEAP32[$13 + 4 >> 2] | 0;
 $19 = $edge + 12 | 0;
 HEAP32[$19 >> 2] = HEAP32[$13 >> 2];
 HEAP32[$19 + 4 >> 2] = $18;
 $27 = (HEAP32[$10 >> 2] | 0) + ($index + 1 << 3) | 0;
 $32 = HEAP32[$27 + 4 >> 2] | 0;
 $33 = $edge + 20 | 0;
 HEAP32[$33 >> 2] = HEAP32[$27 >> 2];
 HEAP32[$33 + 4 >> 2] = $32;
 $38 = $edge + 28 | 0;
 if (($index | 0) > 0) {
  $42 = (HEAP32[$10 >> 2] | 0) + ($index + -1 << 3) | 0;
  $47 = HEAP32[$42 + 4 >> 2] | 0;
  $48 = $38;
  HEAP32[$48 >> 2] = HEAP32[$42 >> 2];
  HEAP32[$48 + 4 >> 2] = $47;
  HEAP8[$edge + 44 >> 0] = 1;
 } else {
  $54 = $this + 20 | 0;
  $59 = HEAP32[$54 + 4 >> 2] | 0;
  $60 = $38;
  HEAP32[$60 >> 2] = HEAP32[$54 >> 2];
  HEAP32[$60 + 4 >> 2] = $59;
  HEAP8[$edge + 44 >> 0] = HEAP8[$this + 36 >> 0] | 0;
 }
 $70 = $edge + 36 | 0;
 if (((HEAP32[$1 >> 2] | 0) + -2 | 0) > ($index | 0)) {
  $74 = (HEAP32[$10 >> 2] | 0) + ($index + 2 << 3) | 0;
  $79 = HEAP32[$74 + 4 >> 2] | 0;
  $80 = $70;
  HEAP32[$80 >> 2] = HEAP32[$74 >> 2];
  HEAP32[$80 + 4 >> 2] = $79;
  HEAP8[$edge + 45 >> 0] = 1;
  return;
 } else {
  $86 = $this + 28 | 0;
  $91 = HEAP32[$86 + 4 >> 2] | 0;
  $92 = $70;
  HEAP32[$92 >> 2] = HEAP32[$86 >> 2];
  HEAP32[$92 + 4 >> 2] = $91;
  HEAP8[$edge + 45 >> 0] = HEAP8[$this + 37 >> 0] | 0;
  return;
 }
}

function _log_internal($level, $category, $format, $varargs) {
 $level = $level | 0;
 $category = $category | 0;
 $format = $format | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $11 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $ap = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $vararg_buffer10 = sp + 24 | 0;
 $vararg_buffer6 = sp + 16 | 0;
 $vararg_buffer2 = sp + 8 | 0;
 $vararg_buffer = sp;
 $ap = sp + 32 | 0;
 HEAP32[$ap >> 2] = $varargs;
 if (($level | 0) == 2) {
  $6 = _use_colors() | 0;
  $8 = HEAP32[_stderr >> 2] | 0;
  HEAP32[$vararg_buffer6 >> 2] = $6 ? 1048 : 1064;
  HEAP32[$vararg_buffer6 + 4 >> 2] = $category;
  _fprintf($8 | 0, 1096, $vararg_buffer6 | 0) | 0;
  _vfprintf($8 | 0, $format | 0, $ap | 0) | 0;
  _fputc(10, $8 | 0) | 0;
  STACKTOP = sp;
  return;
 } else if (($level | 0) == 3) {
  $9 = _use_colors() | 0;
  $11 = HEAP32[_stderr >> 2] | 0;
  HEAP32[$vararg_buffer10 >> 2] = $9 ? 1072 : 1088;
  HEAP32[$vararg_buffer10 + 4 >> 2] = $category;
  _fprintf($11 | 0, 1096, $vararg_buffer10 | 0) | 0;
  _vfprintf($11 | 0, $format | 0, $ap | 0) | 0;
  _fputc(10, $11 | 0) | 0;
  STACKTOP = sp;
  return;
 } else if (!$level) {
  $0 = _use_colors() | 0;
  $2 = HEAP32[_stderr >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = $0 ? 1e3 : 1016;
  HEAP32[$vararg_buffer + 4 >> 2] = $category;
  _fprintf($2 | 0, 1096, $vararg_buffer | 0) | 0;
  _vfprintf($2 | 0, $format | 0, $ap | 0) | 0;
  _fputc(10, $2 | 0) | 0;
  STACKTOP = sp;
  return;
 } else if (($level | 0) == 1) {
  $3 = _use_colors() | 0;
  $5 = HEAP32[_stderr >> 2] | 0;
  HEAP32[$vararg_buffer2 >> 2] = $3 ? 1024 : 1040;
  HEAP32[$vararg_buffer2 + 4 >> 2] = $category;
  _fprintf($5 | 0, 1096, $vararg_buffer2 | 0) | 0;
  _vfprintf($5 | 0, $format | 0, $ap | 0) | 0;
  _fputc(10, $5 | 0) | 0;
  STACKTOP = sp;
  return;
 } else {
  STACKTOP = sp;
  return;
 }
}

function _png_inflate($png_ptr, $owner, $input, $input_size_ptr, $output, $output_size_ptr) {
 $png_ptr = $png_ptr | 0;
 $owner = $owner | 0;
 $input = $input | 0;
 $input_size_ptr = $input_size_ptr | 0;
 $output = $output | 0;
 $output_size_ptr = $output_size_ptr | 0;
 var $$0 = 0, $$avail$1 = 0, $$pre4 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $avail$1 = 0, $avail_in$0 = 0, $avail_out$0 = 0, $local_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1024 | 0;
 $local_buffer = sp;
 if ((HEAP32[$png_ptr + 220 >> 2] | 0) != ($owner | 0)) {
  HEAP32[$png_ptr + 248 >> 2] = 77096;
  $$0 = -2;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $3 = HEAP32[$output_size_ptr >> 2] | 0;
 $4 = HEAP32[$input_size_ptr >> 2] | 0;
 $5 = $png_ptr + 224 | 0;
 HEAP32[$5 >> 2] = $input;
 $6 = $png_ptr + 228 | 0;
 HEAP32[$6 >> 2] = 0;
 $7 = $png_ptr + 240 | 0;
 HEAP32[$7 >> 2] = 0;
 $8 = ($output | 0) == 0;
 $$pre4 = $png_ptr + 236 | 0;
 if (!$8) HEAP32[$$pre4 >> 2] = $output;
 $10 = 0;
 $12 = 0;
 $avail_in$0 = $4;
 $avail_out$0 = $3;
 while (1) {
  HEAP32[$6 >> 2] = $10 + $avail_in$0;
  $11 = $12 + $avail_out$0 | 0;
  if ($8) {
   HEAP32[$$pre4 >> 2] = $local_buffer;
   $avail$1 = 1024;
  } else $avail$1 = -1;
  $$avail$1 = $11 >>> 0 < $avail$1 >>> 0 ? $11 : $avail$1;
  HEAP32[$7 >> 2] = $$avail$1;
  $14 = $11 - $$avail$1 | 0;
  $17 = _inflate($5, ($11 | 0) == ($$avail$1 | 0) ? 4 : 0) | 0;
  if ($17) break;
  $10 = HEAP32[$6 >> 2] | 0;
  $12 = HEAP32[$7 >> 2] | 0;
  $avail_in$0 = 0;
  $avail_out$0 = $14;
 }
 if ($8) HEAP32[$$pre4 >> 2] = 0;
 $19 = HEAP32[$6 >> 2] | 0;
 $21 = (HEAP32[$7 >> 2] | 0) + $14 | 0;
 if ($21) HEAP32[$output_size_ptr >> 2] = (HEAP32[$output_size_ptr >> 2] | 0) - $21;
 if ($19) HEAP32[$input_size_ptr >> 2] = (HEAP32[$input_size_ptr >> 2] | 0) - $19;
 _png_zstream_error($png_ptr, $17);
 $$0 = $17;
 STACKTOP = sp;
 return $$0 | 0;
}

function _mlua_load_sound($L) {
 $L = $L | 0;
 var $$0 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $i$01 = 0, $i1$04 = 0, $len$0 = 0, $sound = 0, $vararg_buffer = 0, sp = 0, $i$01$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $sound = sp + 4 | 0;
 if (!$L) ___assert_fail(23976, 11736, 33, 11816);
 if (_lua_isstring($L, 1) | 0) {
  $3 = _lua_tolstring($L, 1, 0) | 0;
  $4 = _sound_load_from_file($3, $sound) | 0;
  if (($4 | 0) >= 0) {
   _push_sound($L, HEAP32[$sound >> 2] | 0);
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  }
  _lua_pushnil($L);
  if (($4 | 0) == -95) {
   _lua_pushlstring($L, 11832, 38) | 0;
   $$0 = 2;
   STACKTOP = sp;
   return $$0 | 0;
  } else {
   $$0 = _luaL_fileresult($L, 0, $3) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 if ((_lua_gettop($L) | 0) == 1) $len$0 = _luaL_len($L, 1) | 0; else $len$0 = ~~+_luaL_checknumber($L, 2) >>> 0;
 $14 = _llvm_stacksave() | 0;
 $15 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($len$0 << 2) | 0) + 15 & -16) | 0;
 do if ((_lua_type($L, 1) | 0) == 5) {
  if ($len$0) {
   $i$01 = 0;
   do {
    $i$01$looptemp = $i$01;
    $i$01 = $i$01 + 1 | 0;
    _lua_pushnumber($L, +($i$01 >>> 0));
    _lua_gettable($L, 1) | 0;
    HEAPF32[$15 + ($i$01$looptemp << 2) >> 2] = +_luaL_checknumber($L, -1);
    _lua_settop($L, -2);
   } while (($i$01 | 0) != ($len$0 | 0));
  }
 } else {
  if ((_lua_type($L, 1) | 0) != 6) {
   _luaL_error($L, 11872, $vararg_buffer) | 0;
   break;
  }
  if ($len$0) {
   $i1$04 = 0;
   do {
    _lua_pushvalue($L, 1);
    _lua_pushnumber($L, +($i1$04 >>> 0));
    _lua_callk($L, 1, 1, 0, 0);
    HEAPF32[$15 + ($i1$04 << 2) >> 2] = +_luaL_checknumber($L, -1);
    _lua_settop($L, -2);
    $i1$04 = $i1$04 + 1 | 0;
   } while (($i1$04 | 0) != ($len$0 | 0));
  }
 } while (0);
 _push_sound($L, _sound_load($len$0, $15, 44100) | 0);
 _llvm_stackrestore($14 | 0);
 $$0 = 1;
 STACKTOP = sp;
 return $$0 | 0;
}

function _luaO_chunkid($out, $source, $bufflen) {
 $out = $out | 0;
 $source = $source | 0;
 $bufflen = $bufflen | 0;
 var $$0 = 0, $$l$0 = 0, $$sum2$pn = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $20 = 0, $3 = 0, $4 = 0, $l$0 = 0, dest = 0, src = 0, stop = 0;
 $0 = _strlen($source | 0) | 0;
 $1 = HEAP8[$source >> 0] | 0;
 if ($1 << 24 >> 24 == 61) {
  $3 = $source + 1 | 0;
  if ($0 >>> 0 > $bufflen >>> 0) {
   $4 = $bufflen + -1 | 0;
   _memcpy($out | 0, $3 | 0, $4 | 0) | 0;
   HEAP8[$out + $4 >> 0] = 0;
   return;
  } else {
   _memcpy($out | 0, $3 | 0, $0 | 0) | 0;
   return;
  }
 } else if ($1 << 24 >> 24 == 64) if ($0 >>> 0 > $bufflen >>> 0) {
  HEAP8[$out + 0 >> 0] = HEAP8[67728] | 0;
  HEAP8[$out + 1 >> 0] = HEAP8[67729] | 0;
  HEAP8[$out + 2 >> 0] = HEAP8[67730] | 0;
  _memcpy($out + 3 | 0, $source + (4 - $bufflen + $0) | 0, $bufflen + -3 | 0) | 0;
  return;
 } else {
  _memcpy($out | 0, $source + 1 | 0, $0 | 0) | 0;
  return;
 } else {
  $11 = _strchr($source, 10) | 0;
  dest = $out + 0 | 0;
  src = 59536 | 0;
  stop = dest + 9 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $12 = $out + 9 | 0;
  $13 = $bufflen + -15 | 0;
  $15 = ($11 | 0) == 0;
  if ($0 >>> 0 < $13 >>> 0 & $15) {
   _memcpy($12 | 0, $source | 0, $0 | 0) | 0;
   $$sum2$pn = $0 + 9 | 0;
  } else {
   if ($15) $l$0 = $0; else $l$0 = $11 - $source | 0;
   $$l$0 = $l$0 >>> 0 > $13 >>> 0 ? $13 : $l$0;
   _memcpy($12 | 0, $source | 0, $$l$0 | 0) | 0;
   $20 = $out + ($$l$0 + 9) | 0;
   HEAP8[$20 + 0 >> 0] = HEAP8[67728] | 0;
   HEAP8[$20 + 1 >> 0] = HEAP8[67729] | 0;
   HEAP8[$20 + 2 >> 0] = HEAP8[67730] | 0;
   $$sum2$pn = $$l$0 + 12 | 0;
  }
  $$0 = $out + $$sum2$pn | 0;
  HEAP8[$$0 + 0 >> 0] = HEAP8[59552] | 0;
  HEAP8[$$0 + 1 >> 0] = HEAP8[59553] | 0;
  HEAP8[$$0 + 2 >> 0] = HEAP8[59554] | 0;
  return;
 }
}

function __ZN7b2World11CreateJointEPK10b2JointDef($this, $def) {
 $this = $this | 0;
 $def = $def | 0;
 var $12 = 0, $15 = 0, $17 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $29 = 0, $30 = 0, $34 = 0, $35 = 0, $38 = 0, $4 = 0, $42 = 0, $44 = 0, $56 = 0, $6 = 0, $9 = 0, $edge$01 = 0, $edge$02 = 0;
 if (HEAP32[$this + 102868 >> 2] & 2) ___assert_fail(89248, 89272, 214, 89376);
 $4 = __ZN7b2Joint6CreateEPK10b2JointDefP16b2BlockAllocator($def, $this) | 0;
 HEAP32[$4 + 8 >> 2] = 0;
 $6 = $this + 102956 | 0;
 HEAP32[$4 + 12 >> 2] = HEAP32[$6 >> 2];
 $9 = HEAP32[$6 >> 2] | 0;
 if ($9) HEAP32[$9 + 8 >> 2] = $4;
 HEAP32[$6 >> 2] = $4;
 $12 = $this + 102964 | 0;
 HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 1;
 $15 = $4 + 16 | 0;
 HEAP32[$4 + 20 >> 2] = $4;
 $17 = $4 + 52 | 0;
 HEAP32[$15 >> 2] = HEAP32[$17 >> 2];
 HEAP32[$4 + 24 >> 2] = 0;
 $20 = $4 + 48 | 0;
 $21 = HEAP32[$20 >> 2] | 0;
 $22 = $21 + 108 | 0;
 HEAP32[$4 + 28 >> 2] = HEAP32[$22 >> 2];
 $25 = HEAP32[$22 >> 2] | 0;
 if (!$25) $29 = $21; else {
  HEAP32[$25 + 8 >> 2] = $15;
  $29 = HEAP32[$20 >> 2] | 0;
 }
 HEAP32[$29 + 108 >> 2] = $15;
 $30 = $4 + 32 | 0;
 HEAP32[$4 + 36 >> 2] = $4;
 HEAP32[$30 >> 2] = HEAP32[$20 >> 2];
 HEAP32[$4 + 40 >> 2] = 0;
 $34 = HEAP32[$17 >> 2] | 0;
 $35 = $34 + 108 | 0;
 HEAP32[$4 + 44 >> 2] = HEAP32[$35 >> 2];
 $38 = HEAP32[$35 >> 2] | 0;
 if (!$38) $42 = $34; else {
  HEAP32[$38 + 8 >> 2] = $30;
  $42 = HEAP32[$17 >> 2] | 0;
 }
 HEAP32[$42 + 108 >> 2] = $30;
 $44 = HEAP32[$def + 8 >> 2] | 0;
 if (HEAP8[$def + 16 >> 0] | 0) return $4 | 0;
 $edge$01 = HEAP32[(HEAP32[$def + 12 >> 2] | 0) + 112 >> 2] | 0;
 if (!$edge$01) return $4 | 0; else $edge$02 = $edge$01;
 do {
  if ((HEAP32[$edge$02 >> 2] | 0) == ($44 | 0)) {
   $56 = (HEAP32[$edge$02 + 4 >> 2] | 0) + 4 | 0;
   HEAP32[$56 >> 2] = HEAP32[$56 >> 2] | 8;
  }
  $edge$02 = HEAP32[$edge$02 + 12 >> 2] | 0;
 } while (($edge$02 | 0) != 0);
 return $4 | 0;
}

function ___dynamic_cast($static_ptr, $static_type, $dst_type, $src2dst_offset) {
 $static_ptr = $static_ptr | 0;
 $static_type = $static_type | 0;
 $dst_type = $dst_type | 0;
 $src2dst_offset = $src2dst_offset | 0;
 var $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $27 = 0, $4 = 0, $6 = 0, $dst_ptr$0 = 0, $info = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $info = sp;
 $0 = HEAP32[$static_ptr >> 2] | 0;
 $4 = $static_ptr + (HEAP32[$0 + -8 >> 2] | 0) | 0;
 $6 = HEAP32[$0 + -4 >> 2] | 0;
 HEAP32[$info >> 2] = $dst_type;
 HEAP32[$info + 4 >> 2] = $static_ptr;
 HEAP32[$info + 8 >> 2] = $static_type;
 HEAP32[$info + 12 >> 2] = $src2dst_offset;
 $10 = $info + 16 | 0;
 $11 = $info + 20 | 0;
 $12 = $info + 24 | 0;
 $13 = $info + 28 | 0;
 $14 = $info + 32 | 0;
 $15 = $info + 40 | 0;
 $16 = ($6 | 0) == ($dst_type | 0);
 dest = $10 + 0 | 0;
 stop = dest + 36 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$10 + 36 >> 1] = 0;
 HEAP8[$10 + 38 >> 0] = 0;
 do if ($16) {
  HEAP32[$info + 48 >> 2] = 1;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$dst_type >> 2] | 0) + 20 >> 2] & 3]($dst_type, $info, $4, $4, 1, 0);
  $dst_ptr$0 = (HEAP32[$12 >> 2] | 0) == 1 ? $4 : 0;
 } else {
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$6 >> 2] | 0) + 24 >> 2] & 3]($6, $info, $4, 1, 0);
  $27 = HEAP32[$info + 36 >> 2] | 0;
  if (!$27) {
   $dst_ptr$0 = (HEAP32[$15 >> 2] | 0) == 1 & (HEAP32[$13 >> 2] | 0) == 1 & (HEAP32[$14 >> 2] | 0) == 1 ? HEAP32[$11 >> 2] | 0 : 0;
   break;
  } else if (($27 | 0) != 1) {
   $dst_ptr$0 = 0;
   break;
  }
  if ((HEAP32[$12 >> 2] | 0) != 1) if (!((HEAP32[$15 >> 2] | 0) == 0 & (HEAP32[$13 >> 2] | 0) == 1 & (HEAP32[$14 >> 2] | 0) == 1)) {
   $dst_ptr$0 = 0;
   break;
  }
  $dst_ptr$0 = HEAP32[$10 >> 2] | 0;
 } while (0);
 STACKTOP = sp;
 return $dst_ptr$0 | 0;
}

function __ZNK14b2PolygonShape11ComputeAABBEP6b2AABBRK11b2Transformi($this, $aabb, $xf, $childIndex) {
 $this = $this | 0;
 $aabb = $aabb | 0;
 $xf = $xf | 0;
 $childIndex = $childIndex | 0;
 var $$lcssa = 0.0, $$lcssa12 = 0.0, $$lcssa13 = 0.0, $$lcssa14 = 0.0, $1 = 0.0, $11 = 0.0, $12 = 0.0, $17 = 0.0, $18 = 0.0, $20 = 0, $23 = 0.0, $26 = 0.0, $29 = 0.0, $3 = 0.0, $33 = 0.0, $35 = 0.0, $36 = 0.0, $38 = 0.0, $39 = 0.0, $41 = 0.0, $42 = 0.0, $44 = 0.0, $45 = 0.0, $49 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $6 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $8 = 0.0, $i$015 = 0;
 $1 = +HEAPF32[$xf + 12 >> 2];
 $3 = +HEAPF32[$this + 20 >> 2];
 $6 = +HEAPF32[$xf + 8 >> 2];
 $8 = +HEAPF32[$this + 24 >> 2];
 $11 = +HEAPF32[$xf >> 2];
 $12 = $11 + ($1 * $3 - $6 * $8);
 $17 = +HEAPF32[$xf + 4 >> 2];
 $18 = $3 * $6 + $1 * $8 + $17;
 $20 = HEAP32[$this + 148 >> 2] | 0;
 if (($20 | 0) > 1) {
  $35 = $12;
  $38 = $18;
  $41 = $12;
  $44 = $18;
  $i$015 = 1;
  while (1) {
   $23 = +HEAPF32[$this + ($i$015 << 3) + 20 >> 2];
   $26 = +HEAPF32[$this + ($i$015 << 3) + 24 >> 2];
   $29 = $11 + ($1 * $23 - $6 * $26);
   $33 = $23 * $6 + $1 * $26 + $17;
   $36 = $35 < $29 ? $35 : $29;
   $39 = $38 < $33 ? $38 : $33;
   $42 = $41 > $29 ? $41 : $29;
   $45 = $44 > $33 ? $44 : $33;
   $i$015 = $i$015 + 1 | 0;
   if (($i$015 | 0) >= ($20 | 0)) {
    $$lcssa = $39;
    $$lcssa12 = $36;
    $$lcssa13 = $45;
    $$lcssa14 = $42;
    break;
   } else {
    $35 = $36;
    $38 = $39;
    $41 = $42;
    $44 = $45;
   }
  }
 } else {
  $$lcssa = $18;
  $$lcssa12 = $12;
  $$lcssa13 = $18;
  $$lcssa14 = $12;
 }
 $49 = +HEAPF32[$this + 8 >> 2];
 $52 = +($$lcssa12 - $49);
 $53 = +($$lcssa - $49);
 $54 = $aabb;
 HEAPF32[$54 >> 2] = $52;
 HEAPF32[$54 + 4 >> 2] = $53;
 $61 = +($$lcssa14 + $49);
 $62 = +($$lcssa13 + $49);
 $63 = $aabb + 8 | 0;
 HEAPF32[$63 >> 2] = $61;
 HEAPF32[$63 + 4 >> 2] = $62;
 return;
}

function __ZN13b2DynamicTree12AllocateNodeEv($this) {
 $this = $this | 0;
 var $$lcssa = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $12 = 0, $15 = 0, $17 = 0, $19 = 0, $24 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $i$01 = 0, $i$01$looptemp = 0;
 $0 = $this + 16 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (($1 | 0) == -1) {
  $3 = $this + 8 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  $5 = $this + 12 | 0;
  if (($4 | 0) != (HEAP32[$5 >> 2] | 0)) ___assert_fail(89984, 90016, 58, 90080);
  $8 = $this + 4 | 0;
  $9 = HEAP32[$8 >> 2] | 0;
  HEAP32[$5 >> 2] = $4 << 1;
  $12 = __Z7b2Alloci($4 * 72 | 0) | 0;
  HEAP32[$8 >> 2] = $12;
  _memcpy($12 | 0, $9 | 0, (HEAP32[$3 >> 2] | 0) * 36 | 0) | 0;
  __Z6b2FreePv($9);
  $15 = HEAP32[$3 >> 2] | 0;
  $17 = (HEAP32[$5 >> 2] | 0) + -1 | 0;
  $19 = HEAP32[$8 >> 2] | 0;
  if (($15 | 0) < ($17 | 0)) {
   $i$01 = $15;
   do {
    $i$01$looptemp = $i$01;
    $i$01 = $i$01 + 1 | 0;
    HEAP32[$19 + ($i$01$looptemp * 36 | 0) + 20 >> 2] = $i$01;
    HEAP32[$19 + ($i$01$looptemp * 36 | 0) + 32 >> 2] = -1;
    $24 = (HEAP32[$5 >> 2] | 0) + -1 | 0;
   } while (($i$01 | 0) < ($24 | 0));
   $$lcssa = $24;
  } else $$lcssa = $17;
  HEAP32[$19 + ($$lcssa * 36 | 0) + 20 >> 2] = -1;
  HEAP32[$19 + (((HEAP32[$5 >> 2] | 0) + -1 | 0) * 36 | 0) + 32 >> 2] = -1;
  $30 = HEAP32[$3 >> 2] | 0;
  HEAP32[$0 >> 2] = $30;
  $$pre$phiZ2D = $3;
  $32 = $19;
  $33 = $30;
 } else {
  $$pre$phiZ2D = $this + 8 | 0;
  $32 = HEAP32[$this + 4 >> 2] | 0;
  $33 = $1;
 }
 $31 = $32 + ($33 * 36 | 0) + 20 | 0;
 HEAP32[$0 >> 2] = HEAP32[$31 >> 2];
 HEAP32[$31 >> 2] = -1;
 HEAP32[$32 + ($33 * 36 | 0) + 24 >> 2] = -1;
 HEAP32[$32 + ($33 * 36 | 0) + 28 >> 2] = -1;
 HEAP32[$32 + ($33 * 36 | 0) + 32 >> 2] = 0;
 HEAP32[$32 + ($33 * 36 | 0) + 16 >> 2] = 0;
 HEAP32[$$pre$phiZ2D >> 2] = (HEAP32[$$pre$phiZ2D >> 2] | 0) + 1;
 return $33 | 0;
}

function ___stpcpy($d, $s) {
 $d = $d | 0;
 $s = $s | 0;
 var $$0$lcssa = 0, $$01$lcssa = 0, $$0115 = 0, $$016 = 0, $$03 = 0, $$1$ph = 0, $$12$ph = 0, $$128 = 0, $$19 = 0, $0 = 0, $10 = 0, $14 = 0, $20 = 0, $21 = 0, $22 = 0, $29 = 0, $32 = 0, $33 = 0, $7 = 0, $9 = 0, $wd$0$lcssa = 0, $wd$010 = 0, $ws$0$lcssa = 0, $ws$011 = 0;
 $0 = $s;
 if (!(($0 ^ $d) & 3)) {
  L3 : do if (!($0 & 3)) {
   $$0$lcssa = $s;
   $$01$lcssa = $d;
  } else {
   $$0115 = $d;
   $$016 = $s;
   while (1) {
    $7 = HEAP8[$$016 >> 0] | 0;
    HEAP8[$$0115 >> 0] = $7;
    if (!($7 << 24 >> 24)) {
     $$03 = $$0115;
     break;
    }
    $9 = $$016 + 1 | 0;
    $10 = $$0115 + 1 | 0;
    if (!($9 & 3)) {
     $$0$lcssa = $9;
     $$01$lcssa = $10;
     break L3;
    } else {
     $$0115 = $10;
     $$016 = $9;
    }
   }
   return $$03 | 0;
  } while (0);
  $14 = HEAP32[$$0$lcssa >> 2] | 0;
  if (!(($14 & -2139062144 ^ -2139062144) & $14 + -16843009)) {
   $22 = $14;
   $wd$010 = $$01$lcssa;
   $ws$011 = $$0$lcssa;
   while (1) {
    $20 = $ws$011 + 4 | 0;
    $21 = $wd$010 + 4 | 0;
    HEAP32[$wd$010 >> 2] = $22;
    $22 = HEAP32[$20 >> 2] | 0;
    if (($22 & -2139062144 ^ -2139062144) & $22 + -16843009) {
     $wd$0$lcssa = $21;
     $ws$0$lcssa = $20;
     break;
    } else {
     $wd$010 = $21;
     $ws$011 = $20;
    }
   }
  } else {
   $wd$0$lcssa = $$01$lcssa;
   $ws$0$lcssa = $$0$lcssa;
  }
  $$1$ph = $ws$0$lcssa;
  $$12$ph = $wd$0$lcssa;
 } else {
  $$1$ph = $s;
  $$12$ph = $d;
 }
 $29 = HEAP8[$$1$ph >> 0] | 0;
 HEAP8[$$12$ph >> 0] = $29;
 if (!($29 << 24 >> 24)) {
  $$03 = $$12$ph;
  return $$03 | 0;
 } else {
  $$128 = $$12$ph;
  $$19 = $$1$ph;
 }
 while (1) {
  $$19 = $$19 + 1 | 0;
  $32 = $$128 + 1 | 0;
  $33 = HEAP8[$$19 >> 0] | 0;
  HEAP8[$32 >> 0] = $33;
  if (!($33 << 24 >> 24)) {
   $$03 = $32;
   break;
  } else $$128 = $32;
 }
 return $$03 | 0;
}

function _stbtt__close_shape($vertices, $num_vertices, $was_off, $start_off, $sx, $sy, $scx, $scy, $cx, $cy) {
 $vertices = $vertices | 0;
 $num_vertices = $num_vertices | 0;
 $was_off = $was_off | 0;
 $start_off = $start_off | 0;
 $sx = $sx | 0;
 $sy = $sy | 0;
 $scx = $scx | 0;
 $scy = $scy | 0;
 $cx = $cx | 0;
 $cy = $cy | 0;
 var $$0 = 0, $$1 = 0, $1 = 0, $26 = 0, $27 = 0, $28 = 0;
 $1 = ($was_off | 0) != 0;
 if ($start_off) {
  if ($1) {
   HEAP8[$vertices + ($num_vertices * 10 | 0) + 8 >> 0] = 3;
   HEAP16[$vertices + ($num_vertices * 10 | 0) >> 1] = ($cx + $scx | 0) >>> 1;
   HEAP16[$vertices + ($num_vertices * 10 | 0) + 2 >> 1] = ($cy + $scy | 0) >>> 1;
   HEAP16[$vertices + ($num_vertices * 10 | 0) + 4 >> 1] = $cx;
   HEAP16[$vertices + ($num_vertices * 10 | 0) + 6 >> 1] = $cy;
   $$0 = $num_vertices + 1 | 0;
  } else $$0 = $num_vertices;
  HEAP8[$vertices + ($$0 * 10 | 0) + 8 >> 0] = 3;
  HEAP16[$vertices + ($$0 * 10 | 0) >> 1] = $sx;
  HEAP16[$vertices + ($$0 * 10 | 0) + 2 >> 1] = $sy;
  HEAP16[$vertices + ($$0 * 10 | 0) + 4 >> 1] = $scx;
  HEAP16[$vertices + ($$0 * 10 | 0) + 6 >> 1] = $scy;
  $$1 = $$0 + 1 | 0;
  return $$1 | 0;
 }
 $26 = $num_vertices + 1 | 0;
 $27 = $vertices + ($num_vertices * 10 | 0) | 0;
 $28 = $vertices + ($num_vertices * 10 | 0) + 8 | 0;
 if ($1) {
  HEAP8[$28 >> 0] = 3;
  HEAP16[$27 >> 1] = $sx;
  HEAP16[$vertices + ($num_vertices * 10 | 0) + 2 >> 1] = $sy;
  HEAP16[$vertices + ($num_vertices * 10 | 0) + 4 >> 1] = $cx;
  HEAP16[$vertices + ($num_vertices * 10 | 0) + 6 >> 1] = $cy;
  $$1 = $26;
  return $$1 | 0;
 } else {
  HEAP8[$28 >> 0] = 2;
  HEAP16[$27 >> 1] = $sx;
  HEAP16[$vertices + ($num_vertices * 10 | 0) + 2 >> 1] = $sy;
  HEAP16[$vertices + ($num_vertices * 10 | 0) + 4 >> 1] = 0;
  HEAP16[$vertices + ($num_vertices * 10 | 0) + 6 >> 1] = 0;
  $$1 = $26;
  return $$1 | 0;
 }
 return 0;
}

function _lua_upvalueid($L, $fidx, $n) {
 $L = $L | 0;
 $fidx = $fidx | 0;
 $n = $n | 0;
 var $$0 = 0, $$0$i = 0, $$0$i$i = 0, $1 = 0, $16 = 0, $17 = 0, $2 = 0, $21 = 0, $31 = 0, $33 = 0, $4 = 0, $45 = 0, $46 = 0, $50 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 $2 = ($fidx | 0) > 0;
 do if ($2) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($fidx << 3) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 59168;
 } else {
  if (($fidx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($fidx << 3) | 0;
   break;
  }
  if (($fidx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $16 = -1001e3 - $fidx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 4 >> 2] | 0) == 22) $$0$i = 59168; else {
   $21 = HEAP32[$17 >> 2] | 0;
   if (($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0)) $$0$i = 59168; else $$0$i = $21 + 16 + ($16 + -1 << 3) | 0;
  }
 } while (0);
 $31 = HEAP32[$$0$i + 4 >> 2] & 63;
 if (($31 | 0) == 6) {
  do if ($2) {
   $33 = (HEAP32[$1 >> 2] | 0) + ($fidx << 3) | 0;
   $$0$i$i = $33 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $33 : 59168;
  } else {
   if (($fidx | 0) >= -1000999) {
    $$0$i$i = (HEAP32[$L + 8 >> 2] | 0) + ($fidx << 3) | 0;
    break;
   }
   if (($fidx | 0) == -1001e3) {
    $$0$i$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
    break;
   }
   $45 = -1001e3 - $fidx | 0;
   $46 = HEAP32[$1 >> 2] | 0;
   if ((HEAP32[$46 + 4 >> 2] | 0) == 22) $$0$i$i = 59168; else {
    $50 = HEAP32[$46 >> 2] | 0;
    if (($45 | 0) > (HEAPU8[$50 + 6 >> 0] | 0 | 0)) $$0$i$i = 59168; else $$0$i$i = $50 + 16 + ($45 + -1 << 3) | 0;
   }
  } while (0);
  $$0 = HEAP32[(HEAP32[$$0$i$i >> 2] | 0) + 16 + ($n + -1 << 2) >> 2] | 0;
  return $$0 | 0;
 } else if (($31 | 0) == 38) {
  $$0 = (HEAP32[$$0$i >> 2] | 0) + 16 + ($n + -1 << 3) | 0;
  return $$0 | 0;
 } else {
  $$0 = 0;
  return $$0 | 0;
 }
 return 0;
}

function __Z30mlua_apply_linear_impulse_bodyP9lua_State($L) {
 $L = $L | 0;
 var $0 = 0, $10 = 0.0, $13 = 0.0, $15 = 0.0, $16 = 0.0, $18 = 0.0, $2 = 0, $21 = 0, $22 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $32 = 0, $33 = 0, $36 = 0, $40 = 0, $43 = 0, $46 = 0.0, $49 = 0, $5 = 0.0, $52 = 0, $67 = 0, $7 = 0.0, $8 = 0.0, $storemerge$in$in = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 if (!$L) ___assert_fail(23976, 5248, 165, 5584);
 $2 = __Z8pop_bodyP9lua_Statei($L, 1) | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if (!$3) {
  _luaL_error($L, 5336, sp + 8 | 0) | 0;
  $21 = HEAP32[$2 >> 2] | 0;
 } else $21 = $3;
 $5 = +_luaL_checknumber($L, 2);
 $7 = $5 / +HEAPF32[616];
 $8 = +_luaL_checknumber($L, 3);
 $10 = $8 / +HEAPF32[616];
 if ((_lua_gettop($L) | 0) > 4) {
  $13 = +_luaL_checknumber($L, 4);
  $15 = $13 / +HEAPF32[616];
  $16 = +_luaL_checknumber($L, 5);
  $18 = $16 / +HEAPF32[616];
  HEAPF32[$0 >> 2] = $15;
  HEAPF32[$0 + 4 >> 2] = $18;
  $storemerge$in$in = $0;
 } else $storemerge$in$in = $21 + 44 | 0;
 $22 = $storemerge$in$in;
 $28 = +HEAPF32[$22 >> 2];
 $29 = +HEAPF32[$22 + 4 >> 2];
 if ((HEAP32[$21 >> 2] | 0) != 2) {
  STACKTOP = sp;
  return 0;
 }
 $32 = $21 + 4 | 0;
 $33 = HEAP16[$32 >> 1] | 0;
 if (!($33 & 2)) {
  $36 = $33 & 65535;
  if (!($36 & 2)) {
   $40 = ($36 | 2) & 65535;
   HEAP16[$32 >> 1] = $40;
   HEAPF32[$21 + 144 >> 2] = 0.0;
   $43 = $40;
  } else $43 = $33;
 } else $43 = $33;
 if (!($43 & 2)) {
  STACKTOP = sp;
  return 0;
 }
 $46 = +HEAPF32[$21 + 120 >> 2];
 $49 = $21 + 64 | 0;
 HEAPF32[$49 >> 2] = $7 * $46 + +HEAPF32[$49 >> 2];
 $52 = $21 + 68 | 0;
 HEAPF32[$52 >> 2] = $10 * $46 + +HEAPF32[$52 >> 2];
 $67 = $21 + 72 | 0;
 HEAPF32[$67 >> 2] = +HEAPF32[$67 >> 2] + +HEAPF32[$21 + 128 >> 2] * ($10 * ($28 - +HEAPF32[$21 + 44 >> 2]) - $7 * ($29 - +HEAPF32[$21 + 48 >> 2]));
 STACKTOP = sp;
 return 0;
}

function _luaD_rawrunprotected($L, $f, $ud) {
 $L = $L | 0;
 $f = $f | 0;
 $ud = $ud | 0;
 var $$reg2mem23$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $6 = 0, $7 = 0, $lj = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 _setjmpTableSize = 4;
 _setjmpTable = _malloc(40) | 0;
 HEAP32[_setjmpTable >> 2] = 0;
 $lj = sp;
 $0 = $L + 106 | 0;
 $1 = HEAP16[$0 >> 1] | 0;
 $2 = $lj + 160 | 0;
 HEAP32[$2 >> 2] = 0;
 $3 = $L + 44 | 0;
 HEAP32[$lj >> 2] = HEAP32[$3 >> 2];
 HEAP32[$3 >> 2] = $lj;
 _setjmpTable = _saveSetjmp($lj + 4 | 0, 1, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
 _setjmpTableSize = tempRet0;
 __THREW__ = 0;
 $6 = __THREW__;
 __THREW__ = 0;
 if (($6 | 0) != 0 & (threwValue | 0) != 0) {
  $7 = _testSetjmp(HEAP32[$6 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
  if (!$7) _longjmp($6 | 0, threwValue | 0);
  tempRet0 = threwValue;
 } else $7 = -1;
 if (($7 | 0) == 1) $$reg2mem23$0 = tempRet0; else $$reg2mem23$0 = 0;
 while (1) {
  if ($$reg2mem23$0) {
   label = 6;
   break;
  }
  __THREW__ = 0;
  invoke_vii($f | 0, $L | 0, $ud | 0);
  $10 = __THREW__;
  __THREW__ = 0;
  if (($10 | 0) != 0 & (threwValue | 0) != 0) {
   $11 = _testSetjmp(HEAP32[$10 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
   if (!$11) _longjmp($10 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else $11 = -1;
  if (($11 | 0) == 1) $$reg2mem23$0 = tempRet0; else break;
 }
 if ((label | 0) == 6) {
  $13 = HEAP32[$lj >> 2] | 0;
  HEAP32[$3 >> 2] = $13;
  HEAP16[$0 >> 1] = $1;
  $14 = HEAP32[$2 >> 2] | 0;
  _free(_setjmpTable | 0);
  STACKTOP = sp;
  return $14 | 0;
 }
 $13 = HEAP32[$lj >> 2] | 0;
 HEAP32[$3 >> 2] = $13;
 HEAP16[$0 >> 1] = $1;
 $14 = HEAP32[$2 >> 2] | 0;
 _free(_setjmpTable | 0);
 STACKTOP = sp;
 return $14 | 0;
}

function __Z17mlua_init_physicsP9lua_State($L) {
 $L = $L | 0;
 var $0 = 0, $11 = 0, $18 = 0, $19 = 0, $2 = 0, $24 = 0, $26 = 0.0, $27 = 0.0, $30 = 0.0, $32 = 0, $bodyNode$04 = 0, $bodyNode$05 = 0, $jointNode$02 = 0, $jointNode$03 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $0 = sp + 8 | 0;
 if (!$L) ___assert_fail(23976, 2472, 85, 2504);
 $2 = HEAP32[632] | 0;
 if ($2) {
  $bodyNode$04 = HEAP32[$2 + 102952 >> 2] | 0;
  if (!$bodyNode$04) $11 = $2; else {
   $bodyNode$05 = $bodyNode$04;
   do {
    HEAP32[HEAP32[$bodyNode$05 + 148 >> 2] >> 2] = 0;
    $bodyNode$05 = HEAP32[$bodyNode$05 + 96 >> 2] | 0;
   } while (($bodyNode$05 | 0) != 0);
   $11 = HEAP32[632] | 0;
  }
  $jointNode$02 = HEAP32[$11 + 102956 >> 2] | 0;
  if (!$jointNode$02) $18 = $11; else {
   $jointNode$03 = $jointNode$02;
   do {
    HEAP32[HEAP32[$jointNode$03 + 64 >> 2] >> 2] = 0;
    $jointNode$03 = HEAP32[$jointNode$03 + 12 >> 2] | 0;
   } while (($jointNode$03 | 0) != 0);
   $18 = HEAP32[632] | 0;
  }
  $19 = HEAP32[$18 + 102944 >> 2] | 0;
  if (!$19) $24 = $18; else {
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[$19 >> 2] | 0) + 4 >> 2] & 127]($19);
   $24 = HEAP32[632] | 0;
  }
  if ($24) {
   __ZN7b2WorldD2Ev($24);
   __ZdlPv($24);
  }
 }
 $26 = +_luaL_checknumber($L, 1);
 $27 = +_luaL_checknumber($L, 2);
 if ((_lua_gettop($L) | 0) == 3) {
  $30 = +_luaL_checknumber($L, 3);
  if (!($30 > 0.0)) _luaL_error($L, 2536, $vararg_buffer) | 0;
  HEAPF32[616] = $30;
 }
 $32 = __Znwj(103028) | 0;
 HEAPF32[$0 >> 2] = $26;
 HEAPF32[$0 + 4 >> 2] = $27;
 __ZN7b2WorldC2ERK6b2Vec2($32, $0);
 HEAP32[632] = $32;
 __ZN7b2World22SetDestructionListenerEP21b2DestructionListener($32, 2456);
 __ZN7b2World18SetContactListenerEP17b2ContactListener(HEAP32[632] | 0, 0);
 STACKTOP = sp;
 return 0;
}

function __ZN15b2DistanceProxy3SetEPK7b2Shapei($this, $shape, $index) {
 $this = $this | 0;
 $shape = $shape | 0;
 $index = $index | 0;
 var $1 = 0, $17 = 0, $20 = 0, $23 = 0, $28 = 0, $29 = 0, $33 = 0, $36 = 0, $37 = 0, $39 = 0, $44 = 0, $45 = 0, $49 = 0, $54 = 0, $55 = 0;
 $1 = HEAP32[$shape + 4 >> 2] | 0;
 if (!$1) {
  HEAP32[$this + 16 >> 2] = $shape + 12;
  HEAP32[$this + 20 >> 2] = 1;
  HEAPF32[$this + 24 >> 2] = +HEAPF32[$shape + 8 >> 2];
  return;
 } else if (($1 | 0) == 1) {
  HEAP32[$this + 16 >> 2] = $shape + 12;
  HEAP32[$this + 20 >> 2] = 2;
  HEAPF32[$this + 24 >> 2] = +HEAPF32[$shape + 8 >> 2];
  return;
 } else if (($1 | 0) == 2) {
  HEAP32[$this + 16 >> 2] = $shape + 20;
  HEAP32[$this + 20 >> 2] = HEAP32[$shape + 148 >> 2];
  HEAPF32[$this + 24 >> 2] = +HEAPF32[$shape + 8 >> 2];
  return;
 } else if (($1 | 0) == 3) {
  if (($index | 0) <= -1) ___assert_fail(82136, 82176, 53, 82232);
  $17 = $shape + 16 | 0;
  if ((HEAP32[$17 >> 2] | 0) <= ($index | 0)) ___assert_fail(82136, 82176, 53, 82232);
  $20 = $shape + 12 | 0;
  $23 = (HEAP32[$20 >> 2] | 0) + ($index << 3) | 0;
  $28 = HEAP32[$23 + 4 >> 2] | 0;
  $29 = $this;
  HEAP32[$29 >> 2] = HEAP32[$23 >> 2];
  HEAP32[$29 + 4 >> 2] = $28;
  $33 = $index + 1 | 0;
  $36 = $this + 8 | 0;
  $37 = HEAP32[$20 >> 2] | 0;
  if (($33 | 0) < (HEAP32[$17 >> 2] | 0)) {
   $39 = $37 + ($33 << 3) | 0;
   $44 = HEAP32[$39 + 4 >> 2] | 0;
   $45 = $36;
   HEAP32[$45 >> 2] = HEAP32[$39 >> 2];
   HEAP32[$45 + 4 >> 2] = $44;
  } else {
   $49 = $37;
   $54 = HEAP32[$49 + 4 >> 2] | 0;
   $55 = $36;
   HEAP32[$55 >> 2] = HEAP32[$49 >> 2];
   HEAP32[$55 + 4 >> 2] = $54;
  }
  HEAP32[$this + 16 >> 2] = $this;
  HEAP32[$this + 20 >> 2] = 2;
  HEAPF32[$this + 24 >> 2] = +HEAPF32[$shape + 8 >> 2];
  return;
 } else ___assert_fail(90768, 82176, 81, 82232);
}

function _closegoto($ls, $g, $label) {
 $ls = $ls | 0;
 $g = $g | 0;
 $label = $label | 0;
 var $$lcssa3 = 0, $1 = 0, $19 = 0, $24 = 0, $25 = 0, $3 = 0, $31 = 0, $33 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $5 = 0, $7 = 0, $i$04 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $1 = HEAP32[$ls + 28 >> 2] | 0;
 $3 = HEAP32[$ls + 48 >> 2] | 0;
 $4 = $3 + 12 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $7 = HEAP8[$5 + ($g << 4) + 12 >> 0] | 0;
 if (($7 & 255) < (HEAPU8[$label + 12 >> 0] | 0)) {
  $19 = HEAP32[$ls + 32 >> 2] | 0;
  $24 = HEAP32[$5 + ($g << 4) + 8 >> 2] | 0;
  $25 = (HEAP32[(HEAP32[(HEAP32[$1 >> 2] | 0) + 60 >> 2] | 0) + ((HEAP16[(HEAP32[HEAP32[(HEAP32[$1 + 8 >> 2] | 0) + 48 >> 2] >> 2] | 0) + ((HEAP32[$1 + 36 >> 2] | 0) + ($7 & 255) << 1) >> 1] | 0) * 12 | 0) >> 2] | 0) + 24 | 0;
  HEAP32[$vararg_buffer >> 2] = (HEAP32[$5 + ($g << 4) >> 2] | 0) + 24;
  HEAP32[$vararg_buffer + 4 >> 2] = $24;
  HEAP32[$vararg_buffer + 8 >> 2] = $25;
  _semerror($ls, _luaO_pushfstring($19, 60312, $vararg_buffer) | 0);
 }
 _luaK_patchlist($1, HEAP32[$5 + ($g << 4) + 4 >> 2] | 0, HEAP32[$label + 4 >> 2] | 0);
 $31 = $3 + 16 | 0;
 $33 = (HEAP32[$31 >> 2] | 0) + -1 | 0;
 if (($33 | 0) > ($g | 0)) $i$04 = $g; else {
  $$lcssa3 = $33;
  HEAP32[$31 >> 2] = $$lcssa3;
  STACKTOP = sp;
  return;
 }
 do {
  $35 = HEAP32[$4 >> 2] | 0;
  $36 = $35 + ($i$04 << 4) | 0;
  $i$04 = $i$04 + 1 | 0;
  $38 = $35 + ($i$04 << 4) | 0;
  HEAP32[$36 + 0 >> 2] = HEAP32[$38 + 0 >> 2];
  HEAP32[$36 + 4 >> 2] = HEAP32[$38 + 4 >> 2];
  HEAP32[$36 + 8 >> 2] = HEAP32[$38 + 8 >> 2];
  HEAP32[$36 + 12 >> 2] = HEAP32[$38 + 12 >> 2];
  $40 = (HEAP32[$31 >> 2] | 0) + -1 | 0;
 } while (($i$04 | 0) < ($40 | 0));
 $$lcssa3 = $40;
 HEAP32[$31 >> 2] = $$lcssa3;
 STACKTOP = sp;
 return;
}

function __ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi($this, $output, $input, $transform, $childIndex) {
 $this = $this | 0;
 $output = $output | 0;
 $input = $input | 0;
 $transform = $transform | 0;
 $childIndex = $childIndex | 0;
 var $$0 = 0, $1 = 0.0, $19 = 0.0, $20 = 0.0, $22 = 0.0, $23 = 0.0, $28 = 0.0, $3 = 0.0, $33 = 0.0, $36 = 0.0, $39 = 0.0, $42 = 0.0, $45 = 0.0, $49 = 0.0, $50 = 0.0, $56 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $71 = 0.0, $74 = 0.0, $8 = 0.0;
 $1 = +HEAPF32[$transform + 12 >> 2];
 $3 = +HEAPF32[$this + 12 >> 2];
 $6 = +HEAPF32[$transform + 8 >> 2];
 $8 = +HEAPF32[$this + 16 >> 2];
 $19 = +HEAPF32[$input >> 2];
 $20 = $19 - (+HEAPF32[$transform >> 2] + ($1 * $3 - $6 * $8));
 $22 = +HEAPF32[$input + 4 >> 2];
 $23 = $22 - (+HEAPF32[$transform + 4 >> 2] + ($3 * $6 + $1 * $8));
 $28 = +HEAPF32[$this + 8 >> 2];
 $33 = +HEAPF32[$input + 8 >> 2] - $19;
 $36 = +HEAPF32[$input + 12 >> 2] - $22;
 $39 = $20 * $33 + $23 * $36;
 $42 = $33 * $33 + $36 * $36;
 $45 = $39 * $39 - ($20 * $20 + $23 * $23 - $28 * $28) * $42;
 if ($45 < 0.0 | $42 < 1.1920928955078125e-07) {
  $$0 = 0;
  return $$0 | 0;
 }
 $49 = $39 + +Math_sqrt(+$45);
 $50 = -$49;
 if (!($49 <= -0.0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!($42 * +HEAPF32[$input + 16 >> 2] >= $50)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $56 = $50 / $42;
 HEAPF32[$output + 8 >> 2] = $56;
 $60 = $20 + $33 * $56;
 $61 = $23 + $36 * $56;
 $62 = +$60;
 $63 = +$61;
 $64 = $output;
 HEAPF32[$64 >> 2] = $62;
 HEAPF32[$64 + 4 >> 2] = $63;
 $71 = +Math_sqrt(+($60 * $60 + $61 * $61));
 if ($71 < 1.1920928955078125e-07) {
  $$0 = 1;
  return $$0 | 0;
 }
 $74 = 1.0 / $71;
 HEAPF32[$output >> 2] = $60 * $74;
 HEAPF32[$output + 4 >> 2] = $61 * $74;
 $$0 = 1;
 return $$0 | 0;
}

function _png_set_tRNS($png_ptr, $info_ptr, $trans_alpha, $num_trans, $trans_color) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 $trans_alpha = $trans_alpha | 0;
 $num_trans = $num_trans | 0;
 $trans_color = $trans_color | 0;
 var $11 = 0, $13 = 0, $3 = 0, $30 = 0, $38 = 0, $41 = 0, label = 0;
 if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) return;
 if ($trans_alpha) {
  _png_free_data($png_ptr, $info_ptr, 8192, 0);
  $3 = _png_malloc($png_ptr, 256) | 0;
  HEAP32[$info_ptr + 156 >> 2] = $3;
  HEAP32[$png_ptr + 528 >> 2] = $3;
  if (($num_trans + -1 | 0) >>> 0 < 256) _memcpy($3 | 0, $trans_alpha | 0, $num_trans | 0) | 0;
 }
 if (!$trans_color) {
  HEAP16[$info_ptr + 22 >> 1] = $num_trans;
  if (!$num_trans) return;
 } else {
  $11 = 1 << (HEAPU8[$info_ptr + 24 >> 0] | 0);
  $13 = HEAP8[$info_ptr + 25 >> 0] | 0;
  if ($13 << 24 >> 24 == 2) {
   if ((HEAPU16[$trans_color + 2 >> 1] | 0 | 0) > ($11 | 0)) label = 11; else if ((HEAPU16[$trans_color + 4 >> 1] | 0 | 0) > ($11 | 0)) label = 11; else if ((HEAPU16[$trans_color + 6 >> 1] | 0 | 0) > ($11 | 0)) label = 11;
  } else if (!($13 << 24 >> 24)) if ((HEAPU16[$trans_color + 8 >> 1] | 0 | 0) > ($11 | 0)) label = 11;
  if ((label | 0) == 11) _png_warning($png_ptr, 77824);
  $30 = $info_ptr + 160 | 0;
  HEAP16[$30 + 0 >> 1] = HEAP16[$trans_color + 0 >> 1] | 0;
  HEAP16[$30 + 2 >> 1] = HEAP16[$trans_color + 2 >> 1] | 0;
  HEAP16[$30 + 4 >> 1] = HEAP16[$trans_color + 4 >> 1] | 0;
  HEAP16[$30 + 6 >> 1] = HEAP16[$trans_color + 6 >> 1] | 0;
  HEAP16[$30 + 8 >> 1] = HEAP16[$trans_color + 8 >> 1] | 0;
  HEAP16[$info_ptr + 22 >> 1] = ($num_trans | 0) == 0 ? 1 : $num_trans & 65535;
 }
 $38 = $info_ptr + 8 | 0;
 HEAP32[$38 >> 2] = HEAP32[$38 >> 2] | 16;
 $41 = $info_ptr + 232 | 0;
 HEAP32[$41 >> 2] = HEAP32[$41 >> 2] | 8192;
 return;
}

function _lua_rawsetp($L, $idx, $p) {
 $L = $L | 0;
 $idx = $idx | 0;
 $p = $p | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $29 = 0, $31 = 0, $32 = 0, $35 = 0, $4 = 0, $40 = 0, $41 = 0, $45 = 0, $60 = 0, $61 = 0, $k = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $k = sp;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 3) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 59168;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 3) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 4 >> 2] | 0) == 22) $$0$i = 59168; else {
   $21 = HEAP32[$17 >> 2] | 0;
   if (($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0)) $$0$i = 59168; else $$0$i = $21 + 16 + ($16 + -1 << 3) | 0;
  }
 } while (0);
 $29 = HEAP32[$$0$i >> 2] | 0;
 HEAP32[$k >> 2] = $p;
 HEAP32[$k + 4 >> 2] = 2;
 $31 = _luaH_set($L, $29, $k) | 0;
 $32 = $L + 8 | 0;
 $35 = (HEAP32[$32 >> 2] | 0) + -8 | 0;
 $40 = HEAP32[$35 + 4 >> 2] | 0;
 $41 = $31;
 HEAP32[$41 >> 2] = HEAP32[$35 >> 2];
 HEAP32[$41 + 4 >> 2] = $40;
 $45 = HEAP32[$32 >> 2] | 0;
 if (!(HEAP32[$45 + -4 >> 2] & 64)) {
  $61 = $45;
  $60 = $61 + -8 | 0;
  HEAP32[$32 >> 2] = $60;
  STACKTOP = sp;
  return;
 }
 if (!(HEAP8[$29 + 5 >> 0] & 4)) {
  $61 = $45;
  $60 = $61 + -8 | 0;
  HEAP32[$32 >> 2] = $60;
  STACKTOP = sp;
  return;
 }
 if (!(HEAP8[(HEAP32[$45 + -8 >> 2] | 0) + 5 >> 0] & 3)) {
  $61 = $45;
  $60 = $61 + -8 | 0;
  HEAP32[$32 >> 2] = $60;
  STACKTOP = sp;
  return;
 }
 _luaC_barrierback_($L, $29);
 $61 = HEAP32[$32 >> 2] | 0;
 $60 = $61 + -8 | 0;
 HEAP32[$32 >> 2] = $60;
 STACKTOP = sp;
 return;
}

function _luaD_reallocstack($L, $newsize) {
 $L = $L | 0;
 $newsize = $newsize | 0;
 var $0 = 0, $1 = 0, $14 = 0, $17 = 0, $2 = 0, $3 = 0, $39 = 0, $56 = 0, $8 = 0, $ci$01$i = 0, $ci$02$i = 0, $lim$03 = 0, $up$0$i1 = 0, $up$0$i2 = 0, $up$03$i = 0;
 $0 = $L + 28 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $L + 92 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if (($newsize + 1 | 0) >>> 0 > 536870911) _luaM_toobig($L);
 $8 = _luaM_realloc_($L, $1, $3 << 3, $newsize << 3) | 0;
 HEAP32[$0 >> 2] = $8;
 if (($3 | 0) < ($newsize | 0)) {
  $lim$03 = $3;
  do {
   HEAP32[$8 + ($lim$03 << 3) + 4 >> 2] = 0;
   $lim$03 = $lim$03 + 1 | 0;
  } while (($lim$03 | 0) != ($newsize | 0));
 }
 HEAP32[$2 >> 2] = $newsize;
 HEAP32[$L + 24 >> 2] = $8 + ($newsize + -5 << 3);
 $14 = $L + 8 | 0;
 $17 = $1;
 HEAP32[$14 >> 2] = $8 + ((HEAP32[$14 >> 2] | 0) - $17 >> 3 << 3);
 $up$03$i = HEAP32[$L + 32 >> 2] | 0;
 if ($up$03$i) {
  HEAP32[$up$03$i >> 2] = $8 + ((HEAP32[$up$03$i >> 2] | 0) - $17 >> 3 << 3);
  $up$0$i1 = HEAP32[$up$03$i + 8 >> 2] | 0;
  if ($up$0$i1) {
   $up$0$i2 = $up$0$i1;
   do {
    HEAP32[$up$0$i2 >> 2] = (HEAP32[$0 >> 2] | 0) + ((HEAP32[$up$0$i2 >> 2] | 0) - $17 >> 3 << 3);
    $up$0$i2 = HEAP32[$up$0$i2 + 8 >> 2] | 0;
   } while (($up$0$i2 | 0) != 0);
  }
 }
 $ci$01$i = HEAP32[$L + 16 >> 2] | 0;
 if (!$ci$01$i) return; else $ci$02$i = $ci$01$i;
 do {
  $39 = $ci$02$i + 4 | 0;
  HEAP32[$39 >> 2] = (HEAP32[$0 >> 2] | 0) + ((HEAP32[$39 >> 2] | 0) - $17 >> 3 << 3);
  HEAP32[$ci$02$i >> 2] = (HEAP32[$0 >> 2] | 0) + ((HEAP32[$ci$02$i >> 2] | 0) - $17 >> 3 << 3);
  if (HEAP8[$ci$02$i + 34 >> 0] & 2) {
   $56 = $ci$02$i + 16 | 0;
   HEAP32[$56 >> 2] = (HEAP32[$0 >> 2] | 0) + ((HEAP32[$56 >> 2] | 0) - $17 >> 3 << 3);
  }
  $ci$02$i = HEAP32[$ci$02$i + 8 >> 2] | 0;
 } while (($ci$02$i | 0) != 0);
 return;
}

function __ZN9b2Contact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $indexA, $fixtureB, $indexB, $allocator) {
 $fixtureA = $fixtureA | 0;
 $indexA = $indexA | 0;
 $fixtureB = $fixtureB | 0;
 $indexB = $indexB | 0;
 $allocator = $allocator | 0;
 var $$0 = 0, $13 = 0, $5 = 0, $9 = 0;
 if (!(HEAP8[91392] | 0)) {
  HEAP32[22800] = 5;
  HEAP32[22801] = 88;
  HEAP8[91208] = 1;
  HEAP32[22824] = 6;
  HEAP32[22825] = 89;
  HEAP8[91304] = 1;
  HEAP32[22806] = 6;
  HEAP32[22807] = 89;
  HEAP8[91232] = 0;
  HEAP32[22830] = 7;
  HEAP32[22831] = 90;
  HEAP8[91328] = 1;
  HEAP32[22812] = 8;
  HEAP32[22813] = 91;
  HEAP8[91256] = 1;
  HEAP32[22803] = 8;
  HEAP32[22804] = 91;
  HEAP8[91220] = 0;
  HEAP32[22818] = 9;
  HEAP32[22819] = 92;
  HEAP8[91280] = 1;
  HEAP32[22827] = 9;
  HEAP32[22828] = 92;
  HEAP8[91316] = 0;
  HEAP32[22836] = 10;
  HEAP32[22837] = 93;
  HEAP8[91352] = 1;
  HEAP32[22809] = 10;
  HEAP32[22810] = 93;
  HEAP8[91244] = 0;
  HEAP32[22842] = 11;
  HEAP32[22843] = 94;
  HEAP8[91376] = 1;
  HEAP32[22833] = 11;
  HEAP32[22834] = 94;
  HEAP8[91340] = 0;
  HEAP8[91392] = 1;
 }
 $5 = HEAP32[(HEAP32[$fixtureA + 12 >> 2] | 0) + 4 >> 2] | 0;
 $9 = HEAP32[(HEAP32[$fixtureB + 12 >> 2] | 0) + 4 >> 2] | 0;
 if ($5 >>> 0 >= 4) ___assert_fail(91400, 91448, 80, 91560);
 if ($9 >>> 0 >= 4) ___assert_fail(91512, 91448, 81, 91560);
 $13 = HEAP32[91200 + ($5 * 48 | 0) + ($9 * 12 | 0) >> 2] | 0;
 if (!$13) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP8[91200 + ($5 * 48 | 0) + ($9 * 12 | 0) + 8 >> 0] | 0)) {
  $$0 = FUNCTION_TABLE_iiiiii[$13 & 15]($fixtureB, $indexB, $fixtureA, $indexA, $allocator) | 0;
  return $$0 | 0;
 } else {
  $$0 = FUNCTION_TABLE_iiiiii[$13 & 15]($fixtureA, $indexA, $fixtureB, $indexB, $allocator) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _stbtt__tesselate_curve($points, $num_points, $x0, $y0, $x1, $y1, $x2, $y2, $objspace_flatness_squared, $n) {
 $points = $points | 0;
 $num_points = $num_points | 0;
 $x0 = +$x0;
 $y0 = +$y0;
 $x1 = +$x1;
 $y1 = +$y1;
 $x2 = +$x2;
 $y2 = +$y2;
 $objspace_flatness_squared = +$objspace_flatness_squared;
 $n = $n | 0;
 var $16 = 0.0, $18 = 0.0, $26 = 0.0, $27 = 0.0, $3 = 0.0, $35 = 0.0, $39 = 0.0, $47 = 0, $7 = 0.0, $n$tr5 = 0, $x0$tr1 = 0.0, $x0$tr1$phi = 0.0, $x1$tr3 = 0.0, $y0$tr2 = 0.0, $y0$tr2$phi = 0.0, $y1$tr4 = 0.0, label = 0, $n$tr5$looptemp = 0;
 $3 = ($x1 * 2.0 + $x0 + $x2) * .25;
 $7 = ($y1 * 2.0 + $y0 + $y2) * .25;
 if (($n | 0) > 16) return;
 $16 = ($x2 + $x0) * .5 - $3;
 $18 = ($y2 + $y0) * .5 - $7;
 $26 = $3;
 $27 = $7;
 $n$tr5 = $n;
 $x0$tr1 = $x0;
 $x1$tr3 = $x1;
 $y0$tr2 = $y0;
 $y1$tr4 = $y1;
 while (1) {
  if (!($16 * $16 + $18 * $18 > $objspace_flatness_squared)) break;
  $n$tr5$looptemp = $n$tr5;
  $n$tr5 = $n$tr5 + 1 | 0;
  _stbtt__tesselate_curve($points, $num_points, $x0$tr1, $y0$tr2, ($x0$tr1 + $x1$tr3) * .5, ($y0$tr2 + $y1$tr4) * .5, $26, $27, $objspace_flatness_squared, $n$tr5);
  $x1$tr3 = ($x1$tr3 + $x2) * .5;
  $y1$tr4 = ($y1$tr4 + $y2) * .5;
  $35 = ($26 + $x1$tr3 * 2.0 + $x2) * .25;
  $39 = ($27 + $y1$tr4 * 2.0 + $y2) * .25;
  if (($n$tr5$looptemp | 0) > 15) {
   label = 8;
   break;
  } else {
   $y0$tr2$phi = $27;
   $x0$tr1$phi = $26;
   $16 = ($26 + $x2) * .5 - $35;
   $18 = ($27 + $y2) * .5 - $39;
   $26 = $35;
   $27 = $39;
   $y0$tr2 = $y0$tr2$phi;
   $x0$tr1 = $x0$tr1$phi;
  }
 }
 if ((label | 0) == 8) return;
 $47 = HEAP32[$num_points >> 2] | 0;
 if ($points) {
  HEAPF32[$points + ($47 << 3) >> 2] = $x2;
  HEAPF32[$points + ($47 << 3) + 4 >> 2] = $y2;
 }
 HEAP32[$num_points >> 2] = $47 + 1;
 return;
}

function _luaS_resize($L, $newsize) {
 $L = $L | 0;
 $newsize = $newsize | 0;
 var $1 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $28 = 0, $3 = 0, $4 = 0, $6 = 0, $8 = 0, $i$05 = 0, $i$12 = 0, $p$01 = 0, $p$01$looptemp = 0;
 $1 = HEAP32[$L + 12 >> 2] | 0;
 $2 = $1 + 24 | 0;
 $3 = $1 + 32 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 L1 : do if (($4 | 0) < ($newsize | 0)) {
  if (($newsize + 1 | 0) >>> 0 > 1073741823) _luaM_toobig($L);
  $14 = _luaM_realloc_($L, HEAP32[$2 >> 2] | 0, $4 << 2, $newsize << 2) | 0;
  HEAP32[$2 >> 2] = $14;
  $15 = HEAP32[$3 >> 2] | 0;
  if (($15 | 0) < ($newsize | 0)) {
   $18 = $14;
   $i$05 = $15;
   while (1) {
    HEAP32[$18 + ($i$05 << 2) >> 2] = 0;
    $19 = $i$05 + 1 | 0;
    if (($19 | 0) == ($newsize | 0)) {
     $6 = $15;
     break L1;
    }
    $18 = HEAP32[$2 >> 2] | 0;
    $i$05 = $19;
   }
  } else $6 = $15;
 } else $6 = $4; while (0);
 if (($6 | 0) > 0) {
  $8 = $newsize + -1 | 0;
  $i$12 = 0;
  do {
   $21 = (HEAP32[$2 >> 2] | 0) + ($i$12 << 2) | 0;
   $22 = HEAP32[$21 >> 2] | 0;
   HEAP32[$21 >> 2] = 0;
   if ($22) {
    $p$01 = $22;
    do {
     $24 = $p$01 + 16 | 0;
     $p$01$looptemp = $p$01;
     $p$01 = HEAP32[$24 >> 2] | 0;
     $28 = HEAP32[$p$01$looptemp + 8 >> 2] & $8;
     HEAP32[$24 >> 2] = HEAP32[(HEAP32[$2 >> 2] | 0) + ($28 << 2) >> 2];
     HEAP32[(HEAP32[$2 >> 2] | 0) + ($28 << 2) >> 2] = $p$01$looptemp;
    } while (($p$01 | 0) != 0);
   }
   $i$12 = $i$12 + 1 | 0;
  } while (($i$12 | 0) < ($6 | 0));
 }
 if (($6 | 0) <= ($newsize | 0)) {
  HEAP32[$3 >> 2] = $newsize;
  return;
 }
 if (($newsize + 1 | 0) >>> 0 > 1073741823) _luaM_toobig($L);
 HEAP32[$2 >> 2] = _luaM_realloc_($L, HEAP32[$2 >> 2] | 0, $6 << 2, $newsize << 2) | 0;
 HEAP32[$3 >> 2] = $newsize;
 return;
}

function _luaK_self($fs, $e, $key) {
 $fs = $fs | 0;
 $e = $e | 0;
 $key = $key | 0;
 var $$pre$phiZ2D = 0, $$pre$pre$phiZZ2D = 0, $13 = 0, $22 = 0, $25 = 0, $28 = 0, $30 = 0, $32 = 0, $41 = 0, $44 = 0, $55 = 0, $7 = 0, $8 = 0, label = 0;
 _luaK_dischargevars($fs, $e);
 if ((HEAP32[$e >> 2] | 0) == 7) {
  $7 = $e + 4 | 0;
  $8 = HEAP32[$7 >> 2] | 0;
  if ((HEAP32[$e + 8 >> 2] | 0) == (HEAP32[$e + 12 >> 2] | 0)) $$pre$phiZ2D = $7; else if (($8 | 0) < (HEAPU8[$fs + 42 >> 0] | 0 | 0)) {
   $$pre$pre$phiZZ2D = $7;
   label = 6;
  } else {
   _exp2reg($fs, $e, $8);
   $$pre$phiZ2D = $7;
  }
 } else {
  $$pre$pre$phiZZ2D = $e + 4 | 0;
  label = 6;
 }
 if ((label | 0) == 6) {
  _luaK_exp2nextreg($fs, $e);
  $$pre$phiZ2D = $$pre$pre$phiZZ2D;
 }
 $13 = HEAP32[$$pre$phiZ2D >> 2] | 0;
 if ((HEAP32[$e >> 2] | 0) == 7 & ($13 & 256 | 0) == 0) if ((HEAPU8[$fs + 42 >> 0] | 0 | 0) <= ($13 | 0)) {
  $22 = $fs + 44 | 0;
  HEAP8[$22 >> 0] = (HEAP8[$22 >> 0] | 0) + -1 << 24 >> 24;
 }
 $25 = $fs + 44 | 0;
 HEAP32[$$pre$phiZ2D >> 2] = HEAPU8[$25 >> 0];
 HEAP32[$e >> 2] = 7;
 $28 = HEAP8[$25 >> 0] | 0;
 $30 = ($28 & 255) + 2 | 0;
 $32 = (HEAP32[$fs >> 2] | 0) + 8 | 0;
 do if ($30 >>> 0 > (HEAPU8[$32 >> 0] | 0) >>> 0) if ($30 >>> 0 > 249) _luaX_syntaxerror(HEAP32[$fs + 8 >> 2] | 0, 65488); else {
  HEAP8[$32 >> 0] = $30;
  $41 = HEAP8[$25 >> 0] | 0;
  break;
 } else $41 = $28; while (0);
 HEAP8[$25 >> 0] = ($41 & 255) + 2;
 $44 = HEAP32[$$pre$phiZ2D >> 2] | 0;
 _luaK_code($fs, $13 << 23 | $44 << 6 | (_luaK_exp2RK($fs, $key) | 0) << 14 | 12) | 0;
 if ((HEAP32[$key >> 2] | 0) != 7) return;
 $55 = HEAP32[$key + 4 >> 2] | 0;
 if ($55 & 256) return;
 if ((HEAPU8[$fs + 42 >> 0] | 0 | 0) > ($55 | 0)) return;
 HEAP8[$25 >> 0] = (HEAP8[$25 >> 0] | 0) + -1 << 24 >> 24;
 return;
}

function _png_free_jmpbuf($png_ptr) {
 $png_ptr = $png_ptr | 0;
 var $$pre = 0, $$reg2mem15$0 = 0, $1 = 0, $12 = 0, $13 = 0, $2 = 0, $7 = 0, $8 = 0, $free_jmp_buf = 0, _setjmpTable = 0, _setjmpTableSize = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 _setjmpTableSize = 4;
 _setjmpTable = _malloc(40) | 0;
 HEAP32[_setjmpTable >> 2] = 0;
 $free_jmp_buf = sp;
 if (!$png_ptr) {
  _free(_setjmpTable | 0);
  STACKTOP = sp;
  return;
 }
 $1 = $png_ptr + 160 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $$pre = $png_ptr + 164 | 0;
 L4 : do if ($2) if (!((HEAP32[$$pre >> 2] | 0) == 0 | ($2 | 0) == ($png_ptr | 0))) {
  _setjmpTable = _saveSetjmp($free_jmp_buf, 1, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
  _setjmpTableSize = tempRet0;
  __THREW__ = 0;
  $7 = __THREW__;
  __THREW__ = 0;
  if (($7 | 0) != 0 & (threwValue | 0) != 0) {
   $8 = _testSetjmp(HEAP32[$7 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
   if (!$8) _longjmp($7 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else $8 = -1;
  if (($8 | 0) == 1) $$reg2mem15$0 = tempRet0; else $$reg2mem15$0 = 0;
  while (1) {
   if ($$reg2mem15$0) break L4;
   HEAP32[$1 >> 2] = $free_jmp_buf;
   HEAP32[$$pre >> 2] = 0;
   HEAP32[$png_ptr + 156 >> 2] = 71;
   __THREW__ = 0;
   invoke_vii(87, $png_ptr | 0, $2 | 0);
   $12 = __THREW__;
   __THREW__ = 0;
   if (($12 | 0) != 0 & (threwValue | 0) != 0) {
    $13 = _testSetjmp(HEAP32[$12 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
    if (!$13) _longjmp($12 | 0, threwValue | 0);
    tempRet0 = threwValue;
   } else $13 = -1;
   if (($13 | 0) == 1) $$reg2mem15$0 = tempRet0; else break;
  }
 } while (0);
 HEAP32[$$pre >> 2] = 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$png_ptr + 156 >> 2] = 0;
 _free(_setjmpTable | 0);
 STACKTOP = sp;
 return;
}

function _load_wav($filename, $wave_header, $audio_data) {
 $filename = $filename | 0;
 $wave_header = $wave_header | 0;
 $audio_data = $audio_data | 0;
 var $$0 = 0, $27 = 0, $29 = 0, $3 = 0, $32 = 0, $ret$0 = 0, $tmp_buffer$0 = 0;
 if (($filename | 0) == 0 | ($wave_header | 0) == 0 | ($audio_data | 0) == 0) {
  $$0 = -22;
  return $$0 | 0;
 }
 $3 = _fopen($filename | 0, 80904) | 0;
 if (!$3) {
  $$0 = 0 - (HEAP32[(___errno_location() | 0) >> 2] | 0) | 0;
  return $$0 | 0;
 }
 if ((_fread($wave_header | 0, 44, 1, $3 | 0) | 0) == 1) if (!(_strncmp($wave_header, 80912, 4) | 0)) if (!(_strncmp($wave_header + 8 | 0, 80920, 4) | 0)) if (!(_strncmp($wave_header + 12 | 0, 80928, 3) | 0)) if (!(_strncmp($wave_header + 36 | 0, 80936, 4) | 0)) if ((HEAP32[$wave_header + 16 >> 2] | 0) == 16) if ((HEAP16[$wave_header + 20 >> 1] | 0) == 1) {
  _fseek($3 | 0, 0, 2) | 0;
  $27 = _ftell($3 | 0) | 0;
  _fseek($3 | 0, 44, 0) | 0;
  $29 = HEAP32[$wave_header + 40 >> 2] | 0;
  if (($29 | 0) == ($27 + -44 | 0)) {
   $32 = _malloc($29) | 0;
   if (!$32) {
    $ret$0 = -12;
    $tmp_buffer$0 = 0;
   } else if ((_fread($32 | 0, $29 | 0, 1, $3 | 0) | 0) == 1) {
    HEAP32[$audio_data >> 2] = $32;
    _fclose($3 | 0) | 0;
    $$0 = 0;
    return $$0 | 0;
   } else {
    $ret$0 = -5;
    $tmp_buffer$0 = $32;
   }
  } else {
   $ret$0 = -5;
   $tmp_buffer$0 = 0;
  }
 } else {
  $ret$0 = -95;
  $tmp_buffer$0 = 0;
 } else {
  $ret$0 = -95;
  $tmp_buffer$0 = 0;
 } else {
  $ret$0 = -95;
  $tmp_buffer$0 = 0;
 } else {
  $ret$0 = -95;
  $tmp_buffer$0 = 0;
 } else {
  $ret$0 = -95;
  $tmp_buffer$0 = 0;
 } else {
  $ret$0 = -95;
  $tmp_buffer$0 = 0;
 } else {
  $ret$0 = -5;
  $tmp_buffer$0 = 0;
 }
 _free($tmp_buffer$0);
 _fclose($3 | 0) | 0;
 $$0 = $ret$0;
 return $$0 | 0;
}

function _png_crc_finish($png_ptr, $skip) {
 $png_ptr = $png_ptr | 0;
 $skip = $skip | 0;
 var $$0$ = 0, $$0$$us = 0, $$01 = 0, $$02 = 0, $$02$us = 0, $12 = 0, $13 = 0, $42 = 0, $8 = 0, $crc_bytes$i = 0, $tmpbuf = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 $crc_bytes$i = sp + 1024 | 0;
 $tmpbuf = sp;
 if ($skip) if (!$png_ptr) {
  $$02$us = $skip;
  while (1) {
   $$0$$us = $$02$us >>> 0 < 1024 ? $$02$us : 1024;
   if (($$02$us | 0) == ($$0$$us | 0)) break; else $$02$us = $$02$us - $$0$$us | 0;
  }
 } else {
  $$02 = $skip;
  while (1) {
   $$0$ = $$02 >>> 0 < 1024 ? $$02 : 1024;
   _png_read_data($png_ptr, $tmpbuf, $$0$);
   _png_calculate_crc($png_ptr, $tmpbuf, $$0$);
   if (($$02 | 0) == ($$0$ | 0)) break; else $$02 = $$02 - $$0$ | 0;
  }
 }
 $8 = $png_ptr + 376 | 0;
 $12 = $png_ptr + 212 | 0;
 $13 = HEAP32[$12 >> 2] | 0;
 if (!(HEAP32[$8 >> 2] & 536870912)) {
  HEAP32[$png_ptr + 800 >> 2] = 129;
  _png_read_data($png_ptr, $crc_bytes$i, 4);
  if ($13 & 2048) {
   $$01 = 0;
   STACKTOP = sp;
   return $$01 | 0;
  }
 } else {
  HEAP32[$png_ptr + 800 >> 2] = 129;
  _png_read_data($png_ptr, $crc_bytes$i, 4);
  if (($13 & 768 | 0) == 768) {
   $$01 = 0;
   STACKTOP = sp;
   return $$01 | 0;
  }
 }
 if (((HEAPU8[$crc_bytes$i + 1 >> 0] | 0) << 16 | (HEAPU8[$crc_bytes$i >> 0] | 0) << 24 | (HEAPU8[$crc_bytes$i + 2 >> 0] | 0) << 8 | (HEAPU8[$crc_bytes$i + 3 >> 0] | 0) | 0) == (HEAP32[$png_ptr + 412 >> 2] | 0)) {
  $$01 = 0;
  STACKTOP = sp;
  return $$01 | 0;
 }
 $42 = HEAP32[$12 >> 2] | 0;
 if (!(HEAP32[$8 >> 2] & 536870912)) {
  if (!($42 & 1024)) _png_chunk_error($png_ptr, 75456);
 } else if ($42 & 512) _png_chunk_error($png_ptr, 75456);
 _png_chunk_warning($png_ptr, 75456);
 $$01 = 1;
 STACKTOP = sp;
 return $$01 | 0;
}

function _inflateReset2($strm, $windowBits) {
 $strm = $strm | 0;
 $windowBits = $windowBits | 0;
 var $$0 = 0, $$02 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $20 = 0, $30 = 0, $40 = 0, $wrap$0 = 0;
 if (!$strm) {
  $$0 = -2;
  return $$0 | 0;
 }
 $1 = $strm + 28 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!$2) {
  $$0 = -2;
  return $$0 | 0;
 }
 if (($windowBits | 0) < 0) {
  $$02 = 0 - $windowBits | 0;
  $wrap$0 = 0;
 } else {
  $$02 = ($windowBits | 0) < 48 ? $windowBits & 15 : $windowBits;
  $wrap$0 = ($windowBits >> 4) + 1 | 0;
 }
 switch ($$02 | 0) {
 case 0:
 case 8:
 case 9:
 case 10:
 case 11:
 case 12:
 case 13:
 case 14:
 case 15:
  break;
 default:
  {
   $$0 = -2;
   return $$0 | 0;
  }
 }
 $10 = $2 + 52 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 $$pre = $2 + 36 | 0;
 if ($11) if ((HEAP32[$$pre >> 2] | 0) != ($$02 | 0)) {
  FUNCTION_TABLE_vii[HEAP32[$strm + 36 >> 2] & 127](HEAP32[$strm + 40 >> 2] | 0, $11);
  HEAP32[$10 >> 2] = 0;
 }
 HEAP32[$2 + 8 >> 2] = $wrap$0;
 HEAP32[$$pre >> 2] = $$02;
 $20 = HEAP32[$1 >> 2] | 0;
 if (!$20) {
  $$0 = -2;
  return $$0 | 0;
 }
 HEAP32[$20 + 40 >> 2] = 0;
 HEAP32[$20 + 44 >> 2] = 0;
 HEAP32[$20 + 48 >> 2] = 0;
 HEAP32[$20 + 28 >> 2] = 0;
 HEAP32[$strm + 20 >> 2] = 0;
 HEAP32[$strm + 8 >> 2] = 0;
 HEAP32[$strm + 24 >> 2] = 0;
 $30 = HEAP32[$20 + 8 >> 2] | 0;
 if ($30) HEAP32[$strm + 48 >> 2] = $30 & 1;
 HEAP32[$20 >> 2] = 0;
 HEAP32[$20 + 4 >> 2] = 0;
 HEAP32[$20 + 12 >> 2] = 0;
 HEAP32[$20 + 20 >> 2] = 32768;
 HEAP32[$20 + 32 >> 2] = 0;
 HEAP32[$20 + 56 >> 2] = 0;
 HEAP32[$20 + 60 >> 2] = 0;
 $40 = $20 + 1328 | 0;
 HEAP32[$20 + 108 >> 2] = $40;
 HEAP32[$20 + 80 >> 2] = $40;
 HEAP32[$20 + 76 >> 2] = $40;
 HEAP32[$20 + 7104 >> 2] = 1;
 HEAP32[$20 + 7108 >> 2] = -1;
 $$0 = 0;
 return $$0 | 0;
}

function __Z12mlua_raycastP9lua_State($L) {
 $L = $L | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $13 = 0.0, $14 = 0.0, $16 = 0.0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $30 = 0, $5 = 0.0, $7 = 0.0, $8 = 0.0, $callback = 0, $callback_ref$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $callback = sp + 24 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 8 | 0;
 if (!$L) ___assert_fail(23976, 2472, 362, 2968);
 if (!(HEAP32[632] | 0)) _luaL_error($L, 2984, sp) | 0;
 $5 = +_luaL_checknumber($L, 1);
 $7 = $5 / +HEAPF32[616];
 $8 = +_luaL_checknumber($L, 2);
 $10 = $8 / +HEAPF32[616];
 $11 = +_luaL_checknumber($L, 3);
 $13 = $11 / +HEAPF32[616];
 $14 = +_luaL_checknumber($L, 4);
 $16 = $14 / +HEAPF32[616];
 if ((_lua_gettop($L) | 0) == 5) {
  _lua_pushvalue($L, 5);
  $callback_ref$0 = _luaL_ref($L, -1001e3) | 0;
 } else $callback_ref$0 = -1;
 HEAP32[$callback >> 2] = 3864;
 HEAP32[$callback + 4 >> 2] = $L;
 HEAP32[$callback + 8 >> 2] = $callback_ref$0;
 $22 = $callback + 12 | 0;
 HEAP32[$22 >> 2] = 0;
 $23 = $callback + 16 | 0;
 HEAPF32[$23 >> 2] = 0.0;
 $24 = $callback + 20 | 0;
 HEAPF32[$24 >> 2] = 0.0;
 if ($7 != $13 | $10 != $16) {
  $27 = HEAP32[632] | 0;
  HEAPF32[$0 >> 2] = $7;
  HEAPF32[$0 + 4 >> 2] = $10;
  HEAPF32[$1 >> 2] = $13;
  HEAPF32[$1 + 4 >> 2] = $16;
  __ZNK7b2World7RayCastEP17b2RayCastCallbackRK6b2Vec2S4_($27, $callback, $0, $1);
 }
 _luaL_unref($L, -1001e3, $callback_ref$0);
 $30 = HEAP32[$22 >> 2] | 0;
 if (!$30) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 __Z9push_bodyP9lua_StateP4Body($L, HEAP32[(HEAP32[$30 + 8 >> 2] | 0) + 148 >> 2] | 0);
 _lua_pushnumber($L, +HEAPF32[$23 >> 2] * +HEAPF32[616]);
 _lua_pushnumber($L, +HEAPF32[$24 >> 2] * +HEAPF32[616]);
 $$0 = 3;
 STACKTOP = sp;
 return $$0 | 0;
}

function __Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi($vOut, $vIn, $normal, $offset, $vertexIndexA) {
 $vOut = $vOut | 0;
 $vIn = $vIn | 0;
 $normal = $normal | 0;
 $offset = +$offset;
 $vertexIndexA = $vertexIndexA | 0;
 var $0 = 0.0, $10 = 0, $13 = 0, $17 = 0.0, $21 = 0, $25 = 0.0, $28 = 0.0, $31 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0.0, $44 = 0, $5 = 0, $9 = 0.0, $numOut$0 = 0, $numOut$1 = 0, $numOut$2 = 0;
 $0 = +HEAPF32[$normal >> 2];
 $4 = +HEAPF32[$normal + 4 >> 2];
 $5 = $vIn + 4 | 0;
 $9 = $0 * +HEAPF32[$vIn >> 2] + $4 * +HEAPF32[$5 >> 2] - $offset;
 $10 = $vIn + 12 | 0;
 $13 = $vIn + 16 | 0;
 $17 = $0 * +HEAPF32[$10 >> 2] + $4 * +HEAPF32[$13 >> 2] - $offset;
 if (!($9 <= 0.0)) $numOut$0 = 0; else {
  HEAP32[$vOut + 0 >> 2] = HEAP32[$vIn + 0 >> 2];
  HEAP32[$vOut + 4 >> 2] = HEAP32[$vIn + 4 >> 2];
  HEAP32[$vOut + 8 >> 2] = HEAP32[$vIn + 8 >> 2];
  $numOut$0 = 1;
 }
 if (!($17 <= 0.0)) $numOut$1 = $numOut$0; else {
  $21 = $vOut + ($numOut$0 * 12 | 0) | 0;
  HEAP32[$21 + 0 >> 2] = HEAP32[$10 + 0 >> 2];
  HEAP32[$21 + 4 >> 2] = HEAP32[$10 + 4 >> 2];
  HEAP32[$21 + 8 >> 2] = HEAP32[$10 + 8 >> 2];
  $numOut$1 = $numOut$0 + 1 | 0;
 }
 if (!($9 * $17 < 0.0)) {
  $numOut$2 = $numOut$1;
  return $numOut$2 | 0;
 }
 $25 = $9 / ($9 - $17);
 $28 = +HEAPF32[$vIn >> 2];
 $31 = +HEAPF32[$5 >> 2];
 $37 = +($28 + $25 * (+HEAPF32[$10 >> 2] - $28));
 $38 = +($31 + $25 * (+HEAPF32[$13 >> 2] - $31));
 $39 = $vOut + ($numOut$1 * 12 | 0) | 0;
 HEAPF32[$39 >> 2] = $37;
 HEAPF32[$39 + 4 >> 2] = $38;
 $44 = $vOut + ($numOut$1 * 12 | 0) + 8 | 0;
 HEAP8[$44 >> 0] = $vertexIndexA;
 HEAP8[$44 + 1 >> 0] = HEAP8[$vIn + 9 >> 0] | 0;
 HEAP8[$44 + 2 >> 0] = 0;
 HEAP8[$44 + 3 >> 0] = 1;
 $numOut$2 = $numOut$1 + 1 | 0;
 return $numOut$2 | 0;
}

function _clearvalues($g, $l, $f) {
 $g = $g | 0;
 $l = $l | 0;
 $f = $f | 0;
 var $$08 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $20 = 0, $33 = 0, $35 = 0, $36 = 0, $42 = 0, $5 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $i$03 = 0, $n$04 = 0;
 if (($l | 0) == ($f | 0)) return; else $$08 = $l;
 do {
  $5 = $$08 + 16 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  $7 = $6 + ((1 << (HEAPU8[$$08 + 7 >> 0] | 0)) * 20 | 0) | 0;
  $8 = $$08 + 8 | 0;
  if (!(HEAP32[$8 >> 2] | 0)) $33 = $6; else {
   $11 = $$08 + 12 | 0;
   $i$03 = 0;
   do {
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = $12 + ($i$03 << 3) + 4 | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    do if ($14 & 64) {
     $20 = HEAP32[$12 + ($i$03 << 3) >> 2] | 0;
     if (($14 & 15 | 0) != 4) {
      if (!(HEAP8[$20 + 5 >> 0] & 3)) break;
      HEAP32[$13 >> 2] = 0;
      break;
     }
     if ($20) if (HEAP8[$20 + 5 >> 0] & 3) _reallymarkobject($g, $20);
    } while (0);
    $i$03 = $i$03 + 1 | 0;
   } while ($i$03 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0);
   $33 = HEAP32[$5 >> 2] | 0;
  }
  if ($33 >>> 0 < $7 >>> 0) {
   $n$04 = $33;
   do {
    $35 = $n$04 + 4 | 0;
    $36 = HEAP32[$35 >> 2] | 0;
    do if (!(($36 | 0) == 0 | ($36 & 64 | 0) == 0)) {
     $42 = HEAP32[$n$04 >> 2] | 0;
     if (($36 & 15 | 0) == 4) {
      if (!$42) break;
      if (!(HEAP8[$42 + 5 >> 0] & 3)) break;
      _reallymarkobject($g, $42);
      break;
     }
     if (HEAP8[$42 + 5 >> 0] & 3) {
      HEAP32[$35 >> 2] = 0;
      $52 = $n$04 + 12 | 0;
      if (HEAP32[$52 >> 2] & 64) if (HEAP8[(HEAP32[$n$04 + 8 >> 2] | 0) + 5 >> 0] & 3) HEAP32[$52 >> 2] = 10;
     }
    } while (0);
    $n$04 = $n$04 + 20 | 0;
   } while ($n$04 >>> 0 < $7 >>> 0);
  }
  $$08 = HEAP32[$$08 + 28 >> 2] | 0;
 } while (($$08 | 0) != ($f | 0));
 return;
}

function _lua_rawequal($L, $index1, $index2) {
 $L = $L | 0;
 $index1 = $index1 | 0;
 $index2 = $index2 | 0;
 var $$0$i = 0, $$0$i2 = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $31 = 0, $4 = 0, $43 = 0, $44 = 0, $48 = 0, $59 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($index1 | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($index1 << 3) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 59168;
 } else {
  if (($index1 | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($index1 << 3) | 0;
   break;
  }
  if (($index1 | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $16 = -1001e3 - $index1 | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 4 >> 2] | 0) == 22) $$0$i = 59168; else {
   $21 = HEAP32[$17 >> 2] | 0;
   if (($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0)) $$0$i = 59168; else $$0$i = $21 + 16 + ($16 + -1 << 3) | 0;
  }
 } while (0);
 do if (($index2 | 0) > 0) {
  $31 = (HEAP32[$1 >> 2] | 0) + ($index2 << 3) | 0;
  $$0$i2 = $31 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $31 : 59168;
 } else {
  if (($index2 | 0) >= -1000999) {
   $$0$i2 = (HEAP32[$L + 8 >> 2] | 0) + ($index2 << 3) | 0;
   break;
  }
  if (($index2 | 0) == -1001e3) {
   $$0$i2 = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $43 = -1001e3 - $index2 | 0;
  $44 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$44 + 4 >> 2] | 0) == 22) {
   $59 = 0;
   return $59 | 0;
  }
  $48 = HEAP32[$44 >> 2] | 0;
  if (($43 | 0) > (HEAPU8[$48 + 6 >> 0] | 0 | 0)) {
   $59 = 0;
   return $59 | 0;
  } else {
   $$0$i2 = $48 + 16 + ($43 + -1 << 3) | 0;
   break;
  }
 } while (0);
 if (($$0$i | 0) == 59168 | ($$0$i2 | 0) == 59168) {
  $59 = 0;
  return $59 | 0;
 }
 $59 = _luaV_equalobj(0, $$0$i, $$0$i2) | 0;
 return $59 | 0;
}

function _png_destroy_read_struct($png_ptr_ptr, $info_ptr_ptr, $end_info_ptr_ptr) {
 $png_ptr_ptr = $png_ptr_ptr | 0;
 $info_ptr_ptr = $info_ptr_ptr | 0;
 $end_info_ptr_ptr = $end_info_ptr_ptr | 0;
 var $1 = 0, $11 = 0, $13 = 0, $14 = 0, $17 = 0, $19 = 0, $20 = 0, $23 = 0, $26 = 0, $28 = 0, $3 = 0, $30 = 0, $32 = 0, $5 = 0, $7 = 0, $9 = 0;
 if (!$png_ptr_ptr) return;
 $1 = HEAP32[$png_ptr_ptr >> 2] | 0;
 if (!$1) return;
 _png_destroy_info_struct($1, $end_info_ptr_ptr);
 _png_destroy_info_struct($1, $info_ptr_ptr);
 HEAP32[$png_ptr_ptr >> 2] = 0;
 _png_destroy_gamma_table($1);
 $3 = $1 + 728 | 0;
 _png_free($1, HEAP32[$3 >> 2] | 0);
 HEAP32[$3 >> 2] = 0;
 $5 = $1 + 804 | 0;
 _png_free($1, HEAP32[$5 >> 2] | 0);
 HEAP32[$5 >> 2] = 0;
 $7 = $1 + 788 | 0;
 _png_free($1, HEAP32[$7 >> 2] | 0);
 HEAP32[$7 >> 2] = 0;
 $9 = $1 + 612 | 0;
 _png_free($1, HEAP32[$9 >> 2] | 0);
 HEAP32[$9 >> 2] = 0;
 $11 = $1 + 616 | 0;
 _png_free($1, HEAP32[$11 >> 2] | 0);
 HEAP32[$11 >> 2] = 0;
 $13 = $1 + 676 | 0;
 $14 = HEAP32[$13 >> 2] | 0;
 if (!($14 & 4096)) $20 = $14; else {
  $17 = $1 + 416 | 0;
  _png_zfree($1, HEAP32[$17 >> 2] | 0);
  HEAP32[$17 >> 2] = 0;
  $20 = HEAP32[$13 >> 2] | 0;
 }
 $19 = $20 & -4097;
 HEAP32[$13 >> 2] = $19;
 if (!($20 & 8192)) $26 = $19; else {
  $23 = $1 + 528 | 0;
  _png_free($1, HEAP32[$23 >> 2] | 0);
  HEAP32[$23 >> 2] = 0;
  $26 = HEAP32[$13 >> 2] | 0;
 }
 HEAP32[$13 >> 2] = $26 & -8193;
 _inflateEnd($1 + 224 | 0) | 0;
 $28 = $1 + 568 | 0;
 _png_free($1, HEAP32[$28 >> 2] | 0);
 HEAP32[$28 >> 2] = 0;
 $30 = $1 + 772 | 0;
 _png_free($1, HEAP32[$30 >> 2] | 0);
 HEAP32[$30 >> 2] = 0;
 $32 = $1 + 696 | 0;
 _png_free($1, HEAP32[$32 >> 2] | 0);
 HEAP32[$32 >> 2] = 0;
 _png_destroy_png_struct($1);
 return;
}

function _luaV_gettable($L, $t, $key, $val) {
 $L = $L | 0;
 $t = $t | 0;
 $key = $key | 0;
 $val = $val | 0;
 var $$05 = 0, $0 = 0, $11 = 0, $20 = 0, $22 = 0, $27 = 0, $28 = 0, $3 = 0, $32 = 0, $34 = 0, $37 = 0, $5 = 0, $6 = 0, $loop$04 = 0, $tm$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $0 = $L + 12 | 0;
 $$05 = $t;
 $3 = HEAP32[$t + 4 >> 2] | 0;
 $loop$04 = 0;
 while (1) {
  if (($3 | 0) == 69) {
   $5 = HEAP32[$$05 >> 2] | 0;
   $6 = _luaH_get($5, $key) | 0;
   if (HEAP32[$6 + 4 >> 2] | 0) {
    label = 9;
    break;
   }
   $11 = HEAP32[$5 + 24 >> 2] | 0;
   if (!$11) {
    label = 9;
    break;
   }
   if (HEAP8[$11 + 6 >> 0] & 1) {
    label = 9;
    break;
   }
   $20 = _luaT_gettm($11, 0, HEAP32[(HEAP32[$0 >> 2] | 0) + 136 >> 2] | 0) | 0;
   if (!$20) {
    label = 9;
    break;
   }
   $37 = HEAP32[$20 + 4 >> 2] | 0;
   $tm$0 = $20;
  } else {
   $32 = _luaT_gettmbyobj($L, $$05, 0) | 0;
   $34 = HEAP32[$32 + 4 >> 2] | 0;
   if (!$34) {
    label = 11;
    break;
   } else {
    $37 = $34;
    $tm$0 = $32;
   }
  }
  $loop$04 = $loop$04 + 1 | 0;
  if (($37 & 15 | 0) == 6) {
   label = 13;
   break;
  }
  if (($loop$04 | 0) >= 2e3) {
   label = 14;
   break;
  } else {
   $$05 = $tm$0;
   $3 = $37;
  }
 }
 if ((label | 0) == 9) {
  $22 = $6;
  $27 = HEAP32[$22 + 4 >> 2] | 0;
  $28 = $val;
  HEAP32[$28 >> 2] = HEAP32[$22 >> 2];
  HEAP32[$28 + 4 >> 2] = $27;
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 11) _luaG_typeerror($L, $$05, 63952); else if ((label | 0) == 13) {
  _luaT_callTM($L, $tm$0, $$05, $key, $val, 1);
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 14) _luaG_runerror($L, 63960, $vararg_buffer);
}

function _updatewindow($strm, $end, $copy) {
 $strm = $strm | 0;
 $end = $end | 0;
 $copy = $copy | 0;
 var $$0 = 0, $1 = 0, $12 = 0, $14 = 0, $15 = 0, $19 = 0, $2 = 0, $22 = 0, $26 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $37 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $copy$ = 0;
 $1 = HEAP32[$strm + 28 >> 2] | 0;
 $2 = $1 + 52 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if (!$3) {
  $12 = FUNCTION_TABLE_iiii[HEAP32[$strm + 32 >> 2] & 31](HEAP32[$strm + 40 >> 2] | 0, 1 << HEAP32[$1 + 36 >> 2], 1) | 0;
  HEAP32[$2 >> 2] = $12;
  if (!$12) {
   $$0 = 1;
   return $$0 | 0;
  } else $26 = $12;
 } else $26 = $3;
 $14 = $1 + 40 | 0;
 $15 = HEAP32[$14 >> 2] | 0;
 if (!$15) {
  $19 = 1 << HEAP32[$1 + 36 >> 2];
  HEAP32[$14 >> 2] = $19;
  HEAP32[$1 + 48 >> 2] = 0;
  HEAP32[$1 + 44 >> 2] = 0;
  $22 = $19;
 } else $22 = $15;
 if ($22 >>> 0 <= $copy >>> 0) {
  _memcpy($26 | 0, $end + (0 - $22) | 0, $22 | 0) | 0;
  HEAP32[$1 + 48 >> 2] = 0;
  HEAP32[$1 + 44 >> 2] = HEAP32[$14 >> 2];
  $$0 = 0;
  return $$0 | 0;
 }
 $30 = $1 + 48 | 0;
 $31 = HEAP32[$30 >> 2] | 0;
 $32 = $22 - $31 | 0;
 $copy$ = $32 >>> 0 > $copy >>> 0 ? $copy : $32;
 _memcpy($26 + $31 | 0, $end + (0 - $copy) | 0, $copy$ | 0) | 0;
 $37 = $copy - $copy$ | 0;
 if (($copy$ | 0) != ($copy | 0)) {
  _memcpy(HEAP32[$2 >> 2] | 0, $end + (0 - $37) | 0, $37 | 0) | 0;
  HEAP32[$30 >> 2] = $37;
  HEAP32[$1 + 44 >> 2] = HEAP32[$14 >> 2];
  $$0 = 0;
  return $$0 | 0;
 }
 $45 = (HEAP32[$30 >> 2] | 0) + $copy | 0;
 $46 = HEAP32[$14 >> 2] | 0;
 HEAP32[$30 >> 2] = ($45 | 0) == ($46 | 0) ? 0 : $45;
 $48 = $1 + 44 | 0;
 $49 = HEAP32[$48 >> 2] | 0;
 if ($49 >>> 0 >= $46 >>> 0) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP32[$48 >> 2] = $49 + $copy;
 $$0 = 0;
 return $$0 | 0;
}

function __ZN12b2ChainShape11CreateChainEPK6b2Vec2i($this, $vertices, $count) {
 $this = $this | 0;
 $vertices = $vertices | 0;
 $count = $count | 0;
 var $$off0 = 0, $$off32 = 0, $0 = 0, $15 = 0.0, $16 = 0.0, $18 = 0, $24 = 0.0, $26 = 0.0, $27 = 0.0, $3 = 0, $33 = 0, $36 = 0, $7 = 0, $i$02 = 0, label = 0;
 $0 = $this + 12 | 0;
 if (HEAP32[$0 >> 2] | 0) ___assert_fail(81336, 81376, 55, 81520);
 $3 = $this + 16 | 0;
 if (HEAP32[$3 >> 2] | 0) ___assert_fail(81336, 81376, 55, 81520);
 if (($count | 0) <= 1) ___assert_fail(81536, 81376, 56, 81520);
 $7 = $vertices;
 $$off0 = HEAP32[$7 >> 2] | 0;
 $$off32 = HEAP32[$7 + 4 >> 2] | 0;
 $i$02 = 1;
 while (1) {
  $15 = (HEAP32[tempDoublePtr >> 2] = $$off0, +HEAPF32[tempDoublePtr >> 2]);
  $16 = (HEAP32[tempDoublePtr >> 2] = $$off32, +HEAPF32[tempDoublePtr >> 2]);
  $18 = $vertices + ($i$02 << 3) | 0;
  $$off0 = HEAP32[$18 >> 2] | 0;
  $$off32 = HEAP32[$18 + 4 >> 2] | 0;
  $24 = (HEAP32[tempDoublePtr >> 2] = $$off0, +HEAPF32[tempDoublePtr >> 2]);
  $26 = $15 - $24;
  $27 = $16 - (HEAP32[tempDoublePtr >> 2] = $$off32, +HEAPF32[tempDoublePtr >> 2]);
  $i$02 = $i$02 + 1 | 0;
  if (!($26 * $26 + $27 * $27 > 2.499999936844688e-05)) {
   label = 9;
   break;
  }
  if (($i$02 | 0) >= ($count | 0)) {
   label = 10;
   break;
  }
 }
 if ((label | 0) == 9) ___assert_fail(81472, 81376, 62, 81520); else if ((label | 0) == 10) {
  HEAP32[$3 >> 2] = $count;
  $33 = __Z7b2Alloci($count << 3) | 0;
  HEAP32[$0 >> 2] = $33;
  _memcpy($33 | 0, $vertices | 0, HEAP32[$3 >> 2] << 3 | 0) | 0;
  $36 = $this + 20 | 0;
  HEAP32[$36 + 0 >> 2] = 0;
  HEAP32[$36 + 4 >> 2] = 0;
  HEAP32[$36 + 8 >> 2] = 0;
  HEAP32[$36 + 12 >> 2] = 0;
  HEAP16[$36 + 16 >> 1] = 0;
  return;
 }
}

function _prep_huffman($f) {
 $f = $f | 0;
 var $$0$i1 = 0, $$pr$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $14 = 0, $19 = 0, $22 = 0, $29 = 0, $33 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 $0 = $f + 1412 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (($1 | 0) >= 25) return;
 $4 = $f + 1408 | 0;
 if (!$1) HEAP32[$4 >> 2] = 0;
 $5 = $f + 1400 | 0;
 $6 = $f + 1392 | 0;
 $7 = $f + 1416 | 0;
 $8 = $f + 32 | 0;
 $9 = $f + 20 | 0;
 $10 = $f + 112 | 0;
 $11 = $f + 40 | 0;
 while (1) {
  $$pre = HEAP8[$6 >> 0] | 0;
  $14 = $$pre << 24 >> 24 == 0;
  if (!(HEAP32[$5 >> 2] | 0)) if ($14) {
   if (!(_next_segment($f) | 0)) {
    label = 19;
    break;
   }
   $$pr$i = HEAP8[$6 >> 0] | 0;
   if (!($$pr$i << 24 >> 24)) {
    label = 10;
    break;
   } else $19 = $$pr$i;
  } else $19 = $$pre; else if ($14) {
   label = 19;
   break;
  } else $19 = $$pre;
  HEAP8[$6 >> 0] = $19 + -1 << 24 >> 24;
  HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1;
  $22 = HEAP32[$8 >> 2] | 0;
  do if (!$22) {
   $29 = _fgetc(HEAP32[$9 >> 2] | 0) | 0;
   if (($29 | 0) == -1) {
    HEAP32[$10 >> 2] = 1;
    $$0$i1 = 0;
    break;
   } else {
    $$0$i1 = $29 & 255;
    break;
   }
  } else if ($22 >>> 0 < (HEAP32[$11 >> 2] | 0) >>> 0) {
   HEAP32[$8 >> 2] = $22 + 1;
   $$0$i1 = HEAP8[$22 >> 0] | 0;
   break;
  } else {
   HEAP32[$10 >> 2] = 1;
   $$0$i1 = 0;
   break;
  } while (0);
  $33 = HEAP32[$0 >> 2] | 0;
  HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + (($$0$i1 & 255) << $33);
  $37 = $33 + 8 | 0;
  HEAP32[$0 >> 2] = $37;
  if (($37 | 0) >= 25) {
   label = 19;
   break;
  }
 }
 if ((label | 0) == 10) ___assert_fail(79096, 78904, 1503, 79120); else if ((label | 0) == 19) return;
}

function _png_read_filter_row_paeth_multibyte_pixel($row_info, $row, $prev_row) {
 $row_info = $row_info | 0;
 $row = $row | 0;
 $prev_row = $prev_row | 0;
 var $$0$lcssa = 0, $$01$lcssa = 0, $$016 = 0, $$07 = 0, $$124 = 0, $$15 = 0, $20 = 0, $22 = 0, $25 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $44 = 0, $5 = 0, $scevgep14 = 0, $scevgep1617 = 0, $$07$looptemp = 0;
 $4 = ((HEAPU8[$row_info + 11 >> 0] | 0) + 7 | 0) >>> 3;
 $5 = $row + $4 | 0;
 if (!$4) {
  $$0$lcssa = $row;
  $$01$lcssa = $prev_row;
 } else {
  $scevgep14 = $row + 1 | 0;
  $scevgep1617 = ($5 >>> 0 > $scevgep14 >>> 0 ? $5 : $scevgep14) + (0 - $row) | 0;
  $$016 = $prev_row;
  $$07 = $row;
  while (1) {
   $$07$looptemp = $$07;
   $$07 = $$07 + 1 | 0;
   HEAP8[$$07$looptemp >> 0] = (HEAPU8[$$016 >> 0] | 0) + (HEAPU8[$$07$looptemp >> 0] | 0);
   if ($$07 >>> 0 >= $5 >>> 0) break; else $$016 = $$016 + 1 | 0;
  }
  $$0$lcssa = $$07;
  $$01$lcssa = $prev_row + $scevgep1617 | 0;
 }
 $20 = $row + (HEAP32[$row_info + 4 >> 2] | 0) | 0;
 if ($$0$lcssa >>> 0 >= $20 >>> 0) return;
 $22 = 0 - $4 | 0;
 $$124 = $$01$lcssa;
 $$15 = $$0$lcssa;
 while (1) {
  $25 = HEAPU8[$$124 + $22 >> 0] | 0;
  $28 = HEAPU8[$$15 + $22 >> 0] | 0;
  $31 = HEAPU8[$$124 >> 0] | 0;
  $32 = $31 - $25 | 0;
  $33 = $28 - $25 | 0;
  $36 = ($32 | 0) < 0 ? 0 - $32 | 0 : $32;
  $39 = ($33 | 0) < 0 ? 0 - $33 | 0 : $33;
  $40 = $32 + $33 | 0;
  $44 = ($39 | 0) < ($36 | 0);
  HEAP8[$$15 >> 0] = (((($40 | 0) < 0 ? 0 - $40 | 0 : $40) | 0) < (($44 ? $39 : $36) | 0) ? $25 : $44 ? $31 : $28) + (HEAPU8[$$15 >> 0] | 0);
  $$15 = $$15 + 1 | 0;
  if (($$15 | 0) == ($20 | 0)) break; else $$124 = $$124 + 1 | 0;
 }
 return;
}

function _luaC_step($L) {
 $L = $L | 0;
 var $$idx = 0, $$idx1 = 0, $$idx1$val = 0, $$pre$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $15 = 0, $18 = 0, $20 = 0, $28 = 0, $3 = 0, $33 = 0, $34 = 0, $37 = 0, $43 = 0, $44 = 0, $debt$0 = 0, $i$04$i = 0, label = 0;
 $0 = $L + 12 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $$idx = $1 + 12 | 0;
 $$idx1 = $1 + 116 | 0;
 $$idx1$val = HEAP32[$$idx1 >> 2] | 0;
 $3 = ((HEAP32[$$idx >> 2] | 0) / 200 | 0) + 1 | 0;
 if (($3 | 0) < (2147483647 / ($$idx1$val | 0) | 0 | 0)) $44 = Math_imul($3, $$idx1$val) | 0; else $44 = 2147483647;
 if (!(HEAP8[$1 + 51 >> 0] | 0)) {
  _luaE_setdebt($1, -2e4);
  return;
 }
 $10 = $1 + 49 | 0;
 $debt$0 = $44;
 do {
  $debt$0 = $debt$0 - (_singlestep($L) | 0) | 0;
  $15 = (HEAP8[$10 >> 0] | 0) == 7;
  if (($debt$0 | 0) <= -2e3) {
   label = 8;
   break;
  }
 } while (!$15);
 if ((label | 0) == 8) if (!$15) {
  _luaE_setdebt($1, (($debt$0 | 0) / (HEAP32[$$idx1 >> 2] | 0) | 0) * 200 | 0);
  $33 = HEAP32[$0 >> 2] | 0;
  $34 = $33 + 84 | 0;
  $$pre$pre$i = $33 + 108 | 0;
  L14 : do if (!(HEAP32[$34 >> 2] | 0)) $43 = 0; else {
   $i$04$i = 0;
   while (1) {
    $37 = HEAP32[$$pre$pre$i >> 2] | 0;
    if ($i$04$i >>> 0 >= $37 >>> 0) break;
    _GCTM($L, 1);
    if (!(HEAP32[$34 >> 2] | 0)) {
     $43 = 0;
     break L14;
    } else $i$04$i = $i$04$i + 1 | 0;
   }
   $43 = $37 << 1;
  } while (0);
  HEAP32[$$pre$pre$i >> 2] = $43;
  return;
 }
 $18 = ((HEAP32[$1 + 20 >> 2] | 0) >>> 0) / 100 | 0;
 $20 = HEAP32[$1 + 112 >> 2] | 0;
 if (($20 | 0) < (2147483647 / ($18 >>> 0) | 0 | 0)) $28 = Math_imul($20, $18) | 0; else $28 = 2147483647;
 _luaE_setdebt($1, (HEAP32[$1 + 8 >> 2] | 0) - $28 + (HEAP32[$$idx >> 2] | 0) | 0);
 return;
}

function _luaK_storevar($fs, $var, $ex) {
 $fs = $fs | 0;
 $var = $var | 0;
 $ex = $ex | 0;
 var $$0$i = 0, $$pre$phi$iZ2D = 0, $0 = 0, $11 = 0, $23 = 0, $24 = 0, $37 = 0, $4 = 0, $41 = 0, $42 = 0, $57 = 0, $64 = 0, label = 0;
 $0 = HEAP32[$var >> 2] | 0;
 if (($0 | 0) == 10) {
  $37 = $var + 4 | 0;
  $41 = (HEAP8[$37 + 3 >> 0] | 0) == 8 ? 10 : 8;
  $42 = _luaK_exp2RK($fs, $ex) | 0;
  _luaK_code($fs, $42 << 14 | $41 | HEAPU8[$37 + 2 >> 0] << 6 | HEAPU16[$37 >> 1] << 23) | 0;
 } else if (($0 | 0) == 8) {
  if ((HEAP32[$ex >> 2] | 0) == 7) {
   $4 = HEAP32[$ex + 4 >> 2] | 0;
   if (!($4 & 256)) if ((HEAPU8[$fs + 42 >> 0] | 0) <= ($4 | 0)) {
    $11 = $fs + 44 | 0;
    HEAP8[$11 >> 0] = (HEAP8[$11 >> 0] | 0) + -1 << 24 >> 24;
   }
  }
  _exp2reg($fs, $ex, HEAP32[$var + 4 >> 2] | 0);
  return;
 } else if (($0 | 0) == 9) {
  _luaK_dischargevars($fs, $ex);
  if ((HEAP32[$ex >> 2] | 0) == 7) {
   $23 = $ex + 4 | 0;
   $24 = HEAP32[$23 >> 2] | 0;
   if ((HEAP32[$ex + 8 >> 2] | 0) == (HEAP32[$ex + 12 >> 2] | 0)) $$0$i = $24; else if (($24 | 0) < (HEAPU8[$fs + 42 >> 0] | 0)) {
    $$pre$phi$iZ2D = $23;
    label = 12;
   } else {
    _exp2reg($fs, $ex, $24);
    $$0$i = HEAP32[$23 >> 2] | 0;
   }
  } else {
   $$pre$phi$iZ2D = $ex + 4 | 0;
   label = 12;
  }
  if ((label | 0) == 12) {
   _luaK_exp2nextreg($fs, $ex);
   $$0$i = HEAP32[$$pre$phi$iZ2D >> 2] | 0;
  }
  _luaK_code($fs, $$0$i << 6 | HEAP32[$var + 4 >> 2] << 23 | 9) | 0;
 }
 if ((HEAP32[$ex >> 2] | 0) != 7) return;
 $57 = HEAP32[$ex + 4 >> 2] | 0;
 if ($57 & 256) return;
 if ((HEAPU8[$fs + 42 >> 0] | 0) > ($57 | 0)) return;
 $64 = $fs + 44 | 0;
 HEAP8[$64 >> 0] = (HEAP8[$64 >> 0] | 0) + -1 << 24 >> 24;
 return;
}

function _luaD_hook($L, $event, $line) {
 $L = $L | 0;
 $event = $event | 0;
 $line = $line | 0;
 var $$$$i = 0, $$$i = 0, $1 = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $27 = 0, $3 = 0, $30 = 0, $31 = 0, $36 = 0, $37 = 0, $7 = 0, $8 = 0, $9 = 0, $ar = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $vararg_buffer = sp;
 $ar = sp + 4 | 0;
 $1 = HEAP32[$L + 84 >> 2] | 0;
 if (!$1) {
  STACKTOP = sp;
  return;
 }
 $3 = $L + 109 | 0;
 if (!(HEAP8[$3 >> 0] | 0)) {
  STACKTOP = sp;
  return;
 }
 $7 = HEAP32[$L + 16 >> 2] | 0;
 $8 = $L + 8 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 $10 = $L + 28 | 0;
 $12 = $9;
 $13 = HEAP32[$10 >> 2] | 0;
 $14 = $12 - $13 | 0;
 $15 = $7 + 4 | 0;
 $18 = (HEAP32[$15 >> 2] | 0) - $13 | 0;
 HEAP32[$ar >> 2] = $event;
 HEAP32[$ar + 20 >> 2] = $line;
 HEAP32[$ar + 96 >> 2] = $7;
 do if (((HEAP32[$L + 24 >> 2] | 0) - $12 | 0) < 168) {
  $27 = HEAP32[$L + 92 >> 2] | 0;
  if (($27 | 0) > 1e6) _luaD_throw($L, 6);
  $30 = ($14 >> 3) + 25 | 0;
  $31 = $27 << 1;
  $$$i = ($31 | 0) > 1e6 ? 1e6 : $31;
  $$$$i = ($$$i | 0) < ($30 | 0) ? $30 : $$$i;
  if (($$$$i | 0) > 1e6) {
   _luaD_reallocstack($L, 1000200);
   _luaG_runerror($L, 56208, $vararg_buffer);
  } else {
   _luaD_reallocstack($L, $$$$i);
   $36 = HEAP32[$8 >> 2] | 0;
   break;
  }
 } else $36 = $9; while (0);
 HEAP32[$15 >> 2] = $36 + 160;
 HEAP8[$3 >> 0] = 0;
 $37 = $7 + 34 | 0;
 HEAP8[$37 >> 0] = HEAPU8[$37 >> 0] | 4;
 FUNCTION_TABLE_vii[$1 & 127]($L, $ar);
 HEAP8[$3 >> 0] = 1;
 HEAP32[$15 >> 2] = (HEAP32[$10 >> 2] | 0) + $18;
 HEAP32[$8 >> 2] = (HEAP32[$10 >> 2] | 0) + $14;
 HEAP8[$37 >> 0] = HEAPU8[$37 >> 0] & 251;
 STACKTOP = sp;
 return;
}

function __ZN14CustomListener8PreSolveEP9b2ContactPK10b2Manifold($this, $contact, $0) {
 $this = $this | 0;
 $contact = $contact | 0;
 $0 = $0 | 0;
 var $1 = 0, $23 = 0, $31 = 0, $4 = 0, $5 = 0, $56 = 0, $57 = 0, $58 = 0, $8 = 0, $9 = 0, $manifold = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $manifold = sp;
 $1 = $this + 16 | 0;
 if ((HEAP32[$1 >> 2] | 0) == -1) {
  STACKTOP = sp;
  return;
 }
 $4 = $contact + 48 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $8 = $contact + 52 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 __ZN15b2WorldManifold10InitializeEPK10b2ManifoldRK11b2TransformfS5_f($manifold, $contact + 64 | 0, (HEAP32[$5 + 8 >> 2] | 0) + 12 | 0, +HEAPF32[(HEAP32[$5 + 12 >> 2] | 0) + 8 >> 2], (HEAP32[$9 + 8 >> 2] | 0) + 12 | 0, +HEAPF32[(HEAP32[$9 + 12 >> 2] | 0) + 8 >> 2]);
 $23 = $this + 4 | 0;
 _lua_rawgeti(HEAP32[$23 >> 2] | 0, -1001e3, HEAP32[$1 >> 2] | 0) | 0;
 $31 = HEAP32[(HEAP32[$8 >> 2] | 0) + 8 >> 2] | 0;
 __Z9push_bodyP9lua_StateP4Body(HEAP32[$23 >> 2] | 0, HEAP32[(HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] | 0) + 148 >> 2] | 0);
 __Z9push_bodyP9lua_StateP4Body(HEAP32[$23 >> 2] | 0, HEAP32[$31 + 148 >> 2] | 0);
 _lua_pushnumber(HEAP32[$23 >> 2] | 0, +HEAPF32[$manifold + 8 >> 2] * +HEAPF32[616]);
 _lua_pushnumber(HEAP32[$23 >> 2] | 0, +HEAPF32[$manifold + 12 >> 2] * +HEAPF32[616]);
 _lua_pushnumber(HEAP32[$23 >> 2] | 0, +HEAPF32[$manifold >> 2]);
 _lua_pushnumber(HEAP32[$23 >> 2] | 0, +HEAPF32[$manifold + 4 >> 2]);
 _call_lua_function(HEAP32[$23 >> 2] | 0, 6, 1);
 $56 = (_lua_toboolean(HEAP32[$23 >> 2] | 0, -1) | 0) != 0;
 $57 = $contact + 4 | 0;
 $58 = HEAP32[$57 >> 2] | 0;
 HEAP32[$57 >> 2] = $56 ? $58 | 4 : $58 & -5;
 STACKTOP = sp;
 return;
}

function _luaT_callTM($L, $f, $p1, $p2, $p3, $hasres) {
 $L = $L | 0;
 $f = $f | 0;
 $p1 = $p1 | 0;
 $p2 = $p2 | 0;
 $p3 = $p3 | 0;
 $hasres = $hasres | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $15 = 0, $17 = 0, $2 = 0, $22 = 0, $23 = 0, $27 = 0, $29 = 0, $3 = 0, $34 = 0, $35 = 0, $40 = 0, $42 = 0, $47 = 0, $48 = 0, $5 = 0, $72 = 0, $74 = 0, $75 = 0, $80 = 0, $81 = 0;
 $0 = $L + 28 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $L + 8 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 HEAP32[$2 >> 2] = $3 + 8;
 $5 = $f;
 $10 = HEAP32[$5 + 4 >> 2] | 0;
 $11 = $3;
 HEAP32[$11 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$11 + 4 >> 2] = $10;
 $15 = HEAP32[$2 >> 2] | 0;
 HEAP32[$2 >> 2] = $15 + 8;
 $17 = $p1;
 $22 = HEAP32[$17 + 4 >> 2] | 0;
 $23 = $15;
 HEAP32[$23 >> 2] = HEAP32[$17 >> 2];
 HEAP32[$23 + 4 >> 2] = $22;
 $27 = HEAP32[$2 >> 2] | 0;
 HEAP32[$2 >> 2] = $27 + 8;
 $29 = $p2;
 $34 = HEAP32[$29 + 4 >> 2] | 0;
 $35 = $27;
 HEAP32[$35 >> 2] = HEAP32[$29 >> 2];
 HEAP32[$35 + 4 >> 2] = $34;
 $40 = HEAP32[$2 >> 2] | 0;
 if (!$hasres) {
  HEAP32[$2 >> 2] = $40 + 8;
  $42 = $p3;
  $47 = HEAP32[$42 + 4 >> 2] | 0;
  $48 = $40;
  HEAP32[$48 >> 2] = HEAP32[$42 >> 2];
  HEAP32[$48 + 4 >> 2] = $47;
  _luaD_call($L, (HEAP32[$2 >> 2] | 0) + -32 | 0, 0, (HEAPU8[(HEAP32[$L + 16 >> 2] | 0) + 34 >> 0] | 0) & 2);
  return;
 } else {
  _luaD_call($L, $40 + ($hasres + -4 << 3) | 0, $hasres, (HEAPU8[(HEAP32[$L + 16 >> 2] | 0) + 34 >> 0] | 0) & 2);
  $72 = (HEAP32[$0 >> 2] | 0) + ($p3 - $1) | 0;
  $74 = (HEAP32[$2 >> 2] | 0) + -8 | 0;
  HEAP32[$2 >> 2] = $74;
  $75 = $74;
  $80 = HEAP32[$75 + 4 >> 2] | 0;
  $81 = $72;
  HEAP32[$81 >> 2] = HEAP32[$75 >> 2];
  HEAP32[$81 + 4 >> 2] = $80;
  return;
 }
}

function __ZN9b2Fixture6CreateEP16b2BlockAllocatorP6b2BodyPK12b2FixtureDef($this, $allocator, $body, $def) {
 $this = $this | 0;
 $allocator = $allocator | 0;
 $body = $body | 0;
 $def = $def | 0;
 var $11 = 0, $12 = 0, $16 = 0, $20 = 0, $25 = 0, $27 = 0, $28 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0.0, $i$01 = 0;
 HEAP32[$this + 40 >> 2] = HEAP32[$def + 4 >> 2];
 HEAPF32[$this + 16 >> 2] = +HEAPF32[$def + 8 >> 2];
 HEAPF32[$this + 20 >> 2] = +HEAPF32[$def + 12 >> 2];
 HEAP32[$this + 8 >> 2] = $body;
 HEAP32[$this + 4 >> 2] = 0;
 $11 = $this + 32 | 0;
 $12 = $def + 22 | 0;
 HEAP16[$11 + 0 >> 1] = HEAP16[$12 + 0 >> 1] | 0;
 HEAP16[$11 + 2 >> 1] = HEAP16[$12 + 2 >> 1] | 0;
 HEAP16[$11 + 4 >> 1] = HEAP16[$12 + 4 >> 1] | 0;
 HEAP8[$this + 38 >> 0] = HEAP8[$def + 20 >> 0] | 0;
 $16 = HEAP32[$def >> 2] | 0;
 $20 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$16 >> 2] | 0) + 8 >> 2] & 31]($16, $allocator) | 0;
 HEAP32[$this + 12 >> 2] = $20;
 $25 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$20 >> 2] | 0) + 12 >> 2] & 511]($20) | 0;
 $27 = __ZN16b2BlockAllocator8AllocateEi($allocator, $25 * 28 | 0) | 0;
 $28 = $this + 24 | 0;
 HEAP32[$28 >> 2] = $27;
 if (($25 | 0) > 0) {
  $31 = $27;
  $i$01 = 0;
 } else {
  $35 = $this + 28 | 0;
  HEAP32[$35 >> 2] = 0;
  $36 = $def + 16 | 0;
  $37 = +HEAPF32[$36 >> 2];
  HEAPF32[$this >> 2] = $37;
  return;
 }
 do {
  HEAP32[$31 + ($i$01 * 28 | 0) + 16 >> 2] = 0;
  $31 = HEAP32[$28 >> 2] | 0;
  HEAP32[$31 + ($i$01 * 28 | 0) + 24 >> 2] = -1;
  $i$01 = $i$01 + 1 | 0;
 } while (($i$01 | 0) != ($25 | 0));
 $35 = $this + 28 | 0;
 HEAP32[$35 >> 2] = 0;
 $36 = $def + 16 | 0;
 $37 = +HEAPF32[$36 >> 2];
 HEAPF32[$this >> 2] = $37;
 return;
}

function _png_inflate_read($png_ptr, $read_buffer, $chunk_bytes, $next_out, $out_size, $finish) {
 $png_ptr = $png_ptr | 0;
 $read_buffer = $read_buffer | 0;
 $chunk_bytes = $chunk_bytes | 0;
 $next_out = $next_out | 0;
 $out_size = $out_size | 0;
 $finish = $finish | 0;
 var $$$02 = 0, $$02 = 0, $$2 = 0, $$lcssa = 0, $10 = 0, $13 = 0, $19 = 0, $22 = 0, $5 = 0, $7 = 0, $8 = 0;
 if ((HEAP32[$png_ptr + 220 >> 2] | 0) != (HEAP32[$png_ptr + 376 >> 2] | 0)) {
  HEAP32[$png_ptr + 248 >> 2] = 77096;
  return;
 }
 $5 = $png_ptr + 224 | 0;
 HEAP32[$png_ptr + 236 >> 2] = $next_out;
 $7 = $png_ptr + 240 | 0;
 HEAP32[$7 >> 2] = 0;
 $8 = $png_ptr + 228 | 0;
 $10 = ($finish | 0) != 0 ? 4 : 2;
 $$02 = 1024;
 while (1) {
  if (!(HEAP32[$8 >> 2] | 0)) {
   $13 = HEAP32[$chunk_bytes >> 2] | 0;
   $$$02 = $$02 >>> 0 > $13 >>> 0 ? $13 : $$02;
   HEAP32[$chunk_bytes >> 2] = $13 - $$$02;
   if ($$$02) {
    _png_read_data($png_ptr, $read_buffer, $$$02);
    _png_calculate_crc($png_ptr, $read_buffer, $$$02);
   }
   HEAP32[$5 >> 2] = $read_buffer;
   HEAP32[$8 >> 2] = $$$02;
   $$2 = $$$02;
  } else $$2 = $$02;
  if (!(HEAP32[$7 >> 2] | 0)) {
   $19 = HEAP32[$out_size >> 2] | 0;
   HEAP32[$out_size >> 2] = 0;
   HEAP32[$7 >> 2] = $19;
  }
  $22 = _inflate($5, (HEAP32[$chunk_bytes >> 2] | 0) == 0 ? $10 : 0) | 0;
  if ($22) {
   $$lcssa = $22;
   break;
  }
  if (HEAP32[$out_size >> 2] | 0) {
   $$02 = $$2;
   continue;
  }
  if (!(HEAP32[$7 >> 2] | 0)) {
   $$lcssa = 0;
   break;
  } else $$02 = $$2;
 }
 HEAP32[$out_size >> 2] = (HEAP32[$out_size >> 2] | 0) + (HEAP32[$7 >> 2] | 0);
 HEAP32[$7 >> 2] = 0;
 _png_zstream_error($png_ptr, $$lcssa);
 return;
}

function _lua_rawset($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $29 = 0, $30 = 0, $33 = 0, $36 = 0, $4 = 0, $41 = 0, $42 = 0, $47 = 0, $62 = 0, $63 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 3) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 59168;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 3) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 4 >> 2] | 0) == 22) $$0$i = 59168; else {
   $21 = HEAP32[$17 >> 2] | 0;
   if (($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0)) $$0$i = 59168; else $$0$i = $21 + 16 + ($16 + -1 << 3) | 0;
  }
 } while (0);
 $29 = HEAP32[$$0$i >> 2] | 0;
 $30 = $L + 8 | 0;
 $33 = _luaH_set($L, $29, (HEAP32[$30 >> 2] | 0) + -16 | 0) | 0;
 $36 = (HEAP32[$30 >> 2] | 0) + -8 | 0;
 $41 = HEAP32[$36 + 4 >> 2] | 0;
 $42 = $33;
 HEAP32[$42 >> 2] = HEAP32[$36 >> 2];
 HEAP32[$42 + 4 >> 2] = $41;
 HEAP8[$29 + 6 >> 0] = 0;
 $47 = HEAP32[$30 >> 2] | 0;
 if (!(HEAP32[$47 + -4 >> 2] & 64)) {
  $63 = $47;
  $62 = $63 + -16 | 0;
  HEAP32[$30 >> 2] = $62;
  return;
 }
 if (!(HEAP8[$29 + 5 >> 0] & 4)) {
  $63 = $47;
  $62 = $63 + -16 | 0;
  HEAP32[$30 >> 2] = $62;
  return;
 }
 if (!(HEAP8[(HEAP32[$47 + -8 >> 2] | 0) + 5 >> 0] & 3)) {
  $63 = $47;
  $62 = $63 + -16 | 0;
  HEAP32[$30 >> 2] = $62;
  return;
 }
 _luaC_barrierback_($L, $29);
 $63 = HEAP32[$30 >> 2] | 0;
 $62 = $63 + -16 | 0;
 HEAP32[$30 >> 2] = $62;
 return;
}

function _png_build_16bit_table($png_ptr, $ptable, $shift, $gamma_val) {
 $png_ptr = $png_ptr | 0;
 $ptable = $ptable | 0;
 $shift = $shift | 0;
 $gamma_val = $gamma_val | 0;
 var $0 = 0, $1 = 0, $10 = 0, $12 = 0, $14 = 0.0, $27 = 0, $30 = 0, $4 = 0, $6 = 0.0, $8 = 0, $i$05 = 0, $i$05$us = 0, $j$04$us = 0, $j1$01 = 0, $j1$01$us = 0;
 $0 = 8 - $shift | 0;
 $1 = 1 << $0;
 $4 = (1 << 16 - $shift) + -1 | 0;
 $6 = 1.0 / +($4 | 0);
 $8 = 1 << 15 - $shift;
 $10 = _png_calloc($png_ptr, $1 << 2) | 0;
 HEAP32[$ptable >> 2] = $10;
 $12 = ($shift | 0) == 0;
 $14 = +($gamma_val | 0) * 1.0e-05;
 if (($gamma_val + -95e3 | 0) >>> 0 > 1e4) {
  $i$05$us = 0;
  do {
   $27 = _png_malloc($png_ptr, 512) | 0;
   HEAP32[$10 + ($i$05$us << 2) >> 2] = $27;
   $j$04$us = 0;
   do {
    HEAP16[$27 + ($j$04$us << 1) >> 1] = ~~+Math_floor(+(+Math_pow(+($6 * +((($j$04$us << $0) + $i$05$us | 0) >>> 0)), +$14) * 65535.0 + .5));
    $j$04$us = $j$04$us + 1 | 0;
   } while (($j$04$us | 0) != 256);
   $i$05$us = $i$05$us + 1 | 0;
  } while ($i$05$us >>> 0 < $1 >>> 0);
  return;
 } else $i$05 = 0;
 do {
  $30 = _png_malloc($png_ptr, 512) | 0;
  HEAP32[$10 + ($i$05 << 2) >> 2] = $30;
  if ($12) {
   $j1$01$us = 0;
   do {
    HEAP16[$30 + ($j1$01$us << 1) >> 1] = ($j1$01$us << $0) + $i$05;
    $j1$01$us = $j1$01$us + 1 | 0;
   } while (($j1$01$us | 0) != 256);
  } else {
   $j1$01 = 0;
   do {
    HEAP16[$30 + ($j1$01 << 1) >> 1] = ((((($j1$01 << $0) + $i$05 | 0) * 65535 | 0) + $8 | 0) >>> 0) / ($4 >>> 0) | 0;
    $j1$01 = $j1$01 + 1 | 0;
   } while (($j1$01 | 0) != 256);
  }
  $i$05 = $i$05 + 1 | 0;
 } while ($i$05 >>> 0 < $1 >>> 0);
 return;
}

function _json_decode($l) {
 $l = $l | 0;
 var $1 = 0, $11 = 0, $13 = 0, $16 = 0, $22 = 0, $23 = 0, $4 = 0, $found$0$i = 0, $found$0$in$i = 0, $json = 0, $json_len = 0, $token = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $vararg_buffer1 = sp + 32 | 0;
 $vararg_buffer = sp + 24 | 0;
 $json = sp + 48 | 0;
 $token = sp;
 $json_len = sp + 44 | 0;
 HEAP32[$json + 12 >> 2] = 67856;
 $1 = _luaL_checklstring($l, -1, $json_len) | 0;
 HEAP32[$json >> 2] = $1;
 HEAP32[$json + 16 >> 2] = 0;
 HEAP32[$json + 4 >> 2] = $1;
 $4 = HEAP32[$json_len >> 2] | 0;
 do if ($4 >>> 0 > 1) {
  if (HEAP8[$1 >> 0] | 0) if (HEAP8[$1 + 1 >> 0] | 0) {
   $11 = $4;
   break;
  }
  _luaL_error($l, 69200, $vararg_buffer) | 0;
  $11 = HEAP32[$json_len >> 2] | 0;
 } else $11 = $4; while (0);
 $13 = $json + 8 | 0;
 HEAP32[$13 >> 2] = _strbuf_new($11) | 0;
 _json_next_token($json, $token);
 _json_process_value($l, $json, $token);
 _json_next_token($json, $token);
 if ((HEAP32[$token >> 2] | 0) == 10) {
  $23 = HEAP32[$13 >> 2] | 0;
  _strbuf_free($23);
  STACKTOP = sp;
  return 1;
 }
 _strbuf_free(HEAP32[$13 >> 2] | 0);
 $16 = HEAP32[$token >> 2] | 0;
 if (($16 | 0) == 12) $found$0$in$i = $token + 8 | 0; else $found$0$in$i = 69264 + ($16 << 2) | 0;
 $found$0$i = HEAP32[$found$0$in$i >> 2] | 0;
 $22 = (HEAP32[$token + 4 >> 2] | 0) + 1 | 0;
 HEAP32[$vararg_buffer1 >> 2] = 69248;
 HEAP32[$vararg_buffer1 + 4 >> 2] = $found$0$i;
 HEAP32[$vararg_buffer1 + 8 >> 2] = $22;
 _luaL_error($l, 69328, $vararg_buffer1) | 0;
 $23 = HEAP32[$13 >> 2] | 0;
 _strbuf_free($23);
 STACKTOP = sp;
 return 1;
}

function _png_set_sCAL_s($png_ptr, $info_ptr, $unit, $swidth, $sheight) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 $unit = $unit | 0;
 $swidth = $swidth | 0;
 $sheight = $sheight | 0;
 var $11 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $28 = 0, $31 = 0, $4 = 0;
 if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) return;
 if (($unit + -1 | 0) >>> 0 > 1) _png_error($png_ptr, 77536);
 if (!$swidth) _png_error($png_ptr, 77560);
 $4 = _strlen($swidth | 0) | 0;
 if (!$4) _png_error($png_ptr, 77560);
 if ((HEAP8[$swidth >> 0] | 0) == 45) _png_error($png_ptr, 77560);
 if (!(_png_check_fp_string($swidth, $4) | 0)) _png_error($png_ptr, 77560);
 if (!$sheight) _png_error($png_ptr, 77584);
 $11 = _strlen($sheight | 0) | 0;
 if (!$11) _png_error($png_ptr, 77584);
 if ((HEAP8[$sheight >> 0] | 0) == 45) _png_error($png_ptr, 77584);
 if (!(_png_check_fp_string($sheight, $11) | 0)) _png_error($png_ptr, 77584);
 HEAP8[$info_ptr + 252 >> 0] = $unit;
 $19 = $4 + 1 | 0;
 $20 = _png_malloc_warn($png_ptr, $19) | 0;
 $21 = $info_ptr + 256 | 0;
 HEAP32[$21 >> 2] = $20;
 if (!$20) {
  _png_warning($png_ptr, 77608);
  return;
 }
 _memcpy($20 | 0, $swidth | 0, $19 | 0) | 0;
 $23 = $11 + 1 | 0;
 $24 = _png_malloc_warn($png_ptr, $23) | 0;
 HEAP32[$info_ptr + 260 >> 2] = $24;
 if (!$24) {
  _png_free($png_ptr, HEAP32[$21 >> 2] | 0);
  HEAP32[$21 >> 2] = 0;
  _png_warning($png_ptr, 77608);
  return;
 } else {
  _memcpy($24 | 0, $sheight | 0, $23 | 0) | 0;
  $28 = $info_ptr + 8 | 0;
  HEAP32[$28 >> 2] = HEAP32[$28 >> 2] | 16384;
  $31 = $info_ptr + 232 | 0;
  HEAP32[$31 >> 2] = HEAP32[$31 >> 2] | 256;
  return;
 }
}

function _funcargs($ls, $f, $line) {
 $ls = $ls | 0;
 $f = $f | 0;
 $line = $line | 0;
 var $0 = 0, $1 = 0, $13 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $23 = 0, $3 = 0, $args = 0, $nparams$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $args = sp;
 $0 = $ls + 28 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $ls + 12 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if (($3 | 0) == 123) _constructor($ls, $args); else if (($3 | 0) == 293) {
  $13 = _luaK_stringK($1, HEAP32[$ls + 16 >> 2] | 0) | 0;
  HEAP32[$args + 8 >> 2] = -1;
  HEAP32[$args + 12 >> 2] = -1;
  HEAP32[$args >> 2] = 4;
  HEAP32[$args + 4 >> 2] = $13;
  _luaX_next($ls);
 } else if (($3 | 0) == 40) {
  _luaX_next($ls);
  if ((HEAP32[$2 >> 2] | 0) == 41) HEAP32[$args >> 2] = 0; else {
   _subexpr($ls, $args, 0) | 0;
   if ((HEAP32[$2 >> 2] | 0) == 44) do {
    _luaX_next($ls);
    _luaK_exp2nextreg(HEAP32[$0 >> 2] | 0, $args);
    _subexpr($ls, $args, 0) | 0;
   } while ((HEAP32[$2 >> 2] | 0) == 44);
   _luaK_setreturns($1, $args, -1);
  }
  _check_match($ls, 41, 40, $line);
 } else _luaX_syntaxerror($ls, 60672);
 $17 = $f + 4 | 0;
 $18 = HEAP32[$17 >> 2] | 0;
 $19 = HEAP32[$args >> 2] | 0;
 if (($19 | 0) == 14 | ($19 | 0) == 13) $nparams$0 = 0; else if (!$19) label = 13; else {
  _luaK_exp2nextreg($1, $args);
  label = 13;
 }
 if ((label | 0) == 13) $nparams$0 = (HEAPU8[$1 + 44 >> 0] | 0) - $18 | 0;
 $23 = _luaK_codeABC($1, 36, $18, $nparams$0, 2) | 0;
 HEAP32[$f + 8 >> 2] = -1;
 HEAP32[$f + 12 >> 2] = -1;
 HEAP32[$f >> 2] = 13;
 HEAP32[$17 >> 2] = $23;
 _luaK_fixline($1, $line);
 HEAP8[$1 + 44 >> 0] = $18 + 1;
 STACKTOP = sp;
 return;
}

function _luaD_throw($L, $errcode) {
 $L = $L | 0;
 $errcode = $errcode | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $15 = 0, $16 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $35 = 0, $36 = 0, $38 = 0, $44 = 0, $51 = 0, $56 = 0, $57 = 0, $61 = 0, $64 = 0, $7 = 0;
 $0 = $L + 44 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ($1) {
  HEAP32[$1 + 160 >> 2] = $errcode;
  _longjmp((HEAP32[$0 >> 2] | 0) + 4 | 0, 1);
 }
 $7 = HEAP32[$L + 12 >> 2] | 0;
 HEAP8[$L + 6 >> 0] = $errcode;
 $10 = $7 + 124 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 if (HEAP32[$11 + 44 >> 2] | 0) {
  $15 = $11 + 8 | 0;
  $16 = HEAP32[$15 >> 2] | 0;
  HEAP32[$15 >> 2] = $16 + 8;
  $21 = (HEAP32[$L + 8 >> 2] | 0) + -8 | 0;
  $26 = HEAP32[$21 + 4 >> 2] | 0;
  $27 = $16;
  HEAP32[$27 >> 2] = HEAP32[$21 >> 2];
  HEAP32[$27 + 4 >> 2] = $26;
  _luaD_throw(HEAP32[$10 >> 2] | 0, $errcode);
 }
 $32 = $7 + 120 | 0;
 if (!(HEAP32[$32 >> 2] | 0)) _abort();
 $35 = $L + 8 | 0;
 $36 = HEAP32[$35 >> 2] | 0;
 if (($errcode | 0) == 4) {
  $38 = HEAP32[$7 + 132 >> 2] | 0;
  HEAP32[$36 >> 2] = $38;
  HEAP32[$36 + 4 >> 2] = HEAPU8[$38 + 4 >> 0] | 0 | 64;
 } else if (($errcode | 0) == 6) {
  $44 = _luaS_newlstr($L, 56448, 23) | 0;
  HEAP32[$36 >> 2] = $44;
  HEAP32[$36 + 4 >> 2] = HEAPU8[$44 + 4 >> 0] | 0 | 64;
 } else {
  $51 = $36 + -8 | 0;
  $56 = HEAP32[$51 + 4 >> 2] | 0;
  $57 = $36;
  HEAP32[$57 >> 2] = HEAP32[$51 >> 2];
  HEAP32[$57 + 4 >> 2] = $56;
 }
 $61 = $36 + 8 | 0;
 HEAP32[$35 >> 2] = $61;
 $64 = (HEAP32[$L + 16 >> 2] | 0) + 4 | 0;
 if ((HEAP32[$64 >> 2] | 0) >>> 0 < $61 >>> 0) HEAP32[$64 >> 2] = $61;
 FUNCTION_TABLE_ii[HEAP32[$32 >> 2] & 511]($L) | 0;
 _abort();
}

function _gmatch_aux($L) {
 $L = $L | 0;
 var $$$i = 0, $$0 = 0, $0 = 0, $1 = 0, $11 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $25 = 0, $6 = 0, $i$01$i = 0, $lp = 0, $ls = 0, $ms = 0, $src$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 $ms = sp + 8 | 0;
 $ls = sp + 4 | 0;
 $lp = sp;
 $0 = _lua_tolstring($L, -1001001, $ls) | 0;
 $1 = _lua_tolstring($L, -1001002, $lp) | 0;
 $2 = $ms + 16 | 0;
 HEAP32[$2 >> 2] = $L;
 HEAP32[$ms >> 2] = 200;
 HEAP32[$ms + 4 >> 2] = $0;
 $6 = $ms + 8 | 0;
 HEAP32[$6 >> 2] = $0 + (HEAP32[$ls >> 2] | 0);
 HEAP32[$ms + 12 >> 2] = $1 + (HEAP32[$lp >> 2] | 0);
 $11 = $0 + (_lua_tointegerx($L, -1001003, 0) | 0) | 0;
 if ($11 >>> 0 > (HEAP32[$6 >> 2] | 0) >>> 0) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $14 = $ms + 20 | 0;
 $src$04 = $11;
 while (1) {
  HEAP32[$14 >> 2] = 0;
  $18 = _match($ms, $src$04, $1) | 0;
  $16 = $src$04 + 1 | 0;
  if ($18) break;
  if ($16 >>> 0 > (HEAP32[$6 >> 2] | 0) >>> 0) {
   $$0 = 0;
   label = 7;
   break;
  } else $src$04 = $16;
 }
 if ((label | 0) == 7) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 _lua_pushinteger($L, $18 - $0 + (($18 | 0) == ($src$04 | 0) & 1) | 0);
 _lua_copy($L, -1, -1001003);
 _lua_settop($L, -2);
 $25 = HEAP32[$14 >> 2] | 0;
 $$$i = ($25 | 0) != 0 | ($src$04 | 0) == 0 ? $25 : 1;
 _luaL_checkstack(HEAP32[$2 >> 2] | 0, $$$i, 61736);
 if (($$$i | 0) > 0) $i$01$i = 0; else {
  $$0 = $25;
  STACKTOP = sp;
  return $$0 | 0;
 }
 do {
  _push_onecapture($ms, $i$01$i, $src$04, $18);
  $i$01$i = $i$01$i + 1 | 0;
 } while (($i$01$i | 0) != ($$$i | 0));
 $$0 = $$$i;
 STACKTOP = sp;
 return $$0 | 0;
}

function _str_rep($L) {
 $L = $L | 0;
 var $$0 = 0, $$in = 0, $0 = 0, $1 = 0, $14 = 0, $15 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $26 = 0, $4 = 0, $5 = 0, $6 = 0, $b = 0, $l = 0, $lsep = 0, $p$0$be = 0, $p$01 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2080 | 0;
 $vararg_buffer = sp;
 $l = sp + 2076 | 0;
 $lsep = sp + 2072 | 0;
 $b = sp + 8 | 0;
 $0 = _luaL_checklstring($L, 1, $l) | 0;
 $1 = _luaL_checkinteger($L, 2) | 0;
 $2 = _luaL_optlstring($L, 3, 62584, $lsep) | 0;
 if (($1 | 0) < 1) {
  _lua_pushlstring($L, 62584, 0) | 0;
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $4 = HEAP32[$l >> 2] | 0;
 $5 = HEAP32[$lsep >> 2] | 0;
 $6 = $5 + $4 | 0;
 if ($6 >>> 0 >= $4 >>> 0) if ($6 >>> 0 <= (2147483647 / ($1 >>> 0) | 0) >>> 0) {
  $14 = (Math_imul($5, $1 + -1 | 0) | 0) + (Math_imul($4, $1) | 0) | 0;
  $15 = _luaL_buffinitsize($L, $b, $14) | 0;
  _memcpy($15 | 0, $0 | 0, HEAP32[$l >> 2] | 0) | 0;
  if (($1 | 0) > 1) {
   $$in = $1;
   $p$01 = $15;
   while (1) {
    $$in = $$in + -1 | 0;
    $19 = HEAP32[$l >> 2] | 0;
    $20 = $p$01 + $19 | 0;
    $21 = HEAP32[$lsep >> 2] | 0;
    if (!$21) {
     $26 = $19;
     $p$0$be = $20;
    } else {
     _memcpy($20 | 0, $2 | 0, $21 | 0) | 0;
     $26 = HEAP32[$l >> 2] | 0;
     $p$0$be = $p$01 + ((HEAP32[$lsep >> 2] | 0) + $19) | 0;
    }
    _memcpy($p$0$be | 0, $0 | 0, $26 | 0) | 0;
    if (($$in | 0) <= 1) break; else $p$01 = $p$0$be;
   }
  }
  _luaL_pushresultsize($b, $14);
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $$0 = _luaL_error($L, 61704, $vararg_buffer) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZL25default_terminate_handlerv() {
 var $0 = 0, $11 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $29 = 0, $33 = 0, $6 = 0, $8 = 0, $thrown_object = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $vararg_buffer10 = sp + 32 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $thrown_object = sp + 36 | 0;
 $0 = ___cxa_get_globals_fast() | 0;
 if ($0) {
  $2 = HEAP32[$0 >> 2] | 0;
  if ($2) {
   $6 = $2 + 48 | 0;
   $8 = HEAP32[$6 >> 2] | 0;
   $11 = HEAP32[$6 + 4 >> 2] | 0;
   if (!(($8 & -256 | 0) == 1126902528 & ($11 | 0) == 1129074247)) {
    HEAP32[$vararg_buffer7 >> 2] = 105784;
    _abort_message(105896, $vararg_buffer7);
   }
   if (($8 | 0) == 1126902529 & ($11 | 0) == 1129074247) $21 = HEAP32[$2 + 44 >> 2] | 0; else $21 = $2 + 80 | 0;
   HEAP32[$thrown_object >> 2] = $21;
   $22 = HEAP32[$2 >> 2] | 0;
   $24 = HEAP32[$22 + 4 >> 2] | 0;
   if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[106272 >> 2] | 0) + 16 >> 2] & 31](106272, $22, $thrown_object) | 0) {
    $29 = HEAP32[$thrown_object >> 2] | 0;
    $33 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$29 >> 2] | 0) + 8 >> 2] & 511]($29) | 0;
    HEAP32[$vararg_buffer >> 2] = 105784;
    HEAP32[$vararg_buffer + 4 >> 2] = $24;
    HEAP32[$vararg_buffer + 8 >> 2] = $33;
    _abort_message(105800, $vararg_buffer);
   } else {
    HEAP32[$vararg_buffer3 >> 2] = 105784;
    HEAP32[$vararg_buffer3 + 4 >> 2] = $24;
    _abort_message(105848, $vararg_buffer3);
   }
  }
 }
 _abort_message(105936, $vararg_buffer10);
}

function _stbtt_MakeGlyphBitmapSubpixel($info, $output, $out_w, $out_h, $out_stride, $scale_x, $scale_y, $shift_x, $shift_y, $glyph) {
 $info = $info | 0;
 $output = $output | 0;
 $out_w = $out_w | 0;
 $out_h = $out_h | 0;
 $out_stride = $out_stride | 0;
 $scale_x = +$scale_x;
 $scale_y = +$scale_y;
 $shift_x = +$shift_x;
 $shift_y = +$shift_y;
 $glyph = $glyph | 0;
 var $0 = 0, $12 = 0.0, $15 = 0, $16 = 0, $18 = 0, $9 = 0.0, $gbm = 0, $vertices = 0, $x0$i = 0, $x1$i = 0, $y0$i = 0, $y1$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $x0$i = sp + 32 | 0;
 $y0$i = sp + 28 | 0;
 $x1$i = sp + 24 | 0;
 $y1$i = sp + 20 | 0;
 $vertices = sp + 16 | 0;
 $gbm = sp;
 $0 = _stbtt_GetGlyphShape($info, $glyph, $vertices) | 0;
 if (!(_stbtt_GetGlyphBox($info, $glyph, $x0$i, $y0$i, $x1$i, $y1$i) | 0)) {
  HEAP32[$y1$i >> 2] = 0;
  HEAP32[$x1$i >> 2] = 0;
  HEAP32[$y0$i >> 2] = 0;
  HEAP32[$x0$i >> 2] = 0;
  $12 = 0.0;
  $9 = 0.0;
 } else {
  $12 = +(HEAP32[$x0$i >> 2] | 0);
  $9 = +(HEAP32[$y1$i >> 2] | 0);
 }
 HEAP32[$gbm + 12 >> 2] = $output;
 HEAP32[$gbm >> 2] = $out_w;
 HEAP32[$gbm + 4 >> 2] = $out_h;
 HEAP32[$gbm + 8 >> 2] = $out_stride;
 if (($out_w | 0) == 0 | ($out_h | 0) == 0) {
  $18 = HEAP32[$vertices >> 2] | 0;
  _free($18);
  STACKTOP = sp;
  return;
 }
 $15 = 0 - ~~+Math_ceil(+($9 * $scale_y + $shift_y)) | 0;
 $16 = ~~+Math_floor(+($12 * $scale_x + $shift_x));
 _stbtt_Rasterize($gbm, .3499999940395355, HEAP32[$vertices >> 2] | 0, $0, $scale_x, $scale_y, $shift_x, $shift_y, $16, $15, 1, 0);
 $18 = HEAP32[$vertices >> 2] | 0;
 _free($18);
 STACKTOP = sp;
 return;
}

function _png_set_IHDR($png_ptr, $info_ptr, $width, $height, $bit_depth, $color_type, $interlace_type, $compression_type, $filter_type) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 $width = $width | 0;
 $height = $height | 0;
 $bit_depth = $bit_depth | 0;
 $color_type = $color_type | 0;
 $interlace_type = $interlace_type | 0;
 $compression_type = $compression_type | 0;
 $filter_type = $filter_type | 0;
 var $$ = 0, $18 = 0, $27 = 0, $29 = 0, $32 = 0, $35 = 0, $4 = 0, $43 = 0, $6 = 0;
 if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) return;
 HEAP32[$info_ptr >> 2] = $width;
 HEAP32[$info_ptr + 4 >> 2] = $height;
 $4 = $info_ptr + 24 | 0;
 HEAP8[$4 >> 0] = $bit_depth;
 $6 = $info_ptr + 25 | 0;
 HEAP8[$6 >> 0] = $color_type;
 HEAP8[$info_ptr + 26 >> 0] = $compression_type;
 HEAP8[$info_ptr + 27 >> 0] = $filter_type;
 HEAP8[$info_ptr + 28 >> 0] = $interlace_type;
 _png_check_IHDR($png_ptr, $width, $height, $bit_depth & 255, $color_type & 255, $interlace_type & 255, $compression_type & 255, $filter_type & 255);
 $18 = HEAP8[$6 >> 0] | 0;
 if ($18 << 24 >> 24 == 3) {
  HEAP8[$info_ptr + 29 >> 0] = 1;
  $29 = 1;
 } else {
  $$ = ($18 & 2) == 0 ? 1 : 3;
  HEAP8[$info_ptr + 29 >> 0] = $$;
  if (!($18 & 4)) $29 = $$; else {
   $27 = $$ + 1 << 24 >> 24;
   HEAP8[$info_ptr + 29 >> 0] = $27;
   $29 = $27;
  }
 }
 $32 = Math_imul(HEAPU8[$4 >> 0] | 0, $29 & 255) | 0;
 HEAP8[$info_ptr + 30 >> 0] = $32;
 $35 = $32 & 255;
 if ($35 >>> 0 > 7) $43 = Math_imul($35 >>> 3, $width) | 0; else $43 = ((Math_imul($35, $width) | 0) + 7 | 0) >>> 3;
 HEAP32[$info_ptr + 12 >> 2] = $43;
 return;
}

function _mlua_draw_quad($L) {
 $L = $L | 0;
 var $$0 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $7 = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 if (!$L) ___assert_fail(23976, 19928, 402, 21736);
 if (!(_display_get_draw_from() | 0)) _luaL_error($L, 21752, sp) | 0;
 $3 = _display_get_current_buffer() | 0;
 do if (HEAP8[$3 + 68 >> 0] | 0) {
  $7 = HEAP32[$3 >> 2] | 0;
  if (_display_is_debug() | 0) {
   if (!($7 & -3)) break;
   if (($7 | 0) == 3) label = 10;
  } else if (($7 | 0) == 3) label = 10; else if (!$7) break;
  if ((label | 0) == 10) if (HEAP8[$3 + 57 >> 0] | 0) break;
  $$0 = _luaL_error($L, 21680, $vararg_buffer1) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } while (0);
 $15 = +_luaL_checknumber($L, 1);
 $16 = +_luaL_checknumber($L, 2);
 $17 = +_luaL_checknumber($L, 3);
 $18 = +_luaL_checknumber($L, 4);
 $19 = +_luaL_checknumber($L, 5);
 $20 = +_luaL_checknumber($L, 6);
 $21 = +_luaL_checknumber($L, 7);
 $22 = +_luaL_checknumber($L, 8);
 $23 = +_luaL_checknumber($L, 9);
 $24 = +_luaL_checknumber($L, 10);
 $25 = +_luaL_checknumber($L, 11);
 $26 = +_luaL_checknumber($L, 12);
 $27 = +_luaL_checknumber($L, 13);
 $28 = +_luaL_checknumber($L, 14);
 $29 = +_luaL_checknumber($L, 15);
 _display_draw_quad($15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, +_luaL_checknumber($L, 16));
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _strspn($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $$0 = 0, $$028 = 0, $$03 = 0, $$03$lcssa = 0, $$1$lcssa = 0, $$16 = 0, $0 = 0, $11 = 0, $14 = 0, $18 = 0, $24 = 0, $33 = 0, $byteset = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $byteset = sp;
 HEAP32[$byteset + 0 >> 2] = 0;
 HEAP32[$byteset + 4 >> 2] = 0;
 HEAP32[$byteset + 8 >> 2] = 0;
 HEAP32[$byteset + 12 >> 2] = 0;
 HEAP32[$byteset + 16 >> 2] = 0;
 HEAP32[$byteset + 20 >> 2] = 0;
 HEAP32[$byteset + 24 >> 2] = 0;
 HEAP32[$byteset + 28 >> 2] = 0;
 $0 = HEAP8[$c >> 0] | 0;
 if (!($0 << 24 >> 24)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!(HEAP8[$c + 1 >> 0] | 0)) {
  $$03 = $s;
  while (1) if ((HEAP8[$$03 >> 0] | 0) == $0 << 24 >> 24) $$03 = $$03 + 1 | 0; else {
   $$03$lcssa = $$03;
   break;
  }
  $$0 = $$03$lcssa - $s | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $$028 = $c;
  $14 = $0;
 }
 do {
  $18 = $byteset + ((($14 & 255) >>> 5 & 255) << 2) | 0;
  HEAP32[$18 >> 2] = HEAP32[$18 >> 2] | 1 << ($14 & 31);
  $$028 = $$028 + 1 | 0;
  $14 = HEAP8[$$028 >> 0] | 0;
 } while ($14 << 24 >> 24 != 0);
 $11 = HEAP8[$s >> 0] | 0;
 L12 : do if (!($11 << 24 >> 24)) $$1$lcssa = $s; else {
  $$16 = $s;
  $24 = $11;
  while (1) {
   if (!(HEAP32[$byteset + ((($24 & 255) >>> 5 & 255) << 2) >> 2] & 1 << ($24 & 31))) {
    $$1$lcssa = $$16;
    break L12;
   }
   $33 = $$16 + 1 | 0;
   $24 = HEAP8[$33 >> 0] | 0;
   if (!($24 << 24 >> 24)) {
    $$1$lcssa = $33;
    break;
   } else $$16 = $33;
  }
 } while (0);
 $$0 = $$1$lcssa - $s | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _lua_setuservalue($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $29 = 0, $30 = 0, $32 = 0, $39 = 0, $4 = 0, $44 = 0, $50 = 0, $55 = 0, $56 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 3) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 59168;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 3) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 4 >> 2] | 0) == 22) $$0$i = 59168; else {
   $21 = HEAP32[$17 >> 2] | 0;
   if (($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0)) $$0$i = 59168; else $$0$i = $21 + 16 + ($16 + -1 << 3) | 0;
  }
 } while (0);
 $29 = $L + 8 | 0;
 $30 = HEAP32[$29 >> 2] | 0;
 $32 = HEAP32[$$0$i >> 2] | 0;
 HEAP32[$32 + 16 >> 2] = HEAP32[$30 + -8 >> 2];
 HEAP8[$32 + 6 >> 0] = HEAP32[$30 + -4 >> 2];
 $39 = HEAP32[$29 >> 2] | 0;
 if (!(HEAP32[$39 + -4 >> 2] & 64)) {
  $56 = $39;
  $55 = $56 + -8 | 0;
  HEAP32[$29 >> 2] = $55;
  return;
 }
 $44 = HEAP32[$$0$i >> 2] | 0;
 if (!(HEAP8[$44 + 5 >> 0] & 4)) {
  $56 = $39;
  $55 = $56 + -8 | 0;
  HEAP32[$29 >> 2] = $55;
  return;
 }
 $50 = HEAP32[$39 + -8 >> 2] | 0;
 if (!(HEAP8[$50 + 5 >> 0] & 3)) {
  $56 = $39;
  $55 = $56 + -8 | 0;
  HEAP32[$29 >> 2] = $55;
  return;
 }
 _luaC_barrier_($L, $44, $50);
 $56 = HEAP32[$29 >> 2] | 0;
 $55 = $56 + -8 | 0;
 HEAP32[$29 >> 2] = $55;
 return;
}

function _png_handle_hIST($png_ptr, $info_ptr, $length) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 $length = $length | 0;
 var $1 = 0, $11 = 0, $19 = 0, $buf = 0, $i$04 = 0, $i$04$us = 0, $readbuf = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528 | 0;
 $readbuf = sp;
 $buf = sp + 512 | 0;
 $1 = HEAP32[$png_ptr + 208 >> 2] | 0;
 if (!($1 & 1)) _png_chunk_error($png_ptr, 75496);
 if (($1 & 6 | 0) != 2) {
  _png_crc_finish($png_ptr, $length) | 0;
  _png_chunk_benign_error($png_ptr, 75472);
  STACKTOP = sp;
  return;
 }
 if ($info_ptr) if (HEAP32[$info_ptr + 8 >> 2] & 64) {
  _png_crc_finish($png_ptr, $length) | 0;
  _png_chunk_benign_error($png_ptr, 75512);
  STACKTOP = sp;
  return;
 }
 $11 = $length >>> 1;
 if ($length >>> 0 > 513 ? 1 : ($11 | 0) != (HEAPU16[$png_ptr + 420 >> 1] | 0 | 0)) {
  _png_crc_finish($png_ptr, $length) | 0;
  _png_chunk_benign_error($png_ptr, 75488);
  STACKTOP = sp;
  return;
 }
 if ($11) {
  $19 = $buf + 1 | 0;
  if (!$png_ptr) {
   $i$04$us = 0;
   do {
    HEAP16[$readbuf + ($i$04$us << 1) >> 1] = 0;
    $i$04$us = $i$04$us + 1 | 0;
   } while ($i$04$us >>> 0 < $11 >>> 0);
  } else {
   $i$04 = 0;
   do {
    _png_read_data($png_ptr, $buf, 2);
    _png_calculate_crc($png_ptr, $buf, 2);
    HEAP16[$readbuf + ($i$04 << 1) >> 1] = (HEAPU8[$buf >> 0] | 0) << 8 | (HEAPU8[$19 >> 0] | 0);
    $i$04 = $i$04 + 1 | 0;
   } while ($i$04 >>> 0 < $11 >>> 0);
  }
 }
 if (_png_crc_finish($png_ptr, 0) | 0) {
  STACKTOP = sp;
  return;
 }
 _png_set_hIST($png_ptr, $info_ptr, $readbuf);
 STACKTOP = sp;
 return;
}

function __ZN12b2WheelJointC2EPK15b2WheelJointDef($this, $def) {
 $this = $this | 0;
 $def = $def | 0;
 var $10 = 0, $11 = 0, $16 = 0, $21 = 0, $22 = 0, $27 = 0, $29 = 0, $32 = 0, $33 = 0, $40 = 0, $5 = 0, $67 = 0;
 __ZN7b2JointC2EPK10b2JointDef($this, $def);
 HEAP32[$this >> 2] = 86424;
 $5 = $def + 20 | 0;
 $10 = HEAP32[$5 + 4 >> 2] | 0;
 $11 = $this + 76 | 0;
 HEAP32[$11 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$11 + 4 >> 2] = $10;
 $16 = $def + 28 | 0;
 $21 = HEAP32[$16 + 4 >> 2] | 0;
 $22 = $this + 84 | 0;
 HEAP32[$22 >> 2] = HEAP32[$16 >> 2];
 HEAP32[$22 + 4 >> 2] = $21;
 $27 = $def + 36 | 0;
 $29 = HEAP32[$27 >> 2] | 0;
 $32 = HEAP32[$27 + 4 >> 2] | 0;
 $33 = $this + 92 | 0;
 HEAP32[$33 >> 2] = $29;
 HEAP32[$33 + 4 >> 2] = $32;
 $40 = $this + 100 | 0;
 HEAPF32[$40 >> 2] = -(HEAP32[tempDoublePtr >> 2] = $32, +HEAPF32[tempDoublePtr >> 2]);
 HEAP32[$40 + 4 >> 2] = $29;
 HEAPF32[$this + 204 >> 2] = 0.0;
 HEAPF32[$this + 108 >> 2] = 0.0;
 HEAPF32[$this + 208 >> 2] = 0.0;
 HEAPF32[$this + 112 >> 2] = 0.0;
 HEAPF32[$this + 212 >> 2] = 0.0;
 HEAPF32[$this + 116 >> 2] = 0.0;
 HEAPF32[$this + 120 >> 2] = +HEAPF32[$def + 48 >> 2];
 HEAPF32[$this + 124 >> 2] = +HEAPF32[$def + 52 >> 2];
 HEAP8[$this + 128 >> 0] = HEAP8[$def + 44 >> 0] | 0;
 HEAPF32[$this + 68 >> 2] = +HEAPF32[$def + 56 >> 2];
 HEAPF32[$this + 72 >> 2] = +HEAPF32[$def + 60 >> 2];
 HEAPF32[$this + 216 >> 2] = 0.0;
 HEAPF32[$this + 220 >> 2] = 0.0;
 $67 = $this + 172 | 0;
 HEAP32[$67 + 0 >> 2] = 0;
 HEAP32[$67 + 4 >> 2] = 0;
 HEAP32[$67 + 8 >> 2] = 0;
 HEAP32[$67 + 12 >> 2] = 0;
 return;
}

function _g_write($L, $f, $arg) {
 $L = $L | 0;
 $f = $f | 0;
 $arg = $arg | 0;
 var $$0 = 0, $$013 = 0, $$in = 0, $$sink = 0, $0 = 0, $11 = 0.0, $13 = 0, $16 = 0, $19 = 0, $l = 0, $status$02 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $l = sp + 16 | 0;
 $0 = _lua_gettop($L) | 0;
 if (($0 | 0) == ($arg | 0)) {
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $$013 = $arg;
 $$in = $0 - $arg | 0;
 $status$02 = 1;
 while (1) {
  $$in = $$in + -1 | 0;
  if ((_lua_type($L, $$013) | 0) == 3) {
   if (!(_lua_isinteger($L, $$013) | 0)) {
    $11 = +_lua_tonumberx($L, $$013, 0);
    HEAPF64[tempDoublePtr >> 3] = $11;
    HEAP32[$vararg_buffer1 >> 2] = HEAP32[tempDoublePtr >> 2];
    HEAP32[$vararg_buffer1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    $13 = _fprintf($f | 0, 59440, $vararg_buffer1 | 0) | 0;
   } else {
    HEAP32[$vararg_buffer >> 2] = _lua_tointegerx($L, $$013, 0) | 0;
    $13 = _fprintf($f | 0, 59432, $vararg_buffer | 0) | 0;
   }
   $$sink = ($13 | 0) > 0 & ($status$02 | 0) != 0;
  } else {
   $16 = _luaL_checklstring($L, $$013, $l) | 0;
   if (!$status$02) $$sink = 0; else {
    $19 = _fwrite($16 | 0, 1, HEAP32[$l >> 2] | 0, $f | 0) | 0;
    $$sink = ($19 | 0) == (HEAP32[$l >> 2] | 0);
   }
  }
  if (!$$in) break; else {
   $$013 = $$013 + 1 | 0;
   $status$02 = $$sink & 1;
  }
 }
 if ($$sink) {
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $$0 = _luaL_fileresult($L, 0, 0) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _png_set_longjmp_fn($png_ptr, $longjmp_fn, $jmp_buf_size) {
 $png_ptr = $png_ptr | 0;
 $longjmp_fn = $longjmp_fn | 0;
 $jmp_buf_size = $jmp_buf_size | 0;
 var $$0 = 0, $1 = 0, $13 = 0, $15 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $size$0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 if (!$png_ptr) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $1 = $png_ptr + 160 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $4 = $png_ptr + 164 | 0;
 do if (!$2) {
  HEAP32[$4 >> 2] = 0;
  if ($jmp_buf_size >>> 0 < 157) {
   HEAP32[$1 >> 2] = $png_ptr;
   $17 = $png_ptr;
   break;
  }
  $6 = _png_malloc_warn($png_ptr, $jmp_buf_size) | 0;
  HEAP32[$1 >> 2] = $6;
  if (!$6) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else {
   HEAP32[$4 >> 2] = $jmp_buf_size;
   $17 = $6;
   break;
  }
 } else {
  $8 = HEAP32[$4 >> 2] | 0;
  if (!$8) if (($2 | 0) == ($png_ptr | 0)) $size$0 = 156; else _png_error($png_ptr, 74192); else $size$0 = $8;
  if (($size$0 | 0) == ($jmp_buf_size | 0)) $17 = $2; else {
   $13 = HEAP32[$png_ptr + 172 >> 2] | 0;
   if (!$13) {
    $15 = HEAP32[_stderr >> 2] | 0;
    HEAP32[$vararg_buffer >> 2] = 74224;
    _fprintf($15 | 0, 74264, $vararg_buffer | 0) | 0;
    _fputc(10, $15 | 0) | 0;
    $$0 = 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else {
    FUNCTION_TABLE_vii[$13 & 127]($png_ptr, 74224);
    $$0 = 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
  }
 } while (0);
 HEAP32[$png_ptr + 156 >> 2] = $longjmp_fn;
 $$0 = $17;
 STACKTOP = sp;
 return $$0 | 0;
}

function _json_append_string($l, $json, $lindex) {
 $l = $l | 0;
 $json = $json | 0;
 $lindex = $lindex | 0;
 var $0 = 0, $15 = 0, $18 = 0, $20 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $9 = 0, $i$01 = 0, $len = 0, $s$idx1$i = 0, $s$idx1$val$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $len = sp;
 $0 = _lua_tolstring($l, $lindex, $len) | 0;
 $3 = ((HEAP32[$len >> 2] | 0) * 6 | 0) + 2 | 0;
 $s$idx1$i = $json + 8 | 0;
 $s$idx1$val$i = HEAP32[$s$idx1$i >> 2] | 0;
 if (((HEAP32[$json + 4 >> 2] | 0) + -1 - $s$idx1$val$i | 0) < ($3 | 0)) {
  _strbuf_resize($json, $s$idx1$val$i + $3 | 0);
  $9 = HEAP32[$s$idx1$i >> 2] | 0;
 } else $9 = $s$idx1$val$i;
 HEAP32[$s$idx1$i >> 2] = $9 + 1;
 HEAP8[(HEAP32[$json >> 2] | 0) + $9 >> 0] = 34;
 if (!(HEAP32[$len >> 2] | 0)) {
  $27 = HEAP32[$s$idx1$i >> 2] | 0;
  $28 = $27 + 1 | 0;
  HEAP32[$s$idx1$i >> 2] = $28;
  $29 = HEAP32[$json >> 2] | 0;
  $30 = $29 + $27 | 0;
  HEAP8[$30 >> 0] = 34;
  STACKTOP = sp;
  return;
 } else $i$01 = 0;
 do {
  $15 = HEAP8[$0 + $i$01 >> 0] | 0;
  $18 = HEAP32[70144 + (($15 & 255) << 2) >> 2] | 0;
  if (!$18) {
   $20 = HEAP32[$s$idx1$i >> 2] | 0;
   HEAP32[$s$idx1$i >> 2] = $20 + 1;
   HEAP8[(HEAP32[$json >> 2] | 0) + $20 >> 0] = $15;
  } else _strbuf_append_string($json, $18);
  $i$01 = $i$01 + 1 | 0;
 } while ($i$01 >>> 0 < (HEAP32[$len >> 2] | 0) >>> 0);
 $27 = HEAP32[$s$idx1$i >> 2] | 0;
 $28 = $27 + 1 | 0;
 HEAP32[$s$idx1$i >> 2] = $28;
 $29 = HEAP32[$json >> 2] | 0;
 $30 = $29 + $27 | 0;
 HEAP8[$30 >> 0] = 34;
 STACKTOP = sp;
 return;
}

function __ZN11b2GearJoint4DumpEv($this) {
 $this = $this | 0;
 var $11 = 0, $15 = 0, $3 = 0, $7 = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $vararg_buffer18 = sp + 56 | 0;
 $vararg_buffer15 = sp + 48 | 0;
 $vararg_buffer12 = sp + 40 | 0;
 $vararg_buffer9 = sp + 32 | 0;
 $vararg_buffer6 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $3 = HEAP32[(HEAP32[$this + 48 >> 2] | 0) + 8 >> 2] | 0;
 $7 = HEAP32[(HEAP32[$this + 52 >> 2] | 0) + 8 >> 2] | 0;
 $11 = HEAP32[(HEAP32[$this + 68 >> 2] | 0) + 56 >> 2] | 0;
 $15 = HEAP32[(HEAP32[$this + 72 >> 2] | 0) + 56 >> 2] | 0;
 __Z5b2LogPKcz(84064, sp);
 HEAP32[$vararg_buffer1 >> 2] = $3;
 __Z5b2LogPKcz(86496, $vararg_buffer1);
 HEAP32[$vararg_buffer3 >> 2] = $7;
 __Z5b2LogPKcz(86528, $vararg_buffer3);
 HEAP32[$vararg_buffer6 >> 2] = HEAPU8[$this + 61 >> 0];
 __Z5b2LogPKcz(86560, $vararg_buffer6);
 HEAP32[$vararg_buffer9 >> 2] = $11;
 __Z5b2LogPKcz(84088, $vararg_buffer9);
 HEAP32[$vararg_buffer12 >> 2] = $15;
 __Z5b2LogPKcz(84120, $vararg_buffer12);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 152 >> 2];
 HEAP32[$vararg_buffer15 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer15 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(85744, $vararg_buffer15);
 HEAP32[$vararg_buffer18 >> 2] = HEAP32[$this + 56 >> 2];
 __Z5b2LogPKcz(86896, $vararg_buffer18);
 STACKTOP = sp;
 return;
}

function __Z16b2CollideCirclesP10b2ManifoldPK13b2CircleShapeRK11b2TransformS3_S6_($manifold, $circleA, $xfA, $circleB, $xfB) {
 $manifold = $manifold | 0;
 $circleA = $circleA | 0;
 $xfA = $xfA | 0;
 $circleB = $circleB | 0;
 $xfB = $xfB | 0;
 var $0 = 0, $1 = 0, $20 = 0, $22 = 0.0, $23 = 0.0, $26 = 0.0, $28 = 0.0, $3 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $48 = 0.0, $53 = 0, $58 = 0, $59 = 0, $65 = 0, $7 = 0.0, $70 = 0, $71 = 0, $9 = 0.0;
 $0 = $manifold + 60 | 0;
 HEAP32[$0 >> 2] = 0;
 $1 = $circleA + 12 | 0;
 $3 = +HEAPF32[$xfA + 12 >> 2];
 $4 = +HEAPF32[$1 >> 2];
 $7 = +HEAPF32[$xfA + 8 >> 2];
 $9 = +HEAPF32[$circleA + 16 >> 2];
 $20 = $circleB + 12 | 0;
 $22 = +HEAPF32[$xfB + 12 >> 2];
 $23 = +HEAPF32[$20 >> 2];
 $26 = +HEAPF32[$xfB + 8 >> 2];
 $28 = +HEAPF32[$circleB + 16 >> 2];
 $39 = +HEAPF32[$xfB >> 2] + ($22 * $23 - $26 * $28) - (+HEAPF32[$xfA >> 2] + ($3 * $4 - $7 * $9));
 $40 = $23 * $26 + $22 * $28 + +HEAPF32[$xfB + 4 >> 2] - ($4 * $7 + $3 * $9 + +HEAPF32[$xfA + 4 >> 2]);
 $48 = +HEAPF32[$circleA + 8 >> 2] + +HEAPF32[$circleB + 8 >> 2];
 if ($39 * $39 + $40 * $40 > $48 * $48) return;
 HEAP32[$manifold + 56 >> 2] = 0;
 $53 = $1;
 $58 = HEAP32[$53 + 4 >> 2] | 0;
 $59 = $manifold + 48 | 0;
 HEAP32[$59 >> 2] = HEAP32[$53 >> 2];
 HEAP32[$59 + 4 >> 2] = $58;
 HEAPF32[$manifold + 40 >> 2] = 0.0;
 HEAPF32[$manifold + 44 >> 2] = 0.0;
 HEAP32[$0 >> 2] = 1;
 $65 = $20;
 $70 = HEAP32[$65 + 4 >> 2] | 0;
 $71 = $manifold;
 HEAP32[$71 >> 2] = HEAP32[$65 >> 2];
 HEAP32[$71 + 4 >> 2] = $70;
 HEAP32[$manifold + 16 >> 2] = 0;
 return;
}

function _system_update($s, $dt) {
 $s = $s | 0;
 $dt = +$dt;
 var $$lcssa = 0, $1 = 0, $10 = 0, $14 = 0, $16 = 0, $19 = 0, $23 = 0, $29 = 0.0, $30 = 0, $32 = 0.0, $8 = 0, $i$03 = 0, $i1$02 = 0, $i1$1 = 0, dest = 0, src = 0, stop = 0;
 if (!$s) ___assert_fail(23264, 10392, 178, 10544);
 $1 = $s + 408 | 0;
 if (HEAP32[$1 >> 2] | 0) {
  $i$03 = 0;
  do {
   _particle_update((HEAP32[$s >> 2] | 0) + ($i$03 * 56 | 0) | 0, $s, $dt);
   $i$03 = $i$03 + 1 | 0;
   $8 = HEAP32[$1 >> 2] | 0;
  } while ($i$03 >>> 0 < $8 >>> 0);
  $$lcssa = $8;
  if ($$lcssa) {
   $16 = $$lcssa;
   $i1$02 = 0;
   while (1) {
    $10 = HEAP32[$s >> 2] | 0;
    if (!(+HEAPF32[$10 + ($i1$02 * 56 | 0) + 24 >> 2] <= 0.0)) {
     $23 = $16;
     $i1$1 = $i1$02;
    } else {
     $14 = $10 + ($i1$02 * 56 | 0) | 0;
     HEAP8[$14 >> 0] = 1;
     dest = $14 + 0 | 0;
     src = $10 + (($16 + -1 | 0) * 56 | 0) + 0 | 0;
     stop = dest + 56 | 0;
     do {
      HEAP32[dest >> 2] = HEAP32[src >> 2];
      dest = dest + 4 | 0;
      src = src + 4 | 0;
     } while ((dest | 0) < (stop | 0));
     $19 = (HEAP32[$1 >> 2] | 0) + -1 | 0;
     HEAP32[$1 >> 2] = $19;
     $23 = $19;
     $i1$1 = $i1$02 + -1 | 0;
    }
    $i1$02 = $i1$1 + 1 | 0;
    if ($i1$02 >>> 0 >= $23 >>> 0) break; else $16 = $23;
   }
  }
 }
 if (!(HEAP8[$s + 400 >> 0] | 0)) return;
 $29 = 1.0 / +HEAPF32[$s + 460 >> 2];
 $30 = $s + 464 | 0;
 $32 = +HEAPF32[$30 >> 2] + $dt;
 HEAPF32[$30 >> 2] = $32;
 if (!($32 > $29)) return;
 _system_emit($s);
 HEAPF32[$30 >> 2] = +HEAPF32[$30 >> 2] - $29;
 return;
}

function _png_benign_error($png_ptr, $error_message) {
 $png_ptr = $png_ptr | 0;
 $error_message = $error_message | 0;
 var $14 = 0, $20 = 0, $24 = 0, $7 = 0, $offset$04$i = 0, $offset$11$i = 0, $offset$12$i = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $7 = (HEAP32[$png_ptr + 208 >> 2] & 32768 | 0) != 0;
 if (!(HEAP32[$png_ptr + 212 >> 2] & 1048576)) {
  if (!$7) _png_error($png_ptr, $error_message);
  if (!(HEAP32[$png_ptr + 376 >> 2] | 0)) _png_error($png_ptr, $error_message); else _png_chunk_error($png_ptr, $error_message);
 }
 if ($7) if (HEAP32[$png_ptr + 376 >> 2] | 0) {
  _png_chunk_warning($png_ptr, $error_message);
  STACKTOP = sp;
  return;
 }
 if (!$png_ptr) $offset$12$i = 0; else {
  L17 : do if ((HEAP8[$error_message >> 0] | 0) == 35) {
   $offset$04$i = 1;
   while (1) {
    $14 = $offset$04$i + 1 | 0;
    if ((HEAP8[$error_message + $offset$04$i >> 0] | 0) == 32) {
     $offset$11$i = $offset$04$i;
     break L17;
    }
    if (($14 | 0) < 15) $offset$04$i = $14; else {
     $offset$11$i = $14;
     break;
    }
   }
  } else $offset$11$i = 0; while (0);
  $20 = HEAP32[$png_ptr + 172 >> 2] | 0;
  if (!$20) $offset$12$i = $offset$11$i; else {
   FUNCTION_TABLE_vii[$20 & 127]($png_ptr, $error_message + $offset$11$i | 0);
   STACKTOP = sp;
   return;
  }
 }
 $24 = HEAP32[_stderr >> 2] | 0;
 HEAP32[$vararg_buffer >> 2] = $error_message + $offset$12$i;
 _fprintf($24 | 0, 74264, $vararg_buffer | 0) | 0;
 _fputc(10, $24 | 0) | 0;
 STACKTOP = sp;
 return;
}

function _luaM_growaux_($L, $block, $size, $size_elems, $limit, $what) {
 $L = $L | 0;
 $block = $block | 0;
 $size = $size | 0;
 $size_elems = $size_elems | 0;
 $limit = $limit | 0;
 $what = $what | 0;
 var $0 = 0, $10 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $22 = 0, $24 = 0, $4 = 0, $9 = 0, $newblock$0$i = 0, $newsize$0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $0 = HEAP32[$size >> 2] | 0;
 if (($0 | 0) < (($limit | 0) / 2 | 0 | 0)) {
  $4 = $0 << 1;
  $newsize$0 = ($4 | 0) < 4 ? 4 : $4;
 } else if (($0 | 0) < ($limit | 0)) $newsize$0 = $limit; else {
  HEAP32[$vararg_buffer >> 2] = $what;
  HEAP32[$vararg_buffer + 4 >> 2] = $limit;
  _luaG_runerror($L, 58064, $vararg_buffer);
 }
 if (($newsize$0 + 1 | 0) >>> 0 > (4294967295 / ($size_elems >>> 0) | 0) >>> 0) _luaM_toobig($L);
 $9 = Math_imul($0, $size_elems) | 0;
 $10 = Math_imul($newsize$0, $size_elems) | 0;
 $12 = HEAP32[$L + 12 >> 2] | 0;
 $13 = ($block | 0) != 0;
 $15 = $12 + 4 | 0;
 $17 = FUNCTION_TABLE_iiiii[HEAP32[$12 >> 2] & 7](HEAP32[$15 >> 2] | 0, $block, $9, $10) | 0;
 if (($17 | 0) != 0 | ($10 | 0) == 0) $newblock$0$i = $17; else {
  _luaC_fullgc($L, 1);
  $22 = FUNCTION_TABLE_iiiii[HEAP32[$12 >> 2] & 7](HEAP32[$15 >> 2] | 0, $block, $9, $10) | 0;
  if (!$22) _luaD_throw($L, 4); else $newblock$0$i = $22;
 }
 $24 = $12 + 12 | 0;
 HEAP32[$24 >> 2] = ($13 ? 0 - $9 | 0 : 0) + $10 + (HEAP32[$24 >> 2] | 0);
 HEAP32[$size >> 2] = $newsize$0;
 STACKTOP = sp;
 return $newblock$0$i | 0;
}

function _png_icc_check_tag_table($png_ptr, $colorspace, $name, $profile_length, $profile) {
 $png_ptr = $png_ptr | 0;
 $colorspace = $colorspace | 0;
 $name = $name | 0;
 $profile_length = $profile_length | 0;
 $profile = $profile | 0;
 var $$0 = 0, $17 = 0, $36 = 0, $53 = 0, $54 = 0, $72 = 0, $itag$03 = 0, $tag$02 = 0, label = 0;
 $17 = (HEAPU8[$profile + 129 >> 0] | 0) << 16 | (HEAPU8[$profile + 128 >> 0] | 0) << 24 | (HEAPU8[$profile + 130 >> 0] | 0) << 8 | (HEAPU8[$profile + 131 >> 0] | 0);
 if (!$17) {
  $$0 = 1;
  return $$0 | 0;
 }
 $itag$03 = 0;
 $tag$02 = $profile + 132 | 0;
 while (1) {
  $36 = (HEAPU8[$tag$02 + 1 >> 0] | 0) << 16 | (HEAPU8[$tag$02 >> 0] | 0) << 24 | (HEAPU8[$tag$02 + 2 >> 0] | 0) << 8 | (HEAPU8[$tag$02 + 3 >> 0] | 0);
  $53 = HEAPU8[$tag$02 + 7 >> 0] | 0;
  $54 = (HEAPU8[$tag$02 + 5 >> 0] | 0) << 16 | (HEAPU8[$tag$02 + 4 >> 0] | 0) << 24 | (HEAPU8[$tag$02 + 6 >> 0] | 0) << 8 | $53;
  $72 = (HEAPU8[$tag$02 + 9 >> 0] | 0) << 16 | (HEAPU8[$tag$02 + 8 >> 0] | 0) << 24 | (HEAPU8[$tag$02 + 10 >> 0] | 0) << 8 | (HEAPU8[$tag$02 + 11 >> 0] | 0);
  if ($53 & 3) _png_icc_profile_error($png_ptr, 0, $name, $36, 72864);
  if ($54 >>> 0 > $profile_length >>> 0 | $72 >>> 0 > ($profile_length - $54 | 0) >>> 0) break;
  $itag$03 = $itag$03 + 1 | 0;
  if ($itag$03 >>> 0 >= $17 >>> 0) {
   $$0 = 1;
   label = 8;
   break;
  } else $tag$02 = $tag$02 + 12 | 0;
 }
 if ((label | 0) == 8) return $$0 | 0;
 _png_icc_profile_error($png_ptr, $colorspace, $name, $36, 72912);
 $$0 = 0;
 return $$0 | 0;
}

function _luaL_tolstring($L, $idx, $len) {
 $L = $L | 0;
 $idx = $idx | 0;
 $len = $len | 0;
 var $12 = 0, $13 = 0, $14 = 0, $2 = 0, $7 = 0.0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 do if (!(_luaL_callmeta($L, $idx, 56912) | 0)) {
  $2 = _lua_type($L, $idx) | 0;
  if (($2 | 0) == 1) {
   $9 = (_lua_toboolean($L, $idx) | 0) != 0;
   _lua_pushstring($L, $9 ? 69744 : 90768) | 0;
   break;
  } else if (($2 | 0) == 3) if (!(_lua_isinteger($L, $idx) | 0)) {
   $7 = +_lua_tonumberx($L, $idx, 0);
   HEAPF64[tempDoublePtr >> 3] = $7;
   HEAP32[$vararg_buffer1 >> 2] = HEAP32[tempDoublePtr >> 2];
   HEAP32[$vararg_buffer1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
   _lua_pushfstring($L, 55416, $vararg_buffer1) | 0;
   break;
  } else {
   HEAP32[$vararg_buffer >> 2] = _lua_tointegerx($L, $idx, 0) | 0;
   _lua_pushfstring($L, 55408, $vararg_buffer) | 0;
   break;
  } else if (!$2) {
   _lua_pushlstring($L, 67648, 3) | 0;
   break;
  } else if (($2 | 0) == 4) {
   _lua_pushvalue($L, $idx);
   break;
  } else {
   $12 = _lua_typename($L, _lua_type($L, $idx) | 0) | 0;
   $13 = _lua_topointer($L, $idx) | 0;
   HEAP32[$vararg_buffer4 >> 2] = $12;
   HEAP32[$vararg_buffer4 + 4 >> 2] = $13;
   _lua_pushfstring($L, 55424, $vararg_buffer4) | 0;
   break;
  }
 } while (0);
 $14 = _lua_tolstring($L, -1, $len) | 0;
 STACKTOP = sp;
 return $14 | 0;
}

function _audio_update($dt) {
 $dt = +$dt;
 var $14 = 0, $2 = 0, $26 = 0, $28 = 0, $29 = 0, $5 = 0, $7 = 0, $9 = 0, $i$02 = 0, $status = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp;
 $status = sp + 16 | 0;
 if (!(HEAP8[11016] | 0)) {
  STACKTOP = sp;
  return;
 } else $i$02 = 0;
 do {
  $2 = 11028 + ($i$02 * 20 | 0) | 0;
  if (HEAP8[$2 >> 0] | 0) {
   $5 = 11024 + ($i$02 * 20 | 0) | 0;
   _alGetSourcei(HEAP32[$5 >> 2] | 0, 4112, $status | 0);
   $7 = HEAP32[$status >> 2] | 0;
   if (($7 | 0) == 4114) HEAP8[$2 >> 0] = 1; else {
    $9 = ($7 | 0) == 4115;
    HEAP8[$2 >> 0] = $9 & 1;
    if (!$9) if ((HEAP32[11036 + ($i$02 * 20 | 0) >> 2] | 0) == 1) {
     $14 = HEAP32[11032 + ($i$02 * 20 | 0) >> 2] | 0;
     if (HEAP8[$14 + 8 >> 0] | 0) _sound_free($14);
    }
   }
   if (!(HEAP32[11036 + ($i$02 * 20 | 0) >> 2] | 0)) _music_update(HEAP32[11032 + ($i$02 * 20 | 0) >> 2] | 0);
   if (!(HEAP8[$2 >> 0] | 0)) {
    _alSourcei(HEAP32[$5 >> 2] | 0, 4105, 0);
    $26 = _alGetError() | 0;
    if ($26) {
     $28 = $26;
     do {
      $29 = _alGetString($28 | 0) | 0;
      HEAP32[$vararg_buffer >> 2] = 11344;
      HEAP32[$vararg_buffer + 4 >> 2] = 99;
      HEAP32[$vararg_buffer + 8 >> 2] = 11368;
      HEAP32[$vararg_buffer + 12 >> 2] = $29;
      _log_internal(3, 11520, 12024, $vararg_buffer);
      $28 = _alGetError() | 0;
     } while (($28 | 0) != 0);
    }
   }
  }
  $i$02 = $i$02 + 1 | 0;
 } while (($i$02 | 0) != 16);
 STACKTOP = sp;
 return;
}

function __ZN6b2Body12SetTransformERK6b2Vec2f($this, $position, $angle) {
 $this = $this | 0;
 $position = $position | 0;
 $angle = +$angle;
 var $1 = 0, $11 = 0, $13 = 0, $16 = 0, $17 = 0, $23 = 0.0, $26 = 0.0, $29 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $43 = 0, $48 = 0, $6 = 0, $7 = 0.0, $9 = 0.0, $f$01 = 0, $f$02 = 0;
 $1 = HEAP32[$this + 88 >> 2] | 0;
 if (HEAP32[$1 + 102868 >> 2] & 2) ___assert_fail(87280, 87e3, 419, 87408);
 $6 = $this + 12 | 0;
 $7 = +Math_sin(+$angle);
 HEAPF32[$this + 20 >> 2] = $7;
 $9 = +Math_cos(+$angle);
 HEAPF32[$this + 24 >> 2] = $9;
 $11 = $position;
 $13 = HEAP32[$11 >> 2] | 0;
 $16 = HEAP32[$11 + 4 >> 2] | 0;
 $17 = $6;
 HEAP32[$17 >> 2] = $13;
 HEAP32[$17 + 4 >> 2] = $16;
 $23 = +HEAPF32[$this + 28 >> 2];
 $26 = +HEAPF32[$this + 32 >> 2];
 $29 = (HEAP32[tempDoublePtr >> 2] = $13, +HEAPF32[tempDoublePtr >> 2]) + ($9 * $23 - $7 * $26);
 $34 = $23 * $7 + $9 * $26 + (HEAP32[tempDoublePtr >> 2] = $16, +HEAPF32[tempDoublePtr >> 2]);
 $35 = +$29;
 $36 = +$34;
 $37 = $this + 44 | 0;
 HEAPF32[$37 >> 2] = $35;
 HEAPF32[$37 + 4 >> 2] = $36;
 HEAPF32[$this + 56 >> 2] = $angle;
 $43 = $this + 36 | 0;
 HEAPF32[$43 >> 2] = $35;
 HEAPF32[$43 + 4 >> 2] = $36;
 HEAPF32[$this + 52 >> 2] = $angle;
 $48 = $1 + 102872 | 0;
 $f$01 = HEAP32[$this + 100 >> 2] | 0;
 if (!$f$01) return; else $f$02 = $f$01;
 do {
  __ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4_($f$02, $48, $6, $6);
  $f$02 = HEAP32[$f$02 + 4 >> 2] | 0;
 } while (($f$02 | 0) != 0);
 return;
}

function _searchpath($L, $name, $path, $sep, $dirsep) {
 $L = $L | 0;
 $name = $name | 0;
 $path = $path | 0;
 $sep = $sep | 0;
 $dirsep = $dirsep | 0;
 var $$0 = 0, $$0$i = 0, $$01$ph = 0, $14 = 0, $15 = 0, $3 = 0, $5 = 0, $l$0$i = 0, $msg = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2080 | 0;
 $vararg_buffer = sp;
 $msg = sp + 8 | 0;
 _luaL_buffinit($L, $msg);
 if (!(HEAP8[$sep >> 0] | 0)) $$01$ph = $name; else $$01$ph = _luaL_gsub($L, $name, $sep, $dirsep) | 0;
 $$0$i = $path;
 while (1) {
  $3 = HEAP8[$$0$i >> 0] | 0;
  if ($3 << 24 >> 24 == 59) {
   $$0$i = $$0$i + 1 | 0;
   continue;
  } else if (!($3 << 24 >> 24)) {
   label = 12;
   break;
  }
  $5 = _strchr($$0$i, 59) | 0;
  if (!$5) $l$0$i = $$0$i + (_strlen($$0$i | 0) | 0) | 0; else $l$0$i = $5;
  _lua_pushlstring($L, $$0$i, $l$0$i - $$0$i | 0) | 0;
  if (!$l$0$i) {
   label = 12;
   break;
  }
  $14 = _luaL_gsub($L, _lua_tolstring($L, -1, 0) | 0, 59048, $$01$ph) | 0;
  _lua_rotate($L, -2, -1);
  _lua_settop($L, -2);
  $15 = _fopen($14 | 0, 59072) | 0;
  if ($15) {
   label = 10;
   break;
  }
  HEAP32[$vararg_buffer >> 2] = $14;
  _lua_pushfstring($L, 59056, $vararg_buffer) | 0;
  _lua_rotate($L, -2, -1);
  _lua_settop($L, -2);
  _luaL_addvalue($msg);
  $$0$i = $l$0$i;
 }
 if ((label | 0) == 10) {
  _fclose($15 | 0) | 0;
  $$0 = $14;
  STACKTOP = sp;
  return $$0 | 0;
 } else if ((label | 0) == 12) {
  _luaL_pushresult($msg);
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _tconcat($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $7 = 0, $b = 0, $i$03 = 0, $lsep = 0, $ta = 0, $ta$idx1$val = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2096 | 0;
 $vararg_buffer2 = sp + 8 | 0;
 $vararg_buffer = sp;
 $ta = sp + 2088 | 0;
 $b = sp + 24 | 0;
 $lsep = sp + 16 | 0;
 $0 = _luaL_optlstring($L, 2, 62584, $lsep) | 0;
 _checktab($L, $ta);
 $1 = _luaL_optinteger($L, 3, 1) | 0;
 if ((_lua_type($L, 4) | 0) < 1) $7 = _luaL_len($L, 1) | 0; else $7 = _luaL_checkinteger($L, 4) | 0;
 _luaL_buffinit($L, $b);
 if (($1 | 0) < ($7 | 0)) {
  $ta$idx1$val = HEAP32[$ta >> 2] | 0;
  $i$03 = $1;
  do {
   FUNCTION_TABLE_iiii[$ta$idx1$val & 31]($L, 1, $i$03) | 0;
   if (!(_lua_isstring($L, -1) | 0)) {
    HEAP32[$vararg_buffer >> 2] = _lua_typename($L, _lua_type($L, -1) | 0) | 0;
    HEAP32[$vararg_buffer + 4 >> 2] = $i$03;
    _luaL_error($L, 62776, $vararg_buffer) | 0;
   }
   _luaL_addvalue($b);
   _luaL_addlstring($b, $0, HEAP32[$lsep >> 2] | 0);
   $i$03 = $i$03 + 1 | 0;
  } while (($i$03 | 0) != ($7 | 0));
 } else if (($1 | 0) != ($7 | 0)) {
  _luaL_pushresult($b);
  STACKTOP = sp;
  return 1;
 }
 FUNCTION_TABLE_iiii[HEAP32[$ta >> 2] & 31]($L, 1, $7) | 0;
 if (!(_lua_isstring($L, -1) | 0)) {
  HEAP32[$vararg_buffer2 >> 2] = _lua_typename($L, _lua_type($L, -1) | 0) | 0;
  HEAP32[$vararg_buffer2 + 4 >> 2] = $7;
  _luaL_error($L, 62776, $vararg_buffer2) | 0;
 }
 _luaL_addvalue($b);
 _luaL_pushresult($b);
 STACKTOP = sp;
 return 1;
}

function _MUSL_vfprintf($f, $fmt, $ap) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$ = 0, $$0 = 0, $11 = 0, $12 = 0, $2 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $ap2 = sp + 120 | 0;
 $nl_type = sp + 80 | 0;
 $nl_arg = sp;
 $internal_buf = sp + 136 | 0;
 dest = $nl_type + 0 | 0;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$ap2 >> 2] = HEAP32[$ap >> 2];
 if ((_printf_core(0, $fmt, $ap2, $nl_arg, $nl_type) | 0) < 0) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $2 = $f + 48 | 0;
 if (!(HEAP32[$2 >> 2] | 0)) {
  $6 = $f + 44 | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  HEAP32[$6 >> 2] = $internal_buf;
  $8 = $f + 28 | 0;
  HEAP32[$8 >> 2] = $internal_buf;
  $9 = $f + 20 | 0;
  HEAP32[$9 >> 2] = $internal_buf;
  HEAP32[$2 >> 2] = 80;
  $11 = $f + 16 | 0;
  HEAP32[$11 >> 2] = $internal_buf + 80;
  $12 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type) | 0;
  if (!$7) $ret$1 = $12; else {
   FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, 0, 0) | 0;
   $$ = (HEAP32[$9 >> 2] | 0) == 0 ? -1 : $12;
   HEAP32[$6 >> 2] = $7;
   HEAP32[$2 >> 2] = 0;
   HEAP32[$11 >> 2] = 0;
   HEAP32[$8 >> 2] = 0;
   HEAP32[$9 >> 2] = 0;
   $ret$1 = $$;
  }
 } else $ret$1 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type) | 0;
 $$0 = $ret$1;
 STACKTOP = sp;
 return $$0 | 0;
}

function _dlua_load_code() {
 var $$0 = 0, $0 = 0, $22 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $0 = HEAP32[16] | 0;
 if (_lua_gettop($0) | 0) ___assert_fail(104, 128, 184, 208);
 do if (!(HEAP8[80] | 0)) {
  _luaL_requiref($0, 224, 163, 0);
  _register_audio(HEAP32[16] | 0);
  _register_particle(HEAP32[16] | 0);
  _register_physics(HEAP32[16] | 0);
  _register_storage(HEAP32[16] | 0);
  _register_truetype(HEAP32[16] | 0);
  _register_web(HEAP32[16] | 0);
  _register_graphics(HEAP32[16] | 0);
  _register_event(HEAP32[16] | 0);
  _register_utils(HEAP32[16] | 0);
  _lua_settop($0, -2);
  _lua_pushcclosure($0, 164, 0);
  if (_load_luafiles($0, _lua_gettop($0) | 0) | 0) {
   _lua_settop($0, -2);
   HEAP8[80] = 1;
   break;
  }
  _lua_settop($0, -3);
  if (!(_lua_gettop($0) | 0)) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else ___assert_fail(104, 128, 194, 208);
 } while (0);
 if (!(_luaL_loadfilex($0, HEAP32[22] | 0, 0) | 0)) {
  _call_lua_function($0, 0, 0);
  if (!(_lua_gettop($0) | 0)) {
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  } else ___assert_fail(104, 128, 215, 208);
 } else {
  $22 = HEAP32[_stderr >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = _lua_tolstring($0, -1, 0) | 0;
  _fprintf($22 | 0, 232, $vararg_buffer | 0) | 0;
  _lua_settop($0, -2);
  if (!(_lua_gettop($0) | 0)) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else ___assert_fail(104, 128, 204, 208);
 }
 return 0;
}

function _font_load($filename, $size, $first_char, $num_chars) {
 $filename = $filename | 0;
 $size = +$size;
 $first_char = $first_char | 0;
 $num_chars = $num_chars | 0;
 var $$0 = 0, $1 = 0, $12 = 0, $15 = 0, $16 = 0, $23 = 0, $3 = 0, $6 = 0, $8 = 0, $i$01 = 0;
 if (!$filename) ___assert_fail(16296, 5736, 39, 5760);
 $1 = _fopen($filename | 0, 80904) | 0;
 if (!$1) {
  $$0 = 0;
  return $$0 | 0;
 }
 _fseek($1 | 0, 0, 2) | 0;
 $3 = _ftell($1 | 0) | 0;
 if (($3 | 0) < 0) {
  _fclose($1 | 0) | 0;
  $$0 = 0;
  return $$0 | 0;
 }
 _fseek($1 | 0, 0, 0) | 0;
 $6 = _mmap(0, $3 | 0, 1, 2, _fileno($1 | 0) | 0, 0) | 0;
 if (($6 | 0) == (-1 | 0)) {
  _fclose($1 | 0) | 0;
  $$0 = 0;
  return $$0 | 0;
 }
 $8 = _xmalloc(24) | 0;
 HEAP32[$8 + 8 >> 2] = $first_char;
 HEAP32[$8 + 12 >> 2] = $num_chars;
 $12 = _xmalloc($num_chars * 20 | 0) | 0;
 HEAP32[$8 + 20 >> 2] = $12;
 HEAPF32[$8 + 4 >> 2] = $size;
 $15 = _xmalloc(4194304) | 0;
 _stbtt_BakeFontBitmap($6, 0, $size, $15, 2048, 2048, $first_char, $num_chars, $12) | 0;
 _munmap($6 | 0, $3 | 0) | 0;
 $16 = _xmalloc(16777216) | 0;
 _memset($16 | 0, -1, 16777216) | 0;
 $i$01 = 0;
 do {
  HEAP8[$16 + ($i$01 << 2 | 3) >> 0] = HEAP8[$15 + $i$01 >> 0] | 0;
  $i$01 = $i$01 + 1 | 0;
 } while (($i$01 | 0) != 4194304);
 _free($15);
 $23 = _display_create_surface(2048, 2048, 2048, 2048, $16) | 0;
 HEAP32[$8 >> 2] = $23;
 _display_set_filter($23, 9728);
 HEAP32[$8 + 16 >> 2] = 0;
 _free($16);
 _fclose($1 | 0) | 0;
 $$0 = $8;
 return $$0 | 0;
}

function _mz_zip_reader_end($pZip) {
 $pZip = $pZip | 0;
 var $$0 = 0, $1 = 0, $10 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $7 = 0, $8 = 0, $pZip$idx5 = 0;
 if (!$pZip) {
  $$0 = 0;
  return $$0 | 0;
 }
 $1 = $pZip + 56 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!$2) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP32[$pZip + 28 >> 2] | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $7 = $pZip + 32 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 if (!$8) {
  $$0 = 0;
  return $$0 | 0;
 }
 $10 = $pZip + 20 | 0;
 if ((HEAP32[$10 >> 2] | 0) != 1) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP32[$1 >> 2] = 0;
 $pZip$idx5 = $pZip + 40 | 0;
 FUNCTION_TABLE_vii[$8 & 127](HEAP32[$pZip$idx5 >> 2] | 0, HEAP32[$2 >> 2] | 0);
 HEAP32[$2 + 0 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 + 12 >> 2] = 0;
 $14 = $2 + 16 | 0;
 FUNCTION_TABLE_vii[HEAP32[$7 >> 2] & 127](HEAP32[$pZip$idx5 >> 2] | 0, HEAP32[$14 >> 2] | 0);
 HEAP32[$14 + 0 >> 2] = 0;
 HEAP32[$14 + 4 >> 2] = 0;
 HEAP32[$14 + 8 >> 2] = 0;
 HEAP32[$14 + 12 >> 2] = 0;
 $16 = $2 + 32 | 0;
 FUNCTION_TABLE_vii[HEAP32[$7 >> 2] & 127](HEAP32[$pZip$idx5 >> 2] | 0, HEAP32[$16 >> 2] | 0);
 HEAP32[$16 + 0 >> 2] = 0;
 HEAP32[$16 + 4 >> 2] = 0;
 HEAP32[$16 + 8 >> 2] = 0;
 HEAP32[$16 + 12 >> 2] = 0;
 $18 = $2 + 48 | 0;
 $19 = HEAP32[$18 >> 2] | 0;
 if ($19) {
  _fclose($19 | 0) | 0;
  HEAP32[$18 >> 2] = 0;
 }
 FUNCTION_TABLE_vii[HEAP32[$7 >> 2] & 127](HEAP32[$pZip$idx5 >> 2] | 0, $2);
 HEAP32[$10 >> 2] = 0;
 $$0 = 1;
 return $$0 | 0;
}

function _log10f($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $12 = 0, $18 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $31 = 0.0, $35 = 0.0, $40 = 0.0, $41 = 0.0, $ix$0 = 0, $k$0 = 0;
 $0 = (HEAPF32[tempDoublePtr >> 2] = $x, HEAP32[tempDoublePtr >> 2] | 0);
 $2 = ($0 | 0) < 0;
 do if ($0 >>> 0 < 8388608 | $2) {
  if (!($0 & 2147483647)) {
   $$0 = -1.0 / ($x * $x);
   return +$$0;
  }
  if (!$2) {
   $ix$0 = (HEAPF32[tempDoublePtr >> 2] = $x * 33554432.0, HEAP32[tempDoublePtr >> 2] | 0);
   $k$0 = -152;
   break;
  }
  $$0 = ($x - $x) / 0.0;
  return +$$0;
 } else {
  if ($0 >>> 0 > 2139095039) {
   $$0 = $x;
   return +$$0;
  }
  if (($0 | 0) == 1065353216) {
   $$0 = 0.0;
   return +$$0;
  } else {
   $ix$0 = $0;
   $k$0 = -127;
  }
 } while (0);
 $12 = $ix$0 + 4913933 | 0;
 $18 = (HEAP32[tempDoublePtr >> 2] = ($12 & 8388607) + 1060439283, +HEAPF32[tempDoublePtr >> 2]) + -1.0;
 $20 = $18 / ($18 + 2.0);
 $21 = $20 * $20;
 $22 = $21 * $21;
 $31 = $18 * ($18 * .5);
 $35 = (HEAP32[tempDoublePtr >> 2] = (HEAPF32[tempDoublePtr >> 2] = $18 - $31, HEAP32[tempDoublePtr >> 2] | 0) & -4096, +HEAPF32[tempDoublePtr >> 2]);
 $40 = $20 * ($31 + ($21 * ($22 * .2849878668785095 + .6666666269302368) + $22 * ($22 * .24279078841209412 + .40000972151756287))) + ($18 - $35 - $31);
 $41 = +($k$0 + ($12 >>> 23) | 0);
 $$0 = $41 * .3010292053222656 + ($35 * .434326171875 + ($40 * .434326171875 + ($41 * 7.903415166765626e-07 - ($35 + $40) * 3.168997136526741e-05)));
 return +$$0;
}

function _png_colorspace_endpoints_match($xy1, $xy2, $delta) {
 $xy1 = $xy1 | 0;
 $xy2 = $xy2 | 0;
 $delta = $delta | 0;
 var $1 = 0, $11 = 0, $16 = 0, $17 = 0, $23 = 0, $25 = 0, $3 = 0, $31 = 0, $33 = 0, $39 = 0, $41 = 0, $47 = 0, $49 = 0, $55 = 0, $57 = 0, $9 = 0;
 $1 = HEAP32[$xy1 + 24 >> 2] | 0;
 $3 = HEAP32[$xy2 + 24 >> 2] | 0;
 if (($1 | 0) < ($3 - $delta | 0) | ($1 | 0) > ($3 + $delta | 0)) return 0;
 $9 = HEAP32[$xy1 + 28 >> 2] | 0;
 $11 = HEAP32[$xy2 + 28 >> 2] | 0;
 if (($9 | 0) < ($11 - $delta | 0) | ($9 | 0) > ($11 + $delta | 0)) return 0;
 $16 = HEAP32[$xy1 >> 2] | 0;
 $17 = HEAP32[$xy2 >> 2] | 0;
 if (($16 | 0) < ($17 - $delta | 0) | ($16 | 0) > ($17 + $delta | 0)) return 0;
 $23 = HEAP32[$xy1 + 4 >> 2] | 0;
 $25 = HEAP32[$xy2 + 4 >> 2] | 0;
 if (($23 | 0) < ($25 - $delta | 0) | ($23 | 0) > ($25 + $delta | 0)) return 0;
 $31 = HEAP32[$xy1 + 8 >> 2] | 0;
 $33 = HEAP32[$xy2 + 8 >> 2] | 0;
 if (($31 | 0) < ($33 - $delta | 0) | ($31 | 0) > ($33 + $delta | 0)) return 0;
 $39 = HEAP32[$xy1 + 12 >> 2] | 0;
 $41 = HEAP32[$xy2 + 12 >> 2] | 0;
 if (($39 | 0) < ($41 - $delta | 0) | ($39 | 0) > ($41 + $delta | 0)) return 0;
 $47 = HEAP32[$xy1 + 16 >> 2] | 0;
 $49 = HEAP32[$xy2 + 16 >> 2] | 0;
 if (($47 | 0) < ($49 - $delta | 0) | ($47 | 0) > ($49 + $delta | 0)) return 0; else {
  $55 = HEAP32[$xy1 + 20 >> 2] | 0;
  $57 = HEAP32[$xy2 + 20 >> 2] | 0;
  return (($55 | 0) < ($57 - $delta | 0) | ($55 | 0) > ($57 + $delta | 0)) & 1 ^ 1 | 0;
 }
 return 0;
}

function _png_cache_unknown_chunk($png_ptr, $length) {
 $png_ptr = $png_ptr | 0;
 $length = $length | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $26 = 0, $27 = 0, $29 = 0, $4 = 0, $7 = 0, label = 0;
 $0 = $png_ptr + 772 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ($1) {
  _png_free($png_ptr, $1);
  HEAP32[$0 >> 2] = 0;
 }
 $4 = HEAP32[$png_ptr + 760 >> 2] | 0;
 if (($4 | 0) == -1 | ($4 | 0) == 0) label = 5; else if ($4 >>> 0 < $length >>> 0) {
  $27 = 0;
  label = 8;
 } else label = 5;
 do if ((label | 0) == 5) {
  $7 = HEAP32[$png_ptr + 376 >> 2] | 0;
  HEAP8[$png_ptr + 764 >> 0] = $7 >>> 24;
  HEAP8[$png_ptr + 765 >> 0] = $7 >>> 16;
  HEAP8[$png_ptr + 766 >> 0] = $7 >>> 8;
  HEAP8[$png_ptr + 767 >> 0] = $7;
  HEAP8[$png_ptr + 768 >> 0] = 0;
  HEAP32[$png_ptr + 776 >> 2] = $length;
  HEAP8[$png_ptr + 780 >> 0] = HEAP32[$png_ptr + 208 >> 2];
  if (!$length) {
   HEAP32[$0 >> 2] = 0;
   break;
  } else {
   $26 = _png_malloc_warn($png_ptr, $length) | 0;
   HEAP32[$0 >> 2] = $26;
   $27 = $26;
   label = 8;
   break;
  }
 } while (0);
 do if ((label | 0) == 8) {
  $29 = ($length | 0) == 0;
  if (($27 | 0) != 0 | $29) {
   if ($29 | ($png_ptr | 0) == 0) break;
   _png_read_data($png_ptr, $27, $length);
   _png_calculate_crc($png_ptr, $27, $length);
   break;
  } else {
   _png_crc_finish($png_ptr, $length) | 0;
   _png_chunk_benign_error($png_ptr, 77056);
   $$0 = 0;
   return $$0 | 0;
  }
 } while (0);
 _png_crc_finish($png_ptr, 0) | 0;
 $$0 = 1;
 return $$0 | 0;
}

function _searcher_Croot($L) {
 $L = $L | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer6 = sp + 24 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $0 = _luaL_checklstring($L, 1, 0) | 0;
 $1 = _strchr($0, 46) | 0;
 if (!$1) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _lua_pushlstring($L, $0, $1 - $0 | 0) | 0;
 $6 = _lua_tolstring($L, -1, 0) | 0;
 _lua_getfield($L, -1001001, 58400) | 0;
 $7 = _lua_tolstring($L, -1, 0) | 0;
 if (!$7) {
  HEAP32[$vararg_buffer >> 2] = 58400;
  _luaL_error($L, 59016, $vararg_buffer) | 0;
 }
 $9 = _searchpath($L, $6, $7, 107776, 58832) | 0;
 if (!$9) {
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $11 = _loadfunc($L, $9, $0) | 0;
 if (!$11) {
  _lua_pushstring($L, $9) | 0;
  $$0 = 2;
  STACKTOP = sp;
  return $$0 | 0;
 } else if (($11 | 0) == 2) {
  HEAP32[$vararg_buffer6 >> 2] = $0;
  HEAP32[$vararg_buffer6 + 4 >> 2] = $9;
  _lua_pushfstring($L, 58840, $vararg_buffer6) | 0;
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $12 = _lua_tolstring($L, 1, 0) | 0;
  $13 = _lua_tolstring($L, -1, 0) | 0;
  HEAP32[$vararg_buffer1 >> 2] = $12;
  HEAP32[$vararg_buffer1 + 4 >> 2] = $9;
  HEAP32[$vararg_buffer1 + 8 >> 2] = $13;
  $$0 = _luaL_error($L, 58872, $vararg_buffer1) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function __ZN14CustomListener12BeginContactEP9b2Contact($this, $contact) {
 $this = $this | 0;
 $contact = $contact | 0;
 var $0 = 0, $22 = 0, $3 = 0, $30 = 0, $4 = 0, $7 = 0, $8 = 0, $manifold = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $manifold = sp;
 $0 = $this + 8 | 0;
 if ((HEAP32[$0 >> 2] | 0) == -1) {
  STACKTOP = sp;
  return;
 }
 $3 = $contact + 48 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $7 = $contact + 52 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 __ZN15b2WorldManifold10InitializeEPK10b2ManifoldRK11b2TransformfS5_f($manifold, $contact + 64 | 0, (HEAP32[$4 + 8 >> 2] | 0) + 12 | 0, +HEAPF32[(HEAP32[$4 + 12 >> 2] | 0) + 8 >> 2], (HEAP32[$8 + 8 >> 2] | 0) + 12 | 0, +HEAPF32[(HEAP32[$8 + 12 >> 2] | 0) + 8 >> 2]);
 $22 = $this + 4 | 0;
 _lua_rawgeti(HEAP32[$22 >> 2] | 0, -1001e3, HEAP32[$0 >> 2] | 0) | 0;
 $30 = HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0;
 __Z9push_bodyP9lua_StateP4Body(HEAP32[$22 >> 2] | 0, HEAP32[(HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0) + 148 >> 2] | 0);
 __Z9push_bodyP9lua_StateP4Body(HEAP32[$22 >> 2] | 0, HEAP32[$30 + 148 >> 2] | 0);
 _lua_pushnumber(HEAP32[$22 >> 2] | 0, +HEAPF32[$manifold + 8 >> 2] * +HEAPF32[616]);
 _lua_pushnumber(HEAP32[$22 >> 2] | 0, +HEAPF32[$manifold + 12 >> 2] * +HEAPF32[616]);
 _lua_pushnumber(HEAP32[$22 >> 2] | 0, +HEAPF32[$manifold >> 2]);
 _lua_pushnumber(HEAP32[$22 >> 2] | 0, +HEAPF32[$manifold + 4 >> 2]);
 _call_lua_function(HEAP32[$22 >> 2] | 0, 6, 0);
 STACKTOP = sp;
 return;
}

function __ZN6b2Body9SetActiveEb($this, $flag) {
 $this = $this | 0;
 $flag = $flag | 0;
 var $0 = 0, $1 = 0, $10 = 0, $13 = 0, $16 = 0, $21 = 0, $26 = 0, $27 = 0, $6 = 0, $7 = 0, $ce$03 = 0, $f$01 = 0, $f$02 = 0, $f2$05 = 0, $f2$06 = 0, $ce$03$looptemp = 0;
 $0 = $this + 88 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (HEAP32[$1 + 102868 >> 2] & 2) ___assert_fail(87280, 87e3, 456, 87424);
 $6 = $this + 4 | 0;
 $7 = HEAP16[$6 >> 1] | 0;
 if (!(($7 & 32) != 0 ^ $flag)) return;
 $10 = $7 & 65535;
 if ($flag) {
  HEAP16[$6 >> 1] = $10 | 32;
  $13 = $1 + 102872 | 0;
  $f$01 = HEAP32[$this + 100 >> 2] | 0;
  if (!$f$01) return;
  $16 = $this + 12 | 0;
  $f$02 = $f$01;
  do {
   __ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform($f$02, $13, $16);
   $f$02 = HEAP32[$f$02 + 4 >> 2] | 0;
  } while (($f$02 | 0) != 0);
  return;
 }
 HEAP16[$6 >> 1] = $10 & 65503;
 $21 = $1 + 102872 | 0;
 $f2$05 = HEAP32[$this + 100 >> 2] | 0;
 if ($f2$05) {
  $f2$06 = $f2$05;
  do {
   __ZN9b2Fixture14DestroyProxiesEP12b2BroadPhase($f2$06, $21);
   $f2$06 = HEAP32[$f2$06 + 4 >> 2] | 0;
  } while (($f2$06 | 0) != 0);
 }
 $26 = $this + 112 | 0;
 $27 = HEAP32[$26 >> 2] | 0;
 if ($27) {
  $ce$03 = $27;
  do {
   $ce$03$looptemp = $ce$03;
   $ce$03 = HEAP32[$ce$03 + 12 >> 2] | 0;
   __ZN16b2ContactManager7DestroyEP9b2Contact((HEAP32[$0 >> 2] | 0) + 102872 | 0, HEAP32[$ce$03$looptemp + 4 >> 2] | 0);
  } while (($ce$03 | 0) != 0);
 }
 HEAP32[$26 >> 2] = 0;
 return;
}

function __Z19mlua_update_physicsP9lua_State($L) {
 $L = $L | 0;
 var $10 = 0.0, $12 = 0, $16 = 0, $20 = 0, $24 = 0, $3 = 0.0, $4 = 0.0, $6 = 0.0, $body$01 = 0, $joint$03 = 0, sp = 0, $joint$03$looptemp = 0, $body$01$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!$L) ___assert_fail(23976, 2472, 159, 2744);
 if (!(HEAP32[632] | 0)) _luaL_error($L, 2768, sp) | 0;
 $3 = +_luaL_checknumber($L, 1);
 $4 = +_luaL_optnumber($L, 2, .01666666753590107);
 $6 = $3 + +HEAPF32[708];
 HEAPF32[708] = $6;
 if ($6 >= $4) do {
  __ZN7b2World4StepEfii(HEAP32[632] | 0, $4, 8, 3);
  $10 = +HEAPF32[708] - $4;
  HEAPF32[708] = $10;
 } while ($10 >= $4);
 $12 = HEAP32[710] | 0;
 if ($12) {
  $joint$03 = $12;
  do {
   $joint$03$looptemp = $joint$03;
   $joint$03 = HEAP32[$joint$03 + 4 >> 2] | 0;
   $16 = HEAP32[$joint$03$looptemp >> 2] | 0;
   if ($16) {
    __ZN7b2World12DestroyJointEP7b2Joint(HEAP32[632] | 0, $16);
    HEAP32[$joint$03$looptemp >> 2] = 0;
   }
  } while (($joint$03 | 0) != 0);
 }
 HEAP32[710] = 0;
 $20 = HEAP32[712] | 0;
 if (!$20) {
  HEAP32[712] = 0;
  STACKTOP = sp;
  return 0;
 } else $body$01 = $20;
 do {
  $body$01$looptemp = $body$01;
  $body$01 = HEAP32[$body$01 + 4 >> 2] | 0;
  $24 = HEAP32[$body$01$looptemp >> 2] | 0;
  if ($24) {
   __ZN7b2World11DestroyBodyEP6b2Body(HEAP32[632] | 0, $24);
   HEAP32[$body$01$looptemp >> 2] = 0;
  }
 } while (($body$01 | 0) != 0);
 HEAP32[712] = 0;
 STACKTOP = sp;
 return 0;
}

function ___strchrnul($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $11 = 0, $15 = 0, $16 = 0, $22 = 0, $23 = 0, $29 = 0, $36 = 0, $37 = 0, $5 = 0, $8 = 0, $w$0$lcssa = 0, $w$08 = 0;
 $0 = $c & 255;
 if (!$0) {
  $$0 = $s + (_strlen($s | 0) | 0) | 0;
  return $$0 | 0;
 }
 L5 : do if (!($s & 3)) $$02$lcssa = $s; else {
  $5 = $c & 255;
  $$0211 = $s;
  while (1) {
   $8 = HEAP8[$$0211 >> 0] | 0;
   if ($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 == $5 << 24 >> 24) {
    $$0 = $$0211;
    break;
   }
   $11 = $$0211 + 1 | 0;
   if (!($11 & 3)) {
    $$02$lcssa = $11;
    break L5;
   } else $$0211 = $11;
  }
  return $$0 | 0;
 } while (0);
 $15 = Math_imul($0, 16843009) | 0;
 $16 = HEAP32[$$02$lcssa >> 2] | 0;
 L12 : do if (!(($16 & -2139062144 ^ -2139062144) & $16 + -16843009)) {
  $23 = $16;
  $w$08 = $$02$lcssa;
  while (1) {
   $22 = $23 ^ $15;
   if (($22 & -2139062144 ^ -2139062144) & $22 + -16843009) {
    $w$0$lcssa = $w$08;
    break L12;
   }
   $29 = $w$08 + 4 | 0;
   $23 = HEAP32[$29 >> 2] | 0;
   if (($23 & -2139062144 ^ -2139062144) & $23 + -16843009) {
    $w$0$lcssa = $29;
    break;
   } else $w$08 = $29;
  }
 } else $w$0$lcssa = $$02$lcssa; while (0);
 $36 = $c & 255;
 $$1 = $w$0$lcssa;
 while (1) {
  $37 = HEAP8[$$1 >> 0] | 0;
  if ($37 << 24 >> 24 == 0 ? 1 : $37 << 24 >> 24 == $36 << 24 >> 24) {
   $$0 = $$1;
   break;
  } else $$1 = $$1 + 1 | 0;
 }
 return $$0 | 0;
}

function _lua_rawseti($L, $idx, $n) {
 $L = $L | 0;
 $idx = $idx | 0;
 $n = $n | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $29 = 0, $30 = 0, $33 = 0, $4 = 0, $48 = 0, $49 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 3) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 59168;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 3) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 4 >> 2] | 0) == 22) $$0$i = 59168; else {
   $21 = HEAP32[$17 >> 2] | 0;
   if (($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0)) $$0$i = 59168; else $$0$i = $21 + 16 + ($16 + -1 << 3) | 0;
  }
 } while (0);
 $29 = HEAP32[$$0$i >> 2] | 0;
 $30 = $L + 8 | 0;
 _luaH_setint($L, $29, $n, (HEAP32[$30 >> 2] | 0) + -8 | 0);
 $33 = HEAP32[$30 >> 2] | 0;
 if (!(HEAP32[$33 + -4 >> 2] & 64)) {
  $49 = $33;
  $48 = $49 + -8 | 0;
  HEAP32[$30 >> 2] = $48;
  return;
 }
 if (!(HEAP8[$29 + 5 >> 0] & 4)) {
  $49 = $33;
  $48 = $49 + -8 | 0;
  HEAP32[$30 >> 2] = $48;
  return;
 }
 if (!(HEAP8[(HEAP32[$33 + -8 >> 2] | 0) + 5 >> 0] & 3)) {
  $49 = $33;
  $48 = $49 + -8 | 0;
  HEAP32[$30 >> 2] = $48;
  return;
 }
 _luaC_barrierback_($L, $29);
 $49 = HEAP32[$30 >> 2] | 0;
 $48 = $49 + -8 | 0;
 HEAP32[$30 >> 2] = $48;
 return;
}

function _stbtt_GetGlyphHMetrics($info, $glyph_index, $advanceWidth, $leftSideBearing) {
 $info = $info | 0;
 $glyph_index = $glyph_index | 0;
 $advanceWidth = $advanceWidth | 0;
 $leftSideBearing = $leftSideBearing | 0;
 var $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum6 = 0, $1 = 0, $11 = 0, $13 = 0, $3 = 0;
 $1 = HEAP32[$info + 4 >> 2] | 0;
 $3 = HEAP32[$info + 28 >> 2] | 0;
 $11 = (HEAPU8[$1 + ($3 + 34) >> 0] | 0) << 8 | (HEAPU8[$1 + ($3 + 35) >> 0] | 0);
 $13 = ($advanceWidth | 0) != 0;
 if (($11 | 0) > ($glyph_index | 0)) {
  if ($13) {
   $$sum6 = (HEAP32[$info + 32 >> 2] | 0) + ($glyph_index << 2) | 0;
   HEAP32[$advanceWidth >> 2] = ((HEAPU8[$1 + $$sum6 >> 0] | 0) << 8 | (HEAPU8[$1 + ($$sum6 + 1) >> 0] | 0)) << 16 >> 16;
  }
  if (!$leftSideBearing) return;
  $$sum4 = (HEAP32[$info + 32 >> 2] | 0) + ($glyph_index << 2) | 0;
  HEAP32[$leftSideBearing >> 2] = ((HEAPU8[$1 + ($$sum4 + 2) >> 0] | 0) << 8 | (HEAPU8[$1 + ($$sum4 + 3) >> 0] | 0)) << 16 >> 16;
  return;
 } else {
  if ($13) {
   $$sum3 = ($11 << 2) + -4 + (HEAP32[$info + 32 >> 2] | 0) | 0;
   HEAP32[$advanceWidth >> 2] = ((HEAPU8[$1 + $$sum3 >> 0] | 0) << 8 | (HEAPU8[$1 + ($$sum3 + 1) >> 0] | 0)) << 16 >> 16;
  }
  if (!$leftSideBearing) return;
  $$sum2 = ($glyph_index - $11 << 1) + ($11 << 2) + (HEAP32[$info + 32 >> 2] | 0) | 0;
  HEAP32[$leftSideBearing >> 2] = ((HEAPU8[$1 + $$sum2 >> 0] | 0) << 8 | (HEAPU8[$1 + ($$sum2 + 1) >> 0] | 0)) << 16 >> 16;
  return;
 }
}

function _db_sethook($L) {
 $L = $L | 0;
 var $$$i = 0, $$0$i = 0, $10 = 0, $13 = 0, $16 = 0, $3 = 0, $4 = 0, $8 = 0, $count$0 = 0, $func$0 = 0, $mask$0 = 0, $mask$1$$i = 0, $mask$1$i = 0;
 if ((_lua_type($L, 1) | 0) == 8) {
  $$0$i = _lua_tothread($L, 1) | 0;
  $4 = 1;
 } else {
  $$0$i = $L;
  $4 = 0;
 }
 $3 = $4 + 1 | 0;
 if ((_lua_type($L, $3) | 0) < 1) {
  _lua_settop($L, $3);
  $count$0 = 0;
  $func$0 = 0;
  $mask$0 = 0;
 } else {
  $8 = _luaL_checklstring($L, $4 | 2, 0) | 0;
  _luaL_checktype($L, $3, 6);
  $10 = _luaL_optinteger($L, $4 + 3 | 0, 0) | 0;
  $$$i = (_strchr($8, 99) | 0) != 0 & 1;
  $13 = (_strchr($8, 114) | 0) == 0;
  $mask$1$i = $13 ? $$$i : $$$i | 2;
  $16 = (_strchr($8, 108) | 0) == 0;
  $mask$1$$i = $16 ? $mask$1$i : $mask$1$i | 4;
  $count$0 = $10;
  $func$0 = 85;
  $mask$0 = ($10 | 0) > 0 ? $mask$1$$i | 8 : $mask$1$$i;
 }
 if (_lua_rawgetp($L, -1001e3, 66552) | 0) {
  _lua_pushthread($$0$i) | 0;
  _lua_xmove($$0$i, $L, 1);
  _lua_pushvalue($L, $3);
  _lua_rawset($L, -3);
  _lua_sethook($$0$i, $func$0, $mask$0, $count$0);
  return 0;
 }
 _lua_createtable($L, 0, 2);
 _lua_pushvalue($L, -1);
 _lua_rawsetp($L, -1001e3, 66552);
 _lua_pushstring($L, 66560) | 0;
 _lua_setfield($L, -2, 66568);
 _lua_pushvalue($L, -1);
 _lua_setmetatable($L, -2) | 0;
 _lua_pushthread($$0$i) | 0;
 _lua_xmove($$0$i, $L, 1);
 _lua_pushvalue($L, $3);
 _lua_rawset($L, -3);
 _lua_sethook($$0$i, $func$0, $mask$0, $count$0);
 return 0;
}

function __ZNK12b2ChainShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi($this, $output, $input, $xf, $childIndex) {
 $this = $this | 0;
 $output = $output | 0;
 $input = $input | 0;
 $xf = $xf | 0;
 $childIndex = $childIndex | 0;
 var $1 = 0, $10 = 0, $12 = 0, $17 = 0, $18 = 0, $24 = 0, $29 = 0, $30 = 0, $34 = 0, $5 = 0, $6 = 0, $edgeShape = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $edgeShape = sp;
 $1 = HEAP32[$this + 16 >> 2] | 0;
 if (($1 | 0) > ($childIndex | 0)) {
  HEAP32[$edgeShape >> 2] = 81784;
  HEAP32[$edgeShape + 4 >> 2] = 1;
  HEAPF32[$edgeShape + 8 >> 2] = .009999999776482582;
  $5 = $edgeShape + 28 | 0;
  HEAP32[$5 + 0 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$5 + 8 >> 2] = 0;
  HEAP32[$5 + 12 >> 2] = 0;
  HEAP16[$5 + 16 >> 1] = 0;
  $6 = $childIndex + 1 | 0;
  $10 = HEAP32[$this + 12 >> 2] | 0;
  $12 = $10 + ($childIndex << 3) | 0;
  $17 = HEAP32[$12 + 4 >> 2] | 0;
  $18 = $edgeShape + 12 | 0;
  HEAP32[$18 >> 2] = HEAP32[$12 >> 2];
  HEAP32[$18 + 4 >> 2] = $17;
  $24 = $10 + ((($6 | 0) == ($1 | 0) ? 0 : $6) << 3) | 0;
  $29 = HEAP32[$24 + 4 >> 2] | 0;
  $30 = $edgeShape + 20 | 0;
  HEAP32[$30 >> 2] = HEAP32[$24 >> 2];
  HEAP32[$30 + 4 >> 2] = $29;
  $34 = __ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi($edgeShape, $output, $input, $xf, 0) | 0;
  STACKTOP = sp;
  return $34 | 0;
 } else ___assert_fail(81608, 81376, 148, 89664);
 return 0;
}

function _ll_require($L) {
 $L = $L | 0;
 var $0 = 0, $7 = 0, $i$0$i = 0, $msg$i = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2080 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $msg$i = sp + 16 | 0;
 $0 = _luaL_checklstring($L, 1, 0) | 0;
 _lua_settop($L, 1);
 _lua_getfield($L, -1001e3, 58536) | 0;
 _lua_getfield($L, 2, $0) | 0;
 if (_lua_toboolean($L, -1) | 0) {
  STACKTOP = sp;
  return 1;
 }
 _lua_settop($L, -2);
 _luaL_buffinit($L, $msg$i);
 if ((_lua_getfield($L, -1001001, 58616) | 0) == 5) $i$0$i = 1; else {
  _luaL_error($L, 58632, sp) | 0;
  $i$0$i = 1;
 }
 while (1) {
  if (!(_lua_rawgeti($L, 3, $i$0$i) | 0)) {
   _lua_settop($L, -2);
   _luaL_pushresult($msg$i);
   $7 = _lua_tolstring($L, -1, 0) | 0;
   HEAP32[$vararg_buffer1 >> 2] = $0;
   HEAP32[$vararg_buffer1 + 4 >> 2] = $7;
   _luaL_error($L, 58672, $vararg_buffer1) | 0;
  }
  _lua_pushstring($L, $0) | 0;
  _lua_callk($L, 1, 2, 0, 0);
  if ((_lua_type($L, -2) | 0) == 6) break;
  if (!(_lua_isstring($L, -2) | 0)) _lua_settop($L, -3); else {
   _lua_settop($L, -2);
   _luaL_addvalue($msg$i);
  }
  $i$0$i = $i$0$i + 1 | 0;
 }
 _lua_pushstring($L, $0) | 0;
 _lua_rotate($L, -2, 1);
 _lua_callk($L, 2, 1, 0, 0);
 if (_lua_type($L, -1) | 0) _lua_setfield($L, 2, $0);
 if (_lua_getfield($L, 2, $0) | 0) {
  STACKTOP = sp;
  return 1;
 }
 _lua_pushboolean($L, 1);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, 2, $0);
 STACKTOP = sp;
 return 1;
}

function _sound_load_from_file($filepath, $sound) {
 $filepath = $filepath | 0;
 $sound = $sound | 0;
 var $$0 = 0, $14 = 0, $21 = 0, $3 = 0, $6 = 0, $9 = 0, $buffer = 0, $wave_header = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $buffer = sp + 44 | 0;
 $wave_header = sp;
 HEAP32[$buffer >> 2] = 0;
 if (!$filepath) ___assert_fail(11936, 11952, 66, 11976);
 if (!$sound) ___assert_fail(12e3, 11952, 67, 11976);
 if (!(_audio_init_if_needed() | 0)) {
  $$0 = -95;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $3 = _load_wav($filepath, $wave_header, $buffer) | 0;
 if (($3 | 0) < 0) {
  $$0 = $3;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $6 = HEAP16[$wave_header + 34 >> 1] | 0;
 if (!($6 << 16 >> 16 == 16 | $6 << 16 >> 16 == 8)) {
  _free(HEAP32[$buffer >> 2] | 0);
  $$0 = -95;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $9 = HEAP16[$wave_header + 22 >> 1] | 0;
 if (($9 + -1 & 65535) >= 2) {
  _free(HEAP32[$buffer >> 2] | 0);
  $$0 = -95;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $14 = HEAP32[$buffer >> 2] | 0;
 if ((HEAP32[$wave_header + 24 >> 2] | 0) == 44100) {
  HEAP32[$sound >> 2] = _sound_new($14, HEAP32[$wave_header + 40 >> 2] | 0, 44100, $6 & 65535, $9 & 65535) | 0;
  _free(HEAP32[$buffer >> 2] | 0);
  $21 = _xstrdup($filepath) | 0;
  HEAP32[(HEAP32[$sound >> 2] | 0) + 4 >> 2] = $21;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  _free($14);
  $$0 = -95;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _luaK_dischargevars($fs, $e) {
 $fs = $fs | 0;
 $e = $e | 0;
 var $1 = 0, $15 = 0, $21 = 0, $26 = 0, $38 = 0, $52 = 0, $6 = 0, $8 = 0, $op$0 = 0;
 switch (HEAP32[$e >> 2] | 0) {
 case 8:
  {
   HEAP32[$e >> 2] = 7;
   return;
  }
 case 9:
  {
   $1 = $e + 4 | 0;
   HEAP32[$1 >> 2] = _luaK_code($fs, HEAP32[$1 >> 2] << 23 | 5) | 0;
   HEAP32[$e >> 2] = 12;
   return;
  }
 case 14:
  {
   $52 = (HEAP32[(HEAP32[$fs >> 2] | 0) + 48 >> 2] | 0) + (HEAP32[$e + 4 >> 2] << 2) | 0;
   HEAP32[$52 >> 2] = HEAP32[$52 >> 2] & 8388607 | 16777216;
   HEAP32[$e >> 2] = 12;
   return;
  }
 case 13:
  {
   HEAP32[$e >> 2] = 7;
   $38 = $e + 4 | 0;
   HEAP32[$38 >> 2] = (HEAP32[(HEAP32[(HEAP32[$fs >> 2] | 0) + 48 >> 2] | 0) + (HEAP32[$38 >> 2] << 2) >> 2] | 0) >>> 6 & 255;
   return;
  }
 case 10:
  {
   $6 = $e + 4 | 0;
   $8 = HEAP16[$6 >> 1] | 0;
   if (!($8 & 256)) if ((HEAPU8[$fs + 42 >> 0] | 0) <= ($8 | 0)) {
    $15 = $fs + 44 | 0;
    HEAP8[$15 >> 0] = (HEAP8[$15 >> 0] | 0) + -1 << 24 >> 24;
   }
   $21 = $6 + 2 | 0;
   if ((HEAP8[$6 + 3 >> 0] | 0) == 8) if ((HEAPU8[$fs + 42 >> 0] | 0) > (HEAPU8[$21 >> 0] | 0)) $op$0 = 7; else {
    $26 = $fs + 44 | 0;
    HEAP8[$26 >> 0] = (HEAP8[$26 >> 0] | 0) + -1 << 24 >> 24;
    $op$0 = 7;
   } else $op$0 = 6;
   HEAP32[$6 >> 2] = _luaK_code($fs, HEAPU8[$21 >> 0] << 23 | $op$0 | HEAP16[$6 >> 1] << 14) | 0;
   HEAP32[$e >> 2] = 12;
   return;
  }
 default:
  return;
 }
}

function _png_do_invert($row_info, $row) {
 $row_info = $row_info | 0;
 $row = $row | 0;
 var $1 = 0, $12 = 0, $14 = 0, $24 = 0, $3 = 0, $30 = 0, $i$01 = 0, $i2$05 = 0, $i5$09 = 0, $rp$02 = 0, $rp1$04 = 0, $rp4$08 = 0;
 $1 = HEAP8[$row_info + 8 >> 0] | 0;
 if (!($1 << 24 >> 24)) {
  $3 = HEAP32[$row_info + 4 >> 2] | 0;
  if (!$3) return; else {
   $i$01 = 0;
   $rp$02 = $row;
  }
  while (1) {
   HEAP8[$rp$02 >> 0] = (HEAPU8[$rp$02 >> 0] | 0) ^ 255;
   $i$01 = $i$01 + 1 | 0;
   if (($i$01 | 0) == ($3 | 0)) break; else $rp$02 = $rp$02 + 1 | 0;
  }
  return;
 } else if ($1 << 24 >> 24 == 4) {
  $12 = HEAP8[$row_info + 9 >> 0] | 0;
  if ($12 << 24 >> 24 == 8) {
   $14 = HEAP32[$row_info + 4 >> 2] | 0;
   if (!$14) return; else {
    $i2$05 = 0;
    $rp1$04 = $row;
   }
   while (1) {
    HEAP8[$rp1$04 >> 0] = (HEAPU8[$rp1$04 >> 0] | 0) ^ 255;
    $i2$05 = $i2$05 + 2 | 0;
    if ($i2$05 >>> 0 >= $14 >>> 0) break; else $rp1$04 = $rp1$04 + 2 | 0;
   }
   return;
  } else if ($12 << 24 >> 24 == 16) {
   $24 = HEAP32[$row_info + 4 >> 2] | 0;
   if (!$24) return; else {
    $i5$09 = 0;
    $rp4$08 = $row;
   }
   while (1) {
    HEAP8[$rp4$08 >> 0] = (HEAPU8[$rp4$08 >> 0] | 0) ^ 255;
    $30 = $rp4$08 + 1 | 0;
    HEAP8[$30 >> 0] = (HEAPU8[$30 >> 0] | 0) ^ 255;
    $i5$09 = $i5$09 + 4 | 0;
    if ($i5$09 >>> 0 >= $24 >>> 0) break; else $rp4$08 = $rp4$08 + 4 | 0;
   }
   return;
  } else return;
 } else return;
}

function _close_state($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $10 = 0, $12 = 0, $15 = 0, $19 = 0, $2 = 0, $20 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $next$01$i$i = 0, $next$01$i$i$looptemp = 0;
 $0 = $L + 12 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $L + 28 | 0;
 _luaF_close($L, HEAP32[$2 >> 2] | 0);
 _luaC_freeallobjects($L);
 $4 = HEAP32[$0 >> 2] | 0;
 _luaM_realloc_($L, HEAP32[$4 + 24 >> 2] | 0, HEAP32[$4 + 32 >> 2] << 2, 0) | 0;
 $10 = $1 + 96 | 0;
 $12 = $1 + 104 | 0;
 HEAP32[$10 >> 2] = _luaM_realloc_($L, HEAP32[$10 >> 2] | 0, HEAP32[$12 >> 2] | 0, 0) | 0;
 HEAP32[$12 >> 2] = 0;
 $15 = HEAP32[$2 >> 2] | 0;
 if (!$15) {
  $29 = HEAP32[$1 >> 2] | 0;
  $30 = $1 + 4 | 0;
  $31 = HEAP32[$30 >> 2] | 0;
  $32 = $L + -4 | 0;
  FUNCTION_TABLE_iiiii[$29 & 7]($31, $32, 384, 0) | 0;
  return;
 }
 HEAP32[$L + 16 >> 2] = $L + 48;
 $19 = $L + 60 | 0;
 $20 = HEAP32[$19 >> 2] | 0;
 HEAP32[$19 >> 2] = 0;
 if (!$20) $28 = $15; else {
  $next$01$i$i = $20;
  do {
   $next$01$i$i$looptemp = $next$01$i$i;
   $next$01$i$i = HEAP32[$next$01$i$i + 12 >> 2] | 0;
   _luaM_realloc_($L, $next$01$i$i$looptemp, 36, 0) | 0;
  } while (($next$01$i$i | 0) != 0);
  $28 = HEAP32[$2 >> 2] | 0;
 }
 _luaM_realloc_($L, $28, HEAP32[$L + 92 >> 2] << 3, 0) | 0;
 $29 = HEAP32[$1 >> 2] | 0;
 $30 = $1 + 4 | 0;
 $31 = HEAP32[$30 >> 2] | 0;
 $32 = $L + -4 | 0;
 FUNCTION_TABLE_iiiii[$29 & 7]($31, $32, 384, 0) | 0;
 return;
}

function _strcspn($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $$0 = 0, $$027 = 0, $$03$lcssa = 0, $$035 = 0, $0 = 0, $10 = 0, $13 = 0, $17 = 0, $23 = 0, $32 = 0, $byteset = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $byteset = sp;
 $0 = HEAP8[$c >> 0] | 0;
 if ($0 << 24 >> 24) if (HEAP8[$c + 1 >> 0] | 0) {
  HEAP32[$byteset + 0 >> 2] = 0;
  HEAP32[$byteset + 4 >> 2] = 0;
  HEAP32[$byteset + 8 >> 2] = 0;
  HEAP32[$byteset + 12 >> 2] = 0;
  HEAP32[$byteset + 16 >> 2] = 0;
  HEAP32[$byteset + 20 >> 2] = 0;
  HEAP32[$byteset + 24 >> 2] = 0;
  HEAP32[$byteset + 28 >> 2] = 0;
  $$027 = $c;
  $13 = $0;
  do {
   $17 = $byteset + ((($13 & 255) >>> 5 & 255) << 2) | 0;
   HEAP32[$17 >> 2] = HEAP32[$17 >> 2] | 1 << ($13 & 31);
   $$027 = $$027 + 1 | 0;
   $13 = HEAP8[$$027 >> 0] | 0;
  } while ($13 << 24 >> 24 != 0);
  $10 = HEAP8[$s >> 0] | 0;
  L7 : do if (!($10 << 24 >> 24)) $$03$lcssa = $s; else {
   $$035 = $s;
   $23 = $10;
   while (1) {
    if (HEAP32[$byteset + ((($23 & 255) >>> 5 & 255) << 2) >> 2] & 1 << ($23 & 31)) {
     $$03$lcssa = $$035;
     break L7;
    }
    $32 = $$035 + 1 | 0;
    $23 = HEAP8[$32 >> 0] | 0;
    if (!($23 << 24 >> 24)) {
     $$03$lcssa = $32;
     break;
    } else $$035 = $32;
   }
  } while (0);
  $$0 = $$03$lcssa - $s | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $$0 = (___strchrnul($s, $0 << 24 >> 24) | 0) - $s | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _luaL_argerror($L, $arg, $extramsg) {
 $L = $L | 0;
 $arg = $arg | 0;
 $extramsg = $extramsg | 0;
 var $$0 = 0, $$01 = 0, $12 = 0, $13 = 0, $18 = 0, $19 = 0, $7 = 0, $ar = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $vararg_buffer6 = sp + 16 | 0;
 $vararg_buffer2 = sp + 8 | 0;
 $vararg_buffer = sp;
 $ar = sp + 28 | 0;
 if (!(_lua_getstack($L, 0, $ar) | 0)) {
  HEAP32[$vararg_buffer >> 2] = $arg;
  HEAP32[$vararg_buffer + 4 >> 2] = $extramsg;
  $$0 = _luaL_error($L, 55160, $vararg_buffer) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _lua_getinfo($L, 62728, $ar) | 0;
 if (!(_strcmp(HEAP32[$ar + 8 >> 2] | 0, 56088) | 0)) {
  $7 = $arg + -1 | 0;
  if (!$7) {
   HEAP32[$vararg_buffer2 >> 2] = HEAP32[$ar + 4 >> 2];
   HEAP32[$vararg_buffer2 + 4 >> 2] = $extramsg;
   $$0 = _luaL_error($L, 55184, $vararg_buffer2) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else $$01 = $7;
 } else $$01 = $arg;
 $12 = $ar + 4 | 0;
 $13 = HEAP32[$12 >> 2] | 0;
 if (!$13) {
  if (!(_pushglobalfuncname($L, $ar) | 0)) $18 = 59048; else $18 = _lua_tolstring($L, -1, 0) | 0;
  HEAP32[$12 >> 2] = $18;
  $19 = $18;
 } else $19 = $13;
 HEAP32[$vararg_buffer6 >> 2] = $$01;
 HEAP32[$vararg_buffer6 + 4 >> 2] = $19;
 HEAP32[$vararg_buffer6 + 8 >> 2] = $extramsg;
 $$0 = _luaL_error($L, 55216, $vararg_buffer6) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _lua_getmetatable($L, $objindex) {
 $L = $L | 0;
 $objindex = $objindex | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $31 = 0, $4 = 0, $40 = 0, $41 = 0, $mt$0 = 0, $mt$0$in = 0, $res$0 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($objindex | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($objindex << 3) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 59168;
 } else {
  if (($objindex | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($objindex << 3) | 0;
   break;
  }
  if (($objindex | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $16 = -1001e3 - $objindex | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 4 >> 2] | 0) == 22) $$0$i = 59168; else {
   $21 = HEAP32[$17 >> 2] | 0;
   if (($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0)) $$0$i = 59168; else $$0$i = $21 + 16 + ($16 + -1 << 3) | 0;
  }
 } while (0);
 $31 = HEAP32[$$0$i + 4 >> 2] & 15;
 if (($31 | 0) == 5) $mt$0$in = (HEAP32[$$0$i >> 2] | 0) + 24 | 0; else if (($31 | 0) == 7) $mt$0$in = (HEAP32[$$0$i >> 2] | 0) + 8 | 0; else $mt$0$in = (HEAP32[$L + 12 >> 2] | 0) + ($31 << 2) + 232 | 0;
 $mt$0 = HEAP32[$mt$0$in >> 2] | 0;
 if (!$mt$0) {
  $res$0 = 0;
  return $res$0 | 0;
 }
 $40 = $L + 8 | 0;
 $41 = HEAP32[$40 >> 2] | 0;
 HEAP32[$41 >> 2] = $mt$0;
 HEAP32[$41 + 4 >> 2] = 69;
 HEAP32[$40 >> 2] = (HEAP32[$40 >> 2] | 0) + 8;
 $res$0 = 1;
 return $res$0 | 0;
}

function __Z13b2TestOverlapPK7b2ShapeiS1_iRK11b2TransformS4_($shapeA, $indexA, $shapeB, $indexB, $xfA, $xfB) {
 $shapeA = $shapeA | 0;
 $indexA = $indexA | 0;
 $shapeB = $shapeB | 0;
 $indexB = $indexB | 0;
 $xfA = $xfA | 0;
 $xfB = $xfB | 0;
 var $7 = 0, $8 = 0, $cache = 0, $input = 0, $output = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $input = sp + 36 | 0;
 $cache = sp + 24 | 0;
 $output = sp;
 HEAP32[$input + 16 >> 2] = 0;
 HEAP32[$input + 20 >> 2] = 0;
 HEAPF32[$input + 24 >> 2] = 0.0;
 HEAP32[$input + 44 >> 2] = 0;
 HEAP32[$input + 48 >> 2] = 0;
 HEAPF32[$input + 52 >> 2] = 0.0;
 __ZN15b2DistanceProxy3SetEPK7b2Shapei($input, $shapeA, $indexA);
 __ZN15b2DistanceProxy3SetEPK7b2Shapei($input + 28 | 0, $shapeB, $indexB);
 $7 = $input + 56 | 0;
 HEAP32[$7 + 0 >> 2] = HEAP32[$xfA + 0 >> 2];
 HEAP32[$7 + 4 >> 2] = HEAP32[$xfA + 4 >> 2];
 HEAP32[$7 + 8 >> 2] = HEAP32[$xfA + 8 >> 2];
 HEAP32[$7 + 12 >> 2] = HEAP32[$xfA + 12 >> 2];
 $8 = $input + 72 | 0;
 HEAP32[$8 + 0 >> 2] = HEAP32[$xfB + 0 >> 2];
 HEAP32[$8 + 4 >> 2] = HEAP32[$xfB + 4 >> 2];
 HEAP32[$8 + 8 >> 2] = HEAP32[$xfB + 8 >> 2];
 HEAP32[$8 + 12 >> 2] = HEAP32[$xfB + 12 >> 2];
 HEAP8[$input + 88 >> 0] = 1;
 HEAP16[$cache + 4 >> 1] = 0;
 __Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput($output, $cache, $input);
 STACKTOP = sp;
 return +HEAPF32[$output + 16 >> 2] < 1.1920928955078125e-06 | 0;
}

function _strbuf_resize($s, $len) {
 $s = $s | 0;
 $len = $len | 0;
 var $$0$i = 0, $1 = 0, $10 = 0, $13 = 0, $19 = 0, $2 = 0, $22 = 0, $24 = 0, $3 = 0, $6 = 0, $9 = 0, $newsize$01$i = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer5 = sp + 24 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 if (($len | 0) < 1) _die(71584, sp);
 $1 = $len + 1 | 0;
 $2 = $s + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 do if (($3 | 0) > ($1 | 0)) $$0$i = $1; else {
  $6 = HEAP32[$s + 12 >> 2] | 0;
  if (($6 | 0) >= 0) {
   $13 = $3 + -1 + $6 | 0;
   $$0$i = $13 - (($13 | 0) % ($6 | 0) | 0) | 0;
   break;
  }
  if (($3 | 0) < ($1 | 0)) {
   $9 = 0 - $6 | 0;
   $newsize$01$i = $3;
   while (1) {
    $10 = Math_imul($newsize$01$i, $9) | 0;
    if (($10 | 0) < ($1 | 0)) $newsize$01$i = $10; else {
     $$0$i = $10;
     break;
    }
   }
  } else $$0$i = $3;
 } while (0);
 if ((HEAP32[$s + 24 >> 2] | 0) > 1) {
  $19 = HEAP32[_stderr >> 2] | 0;
  HEAP32[$vararg_buffer1 >> 2] = $s;
  HEAP32[$vararg_buffer1 + 4 >> 2] = $3;
  HEAP32[$vararg_buffer1 + 8 >> 2] = $$0$i;
  _fprintf($19 | 0, 71552, $vararg_buffer1 | 0) | 0;
 }
 HEAP32[$2 >> 2] = $$0$i;
 $22 = _realloc(HEAP32[$s >> 2] | 0, $$0$i) | 0;
 HEAP32[$s >> 2] = $22;
 if (!$22) _die(74392, $vararg_buffer5); else {
  $24 = $s + 20 | 0;
  HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 1;
  STACKTOP = sp;
  return;
 }
}

function __ZN21b2WorldRayCastWrapper15RayCastCallbackERK14b2RayCastInputi($this, $input, $proxyId) {
 $this = $this | 0;
 $input = $input | 0;
 $proxyId = $proxyId | 0;
 var $$0 = 0.0, $0 = 0, $10 = 0, $14 = 0, $23 = 0.0, $24 = 0.0, $37 = 0.0, $40 = 0, $8 = 0, $output = 0, $point = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $output = sp + 8 | 0;
 $point = sp;
 $0 = HEAP32[$this >> 2] | 0;
 if (($proxyId | 0) <= -1) ___assert_fail(90168, 89592, 158, 89672);
 if ((HEAP32[$0 + 12 >> 2] | 0) <= ($proxyId | 0)) ___assert_fail(90168, 89592, 158, 89672);
 $8 = HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + ($proxyId * 36 | 0) + 16 >> 2] | 0;
 $10 = HEAP32[$8 + 16 >> 2] | 0;
 $14 = HEAP32[$10 + 12 >> 2] | 0;
 if (FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] & 15]($14, $output, $input, (HEAP32[$10 + 8 >> 2] | 0) + 12 | 0, HEAP32[$8 + 20 >> 2] | 0) | 0) {
  $23 = +HEAPF32[$output + 8 >> 2];
  $24 = 1.0 - $23;
  $37 = $24 * +HEAPF32[$input + 4 >> 2] + $23 * +HEAPF32[$input + 12 >> 2];
  HEAPF32[$point >> 2] = +HEAPF32[$input >> 2] * $24 + $23 * +HEAPF32[$input + 8 >> 2];
  HEAPF32[$point + 4 >> 2] = $37;
  $40 = HEAP32[$this + 4 >> 2] | 0;
  $$0 = +FUNCTION_TABLE_diiiid[HEAP32[(HEAP32[$40 >> 2] | 0) + 8 >> 2] & 1]($40, $10, $point, $output, $23);
  STACKTOP = sp;
  return +$$0;
 } else {
  $$0 = +HEAPF32[$input + 16 >> 2];
  STACKTOP = sp;
  return +$$0;
 }
 return +(0.0);
}

function _findlocal($L, $ci, $n, $pos) {
 $L = $L | 0;
 $ci = $ci | 0;
 $n = $n | 0;
 $pos = $pos | 0;
 var $$0 = 0, $$in = 0, $12 = 0, $25 = 0, $29 = 0, $39 = 0, $6 = 0, $base$02 = 0, $base$03 = 0, $name$1 = 0, label = 0;
 do if (!(HEAP8[$ci + 34 >> 0] & 2)) {
  $base$02 = (HEAP32[$ci >> 2] | 0) + 8 | 0;
  label = 7;
 } else {
  if (($n | 0) >= 0) {
   $25 = HEAP32[$ci + 16 >> 2] | 0;
   $29 = HEAP32[(HEAP32[HEAP32[$ci >> 2] >> 2] | 0) + 12 >> 2] | 0;
   $39 = _luaF_getlocalname($29, $n, ((HEAP32[$ci + 20 >> 2] | 0) - (HEAP32[$29 + 48 >> 2] | 0) >> 2) + -1 | 0) | 0;
   if (!$39) {
    $base$02 = $25;
    label = 7;
    break;
   } else {
    $base$03 = $25;
    $name$1 = $39;
    break;
   }
  }
  $6 = HEAP32[$ci >> 2] | 0;
  $12 = HEAPU8[(HEAP32[(HEAP32[$6 >> 2] | 0) + 12 >> 2] | 0) + 6 >> 0] | 0;
  if ((((HEAP32[$ci + 16 >> 2] | 0) - $6 >> 3) - $12 | 0) <= (0 - $n | 0)) {
   $$0 = 0;
   return $$0 | 0;
  }
  HEAP32[$pos >> 2] = $6 + ($12 - $n << 3);
  $$0 = 56192;
  return $$0 | 0;
 } while (0);
 if ((label | 0) == 7) {
  if ((HEAP32[$L + 16 >> 2] | 0) == ($ci | 0)) $$in = $L + 8 | 0; else $$in = HEAP32[$ci + 12 >> 2] | 0;
  if (($n | 0) > 0 ? ((HEAP32[$$in >> 2] | 0) - $base$02 >> 3 | 0) >= ($n | 0) : 0) {
   $base$03 = $base$02;
   $name$1 = 56176;
  } else {
   $$0 = 0;
   return $$0 | 0;
  }
 }
 HEAP32[$pos >> 2] = $base$03 + ($n + -1 << 3);
 $$0 = $name$1;
 return $$0 | 0;
}

function __ZNK12b2ChainShape11ComputeAABBEP6b2AABBRK11b2Transformi($this, $aabb, $xf, $childIndex) {
 $this = $this | 0;
 $aabb = $aabb | 0;
 $xf = $xf | 0;
 $childIndex = $childIndex | 0;
 var $$ = 0, $1 = 0, $10 = 0.0, $13 = 0.0, $15 = 0.0, $18 = 0.0, $19 = 0.0, $24 = 0.0, $25 = 0.0, $27 = 0.0, $3 = 0, $30 = 0.0, $33 = 0.0, $37 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $6 = 0, $8 = 0.0;
 $1 = HEAP32[$this + 16 >> 2] | 0;
 if (($1 | 0) > ($childIndex | 0)) {
  $3 = $childIndex + 1 | 0;
  $$ = ($3 | 0) == ($1 | 0) ? 0 : $3;
  $6 = HEAP32[$this + 12 >> 2] | 0;
  $8 = +HEAPF32[$xf + 12 >> 2];
  $10 = +HEAPF32[$6 + ($childIndex << 3) >> 2];
  $13 = +HEAPF32[$xf + 8 >> 2];
  $15 = +HEAPF32[$6 + ($childIndex << 3) + 4 >> 2];
  $18 = +HEAPF32[$xf >> 2];
  $19 = $18 + ($8 * $10 - $13 * $15);
  $24 = +HEAPF32[$xf + 4 >> 2];
  $25 = $10 * $13 + $8 * $15 + $24;
  $27 = +HEAPF32[$6 + ($$ << 3) >> 2];
  $30 = +HEAPF32[$6 + ($$ << 3) + 4 >> 2];
  $33 = $18 + ($8 * $27 - $13 * $30);
  $37 = $24 + ($13 * $27 + $8 * $30);
  $42 = +($19 < $33 ? $19 : $33);
  $43 = +($25 < $37 ? $25 : $37);
  $44 = $aabb;
  HEAPF32[$44 >> 2] = $42;
  HEAPF32[$44 + 4 >> 2] = $43;
  $53 = +($19 > $33 ? $19 : $33);
  $54 = +($25 > $37 ? $25 : $37);
  $55 = $aabb + 8 | 0;
  HEAPF32[$55 >> 2] = $53;
  HEAPF32[$55 + 4 >> 2] = $54;
  return;
 } else ___assert_fail(81608, 81376, 167, 81632);
}

function _png_get_IHDR($png_ptr, $info_ptr, $width, $height, $bit_depth, $color_type, $interlace_type, $compression_type, $filter_type) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 $width = $width | 0;
 $height = $height | 0;
 $bit_depth = $bit_depth | 0;
 $color_type = $color_type | 0;
 $interlace_type = $interlace_type | 0;
 $compression_type = $compression_type | 0;
 $filter_type = $filter_type | 0;
 var $$0 = 0, $$pre = 0, $12 = 0, $7 = 0, $9 = 0;
 if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0 | ($width | 0) == 0 | ($height | 0) == 0 | ($bit_depth | 0) == 0 | ($color_type | 0) == 0) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP32[$width >> 2] = HEAP32[$info_ptr >> 2];
 $7 = $info_ptr + 4 | 0;
 HEAP32[$height >> 2] = HEAP32[$7 >> 2];
 $9 = $info_ptr + 24 | 0;
 HEAP32[$bit_depth >> 2] = HEAPU8[$9 >> 0];
 $12 = $info_ptr + 25 | 0;
 HEAP32[$color_type >> 2] = HEAPU8[$12 >> 0];
 if ($compression_type) HEAP32[$compression_type >> 2] = HEAPU8[$info_ptr + 26 >> 0];
 if ($filter_type) HEAP32[$filter_type >> 2] = HEAPU8[$info_ptr + 27 >> 0];
 $$pre = $info_ptr + 28 | 0;
 if ($interlace_type) HEAP32[$interlace_type >> 2] = HEAPU8[$$pre >> 0];
 _png_check_IHDR($png_ptr, HEAP32[$info_ptr >> 2] | 0, HEAP32[$7 >> 2] | 0, HEAPU8[$9 >> 0] | 0, HEAPU8[$12 >> 0] | 0, HEAPU8[$$pre >> 0] | 0, HEAPU8[$info_ptr + 26 >> 0] | 0, HEAPU8[$info_ptr + 27 >> 0] | 0);
 $$0 = 1;
 return $$0 | 0;
}

function _mlua_draw_surface($L) {
 $L = $L | 0;
 var $$0 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $3 = 0, $7 = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 if (!$L) ___assert_fail(23976, 19928, 371, 21608);
 if (!(_display_get_draw_from() | 0)) _luaL_error($L, 21632, sp) | 0;
 $3 = _display_get_current_buffer() | 0;
 do if (HEAP8[$3 + 68 >> 0] | 0) {
  $7 = HEAP32[$3 >> 2] | 0;
  if (_display_is_debug() | 0) {
   if (!($7 & -3)) break;
   if (($7 | 0) == 3) label = 10;
  } else if (($7 | 0) == 3) label = 10; else if (!$7) break;
  if ((label | 0) == 10) if (HEAP8[$3 + 57 >> 0] | 0) break;
  $$0 = _luaL_error($L, 21680, $vararg_buffer1) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } while (0);
 $15 = +_luaL_checknumber($L, 1);
 $16 = +_luaL_checknumber($L, 2);
 $17 = +_luaL_checknumber($L, 3);
 $18 = +_luaL_checknumber($L, 4);
 $19 = +_luaL_checknumber($L, 5);
 $20 = +_luaL_checknumber($L, 6);
 $21 = +_luaL_checknumber($L, 7);
 $22 = +_luaL_checknumber($L, 8);
 $23 = +_luaL_checknumber($L, 9);
 $24 = +_luaL_checknumber($L, 10);
 $25 = +_luaL_checknumber($L, 11);
 _display_draw_surface($15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, +_luaL_checknumber($L, 12));
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _on_zip_downloaded($userdata, $buffer, $size) {
 $userdata = $userdata | 0;
 $buffer = $buffer | 0;
 $size = $size | 0;
 var $4 = 0, $7 = 0, $file_stat = 0, $i$04 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $za = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 672 | 0;
 $vararg_buffer3 = sp + 656 | 0;
 $vararg_buffer1 = sp + 648 | 0;
 $za = sp + 576 | 0;
 $file_stat = sp;
 if (!(_mz_zip_reader_init_mem($za, $buffer, $size, 0) | 0)) {
  _log_internal(0, 56160, 1176, sp + 640 | 0);
  STACKTOP = sp;
  return;
 }
 L5 : do if (_mz_zip_reader_get_num_files($za) | 0) {
  $4 = $file_stat + 60 | 0;
  $i$04 = 0;
  while (1) {
   if (!(_mz_zip_reader_file_stat($za, $i$04, $file_stat) | 0)) {
    label = 6;
    break;
   }
   $7 = _mkdir_p($4) | 0;
   if (($7 | 0) < 0) {
    label = 8;
    break;
   }
   if (!(_mz_zip_reader_is_file_a_directory($za, $i$04) | 0)) _mz_zip_reader_extract_to_file($za, $i$04, $4, 0) | 0;
   $i$04 = $i$04 + 1 | 0;
   if ($i$04 >>> 0 >= (_mz_zip_reader_get_num_files($za) | 0) >>> 0) break L5;
  }
  if ((label | 0) == 6) {
   _log_internal(0, 56160, 1224, $vararg_buffer1);
   break;
  } else if ((label | 0) == 8) {
   HEAP32[$vararg_buffer3 >> 2] = _strerror(0 - $7 | 0) | 0;
   _log_internal(0, 56160, 1248, $vararg_buffer3);
   break;
  }
 } while (0);
 _mz_zip_reader_end($za) | 0;
 _engine_load();
 STACKTOP = sp;
 return;
}

function _png_chunk_warning($png_ptr, $warning_message) {
 $png_ptr = $png_ptr | 0;
 $warning_message = $warning_message | 0;
 var $1 = 0, $10 = 0, $12 = 0, $13 = 0, $4 = 0, $msg = 0, $offset$04$i1 = 0, $offset$11$i3 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $msg = sp + 12 | 0;
 if (!$png_ptr) {
  $1 = HEAP32[_stderr >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = $warning_message;
  _fprintf($1 | 0, 74264, $vararg_buffer | 0) | 0;
  _fputc(10, $1 | 0) | 0;
  STACKTOP = sp;
  return;
 }
 _png_format_buffer(HEAP32[$png_ptr + 376 >> 2] | 0, $msg, $warning_message);
 L5 : do if ((HEAP8[$msg >> 0] | 0) == 35) {
  $offset$04$i1 = 1;
  while (1) {
   $4 = $offset$04$i1 + 1 | 0;
   if ((HEAP8[$msg + $offset$04$i1 >> 0] | 0) == 32) {
    $offset$11$i3 = $offset$04$i1;
    break L5;
   }
   if (($4 | 0) < 15) $offset$04$i1 = $4; else {
    $offset$11$i3 = $4;
    break;
   }
  }
 } else $offset$11$i3 = 0; while (0);
 $10 = HEAP32[$png_ptr + 172 >> 2] | 0;
 $12 = $msg + $offset$11$i3 | 0;
 if (!$10) {
  $13 = HEAP32[_stderr >> 2] | 0;
  HEAP32[$vararg_buffer1 >> 2] = $12;
  _fprintf($13 | 0, 74264, $vararg_buffer1 | 0) | 0;
  _fputc(10, $13 | 0) | 0;
  STACKTOP = sp;
  return;
 } else {
  FUNCTION_TABLE_vii[$10 & 127]($png_ptr, $12);
  STACKTOP = sp;
  return;
 }
}

function _f_luaopen($L, $ud) {
 $L = $L | 0;
 $ud = $ud | 0;
 var $1 = 0, $11 = 0, $2 = 0, $20 = 0, $23 = 0, $25 = 0, $4 = 0, $i$01$i = 0, $temp$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $temp$i = sp;
 $1 = HEAP32[$L + 12 >> 2] | 0;
 $2 = _luaM_realloc_($L, 0, 0, 320) | 0;
 HEAP32[$L + 28 >> 2] = $2;
 $4 = $L + 92 | 0;
 HEAP32[$4 >> 2] = 40;
 $i$01$i = 0;
 do {
  HEAP32[$2 + ($i$01$i << 3) + 4 >> 2] = 0;
  $i$01$i = $i$01$i + 1 | 0;
 } while (($i$01$i | 0) != 40);
 HEAP32[$L + 24 >> 2] = $2 + ((HEAP32[$4 >> 2] | 0) + -5 << 3);
 $11 = $L + 48 | 0;
 HEAP32[$L + 56 >> 2] = 0;
 HEAP32[$L + 60 >> 2] = 0;
 HEAP8[$L + 82 >> 0] = 0;
 HEAP32[$11 >> 2] = $2;
 HEAP32[$L + 8 >> 2] = $2 + 8;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$L + 52 >> 2] = $2 + 168;
 HEAP32[$L + 16 >> 2] = $11;
 $20 = _luaH_new($L) | 0;
 HEAP32[$1 + 36 >> 2] = $20;
 HEAP32[$1 + 40 >> 2] = 69;
 _luaH_resize($L, $20, 2, 0);
 HEAP32[$temp$i >> 2] = $L;
 $23 = $temp$i + 4 | 0;
 HEAP32[$23 >> 2] = 72;
 _luaH_setint($L, $20, 1, $temp$i);
 HEAP32[$temp$i >> 2] = _luaH_new($L) | 0;
 HEAP32[$23 >> 2] = 69;
 _luaH_setint($L, $20, 2, $temp$i);
 _luaS_resize($L, 64);
 _luaT_init($L);
 _luaX_init($L);
 $25 = _luaS_newlstr($L, 60944, 17) | 0;
 HEAP32[$1 + 132 >> 2] = $25;
 _luaC_fix($L, $25);
 HEAP8[$1 + 51 >> 0] = 1;
 HEAP32[$1 + 128 >> 2] = _lua_version(0) | 0;
 STACKTOP = sp;
 return;
}

function ___fwritex($s, $l, $f) {
 $s = $s | 0;
 $l = $l | 0;
 $f = $f | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $19 = 0, $29 = 0, $5 = 0, $6 = 0, $7 = 0, $i$0 = 0, $i$0$lcssa8 = 0, $i$1 = 0;
 $0 = $f + 16 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 do if (!$1) if (!(___towrite($f) | 0)) {
  $7 = HEAP32[$0 >> 2] | 0;
  break;
 } else {
  $$0 = 0;
  return $$0 | 0;
 } else $7 = $1; while (0);
 $5 = $f + 20 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 if (($7 - $6 | 0) >>> 0 < $l >>> 0) {
  $$0 = FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, $s, $l) | 0;
  return $$0 | 0;
 }
 L11 : do if ((HEAP8[$f + 75 >> 0] | 0) > -1) {
  $i$0 = $l;
  while (1) {
   if (!$i$0) {
    $$01 = $l;
    $$02 = $s;
    $29 = $6;
    $i$1 = 0;
    break L11;
   }
   $19 = $i$0 + -1 | 0;
   if ((HEAP8[$s + $19 >> 0] | 0) == 10) {
    $i$0$lcssa8 = $i$0;
    break;
   } else $i$0 = $19;
  }
  if ((FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, $s, $i$0$lcssa8) | 0) >>> 0 < $i$0$lcssa8 >>> 0) {
   $$0 = $i$0$lcssa8;
   return $$0 | 0;
  } else {
   $$01 = $l - $i$0$lcssa8 | 0;
   $$02 = $s + $i$0$lcssa8 | 0;
   $29 = HEAP32[$5 >> 2] | 0;
   $i$1 = $i$0$lcssa8;
   break;
  }
 } else {
  $$01 = $l;
  $$02 = $s;
  $29 = $6;
  $i$1 = 0;
 } while (0);
 _memcpy($29 | 0, $$02 | 0, $$01 | 0) | 0;
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $$01;
 $$0 = $i$1 + $$01 | 0;
 return $$0 | 0;
}

function _surface_load($filename, $surface, $current_surface) {
 $filename = $filename | 0;
 $surface = $surface | 0;
 $current_surface = $current_surface | 0;
 var $$0 = 0, $17 = 0, $2 = 0, $24 = 0, $28 = 0, $4 = 0, $7 = 0, $data = 0, $format = 0, $h = 0, $w = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $w = sp + 16 | 0;
 $h = sp + 12 | 0;
 $format = sp + 8 | 0;
 $data = sp;
 if (!$filename) ___assert_fail(16296, 16096, 315, 16312);
 if (!$surface) ___assert_fail(19976, 16096, 316, 16312);
 $2 = _png_load($filename, $data, $w, $h, $format, sp + 4 | 0) | 0;
 if (($2 | 0) < 0) {
  $$0 = $2;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $4 = HEAP32[$w >> 2] | 0;
 if (!(($4 | 0) == 0 | $4 >>> 0 > 2048)) {
  $7 = HEAP32[$h >> 2] | 0;
  if (!(($7 | 0) == 0 | $7 >>> 0 > 2048)) {
   $17 = ~~+_ldexp(1.0, ~~+Math_ceil(+(+Math_log(+(+($4 >>> 0))) / .6931471805599453))) >>> 0;
   $24 = ~~+_ldexp(1.0, ~~+Math_ceil(+(+Math_log(+(+($7 >>> 0))) / .6931471805599453))) >>> 0;
   HEAP32[$surface >> 2] = _surface_new($4, $7, $17, $24, HEAP32[$format >> 2] | 0, HEAP32[$data >> 2] | 0, $current_surface, 0) | 0;
   $28 = _xstrdup($filename) | 0;
   HEAP32[HEAP32[$surface >> 2] >> 2] = $28;
   _free(HEAP32[$data >> 2] | 0);
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 _free(HEAP32[$data >> 2] | 0);
 $$0 = -7;
 STACKTOP = sp;
 return $$0 | 0;
}

function _atoi($s) {
 $s = $s | 0;
 var $$0 = 0, $$0$lcssa = 0, $$1$ph = 0, $$13 = 0, $$lcssa7 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $isdigittmp1 = 0, $isdigittmp5 = 0, $n$0$lcssa = 0, $n$04 = 0, $neg$0 = 0, $neg$1$ph = 0, label = 0;
 $$0 = $s;
 while (1) {
  $4 = $$0 + 1 | 0;
  if (!(_isspace(HEAP8[$$0 >> 0] | 0) | 0)) {
   $$0$lcssa = $$0;
   $$lcssa7 = $4;
   break;
  } else $$0 = $4;
 }
 $5 = HEAP8[$$0$lcssa >> 0] | 0;
 $6 = $5 << 24 >> 24;
 if (($6 | 0) == 45) {
  $neg$0 = 1;
  label = 5;
 } else if (($6 | 0) == 43) {
  $neg$0 = 0;
  label = 5;
 } else {
  $$1$ph = $$0$lcssa;
  $8 = $5;
  $neg$1$ph = 0;
 }
 if ((label | 0) == 5) {
  $$1$ph = $$lcssa7;
  $8 = HEAP8[$$lcssa7 >> 0] | 0;
  $neg$1$ph = $neg$0;
 }
 $isdigittmp1 = ($8 << 24 >> 24) + -48 | 0;
 if ($isdigittmp1 >>> 0 < 10) {
  $$13 = $$1$ph;
  $isdigittmp5 = $isdigittmp1;
  $n$04 = 0;
 } else {
  $n$0$lcssa = 0;
  $14 = ($neg$1$ph | 0) != 0;
  $15 = 0 - $n$0$lcssa | 0;
  $16 = $14 ? $n$0$lcssa : $15;
  return $16 | 0;
 }
 while (1) {
  $$13 = $$13 + 1 | 0;
  $11 = ($n$04 * 10 | 0) - $isdigittmp5 | 0;
  $isdigittmp5 = (HEAP8[$$13 >> 0] | 0) + -48 | 0;
  if ($isdigittmp5 >>> 0 >= 10) {
   $n$0$lcssa = $11;
   break;
  } else $n$04 = $11;
 }
 $14 = ($neg$1$ph | 0) != 0;
 $15 = 0 - $n$0$lcssa | 0;
 $16 = $14 ? $n$0$lcssa : $15;
 return $16 | 0;
}

function _str_byte($L) {
 $L = $L | 0;
 var $$ = 0, $$0 = 0, $$0$i = 0, $$0$i1 = 0, $0 = 0, $1 = 0, $18 = 0, $19 = 0, $2 = 0, $23 = 0, $8 = 0, $9 = 0, $i$03 = 0, $l = 0, $pose$0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $l = sp + 4 | 0;
 $0 = _luaL_checklstring($L, 1, $l) | 0;
 $1 = _luaL_optinteger($L, 2, 1) | 0;
 $2 = HEAP32[$l >> 2] | 0;
 if (($1 | 0) > -1) $$0$i = $1; else if ($2 >>> 0 < (0 - $1 | 0) >>> 0) $$0$i = 0; else $$0$i = $1 + 1 + $2 | 0;
 $8 = _luaL_optinteger($L, 3, $$0$i) | 0;
 $9 = HEAP32[$l >> 2] | 0;
 if (($8 | 0) > -1) $$0$i1 = $8; else if ($9 >>> 0 < (0 - $8 | 0) >>> 0) $$0$i1 = 0; else $$0$i1 = $8 + 1 + $9 | 0;
 $$ = ($$0$i | 0) < 1 ? 1 : $$0$i;
 $pose$0 = ($$0$i1 | 0) > ($9 | 0) ? $9 : $$0$i1;
 if (($$ | 0) > ($pose$0 | 0)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $18 = $pose$0 - $$ | 0;
 $19 = $18 + 1 | 0;
 if (($pose$0 | 0) == 2147483647) {
  $$0 = _luaL_error($L, 63864, $vararg_buffer) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _luaL_checkstack($L, $19, 63864);
 if (($18 | 0) <= -1) {
  $$0 = $19;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $23 = $$ + -1 | 0;
 $i$03 = 0;
 do {
  _lua_pushinteger($L, HEAPU8[$0 + ($23 + $i$03) >> 0] | 0);
  $i$03 = $i$03 + 1 | 0;
 } while (($i$03 | 0) < ($19 | 0));
 $$0 = $19;
 STACKTOP = sp;
 return $$0 | 0;
}

function _shader_new($prog_color, $prog_tex, $vert, $frag_color, $frag_tex) {
 $prog_color = $prog_color | 0;
 $prog_tex = $prog_tex | 0;
 $vert = $vert | 0;
 $frag_color = $frag_color | 0;
 $frag_tex = $frag_tex | 0;
 var $0 = 0;
 $0 = _xmalloc(72) | 0;
 HEAP32[$0 >> 2] = $prog_color;
 HEAP32[$0 + 4 >> 2] = $prog_tex;
 HEAP32[$0 + 8 >> 2] = $vert;
 HEAP32[$0 + 12 >> 2] = $frag_color;
 HEAP32[$0 + 16 >> 2] = $frag_tex;
 HEAP32[$0 + 68 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = _glGetUniformLocation($prog_color | 0, 17904) | 0;
 HEAP32[$0 + 24 >> 2] = _glGetUniformLocation($prog_color | 0, 17920) | 0;
 HEAP32[$0 + 28 >> 2] = _glGetUniformLocation($prog_color | 0, 17936) | 0;
 HEAP32[$0 + 32 >> 2] = _glGetUniformLocation($prog_color | 0, 17952) | 0;
 HEAP32[$0 + 36 >> 2] = _glGetUniformLocation($prog_color | 0, 17968) | 0;
 HEAP32[$0 + 40 >> 2] = _glGetUniformLocation($prog_color | 0, 17984) | 0;
 HEAP32[$0 + 44 >> 2] = _glGetUniformLocation($prog_tex | 0, 17904) | 0;
 HEAP32[$0 + 48 >> 2] = _glGetUniformLocation($prog_tex | 0, 17920) | 0;
 HEAP32[$0 + 52 >> 2] = _glGetUniformLocation($prog_tex | 0, 17936) | 0;
 HEAP32[$0 + 56 >> 2] = _glGetUniformLocation($prog_tex | 0, 17952) | 0;
 HEAP32[$0 + 60 >> 2] = _glGetUniformLocation($prog_tex | 0, 17968) | 0;
 HEAP32[$0 + 64 >> 2] = _glGetUniformLocation($prog_tex | 0, 17984) | 0;
 return $0 | 0;
}

function _luaZ_read($z, $b, $n) {
 $z = $z | 0;
 $b = $b | 0;
 $n = $n | 0;
 var $$$01 = 0, $$0 = 0, $$014 = 0, $$023 = 0, $1 = 0, $10 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $size$i = sp;
 if (!$n) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $1 = $z + 16 | 0;
 $2 = $z + 8 | 0;
 $3 = $z + 12 | 0;
 $4 = $z + 4 | 0;
 $$014 = $n;
 $$023 = $b;
 $5 = HEAP32[$z >> 2] | 0;
 while (1) {
  if (!$5) {
   $10 = FUNCTION_TABLE_iiii[HEAP32[$2 >> 2] & 31](HEAP32[$1 >> 2] | 0, HEAP32[$3 >> 2] | 0, $size$i) | 0;
   if (!$10) {
    $$0 = $$014;
    label = 9;
    break;
   }
   $12 = HEAP32[$size$i >> 2] | 0;
   if (!$12) {
    $$0 = $$014;
    label = 9;
    break;
   }
   HEAP32[$z >> 2] = $12;
   HEAP32[$4 >> 2] = $10;
   $15 = $12;
   $16 = $10;
  } else {
   $15 = $5;
   $16 = HEAP32[$4 >> 2] | 0;
  }
  $$$01 = $$014 >>> 0 > $15 >>> 0 ? $15 : $$014;
  _memcpy($$023 | 0, $16 | 0, $$$01 | 0) | 0;
  $5 = (HEAP32[$z >> 2] | 0) - $$$01 | 0;
  HEAP32[$z >> 2] = $5;
  HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + $$$01;
  if (($$014 | 0) == ($$$01 | 0)) {
   $$0 = 0;
   label = 9;
   break;
  } else {
   $$014 = $$014 - $$$01 | 0;
   $$023 = $$023 + $$$01 | 0;
  }
 }
 if ((label | 0) == 9) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _io_readline($L) {
 $L = $L | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $21 = 0, $cf$i = 0, $i$01 = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $cf$i = sp + 12 | 0;
 $0 = _lua_touserdata($L, -1001001) | 0;
 $1 = _lua_tointegerx($L, -1001002, 0) | 0;
 if (!(HEAP32[$0 + 4 >> 2] | 0)) {
  $$0 = _luaL_error($L, 57144, sp) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _lua_settop($L, 1);
 _luaL_checkstack($L, $1, 57088);
 if (($1 | 0) >= 1) {
  $i$01 = 1;
  while (1) {
   _lua_pushvalue($L, -1001003 - $i$01 | 0);
   if (($i$01 | 0) == ($1 | 0)) break; else $i$01 = $i$01 + 1 | 0;
  }
 }
 $10 = _g_read($L, HEAP32[$0 >> 2] | 0, 2) | 0;
 if (_lua_toboolean($L, 0 - $10 | 0) | 0) {
  $$0 = $10;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (($10 | 0) > 1) {
  HEAP32[$vararg_buffer1 >> 2] = _lua_tolstring($L, 1 - $10 | 0, 0) | 0;
  $$0 = _luaL_error($L, 57168, $vararg_buffer1) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!(_lua_toboolean($L, -1001003) | 0)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _lua_settop($L, 0);
 _lua_pushvalue($L, -1001001);
 $21 = (_luaL_checkudata($L, 1, 56736) | 0) + 4 | 0;
 HEAP32[$cf$i >> 2] = HEAP32[$21 >> 2];
 HEAP32[$21 >> 2] = 0;
 FUNCTION_TABLE_ii[HEAP32[$cf$i >> 2] & 511]($L) | 0;
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _f_parser($L, $ud) {
 $L = $L | 0;
 $ud = $ud | 0;
 var $0 = 0, $1 = 0, $10 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $cl$0 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer2 = sp + 8 | 0;
 $vararg_buffer = sp;
 $0 = HEAP32[$ud >> 2] | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = $1 + -1;
 if (!$1) $10 = _luaZ_fill($0) | 0; else {
  $4 = $0 + 4 | 0;
  $5 = HEAP32[$4 >> 2] | 0;
  HEAP32[$4 >> 2] = $5 + 1;
  $10 = HEAPU8[$5 >> 0] | 0;
 }
 $13 = HEAP32[$ud + 52 >> 2] | 0;
 $14 = ($13 | 0) == 0;
 if (($10 | 0) == 27) {
  if (!$14) if (!(_strchr($13, 98) | 0)) {
   HEAP32[$vararg_buffer >> 2] = 56344;
   HEAP32[$vararg_buffer + 4 >> 2] = $13;
   _luaO_pushfstring($L, 56360, $vararg_buffer) | 0;
   _luaD_throw($L, 3);
  }
  $cl$0 = _luaU_undump($L, HEAP32[$ud >> 2] | 0, $ud + 4 | 0, HEAP32[$ud + 56 >> 2] | 0) | 0;
  _luaF_initupvals($L, $cl$0);
  STACKTOP = sp;
  return;
 } else {
  if (!$14) if (!(_strchr($13, 116) | 0)) {
   HEAP32[$vararg_buffer2 >> 2] = 56352;
   HEAP32[$vararg_buffer2 + 4 >> 2] = $13;
   _luaO_pushfstring($L, 56360, $vararg_buffer2) | 0;
   _luaD_throw($L, 3);
  }
  $cl$0 = _luaY_parser($L, HEAP32[$ud >> 2] | 0, $ud + 4 | 0, $ud + 16 | 0, HEAP32[$ud + 56 >> 2] | 0, $10) | 0;
  _luaF_initupvals($L, $cl$0);
  STACKTOP = sp;
  return;
 }
}

function _png_realloc_array($png_ptr, $old_array, $old_elements, $add_elements, $element_size) {
 $png_ptr = $png_ptr | 0;
 $old_array = $old_array | 0;
 $old_elements = $old_elements | 0;
 $add_elements = $add_elements | 0;
 $element_size = $element_size | 0;
 var $$0 = 0, $$0$i = 0, $10 = 0, $14 = 0, $19 = 0, $4 = 0, $7 = 0, label = 0;
 if (($add_elements | 0) < 1 | ($element_size | 0) == 0 | ($old_elements | 0) < 0) _png_error($png_ptr, 74360);
 $4 = ($old_elements | 0) > 0;
 if (($old_array | 0) == 0 & $4) _png_error($png_ptr, 74360);
 if ((2147483647 - $old_elements | 0) < ($add_elements | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $7 = $add_elements + $old_elements | 0;
 if ((4294967295 / ($element_size >>> 0) | 0) >>> 0 < $7 >>> 0) {
  $$0 = 0;
  return $$0 | 0;
 }
 $10 = Math_imul($7, $element_size) | 0;
 if (!$10) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!$png_ptr) label = 10; else {
  $14 = HEAP32[$png_ptr + 720 >> 2] | 0;
  if (!$14) label = 10; else $$0$i = FUNCTION_TABLE_iii[$14 & 31]($png_ptr, $10) | 0;
 }
 if ((label | 0) == 10) $$0$i = _malloc($10) | 0;
 if (!$$0$i) {
  $$0 = 0;
  return $$0 | 0;
 }
 $19 = Math_imul($element_size, $old_elements) | 0;
 if ($4) _memcpy($$0$i | 0, $old_array | 0, $19 | 0) | 0;
 _memset($$0$i + $19 | 0, 0, Math_imul($element_size, $add_elements) | 0) | 0;
 $$0 = $$0$i;
 return $$0 | 0;
}

function _io_lines($L) {
 $L = $L | 0;
 var $10 = 0, $11 = 0, $15 = 0, $16 = 0, $8 = 0, $9 = 0, $toclose$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 if ((_lua_type($L, 1) | 0) == -1) _lua_pushnil($L);
 if (!(_lua_type($L, 1) | 0)) {
  _lua_getfield($L, -1001e3, 56680) | 0;
  _lua_copy($L, -1, 1);
  _lua_settop($L, -2);
  if (!(HEAP32[(_luaL_checkudata($L, 1, 56736) | 0) + 4 >> 2] | 0)) {
   _luaL_error($L, 56960, $vararg_buffer) | 0;
   $toclose$0 = 0;
  } else $toclose$0 = 0;
 } else {
  $8 = _luaL_checklstring($L, 1, 0) | 0;
  $9 = _lua_newuserdata($L, 8) | 0;
  $10 = $9 + 4 | 0;
  HEAP32[$10 >> 2] = 0;
  _luaL_setmetatable($L, 56736);
  HEAP32[$9 >> 2] = 0;
  HEAP32[$10 >> 2] = 349;
  $11 = _fopen($8 | 0, 59072) | 0;
  HEAP32[$9 >> 2] = $11;
  if (!$11) {
   $15 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0;
   HEAP32[$vararg_buffer1 >> 2] = $8;
   HEAP32[$vararg_buffer1 + 4 >> 2] = $15;
   _luaL_error($L, 57304, $vararg_buffer1) | 0;
  }
  _lua_copy($L, -1, 1);
  _lua_settop($L, -2);
  $toclose$0 = 1;
 }
 $16 = _lua_gettop($L) | 0;
 _lua_pushinteger($L, $16 + -1 | 0);
 _lua_pushboolean($L, $toclose$0);
 _lua_rotate($L, 2, 2);
 _lua_pushcclosure($L, 350, $16 + 2 | 0);
 STACKTOP = sp;
 return 1;
}

function _tmove($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $4 = 0, $5 = 0, $i$01 = 0, $i$14 = 0;
 $0 = _luaL_checkinteger($L, 2) | 0;
 $1 = _luaL_checkinteger($L, 3) | 0;
 $2 = _luaL_checkinteger($L, 4) | 0;
 $4 = (_lua_type($L, 5) | 0) > 0;
 $5 = $4 ? 5 : 1;
 if (($0 | 0) <= 0) _luaL_argerror($L, 2, 62632) | 0;
 if (($1 | 0) < ($0 | 0)) {
  _lua_pushvalue($L, $5);
  return 1;
 }
 if (!(_luaL_getmetafield($L, 1, 64992) | 0)) {
  _luaL_checktype($L, 1, 5);
  $18 = 18;
 } else $18 = 17;
 if (!(_luaL_getmetafield($L, $5, 63048) | 0)) {
  _luaL_checktype($L, $5, 5);
  $20 = 8;
 } else $20 = 7;
 $12 = $1 - $0 | 0;
 $14 = ($12 | 0) > -1;
 if (($2 | 0) > ($0 | 0)) {
  if ($14) $i$01 = $12; else {
   _lua_pushvalue($L, $5);
   return 1;
  }
  while (1) {
   FUNCTION_TABLE_iiii[$18 & 31]($L, 1, $i$01 + $0 | 0) | 0;
   FUNCTION_TABLE_viii[$20 & 15]($L, $5, $i$01 + $2 | 0);
   if (($i$01 | 0) > 0) $i$01 = $i$01 + -1 | 0; else break;
  }
  _lua_pushvalue($L, $5);
  return 1;
 }
 if (!$14) {
  _lua_pushvalue($L, $5);
  return 1;
 }
 $16 = $1 + 1 - $0 | 0;
 $i$14 = 0;
 do {
  FUNCTION_TABLE_iiii[$18 & 31]($L, 1, $i$14 + $0 | 0) | 0;
  FUNCTION_TABLE_viii[$20 & 15]($L, $5, $i$14 + $2 | 0);
  $i$14 = $i$14 + 1 | 0;
 } while (($i$14 | 0) != ($16 | 0));
 _lua_pushvalue($L, $5);
 return 1;
}

function _stb_vorbis_seek_start($f) {
 $f = $f | 0;
 var $$0$i = 0, $1 = 0, $10 = 0, $13 = 0, $15 = 0, $18 = 0, $2 = 0, $3 = 0, $8 = 0, $left$i = 0, $len$i = 0, $right$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $len$i = sp + 8 | 0;
 $right$i = sp + 4 | 0;
 $left$i = sp;
 $1 = HEAP32[$f + 52 >> 2] | 0;
 $2 = $f + 112 | 0;
 HEAP32[$2 >> 2] = 0;
 $3 = $f + 32 | 0;
 do if (!(HEAP32[$3 >> 2] | 0)) {
  $13 = $f + 24 | 0;
  $15 = (HEAP32[$13 >> 2] | 0) + $1 | 0;
  if ($15 >>> 0 < $1 >>> 0 | ($1 | 0) < 0) {
   HEAP32[$2 >> 2] = 1;
   $$0$i = 2147483647;
  } else $$0$i = $15;
  $18 = $f + 20 | 0;
  if (_fseek(HEAP32[$18 >> 2] | 0, $$0$i | 0, 0) | 0) {
   HEAP32[$2 >> 2] = 1;
   _fseek(HEAP32[$18 >> 2] | 0, HEAP32[$13 >> 2] | 0, 2) | 0;
  }
 } else {
  $8 = (HEAP32[$f + 36 >> 2] | 0) + $1 | 0;
  $10 = HEAP32[$f + 40 >> 2] | 0;
  if ($8 >>> 0 >= $10 >>> 0 | ($1 | 0) < 0) {
   HEAP32[$3 >> 2] = $10;
   HEAP32[$2 >> 2] = 1;
   break;
  } else {
   HEAP32[$3 >> 2] = $8;
   break;
  }
 } while (0);
 HEAP32[$f + 1008 >> 2] = 0;
 HEAP8[$f + 1393 >> 0] = 1;
 HEAP32[$f + 1396 >> 2] = -1;
 if (!(_vorbis_decode_packet($f, $len$i, $left$i, $right$i) | 0)) {
  STACKTOP = sp;
  return;
 }
 _vorbis_finish_frame($f, HEAP32[$len$i >> 2] | 0, HEAP32[$left$i >> 2] | 0, HEAP32[$right$i >> 2] | 0) | 0;
 STACKTOP = sp;
 return;
}

function _png_handle_tIME($png_ptr, $info_ptr, $length) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 $length = $length | 0;
 var $0 = 0, $1 = 0, $buf = 0, $mod_time = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $buf = sp + 8 | 0;
 $mod_time = sp;
 $0 = $png_ptr + 208 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!($1 & 1)) _png_chunk_error($png_ptr, 75496);
 if ($info_ptr) if (HEAP32[$info_ptr + 8 >> 2] & 512) {
  _png_crc_finish($png_ptr, $length) | 0;
  _png_chunk_benign_error($png_ptr, 75512);
  STACKTOP = sp;
  return;
 }
 if ($1 & 4) HEAP32[$0 >> 2] = $1 | 8;
 if (($length | 0) != 7) {
  _png_crc_finish($png_ptr, $length) | 0;
  _png_chunk_benign_error($png_ptr, 75488);
  STACKTOP = sp;
  return;
 }
 if ($png_ptr) {
  _png_read_data($png_ptr, $buf, 7);
  _png_calculate_crc($png_ptr, $buf, 7);
 }
 if (_png_crc_finish($png_ptr, 0) | 0) {
  STACKTOP = sp;
  return;
 }
 HEAP8[$mod_time + 6 >> 0] = HEAP8[$buf + 6 >> 0] | 0;
 HEAP8[$mod_time + 5 >> 0] = HEAP8[$buf + 5 >> 0] | 0;
 HEAP8[$mod_time + 4 >> 0] = HEAP8[$buf + 4 >> 0] | 0;
 HEAP8[$mod_time + 3 >> 0] = HEAP8[$buf + 3 >> 0] | 0;
 HEAP8[$mod_time + 2 >> 0] = HEAP8[$buf + 2 >> 0] | 0;
 HEAP16[$mod_time >> 1] = (HEAPU8[$buf >> 0] | 0) << 8 | (HEAPU8[$buf + 1 >> 0] | 0);
 _png_set_tIME($png_ptr, $info_ptr, $mod_time);
 STACKTOP = sp;
 return;
}

function __ZN18b2DistanceJointDef10InitializeEP6b2BodyS1_RK6b2Vec2S4_($this, $b1, $b2, $anchor1, $anchor2) {
 $this = $this | 0;
 $b1 = $b1 | 0;
 $b2 = $b2 | 0;
 $anchor1 = $anchor1 | 0;
 $anchor2 = $anchor2 | 0;
 var $11 = 0.0, $13 = 0.0, $16 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $32 = 0.0, $33 = 0, $37 = 0.0, $39 = 0.0, $42 = 0.0, $48 = 0.0, $49 = 0.0, $50 = 0, $56 = 0.0, $59 = 0.0, $6 = 0.0, $7 = 0;
 HEAP32[$this + 8 >> 2] = $b1;
 HEAP32[$this + 12 >> 2] = $b2;
 $6 = +HEAPF32[$anchor1 >> 2] - +HEAPF32[$b1 + 12 >> 2];
 $7 = $anchor1 + 4 | 0;
 $11 = +HEAPF32[$7 >> 2] - +HEAPF32[$b1 + 16 >> 2];
 $13 = +HEAPF32[$b1 + 24 >> 2];
 $16 = +HEAPF32[$b1 + 20 >> 2];
 $22 = +($6 * $13 + $11 * $16);
 $23 = +($13 * $11 - $6 * $16);
 $24 = $this + 20 | 0;
 HEAPF32[$24 >> 2] = $22;
 HEAPF32[$24 + 4 >> 2] = $23;
 $32 = +HEAPF32[$anchor2 >> 2] - +HEAPF32[$b2 + 12 >> 2];
 $33 = $anchor2 + 4 | 0;
 $37 = +HEAPF32[$33 >> 2] - +HEAPF32[$b2 + 16 >> 2];
 $39 = +HEAPF32[$b2 + 24 >> 2];
 $42 = +HEAPF32[$b2 + 20 >> 2];
 $48 = +($32 * $39 + $37 * $42);
 $49 = +($39 * $37 - $32 * $42);
 $50 = $this + 28 | 0;
 HEAPF32[$50 >> 2] = $48;
 HEAPF32[$50 + 4 >> 2] = $49;
 $56 = +HEAPF32[$anchor2 >> 2] - +HEAPF32[$anchor1 >> 2];
 $59 = +HEAPF32[$33 >> 2] - +HEAPF32[$7 >> 2];
 HEAPF32[$this + 36 >> 2] = +Math_sqrt(+($56 * $56 + $59 * $59));
 return;
}

function __ZN21CustomRayCastCallback13ReportFixtureEP9b2FixtureRK6b2Vec2S4_f($this, $fixture, $point, $normal, $fraction) {
 $this = $this | 0;
 $fixture = $fixture | 0;
 $point = $point | 0;
 $normal = $normal | 0;
 $fraction = +$fraction;
 var $1 = 0, $22 = 0.0, $28 = 0, $3 = 0, $33 = 0, $34 = 0, $new_fraction$01 = 0.0, $new_fraction$02 = 0.0;
 $1 = HEAP32[$this + 8 >> 2] | 0;
 if (($1 | 0) == -1) $new_fraction$02 = $fraction; else {
  $3 = $this + 4 | 0;
  _lua_rawgeti(HEAP32[$3 >> 2] | 0, -1001e3, $1) | 0;
  __Z9push_bodyP9lua_StateP4Body(HEAP32[$3 >> 2] | 0, HEAP32[(HEAP32[$fixture + 8 >> 2] | 0) + 148 >> 2] | 0);
  _lua_pushnumber(HEAP32[$3 >> 2] | 0, $fraction);
  _lua_pushnumber(HEAP32[$3 >> 2] | 0, +HEAPF32[$point >> 2] * +HEAPF32[616]);
  _lua_pushnumber(HEAP32[$3 >> 2] | 0, +HEAPF32[$point + 4 >> 2] * +HEAPF32[616]);
  _call_lua_function(HEAP32[$3 >> 2] | 0, 4, 2);
  $22 = +_luaL_checknumber(HEAP32[$3 >> 2] | 0, -2);
  if (!(_lua_toboolean(HEAP32[$3 >> 2] | 0, -1) | 0)) {
   $new_fraction$01 = $22;
   return +$new_fraction$01;
  } else $new_fraction$02 = $22;
 }
 HEAP32[$this + 12 >> 2] = $fixture;
 $28 = $point;
 $33 = HEAP32[$28 + 4 >> 2] | 0;
 $34 = $this + 16 | 0;
 HEAP32[$34 >> 2] = HEAP32[$28 >> 2];
 HEAP32[$34 + 4 >> 2] = $33;
 $new_fraction$01 = $new_fraction$02;
 return +$new_fraction$01;
}

function __ZN9b2Fixture7DestroyEP16b2BlockAllocator($this, $allocator) {
 $this = $this | 0;
 $allocator = $allocator | 0;
 var $12 = 0, $14 = 0, $3 = 0, $4 = 0, $8 = 0, $9 = 0;
 if (HEAP32[$this + 28 >> 2] | 0) ___assert_fail(88040, 88064, 72, 91592);
 $3 = $this + 12 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] & 511]($4) | 0;
 $9 = $this + 24 | 0;
 __ZN16b2BlockAllocator4FreeEPvi($allocator, HEAP32[$9 >> 2] | 0, $8 * 28 | 0);
 HEAP32[$9 >> 2] = 0;
 $12 = HEAP32[$3 >> 2] | 0;
 $14 = HEAP32[$12 + 4 >> 2] | 0;
 if (!$14) {
  FUNCTION_TABLE_vi[HEAP32[HEAP32[$12 >> 2] >> 2] & 127]($12);
  __ZN16b2BlockAllocator4FreeEPvi($allocator, $12, 20);
  HEAP32[$3 >> 2] = 0;
  return;
 } else if (($14 | 0) == 1) {
  FUNCTION_TABLE_vi[HEAP32[HEAP32[$12 >> 2] >> 2] & 127]($12);
  __ZN16b2BlockAllocator4FreeEPvi($allocator, $12, 48);
  HEAP32[$3 >> 2] = 0;
  return;
 } else if (($14 | 0) == 2) {
  FUNCTION_TABLE_vi[HEAP32[HEAP32[$12 >> 2] >> 2] & 127]($12);
  __ZN16b2BlockAllocator4FreeEPvi($allocator, $12, 152);
  HEAP32[$3 >> 2] = 0;
  return;
 } else if (($14 | 0) == 3) {
  FUNCTION_TABLE_vi[HEAP32[HEAP32[$12 >> 2] >> 2] & 127]($12);
  __ZN16b2BlockAllocator4FreeEPvi($allocator, $12, 40);
  HEAP32[$3 >> 2] = 0;
  return;
 } else ___assert_fail(90768, 88064, 115, 91592);
}

function _ll_module($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $3 = 0, $4 = 0, $ar$i = 0, $i$01$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $vararg_buffer = sp;
 $ar$i = sp + 4 | 0;
 $0 = _luaL_checklstring($L, 1, 0) | 0;
 $1 = _lua_gettop($L) | 0;
 _luaL_pushmodule($L, $0, 1);
 $3 = (_lua_getfield($L, -1, 58704) | 0) == 0;
 _lua_settop($L, -2);
 if ($3) {
  _lua_pushvalue($L, -1);
  _lua_setfield($L, -2, 58760);
  _lua_pushstring($L, $0) | 0;
  _lua_setfield($L, -2, 58704);
  $4 = _strrchr($0, 46) | 0;
  _lua_pushlstring($L, $0, (($4 | 0) == 0 ? $0 : $4 + 1 | 0) - $0 | 0) | 0;
  _lua_setfield($L, -2, 58768);
 }
 _lua_pushvalue($L, -1);
 if (!(_lua_getstack($L, 1, $ar$i) | 0)) label = 6; else if (!(_lua_getinfo($L, 58712, $ar$i) | 0)) label = 6; else if (_lua_iscfunction($L, -1) | 0) label = 6;
 if ((label | 0) == 6) _luaL_error($L, 58720, $vararg_buffer) | 0;
 _lua_pushvalue($L, -2);
 _lua_setupvalue($L, -2, 1) | 0;
 _lua_settop($L, -2);
 if (($1 | 0) < 2) {
  STACKTOP = sp;
  return 1;
 } else $i$01$i = 2;
 while (1) {
  if ((_lua_type($L, $i$01$i) | 0) == 6) {
   _lua_pushvalue($L, $i$01$i);
   _lua_pushvalue($L, -2);
   _lua_callk($L, 1, 0, 0, 0);
  }
  if (($i$01$i | 0) == ($1 | 0)) break; else $i$01$i = $i$01$i + 1 | 0;
 }
 STACKTOP = sp;
 return 1;
}

function _lua_tointegerx($L, $idx, $pisnum) {
 $L = $L | 0;
 $idx = $idx | 0;
 $pisnum = $pisnum | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $33 = 0, $36 = 0, $37 = 0, $4 = 0, $res = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $res = sp;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 3) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 59168;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 3) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 4 >> 2] | 0) == 22) $$0$i = 59168; else {
   $21 = HEAP32[$17 >> 2] | 0;
   if (($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0)) $$0$i = 59168; else $$0$i = $21 + 16 + ($16 + -1 << 3) | 0;
  }
 } while (0);
 if ((HEAP32[$$0$i + 4 >> 2] | 0) == 19) {
  HEAP32[$res >> 2] = HEAP32[$$0$i >> 2];
  $36 = 1;
 } else {
  $33 = _luaV_tointeger_($$0$i, $res) | 0;
  if (!$33) {
   HEAP32[$res >> 2] = 0;
   $36 = 0;
  } else $36 = $33;
 }
 if (!$pisnum) {
  $37 = HEAP32[$res >> 2] | 0;
  STACKTOP = sp;
  return $37 | 0;
 }
 HEAP32[$pisnum >> 2] = $36;
 $37 = HEAP32[$res >> 2] | 0;
 STACKTOP = sp;
 return $37 | 0;
}

function _sound_load($len, $buffer, $samplesrate) {
 $len = $len | 0;
 $buffer = $buffer | 0;
 $samplesrate = $samplesrate | 0;
 var $$0 = 0, $0 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $i$01 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $0 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($len << 1) | 0) + 15 & -16) | 0;
 if (!$buffer) ___assert_fail(22256, 11952, 102, 12008);
 if (!(_audio_init_if_needed() | 0)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ($len) {
  $i$01 = 0;
  do {
   HEAP16[$0 + ($i$01 << 1) >> 1] = ~~(+HEAPF32[$buffer + ($i$01 << 2) >> 2] * 65535.0 * .5 + 32767.0);
   $i$01 = $i$01 + 1 | 0;
  } while (($i$01 | 0) != ($len | 0));
 }
 $13 = _xcalloc(1, 16) | 0;
 _alGenBuffers(1, $13 | 0);
 _alBufferData(HEAP32[$13 >> 2] | 0, 4353, $0 | 0, $len << 1 | 0, $samplesrate | 0);
 $15 = _alGetError() | 0;
 if (!$15) {
  $$0 = $13;
  STACKTOP = sp;
  return $$0 | 0;
 } else $17 = $15;
 do {
  $18 = _alGetString($17 | 0) | 0;
  HEAP32[$vararg_buffer >> 2] = 11952;
  HEAP32[$vararg_buffer + 4 >> 2] = 55;
  HEAP32[$vararg_buffer + 8 >> 2] = 12080;
  HEAP32[$vararg_buffer + 12 >> 2] = $18;
  _log_internal(3, 12e3, 12024, $vararg_buffer);
  $17 = _alGetError() | 0;
 } while (($17 | 0) != 0);
 $$0 = $13;
 STACKTOP = sp;
 return $$0 | 0;
}

function _luaD_protectedparser($L, $z, $name, $mode) {
 $L = $L | 0;
 $z = $z | 0;
 $name = $name | 0;
 $mode = $mode | 0;
 var $0 = 0, $10 = 0, $11 = 0, $12 = 0, $22 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $p = sp;
 $0 = $L + 104 | 0;
 HEAP16[$0 >> 1] = (HEAP16[$0 >> 1] | 0) + 1 << 16 >> 16;
 HEAP32[$p >> 2] = $z;
 HEAP32[$p + 56 >> 2] = $name;
 HEAP32[$p + 52 >> 2] = $mode;
 $5 = $p + 16 | 0;
 HEAP32[$5 >> 2] = 0;
 $6 = $p + 24 | 0;
 HEAP32[$6 >> 2] = 0;
 $7 = $p + 28 | 0;
 HEAP32[$7 >> 2] = 0;
 $8 = $p + 36 | 0;
 HEAP32[$8 >> 2] = 0;
 $9 = $p + 40 | 0;
 HEAP32[$9 >> 2] = 0;
 $10 = $p + 48 | 0;
 HEAP32[$10 >> 2] = 0;
 $11 = $p + 4 | 0;
 HEAP32[$11 >> 2] = 0;
 $12 = $p + 12 | 0;
 HEAP32[$12 >> 2] = 0;
 $22 = _luaD_pcall($L, 82, $p, (HEAP32[$L + 8 >> 2] | 0) - (HEAP32[$L + 28 >> 2] | 0) | 0, HEAP32[$L + 88 >> 2] | 0) | 0;
 HEAP32[$11 >> 2] = _luaM_realloc_($L, HEAP32[$11 >> 2] | 0, HEAP32[$12 >> 2] | 0, 0) | 0;
 HEAP32[$12 >> 2] = 0;
 _luaM_realloc_($L, HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] << 1, 0) | 0;
 _luaM_realloc_($L, HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] << 4, 0) | 0;
 _luaM_realloc_($L, HEAP32[$9 >> 2] | 0, HEAP32[$10 >> 2] << 4, 0) | 0;
 HEAP16[$0 >> 1] = (HEAP16[$0 >> 1] | 0) + -1 << 16 >> 16;
 STACKTOP = sp;
 return $22 | 0;
}

function _strjoin($s, $varargs) {
 $s = $s | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $11 = 0, $17 = 0, $21 = 0, $23 = 0, $29 = 0, $30 = 0, $32 = 0, $39 = 0, $6 = 0, $7 = 0, $9 = 0, $ap = 0, $l$0$lcssa = 0, $l$02 = 0, $p$01 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $0 = _strlen($s | 0) | 0;
 $6 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
 $7 = HEAP32[$6 >> 2] | 0;
 HEAP32[$ap >> 2] = $6 + 4;
 if (!$7) $l$0$lcssa = $0; else {
  $9 = $7;
  $l$02 = $0;
  while (1) {
   $11 = (_strlen($9 | 0) | 0) + $l$02 | 0;
   $17 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $9 = HEAP32[$17 >> 2] | 0;
   HEAP32[$ap >> 2] = $17 + 4;
   if (!$9) {
    $l$0$lcssa = $11;
    break;
   } else $l$02 = $11;
  }
 }
 $21 = _malloc($l$0$lcssa + 1 | 0) | 0;
 if (!$21) _log_oom_and_exit();
 HEAP32[$ap >> 2] = $varargs;
 $23 = ___stpcpy($21, $s) | 0;
 $29 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
 $30 = HEAP32[$29 >> 2] | 0;
 HEAP32[$ap >> 2] = $29 + 4;
 if (!$30) {
  STACKTOP = sp;
  return $21 | 0;
 } else {
  $32 = $30;
  $p$01 = $23;
 }
 do {
  $p$01 = ___stpcpy($p$01, $32) | 0;
  $39 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
  $32 = HEAP32[$39 >> 2] | 0;
  HEAP32[$ap >> 2] = $39 + 4;
 } while (($32 | 0) != 0);
 STACKTOP = sp;
 return $21 | 0;
}

function _strncasecmp($_l, $_r, $n) {
 $_l = $_l | 0;
 $_r = $_r | 0;
 $n = $n | 0;
 var $$04 = 0, $$08$in = 0, $1 = 0, $10 = 0, $16 = 0, $17 = 0, $21 = 0, $22 = 0, $4 = 0, $7 = 0, $9 = 0, $l$06 = 0, $l$06$lcssa24 = 0, $r$0$lcssa = 0, $r$07 = 0, $r$07$lcssa23 = 0;
 if (!$n) {
  $$04 = 0;
  return $$04 | 0;
 }
 $1 = HEAP8[$_l >> 0] | 0;
 L4 : do if (!($1 << 24 >> 24)) {
  $21 = 0;
  $r$0$lcssa = $_r;
 } else {
  $$08$in = $n;
  $7 = $1;
  $9 = $1 & 255;
  $l$06 = $_l;
  $r$07 = $_r;
  while (1) {
   $$08$in = $$08$in + -1 | 0;
   $4 = HEAP8[$r$07 >> 0] | 0;
   if (!(($$08$in | 0) != 0 & $4 << 24 >> 24 != 0)) {
    $21 = $7;
    $r$0$lcssa = $r$07;
    break L4;
   }
   if ($7 << 24 >> 24 != $4 << 24 >> 24) {
    $10 = _tolower($9) | 0;
    if (($10 | 0) != (_tolower(HEAPU8[$r$07 >> 0] | 0) | 0)) {
     $l$06$lcssa24 = $l$06;
     $r$07$lcssa23 = $r$07;
     break;
    }
   }
   $l$06 = $l$06 + 1 | 0;
   $16 = $r$07 + 1 | 0;
   $17 = HEAP8[$l$06 >> 0] | 0;
   if (!($17 << 24 >> 24)) {
    $21 = 0;
    $r$0$lcssa = $16;
    break L4;
   } else {
    $7 = $17;
    $9 = $17 & 255;
    $r$07 = $16;
   }
  }
  $21 = HEAP8[$l$06$lcssa24 >> 0] | 0;
  $r$0$lcssa = $r$07$lcssa23;
 } while (0);
 $22 = _tolower($21 & 255) | 0;
 $$04 = $22 - (_tolower(HEAPU8[$r$0$lcssa >> 0] | 0) | 0) | 0;
 return $$04 | 0;
}

function _db_gethook($L) {
 $L = $L | 0;
 var $$0$i = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $buff = 0, $i$0$i = 0, $i$1$i = 0, $i$2$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $buff = sp;
 if ((_lua_type($L, 1) | 0) == 8) $$0$i = _lua_tothread($L, 1) | 0; else $$0$i = $L;
 $3 = _lua_gethookmask($$0$i) | 0;
 $4 = _lua_gethook($$0$i) | 0;
 do if (!$4) _lua_pushnil($L); else if (($4 | 0) == 85) {
  _lua_rawgetp($L, -1001e3, 66552) | 0;
  _lua_pushthread($$0$i) | 0;
  _lua_xmove($$0$i, $L, 1);
  _lua_rawget($L, -2) | 0;
  _lua_rotate($L, -2, -1);
  _lua_settop($L, -2);
  break;
 } else {
  _lua_pushlstring($L, 66896, 13) | 0;
  break;
 } while (0);
 if (!($3 & 1)) $i$0$i = 0; else {
  HEAP8[$buff >> 0] = 99;
  $i$0$i = 1;
 }
 if (!($3 & 2)) $i$1$i = $i$0$i; else {
  HEAP8[$buff + $i$0$i >> 0] = 114;
  $i$1$i = $i$0$i + 1 | 0;
 }
 if (!($3 & 4)) {
  $i$2$i = $i$1$i;
  $17 = $buff + $i$2$i | 0;
  HEAP8[$17 >> 0] = 0;
  _lua_pushstring($L, $buff) | 0;
  $18 = _lua_gethookcount($$0$i) | 0;
  _lua_pushinteger($L, $18);
  STACKTOP = sp;
  return 3;
 }
 HEAP8[$buff + $i$1$i >> 0] = 108;
 $i$2$i = $i$1$i + 1 | 0;
 $17 = $buff + $i$2$i | 0;
 HEAP8[$17 >> 0] = 0;
 _lua_pushstring($L, $buff) | 0;
 $18 = _lua_gethookcount($$0$i) | 0;
 _lua_pushinteger($L, $18);
 STACKTOP = sp;
 return 3;
}

function _music_load($callback, $samplesrate, $num_channels) {
 $callback = $callback | 0;
 $samplesrate = $samplesrate | 0;
 $num_channels = $num_channels | 0;
 var $$0 = 0, $16 = 0, $18 = 0, $19 = 0, $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 if (!$callback) ___assert_fail(10832, 10720, 217, 10848);
 if (($num_channels + -1 | 0) >>> 0 >= 2) ___assert_fail(10864, 10720, 218, 10848);
 if (!(_audio_init_if_needed() | 0)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $5 = _xcalloc(1, 52) | 0;
 HEAP32[$5 + 20 >> 2] = $callback;
 HEAP32[$5 + 24 >> 2] = ($num_channels | 0) == 2 ? 4355 : 4353;
 HEAP32[$5 + 28 >> 2] = $samplesrate;
 HEAP32[$5 + 32 >> 2] = ~~(+($samplesrate | 0) * .4) >>> 0;
 HEAPF32[$5 + 44 >> 2] = 1.0;
 HEAPF32[$5 + 48 >> 2] = 1.0;
 _alGenBuffers(3, $5 + 4 | 0);
 $16 = _alGetError() | 0;
 if (!$16) {
  $$0 = $5;
  STACKTOP = sp;
  return $$0 | 0;
 } else $18 = $16;
 do {
  $19 = _alGetString($18 | 0) | 0;
  HEAP32[$vararg_buffer >> 2] = 10720;
  HEAP32[$vararg_buffer + 4 >> 2] = 46;
  HEAP32[$vararg_buffer + 8 >> 2] = 11e3;
  HEAP32[$vararg_buffer + 12 >> 2] = $19;
  _log_internal(3, 12304, 12024, $vararg_buffer);
  $18 = _alGetError() | 0;
 } while (($18 | 0) != 0);
 $$0 = $5;
 STACKTOP = sp;
 return $$0 | 0;
}

function _lua_tonumberx($L, $idx, $pisnum) {
 $L = $L | 0;
 $idx = $idx | 0;
 $pisnum = $pisnum | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $33 = 0, $36 = 0, $37 = 0.0, $4 = 0, $n = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $n = sp;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 3) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 59168;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 3) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 4 >> 2] | 0) == 22) $$0$i = 59168; else {
   $21 = HEAP32[$17 >> 2] | 0;
   if (($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0)) $$0$i = 59168; else $$0$i = $21 + 16 + ($16 + -1 << 3) | 0;
  }
 } while (0);
 if ((HEAP32[$$0$i + 4 >> 2] | 0) == 3) {
  HEAPF32[$n >> 2] = +HEAPF32[$$0$i >> 2];
  $36 = 1;
 } else {
  $33 = _luaV_tonumber_($$0$i, $n) | 0;
  if (!$33) {
   HEAPF32[$n >> 2] = 0.0;
   $36 = 0;
  } else $36 = $33;
 }
 if (!$pisnum) {
  $37 = +HEAPF32[$n >> 2];
  STACKTOP = sp;
  return +$37;
 }
 HEAP32[$pisnum >> 2] = $36;
 $37 = +HEAPF32[$n >> 2];
 STACKTOP = sp;
 return +$37;
}

function _lua_rawgetp($L, $idx, $p) {
 $L = $L | 0;
 $idx = $idx | 0;
 $p = $p | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $30 = 0, $31 = 0, $34 = 0, $39 = 0, $4 = 0, $40 = 0, $44 = 0, $k = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $k = sp;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 3) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 59168;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 3) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 4 >> 2] | 0) == 22) $$0$i = 59168; else {
   $21 = HEAP32[$17 >> 2] | 0;
   if (($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0)) $$0$i = 59168; else $$0$i = $21 + 16 + ($16 + -1 << 3) | 0;
  }
 } while (0);
 HEAP32[$k >> 2] = $p;
 HEAP32[$k + 4 >> 2] = 2;
 $30 = $L + 8 | 0;
 $31 = HEAP32[$30 >> 2] | 0;
 $34 = _luaH_get(HEAP32[$$0$i >> 2] | 0, $k) | 0;
 $39 = HEAP32[$34 + 4 >> 2] | 0;
 $40 = $31;
 HEAP32[$40 >> 2] = HEAP32[$34 >> 2];
 HEAP32[$40 + 4 >> 2] = $39;
 $44 = HEAP32[$30 >> 2] | 0;
 HEAP32[$30 >> 2] = $44 + 8;
 STACKTOP = sp;
 return HEAP32[$44 + 4 >> 2] & 15 | 0;
}

function __ZN7b2Joint7DestroyEPS_P16b2BlockAllocator($joint, $allocator) {
 $joint = $joint | 0;
 $allocator = $allocator | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$joint >> 2] | 0) + 24 >> 2] & 127]($joint);
 do switch (HEAP32[$joint + 4 >> 2] | 0) {
 case 11:
  {
   __ZN16b2BlockAllocator4FreeEPvi($allocator, $joint, 192);
   return;
  }
 case 9:
  {
   __ZN16b2BlockAllocator4FreeEPvi($allocator, $joint, 180);
   return;
  }
 case 1:
  {
   __ZN16b2BlockAllocator4FreeEPvi($allocator, $joint, 228);
   return;
  }
 case 5:
  {
   __ZN16b2BlockAllocator4FreeEPvi($allocator, $joint, 168);
   return;
  }
 case 4:
  {
   __ZN16b2BlockAllocator4FreeEPvi($allocator, $joint, 196);
   return;
  }
 case 6:
  {
   __ZN16b2BlockAllocator4FreeEPvi($allocator, $joint, 276);
   return;
  }
 case 8:
  {
   __ZN16b2BlockAllocator4FreeEPvi($allocator, $joint, 208);
   return;
  }
 case 7:
  {
   __ZN16b2BlockAllocator4FreeEPvi($allocator, $joint, 224);
   return;
  }
 case 10:
  {
   __ZN16b2BlockAllocator4FreeEPvi($allocator, $joint, 168);
   return;
  }
 case 2:
  {
   __ZN16b2BlockAllocator4FreeEPvi($allocator, $joint, 256);
   return;
  }
 case 3:
  {
   __ZN16b2BlockAllocator4FreeEPvi($allocator, $joint, 176);
   return;
  }
 default:
  ___assert_fail(90768, 84184, 178, 91592);
 } while (0);
}

function __ZN13b2PulleyJointC2EPK16b2PulleyJointDef($this, $def) {
 $this = $this | 0;
 $def = $def | 0;
 var $10 = 0, $11 = 0, $16 = 0, $21 = 0, $22 = 0, $27 = 0, $32 = 0, $33 = 0, $38 = 0, $43 = 0, $44 = 0, $48 = 0, $5 = 0, $51 = 0, $55 = 0.0;
 __ZN7b2JointC2EPK10b2JointDef($this, $def);
 HEAP32[$this >> 2] = 85472;
 $5 = $def + 20 | 0;
 $10 = HEAP32[$5 + 4 >> 2] | 0;
 $11 = $this + 68 | 0;
 HEAP32[$11 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$11 + 4 >> 2] = $10;
 $16 = $def + 28 | 0;
 $21 = HEAP32[$16 + 4 >> 2] | 0;
 $22 = $this + 76 | 0;
 HEAP32[$22 >> 2] = HEAP32[$16 >> 2];
 HEAP32[$22 + 4 >> 2] = $21;
 $27 = $def + 36 | 0;
 $32 = HEAP32[$27 + 4 >> 2] | 0;
 $33 = $this + 92 | 0;
 HEAP32[$33 >> 2] = HEAP32[$27 >> 2];
 HEAP32[$33 + 4 >> 2] = $32;
 $38 = $def + 44 | 0;
 $43 = HEAP32[$38 + 4 >> 2] | 0;
 $44 = $this + 100 | 0;
 HEAP32[$44 >> 2] = HEAP32[$38 >> 2];
 HEAP32[$44 + 4 >> 2] = $43;
 $48 = $def + 52 | 0;
 HEAPF32[$this + 84 >> 2] = +HEAPF32[$48 >> 2];
 $51 = $def + 56 | 0;
 HEAPF32[$this + 88 >> 2] = +HEAPF32[$51 >> 2];
 $55 = +HEAPF32[$def + 60 >> 2];
 if ($55 != 0.0) {
  HEAPF32[$this + 112 >> 2] = $55;
  HEAPF32[$this + 108 >> 2] = +HEAPF32[$48 >> 2] + $55 * +HEAPF32[$51 >> 2];
  HEAPF32[$this + 116 >> 2] = 0.0;
  return;
 } else ___assert_fail(85520, 85400, 65, 85544);
}

function _png_handle_pHYs($png_ptr, $info_ptr, $length) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 $length = $length | 0;
 var $1 = 0, $buf = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $buf = sp;
 $1 = HEAP32[$png_ptr + 208 >> 2] | 0;
 if (!($1 & 1)) _png_chunk_error($png_ptr, 75496);
 if ($1 & 4) {
  _png_crc_finish($png_ptr, $length) | 0;
  _png_chunk_benign_error($png_ptr, 75472);
  STACKTOP = sp;
  return;
 }
 if ($info_ptr) if (HEAP32[$info_ptr + 8 >> 2] & 128) {
  _png_crc_finish($png_ptr, $length) | 0;
  _png_chunk_benign_error($png_ptr, 75512);
  STACKTOP = sp;
  return;
 }
 if (($length | 0) != 9) {
  _png_crc_finish($png_ptr, $length) | 0;
  _png_chunk_benign_error($png_ptr, 75488);
  STACKTOP = sp;
  return;
 }
 if ($png_ptr) {
  _png_read_data($png_ptr, $buf, 9);
  _png_calculate_crc($png_ptr, $buf, 9);
 }
 if (_png_crc_finish($png_ptr, 0) | 0) {
  STACKTOP = sp;
  return;
 }
 _png_set_pHYs($png_ptr, $info_ptr, (HEAPU8[$buf + 1 >> 0] | 0) << 16 | (HEAPU8[$buf >> 0] | 0) << 24 | (HEAPU8[$buf + 2 >> 0] | 0) << 8 | (HEAPU8[$buf + 3 >> 0] | 0), (HEAPU8[$buf + 5 >> 0] | 0) << 16 | (HEAPU8[$buf + 4 >> 0] | 0) << 24 | (HEAPU8[$buf + 6 >> 0] | 0) << 8 | (HEAPU8[$buf + 7 >> 0] | 0), HEAPU8[$buf + 8 >> 0] | 0);
 STACKTOP = sp;
 return;
}

function _png_handle_oFFs($png_ptr, $info_ptr, $length) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 $length = $length | 0;
 var $1 = 0, $buf = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $buf = sp;
 $1 = HEAP32[$png_ptr + 208 >> 2] | 0;
 if (!($1 & 1)) _png_chunk_error($png_ptr, 75496);
 if ($1 & 4) {
  _png_crc_finish($png_ptr, $length) | 0;
  _png_chunk_benign_error($png_ptr, 75472);
  STACKTOP = sp;
  return;
 }
 if ($info_ptr) if (HEAP32[$info_ptr + 8 >> 2] & 256) {
  _png_crc_finish($png_ptr, $length) | 0;
  _png_chunk_benign_error($png_ptr, 75512);
  STACKTOP = sp;
  return;
 }
 if (($length | 0) != 9) {
  _png_crc_finish($png_ptr, $length) | 0;
  _png_chunk_benign_error($png_ptr, 75488);
  STACKTOP = sp;
  return;
 }
 if ($png_ptr) {
  _png_read_data($png_ptr, $buf, 9);
  _png_calculate_crc($png_ptr, $buf, 9);
 }
 if (_png_crc_finish($png_ptr, 0) | 0) {
  STACKTOP = sp;
  return;
 }
 _png_set_oFFs($png_ptr, $info_ptr, (HEAPU8[$buf + 1 >> 0] | 0) << 16 | (HEAPU8[$buf >> 0] | 0) << 24 | (HEAPU8[$buf + 2 >> 0] | 0) << 8 | (HEAPU8[$buf + 3 >> 0] | 0), (HEAPU8[$buf + 5 >> 0] | 0) << 16 | (HEAPU8[$buf + 4 >> 0] | 0) << 24 | (HEAPU8[$buf + 6 >> 0] | 0) << 8 | (HEAPU8[$buf + 7 >> 0] | 0), HEAPU8[$buf + 8 >> 0] | 0);
 STACKTOP = sp;
 return;
}

function _engine_update() {
 var $0 = 0, $11 = 0, $16 = 0.0, $17 = 0, $20 = 0, $21 = 0, $23 = 0, $26 = 0, $28 = 0, $3 = 0, $32 = 0, $37 = 0, $4 = 0, $6 = 0, $9 = 0, $ts$i1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ts$i1 = sp;
 _clock_gettime(1, $ts$i1 | 0) | 0;
 $0 = HEAP32[$ts$i1 >> 2] | 0;
 $3 = ___muldi3($0 | 0, (($0 | 0) < 0) << 31 >> 31 | 0, 1e6, 0) | 0;
 $4 = tempRet0;
 $6 = HEAP32[$ts$i1 + 4 >> 2] | 0;
 $9 = ___udivdi3($6 | 0, (($6 | 0) < 0) << 31 >> 31 | 0, 1e3, 0) | 0;
 $11 = _i64Add($3 | 0, $4 | 0, $9 | 0, tempRet0 | 0) | 0;
 $16 = +(($11 - (HEAP32[4] | 0) | 0) >>> 0) / 1.0e6;
 _clock_gettime(1, $ts$i1 | 0) | 0;
 $17 = HEAP32[$ts$i1 >> 2] | 0;
 $20 = ___muldi3($17 | 0, (($17 | 0) < 0) << 31 >> 31 | 0, 1e6, 0) | 0;
 $21 = tempRet0;
 $23 = HEAP32[$ts$i1 + 4 >> 2] | 0;
 $26 = ___udivdi3($23 | 0, (($23 | 0) < 0) << 31 >> 31 | 0, 1e3, 0) | 0;
 $28 = _i64Add($20 | 0, $21 | 0, $26 | 0, tempRet0 | 0) | 0;
 HEAP32[4] = $28;
 _event_update();
 if (!(HEAP8[12] | 0)) {
  STACKTOP = sp;
  return;
 }
 _audio_update($16);
 $32 = HEAP16[10] | 0;
 if (!(($32 & 255) << 24 >> 24)) $37 = ($32 & 65535) >>> 8 & 255; else {
  _dlua_call_update($16);
  $37 = HEAP8[21] | 0;
 }
 if ($37 << 24 >> 24) _dlua_call_draw();
 _display_flip();
 STACKTOP = sp;
 return;
}

function _png_inflate_claim($png_ptr, $owner) {
 $png_ptr = $png_ptr | 0;
 $owner = $owner | 0;
 var $0 = 0, $1 = 0, $13 = 0, $17 = 0, $21 = 0, $25 = 0, $msg = 0, $ret$01 = 0, $ret$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $msg = sp;
 $0 = $png_ptr + 220 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ($1) {
  HEAP8[$msg >> 0] = $1 >>> 24;
  HEAP8[$msg + 1 >> 0] = $1 >>> 16;
  HEAP8[$msg + 2 >> 0] = $1 >>> 8;
  HEAP8[$msg + 3 >> 0] = $1;
  _png_safecat($msg, 64, 4, 77160) | 0;
  _png_chunk_error($png_ptr, $msg);
 }
 $13 = $png_ptr + 224 | 0;
 HEAP32[$13 >> 2] = 0;
 HEAP32[$png_ptr + 228 >> 2] = 0;
 HEAP32[$png_ptr + 236 >> 2] = 0;
 HEAP32[$png_ptr + 240 >> 2] = 0;
 $17 = $png_ptr + 212 | 0;
 if (!(HEAP32[$17 >> 2] & 2)) {
  $21 = _inflateInit_($13, 77176, 56) | 0;
  if (!$21) {
   HEAP32[$17 >> 2] = HEAP32[$17 >> 2] | 2;
   label = 7;
  } else {
   $ret$04 = $21;
   label = 8;
  }
 } else {
  $25 = _inflateReset($13) | 0;
  if (!$25) label = 7; else {
   $ret$04 = $25;
   label = 8;
  }
 }
 if ((label | 0) == 7) {
  HEAP32[$0 >> 2] = $owner;
  $ret$01 = 0;
  STACKTOP = sp;
  return $ret$01 | 0;
 } else if ((label | 0) == 8) {
  _png_zstream_error($png_ptr, $ret$04);
  $ret$01 = $ret$04;
  STACKTOP = sp;
  return $ret$01 | 0;
 }
 return 0;
}

function _read_line($L, $f, $chop) {
 $L = $L | 0;
 $f = $f | 0;
 $chop = $chop | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $16 = 0, $2 = 0, $21 = 0, $22 = 0, $4 = 0, $b = 0, $c$0 = 0, $i$0$lcssa = 0, $i$04 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2064 | 0;
 $b = sp;
 _luaL_buffinit($L, $b);
 $0 = $b + 8 | 0;
 $c$0 = 0;
 while (1) {
  if (($c$0 | 0) == 10 | ($c$0 | 0) == -1) break;
  $1 = _luaL_prepbuffsize($b, 2048) | 0;
  $i$04 = 0;
  while (1) {
   $2 = _getc($f | 0) | 0;
   if (($2 | 0) == 10 | ($2 | 0) == -1) {
    $i$0$lcssa = $i$04;
    break;
   }
   $4 = $i$04 + 1 | 0;
   HEAP8[$1 + $i$04 >> 0] = $2;
   if (($4 | 0) < 2048) $i$04 = $4; else {
    $i$0$lcssa = $4;
    break;
   }
  }
  HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + $i$0$lcssa;
  $c$0 = $2;
 }
 $10 = ($c$0 | 0) == 10;
 if (($chop | 0) == 0 & $10) {
  $11 = HEAP32[$0 >> 2] | 0;
  if ($11 >>> 0 < (HEAP32[$b + 4 >> 2] | 0) >>> 0) $16 = $11; else {
   _luaL_prepbuffsize($b, 1) | 0;
   $16 = HEAP32[$0 >> 2] | 0;
  }
  HEAP32[$0 >> 2] = $16 + 1;
  HEAP8[(HEAP32[$b >> 2] | 0) + $16 >> 0] = 10;
 }
 _luaL_pushresult($b);
 if ($10) {
  $22 = 1;
  $21 = $22 & 1;
  STACKTOP = sp;
  return $21 | 0;
 }
 $22 = (_lua_rawlen($L, -1) | 0) != 0;
 $21 = $22 & 1;
 STACKTOP = sp;
 return $21 | 0;
}

function _vsnprintf($s, $n, $fmt, $ap) {
 $s = $s | 0;
 $n = $n | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $10 = 0, $11 = 0, $13 = 0, $15 = 0, $5 = 0, $8 = 0, $b = 0, $f = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $b = sp + 112 | 0;
 $f = sp;
 dest = $f + 0 | 0;
 src = 107784 | 0;
 stop = dest + 112 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 if (($n + -1 | 0) >>> 0 > 2147483646) if (!$n) {
  $$01 = $b;
  $$02 = 1;
 } else {
  HEAP32[(___errno_location() | 0) >> 2] = 75;
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $$01 = $s;
  $$02 = $n;
 }
 $5 = -2 - $$01 | 0;
 $$$02 = $$02 >>> 0 > $5 >>> 0 ? $5 : $$02;
 HEAP32[$f + 48 >> 2] = $$$02;
 $8 = $f + 20 | 0;
 HEAP32[$8 >> 2] = $$01;
 HEAP32[$f + 44 >> 2] = $$01;
 $10 = $$01 + $$$02 | 0;
 $11 = $f + 16 | 0;
 HEAP32[$11 >> 2] = $10;
 HEAP32[$f + 28 >> 2] = $10;
 $13 = _MUSL_vfprintf($f, $fmt, $ap) | 0;
 if (!$$$02) {
  $$0 = $13;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $15 = HEAP32[$8 >> 2] | 0;
 HEAP8[$15 + ((($15 | 0) == (HEAP32[$11 >> 2] | 0)) << 31 >> 31) >> 0] = 0;
 $$0 = $13;
 STACKTOP = sp;
 return $$0 | 0;
}

function _getdetails($h, $totalsize, $fmt, $psize, $ntoalign) {
 $h = $h | 0;
 $totalsize = $totalsize | 0;
 $fmt = $fmt | 0;
 $psize = $psize | 0;
 $ntoalign = $ntoalign | 0;
 var $0 = 0, $1 = 0, $11 = 0, $15 = 0, $17 = 0, $18 = 0, $25 = 0, $7 = 0, $8 = 0, $align = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $align = sp;
 $0 = _getoption($h, $fmt, $psize) | 0;
 $1 = HEAP32[$psize >> 2] | 0;
 HEAP32[$align >> 2] = $1;
 do if (($0 | 0) == 7) {
  if (!(HEAP8[HEAP32[$fmt >> 2] >> 0] | 0)) $25 = $1; else {
   $7 = (_getoption($h, $fmt, $align) | 0) == 3;
   $8 = HEAP32[$align >> 2] | 0;
   if ($7 | ($8 | 0) == 0) $25 = $8; else {
    $11 = $8;
    break;
   }
  }
  _luaL_argerror(HEAP32[$h >> 2] | 0, 1, 61320) | 0;
  $11 = $25;
 } else $11 = $1; while (0);
 if (($11 | 0) < 2 | ($0 | 0) == 3) {
  $storemerge = 0;
  HEAP32[$ntoalign >> 2] = $storemerge;
  STACKTOP = sp;
  return $0 | 0;
 }
 $15 = HEAP32[$h + 8 >> 2] | 0;
 if (($11 | 0) > ($15 | 0)) {
  HEAP32[$align >> 2] = $15;
  $18 = $15;
 } else $18 = $11;
 $17 = $18 + -1 | 0;
 if ($17 & $18) _luaL_argerror(HEAP32[$h >> 2] | 0, 1, 61360) | 0;
 $storemerge = $18 - ($17 & $totalsize) & $17;
 HEAP32[$ntoalign >> 2] = $storemerge;
 STACKTOP = sp;
 return $0 | 0;
}

function _stbtt__GetGlyfOffset($info, $glyph_index) {
 $info = $info | 0;
 $glyph_index = $glyph_index | 0;
 var $$0 = 0, $$pn = 0, $$sink = 0, $$sum = 0, $$sum3 = 0, $10 = 0, $12 = 0, $4 = 0, $8 = 0, $g1$0 = 0;
 if ((HEAP32[$info + 12 >> 2] | 0) <= ($glyph_index | 0)) {
  $$0 = -1;
  return $$0 | 0;
 }
 $4 = HEAP32[$info + 44 >> 2] | 0;
 if (($4 | 0) > 1) {
  $$0 = -1;
  return $$0 | 0;
 }
 $8 = HEAP32[$info + 24 >> 2] | 0;
 $10 = HEAP32[$info + 4 >> 2] | 0;
 $12 = HEAP32[$info + 16 >> 2] | 0;
 if (!$4) {
  $$sum3 = $12 + ($glyph_index << 1) | 0;
  $$pn = ((HEAPU8[$10 + $$sum3 >> 0] | 0) << 8 | (HEAPU8[$10 + ($$sum3 + 1) >> 0] | 0)) << 1;
  $$sink = ((HEAPU8[$10 + ($$sum3 + 2) >> 0] | 0) << 8 | (HEAPU8[$10 + ($$sum3 + 3) >> 0] | 0)) << 1;
 } else {
  $$sum = $12 + ($glyph_index << 2) | 0;
  $$pn = (HEAPU8[$10 + ($$sum + 1) >> 0] | 0) << 16 | (HEAPU8[$10 + $$sum >> 0] | 0) << 24 | (HEAPU8[$10 + ($$sum + 2) >> 0] | 0) << 8 | (HEAPU8[$10 + ($$sum + 3) >> 0] | 0);
  $$sink = (HEAPU8[$10 + ($$sum + 5) >> 0] | 0) << 16 | (HEAPU8[$10 + ($$sum + 4) >> 0] | 0) << 24 | (HEAPU8[$10 + ($$sum + 6) >> 0] | 0) << 8 | (HEAPU8[$10 + ($$sum + 7) >> 0] | 0);
 }
 $g1$0 = $$pn + $8 | 0;
 $$0 = ($g1$0 | 0) == ($$sink + $8 | 0) ? -1 : $g1$0;
 return $$0 | 0;
}

function _png_read_filter_row_avg($row_info, $row, $prev_row) {
 $row_info = $row_info | 0;
 $row = $row | 0;
 $prev_row = $prev_row | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $i$06 = 0, $i$13 = 0, $pp$0$lcssa = 0, $pp$04 = 0, $pp$11 = 0, $rp$0$lcssa = 0, $rp$05 = 0, $rp$12 = 0, $scevgep = 0;
 $4 = ((HEAPU8[$row_info + 11 >> 0] | 0) + 7 | 0) >>> 3;
 $6 = HEAP32[$row_info + 4 >> 2] | 0;
 if (!$4) {
  $pp$0$lcssa = $prev_row;
  $rp$0$lcssa = $row;
 } else {
  $scevgep = $row + $4 | 0;
  $i$06 = 0;
  $pp$04 = $prev_row;
  $rp$05 = $row;
  while (1) {
   HEAP8[$rp$05 >> 0] = ((HEAPU8[$pp$04 >> 0] | 0) >>> 1) + (HEAPU8[$rp$05 >> 0] | 0);
   $i$06 = $i$06 + 1 | 0;
   if ($i$06 >>> 0 >= $4 >>> 0) break; else {
    $pp$04 = $pp$04 + 1 | 0;
    $rp$05 = $rp$05 + 1 | 0;
   }
  }
  $pp$0$lcssa = $prev_row + $4 | 0;
  $rp$0$lcssa = $scevgep;
 }
 if (($6 | 0) == ($4 | 0)) return;
 $9 = 0 - $4 | 0;
 $10 = $6 - $4 | 0;
 $i$13 = 0;
 $pp$11 = $pp$0$lcssa;
 $rp$12 = $rp$0$lcssa;
 while (1) {
  HEAP8[$rp$12 >> 0] = (((HEAPU8[$rp$12 + $9 >> 0] | 0) + (HEAPU8[$pp$11 >> 0] | 0) | 0) >>> 1) + (HEAPU8[$rp$12 >> 0] | 0);
  $i$13 = $i$13 + 1 | 0;
  if (($i$13 | 0) == ($10 | 0)) break; else {
   $pp$11 = $pp$11 + 1 | 0;
   $rp$12 = $rp$12 + 1 | 0;
  }
 }
 return;
}

function _readdigits($rn, $hex) {
 $rn = $rn | 0;
 $hex = $hex | 0;
 var $1 = 0, $16 = 0, $2 = 0, $20 = 0, $4 = 0, $7 = 0, $count$0 = 0, $count$0$lcssa2 = 0, $count$0$us = 0, $count$03 = 0;
 $1 = $rn + 4 | 0;
 $2 = $rn + 8 | 0;
 L1 : do if (!$hex) {
  $count$0$us = 0;
  while (1) {
   if (((HEAP32[$1 >> 2] | 0) + -48 | 0) >>> 0 >= 10) {
    $count$03 = $count$0$us;
    break;
   }
   $4 = HEAP32[$2 >> 2] | 0;
   if (($4 | 0) > 199) {
    $count$0$lcssa2 = $count$0$us;
    break L1;
   }
   $7 = HEAP32[$1 >> 2] & 255;
   HEAP32[$2 >> 2] = $4 + 1;
   HEAP8[$rn + $4 + 12 >> 0] = $7;
   HEAP32[$1 >> 2] = _getc(HEAP32[$rn >> 2] | 0) | 0;
   $count$0$us = $count$0$us + 1 | 0;
  }
  return $count$03 | 0;
 } else {
  $count$0 = 0;
  while (1) {
   if (!(_isxdigit(HEAP32[$1 >> 2] | 0) | 0)) {
    $count$03 = $count$0;
    break;
   }
   $16 = HEAP32[$2 >> 2] | 0;
   if (($16 | 0) > 199) {
    $count$0$lcssa2 = $count$0;
    break L1;
   }
   $20 = HEAP32[$1 >> 2] & 255;
   HEAP32[$2 >> 2] = $16 + 1;
   HEAP8[$rn + $16 + 12 >> 0] = $20;
   HEAP32[$1 >> 2] = _getc(HEAP32[$rn >> 2] | 0) | 0;
   $count$0 = $count$0 + 1 | 0;
  }
  return $count$03 | 0;
 } while (0);
 HEAP8[$rn + 12 >> 0] = 0;
 $count$03 = $count$0$lcssa2;
 return $count$03 | 0;
}

function _recfield($ls, $cc) {
 $ls = $ls | 0;
 $cc = $cc | 0;
 var $0 = 0, $1 = 0, $16 = 0, $2 = 0, $21 = 0, $25 = 0, $3 = 0, $4 = 0, $8 = 0, $9 = 0, $key = 0, $val = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $key = sp + 16 | 0;
 $val = sp;
 $0 = $ls + 28 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $1 + 44 | 0;
 $3 = HEAP8[$2 >> 0] | 0;
 $4 = $ls + 12 | 0;
 do if ((HEAP32[$4 >> 2] | 0) == 292) {
  $8 = HEAP32[$ls + 16 >> 2] | 0;
  _luaX_next($ls);
  $9 = _luaK_stringK(HEAP32[$0 >> 2] | 0, $8) | 0;
  HEAP32[$key + 8 >> 2] = -1;
  HEAP32[$key + 12 >> 2] = -1;
  HEAP32[$key >> 2] = 4;
  HEAP32[$key + 4 >> 2] = $9;
 } else {
  _luaX_next($ls);
  _subexpr($ls, $key, 0) | 0;
  _luaK_exp2val(HEAP32[$0 >> 2] | 0, $key);
  if ((HEAP32[$4 >> 2] | 0) == 93) {
   _luaX_next($ls);
   break;
  } else _error_expected($ls, 93);
 } while (0);
 $16 = $cc + 20 | 0;
 HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) + 1;
 if ((HEAP32[$4 >> 2] | 0) == 61) {
  _luaX_next($ls);
  $21 = _luaK_exp2RK($1, $key) | 0;
  _subexpr($ls, $val, 0) | 0;
  $25 = HEAP32[(HEAP32[$cc + 16 >> 2] | 0) + 4 >> 2] | 0;
  _luaK_codeABC($1, 10, $25, $21, _luaK_exp2RK($1, $val) | 0) | 0;
  HEAP8[$2 >> 0] = $3;
  STACKTOP = sp;
  return;
 } else _error_expected($ls, 61);
}

function _audio_init_if_needed() {
 var $2 = 0, $4 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 do if (!(HEAP8[11016] | 0)) {
  $2 = _alcOpenDevice(0) | 0;
  HEAP32[2848] = $2;
  if (!$2) {
   _log_internal(0, 11520, 11528, $vararg_buffer);
   break;
  }
  $4 = _alcCreateContext($2 | 0, 0) | 0;
  HEAP32[2846] = $4;
  if (!$4) {
   _log_internal(0, 11520, 11552, $vararg_buffer1);
   break;
  }
  if (!((_alcMakeContextCurrent($4 | 0) | 0) << 24 >> 24)) {
   _log_internal(0, 11520, 11576, $vararg_buffer3);
   break;
  } else {
   _alGenSources(1, 11024);
   _alGenSources(1, 11044);
   _alGenSources(1, 11064);
   _alGenSources(1, 11084);
   _alGenSources(1, 11104);
   _alGenSources(1, 11124);
   _alGenSources(1, 11144);
   _alGenSources(1, 11164);
   _alGenSources(1, 11184);
   _alGenSources(1, 11204);
   _alGenSources(1, 11224);
   _alGenSources(1, 11244);
   _alGenSources(1, 11264);
   _alGenSources(1, 11284);
   _alGenSources(1, 11304);
   _alGenSources(1, 11324);
   HEAP8[11016] = 1;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return (HEAP8[11016] | 0) != 0 | 0;
}

function __ZNK7b2Mat337Solve33ERK6b2Vec3($agg$result, $this, $b) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $b = $b | 0;
 var $1 = 0.0, $10 = 0.0, $12 = 0.0, $15 = 0.0, $17 = 0.0, $20 = 0.0, $21 = 0.0, $24 = 0.0, $28 = 0.0, $3 = 0.0, $30 = 0.0, $33 = 0.0, $36 = 0.0, $40 = 0.0, $6 = 0.0, $8 = 0.0, $det$0 = 0.0;
 $1 = +HEAPF32[$this + 16 >> 2];
 $3 = +HEAPF32[$this + 32 >> 2];
 $6 = +HEAPF32[$this + 20 >> 2];
 $8 = +HEAPF32[$this + 28 >> 2];
 $10 = $1 * $3 - $6 * $8;
 $12 = +HEAPF32[$this + 24 >> 2];
 $15 = +HEAPF32[$this + 12 >> 2];
 $17 = $6 * $12 - $3 * $15;
 $20 = $8 * $15 - $1 * $12;
 $21 = +HEAPF32[$this >> 2];
 $24 = +HEAPF32[$this + 4 >> 2];
 $28 = +HEAPF32[$this + 8 >> 2];
 $30 = $10 * $21 + $24 * $17 + $20 * $28;
 if ($30 != 0.0) $det$0 = 1.0 / $30; else $det$0 = $30;
 $33 = +HEAPF32[$b >> 2];
 $36 = +HEAPF32[$b + 4 >> 2];
 $40 = +HEAPF32[$b + 8 >> 2];
 HEAPF32[$agg$result >> 2] = $det$0 * ($10 * $33 + $36 * $17 + $20 * $40);
 HEAPF32[$agg$result + 4 >> 2] = $det$0 * (($36 * $3 - $40 * $8) * $21 + $24 * ($40 * $12 - $3 * $33) + ($8 * $33 - $36 * $12) * $28);
 HEAPF32[$agg$result + 8 >> 2] = $det$0 * (($1 * $40 - $6 * $36) * $21 + $24 * ($6 * $33 - $40 * $15) + ($36 * $15 - $1 * $33) * $28);
 return;
}

function _png_handle_sRGB($png_ptr, $info_ptr, $length) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 $length = $length | 0;
 var $1 = 0, $11 = 0, $13 = 0, $intent = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $intent = sp;
 $1 = HEAP32[$png_ptr + 208 >> 2] | 0;
 if (!($1 & 1)) _png_chunk_error($png_ptr, 75496);
 if ($1 & 6) {
  _png_crc_finish($png_ptr, $length) | 0;
  _png_chunk_benign_error($png_ptr, 75472);
  STACKTOP = sp;
  return;
 }
 if (($length | 0) != 1) {
  _png_crc_finish($png_ptr, $length) | 0;
  _png_chunk_benign_error($png_ptr, 75488);
  STACKTOP = sp;
  return;
 }
 if ($png_ptr) {
  _png_read_data($png_ptr, $intent, 1);
  _png_calculate_crc($png_ptr, $intent, 1);
 }
 if (_png_crc_finish($png_ptr, 0) | 0) {
  STACKTOP = sp;
  return;
 }
 $11 = $png_ptr + 898 | 0;
 $13 = HEAPU16[$11 >> 1] | 0;
 if ($13 & 32768) {
  STACKTOP = sp;
  return;
 }
 if (!($13 & 4)) {
  _png_colorspace_set_sRGB($png_ptr, $png_ptr + 824 | 0, HEAPU8[$intent >> 0] | 0) | 0;
  _png_colorspace_sync($png_ptr, $info_ptr);
  STACKTOP = sp;
  return;
 } else {
  HEAP16[$11 >> 1] = $13 | 32768;
  _png_colorspace_sync($png_ptr, $info_ptr);
  _png_chunk_benign_error($png_ptr, 75648);
  STACKTOP = sp;
  return;
 }
}

function __ZN8b2IslandC2EiiiP16b2StackAllocatorP17b2ContactListener($this, $bodyCapacity, $contactCapacity, $jointCapacity, $allocator, $listener) {
 $this = $this | 0;
 $bodyCapacity = $bodyCapacity | 0;
 $contactCapacity = $contactCapacity | 0;
 $jointCapacity = $jointCapacity | 0;
 $allocator = $allocator | 0;
 $listener = $listener | 0;
 var $0 = 0;
 $0 = $this + 40 | 0;
 HEAP32[$0 >> 2] = $bodyCapacity;
 HEAP32[$this + 44 >> 2] = $contactCapacity;
 HEAP32[$this + 48 >> 2] = $jointCapacity;
 HEAP32[$this + 28 >> 2] = 0;
 HEAP32[$this + 36 >> 2] = 0;
 HEAP32[$this + 32 >> 2] = 0;
 HEAP32[$this >> 2] = $allocator;
 HEAP32[$this + 4 >> 2] = $listener;
 HEAP32[$this + 8 >> 2] = __ZN16b2StackAllocator8AllocateEi($allocator, $bodyCapacity << 2) | 0;
 HEAP32[$this + 12 >> 2] = __ZN16b2StackAllocator8AllocateEi(HEAP32[$this >> 2] | 0, $contactCapacity << 2) | 0;
 HEAP32[$this + 16 >> 2] = __ZN16b2StackAllocator8AllocateEi(HEAP32[$this >> 2] | 0, $jointCapacity << 2) | 0;
 HEAP32[$this + 24 >> 2] = __ZN16b2StackAllocator8AllocateEi(HEAP32[$this >> 2] | 0, (HEAP32[$0 >> 2] | 0) * 12 | 0) | 0;
 HEAP32[$this + 20 >> 2] = __ZN16b2StackAllocator8AllocateEi(HEAP32[$this >> 2] | 0, (HEAP32[$0 >> 2] | 0) * 12 | 0) | 0;
 return;
}

function __ZN6b2Body13CreateFixtureEPK12b2FixtureDef($this, $def) {
 $this = $this | 0;
 $def = $def | 0;
 var $0 = 0, $1 = 0, $16 = 0, $19 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $6 = 0, $8 = 0;
 $0 = $this + 88 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (HEAP32[$1 + 102868 >> 2] & 2) ___assert_fail(87280, 87e3, 168, 87312);
 $6 = __ZN16b2BlockAllocator8AllocateEi($1, 44) | 0;
 if (!$6) $8 = 0; else {
  __ZN9b2FixtureC2Ev($6);
  $8 = $6;
 }
 __ZN9b2Fixture6CreateEP16b2BlockAllocatorP6b2BodyPK12b2FixtureDef($8, $1, $this, $def);
 if (HEAP16[$this + 4 >> 1] & 32) __ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform($8, (HEAP32[$0 >> 2] | 0) + 102872 | 0, $this + 12 | 0);
 $16 = $this + 100 | 0;
 HEAP32[$8 + 4 >> 2] = HEAP32[$16 >> 2];
 HEAP32[$16 >> 2] = $8;
 $19 = $this + 104 | 0;
 HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1;
 HEAP32[$8 + 8 >> 2] = $this;
 if (!(+HEAPF32[$8 >> 2] > 0.0)) {
  $25 = HEAP32[$0 >> 2] | 0;
  $26 = $25 + 102868 | 0;
  $27 = HEAP32[$26 >> 2] | 0;
  $28 = $27 | 1;
  HEAP32[$26 >> 2] = $28;
  return $8 | 0;
 }
 __ZN6b2Body13ResetMassDataEv($this);
 $25 = HEAP32[$0 >> 2] | 0;
 $26 = $25 + 102868 | 0;
 $27 = HEAP32[$26 >> 2] | 0;
 $28 = $27 | 1;
 HEAP32[$26 >> 2] = $28;
 return $8 | 0;
}

function _sound_new($buffer, $length, $samplesrate, $bits_per_sample, $num_channels) {
 $buffer = $buffer | 0;
 $length = $length | 0;
 $samplesrate = $samplesrate | 0;
 $bits_per_sample = $bits_per_sample | 0;
 $num_channels = $num_channels | 0;
 var $0 = 0, $4 = 0, $6 = 0, $7 = 0, $format$0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $0 = _xcalloc(1, 16) | 0;
 _alGenBuffers(1, $0 | 0);
 if (($bits_per_sample | 0) == 16) if (($num_channels | 0) == 1) $format$0 = 4353; else $format$0 = ($num_channels | 0) == 2 ? 4355 : 4352; else if (($bits_per_sample | 0) == 8) $format$0 = ($num_channels | 0) == 2 ? 4354 : 4352; else $format$0 = 4352;
 _alBufferData(HEAP32[$0 >> 2] | 0, $format$0 | 0, $buffer | 0, $length | 0, $samplesrate | 0);
 $4 = _alGetError() | 0;
 if (!$4) {
  STACKTOP = sp;
  return $0 | 0;
 } else $6 = $4;
 do {
  $7 = _alGetString($6 | 0) | 0;
  HEAP32[$vararg_buffer >> 2] = 11952;
  HEAP32[$vararg_buffer + 4 >> 2] = 55;
  HEAP32[$vararg_buffer + 8 >> 2] = 12080;
  HEAP32[$vararg_buffer + 12 >> 2] = $7;
  _log_internal(3, 12e3, 12024, $vararg_buffer);
  $6 = _alGetError() | 0;
 } while (($6 | 0) != 0);
 STACKTOP = sp;
 return $0 | 0;
}

function _png_colorspace_set_gamma($png_ptr, $colorspace, $gAMA) {
 $png_ptr = $png_ptr | 0;
 $colorspace = $colorspace | 0;
 $gAMA = $gAMA | 0;
 var $$pre4 = 0, $11 = 0, $19 = 0.0, $30 = 0, $7 = 0, $errmsg$0 = 0;
 if (($gAMA + -16 | 0) >>> 0 > 624999984) {
  $30 = HEAP16[$colorspace + 74 >> 1] | 0;
  $errmsg$0 = 72032;
 } else {
  $$pre4 = HEAP16[$colorspace + 74 >> 1] | 0;
  if (($$pre4 & 8) == 0 ? 1 : (HEAP32[$png_ptr + 208 >> 2] & 32768 | 0) == 0) {
   $7 = $colorspace + 74 | 0;
   if ($$pre4 << 16 >> 16 < 0) return;
   do if ($$pre4 & 1) {
    $11 = HEAP32[$colorspace >> 2] | 0;
    if (!(($gAMA | 0) == 0 | ($11 | 0) == 0)) {
     $19 = +Math_floor(+(+($11 | 0) * 1.0e5 / +($gAMA | 0) + .5));
     if ($19 <= 2147483647.0 & $19 >= -2147483648.0) if ((~~$19 + -95e3 | 0) >>> 0 <= 1e4) break;
    }
    if (!($$pre4 & 32)) {
     _png_chunk_report($png_ptr, 74120, 0);
     break;
    }
    _png_chunk_report($png_ptr, 74088, 2);
    return;
   } while (0);
   HEAP32[$colorspace >> 2] = $gAMA;
   HEAP16[$7 >> 1] = $$pre4 & 65535 | 9;
   return;
  } else {
   $30 = $$pre4;
   $errmsg$0 = 75512;
  }
 }
 HEAP16[$colorspace + 74 >> 1] = $30 & 65535 | 32768;
 _png_chunk_report($png_ptr, $errmsg$0, 1);
 return;
}

function _audio_try_free_sound($sound) {
 $sound = $sound | 0;
 var $0 = 0, $12 = 0, $13 = 0, $8 = 0, $can_free$0$off04 = 0, $can_free$1$off0 = 0, $i$03 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $can_free$0$off04 = 1;
 $i$03 = 0;
 while (1) {
  if ((HEAP32[11032 + ($i$03 * 20 | 0) >> 2] | 0) == ($sound | 0)) if (!(HEAP8[11028 + ($i$03 * 20 | 0) >> 0] | 0)) {
   $8 = 11024 + ($i$03 * 20 | 0) | 0;
   _alSourceStop(HEAP32[$8 >> 2] | 0);
   _alSourcei(HEAP32[$8 >> 2] | 0, 4105, 0);
   $can_free$1$off0 = $can_free$0$off04;
  } else $can_free$1$off0 = 0; else $can_free$1$off0 = $can_free$0$off04;
  $i$03 = $i$03 + 1 | 0;
  if (($i$03 | 0) == 16) break; else $can_free$0$off04 = $can_free$1$off0;
 }
 $0 = _alGetError() | 0;
 if (!$0) {
  STACKTOP = sp;
  return $can_free$1$off0 | 0;
 } else $12 = $0;
 do {
  $13 = _alGetString($12 | 0) | 0;
  HEAP32[$vararg_buffer >> 2] = 11344;
  HEAP32[$vararg_buffer + 4 >> 2] = 184;
  HEAP32[$vararg_buffer + 8 >> 2] = 11496;
  HEAP32[$vararg_buffer + 12 >> 2] = $13;
  _log_internal(3, 11520, 12024, $vararg_buffer);
  $12 = _alGetError() | 0;
 } while (($12 | 0) != 0);
 STACKTOP = sp;
 return $can_free$1$off0 | 0;
}

function _lua_cjson_init() {
 var $i$03 = 0;
 HEAP32[17291] = 0;
 HEAP32[17292] = 2;
 HEAP32[17293] = 10;
 HEAP32[17294] = 1e3;
 HEAP32[17299] = 1e3;
 HEAP32[17295] = 0;
 HEAP32[17298] = 1;
 HEAP32[17297] = 1;
 HEAP32[17296] = 6;
 _strbuf_init(69136 | 0, 0);
 $i$03 = 0;
 do {
  HEAP32[67856 + ($i$03 << 2) >> 2] = 12;
  $i$03 = $i$03 + 1 | 0;
 } while (($i$03 | 0) != 256);
 HEAP32[17087] = 0;
 HEAP32[17089] = 1;
 HEAP32[17055] = 2;
 HEAP32[17057] = 3;
 HEAP32[17008] = 9;
 HEAP32[17022] = 8;
 HEAP32[16964] = 10;
 HEAP32[16996] = 11;
 HEAP32[16973] = 11;
 HEAP32[16974] = 11;
 HEAP32[16977] = 11;
 HEAP32[17066] = 13;
 HEAP32[17069] = 13;
 HEAP32[17037] = 13;
 HEAP32[17074] = 13;
 HEAP32[17042] = 13;
 HEAP32[17080] = 13;
 HEAP32[16998] = 13;
 HEAP32[17007] = 13;
 HEAP32[17009] = 13;
 HEAP32[17012] = 13;
 HEAP32[17013] = 13;
 HEAP32[17014] = 13;
 HEAP32[17015] = 13;
 HEAP32[17016] = 13;
 HEAP32[17017] = 13;
 HEAP32[17018] = 13;
 HEAP32[17019] = 13;
 HEAP32[17020] = 13;
 HEAP32[17021] = 13;
 _memset(68880 | 0, 0, 256) | 0;
 HEAP8[68914] = 34;
 HEAP8[68972] = 92;
 HEAP8[68927] = 47;
 HEAP8[68978] = 8;
 HEAP8[68996] = 9;
 HEAP8[68990] = 10;
 HEAP8[68982] = 12;
 HEAP8[68994] = 13;
 HEAP8[68997] = 117;
 return;
}

function _png_read_chunk_header($png_ptr) {
 $png_ptr = $png_ptr | 0;
 var $$07$i = 0, $0 = 0, $17 = 0, $19 = 0, $37 = 0, $39 = 0, $buf = 0, $i$06$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $buf = sp;
 $0 = $png_ptr + 800 | 0;
 HEAP32[$0 >> 2] = 33;
 _png_read_data($png_ptr, $buf, 8);
 $17 = (HEAPU8[$buf + 1 >> 0] | 0) << 16 | (HEAPU8[$buf >> 0] | 0) << 24 | (HEAPU8[$buf + 2 >> 0] | 0) << 8 | (HEAPU8[$buf + 3 >> 0] | 0);
 if (($17 | 0) < 0) _png_error($png_ptr, 75360);
 $19 = $buf + 4 | 0;
 $37 = $png_ptr + 376 | 0;
 HEAP32[$37 >> 2] = (HEAPU8[$buf + 5 >> 0] | 0) << 16 | (HEAPU8[$19 >> 0] | 0) << 24 | (HEAPU8[$buf + 6 >> 0] | 0) << 8 | (HEAPU8[$buf + 7 >> 0] | 0);
 _png_reset_crc($png_ptr);
 _png_calculate_crc($png_ptr, $19, 4);
 $$07$i = HEAP32[$37 >> 2] | 0;
 $i$06$i = 1;
 while (1) {
  $39 = $$07$i & 255;
  if (($39 + -65 | 0) >>> 0 > 57 | ($39 + -91 | 0) >>> 0 < 6) {
   label = 5;
   break;
  }
  $i$06$i = $i$06$i + 1 | 0;
  if (($i$06$i | 0) >= 5) {
   label = 7;
   break;
  } else $$07$i = $$07$i >>> 8;
 }
 if ((label | 0) == 5) _png_chunk_error($png_ptr, 76488); else if ((label | 0) == 7) {
  HEAP32[$0 >> 2] = 65;
  STACKTOP = sp;
  return $17 | 0;
 }
 return 0;
}

function _stbtt_GetBakedQuad($chardata, $char_index, $xpos, $ypos, $q, $factor) {
 $chardata = $chardata | 0;
 $char_index = $char_index | 0;
 $xpos = $xpos | 0;
 $ypos = $ypos | 0;
 $q = $q | 0;
 $factor = +$factor;
 var $12 = 0, $15 = 0, $23 = 0, $26 = 0, $4 = 0.0, $9 = 0.0;
 $4 = +HEAPF32[$xpos >> 2] + +HEAPF32[$chardata + ($char_index * 20 | 0) + 8 >> 2] * $factor;
 $9 = +HEAPF32[$ypos >> 2] + +HEAPF32[$chardata + ($char_index * 20 | 0) + 12 >> 2] * $factor;
 HEAPF32[$q >> 2] = $4;
 HEAPF32[$q + 4 >> 2] = $9;
 $12 = HEAP16[$chardata + ($char_index * 20 | 0) + 4 >> 1] | 0;
 $15 = HEAP16[$chardata + ($char_index * 20 | 0) >> 1] | 0;
 HEAPF32[$q + 16 >> 2] = $4 + +(($12 & 65535) - ($15 & 65535) | 0) * $factor;
 $23 = HEAP16[$chardata + ($char_index * 20 | 0) + 6 >> 1] | 0;
 $26 = HEAP16[$chardata + ($char_index * 20 | 0) + 2 >> 1] | 0;
 HEAPF32[$q + 20 >> 2] = $9 + +(($23 & 65535) - ($26 & 65535) | 0) * $factor;
 HEAPF32[$q + 8 >> 2] = +($15 & 65535);
 HEAPF32[$q + 12 >> 2] = +($26 & 65535);
 HEAPF32[$q + 24 >> 2] = +($12 & 65535);
 HEAPF32[$q + 28 >> 2] = +($23 & 65535);
 HEAPF32[$xpos >> 2] = +HEAPF32[$xpos >> 2] + +HEAPF32[$chardata + ($char_index * 20 | 0) + 16 >> 2] * $factor;
 return;
}

function _luaopen_package($L) {
 $L = $L | 0;
 _lua_createtable($L, 0, 0);
 _lua_createtable($L, 0, 1);
 _lua_pushcclosure($L, 352, 0);
 _lua_setfield($L, -2, 63064);
 _lua_setmetatable($L, -2) | 0;
 _lua_rawsetp($L, -1001e3, 59008);
 _luaL_checkversion_($L, 503.0, 68);
 _lua_createtable($L, 0, 8);
 _luaL_setfuncs($L, 58136, 0);
 _lua_createtable($L, 4, 0);
 _lua_pushvalue($L, -2);
 _lua_pushcclosure($L, 353, 1);
 _lua_rawseti($L, -2, 1);
 _lua_pushvalue($L, -2);
 _lua_pushcclosure($L, 354, 1);
 _lua_rawseti($L, -2, 2);
 _lua_pushvalue($L, -2);
 _lua_pushcclosure($L, 355, 1);
 _lua_rawseti($L, -2, 3);
 _lua_pushvalue($L, -2);
 _lua_pushcclosure($L, 356, 1);
 _lua_rawseti($L, -2, 4);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -3, 58824);
 _lua_setfield($L, -2, 58616);
 _setpath($L, 58208, 58216, 58232, 58248);
 _setpath($L, 58400, 58408, 58424, 58440);
 _lua_pushlstring($L, 58512, 10) | 0;
 _lua_setfield($L, -2, 58528);
 _luaL_getsubtable($L, -1001e3, 58536) | 0;
 _lua_setfield($L, -2, 58544);
 _luaL_getsubtable($L, -1001e3, 58552) | 0;
 _lua_setfield($L, -2, 58568);
 _lua_rawgeti($L, -1001e3, 2) | 0;
 _lua_pushvalue($L, -2);
 _luaL_setfuncs($L, 58576, 1);
 _lua_settop($L, -2);
 return 1;
}

function _particle_update($p, $s, $dt) {
 $p = $p | 0;
 $s = $s | 0;
 $dt = +$dt;
 var $10 = 0.0, $12 = 0.0, $15 = 0.0, $16 = 0, $2 = 0, $21 = 0.0, $22 = 0, $28 = 0.0, $29 = 0, $30 = 0, $31 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $8 = 0;
 if (!$p) ___assert_fail(23248, 10344, 26, 10376);
 if (!$s) ___assert_fail(23264, 10344, 27, 10376);
 $2 = $p + 24 | 0;
 $4 = +HEAPF32[$2 >> 2] - $dt;
 HEAPF32[$2 >> 2] = $4;
 $8 = $p + 12 | 0;
 $10 = +HEAPF32[$8 >> 2] + +HEAPF32[$p + 16 >> 2] * $dt;
 HEAPF32[$8 >> 2] = $10;
 $12 = +HEAPF32[$p + 20 >> 2];
 $15 = $10 * +Math_cos(+$12) * $dt;
 $16 = $p + 4 | 0;
 HEAPF32[$16 >> 2] = +HEAPF32[$16 >> 2] + $15;
 $21 = $10 * +Math_sin(+$12) * $dt;
 $22 = $p + 8 | 0;
 HEAPF32[$22 >> 2] = +HEAPF32[$22 >> 2] + $21;
 $28 = 1.0 - $4 / +HEAPF32[$p + 28 >> 2];
 $29 = $p + 32 | 0;
 $30 = HEAP32[$29 >> 2] | 0;
 $31 = $30 + 1 | 0;
 if ($28 > +HEAPF32[$s + ($31 * 12 | 0) + 8 >> 2]) if (($30 | 0) < (HEAP32[$s + 4 >> 2] | 0)) HEAP32[$29 >> 2] = $31;
 $38 = $p + 40 | 0;
 $39 = HEAP32[$38 >> 2] | 0;
 $40 = $39 + 1 | 0;
 if (!($28 > +HEAPF32[$s + ($40 * 12 | 0) + 204 >> 2])) return;
 if (($39 | 0) >= (HEAP32[$s + 200 >> 2] | 0)) return;
 HEAP32[$38 >> 2] = $40;
 return;
}

function _luaK_setreturns($fs, $e, $nresults) {
 $fs = $fs | 0;
 $e = $e | 0;
 $nresults = $nresults | 0;
 var $0 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $25 = 0, $28 = 0, $33 = 0, $35 = 0, $36 = 0, $45 = 0, $6 = 0;
 $0 = HEAP32[$e >> 2] | 0;
 if (($0 | 0) == 14) {
  $13 = $e + 4 | 0;
  $15 = HEAP32[$fs >> 2] | 0;
  $17 = HEAP32[$15 + 48 >> 2] | 0;
  $18 = $17 + (HEAP32[$13 >> 2] << 2) | 0;
  HEAP32[$18 >> 2] = HEAP32[$18 >> 2] & 8388607 | ($nresults << 23) + 8388608;
  $25 = $17 + (HEAP32[$13 >> 2] << 2) | 0;
  $28 = $fs + 44 | 0;
  HEAP32[$25 >> 2] = (HEAPU8[$28 >> 0] | 0) << 6 | HEAP32[$25 >> 2] & -16321;
  $33 = HEAP8[$28 >> 0] | 0;
  $35 = ($33 & 255) + 1 | 0;
  $36 = $15 + 8 | 0;
  do if ($35 >>> 0 > (HEAPU8[$36 >> 0] | 0) >>> 0) if ($35 >>> 0 > 249) _luaX_syntaxerror(HEAP32[$fs + 8 >> 2] | 0, 65488); else {
   HEAP8[$36 >> 0] = $35;
   $45 = HEAP8[$28 >> 0] | 0;
   break;
  } else $45 = $33; while (0);
  HEAP8[$28 >> 0] = ($45 & 255) + 1;
  return;
 } else if (($0 | 0) == 13) {
  $6 = (HEAP32[(HEAP32[$fs >> 2] | 0) + 48 >> 2] | 0) + (HEAP32[$e + 4 >> 2] << 2) | 0;
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] & -8372225 | ($nresults << 14) + 16384 & 8372224;
  return;
 } else return;
}

function _luaH_setint($L, $t, $key, $value) {
 $L = $L | 0;
 $t = $t | 0;
 $key = $key | 0;
 $value = $value | 0;
 var $$0$i = 0, $0 = 0, $23 = 0, $29 = 0, $34 = 0, $35 = 0, $cell$0 = 0, $k = 0, $n$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $k = sp;
 $0 = $key + -1 | 0;
 L1 : do if ($0 >>> 0 < (HEAP32[$t + 8 >> 2] | 0) >>> 0) {
  $$0$i = (HEAP32[$t + 12 >> 2] | 0) + ($0 << 3) | 0;
  label = 9;
 } else {
  $n$0$i = (HEAP32[$t + 16 >> 2] | 0) + (((1 << (HEAPU8[$t + 7 >> 0] | 0)) + -1 & $key) * 20 | 0) | 0;
  while (1) {
   if ((HEAP32[$n$0$i + 12 >> 2] | 0) == 19) if ((HEAP32[$n$0$i + 8 >> 2] | 0) == ($key | 0)) break;
   $23 = HEAP32[$n$0$i + 16 >> 2] | 0;
   if (!$23) {
    label = 10;
    break L1;
   }
   $n$0$i = $n$0$i + ($23 * 20 | 0) | 0;
  }
  $$0$i = $n$0$i;
  label = 9;
 } while (0);
 if ((label | 0) == 9) if (($$0$i | 0) == 59168) label = 10; else $cell$0 = $$0$i;
 if ((label | 0) == 10) {
  HEAP32[$k >> 2] = $key;
  HEAP32[$k + 4 >> 2] = 19;
  $cell$0 = _luaH_newkey($L, $t, $k) | 0;
 }
 $29 = $value;
 $34 = HEAP32[$29 + 4 >> 2] | 0;
 $35 = $cell$0;
 HEAP32[$35 >> 2] = HEAP32[$29 >> 2];
 HEAP32[$35 + 4 >> 2] = $34;
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this, $info, $dst_ptr, $current_ptr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 var $16 = 0, $17 = 0, $22 = 0, $25 = 0, $5 = 0, $6 = 0;
 HEAP8[$info + 53 >> 0] = 1;
 do if ((HEAP32[$info + 4 >> 2] | 0) == ($current_ptr | 0)) {
  HEAP8[$info + 52 >> 0] = 1;
  $5 = $info + 16 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  if (!$6) {
   HEAP32[$5 >> 2] = $dst_ptr;
   HEAP32[$info + 24 >> 2] = $path_below;
   HEAP32[$info + 36 >> 2] = 1;
   if (!(($path_below | 0) == 1 ? (HEAP32[$info + 48 >> 2] | 0) == 1 : 0)) break;
   HEAP8[$info + 54 >> 0] = 1;
   break;
  }
  if (($6 | 0) != ($dst_ptr | 0)) {
   $25 = $info + 36 | 0;
   HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] | 0) + 1;
   HEAP8[$info + 54 >> 0] = 1;
   break;
  }
  $16 = $info + 24 | 0;
  $17 = HEAP32[$16 >> 2] | 0;
  if (($17 | 0) == 2) {
   HEAP32[$16 >> 2] = $path_below;
   $22 = $path_below;
  } else $22 = $17;
  if (($22 | 0) == 1 ? (HEAP32[$info + 48 >> 2] | 0) == 1 : 0) HEAP8[$info + 54 >> 0] = 1;
 } while (0);
 return;
}

function _png_user_version_check($png_ptr, $user_png_ver) {
 $png_ptr = $png_ptr | 0;
 $user_png_ver = $user_png_ver | 0;
 var $$0 = 0, $1 = 0, $10 = 0, $17 = 0, $19 = 0, $3 = 0, $4 = 0, $found_dots$0 = 0, $i$0 = 0, $m = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $m = sp;
 $1 = $png_ptr + 212 | 0;
 if (!$user_png_ver) {
  $17 = HEAP32[$1 >> 2] | 131072;
  HEAP32[$1 >> 2] = $17;
  $19 = $17;
 } else {
  $found_dots$0 = 0;
  $i$0 = -1;
  do {
   $i$0 = $i$0 + 1 | 0;
   $3 = $user_png_ver + $i$0 | 0;
   $4 = HEAP8[$3 >> 0] | 0;
   if ($4 << 24 >> 24 == (HEAP8[71752 + $i$0 >> 0] | 0)) $10 = $4; else {
    HEAP32[$1 >> 2] = HEAP32[$1 >> 2] | 131072;
    $10 = HEAP8[$3 >> 0] | 0;
   }
   $found_dots$0 = ($10 << 24 >> 24 == 46 & 1) + $found_dots$0 | 0;
   if (($found_dots$0 | 0) >= 2) break;
  } while (!($10 << 24 >> 24 == 0 | ($i$0 | 0) == 12));
  $19 = HEAP32[$1 >> 2] | 0;
 }
 if (!($19 & 131072)) {
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _png_safecat($m, 128, _png_safecat($m, 128, _png_safecat($m, 128, _png_safecat($m, 128, 0, 71768) | 0, $user_png_ver) | 0, 71800) | 0, 71752) | 0;
 _png_warning($png_ptr, $m);
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _register_audio($L) {
 $L = $L | 0;
 _lua_pushcclosure($L, 273, 0);
 _lua_setfield($L, -2, 11600);
 _lua_pushcclosure($L, 274, 0);
 _lua_setfield($L, -2, 11616);
 _lua_pushcclosure($L, 275, 0);
 _lua_setfield($L, -2, 11640);
 _lua_pushcclosure($L, 276, 0);
 _lua_setfield($L, -2, 11656);
 _luaL_newmetatable($L, 12e3) | 0;
 _lua_pushlstring($L, 12e3, 5) | 0;
 _lua_setfield($L, -2, 13456);
 _lua_pushcclosure($L, 277, 0);
 _lua_setfield($L, -2, 11680);
 _lua_pushcclosure($L, 278, 0);
 _lua_setfield($L, -2, 63064);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 64992);
 _lua_setfield($L, -2, 11688);
 _luaL_newmetatable($L, 12304) | 0;
 _lua_pushlstring($L, 12304, 5) | 0;
 _lua_setfield($L, -2, 13456);
 _lua_pushcclosure($L, 279, 0);
 _lua_setfield($L, -2, 11680);
 _lua_pushcclosure($L, 280, 0);
 _lua_setfield($L, -2, 65056);
 _lua_pushcclosure($L, 281, 0);
 _lua_setfield($L, -2, 22872);
 _lua_pushcclosure($L, 282, 0);
 _lua_setfield($L, -2, 11696);
 _lua_pushcclosure($L, 283, 0);
 _lua_setfield($L, -2, 11712);
 _lua_pushcclosure($L, 284, 0);
 _lua_setfield($L, -2, 63064);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 64992);
 _lua_setfield($L, -2, 11728);
 return;
}

function _lua_rawlen($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0 = 0, $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $31 = 0, $4 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 3) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 59168;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 3) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 4 >> 2] | 0) == 22) $$0$i = 59168; else {
   $21 = HEAP32[$17 >> 2] | 0;
   if (($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0)) $$0$i = 59168; else $$0$i = $21 + 16 + ($16 + -1 << 3) | 0;
  }
 } while (0);
 $31 = HEAP32[$$0$i + 4 >> 2] & 15;
 if (($31 | 0) == 7) {
  $$0 = HEAP32[(HEAP32[$$0$i >> 2] | 0) + 12 >> 2] | 0;
  return $$0 | 0;
 } else if (($31 | 0) == 4) {
  $$0 = HEAP32[(HEAP32[$$0$i >> 2] | 0) + 12 >> 2] | 0;
  return $$0 | 0;
 } else if (($31 | 0) == 5) {
  $$0 = _luaH_getn(HEAP32[$$0$i >> 2] | 0) | 0;
  return $$0 | 0;
 } else {
  $$0 = 0;
  return $$0 | 0;
 }
 return 0;
}

function __ZNK11b2EdgeShape5CloneEP16b2BlockAllocator($this, $allocator) {
 $this = $this | 0;
 $allocator = $allocator | 0;
 var $0 = 0, $13 = 0, $14 = 0, $18 = 0, $19 = 0, $4 = 0, $6 = 0, $8 = 0;
 $0 = __ZN16b2BlockAllocator8AllocateEi($allocator, 48) | 0;
 if (!$0) $6 = 0; else {
  HEAP32[$0 >> 2] = 81784;
  HEAP32[$0 + 4 >> 2] = 1;
  HEAPF32[$0 + 8 >> 2] = .009999999776482582;
  $4 = $0 + 28 | 0;
  HEAP32[$4 + 0 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$4 + 8 >> 2] = 0;
  HEAP32[$4 + 12 >> 2] = 0;
  HEAP16[$4 + 16 >> 1] = 0;
  $6 = $0;
 }
 $8 = $this + 4 | 0;
 $13 = HEAP32[$8 + 4 >> 2] | 0;
 $14 = $6 + 4 | 0;
 HEAP32[$14 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$14 + 4 >> 2] = $13;
 $18 = $6 + 12 | 0;
 $19 = $this + 12 | 0;
 HEAP32[$18 + 0 >> 2] = HEAP32[$19 + 0 >> 2];
 HEAP32[$18 + 4 >> 2] = HEAP32[$19 + 4 >> 2];
 HEAP32[$18 + 8 >> 2] = HEAP32[$19 + 8 >> 2];
 HEAP32[$18 + 12 >> 2] = HEAP32[$19 + 12 >> 2];
 HEAP32[$18 + 16 >> 2] = HEAP32[$19 + 16 >> 2];
 HEAP32[$18 + 20 >> 2] = HEAP32[$19 + 20 >> 2];
 HEAP32[$18 + 24 >> 2] = HEAP32[$19 + 24 >> 2];
 HEAP32[$18 + 28 >> 2] = HEAP32[$19 + 28 >> 2];
 HEAP16[$18 + 32 >> 1] = HEAP16[$19 + 32 >> 1] | 0;
 return $6 | 0;
}

function _push_onecapture($ms, $i, $s, $e) {
 $ms = $ms | 0;
 $i = $i | 0;
 $s = $s | 0;
 $e = $e | 0;
 var $11 = 0, $13 = 0, $20 = 0, $22 = 0, $29 = 0, $30 = 0, $5 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 if ((HEAP32[$ms + 20 >> 2] | 0) <= ($i | 0)) {
  $5 = HEAP32[$ms + 16 >> 2] | 0;
  if (!$i) {
   _lua_pushlstring($5, $s, $e - $s | 0) | 0;
   STACKTOP = sp;
   return;
  } else {
   HEAP32[$vararg_buffer >> 2] = $i + 1;
   _luaL_error($5, 61760, $vararg_buffer) | 0;
   STACKTOP = sp;
   return;
  }
 }
 $11 = HEAP32[$ms + ($i << 3) + 28 >> 2] | 0;
 if (($11 | 0) == -1) {
  $13 = $ms + 16 | 0;
  _luaL_error(HEAP32[$13 >> 2] | 0, 61792, $vararg_buffer1) | 0;
  $29 = HEAP32[$13 >> 2] | 0;
  $30 = HEAP32[$ms + ($i << 3) + 24 >> 2] | 0;
 } else {
  $20 = HEAP32[$ms + 16 >> 2] | 0;
  $22 = HEAP32[$ms + ($i << 3) + 24 >> 2] | 0;
  if (($11 | 0) == -2) {
   _lua_pushinteger($20, $22 + 1 - (HEAP32[$ms + 4 >> 2] | 0) | 0);
   STACKTOP = sp;
   return;
  } else {
   $29 = $20;
   $30 = $22;
  }
 }
 _lua_pushlstring($29, $30, $11) | 0;
 STACKTOP = sp;
 return;
}

function _png_set_tIME($png_ptr, $info_ptr, $mod_time) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 $mod_time = $mod_time | 0;
 var $12 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $8 = 0;
 if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0 | ($mod_time | 0) == 0) return;
 if (HEAP32[$png_ptr + 208 >> 2] & 512) return;
 $8 = HEAP8[$mod_time + 2 >> 0] | 0;
 if (!($8 << 24 >> 24 == 0 | ($8 & 255) > 12)) {
  $12 = HEAP8[$mod_time + 3 >> 0] | 0;
  if (!($12 << 24 >> 24 == 0 | ($12 & 255) > 31)) if ((HEAPU8[$mod_time + 4 >> 0] | 0) <= 23) if ((HEAPU8[$mod_time + 5 >> 0] | 0) <= 59) if ((HEAPU8[$mod_time + 6 >> 0] | 0) <= 60) {
   $25 = $mod_time;
   $26 = $25;
   $27 = HEAPU16[$26 >> 1] | HEAPU16[$26 + 2 >> 1] << 16;
   $29 = $25 + 4 | 0;
   $30 = HEAPU16[$29 >> 1] | HEAPU16[$29 + 2 >> 1] << 16;
   $31 = $info_ptr + 140 | 0;
   $32 = $31;
   HEAP16[$32 >> 1] = $27;
   HEAP16[$32 + 2 >> 1] = $27 >>> 16;
   $34 = $31 + 4 | 0;
   HEAP16[$34 >> 1] = $30;
   HEAP16[$34 + 2 >> 1] = $30 >>> 16;
   $35 = $info_ptr + 8 | 0;
   HEAP32[$35 >> 2] = HEAP32[$35 >> 2] | 512;
   return;
  }
 }
 _png_warning($png_ptr, 77792);
 return;
}

function _engine_init($filename, $target_fps) {
 $filename = $filename | 0;
 $target_fps = $target_fps | 0;
 var $$0 = 0, $1 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $4 = 0, $5 = 0, $7 = 0, $ts$i = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $ts$i = sp + 8 | 0;
 HEAP32[2] = 1e3 / ($target_fps >>> 0) | 0;
 HEAP8[12] = 1;
 HEAP8[13] = 0;
 _clock_gettime(1, $ts$i | 0) | 0;
 $1 = HEAP32[$ts$i >> 2] | 0;
 $4 = ___muldi3($1 | 0, (($1 | 0) < 0) << 31 >> 31 | 0, 1e6, 0) | 0;
 $5 = tempRet0;
 $7 = HEAP32[$ts$i + 4 >> 2] | 0;
 $10 = ___udivdi3($7 | 0, (($7 | 0) < 0) << 31 >> 31 | 0, 1e3, 0) | 0;
 $12 = _i64Add($4 | 0, $5 | 0, $10 | 0, tempRet0 | 0) | 0;
 HEAP32[4] = $12;
 HEAP8[20] = 1;
 HEAP8[21] = 1;
 _dlua_init($filename);
 $14 = _SDL_Init(0) | 0;
 if (($14 | 0) < 0) {
  HEAP32[$vararg_buffer >> 2] = _SDL_GetError() | 0;
  _log_internal(0, 56, 24, $vararg_buffer);
  $$0 = $14;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $17 = _display_init() | 0;
 if (($17 | 0) < 0) {
  $$0 = $17;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $19 = _event_init() | 0;
 $$0 = ($19 | 0) < 0 ? $19 : 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _png_read_image($png_ptr, $image) {
 $png_ptr = $png_ptr | 0;
 $image = $image | 0;
 var $1 = 0, $21 = 0, $5 = 0, $i$01$us = 0, $j$03$us = 0, $pass$0 = 0, $rp$02$us = 0;
 if (!$png_ptr) return;
 $1 = $png_ptr + 212 | 0;
 do if (!(HEAP32[$1 >> 2] & 64)) {
  $5 = _png_set_interlace_handling($png_ptr) | 0;
  if (!(HEAP32[$1 >> 2] & 64)) {
   _png_read_start_row($png_ptr);
   $pass$0 = $5;
   break;
  } else {
   _png_app_error($png_ptr, 74560);
   $pass$0 = $5;
   break;
  }
 } else {
  if (HEAP8[$png_ptr + 432 >> 0] | 0) if (!(HEAP32[$png_ptr + 216 >> 2] & 2)) {
   _png_warning($png_ptr, 74768);
   HEAP32[$png_ptr + 356 >> 2] = HEAP32[$png_ptr + 352 >> 2];
  }
  $pass$0 = _png_set_interlace_handling($png_ptr) | 0;
 } while (0);
 $21 = HEAP32[$png_ptr + 352 >> 2] | 0;
 if (($pass$0 | 0) < 1 | ($21 | 0) == 0) return; else $j$03$us = 0;
 do {
  $i$01$us = 0;
  $rp$02$us = $image;
  while (1) {
   _png_read_row($png_ptr, HEAP32[$rp$02$us >> 2] | 0, 0);
   $i$01$us = $i$01$us + 1 | 0;
   if (($i$01$us | 0) == ($21 | 0)) break; else $rp$02$us = $rp$02$us + 4 | 0;
  }
  $j$03$us = $j$03$us + 1 | 0;
 } while (($j$03$us | 0) != ($pass$0 | 0));
 return;
}

function _lua_setfield($L, $idx, $k) {
 $L = $L | 0;
 $idx = $idx | 0;
 $k = $k | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $29 = 0, $30 = 0, $32 = 0, $38 = 0, $4 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 3) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 59168;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 3) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 4 >> 2] | 0) == 22) $$0$i = 59168; else {
   $21 = HEAP32[$17 >> 2] | 0;
   if (($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0)) $$0$i = 59168; else $$0$i = $21 + 16 + ($16 + -1 << 3) | 0;
  }
 } while (0);
 $29 = $L + 8 | 0;
 $30 = HEAP32[$29 >> 2] | 0;
 HEAP32[$29 >> 2] = $30 + 8;
 $32 = _luaS_new($L, $k) | 0;
 HEAP32[$30 >> 2] = $32;
 HEAP32[$30 + 4 >> 2] = HEAPU8[$32 + 4 >> 0] | 0 | 64;
 $38 = HEAP32[$29 >> 2] | 0;
 _luaV_settable($L, $$0$i, $38 + -8 | 0, $38 + -16 | 0);
 HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + -16;
 return;
}

function _luaL_setfuncs($L, $l, $nup) {
 $L = $L | 0;
 $l = $l | 0;
 $nup = $nup | 0;
 var $17 = 0, $23 = 0, $6 = 0, $7 = 0, $9 = 0, $i$01$us = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 if (!(_lua_checkstack($L, $nup + 20 | 0) | 0)) {
  HEAP32[$vararg_buffer >> 2] = 55464;
  _luaL_error($L, 55304, $vararg_buffer) | 0;
 }
 if (!(HEAP32[$l >> 2] | 0)) {
  $23 = ~$nup;
  _lua_settop($L, $23);
  STACKTOP = sp;
  return;
 }
 $6 = -2 - $nup | 0;
 $7 = 0 - $nup | 0;
 if (($nup | 0) > 0) $9 = $l; else {
  $17 = $l;
  do {
   _lua_pushcclosure($L, HEAP32[$17 + 4 >> 2] | 0, $nup);
   _lua_setfield($L, $6, HEAP32[$17 >> 2] | 0);
   $17 = $17 + 8 | 0;
  } while ((HEAP32[$17 >> 2] | 0) != 0);
  $23 = ~$nup;
  _lua_settop($L, $23);
  STACKTOP = sp;
  return;
 }
 do {
  $i$01$us = 0;
  do {
   _lua_pushvalue($L, $7);
   $i$01$us = $i$01$us + 1 | 0;
  } while (($i$01$us | 0) != ($nup | 0));
  _lua_pushcclosure($L, HEAP32[$9 + 4 >> 2] | 0, $nup);
  _lua_setfield($L, $6, HEAP32[$9 >> 2] | 0);
  $9 = $9 + 8 | 0;
 } while ((HEAP32[$9 >> 2] | 0) != 0);
 $23 = ~$nup;
 _lua_settop($L, $23);
 STACKTOP = sp;
 return;
}

function _png_read_filter_row_paeth_1byte_pixel($row_info, $row, $prev_row) {
 $row_info = $row_info | 0;
 $row = $row | 0;
 $prev_row = $prev_row | 0;
 var $$07 = 0, $1 = 0, $10 = 0, $13 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $25 = 0, $4 = 0, $7 = 0, $a$06 = 0, $c$05 = 0, $prev_row$pn = 0, $c$05$looptemp = 0;
 $1 = HEAP32[$row_info + 4 >> 2] | 0;
 $2 = $row + $1 | 0;
 $4 = HEAPU8[$prev_row >> 0] | 0;
 $7 = (HEAPU8[$row >> 0] | 0) + $4 | 0;
 HEAP8[$row >> 0] = $7;
 if (($1 | 0) <= 1) return;
 $$07 = $row + 1 | 0;
 $a$06 = $7;
 $c$05 = $4;
 $prev_row$pn = $prev_row;
 do {
  $prev_row$pn = $prev_row$pn + 1 | 0;
  $10 = $a$06 & 255;
  $c$05$looptemp = $c$05;
  $c$05 = HEAPU8[$prev_row$pn >> 0] | 0;
  $13 = $c$05 - $c$05$looptemp | 0;
  $14 = $10 - $c$05$looptemp | 0;
  $17 = ($13 | 0) < 0 ? 0 - $13 | 0 : $13;
  $20 = ($14 | 0) < 0 ? 0 - $14 | 0 : $14;
  $21 = $13 + $14 | 0;
  $25 = ($20 | 0) < ($17 | 0);
  $a$06 = (((($21 | 0) < 0 ? 0 - $21 | 0 : $21) | 0) < (($25 ? $20 : $17) | 0) ? $c$05$looptemp : $25 ? $c$05 : $10) + (HEAPU8[$$07 >> 0] | 0) | 0;
  HEAP8[$$07 >> 0] = $a$06;
  $$07 = $$07 + 1 | 0;
 } while ($$07 >>> 0 < $2 >>> 0);
 return;
}

function _setnodevector($L, $t, $size) {
 $L = $L | 0;
 $t = $t | 0;
 $size = $size | 0;
 var $$0 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $4 = 0, $8 = 0, $i$01 = 0, $lsize$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!$size) {
  HEAP32[$t + 16 >> 2] = 62336;
  $$0 = 0;
  $17 = 62336;
  $lsize$0 = 0;
  $15 = $t + 7 | 0;
  HEAP8[$15 >> 0] = $lsize$0;
  $16 = $17 + ($$0 * 20 | 0) | 0;
  $18 = $t + 20 | 0;
  HEAP32[$18 >> 2] = $16;
  STACKTOP = sp;
  return;
 }
 $2 = _luaO_ceillog2($size) | 0;
 if (($2 | 0) > 30) _luaG_runerror($L, 62408, sp);
 $4 = 1 << $2;
 if (($4 + 1 | 0) >>> 0 > 214748364) _luaM_toobig($L);
 $8 = _luaM_realloc_($L, 0, 0, 20 << $2) | 0;
 HEAP32[$t + 16 >> 2] = $8;
 if (($4 | 0) > 0) {
  $i$01 = 0;
  do {
   HEAP32[$8 + ($i$01 * 20 | 0) + 16 >> 2] = 0;
   HEAP32[$8 + ($i$01 * 20 | 0) + 12 >> 2] = 0;
   HEAP32[$8 + ($i$01 * 20 | 0) + 4 >> 2] = 0;
   $i$01 = $i$01 + 1 | 0;
  } while (($i$01 | 0) != ($4 | 0));
 }
 $$0 = $4;
 $17 = $8;
 $lsize$0 = $2 & 255;
 $15 = $t + 7 | 0;
 HEAP8[$15 >> 0] = $lsize$0;
 $16 = $17 + ($$0 * 20 | 0) | 0;
 $18 = $t + 20 | 0;
 HEAP32[$18 >> 2] = $16;
 STACKTOP = sp;
 return;
}

function _lua_rawgeti($L, $idx, $n) {
 $L = $L | 0;
 $idx = $idx | 0;
 $n = $n | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $29 = 0, $30 = 0, $33 = 0, $38 = 0, $39 = 0, $4 = 0, $43 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 3) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 59168;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 3) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 4 >> 2] | 0) == 22) $$0$i = 59168; else {
   $21 = HEAP32[$17 >> 2] | 0;
   if (($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0)) $$0$i = 59168; else $$0$i = $21 + 16 + ($16 + -1 << 3) | 0;
  }
 } while (0);
 $29 = $L + 8 | 0;
 $30 = HEAP32[$29 >> 2] | 0;
 $33 = _luaH_getint(HEAP32[$$0$i >> 2] | 0, $n) | 0;
 $38 = HEAP32[$33 + 4 >> 2] | 0;
 $39 = $30;
 HEAP32[$39 >> 2] = HEAP32[$33 >> 2];
 HEAP32[$39 + 4 >> 2] = $38;
 $43 = HEAP32[$29 >> 2] | 0;
 HEAP32[$29 >> 2] = $43 + 8;
 return HEAP32[$43 + 4 >> 2] & 15 | 0;
}

function __ZNK7b2Mat3315GetSymInverse33EPS_($this, $M) {
 $this = $this | 0;
 $M = $M | 0;
 var $1 = 0.0, $12 = 0.0, $15 = 0.0, $16 = 0.0, $20 = 0.0, $21 = 0.0, $3 = 0.0, $30 = 0.0, $38 = 0.0, $4 = 0.0, $40 = 0.0, $51 = 0.0, $6 = 0.0, $8 = 0.0, $det$0 = 0.0;
 $1 = +HEAPF32[$this + 16 >> 2];
 $3 = +HEAPF32[$this + 32 >> 2];
 $4 = $1 * $3;
 $6 = +HEAPF32[$this + 20 >> 2];
 $8 = +HEAPF32[$this + 28 >> 2];
 $12 = +HEAPF32[$this + 24 >> 2];
 $15 = +HEAPF32[$this + 12 >> 2];
 $16 = $3 * $15;
 $20 = $8 * $15 - $1 * $12;
 $21 = +HEAPF32[$this >> 2];
 $30 = ($4 - $6 * $8) * $21 + +HEAPF32[$this + 4 >> 2] * ($6 * $12 - $16) + $20 * +HEAPF32[$this + 8 >> 2];
 if ($30 != 0.0) $det$0 = 1.0 / $30; else $det$0 = $30;
 HEAPF32[$M >> 2] = $det$0 * ($4 - $8 * $8);
 $38 = $det$0 * ($12 * $8 - $16);
 HEAPF32[$M + 4 >> 2] = $38;
 $40 = $det$0 * $20;
 HEAPF32[$M + 8 >> 2] = $40;
 HEAPF32[$M + 12 >> 2] = $38;
 HEAPF32[$M + 16 >> 2] = $det$0 * ($21 * $3 - $12 * $12);
 $51 = $det$0 * ($15 * $12 - $21 * $8);
 HEAPF32[$M + 20 >> 2] = $51;
 HEAPF32[$M + 24 >> 2] = $40;
 HEAPF32[$M + 28 >> 2] = $51;
 HEAPF32[$M + 32 >> 2] = $det$0 * ($21 * $1 - $15 * $15);
 return;
}

function __ZN9b2Contact7DestroyEPS_P16b2BlockAllocator($contact, $allocator) {
 $contact = $contact | 0;
 $allocator = $allocator | 0;
 var $16 = 0, $17 = 0, $19 = 0, $26 = 0, $27 = 0, $29 = 0, $3 = 0, $38 = 0, $42 = 0, $5 = 0;
 if (!(HEAP8[91392] | 0)) ___assert_fail(91568, 91448, 103, 91592);
 $3 = HEAP32[$contact + 48 >> 2] | 0;
 $5 = HEAP32[$contact + 52 >> 2] | 0;
 if ((HEAP32[$contact + 124 >> 2] | 0) > 0) if (!(HEAP8[$3 + 38 >> 0] | 0)) if (!(HEAP8[$5 + 38 >> 0] | 0)) {
  $16 = HEAP32[$3 + 8 >> 2] | 0;
  $17 = $16 + 4 | 0;
  $19 = HEAPU16[$17 >> 1] | 0;
  if (!($19 & 2)) {
   HEAP16[$17 >> 1] = $19 | 2;
   HEAPF32[$16 + 144 >> 2] = 0.0;
  }
  $26 = HEAP32[$5 + 8 >> 2] | 0;
  $27 = $26 + 4 | 0;
  $29 = HEAPU16[$27 >> 1] | 0;
  if (!($29 & 2)) {
   HEAP16[$27 >> 1] = $29 | 2;
   HEAPF32[$26 + 144 >> 2] = 0.0;
  }
 }
 $38 = HEAP32[(HEAP32[$3 + 12 >> 2] | 0) + 4 >> 2] | 0;
 $42 = HEAP32[(HEAP32[$5 + 12 >> 2] | 0) + 4 >> 2] | 0;
 if (($38 | 0) > -1 & ($42 | 0) < 4) {
  FUNCTION_TABLE_vii[HEAP32[91200 + ($38 * 48 | 0) + ($42 * 12 | 0) + 4 >> 2] & 127]($contact, $allocator);
  return;
 } else ___assert_fail(91600, 91448, 119, 91592);
}

function __ZN7b2WorldC2ERK6b2Vec2($this, $gravity) {
 $this = $this | 0;
 $gravity = $gravity | 0;
 var $11 = 0, $16 = 0, $17 = 0, $24 = 0, $5 = 0;
 __ZN16b2BlockAllocatorC2Ev($this);
 __ZN16b2StackAllocatorC2Ev($this + 68 | 0);
 __ZN16b2ContactManagerC2Ev($this + 102872 | 0);
 HEAP32[$this + 102980 >> 2] = 0;
 HEAP32[$this + 102984 >> 2] = 0;
 $5 = $this + 102952 | 0;
 HEAP32[$5 + 0 >> 2] = 0;
 HEAP32[$5 + 4 >> 2] = 0;
 HEAP32[$5 + 8 >> 2] = 0;
 HEAP32[$5 + 12 >> 2] = 0;
 HEAP8[$this + 102992 >> 0] = 1;
 HEAP8[$this + 102993 >> 0] = 1;
 HEAP8[$this + 102994 >> 0] = 0;
 HEAP8[$this + 102995 >> 0] = 1;
 HEAP8[$this + 102976 >> 0] = 1;
 $11 = $gravity;
 $16 = HEAP32[$11 + 4 >> 2] | 0;
 $17 = $this + 102968 | 0;
 HEAP32[$17 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$17 + 4 >> 2] = $16;
 HEAP32[$this + 102868 >> 2] = 4;
 HEAPF32[$this + 102988 >> 2] = 0.0;
 HEAP32[$this + 102948 >> 2] = $this;
 $24 = $this + 102996 | 0;
 HEAP32[$24 + 0 >> 2] = 0;
 HEAP32[$24 + 4 >> 2] = 0;
 HEAP32[$24 + 8 >> 2] = 0;
 HEAP32[$24 + 12 >> 2] = 0;
 HEAP32[$24 + 16 >> 2] = 0;
 HEAP32[$24 + 20 >> 2] = 0;
 HEAP32[$24 + 24 >> 2] = 0;
 HEAP32[$24 + 28 >> 2] = 0;
 return;
}

function _lua_getfield($L, $idx, $k) {
 $L = $L | 0;
 $idx = $idx | 0;
 $k = $k | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $29 = 0, $30 = 0, $31 = 0, $37 = 0, $4 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 3) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 59168;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 3) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 4 >> 2] | 0) == 22) $$0$i = 59168; else {
   $21 = HEAP32[$17 >> 2] | 0;
   if (($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0)) $$0$i = 59168; else $$0$i = $21 + 16 + ($16 + -1 << 3) | 0;
  }
 } while (0);
 $29 = $L + 8 | 0;
 $30 = HEAP32[$29 >> 2] | 0;
 $31 = _luaS_new($L, $k) | 0;
 HEAP32[$30 >> 2] = $31;
 HEAP32[$30 + 4 >> 2] = HEAPU8[$31 + 4 >> 0] | 0 | 64;
 $37 = HEAP32[$29 >> 2] | 0;
 HEAP32[$29 >> 2] = $37 + 8;
 _luaV_gettable($L, $$0$i, $37, $37);
 return HEAP32[(HEAP32[$29 >> 2] | 0) + -4 >> 2] & 15 | 0;
}

function __Z17mlua_on_collisionP9lua_State($L) {
 $L = $L | 0;
 var $16 = 0, $18 = 0, $23 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!$L) ___assert_fail(23976, 2472, 289, 2888);
 if (!(HEAP32[632] | 0)) _luaL_error($L, 2912, sp) | 0;
 if (_lua_gettop($L) | 0) {
  _lua_pushvalue($L, 1);
  $5 = _luaL_ref($L, -1001e3) | 0;
  _lua_pushvalue($L, 2);
  $6 = _luaL_ref($L, -1001e3) | 0;
  _lua_pushvalue($L, 3);
  $7 = _luaL_ref($L, -1001e3) | 0;
  _lua_pushvalue($L, 4);
  $8 = _luaL_ref($L, -1001e3) | 0;
  $9 = __Znwj(24) | 0;
  HEAP32[$9 >> 2] = 2864;
  HEAP32[$9 + 4 >> 2] = $L;
  HEAP32[$9 + 8 >> 2] = $5;
  HEAP32[$9 + 12 >> 2] = $6;
  HEAP32[$9 + 16 >> 2] = $7;
  HEAP32[$9 + 20 >> 2] = $8;
  __ZN7b2World18SetContactListenerEP17b2ContactListener(HEAP32[632] | 0, $9);
  STACKTOP = sp;
  return 0;
 }
 $16 = HEAP32[632] | 0;
 $18 = HEAP32[$16 + 102944 >> 2] | 0;
 if (!$18) $23 = $16; else {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$18 >> 2] | 0) + 4 >> 2] & 127]($18);
  $23 = HEAP32[632] | 0;
 }
 __ZN7b2World18SetContactListenerEP17b2ContactListener($23, 0);
 STACKTOP = sp;
 return 0;
}

function _str_packsize($L) {
 $L = $L | 0;
 var $0 = 0, $11 = 0, $5 = 0, $8 = 0, $fmt = 0, $h = 0, $ntoalign = 0, $size = 0, $totalsize$0$lcssa = 0, $totalsize$01 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $h = sp + 12 | 0;
 $fmt = sp + 8 | 0;
 $size = sp + 4 | 0;
 $ntoalign = sp;
 $0 = _luaL_checklstring($L, 1, 0) | 0;
 HEAP32[$fmt >> 2] = $0;
 HEAP32[$h >> 2] = $L;
 HEAP32[$h + 4 >> 2] = 1;
 HEAP32[$h + 8 >> 2] = 1;
 if (!(HEAP8[$0 >> 0] | 0)) {
  $totalsize$0$lcssa = 0;
  _lua_pushinteger($L, $totalsize$0$lcssa);
  STACKTOP = sp;
  return 1;
 } else $totalsize$01 = 0;
 while (1) {
  $5 = _getdetails($h, $totalsize$01, $fmt, $size, $ntoalign) | 0;
  $8 = (HEAP32[$size >> 2] | 0) + (HEAP32[$ntoalign >> 2] | 0) | 0;
  HEAP32[$size >> 2] = $8;
  if ($totalsize$01 >>> 0 > (2147483647 - $8 | 0) >>> 0) _luaL_argerror($L, 1, 61520) | 0;
  $11 = $8 + $totalsize$01 | 0;
  if (($5 + -4 | 0) >>> 0 < 2) _luaL_argerror($L, 1, 61544) | 0;
  if (!(HEAP8[HEAP32[$fmt >> 2] >> 0] | 0)) {
   $totalsize$0$lcssa = $11;
   break;
  } else $totalsize$01 = $11;
 }
 _lua_pushinteger($L, $totalsize$0$lcssa);
 STACKTOP = sp;
 return 1;
}

function _lua_load($L, $reader, $data, $chunkname, $mode) {
 $L = $L | 0;
 $reader = $reader | 0;
 $data = $data | 0;
 $chunkname = $chunkname | 0;
 $mode = $mode | 0;
 var $1 = 0, $14 = 0, $15 = 0, $18 = 0, $23 = 0, $24 = 0, $28 = 0, $29 = 0, $6 = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $z = sp;
 _luaZ_init($L, $z, $reader, $data);
 $1 = _luaD_protectedparser($L, $z, ($chunkname | 0) == 0 ? 59048 : $chunkname, $mode) | 0;
 if ($1) {
  STACKTOP = sp;
  return $1 | 0;
 }
 $6 = HEAP32[(HEAP32[$L + 8 >> 2] | 0) + -8 >> 2] | 0;
 if (!(HEAP8[$6 + 6 >> 0] | 0)) {
  STACKTOP = sp;
  return $1 | 0;
 }
 $14 = _luaH_getint(HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 36 >> 2] | 0, 2) | 0;
 $15 = $6 + 16 | 0;
 $18 = $14;
 $23 = HEAP32[$18 + 4 >> 2] | 0;
 $24 = HEAP32[HEAP32[$15 >> 2] >> 2] | 0;
 HEAP32[$24 >> 2] = HEAP32[$18 >> 2];
 HEAP32[$24 + 4 >> 2] = $23;
 $28 = HEAP32[$15 >> 2] | 0;
 $29 = HEAP32[$28 >> 2] | 0;
 if (!(HEAP32[$29 + 4 >> 2] & 64)) {
  STACKTOP = sp;
  return $1 | 0;
 }
 if (($29 | 0) != ($28 + 8 | 0)) {
  STACKTOP = sp;
  return $1 | 0;
 }
 _luaC_upvalbarrier_($L, $28);
 STACKTOP = sp;
 return $1 | 0;
}

function _luaopen_io($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 _luaL_checkversion_($L, 503.0, 68);
 _lua_createtable($L, 0, 11);
 _luaL_setfuncs($L, 56584, 0);
 _luaL_newmetatable($L, 56736) | 0;
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 64992);
 _luaL_setfuncs($L, 56776, 0);
 _lua_settop($L, -2);
 $0 = HEAP32[_stdin >> 2] | 0;
 $1 = _lua_newuserdata($L, 8) | 0;
 $2 = $1 + 4 | 0;
 HEAP32[$2 >> 2] = 0;
 _luaL_setmetatable($L, 56736);
 HEAP32[$1 >> 2] = $0;
 HEAP32[$2 >> 2] = 348;
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -1001e3, 56680);
 _lua_setfield($L, -2, 56696);
 $3 = HEAP32[_stdout >> 2] | 0;
 $4 = _lua_newuserdata($L, 8) | 0;
 $5 = $4 + 4 | 0;
 HEAP32[$5 >> 2] = 0;
 _luaL_setmetatable($L, 56736);
 HEAP32[$4 >> 2] = $3;
 HEAP32[$5 >> 2] = 348;
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -1001e3, 56704);
 _lua_setfield($L, -2, 56720);
 $6 = HEAP32[_stderr >> 2] | 0;
 $7 = _lua_newuserdata($L, 8) | 0;
 $8 = $7 + 4 | 0;
 HEAP32[$8 >> 2] = 0;
 _luaL_setmetatable($L, 56736);
 HEAP32[$7 >> 2] = $6;
 HEAP32[$8 >> 2] = 348;
 _lua_setfield($L, -2, 56728);
 return 1;
}

function _tinsert($L) {
 $L = $L | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $7 = 0, $9 = 0, $i$01 = 0, $pos$0 = 0, $ta = 0, $vararg_buffer = 0, label = 0, sp = 0, $i$01$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $ta = sp + 8 | 0;
 _checktab($L, $ta);
 $0 = _luaL_len($L, 1) | 0;
 $1 = $0 + 1 | 0;
 $2 = _lua_gettop($L) | 0;
 if (($2 | 0) == 3) label = 2; else if (($2 | 0) == 2) $pos$0 = $1; else {
  $$0 = _luaL_error($L, 62736, $vararg_buffer) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ((label | 0) == 2) {
  $3 = _luaL_checkinteger($L, 2) | 0;
  if (($3 | 0) < 1 | ($3 | 0) > ($1 | 0)) _luaL_argerror($L, 2, 62672) | 0;
  if (($0 | 0) < ($3 | 0)) $pos$0 = $3; else {
   $7 = HEAP32[$ta >> 2] | 0;
   $9 = HEAP32[$ta + 4 >> 2] | 0;
   $i$01 = $1;
   do {
    $i$01$looptemp = $i$01;
    $i$01 = $i$01 + -1 | 0;
    FUNCTION_TABLE_iiii[$7 & 31]($L, 1, $i$01) | 0;
    FUNCTION_TABLE_viii[$9 & 15]($L, 1, $i$01$looptemp);
   } while (($i$01 | 0) > ($3 | 0));
   $pos$0 = $3;
  }
 }
 FUNCTION_TABLE_viii[HEAP32[$ta + 4 >> 2] & 15]($L, 1, $pos$0);
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNK11b2EdgeShape11ComputeAABBEP6b2AABBRK11b2Transformi($this, $aabb, $xf, $childIndex) {
 $this = $this | 0;
 $aabb = $aabb | 0;
 $xf = $xf | 0;
 $childIndex = $childIndex | 0;
 var $1 = 0.0, $11 = 0.0, $12 = 0.0, $17 = 0.0, $18 = 0.0, $20 = 0.0, $23 = 0.0, $26 = 0.0, $3 = 0.0, $30 = 0.0, $40 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $6 = 0.0, $8 = 0.0;
 $1 = +HEAPF32[$xf + 12 >> 2];
 $3 = +HEAPF32[$this + 12 >> 2];
 $6 = +HEAPF32[$xf + 8 >> 2];
 $8 = +HEAPF32[$this + 16 >> 2];
 $11 = +HEAPF32[$xf >> 2];
 $12 = $11 + ($1 * $3 - $6 * $8);
 $17 = +HEAPF32[$xf + 4 >> 2];
 $18 = $3 * $6 + $1 * $8 + $17;
 $20 = +HEAPF32[$this + 20 >> 2];
 $23 = +HEAPF32[$this + 24 >> 2];
 $26 = $11 + ($1 * $20 - $6 * $23);
 $30 = $17 + ($6 * $20 + $1 * $23);
 $40 = +HEAPF32[$this + 8 >> 2];
 $43 = +(($12 < $26 ? $12 : $26) - $40);
 $44 = +(($18 < $30 ? $18 : $30) - $40);
 $45 = $aabb;
 HEAPF32[$45 >> 2] = $43;
 HEAPF32[$45 + 4 >> 2] = $44;
 $52 = +($40 + ($12 > $26 ? $12 : $26));
 $53 = +($40 + ($18 > $30 ? $18 : $30));
 $54 = $aabb + 8 | 0;
 HEAPF32[$54 >> 2] = $52;
 HEAPF32[$54 + 4 >> 2] = $53;
 return;
}

function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $14 = 0, $20 = 0, $6 = 0;
 do if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
  if ((HEAP32[$info + 4 >> 2] | 0) == ($current_ptr | 0)) {
   $6 = $info + 28 | 0;
   if ((HEAP32[$6 >> 2] | 0) != 1) HEAP32[$6 >> 2] = $path_below;
  }
 } else if (($this | 0) == (HEAP32[$info >> 2] | 0)) {
  if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
   $14 = $info + 20 | 0;
   if ((HEAP32[$14 >> 2] | 0) != ($current_ptr | 0)) {
    HEAP32[$info + 32 >> 2] = $path_below;
    HEAP32[$14 >> 2] = $current_ptr;
    $20 = $info + 40 | 0;
    HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) + 1;
    if ((HEAP32[$info + 36 >> 2] | 0) == 1) if ((HEAP32[$info + 24 >> 2] | 0) == 2) HEAP8[$info + 54 >> 0] = 1;
    HEAP32[$info + 44 >> 2] = 4;
    break;
   }
  }
  if (($path_below | 0) == 1) HEAP32[$info + 32 >> 2] = 1;
 } while (0);
 return;
}

function _inflateInit_($strm, $version, $stream_size) {
 $strm = $strm | 0;
 $version = $version | 0;
 $stream_size = $stream_size | 0;
 var $$0$i = 0, $10 = 0, $13 = 0, $15 = 0, $16 = 0, $18 = 0, $20 = 0, $6 = 0, $7 = 0;
 if (!$version) {
  $$0$i = -6;
  return $$0$i | 0;
 }
 if (!((HEAP8[$version >> 0] | 0) == 49 & ($stream_size | 0) == 56)) {
  $$0$i = -6;
  return $$0$i | 0;
 }
 if (!$strm) {
  $$0$i = -2;
  return $$0$i | 0;
 }
 HEAP32[$strm + 24 >> 2] = 0;
 $6 = $strm + 32 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 if (!$7) {
  HEAP32[$6 >> 2] = 24;
  HEAP32[$strm + 40 >> 2] = 0;
  $15 = 24;
 } else $15 = $7;
 $10 = $strm + 36 | 0;
 if (!(HEAP32[$10 >> 2] | 0)) HEAP32[$10 >> 2] = 96;
 $13 = $strm + 40 | 0;
 $16 = FUNCTION_TABLE_iiii[$15 & 31](HEAP32[$13 >> 2] | 0, 1, 7116) | 0;
 if (!$16) {
  $$0$i = -4;
  return $$0$i | 0;
 }
 $18 = $strm + 28 | 0;
 HEAP32[$18 >> 2] = $16;
 HEAP32[$16 + 52 >> 2] = 0;
 $20 = _inflateReset2($strm, 15) | 0;
 if (!$20) {
  $$0$i = 0;
  return $$0$i | 0;
 }
 FUNCTION_TABLE_vii[HEAP32[$10 >> 2] & 127](HEAP32[$13 >> 2] | 0, $16);
 HEAP32[$18 >> 2] = 0;
 $$0$i = $20;
 return $$0$i | 0;
}

function _stbtt_GetGlyphBitmapBoxSubpixel($font, $glyph, $scale_x, $scale_y, $shift_x, $shift_y, $ix0, $iy0, $ix1, $iy1) {
 $font = $font | 0;
 $glyph = $glyph | 0;
 $scale_x = +$scale_x;
 $scale_y = +$scale_y;
 $shift_x = +$shift_x;
 $shift_y = +$shift_y;
 $ix0 = $ix0 | 0;
 $iy0 = $iy0 | 0;
 $ix1 = $ix1 | 0;
 $iy1 = $iy1 | 0;
 var $x0 = 0, $x1 = 0, $y0 = 0, $y1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $x0 = sp + 12 | 0;
 $y0 = sp + 8 | 0;
 $x1 = sp + 4 | 0;
 $y1 = sp;
 if (!(_stbtt_GetGlyphBox($font, $glyph, $x0, $y0, $x1, $y1) | 0)) {
  HEAP32[$y1 >> 2] = 0;
  HEAP32[$x1 >> 2] = 0;
  HEAP32[$y0 >> 2] = 0;
  HEAP32[$x0 >> 2] = 0;
 }
 if ($ix0) HEAP32[$ix0 >> 2] = ~~+Math_floor(+(+(HEAP32[$x0 >> 2] | 0) * $scale_x + $shift_x));
 if ($iy0) HEAP32[$iy0 >> 2] = 0 - ~~+Math_ceil(+(+(HEAP32[$y1 >> 2] | 0) * $scale_y + $shift_y));
 if ($ix1) HEAP32[$ix1 >> 2] = ~~+Math_ceil(+(+(HEAP32[$x1 >> 2] | 0) * $scale_x + $shift_x));
 if (!$iy1) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$iy1 >> 2] = 0 - ~~+Math_floor(+(+(HEAP32[$y0 >> 2] | 0) * $scale_y + $shift_y));
 STACKTOP = sp;
 return;
}

function _g_iofile($L, $f, $mode) {
 $L = $L | 0;
 $f = $f | 0;
 $mode = $mode | 0;
 var $10 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer2 = sp + 8 | 0;
 $vararg_buffer = sp;
 if ((_lua_type($L, 1) | 0) < 1) {
  _lua_getfield($L, -1001e3, $f) | 0;
  STACKTOP = sp;
  return;
 }
 $2 = _lua_tolstring($L, 1, 0) | 0;
 if (!$2) {
  if (!(HEAP32[(_luaL_checkudata($L, 1, 56736) | 0) + 4 >> 2] | 0)) _luaL_error($L, 56960, $vararg_buffer2) | 0;
  _lua_pushvalue($L, 1);
 } else {
  $4 = _lua_newuserdata($L, 8) | 0;
  $5 = $4 + 4 | 0;
  HEAP32[$5 >> 2] = 0;
  _luaL_setmetatable($L, 56736);
  HEAP32[$4 >> 2] = 0;
  HEAP32[$5 >> 2] = 349;
  $6 = _fopen($2 | 0, $mode | 0) | 0;
  HEAP32[$4 >> 2] = $6;
  if (!$6) {
   $10 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0;
   HEAP32[$vararg_buffer >> 2] = $2;
   HEAP32[$vararg_buffer + 4 >> 2] = $10;
   _luaL_error($L, 57304, $vararg_buffer) | 0;
  }
 }
 _lua_setfield($L, -1001e3, $f);
 _lua_getfield($L, -1001e3, $f) | 0;
 STACKTOP = sp;
 return;
}

function _lua_rawget($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $29 = 0, $31 = 0, $34 = 0, $39 = 0, $4 = 0, $40 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 3) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 59168;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 3) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 4 >> 2] | 0) == 22) $$0$i = 59168; else {
   $21 = HEAP32[$17 >> 2] | 0;
   if (($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0)) $$0$i = 59168; else $$0$i = $21 + 16 + ($16 + -1 << 3) | 0;
  }
 } while (0);
 $29 = $L + 8 | 0;
 $31 = (HEAP32[$29 >> 2] | 0) + -8 | 0;
 $34 = _luaH_get(HEAP32[$$0$i >> 2] | 0, $31) | 0;
 $39 = HEAP32[$34 + 4 >> 2] | 0;
 $40 = $31;
 HEAP32[$40 >> 2] = HEAP32[$34 >> 2];
 HEAP32[$40 + 4 >> 2] = $39;
 return HEAP32[(HEAP32[$29 >> 2] | 0) + -4 >> 2] & 15 | 0;
}

function _mlua_set_color($L) {
 $L = $L | 0;
 var $10 = 0, $12 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 if (!$L) ___assert_fail(23976, 19928, 36, 20040);
 if (_lua_isstring($L, 1) | 0) if (!(_lua_isnumber($L, 1) | 0)) {
  _dlua_get_drystal_field(20056);
  _lua_pushvalue($L, 1);
  _lua_gettable($L, -2) | 0;
  _lua_copy($L, -1, 1);
  _lua_settop($L, -2);
 }
 if ((_lua_type($L, 1) | 0) == 5) {
  _lua_rawgeti($L, 1, 1) | 0;
  _lua_rawgeti($L, 1, 2) | 0;
  _lua_rawgeti($L, 1, 3) | 0;
 }
 $8 = ~~+_luaL_checknumber($L, -3);
 $10 = ~~+_luaL_checknumber($L, -2);
 $12 = ~~+_luaL_checknumber($L, -1);
 if ($8 >>> 0 >= 256) _luaL_error($L, 20064, $vararg_buffer) | 0;
 if ($10 >>> 0 >= 256) _luaL_error($L, 20120, $vararg_buffer1) | 0;
 if ($12 >>> 0 < 256) {
  _display_set_color($8, $10, $12);
  STACKTOP = sp;
  return 0;
 }
 _luaL_error($L, 20176, $vararg_buffer3) | 0;
 _display_set_color($8, $10, $12);
 STACKTOP = sp;
 return 0;
}

function __Z10mlua_queryP9lua_State($L) {
 $L = $L | 0;
 var $10 = 0.0, $12 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $9 = 0.0, $aabb = 0, $query = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $query = sp + 20 | 0;
 $aabb = sp;
 if (!$L) ___assert_fail(23976, 2472, 420, 3040);
 if (!(HEAP32[632] | 0)) _luaL_error($L, 3056, sp + 16 | 0) | 0;
 $3 = +_luaL_checknumber($L, 1);
 $4 = +HEAPF32[616];
 $5 = +_luaL_checknumber($L, 2);
 $6 = +HEAPF32[616];
 $7 = +_luaL_checknumber($L, 3);
 $9 = $7 / +HEAPF32[616];
 $10 = +_luaL_checknumber($L, 4);
 $12 = $10 / +HEAPF32[616];
 _lua_createtable($L, 0, 0);
 HEAP32[$query >> 2] = 3744;
 HEAP32[$query + 4 >> 2] = $L;
 HEAP32[$query + 8 >> 2] = 1;
 $17 = +($3 / $4);
 $18 = +($5 / $6);
 $19 = $aabb;
 HEAPF32[$19 >> 2] = $17;
 HEAPF32[$19 + 4 >> 2] = $18;
 $24 = +$9;
 $25 = +$12;
 $26 = $aabb + 8 | 0;
 HEAPF32[$26 >> 2] = $24;
 HEAPF32[$26 + 4 >> 2] = $25;
 __ZNK7b2World9QueryAABBEP15b2QueryCallbackRK6b2AABB(HEAP32[632] | 0, $query, $aabb);
 STACKTOP = sp;
 return 1;
}

function _condjump($fs, $op, $A, $B, $C) {
 $fs = $fs | 0;
 $op = $op | 0;
 $A = $A | 0;
 $B = $B | 0;
 $C = $C | 0;
 var $11 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $28 = 0, $6 = 0, $7 = 0, $8 = 0, $fs$idx$val$idx$val$i$i = 0, $list$0$i$i = 0;
 _luaK_code($fs, $A << 6 | $op | $B << 23 | $C << 14) | 0;
 $6 = $fs + 24 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 HEAP32[$6 >> 2] = -1;
 $8 = _luaK_code($fs, 2147450910) | 0;
 if (($7 | 0) == -1) {
  $28 = $8;
  return $28 | 0;
 }
 if (($8 | 0) == -1) {
  $28 = $7;
  return $28 | 0;
 }
 $fs$idx$val$idx$val$i$i = HEAP32[(HEAP32[$fs >> 2] | 0) + 48 >> 2] | 0;
 $list$0$i$i = $8;
 while (1) {
  $11 = $fs$idx$val$idx$val$i$i + ($list$0$i$i << 2) | 0;
  $12 = HEAP32[$11 >> 2] | 0;
  $14 = ($12 >>> 14) + -131071 | 0;
  if (($14 | 0) == -1) break;
  $17 = $list$0$i$i + 1 + $14 | 0;
  if (($17 | 0) == -1) break; else $list$0$i$i = $17;
 }
 $19 = $7 + ~$list$0$i$i | 0;
 if (((($19 | 0) > -1 ? $19 : 0 - $19 | 0) | 0) > 131071) _luaX_syntaxerror(HEAP32[$fs + 8 >> 2] | 0, 65576);
 HEAP32[$11 >> 2] = ($19 << 14) + 2147467264 | $12 & 16383;
 $28 = $8;
 return $28 | 0;
}

function _stbtt__find_table($data, $fontstart, $tag) {
 $data = $data | 0;
 $fontstart = $fontstart | 0;
 $tag = $tag | 0;
 var $$0 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $7 = 0, $8 = 0, $i$09 = 0, label = 0;
 $7 = HEAPU8[$data + ($fontstart + 4) >> 0] << 8 | HEAPU8[$data + ($fontstart + 5) >> 0];
 $8 = $fontstart + 12 | 0;
 if (!$7) {
  $$0 = 0;
  return $$0 | 0;
 }
 $11 = HEAP8[$tag >> 0] | 0;
 $12 = $tag + 1 | 0;
 $13 = $tag + 2 | 0;
 $14 = $tag + 3 | 0;
 $i$09 = 0;
 while (1) {
  $16 = $8 + ($i$09 << 4) | 0;
  if ((HEAPU8[$data + $16 >> 0] | 0) == ($11 | 0)) if ((HEAPU8[$data + ($16 + 1) >> 0] | 0) == (HEAP8[$12 >> 0] | 0)) if ((HEAPU8[$data + ($16 + 2) >> 0] | 0) == (HEAP8[$13 >> 0] | 0)) if ((HEAPU8[$data + ($16 + 3) >> 0] | 0) == (HEAP8[$14 >> 0] | 0)) break;
  $i$09 = $i$09 + 1 | 0;
  if (($i$09 | 0) >= ($7 | 0)) {
   $$0 = 0;
   label = 9;
   break;
  }
 }
 if ((label | 0) == 9) return $$0 | 0;
 $$0 = HEAPU8[$data + ($16 + 9) >> 0] << 16 | HEAPU8[$data + ($16 + 8) >> 0] << 24 | HEAPU8[$data + ($16 + 10) >> 0] << 8 | HEAPU8[$data + ($16 + 11) >> 0];
 return $$0 | 0;
}

function _codebook_decode_start($f, $c) {
 $f = $f | 0;
 $c = $c | 0;
 var $$0 = 0, $11 = 0, $12 = 0, $18 = 0, $21 = 0, $22 = 0, $4 = 0, $7 = 0, $8 = 0, $z$0 = 0;
 if (!(HEAP8[$c + 21 >> 0] | 0)) {
  HEAP32[$f + 116 >> 2] = 21;
  $$0 = -1;
  return $$0 | 0;
 }
 $4 = $f + 1412 | 0;
 if ((HEAP32[$4 >> 2] | 0) < 10) _prep_huffman($f);
 $7 = $f + 1408 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 $11 = HEAP16[$c + (($8 & 1023) << 1) + 36 >> 1] | 0;
 $12 = $11 << 16 >> 16;
 if ($11 << 16 >> 16 > -1) {
  $18 = HEAPU8[(HEAP32[$c + 8 >> 2] | 0) + $12 >> 0] | 0;
  HEAP32[$7 >> 2] = $8 >>> $18;
  $21 = (HEAP32[$4 >> 2] | 0) - $18 | 0;
  $22 = ($21 | 0) < 0;
  HEAP32[$4 >> 2] = $22 ? 0 : $21;
  $z$0 = $22 ? -1 : $12;
 } else $z$0 = _codebook_decode_scalar_raw($f, $c) | 0;
 if (HEAP8[$c + 23 >> 0] | 0) if (($z$0 | 0) >= (HEAP32[$c + 2092 >> 2] | 0)) ___assert_fail(80664, 78904, 1711, 80688);
 if (($z$0 | 0) >= 0) {
  $$0 = $z$0;
  return $$0 | 0;
 }
 if (!(HEAP8[$f + 1392 >> 0] | 0)) if (HEAP32[$f + 1400 >> 2] | 0) {
  $$0 = $z$0;
  return $$0 | 0;
 }
 HEAP32[$f + 116 >> 2] = 21;
 $$0 = $z$0;
 return $$0 | 0;
}

function _png_app_warning($png_ptr, $error_message) {
 $png_ptr = $png_ptr | 0;
 $error_message = $error_message | 0;
 var $12 = 0, $14 = 0, $15 = 0, $6 = 0, $offset$04$i = 0, $offset$11$i = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 if (!(HEAP32[$png_ptr + 212 >> 2] & 2097152)) _png_error($png_ptr, $error_message);
 L4 : do if ((HEAP8[$error_message >> 0] | 0) == 35) {
  $offset$04$i = 1;
  while (1) {
   $6 = $offset$04$i + 1 | 0;
   if ((HEAP8[$error_message + $offset$04$i >> 0] | 0) == 32) {
    $offset$11$i = $offset$04$i;
    break L4;
   }
   if (($6 | 0) < 15) $offset$04$i = $6; else {
    $offset$11$i = $6;
    break;
   }
  }
 } else $offset$11$i = 0; while (0);
 $12 = HEAP32[$png_ptr + 172 >> 2] | 0;
 $14 = $error_message + $offset$11$i | 0;
 if (!$12) {
  $15 = HEAP32[_stderr >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = $14;
  _fprintf($15 | 0, 74264, $vararg_buffer | 0) | 0;
  _fputc(10, $15 | 0) | 0;
  STACKTOP = sp;
  return;
 } else {
  FUNCTION_TABLE_vii[$12 & 127]($png_ptr, $14);
  STACKTOP = sp;
  return;
 }
}

function _png_set_PLTE($png_ptr, $info_ptr, $palette, $num_palette) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 $palette = $palette | 0;
 $num_palette = $num_palette | 0;
 var $13 = 0, $17 = 0, $20 = 0, $23 = 0, $6 = 0;
 if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) return;
 if ($num_palette >>> 0 > 256) {
  if ((HEAP8[$info_ptr + 25 >> 0] | 0) == 3) _png_error($png_ptr, 77656);
  _png_warning($png_ptr, 77656);
  return;
 }
 $6 = ($num_palette | 0) > 0;
 if ($6 & ($palette | 0) == 0) _png_error($png_ptr, 77680);
 if (!$num_palette) if (!(HEAP32[$png_ptr + 708 >> 2] & 1)) _png_error($png_ptr, 77680);
 _png_free_data($png_ptr, $info_ptr, 4096, 0);
 $13 = _png_calloc($png_ptr, 768) | 0;
 HEAP32[$png_ptr + 416 >> 2] = $13;
 if ($6) _memcpy($13 | 0, $palette | 0, $num_palette * 3 | 0) | 0;
 HEAP32[$info_ptr + 16 >> 2] = $13;
 $17 = $num_palette & 65535;
 HEAP16[$png_ptr + 420 >> 1] = $17;
 HEAP16[$info_ptr + 20 >> 1] = $17;
 $20 = $info_ptr + 232 | 0;
 HEAP32[$20 >> 2] = HEAP32[$20 >> 2] | 4096;
 $23 = $info_ptr + 8 | 0;
 HEAP32[$23 >> 2] = HEAP32[$23 >> 2] | 8;
 return;
}

function _png_app_error($png_ptr, $error_message) {
 $png_ptr = $png_ptr | 0;
 $error_message = $error_message | 0;
 var $12 = 0, $14 = 0, $15 = 0, $6 = 0, $offset$04$i = 0, $offset$11$i = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 if (!(HEAP32[$png_ptr + 212 >> 2] & 4194304)) _png_error($png_ptr, $error_message);
 L4 : do if ((HEAP8[$error_message >> 0] | 0) == 35) {
  $offset$04$i = 1;
  while (1) {
   $6 = $offset$04$i + 1 | 0;
   if ((HEAP8[$error_message + $offset$04$i >> 0] | 0) == 32) {
    $offset$11$i = $offset$04$i;
    break L4;
   }
   if (($6 | 0) < 15) $offset$04$i = $6; else {
    $offset$11$i = $6;
    break;
   }
  }
 } else $offset$11$i = 0; while (0);
 $12 = HEAP32[$png_ptr + 172 >> 2] | 0;
 $14 = $error_message + $offset$11$i | 0;
 if (!$12) {
  $15 = HEAP32[_stderr >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = $14;
  _fprintf($15 | 0, 74264, $vararg_buffer | 0) | 0;
  _fputc(10, $15 | 0) | 0;
  STACKTOP = sp;
  return;
 } else {
  FUNCTION_TABLE_vii[$12 & 127]($png_ptr, $14);
  STACKTOP = sp;
  return;
 }
}

function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $adjustedPtr) {
 $this = $this | 0;
 $thrown_type = $thrown_type | 0;
 $adjustedPtr = $adjustedPtr | 0;
 var $$0 = 0, $$1 = 0, $2 = 0, $info = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $info = sp;
 if (($this | 0) == ($thrown_type | 0)) $$1 = 1; else if (!$thrown_type) $$1 = 0; else {
  $2 = ___dynamic_cast($thrown_type, 106344, 106400, 0) | 0;
  if (!$2) $$1 = 0; else {
   dest = $info + 0 | 0;
   stop = dest + 56 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP32[$info >> 2] = $2;
   HEAP32[$info + 8 >> 2] = $this;
   HEAP32[$info + 12 >> 2] = -1;
   HEAP32[$info + 48 >> 2] = 1;
   FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 28 >> 2] & 31]($2, $info, HEAP32[$adjustedPtr >> 2] | 0, 1);
   if ((HEAP32[$info + 24 >> 2] | 0) == 1) {
    HEAP32[$adjustedPtr >> 2] = HEAP32[$info + 16 >> 2];
    $$0 = 1;
   } else $$0 = 0;
   $$1 = $$0;
  }
 }
 STACKTOP = sp;
 return $$1 | 0;
}

function _lua_isnumber($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $34 = 0, $4 = 0, $n = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $n = sp;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 3) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 59168;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 3) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 4 >> 2] | 0) == 22) $$0$i = 59168; else {
   $21 = HEAP32[$17 >> 2] | 0;
   if (($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0)) $$0$i = 59168; else $$0$i = $21 + 16 + ($16 + -1 << 3) | 0;
  }
 } while (0);
 if ((HEAP32[$$0$i + 4 >> 2] | 0) == 3) {
  HEAPF32[$n >> 2] = +HEAPF32[$$0$i >> 2];
  $34 = 1;
  STACKTOP = sp;
  return $34 | 0;
 } else {
  $34 = _luaV_tonumber_($$0$i, $n) | 0;
  STACKTOP = sp;
  return $34 | 0;
 }
 return 0;
}

function _png_warning($png_ptr, $warning_message) {
 $png_ptr = $png_ptr | 0;
 $warning_message = $warning_message | 0;
 var $13 = 0, $3 = 0, $9 = 0, $offset$04 = 0, $offset$11 = 0, $offset$12 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 if (!$png_ptr) $offset$12 = 0; else {
  L3 : do if ((HEAP8[$warning_message >> 0] | 0) == 35) {
   $offset$04 = 1;
   while (1) {
    $3 = $offset$04 + 1 | 0;
    if ((HEAP8[$warning_message + $offset$04 >> 0] | 0) == 32) {
     $offset$11 = $offset$04;
     break L3;
    }
    if (($3 | 0) < 15) $offset$04 = $3; else {
     $offset$11 = $3;
     break;
    }
   }
  } else $offset$11 = 0; while (0);
  $9 = HEAP32[$png_ptr + 172 >> 2] | 0;
  if (!$9) $offset$12 = $offset$11; else {
   FUNCTION_TABLE_vii[$9 & 127]($png_ptr, $warning_message + $offset$11 | 0);
   STACKTOP = sp;
   return;
  }
 }
 $13 = HEAP32[_stderr >> 2] | 0;
 HEAP32[$vararg_buffer >> 2] = $warning_message + $offset$12;
 _fprintf($13 | 0, 74264, $vararg_buffer | 0) | 0;
 _fputc(10, $13 | 0) | 0;
 STACKTOP = sp;
 return;
}

function _png_chunk_unknown_handling($png_ptr, $chunk_name) {
 $png_ptr = $png_ptr | 0;
 $chunk_name = $chunk_name | 0;
 var $$0$i = 0, $13 = 0, $16 = 0, $19 = 0, $chunk_string = 0, $p$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $chunk_string = sp;
 HEAP8[$chunk_string >> 0] = $chunk_name >>> 24;
 HEAP8[$chunk_string + 1 >> 0] = $chunk_name >>> 16;
 HEAP8[$chunk_string + 2 >> 0] = $chunk_name >>> 8;
 HEAP8[$chunk_string + 3 >> 0] = $chunk_name;
 HEAP8[$chunk_string + 4 >> 0] = 0;
 if (!$png_ptr) {
  $$0$i = 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 $13 = HEAP32[$png_ptr + 692 >> 2] | 0;
 if (!$13) {
  $$0$i = 0;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 $16 = HEAP32[$png_ptr + 696 >> 2] | 0;
 $p$0$i = $16 + ($13 * 5 | 0) | 0;
 while (1) {
  $19 = $p$0$i + -5 | 0;
  if (!(_memcmp($chunk_string, $19, 4) | 0)) break;
  if ($19 >>> 0 > $16 >>> 0) $p$0$i = $19; else {
   $$0$i = 0;
   label = 7;
   break;
  }
 }
 if ((label | 0) == 7) {
  STACKTOP = sp;
  return $$0$i | 0;
 }
 $$0$i = HEAPU8[$p$0$i + -1 >> 0] | 0;
 STACKTOP = sp;
 return $$0$i | 0;
}

function _lua_yieldk($L, $nresults, $ctx, $k) {
 $L = $L | 0;
 $nresults = $nresults | 0;
 $ctx = $ctx | 0;
 $k = $k | 0;
 var $$sum = 0, $1 = 0, $25 = 0, $26 = 0, $27 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 if (HEAP16[$L + 104 >> 1] | 0) if ((HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 124 >> 2] | 0) == ($L | 0)) _luaG_runerror($L, 56296, $vararg_buffer1); else _luaG_runerror($L, 56248, $vararg_buffer);
 HEAP8[$L + 6 >> 0] = 1;
 HEAP32[$1 + 28 >> 2] = (HEAP32[$1 >> 2] | 0) - (HEAP32[$L + 28 >> 2] | 0);
 if (HEAP8[$1 + 34 >> 0] & 2) {
  STACKTOP = sp;
  return 0;
 }
 HEAP32[$1 + 16 >> 2] = $k;
 if (!$k) {
  $25 = $L + 8 | 0;
  $26 = HEAP32[$25 >> 2] | 0;
  $$sum = ~$nresults;
  $27 = $26 + ($$sum << 3) | 0;
  HEAP32[$1 >> 2] = $27;
  _luaD_throw($L, 1);
 }
 HEAP32[$1 + 24 >> 2] = $ctx;
 $25 = $L + 8 | 0;
 $26 = HEAP32[$25 >> 2] | 0;
 $$sum = ~$nresults;
 $27 = $26 + ($$sum << 3) | 0;
 HEAP32[$1 >> 2] = $27;
 _luaD_throw($L, 1);
 return 0;
}

function _lua_checkstack($L, $n) {
 $L = $L | 0;
 $n = $n | 0;
 var $0 = 0, $2 = 0, $21 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $5 = 0, $6 = 0, $8 = 0, $res$01 = 0, $res$03 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $n;
 $2 = HEAP32[$L + 16 >> 2] | 0;
 $5 = $L + 8 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $8 = $6;
 do if (((HEAP32[$L + 24 >> 2] | 0) - $8 >> 3 | 0) > ($n | 0)) {
  $26 = $6;
  $27 = $n;
  $res$03 = 1;
 } else {
  if ((($8 - (HEAP32[$L + 28 >> 2] | 0) >> 3) + 5 | 0) > (1e6 - $n | 0)) {
   $res$01 = 0;
   STACKTOP = sp;
   return $res$01 | 0;
  }
  $21 = (_luaD_rawrunprotected($L, 78, $0) | 0) == 0;
  if ($21) {
   $26 = HEAP32[$5 >> 2] | 0;
   $27 = HEAP32[$0 >> 2] | 0;
   $res$03 = $21 & 1;
   break;
  } else {
   $res$01 = 0;
   STACKTOP = sp;
   return $res$01 | 0;
  }
 } while (0);
 $23 = $2 + 4 | 0;
 $25 = $26 + ($27 << 3) | 0;
 if ((HEAP32[$23 >> 2] | 0) >>> 0 >= $25 >>> 0) {
  $res$01 = $res$03;
  STACKTOP = sp;
  return $res$01 | 0;
 }
 HEAP32[$23 >> 2] = $25;
 $res$01 = $res$03;
 STACKTOP = sp;
 return $res$01 | 0;
}

function _luaL_checkoption($L, $arg, $def, $lst) {
 $L = $L | 0;
 $arg = $arg | 0;
 $def = $def | 0;
 $lst = $lst | 0;
 var $$0 = 0, $15 = 0, $16 = 0, $3 = 0, $6 = 0, $9 = 0, $i$02 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 if (!$def) {
  $6 = _lua_tolstring($L, $arg, 0) | 0;
  if (!$6) {
   _typeerror($L, $arg, _lua_typename($L, 4) | 0);
   $16 = 0;
  } else $16 = $6;
 } else if ((_lua_type($L, $arg) | 0) < 1) $16 = $def; else {
  $3 = _lua_tolstring($L, $arg, 0) | 0;
  if (!$3) {
   _typeerror($L, $arg, _lua_typename($L, 4) | 0);
   $16 = 0;
  } else $16 = $3;
 }
 $9 = HEAP32[$lst >> 2] | 0;
 L8 : do if ($9) {
  $15 = $9;
  $i$02 = 0;
  while (1) {
   if (!(_strcmp($15, $16) | 0)) {
    $$0 = $i$02;
    break;
   }
   $i$02 = $i$02 + 1 | 0;
   $15 = HEAP32[$lst + ($i$02 << 2) >> 2] | 0;
   if (!$15) break L8;
  }
  STACKTOP = sp;
  return $$0 | 0;
 } while (0);
 HEAP32[$vararg_buffer >> 2] = $16;
 $$0 = _luaL_argerror($L, $arg, _lua_pushfstring($L, 55280, $vararg_buffer) | 0) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _lua_getuservalue($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $29 = 0, $30 = 0, $31 = 0, $38 = 0, $4 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 3) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 59168;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 3) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 4 >> 2] | 0) == 22) $$0$i = 59168; else {
   $21 = HEAP32[$17 >> 2] | 0;
   if (($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0)) $$0$i = 59168; else $$0$i = $21 + 16 + ($16 + -1 << 3) | 0;
  }
 } while (0);
 $29 = $L + 8 | 0;
 $30 = HEAP32[$29 >> 2] | 0;
 $31 = HEAP32[$$0$i >> 2] | 0;
 HEAP32[$30 >> 2] = HEAP32[$31 + 16 >> 2];
 HEAP32[$30 + 4 >> 2] = HEAPU8[$31 + 6 >> 0];
 $38 = HEAP32[$29 >> 2] | 0;
 HEAP32[$29 >> 2] = $38 + 8;
 return HEAP32[$38 + 4 >> 2] & 15 | 0;
}

function __ZN15b2RevoluteJointC2EPK18b2RevoluteJointDef($this, $def) {
 $this = $this | 0;
 $def = $def | 0;
 var $14 = 0, $19 = 0, $20 = 0, $27 = 0, $3 = 0, $8 = 0, $9 = 0;
 __ZN7b2JointC2EPK10b2JointDef($this, $def);
 HEAP32[$this >> 2] = 85808;
 $3 = $def + 20 | 0;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = $this + 68 | 0;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 $14 = $def + 28 | 0;
 $19 = HEAP32[$14 + 4 >> 2] | 0;
 $20 = $this + 76 | 0;
 HEAP32[$20 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$20 + 4 >> 2] = $19;
 HEAPF32[$this + 116 >> 2] = +HEAPF32[$def + 36 >> 2];
 $27 = $this + 84 | 0;
 HEAP32[$27 + 0 >> 2] = 0;
 HEAP32[$27 + 4 >> 2] = 0;
 HEAP32[$27 + 8 >> 2] = 0;
 HEAP32[$27 + 12 >> 2] = 0;
 HEAPF32[$this + 120 >> 2] = +HEAPF32[$def + 44 >> 2];
 HEAPF32[$this + 124 >> 2] = +HEAPF32[$def + 48 >> 2];
 HEAPF32[$this + 104 >> 2] = +HEAPF32[$def + 60 >> 2];
 HEAPF32[$this + 108 >> 2] = +HEAPF32[$def + 56 >> 2];
 HEAP8[$this + 112 >> 0] = HEAP8[$def + 40 >> 0] | 0;
 HEAP8[$this + 100 >> 0] = HEAP8[$def + 52 >> 0] | 0;
 HEAP32[$this + 224 >> 2] = 0;
 return;
}

function _luaF_findupval($L, $level) {
 $L = $L | 0;
 $level = $level | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $15 = 0, $20 = 0, $4 = 0, $6 = 0, $7 = 0, $pp$0$lcssa = 0, $pp$03 = 0;
 $0 = $L + 32 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 L1 : do if (!$1) $pp$0$lcssa = $0; else {
  $7 = $1;
  $pp$03 = $0;
  while (1) {
   $6 = HEAP32[$7 >> 2] | 0;
   if ($6 >>> 0 < $level >>> 0) {
    $pp$0$lcssa = $pp$03;
    break L1;
   }
   $4 = $7 + 8 | 0;
   if (($6 | 0) == ($level | 0)) {
    $$0 = $7;
    break;
   }
   $7 = HEAP32[$4 >> 2] | 0;
   if (!$7) {
    $pp$0$lcssa = $4;
    break L1;
   } else $pp$03 = $4;
  }
  return $$0 | 0;
 } while (0);
 $10 = _luaM_realloc_($L, 0, 0, 16) | 0;
 HEAP32[$10 + 4 >> 2] = 0;
 HEAP32[$10 + 8 >> 2] = HEAP32[$pp$0$lcssa >> 2];
 HEAP32[$10 + 12 >> 2] = 1;
 HEAP32[$pp$0$lcssa >> 2] = $10;
 HEAP32[$10 >> 2] = $level;
 $15 = $L + 40 | 0;
 if ((HEAP32[$15 >> 2] | 0) != ($L | 0)) {
  $$0 = $10;
  return $$0 | 0;
 }
 $20 = (HEAP32[$L + 12 >> 2] | 0) + 92 | 0;
 HEAP32[$15 >> 2] = HEAP32[$20 >> 2];
 HEAP32[$20 >> 2] = $L;
 $$0 = $10;
 return $$0 | 0;
}

function _strbuf_append_string($s, $str) {
 $s = $s | 0;
 $str = $str | 0;
 var $0 = 0, $12 = 0, $13 = 0, $21 = 0, $6 = 0, $9 = 0, $i$05 = 0, $s$idx1$val = 0, $s$idx2 = 0, $s$idx3 = 0, $s$idx3$val = 0, $space$04 = 0, $space$1 = 0;
 $s$idx2 = $s + 4 | 0;
 $s$idx3 = $s + 8 | 0;
 $0 = HEAP8[$str >> 0] | 0;
 if (!($0 << 24 >> 24)) return;
 $s$idx3$val = HEAP32[$s$idx3 >> 2] | 0;
 $21 = $0;
 $6 = $s$idx3$val;
 $9 = $str;
 $i$05 = 0;
 $space$04 = (HEAP32[$s$idx2 >> 2] | 0) + -1 - $s$idx3$val | 0;
 while (1) {
  if (($space$04 | 0) < 1) {
   _strbuf_resize($s, $6 + 1 | 0);
   $s$idx1$val = HEAP32[$s$idx3 >> 2] | 0;
   $12 = $s$idx1$val;
   $13 = HEAP8[$9 >> 0] | 0;
   $space$1 = (HEAP32[$s$idx2 >> 2] | 0) + -1 - $s$idx1$val | 0;
  } else {
   $12 = $6;
   $13 = $21;
   $space$1 = $space$04;
  }
  HEAP8[(HEAP32[$s >> 2] | 0) + $12 >> 0] = $13;
  $6 = (HEAP32[$s$idx3 >> 2] | 0) + 1 | 0;
  HEAP32[$s$idx3 >> 2] = $6;
  $i$05 = $i$05 + 1 | 0;
  $9 = $str + $i$05 | 0;
  $21 = HEAP8[$9 >> 0] | 0;
  if (!($21 << 24 >> 24)) break; else $space$04 = $space$1 + -1 | 0;
 }
 return;
}

function _lua_pushcclosure($L, $fn, $n) {
 $L = $L | 0;
 $fn = $fn | 0;
 $n = $n | 0;
 var $$in = 0, $11 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $24 = 0, $25 = 0, $31 = 0, $32 = 0, $33 = 0, $9 = 0;
 if (!$n) {
  $2 = HEAP32[$L + 8 >> 2] | 0;
  HEAP32[$2 >> 2] = $fn;
  HEAP32[$2 + 4 >> 2] = 22;
  $31 = $L + 8 | 0;
  $32 = HEAP32[$31 >> 2] | 0;
  $33 = $32 + 8 | 0;
  HEAP32[$31 >> 2] = $33;
  return;
 }
 if ((HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 12 >> 2] | 0) > 0) _luaC_step($L);
 $9 = _luaF_newCclosure($L, $n) | 0;
 HEAP32[$9 + 12 >> 2] = $fn;
 $11 = $L + 8 | 0;
 $14 = (HEAP32[$11 >> 2] | 0) + (0 - $n << 3) | 0;
 HEAP32[$11 >> 2] = $14;
 $$in = $n;
 $18 = $14;
 do {
  $$in = $$in + -1 | 0;
  $19 = $18 + ($$in << 3) | 0;
  $24 = HEAP32[$19 + 4 >> 2] | 0;
  $25 = $9 + ($$in << 3) + 16 | 0;
  HEAP32[$25 >> 2] = HEAP32[$19 >> 2];
  HEAP32[$25 + 4 >> 2] = $24;
  $18 = HEAP32[$11 >> 2] | 0;
 } while (($$in | 0) != 0);
 HEAP32[$18 >> 2] = $9;
 HEAP32[$18 + 4 >> 2] = 102;
 $31 = $L + 8 | 0;
 $32 = HEAP32[$31 >> 2] | 0;
 $33 = $32 + 8 | 0;
 HEAP32[$31 >> 2] = $33;
 return;
}

function __Z20push_prismatic_jointP9lua_StateP5Joint($L, $prismatic_joint) {
 $L = $L | 0;
 $prismatic_joint = $prismatic_joint | 0;
 var $2 = 0, $3 = 0, $5 = 0, $8 = 0, $9 = 0;
 if (!$L) ___assert_fail(23976, 4112, 24, 4296);
 if (!$prismatic_joint) ___assert_fail(4320, 4112, 24, 4296);
 _lua_getfield($L, -1001e3, 19984) | 0;
 $2 = $prismatic_joint + 12 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if ($3) {
  _lua_rawgeti($L, -1, $3) | 0;
  $8 = _lua_gettop($L) | 0;
  $9 = $8 + -1 | 0;
  _lua_rotate($L, $9, -1);
  _lua_settop($L, -2);
  return;
 }
 $5 = _lua_newuserdata($L, 4) | 0;
 if (!$5) _log_oom_and_exit();
 HEAP32[$5 >> 2] = $prismatic_joint;
 _lua_createtable($L, 0, 0);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 64992);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 63048);
 _lua_pushvalue($L, -2);
 _lua_setfield($L, -2, 19992);
 _luaL_setmetatable($L, 4320);
 _lua_setmetatable($L, -2) | 0;
 _lua_pushvalue($L, -1);
 HEAP32[$2 >> 2] = _luaL_ref($L, -3) | 0;
 $8 = _lua_gettop($L) | 0;
 $9 = $8 + -1 | 0;
 _lua_rotate($L, $9, -1);
 _lua_settop($L, -2);
 return;
}

function ___shgetc($f) {
 $f = $f | 0;
 var $$0 = 0, $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $12 = 0, $19 = 0, $27 = 0, $32 = 0, $6 = 0, $9 = 0, label = 0;
 $0 = $f + 104 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) label = 3; else if ((HEAP32[$f + 108 >> 2] | 0) < ($1 | 0)) label = 3;
 if ((label | 0) == 3) {
  $6 = ___uflow($f) | 0;
  if (($6 | 0) >= 0) {
   $9 = HEAP32[$0 >> 2] | 0;
   $$pre = HEAP32[$f + 8 >> 2] | 0;
   if (!$9) label = 8; else {
    $12 = HEAP32[$f + 4 >> 2] | 0;
    $19 = $9 - (HEAP32[$f + 108 >> 2] | 0) + -1 | 0;
    if (($$pre - $12 | 0) > ($19 | 0)) HEAP32[$f + 100 >> 2] = $12 + $19; else label = 8;
   }
   if ((label | 0) == 8) HEAP32[$f + 100 >> 2] = $$pre;
   $$pre3 = HEAP32[$f + 4 >> 2] | 0;
   if ($$pre) {
    $27 = $f + 108 | 0;
    HEAP32[$27 >> 2] = $$pre + 1 - $$pre3 + (HEAP32[$27 >> 2] | 0);
   }
   $32 = $$pre3 + -1 | 0;
   if ((HEAPU8[$32 >> 0] | 0 | 0) == ($6 | 0)) {
    $$0 = $6;
    return $$0 | 0;
   }
   HEAP8[$32 >> 0] = $6;
   $$0 = $6;
   return $$0 | 0;
  }
 }
 HEAP32[$f + 100 >> 2] = 0;
 $$0 = -1;
 return $$0 | 0;
}

function _luaG_runerror($L, $fmt, $varargs) {
 $L = $L | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $10 = 0, $12 = 0, $2 = 0, $26 = 0, $30 = 0, $argp = 0, $buff$i = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $vararg_buffer = sp;
 $buff$i = sp + 32 | 0;
 $argp = sp + 16 | 0;
 HEAP32[$argp >> 2] = $varargs;
 $0 = _luaO_pushvfstring($L, $fmt, $argp) | 0;
 $2 = HEAP32[$L + 16 >> 2] | 0;
 if (!(HEAP8[$2 + 34 >> 0] & 2)) _luaG_errormsg($L);
 $10 = HEAP32[(HEAP32[HEAP32[$2 >> 2] >> 2] | 0) + 12 >> 2] | 0;
 $12 = HEAP32[$10 + 56 >> 2] | 0;
 if (!$12) $30 = -1; else $30 = HEAP32[$12 + (((HEAP32[$2 + 20 >> 2] | 0) - (HEAP32[$10 + 48 >> 2] | 0) >> 2) + -1 << 2) >> 2] | 0;
 $26 = HEAP32[$10 + 72 >> 2] | 0;
 if (!$26) {
  HEAP8[$buff$i >> 0] = 63;
  HEAP8[$buff$i + 1 >> 0] = 0;
 } else _luaO_chunkid($buff$i, $26 + 24 | 0, 60);
 HEAP32[$vararg_buffer >> 2] = $buff$i;
 HEAP32[$vararg_buffer + 4 >> 2] = $30;
 HEAP32[$vararg_buffer + 8 >> 2] = $0;
 _luaO_pushfstring($L, 67512, $vararg_buffer) | 0;
 _luaG_errormsg($L);
}

function __Z19push_revolute_jointP9lua_StateP5Joint($L, $revolute_joint) {
 $L = $L | 0;
 $revolute_joint = $revolute_joint | 0;
 var $2 = 0, $3 = 0, $5 = 0, $8 = 0, $9 = 0;
 if (!$L) ___assert_fail(23976, 4112, 22, 4216);
 if (!$revolute_joint) ___assert_fail(4240, 4112, 22, 4216);
 _lua_getfield($L, -1001e3, 19984) | 0;
 $2 = $revolute_joint + 12 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if ($3) {
  _lua_rawgeti($L, -1, $3) | 0;
  $8 = _lua_gettop($L) | 0;
  $9 = $8 + -1 | 0;
  _lua_rotate($L, $9, -1);
  _lua_settop($L, -2);
  return;
 }
 $5 = _lua_newuserdata($L, 4) | 0;
 if (!$5) _log_oom_and_exit();
 HEAP32[$5 >> 2] = $revolute_joint;
 _lua_createtable($L, 0, 0);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 64992);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 63048);
 _lua_pushvalue($L, -2);
 _lua_setfield($L, -2, 19992);
 _luaL_setmetatable($L, 4240);
 _lua_setmetatable($L, -2) | 0;
 _lua_pushvalue($L, -1);
 HEAP32[$2 >> 2] = _luaL_ref($L, -3) | 0;
 $8 = _lua_gettop($L) | 0;
 $9 = $8 + -1 | 0;
 _lua_rotate($L, $9, -1);
 _lua_settop($L, -2);
 return;
}

function __Z19push_friction_jointP9lua_StateP5Joint($L, $friction_joint) {
 $L = $L | 0;
 $friction_joint = $friction_joint | 0;
 var $2 = 0, $3 = 0, $5 = 0, $8 = 0, $9 = 0;
 if (!$L) ___assert_fail(23976, 4112, 26, 4368);
 if (!$friction_joint) ___assert_fail(4392, 4112, 26, 4368);
 _lua_getfield($L, -1001e3, 19984) | 0;
 $2 = $friction_joint + 12 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if ($3) {
  _lua_rawgeti($L, -1, $3) | 0;
  $8 = _lua_gettop($L) | 0;
  $9 = $8 + -1 | 0;
  _lua_rotate($L, $9, -1);
  _lua_settop($L, -2);
  return;
 }
 $5 = _lua_newuserdata($L, 4) | 0;
 if (!$5) _log_oom_and_exit();
 HEAP32[$5 >> 2] = $friction_joint;
 _lua_createtable($L, 0, 0);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 64992);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 63048);
 _lua_pushvalue($L, -2);
 _lua_setfield($L, -2, 19992);
 _luaL_setmetatable($L, 4392);
 _lua_setmetatable($L, -2) | 0;
 _lua_pushvalue($L, -1);
 HEAP32[$2 >> 2] = _luaL_ref($L, -3) | 0;
 $8 = _lua_gettop($L) | 0;
 $9 = $8 + -1 | 0;
 _lua_rotate($L, $9, -1);
 _lua_settop($L, -2);
 return;
}

function __Z19push_distance_jointP9lua_StateP5Joint($L, $distance_joint) {
 $L = $L | 0;
 $distance_joint = $distance_joint | 0;
 var $2 = 0, $3 = 0, $5 = 0, $8 = 0, $9 = 0;
 if (!$L) ___assert_fail(23976, 4112, 21, 4176);
 if (!$distance_joint) ___assert_fail(4200, 4112, 21, 4176);
 _lua_getfield($L, -1001e3, 19984) | 0;
 $2 = $distance_joint + 12 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if ($3) {
  _lua_rawgeti($L, -1, $3) | 0;
  $8 = _lua_gettop($L) | 0;
  $9 = $8 + -1 | 0;
  _lua_rotate($L, $9, -1);
  _lua_settop($L, -2);
  return;
 }
 $5 = _lua_newuserdata($L, 4) | 0;
 if (!$5) _log_oom_and_exit();
 HEAP32[$5 >> 2] = $distance_joint;
 _lua_createtable($L, 0, 0);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 64992);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 63048);
 _lua_pushvalue($L, -2);
 _lua_setfield($L, -2, 19992);
 _luaL_setmetatable($L, 4200);
 _lua_setmetatable($L, -2) | 0;
 _lua_pushvalue($L, -1);
 HEAP32[$2 >> 2] = _luaL_ref($L, -3) | 0;
 $8 = _lua_gettop($L) | 0;
 $9 = $8 + -1 | 0;
 _lua_rotate($L, $9, -1);
 _lua_settop($L, -2);
 return;
}

function _png_handle_gAMA($png_ptr, $info_ptr, $length) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 $length = $length | 0;
 var $1 = 0, $26 = 0, $buf = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $buf = sp;
 $1 = HEAP32[$png_ptr + 208 >> 2] | 0;
 if (!($1 & 1)) _png_chunk_error($png_ptr, 75496);
 if ($1 & 6) {
  _png_crc_finish($png_ptr, $length) | 0;
  _png_chunk_benign_error($png_ptr, 75472);
  STACKTOP = sp;
  return;
 }
 if (($length | 0) != 4) {
  _png_crc_finish($png_ptr, $length) | 0;
  _png_chunk_benign_error($png_ptr, 75488);
  STACKTOP = sp;
  return;
 }
 if ($png_ptr) {
  _png_read_data($png_ptr, $buf, 4);
  _png_calculate_crc($png_ptr, $buf, 4);
 }
 if (_png_crc_finish($png_ptr, 0) | 0) {
  STACKTOP = sp;
  return;
 }
 $26 = (HEAPU8[$buf + 1 >> 0] | 0) << 16 | (HEAPU8[$buf >> 0] | 0) << 24 | (HEAPU8[$buf + 2 >> 0] | 0) << 8 | (HEAPU8[$buf + 3 >> 0] | 0);
 _png_colorspace_set_gamma($png_ptr, $png_ptr + 824 | 0, ($26 | 0) > -1 ? $26 : -1);
 _png_colorspace_sync($png_ptr, $info_ptr);
 STACKTOP = sp;
 return;
}

function _luaK_exp2nextreg($fs, $e) {
 $fs = $fs | 0;
 $e = $e | 0;
 var $10 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 _luaK_dischargevars($fs, $e);
 if ((HEAP32[$e >> 2] | 0) == 7) {
  $3 = HEAP32[$e + 4 >> 2] | 0;
  if (!($3 & 256)) if ((HEAPU8[$fs + 42 >> 0] | 0 | 0) <= ($3 | 0)) {
   $10 = $fs + 44 | 0;
   HEAP8[$10 >> 0] = (HEAP8[$10 >> 0] | 0) + -1 << 24 >> 24;
  }
 }
 $13 = $fs + 44 | 0;
 $14 = HEAP8[$13 >> 0] | 0;
 $16 = ($14 & 255) + 1 | 0;
 $18 = (HEAP32[$fs >> 2] | 0) + 8 | 0;
 if ($16 >>> 0 <= (HEAPU8[$18 >> 0] | 0) >>> 0) {
  $27 = $14;
  $26 = $27 & 255;
  $28 = $26 + 1 | 0;
  $29 = $28 & 255;
  HEAP8[$13 >> 0] = $29;
  $30 = $28 & 255;
  $31 = $30 + -1 | 0;
  _exp2reg($fs, $e, $31);
  return;
 }
 if ($16 >>> 0 > 249) _luaX_syntaxerror(HEAP32[$fs + 8 >> 2] | 0, 65488);
 HEAP8[$18 >> 0] = $16;
 $27 = HEAP8[$13 >> 0] | 0;
 $26 = $27 & 255;
 $28 = $26 + 1 | 0;
 $29 = $28 & 255;
 HEAP8[$13 >> 0] = $29;
 $30 = $28 & 255;
 $31 = $30 + -1 | 0;
 _exp2reg($fs, $e, $31);
 return;
}

function _db_debug($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $buffer = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $vararg_buffer = sp;
 $buffer = sp + 4 | 0;
 $0 = HEAP32[_stderr >> 2] | 0;
 _fwrite(66912, 11, 1, $0 | 0) | 0;
 _fflush($0 | 0) | 0;
 $1 = HEAP32[_stdin >> 2] | 0;
 if (!(_fgets($buffer | 0, 250, $1 | 0) | 0)) {
  STACKTOP = sp;
  return 0;
 }
 while (1) {
  if (!(_strcmp($buffer, 66928) | 0)) {
   label = 7;
   break;
  }
  if (!(_luaL_loadbufferx($L, $buffer, _strlen($buffer | 0) | 0, 66936, 0) | 0)) {
   if (_lua_pcallk($L, 0, 0, 0, 0, 0) | 0) label = 5;
  } else label = 5;
  if ((label | 0) == 5) {
   label = 0;
   HEAP32[$vararg_buffer >> 2] = _lua_tolstring($L, -1, 0) | 0;
   _fprintf($0 | 0, 66960, $vararg_buffer | 0) | 0;
   _fflush($0 | 0) | 0;
  }
  _lua_settop($L, 0);
  _fwrite(66912, 11, 1, $0 | 0) | 0;
  _fflush($0 | 0) | 0;
  if (!(_fgets($buffer | 0, 250, $1 | 0) | 0)) {
   label = 7;
   break;
  }
 }
 if ((label | 0) == 7) {
  STACKTOP = sp;
  return 0;
 }
 return 0;
}

function _lua_touserdata($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0 = 0, $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $31 = 0, $4 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 3) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 59168;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 3) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 4 >> 2] | 0) == 22) $$0$i = 59168; else {
   $21 = HEAP32[$17 >> 2] | 0;
   if (($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0)) $$0$i = 59168; else $$0$i = $21 + 16 + ($16 + -1 << 3) | 0;
  }
 } while (0);
 $31 = HEAP32[$$0$i + 4 >> 2] & 15;
 if (($31 | 0) == 2) {
  $$0 = HEAP32[$$0$i >> 2] | 0;
  return $$0 | 0;
 } else if (($31 | 0) == 7) {
  $$0 = (HEAP32[$$0$i >> 2] | 0) + 24 | 0;
  return $$0 | 0;
 } else {
  $$0 = 0;
  return $$0 | 0;
 }
 return 0;
}

function _luaD_call($L, $func, $nResults, $allowyield) {
 $L = $L | 0;
 $func = $func | 0;
 $nResults = $nResults | 0;
 $allowyield = $allowyield | 0;
 var $0 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $0 = $L + 106 | 0;
 $2 = (HEAP16[$0 >> 1] | 0) + 1 << 16 >> 16;
 HEAP16[$0 >> 1] = $2;
 if (($2 & 65535) > 199) {
  if ($2 << 16 >> 16 == 200) _luaG_runerror($L, 56224, $vararg_buffer);
  if (($2 & 65535) > 224) _luaD_throw($L, 6);
 }
 $6 = ($allowyield | 0) != 0;
 if (!$6) {
  $7 = $L + 104 | 0;
  HEAP16[$7 >> 1] = (HEAP16[$7 >> 1] | 0) + 1 << 16 >> 16;
 }
 if (!(_luaD_precall($L, $func, $nResults) | 0)) _luaV_execute($L);
 if ($6) {
  $15 = HEAP16[$0 >> 1] | 0;
  $16 = $15 + -1 << 16 >> 16;
  HEAP16[$0 >> 1] = $16;
  STACKTOP = sp;
  return;
 }
 $12 = $L + 104 | 0;
 HEAP16[$12 >> 1] = (HEAP16[$12 >> 1] | 0) + -1 << 16 >> 16;
 $15 = HEAP16[$0 >> 1] | 0;
 $16 = $15 + -1 << 16 >> 16;
 HEAP16[$0 >> 1] = $16;
 STACKTOP = sp;
 return;
}

function _stbtt_GetGlyphBox($info, $glyph_index, $x0, $y0, $x1, $y1) {
 $info = $info | 0;
 $glyph_index = $glyph_index | 0;
 $x0 = $x0 | 0;
 $y0 = $y0 | 0;
 $x1 = $x1 | 0;
 $y1 = $y1 | 0;
 var $$0 = 0, $0 = 0, $16 = 0, $28 = 0, $4 = 0, $40 = 0;
 $0 = _stbtt__GetGlyfOffset($info, $glyph_index) | 0;
 if (($0 | 0) < 0) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ($x0) {
  $4 = HEAP32[$info + 4 >> 2] | 0;
  HEAP32[$x0 >> 2] = ((HEAPU8[$4 + ($0 + 2) >> 0] | 0) << 8 | (HEAPU8[$4 + ($0 + 3) >> 0] | 0)) << 16 >> 16;
 }
 if ($y0) {
  $16 = HEAP32[$info + 4 >> 2] | 0;
  HEAP32[$y0 >> 2] = ((HEAPU8[$16 + ($0 + 4) >> 0] | 0) << 8 | (HEAPU8[$16 + ($0 + 5) >> 0] | 0)) << 16 >> 16;
 }
 if ($x1) {
  $28 = HEAP32[$info + 4 >> 2] | 0;
  HEAP32[$x1 >> 2] = ((HEAPU8[$28 + ($0 + 6) >> 0] | 0) << 8 | (HEAPU8[$28 + ($0 + 7) >> 0] | 0)) << 16 >> 16;
 }
 if (!$y1) {
  $$0 = 1;
  return $$0 | 0;
 }
 $40 = HEAP32[$info + 4 >> 2] | 0;
 HEAP32[$y1 >> 2] = ((HEAPU8[$40 + ($0 + 8) >> 0] | 0) << 8 | (HEAPU8[$40 + ($0 + 9) >> 0] | 0)) << 16 >> 16;
 $$0 = 1;
 return $$0 | 0;
}

function _markmt($g) {
 $g = $g | 0;
 var $1 = 0, $15 = 0, $22 = 0, $29 = 0, $36 = 0, $43 = 0, $50 = 0, $57 = 0, $8 = 0;
 $1 = HEAP32[$g + 232 >> 2] | 0;
 if ($1) if (HEAP8[$1 + 5 >> 0] & 3) _reallymarkobject($g, $1);
 $8 = HEAP32[$g + 236 >> 2] | 0;
 if ($8) if (HEAP8[$8 + 5 >> 0] & 3) _reallymarkobject($g, $8);
 $15 = HEAP32[$g + 240 >> 2] | 0;
 if ($15) if (HEAP8[$15 + 5 >> 0] & 3) _reallymarkobject($g, $15);
 $22 = HEAP32[$g + 244 >> 2] | 0;
 if ($22) if (HEAP8[$22 + 5 >> 0] & 3) _reallymarkobject($g, $22);
 $29 = HEAP32[$g + 248 >> 2] | 0;
 if ($29) if (HEAP8[$29 + 5 >> 0] & 3) _reallymarkobject($g, $29);
 $36 = HEAP32[$g + 252 >> 2] | 0;
 if ($36) if (HEAP8[$36 + 5 >> 0] & 3) _reallymarkobject($g, $36);
 $43 = HEAP32[$g + 256 >> 2] | 0;
 if ($43) if (HEAP8[$43 + 5 >> 0] & 3) _reallymarkobject($g, $43);
 $50 = HEAP32[$g + 260 >> 2] | 0;
 if ($50) if (HEAP8[$50 + 5 >> 0] & 3) _reallymarkobject($g, $50);
 $57 = HEAP32[$g + 264 >> 2] | 0;
 if (!$57) return;
 if (!(HEAP8[$57 + 5 >> 0] & 3)) return;
 _reallymarkobject($g, $57);
 return;
}

function _lua_toboolean($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $30 = 0, $34 = 0, $35 = 0, $4 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 3) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 59168;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 3) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 4 >> 2] | 0) == 22) $$0$i = 59168; else {
   $21 = HEAP32[$17 >> 2] | 0;
   if (($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0)) $$0$i = 59168; else $$0$i = $21 + 16 + ($16 + -1 << 3) | 0;
  }
 } while (0);
 $30 = HEAP32[$$0$i + 4 >> 2] | 0;
 if (!$30) {
  $35 = 0;
  $34 = $35 & 1;
  return $34 | 0;
 }
 if (($30 | 0) != 1) {
  $35 = 1;
  $34 = $35 & 1;
  return $34 | 0;
 }
 $35 = (HEAP32[$$0$i >> 2] | 0) != 0;
 $34 = $35 & 1;
 return $34 | 0;
}

function __ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform($this, $broadPhase, $xf) {
 $this = $this | 0;
 $broadPhase = $broadPhase | 0;
 $xf = $xf | 0;
 var $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $8 = 0, $i$01 = 0;
 $0 = $this + 28 | 0;
 if (HEAP32[$0 >> 2] | 0) ___assert_fail(88040, 88064, 124, 88120);
 $3 = $this + 12 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] & 511]($4) | 0;
 HEAP32[$0 >> 2] = $8;
 if (($8 | 0) <= 0) return;
 $10 = $this + 24 | 0;
 $i$01 = 0;
 do {
  $11 = HEAP32[$10 >> 2] | 0;
  $12 = $11 + ($i$01 * 28 | 0) | 0;
  $13 = HEAP32[$3 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$13 >> 2] | 0) + 24 >> 2] & 31]($13, $12, $xf, $i$01);
  HEAP32[$11 + ($i$01 * 28 | 0) + 24 >> 2] = __ZN12b2BroadPhase11CreateProxyERK6b2AABBPv($broadPhase, $12, $12) | 0;
  HEAP32[$11 + ($i$01 * 28 | 0) + 16 >> 2] = $this;
  HEAP32[$11 + ($i$01 * 28 | 0) + 20 >> 2] = $i$01;
  $i$01 = $i$01 + 1 | 0;
 } while (($i$01 | 0) < (HEAP32[$0 >> 2] | 0));
 return;
}

function _lua_seti($L, $idx, $n) {
 $L = $L | 0;
 $idx = $idx | 0;
 $n = $n | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $29 = 0, $30 = 0, $4 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 3) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 59168;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 3) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 4 >> 2] | 0) == 22) $$0$i = 59168; else {
   $21 = HEAP32[$17 >> 2] | 0;
   if (($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0)) $$0$i = 59168; else $$0$i = $21 + 16 + ($16 + -1 << 3) | 0;
  }
 } while (0);
 $29 = $L + 8 | 0;
 $30 = HEAP32[$29 >> 2] | 0;
 HEAP32[$29 >> 2] = $30 + 8;
 HEAP32[$30 >> 2] = $n;
 HEAP32[$30 + 4 >> 2] = 19;
 _luaV_settable($L, $$0$i, $30, $30 + -8 | 0);
 HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + -16;
 return;
}

function __Z16push_mouse_jointP9lua_StateP5Joint($L, $mouse_joint) {
 $L = $L | 0;
 $mouse_joint = $mouse_joint | 0;
 var $2 = 0, $3 = 0, $5 = 0, $8 = 0, $9 = 0;
 if (!$L) ___assert_fail(23976, 4112, 23, 4256);
 if (!$mouse_joint) ___assert_fail(4280, 4112, 23, 4256);
 _lua_getfield($L, -1001e3, 19984) | 0;
 $2 = $mouse_joint + 12 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if ($3) {
  _lua_rawgeti($L, -1, $3) | 0;
  $8 = _lua_gettop($L) | 0;
  $9 = $8 + -1 | 0;
  _lua_rotate($L, $9, -1);
  _lua_settop($L, -2);
  return;
 }
 $5 = _lua_newuserdata($L, 4) | 0;
 if (!$5) _log_oom_and_exit();
 HEAP32[$5 >> 2] = $mouse_joint;
 _lua_createtable($L, 0, 0);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 64992);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 63048);
 _lua_pushvalue($L, -2);
 _lua_setfield($L, -2, 19992);
 _luaL_setmetatable($L, 4280);
 _lua_setmetatable($L, -2) | 0;
 _lua_pushvalue($L, -1);
 HEAP32[$2 >> 2] = _luaL_ref($L, -3) | 0;
 $8 = _lua_gettop($L) | 0;
 $9 = $8 + -1 | 0;
 _lua_rotate($L, $9, -1);
 _lua_settop($L, -2);
 return;
}

function _findfield($L, $objidx, $level) {
 $L = $L | 0;
 $objidx = $objidx | 0;
 $level = $level | 0;
 var $$0 = 0, $6 = 0, label = 0;
 if (!$L) ___assert_fail(23976, 568, 34, 832);
 if (!$level) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((_lua_type($L, -1) | 0) != 5) {
  $$0 = 0;
  return $$0 | 0;
 }
 _lua_pushnil($L);
 if (!(_lua_next($L, -2) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $6 = $level + -1 | 0;
 while (1) {
  if ((_lua_type($L, -2) | 0) == 4) {
   if (_lua_rawequal($L, $objidx, -1) | 0) {
    label = 9;
    break;
   }
   if (_findfield($L, $objidx, $6) | 0) {
    label = 11;
    break;
   }
  }
  _lua_settop($L, -2);
  if (!(_lua_next($L, -2) | 0)) {
   $$0 = 0;
   label = 13;
   break;
  }
 }
 if ((label | 0) == 9) {
  _lua_settop($L, -2);
  $$0 = 1;
  return $$0 | 0;
 } else if ((label | 0) == 11) {
  _lua_rotate($L, -2, -1);
  _lua_settop($L, -2);
  _lua_pushlstring($L, 107776, 1) | 0;
  _lua_rotate($L, -2, 1);
  _lua_concat($L, 3);
  $$0 = 1;
  return $$0 | 0;
 } else if ((label | 0) == 13) return $$0 | 0;
 return 0;
}

function _luaC_freeallobjects($L) {
 $L = $L | 0;
 var $$0$i$i = 0, $0 = 0, $1 = 0, $11 = 0, $13 = 0, $14 = 0, $3 = 0, $5 = 0, $6 = 0, $9 = 0, $lastnext$02$i = 0, $lastnext$02$i$phi = 0;
 $0 = $L + 12 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $$0$i$i = $1 + 84 | 0;
 while (1) {
  $3 = HEAP32[$$0$i$i >> 2] | 0;
  if (!$3) break; else $$0$i$i = $3;
 }
 $5 = $1 + 60 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 if (!$6) $14 = $1; else {
  $9 = $6;
  $lastnext$02$i = $$0$i$i;
  while (1) {
   HEAP32[$5 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$9 >> 2] = HEAP32[$lastnext$02$i >> 2];
   HEAP32[$lastnext$02$i >> 2] = $9;
   $11 = HEAP32[$5 >> 2] | 0;
   if (!$11) break; else {
    $lastnext$02$i$phi = $9;
    $9 = $11;
    $lastnext$02$i = $lastnext$02$i$phi;
   }
  }
  $14 = HEAP32[$0 >> 2] | 0;
 }
 $13 = $14 + 84 | 0;
 if (HEAP32[$13 >> 2] | 0) do _GCTM($L, 0); while ((HEAP32[$13 >> 2] | 0) != 0);
 HEAP8[$1 + 48 >> 0] = 3;
 HEAP8[$1 + 50 >> 0] = 0;
 _sweeplist($L, $5, -1) | 0;
 _sweeplist($L, $1 + 52 | 0, -1) | 0;
 _sweeplist($L, $1 + 88 | 0, -1) | 0;
 return;
}

function _lua_geti($L, $idx, $n) {
 $L = $L | 0;
 $idx = $idx | 0;
 $n = $n | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $29 = 0, $30 = 0, $4 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 3) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 59168;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 3) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 4 >> 2] | 0) == 22) $$0$i = 59168; else {
   $21 = HEAP32[$17 >> 2] | 0;
   if (($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0)) $$0$i = 59168; else $$0$i = $21 + 16 + ($16 + -1 << 3) | 0;
  }
 } while (0);
 $29 = $L + 8 | 0;
 $30 = HEAP32[$29 >> 2] | 0;
 HEAP32[$30 >> 2] = $n;
 HEAP32[$30 + 4 >> 2] = 19;
 HEAP32[$29 >> 2] = $30 + 8;
 _luaV_gettable($L, $$0$i, $30, $30);
 return HEAP32[(HEAP32[$29 >> 2] | 0) + -4 >> 2] & 15 | 0;
}

function __Z15push_rope_jointP9lua_StateP5Joint($L, $rope_joint) {
 $L = $L | 0;
 $rope_joint = $rope_joint | 0;
 var $2 = 0, $3 = 0, $5 = 0, $8 = 0, $9 = 0;
 if (!$L) ___assert_fail(23976, 4112, 20, 4144);
 if (!$rope_joint) ___assert_fail(4160, 4112, 20, 4144);
 _lua_getfield($L, -1001e3, 19984) | 0;
 $2 = $rope_joint + 12 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if ($3) {
  _lua_rawgeti($L, -1, $3) | 0;
  $8 = _lua_gettop($L) | 0;
  $9 = $8 + -1 | 0;
  _lua_rotate($L, $9, -1);
  _lua_settop($L, -2);
  return;
 }
 $5 = _lua_newuserdata($L, 4) | 0;
 if (!$5) _log_oom_and_exit();
 HEAP32[$5 >> 2] = $rope_joint;
 _lua_createtable($L, 0, 0);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 64992);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 63048);
 _lua_pushvalue($L, -2);
 _lua_setfield($L, -2, 19992);
 _luaL_setmetatable($L, 4160);
 _lua_setmetatable($L, -2) | 0;
 _lua_pushvalue($L, -1);
 HEAP32[$2 >> 2] = _luaL_ref($L, -3) | 0;
 $8 = _lua_gettop($L) | 0;
 $9 = $8 + -1 | 0;
 _lua_rotate($L, $9, -1);
 _lua_settop($L, -2);
 return;
}

function __Z15push_gear_jointP9lua_StateP5Joint($L, $gear_joint) {
 $L = $L | 0;
 $gear_joint = $gear_joint | 0;
 var $2 = 0, $3 = 0, $5 = 0, $8 = 0, $9 = 0;
 if (!$L) ___assert_fail(23976, 4112, 25, 4336);
 if (!$gear_joint) ___assert_fail(4352, 4112, 25, 4336);
 _lua_getfield($L, -1001e3, 19984) | 0;
 $2 = $gear_joint + 12 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if ($3) {
  _lua_rawgeti($L, -1, $3) | 0;
  $8 = _lua_gettop($L) | 0;
  $9 = $8 + -1 | 0;
  _lua_rotate($L, $9, -1);
  _lua_settop($L, -2);
  return;
 }
 $5 = _lua_newuserdata($L, 4) | 0;
 if (!$5) _log_oom_and_exit();
 HEAP32[$5 >> 2] = $gear_joint;
 _lua_createtable($L, 0, 0);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 64992);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 63048);
 _lua_pushvalue($L, -2);
 _lua_setfield($L, -2, 19992);
 _luaL_setmetatable($L, 4352);
 _lua_setmetatable($L, -2) | 0;
 _lua_pushvalue($L, -1);
 HEAP32[$2 >> 2] = _luaL_ref($L, -3) | 0;
 $8 = _lua_gettop($L) | 0;
 $9 = $8 + -1 | 0;
 _lua_rotate($L, $9, -1);
 _lua_settop($L, -2);
 return;
}

function _mlua_draw_point_tex($L) {
 $L = $L | 0;
 var $$0 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $3 = 0, $7 = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 if (!$L) ___assert_fail(23976, 19928, 307, 21352);
 if (!(_display_get_draw_from() | 0)) _luaL_error($L, 21376, sp) | 0;
 $3 = _display_get_current_buffer() | 0;
 do if (HEAP8[$3 + 68 >> 0] | 0) {
  $7 = HEAP32[$3 >> 2] | 0;
  if (_display_is_debug() | 0) {
   if (!($7 & -3)) break;
   if (($7 | 0) == 1) label = 10;
  } else if (!$7) break; else if (($7 | 0) == 1) label = 10;
  if ((label | 0) == 10) if (HEAP8[$3 + 57 >> 0] | 0) break;
  $$0 = _luaL_error($L, 21424, $vararg_buffer1) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } while (0);
 $15 = +_luaL_checknumber($L, 1);
 $16 = +_luaL_checknumber($L, 2);
 $17 = +_luaL_checknumber($L, 3);
 $18 = +_luaL_checknumber($L, 4);
 _display_draw_point_tex($15, $16, $17, $18, +_luaL_checknumber($L, 5));
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _mlua_get_pixel_surface($L) {
 $L = $L | 0;
 var $1 = 0, $2 = 0, $3 = 0, $a = 0, $b = 0, $g = 0, $r = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $r = sp + 48 | 0;
 $g = sp + 44 | 0;
 $b = sp + 40 | 0;
 $a = sp + 36 | 0;
 if (!$L) ___assert_fail(23976, 19928, 259, 21e3);
 $1 = _pop_surface($L, 1) | 0;
 $2 = _luaL_checkinteger($L, 2) | 0;
 $3 = _luaL_checkinteger($L, 3) | 0;
 if (($1 | 0) == (_display_get_draw_on() | 0)) _luaL_error($L, 21024, sp) | 0;
 if (!$2) _luaL_error($L, 21072, sp + 8 | 0) | 0;
 if (!$3) _luaL_error($L, 21120, sp + 16 | 0) | 0;
 if ($2 >>> 0 > (HEAP32[$1 + 4 >> 2] | 0) >>> 0) _luaL_error($L, 21168, sp + 24 | 0) | 0;
 if ($3 >>> 0 > (HEAP32[$1 + 8 >> 2] | 0) >>> 0) _luaL_error($L, 21224, sp + 32 | 0) | 0;
 _display_get_pixel($1, $2 + -1 | 0, $3 + -1 | 0, $r, $g, $b, $a);
 _lua_pushinteger($L, HEAP32[$r >> 2] | 0);
 _lua_pushinteger($L, HEAP32[$g >> 2] | 0);
 _lua_pushinteger($L, HEAP32[$b >> 2] | 0);
 _lua_pushinteger($L, HEAP32[$a >> 2] | 0);
 STACKTOP = sp;
 return 4;
}

function __ZNK12b2ChainShape5CloneEP16b2BlockAllocator($this, $allocator) {
 $this = $this | 0;
 $allocator = $allocator | 0;
 var $0 = 0, $12 = 0, $15 = 0, $20 = 0, $21 = 0, $27 = 0, $32 = 0, $33 = 0;
 $0 = __ZN16b2BlockAllocator8AllocateEi($allocator, 40) | 0;
 if (!$0) $12 = 0; else {
  HEAP32[$0 >> 2] = 81304;
  HEAP32[$0 + 4 >> 2] = 3;
  HEAPF32[$0 + 8 >> 2] = .009999999776482582;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP8[$0 + 36 >> 0] = 0;
  HEAP8[$0 + 37 >> 0] = 0;
  $12 = $0;
 }
 __ZN12b2ChainShape11CreateChainEPK6b2Vec2i($12, HEAP32[$this + 12 >> 2] | 0, HEAP32[$this + 16 >> 2] | 0);
 $15 = $this + 20 | 0;
 $20 = HEAP32[$15 + 4 >> 2] | 0;
 $21 = $12 + 20 | 0;
 HEAP32[$21 >> 2] = HEAP32[$15 >> 2];
 HEAP32[$21 + 4 >> 2] = $20;
 $27 = $this + 28 | 0;
 $32 = HEAP32[$27 + 4 >> 2] | 0;
 $33 = $12 + 28 | 0;
 HEAP32[$33 >> 2] = HEAP32[$27 >> 2];
 HEAP32[$33 + 4 >> 2] = $32;
 HEAP8[$12 + 36 >> 0] = HEAP8[$this + 36 >> 0] | 0;
 HEAP8[$12 + 37 >> 0] = HEAP8[$this + 37 >> 0] | 0;
 return $12 | 0;
}

function __ZN6b2Body19SynchronizeFixturesEv($this) {
 $this = $this | 0;
 var $1 = 0.0, $10 = 0.0, $2 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $30 = 0, $33 = 0, $4 = 0.0, $7 = 0.0, $f$03 = 0, $f$04 = 0, $xf1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $xf1 = sp;
 $1 = +HEAPF32[$this + 52 >> 2];
 $2 = +Math_sin(+$1);
 HEAPF32[$xf1 + 8 >> 2] = $2;
 $4 = +Math_cos(+$1);
 HEAPF32[$xf1 + 12 >> 2] = $4;
 $7 = +HEAPF32[$this + 28 >> 2];
 $10 = +HEAPF32[$this + 32 >> 2];
 $22 = +(+HEAPF32[$this + 36 >> 2] - ($4 * $7 - $2 * $10));
 $23 = +(+HEAPF32[$this + 40 >> 2] - ($7 * $2 + $4 * $10));
 $24 = $xf1;
 HEAPF32[$24 >> 2] = $22;
 HEAPF32[$24 + 4 >> 2] = $23;
 $30 = (HEAP32[$this + 88 >> 2] | 0) + 102872 | 0;
 $f$03 = HEAP32[$this + 100 >> 2] | 0;
 if (!$f$03) {
  STACKTOP = sp;
  return;
 }
 $33 = $this + 12 | 0;
 $f$04 = $f$03;
 do {
  __ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4_($f$04, $30, $xf1, $33);
  $f$04 = HEAP32[$f$04 + 4 >> 2] | 0;
 } while (($f$04 | 0) != 0);
 STACKTOP = sp;
 return;
}

function _shader_feed($s, $name, $value) {
 $s = $s | 0;
 $name = $name | 0;
 $value = +$value;
 var $13 = 0, $3 = 0, $4 = 0, $6 = 0, $prog = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $prog = sp + 4 | 0;
 if (!$s) ___assert_fail(23264, 18e3, 161, 18032);
 if (!$name) ___assert_fail(66832, 18e3, 162, 18032);
 _glGetIntegerv(35725, $prog | 0);
 $3 = _glGetUniformLocation(HEAP32[$s >> 2] | 0, $name | 0) | 0;
 $4 = $s + 4 | 0;
 $6 = _glGetUniformLocation(HEAP32[$4 >> 2] | 0, $name | 0) | 0;
 if (($3 | 0) > -1) {
  _glUseProgram(HEAP32[$s >> 2] | 0);
  _glUniform1f($3 | 0, +$value);
 }
 if (($6 | 0) > -1) {
  _glUseProgram(HEAP32[$4 >> 2] | 0);
  _glUniform1f($6 | 0, +$value);
 }
 if (($6 & $3 | 0) >= 0) {
  $13 = HEAP32[$prog >> 2] | 0;
  _glUseProgram($13 | 0);
  STACKTOP = sp;
  return;
 }
 HEAP32[$vararg_buffer >> 2] = $name;
 _log_internal(1, 22712, 18048, $vararg_buffer);
 $13 = HEAP32[$prog >> 2] | 0;
 _glUseProgram($13 | 0);
 STACKTOP = sp;
 return;
}

function _luaO_tostring($L, $obj) {
 $L = $L | 0;
 $obj = $obj | 0;
 var $0 = 0, $16 = 0, $7 = 0, $buff = 0, $len$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $buff = sp + 16 | 0;
 $0 = $obj + 4 | 0;
 if ((HEAP32[$0 >> 2] | 0) == 19) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$obj >> 2];
  $len$0 = _sprintf($buff, 59432, $vararg_buffer) | 0;
 } else {
  HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$obj >> 2];
  HEAP32[$vararg_buffer1 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_buffer1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $7 = _sprintf($buff, 59440, $vararg_buffer1) | 0;
  if (!(HEAP8[$buff + (_strspn($buff, 59448) | 0) >> 0] | 0)) {
   HEAP8[$buff + $7 >> 0] = 46;
   HEAP8[$buff + ($7 + 1) >> 0] = 48;
   $len$0 = $7 + 2 | 0;
  } else $len$0 = $7;
 }
 $16 = _luaS_newlstr($L, $buff, $len$0) | 0;
 HEAP32[$obj >> 2] = $16;
 HEAP32[$0 >> 2] = HEAPU8[$16 + 4 >> 0] | 64;
 STACKTOP = sp;
 return;
}

function _png_colorspace_sync($png_ptr, $info_ptr) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 var $13 = 0, $14 = 0, $4 = 0, $5 = 0, $8 = 0, $storemerge$i = 0, $storemerge1$i = 0, dest = 0, src = 0, stop = 0;
 if (!$info_ptr) return;
 dest = $info_ptr + 40 | 0;
 src = $png_ptr + 824 | 0;
 stop = dest + 76 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $4 = HEAP16[$info_ptr + 114 >> 1] | 0;
 $5 = $4 & 65535;
 if ($5 & 32768) {
  $8 = $info_ptr + 8 | 0;
  HEAP32[$8 >> 2] = HEAP32[$8 >> 2] & -6150;
  _png_free_data($png_ptr, $info_ptr, 16, -1);
  return;
 }
 $13 = $info_ptr + 8 | 0;
 $14 = HEAP32[$13 >> 2] | 0;
 $storemerge$i = ($5 & 128 | 0) == 0 ? $14 & -2049 : $14 | 2048;
 $storemerge1$i = ($4 & 2) == 0 ? $storemerge$i & -5 : $storemerge$i | 4;
 HEAP32[$13 >> 2] = $storemerge1$i;
 if (!($4 & 1)) {
  HEAP32[$13 >> 2] = $storemerge1$i & -2;
  return;
 } else {
  HEAP32[$13 >> 2] = $storemerge1$i | 1;
  return;
 }
}

function _mkdir_p($path) {
 $path = $path | 0;
 var $$0 = 0, $$alloca_mul = 0, $11 = 0, $2 = 0, $4 = 0, $p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$alloca_mul = (_strlen($path | 0) | 0) + 1 | 0;
 $2 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $$alloca_mul | 0) + 15 & -16) | 0;
 if (!$path) ___assert_fail(58208, 856, 92, 872);
 _strcpy($2 | 0, $path | 0) | 0;
 $4 = _strchr($2, 47) | 0;
 if (!$4) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else $p$01 = $4;
 while (1) {
  if (!(HEAP8[$p$01 >> 0] | 0)) {
   $$0 = 0;
   label = 9;
   break;
  }
  HEAP8[$p$01 >> 0] = 0;
  if ((_mkdir($2 | 0, 511) | 0) < 0) {
   $11 = HEAP32[(___errno_location() | 0) >> 2] | 0;
   if (($11 | 0) != 17) {
    label = 7;
    break;
   }
  }
  HEAP8[$p$01 >> 0] = 47;
  $p$01 = _strchr($p$01 + 1 | 0, 47) | 0;
  if (!$p$01) {
   $$0 = 0;
   label = 9;
   break;
  }
 }
 if ((label | 0) == 7) {
  $$0 = 0 - $11 | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else if ((label | 0) == 9) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function __Z25mlua_set_mass_center_bodyP9lua_State($L) {
 $L = $L | 0;
 var $1 = 0, $10 = 0, $11 = 0, $17 = 0.0, $2 = 0, $20 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $4 = 0.0, $6 = 0.0, $7 = 0.0, $9 = 0.0, $md = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $md = sp + 8 | 0;
 if (!$L) ___assert_fail(23976, 5248, 112, 5464);
 $1 = __Z8pop_bodyP9lua_Statei($L, 1) | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!$2) {
  _luaL_error($L, 5336, sp) | 0;
  $11 = HEAP32[$1 >> 2] | 0;
 } else $11 = $2;
 $4 = +_luaL_checknumber($L, 2);
 $6 = $4 / +HEAPF32[616];
 $7 = +_luaL_checknumber($L, 3);
 $9 = $7 / +HEAPF32[616];
 $10 = $11 + 116 | 0;
 HEAPF32[$md >> 2] = +HEAPF32[$10 >> 2];
 $17 = +HEAPF32[$11 + 28 >> 2];
 $20 = +HEAPF32[$11 + 32 >> 2];
 HEAPF32[$md + 12 >> 2] = +HEAPF32[$11 + 124 >> 2] + +HEAPF32[$10 >> 2] * ($17 * $17 + $20 * $20);
 $27 = +$6;
 $28 = +$9;
 $29 = $md + 4 | 0;
 HEAPF32[$29 >> 2] = $27;
 HEAPF32[$29 + 4 >> 2] = $28;
 __ZN6b2Body11SetMassDataEPK10b2MassData($11, $md);
 STACKTOP = sp;
 return 0;
}

function _lua_next($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $30 = 0, $33 = 0, $35 = 0, $4 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 3) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 59168;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 3) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 4 >> 2] | 0) == 22) $$0$i = 59168; else {
   $21 = HEAP32[$17 >> 2] | 0;
   if (($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0)) $$0$i = 59168; else $$0$i = $21 + 16 + ($16 + -1 << 3) | 0;
  }
 } while (0);
 $30 = $L + 8 | 0;
 $33 = _luaH_next($L, HEAP32[$$0$i >> 2] | 0, (HEAP32[$30 >> 2] | 0) + -8 | 0) | 0;
 $35 = HEAP32[$30 >> 2] | 0;
 HEAP32[$30 >> 2] = ($33 | 0) == 0 ? $35 + -8 | 0 : $35 + 8 | 0;
 return $33 | 0;
}

function __ZN12b2BroadPhase13QueryCallbackEi($this, $proxyId) {
 $this = $this | 0;
 $proxyId = $proxyId | 0;
 var $0 = 0, $1 = 0, $12 = 0, $15 = 0, $18 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0;
 $0 = $this + 56 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (($1 | 0) == ($proxyId | 0)) return 1;
 $3 = $this + 52 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $this + 48 | 0;
 $8 = $this + 44 | 0;
 if (($4 | 0) == (HEAP32[$5 >> 2] | 0)) {
  $9 = HEAP32[$8 >> 2] | 0;
  HEAP32[$5 >> 2] = $4 << 1;
  $12 = __Z7b2Alloci($4 << 4) | 0;
  HEAP32[$8 >> 2] = $12;
  _memcpy($12 | 0, $9 | 0, HEAP32[$3 >> 2] << 3 | 0) | 0;
  __Z6b2FreePv($9);
  $15 = HEAP32[$0 >> 2] | 0;
  $20 = HEAP32[$3 >> 2] | 0;
 } else {
  $15 = $1;
  $20 = $4;
 }
 $18 = HEAP32[$8 >> 2] | 0;
 HEAP32[$18 + ($20 << 3) >> 2] = ($15 | 0) > ($proxyId | 0) ? $proxyId : $15;
 $21 = HEAP32[$0 >> 2] | 0;
 HEAP32[$18 + (HEAP32[$3 >> 2] << 3) + 4 >> 2] = ($21 | 0) < ($proxyId | 0) ? $proxyId : $21;
 HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1;
 return 1;
}

function __Z31mlua_apply_angular_impulse_bodyP9lua_State($L) {
 $L = $L | 0;
 var $1 = 0, $11 = 0, $12 = 0, $15 = 0, $19 = 0, $2 = 0, $22 = 0, $27 = 0, $4 = 0.0, $5 = 0.0, $7 = 0.0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!$L) ___assert_fail(23976, 5248, 184, 5616);
 $1 = __Z8pop_bodyP9lua_Statei($L, 1) | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!$2) {
  _luaL_error($L, 5336, sp) | 0;
  $9 = HEAP32[$1 >> 2] | 0;
 } else $9 = $2;
 $4 = +_luaL_checknumber($L, 2);
 $5 = +HEAPF32[616];
 $7 = $4 / $5 / $5;
 if ((HEAP32[$9 >> 2] | 0) != 2) {
  STACKTOP = sp;
  return 0;
 }
 $11 = $9 + 4 | 0;
 $12 = HEAP16[$11 >> 1] | 0;
 if (!($12 & 2)) {
  $15 = $12 & 65535;
  if (!($15 & 2)) {
   $19 = ($15 | 2) & 65535;
   HEAP16[$11 >> 1] = $19;
   HEAPF32[$9 + 144 >> 2] = 0.0;
   $22 = $19;
  } else $22 = $12;
 } else $22 = $12;
 if (!($22 & 2)) {
  STACKTOP = sp;
  return 0;
 }
 $27 = $9 + 72 | 0;
 HEAPF32[$27 >> 2] = +HEAPF32[$27 >> 2] + $7 * +HEAPF32[$9 + 128 >> 2];
 STACKTOP = sp;
 return 0;
}

function __ZN13b2DynamicTreeC2Ev($this) {
 $this = $this | 0;
 var $$lcssa = 0, $0 = 0, $14 = 0, $2 = 0, $3 = 0, $7 = 0, $9 = 0, $i$01 = 0, $i$01$looptemp = 0;
 HEAP32[$this >> 2] = -1;
 $0 = $this + 12 | 0;
 HEAP32[$0 >> 2] = 16;
 HEAP32[$this + 8 >> 2] = 0;
 $2 = __Z7b2Alloci(576) | 0;
 $3 = $this + 4 | 0;
 HEAP32[$3 >> 2] = $2;
 _memset($2 | 0, 0, (HEAP32[$0 >> 2] | 0) * 36 | 0) | 0;
 $7 = (HEAP32[$0 >> 2] | 0) + -1 | 0;
 $9 = HEAP32[$3 >> 2] | 0;
 if (($7 | 0) > 0) {
  $i$01 = 0;
  do {
   $i$01$looptemp = $i$01;
   $i$01 = $i$01 + 1 | 0;
   HEAP32[$9 + ($i$01$looptemp * 36 | 0) + 20 >> 2] = $i$01;
   HEAP32[$9 + ($i$01$looptemp * 36 | 0) + 32 >> 2] = -1;
   $14 = (HEAP32[$0 >> 2] | 0) + -1 | 0;
  } while (($i$01 | 0) < ($14 | 0));
  $$lcssa = $14;
 } else $$lcssa = $7;
 HEAP32[$9 + ($$lcssa * 36 | 0) + 20 >> 2] = -1;
 HEAP32[$9 + (((HEAP32[$0 >> 2] | 0) + -1 | 0) * 36 | 0) + 32 >> 2] = -1;
 HEAP32[$this + 16 >> 2] = 0;
 HEAP32[$this + 20 >> 2] = 0;
 HEAP32[$this + 24 >> 2] = 0;
 return;
}

function _lua_pushvalue($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0$i = 0, $0 = 0, $1 = 0, $14 = 0, $15 = 0, $19 = 0, $27 = 0, $3 = 0, $32 = 0, $33 = 0, $6 = 0;
 $0 = $L + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $3 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $6 = (HEAP32[$3 >> 2] | 0) + ($idx << 3) | 0;
  $$0$i = $6 >>> 0 < $1 >>> 0 ? $6 : 59168;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = $1 + ($idx << 3) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $14 = -1001e3 - $idx | 0;
  $15 = HEAP32[$3 >> 2] | 0;
  if ((HEAP32[$15 + 4 >> 2] | 0) == 22) $$0$i = 59168; else {
   $19 = HEAP32[$15 >> 2] | 0;
   if (($14 | 0) > (HEAPU8[$19 + 6 >> 0] | 0 | 0)) $$0$i = 59168; else $$0$i = $19 + 16 + ($14 + -1 << 3) | 0;
  }
 } while (0);
 $27 = $$0$i;
 $32 = HEAP32[$27 + 4 >> 2] | 0;
 $33 = $1;
 HEAP32[$33 >> 2] = HEAP32[$27 >> 2];
 HEAP32[$33 + 4 >> 2] = $32;
 HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 8;
 return;
}

function _findfield1386($L, $objidx, $level) {
 $L = $L | 0;
 $objidx = $objidx | 0;
 $level = $level | 0;
 var $$0 = 0, $5 = 0, label = 0;
 if (!$level) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((_lua_type($L, -1) | 0) != 5) {
  $$0 = 0;
  return $$0 | 0;
 }
 _lua_pushnil($L);
 if (!(_lua_next($L, -2) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $5 = $level + -1 | 0;
 while (1) {
  if ((_lua_type($L, -2) | 0) == 4) {
   if (_lua_rawequal($L, $objidx, -1) | 0) {
    label = 7;
    break;
   }
   if (_findfield1386($L, $objidx, $5) | 0) {
    label = 9;
    break;
   }
  }
  _lua_settop($L, -2);
  if (!(_lua_next($L, -2) | 0)) {
   $$0 = 0;
   label = 11;
   break;
  }
 }
 if ((label | 0) == 7) {
  _lua_settop($L, -2);
  $$0 = 1;
  return $$0 | 0;
 } else if ((label | 0) == 9) {
  _lua_rotate($L, -2, -1);
  _lua_settop($L, -2);
  _lua_pushlstring($L, 107776, 1) | 0;
  _lua_rotate($L, -2, 1);
  _lua_concat($L, 3);
  $$0 = 1;
  return $$0 | 0;
 } else if ((label | 0) == 11) return $$0 | 0;
 return 0;
}

function _tremove($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $6 = 0, $9 = 0, $pos$0$lcssa = 0, $pos$02 = 0, $ta = 0, sp = 0, $pos$02$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ta = sp;
 _checktab($L, $ta);
 $0 = _luaL_len($L, 1) | 0;
 $1 = _luaL_optinteger($L, 2, $0) | 0;
 if (($1 | 0) != ($0 | 0)) if (($1 | 0) < 1 | ($1 | 0) > ($0 + 1 | 0)) _luaL_argerror($L, 1, 62672) | 0;
 $6 = HEAP32[$ta >> 2] | 0;
 FUNCTION_TABLE_iiii[$6 & 31]($L, 1, $1) | 0;
 $9 = HEAP32[$ta + 4 >> 2] | 0;
 if (($1 | 0) < ($0 | 0)) $pos$02 = $1; else {
  $pos$0$lcssa = $1;
  _lua_pushnil($L);
  FUNCTION_TABLE_viii[$9 & 15]($L, 1, $pos$0$lcssa);
  STACKTOP = sp;
  return 1;
 }
 do {
  $pos$02$looptemp = $pos$02;
  $pos$02 = $pos$02 + 1 | 0;
  FUNCTION_TABLE_iiii[$6 & 31]($L, 1, $pos$02) | 0;
  FUNCTION_TABLE_viii[$9 & 15]($L, 1, $pos$02$looptemp);
 } while (($pos$02 | 0) != ($0 | 0));
 $pos$0$lcssa = $0;
 _lua_pushnil($L);
 FUNCTION_TABLE_viii[$9 & 15]($L, 1, $pos$0$lcssa);
 STACKTOP = sp;
 return 1;
}

function __Z10push_shapeP9lua_StateP5Shape($L, $shape) {
 $L = $L | 0;
 $shape = $shape | 0;
 var $2 = 0, $3 = 0, $5 = 0, $8 = 0, $9 = 0;
 if (!$L) ___assert_fail(23976, 5080, 20, 5112);
 if (!$shape) ___assert_fail(5128, 5080, 20, 5112);
 _lua_getfield($L, -1001e3, 19984) | 0;
 $2 = $shape + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if ($3) {
  _lua_rawgeti($L, -1, $3) | 0;
  $8 = _lua_gettop($L) | 0;
  $9 = $8 + -1 | 0;
  _lua_rotate($L, $9, -1);
  _lua_settop($L, -2);
  return;
 }
 $5 = _lua_newuserdata($L, 4) | 0;
 if (!$5) _log_oom_and_exit();
 HEAP32[$5 >> 2] = $shape;
 _lua_createtable($L, 0, 0);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 64992);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 63048);
 _lua_pushvalue($L, -2);
 _lua_setfield($L, -2, 19992);
 _luaL_setmetatable($L, 5128);
 _lua_setmetatable($L, -2) | 0;
 _lua_pushvalue($L, -1);
 HEAP32[$2 >> 2] = _luaL_ref($L, -3) | 0;
 $8 = _lua_gettop($L) | 0;
 $9 = $8 + -1 | 0;
 _lua_rotate($L, $9, -1);
 _lua_settop($L, -2);
 return;
}

function _push_surface($L, $surface) {
 $L = $L | 0;
 $surface = $surface | 0;
 var $2 = 0, $3 = 0, $5 = 0, $8 = 0, $9 = 0;
 if (!$L) ___assert_fail(23976, 19928, 32, 19960);
 if (!$surface) ___assert_fail(19976, 19928, 32, 19960);
 _lua_getfield($L, -1001e3, 19984) | 0;
 $2 = $surface + 28 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if ($3) {
  _lua_rawgeti($L, -1, $3) | 0;
  $8 = _lua_gettop($L) | 0;
  $9 = $8 + -1 | 0;
  _lua_rotate($L, $9, -1);
  _lua_settop($L, -2);
  return;
 }
 $5 = _lua_newuserdata($L, 4) | 0;
 if (!$5) _log_oom_and_exit();
 HEAP32[$5 >> 2] = $surface;
 _lua_createtable($L, 0, 0);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 64992);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 63048);
 _lua_pushvalue($L, -2);
 _lua_setfield($L, -2, 19992);
 _luaL_setmetatable($L, 19976);
 _lua_setmetatable($L, -2) | 0;
 _lua_pushvalue($L, -1);
 HEAP32[$2 >> 2] = _luaL_ref($L, -3) | 0;
 $8 = _lua_gettop($L) | 0;
 $9 = $8 + -1 | 0;
 _lua_rotate($L, $9, -1);
 _lua_settop($L, -2);
 return;
}

function _mlua_draw_triangle($L) {
 $L = $L | 0;
 var $$0 = 0, $1 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 if (!$L) ___assert_fail(23976, 19928, 349, 21536);
 $1 = _display_get_current_buffer() | 0;
 do if (HEAP8[$1 + 68 >> 0] | 0) {
  $5 = HEAP32[$1 >> 2] | 0;
  if (_display_is_debug() | 0) {
   if (!($5 & -3)) break;
   if (($5 | 0) == 3) label = 8;
  } else if (($5 | 0) == 3) label = 8; else if (!$5) break;
  if ((label | 0) == 8) if (!(HEAP8[$1 + 57 >> 0] | 0)) break;
  $$0 = _luaL_error($L, 21560, $vararg_buffer) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } while (0);
 $13 = +_luaL_checknumber($L, 1);
 $14 = +_luaL_checknumber($L, 2);
 $15 = +_luaL_checknumber($L, 3);
 $16 = +_luaL_checknumber($L, 4);
 $17 = +_luaL_checknumber($L, 5);
 _display_draw_triangle($13, $14, $15, $16, $17, +_luaL_checknumber($L, 6));
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _skipcomment($lf, $cp) {
 $lf = $lf | 0;
 $cp = $cp | 0;
 var $$0 = 0, $$0$i = 0, $0 = 0, $18 = 0, $2 = 0, $9 = 0, $p$0$i = 0, label = 0;
 HEAP32[$lf >> 2] = 0;
 $0 = $lf + 4 | 0;
 $p$0$i = 55688;
 while (1) {
  $2 = _getc(HEAP32[$0 >> 2] | 0) | 0;
  if (($2 | 0) == -1) {
   label = 3;
   break;
  }
  if (($2 | 0) != (HEAPU8[$p$0$i >> 0] | 0)) {
   $$0$i = $2;
   break;
  }
  $p$0$i = $p$0$i + 1 | 0;
  $9 = HEAP32[$lf >> 2] | 0;
  HEAP32[$lf >> 2] = $9 + 1;
  HEAP8[$lf + $9 + 8 >> 0] = $2;
  if (!(HEAP8[$p$0$i >> 0] | 0)) {
   label = 6;
   break;
  }
 }
 if ((label | 0) == 3) {
  HEAP32[$cp >> 2] = -1;
  $$0 = 0;
  return $$0 | 0;
 } else if ((label | 0) == 6) {
  HEAP32[$lf >> 2] = 0;
  $$0$i = _getc(HEAP32[$0 >> 2] | 0) | 0;
 }
 HEAP32[$cp >> 2] = $$0$i;
 if (($$0$i | 0) != 35) {
  $$0 = 0;
  return $$0 | 0;
 }
 do $18 = _getc(HEAP32[$0 >> 2] | 0) | 0; while (!(($18 | 0) == 10 | ($18 | 0) == -1));
 HEAP32[$cp >> 2] = _getc(HEAP32[$0 >> 2] | 0) | 0;
 $$0 = 1;
 return $$0 | 0;
}

function _music_load_from_file($filename) {
 $filename = $filename | 0;
 var $$0 = 0, $0 = 0, $3 = 0, $5 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp;
 if (!$filename) ___assert_fail(16296, 10720, 287, 10904);
 if (!(_audio_init_if_needed() | 0)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $3 = _stb_vorbis_open_filename($filename, 0, 0) | 0;
 if (!$3) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $5 = _xmalloc(40) | 0;
 HEAP32[$5 + 12 >> 2] = $3;
 $7 = $5 + 16 | 0;
 _stb_vorbis_get_info($0, $3);
 HEAP32[$7 + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$7 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$7 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$7 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
 HEAP32[$7 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
 HEAP32[$7 + 20 >> 2] = HEAP32[$0 + 20 >> 2];
 HEAP32[$5 + 8 >> 2] = 81;
 HEAP32[$5 + 4 >> 2] = 82;
 HEAP32[$5 >> 2] = 8;
 $$0 = _music_load($5, HEAP32[$7 >> 2] | 0, HEAP32[$5 + 20 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _searcher_Lua($L) {
 $L = $L | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $3 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $0 = _luaL_checklstring($L, 1, 0) | 0;
 _lua_getfield($L, -1001001, 58208) | 0;
 $1 = _lua_tolstring($L, -1, 0) | 0;
 if (!$1) {
  HEAP32[$vararg_buffer >> 2] = 58208;
  _luaL_error($L, 59016, $vararg_buffer) | 0;
 }
 $3 = _searchpath($L, $0, $1, 107776, 58832) | 0;
 if (!$3) {
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!(_luaL_loadfilex($L, $3, 0) | 0)) {
  _lua_pushstring($L, $3) | 0;
  $$0 = 2;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $7 = _lua_tolstring($L, 1, 0) | 0;
  $8 = _lua_tolstring($L, -1, 0) | 0;
  HEAP32[$vararg_buffer1 >> 2] = $7;
  HEAP32[$vararg_buffer1 + 4 >> 2] = $3;
  HEAP32[$vararg_buffer1 + 8 >> 2] = $8;
  $$0 = _luaL_error($L, 58872, $vararg_buffer1) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function __ZN16b2StackAllocator8AllocateEi($this, $size) {
 $this = $this | 0;
 $size = $size | 0;
 var $0 = 0, $1 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $5 = 0, $6 = 0;
 $0 = $this + 102796 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (($1 | 0) >= 32) ___assert_fail(91088, 90976, 38, 91128);
 $3 = $this + ($1 * 12 | 0) + 102412 | 0;
 HEAP32[$this + ($1 * 12 | 0) + 102416 >> 2] = $size;
 $5 = $this + 102400 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 if (($6 + $size | 0) > 102400) {
  HEAP32[$3 >> 2] = __Z7b2Alloci($size) | 0;
  HEAP8[$this + ($1 * 12 | 0) + 102420 >> 0] = 1;
 } else {
  HEAP32[$3 >> 2] = $this + $6;
  HEAP8[$this + ($1 * 12 | 0) + 102420 >> 0] = 0;
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $size;
 }
 $15 = $this + 102404 | 0;
 $17 = (HEAP32[$15 >> 2] | 0) + $size | 0;
 HEAP32[$15 >> 2] = $17;
 $18 = $this + 102408 | 0;
 $19 = HEAP32[$18 >> 2] | 0;
 HEAP32[$18 >> 2] = ($19 | 0) > ($17 | 0) ? $19 : $17;
 HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 1;
 return HEAP32[$3 >> 2] | 0;
}

function _push_shader($L, $shader) {
 $L = $L | 0;
 $shader = $shader | 0;
 var $2 = 0, $3 = 0, $5 = 0, $8 = 0, $9 = 0;
 if (!$L) ___assert_fail(23976, 13016, 30, 13048);
 if (!$shader) ___assert_fail(22712, 13016, 30, 13048);
 _lua_getfield($L, -1001e3, 19984) | 0;
 $2 = $shader + 68 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if ($3) {
  _lua_rawgeti($L, -1, $3) | 0;
  $8 = _lua_gettop($L) | 0;
  $9 = $8 + -1 | 0;
  _lua_rotate($L, $9, -1);
  _lua_settop($L, -2);
  return;
 }
 $5 = _lua_newuserdata($L, 4) | 0;
 if (!$5) _log_oom_and_exit();
 HEAP32[$5 >> 2] = $shader;
 _lua_createtable($L, 0, 0);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 64992);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 63048);
 _lua_pushvalue($L, -2);
 _lua_setfield($L, -2, 19992);
 _luaL_setmetatable($L, 22712);
 _lua_setmetatable($L, -2) | 0;
 _lua_pushvalue($L, -1);
 HEAP32[$2 >> 2] = _luaL_ref($L, -3) | 0;
 $8 = _lua_gettop($L) | 0;
 $9 = $8 + -1 | 0;
 _lua_rotate($L, $9, -1);
 _lua_settop($L, -2);
 return;
}

function _push_buffer($L, $buffer) {
 $L = $L | 0;
 $buffer = $buffer | 0;
 var $2 = 0, $3 = 0, $5 = 0, $8 = 0, $9 = 0;
 if (!$L) ___assert_fail(23976, 19560, 27, 19592);
 if (!$buffer) ___assert_fail(22256, 19560, 27, 19592);
 _lua_getfield($L, -1001e3, 19984) | 0;
 $2 = $buffer + 72 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if ($3) {
  _lua_rawgeti($L, -1, $3) | 0;
  $8 = _lua_gettop($L) | 0;
  $9 = $8 + -1 | 0;
  _lua_rotate($L, $9, -1);
  _lua_settop($L, -2);
  return;
 }
 $5 = _lua_newuserdata($L, 4) | 0;
 if (!$5) _log_oom_and_exit();
 HEAP32[$5 >> 2] = $buffer;
 _lua_createtable($L, 0, 0);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 64992);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 63048);
 _lua_pushvalue($L, -2);
 _lua_setfield($L, -2, 19992);
 _luaL_setmetatable($L, 22256);
 _lua_setmetatable($L, -2) | 0;
 _lua_pushvalue($L, -1);
 HEAP32[$2 >> 2] = _luaL_ref($L, -3) | 0;
 $8 = _lua_gettop($L) | 0;
 $9 = $8 + -1 | 0;
 _lua_rotate($L, $9, -1);
 _lua_settop($L, -2);
 return;
}

function __Z9push_bodyP9lua_StateP4Body($L, $body) {
 $L = $L | 0;
 $body = $body | 0;
 var $2 = 0, $3 = 0, $5 = 0, $8 = 0, $9 = 0;
 if (!$L) ___assert_fail(23976, 5248, 19, 5280);
 if (!$body) ___assert_fail(5296, 5248, 19, 5280);
 _lua_getfield($L, -1001e3, 19984) | 0;
 $2 = $body + 12 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if ($3) {
  _lua_rawgeti($L, -1, $3) | 0;
  $8 = _lua_gettop($L) | 0;
  $9 = $8 + -1 | 0;
  _lua_rotate($L, $9, -1);
  _lua_settop($L, -2);
  return;
 }
 $5 = _lua_newuserdata($L, 4) | 0;
 if (!$5) _log_oom_and_exit();
 HEAP32[$5 >> 2] = $body;
 _lua_createtable($L, 0, 0);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 64992);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 63048);
 _lua_pushvalue($L, -2);
 _lua_setfield($L, -2, 19992);
 _luaL_setmetatable($L, 5296);
 _lua_setmetatable($L, -2) | 0;
 _lua_pushvalue($L, -1);
 HEAP32[$2 >> 2] = _luaL_ref($L, -3) | 0;
 $8 = _lua_gettop($L) | 0;
 $9 = $8 + -1 | 0;
 _lua_rotate($L, $9, -1);
 _lua_settop($L, -2);
 return;
}

function _luaV_tointeger_($obj, $p) {
 $obj = $obj | 0;
 $p = $p | 0;
 var $$0$i = 0, $$02$i = 0, $1 = 0, $13 = 0, $2 = 0.0, $3 = 0.0, $v$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $v$i = sp;
 $$02$i = $obj;
 while (1) {
  $1 = HEAP32[$$02$i + 4 >> 2] | 0;
  if (($1 | 0) == 3) {
   label = 3;
   break;
  } else if (($1 | 0) == 19) {
   label = 6;
   break;
  }
  if (($1 & 15 | 0) != 4) {
   $$0$i = 0;
   break;
  }
  $13 = _luaO_str2num((HEAP32[$$02$i >> 2] | 0) + 24 | 0, $v$i) | 0;
  if (($13 | 0) == ((HEAP32[(HEAP32[$$02$i >> 2] | 0) + 12 >> 2] | 0) + 1 | 0)) $$02$i = $v$i; else {
   $$0$i = 0;
   break;
  }
 }
 if ((label | 0) == 3) {
  $2 = +HEAPF32[$$02$i >> 2];
  $3 = +Math_floor(+$2);
  if ($2 != $3) $$0$i = 0; else if ($3 >= -2147483648.0 & $3 < 2147483648.0) {
   HEAP32[$p >> 2] = ~~$3;
   $$0$i = 1;
  } else $$0$i = 0;
 } else if ((label | 0) == 6) {
  HEAP32[$p >> 2] = HEAP32[$$02$i >> 2];
  $$0$i = 1;
 }
 STACKTOP = sp;
 return $$0$i | 0;
}

function _luaL_prepbuffsize($B, $sz) {
 $B = $B | 0;
 $sz = $sz | 0;
 var $$ = 0, $1 = 0, $15 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = HEAP32[$B + 12 >> 2] | 0;
 $2 = $B + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $B + 8 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 if (($3 - $5 | 0) >>> 0 >= $sz >>> 0) {
  $22 = HEAP32[$B >> 2] | 0;
  $23 = $5;
  $21 = $22 + $23 | 0;
  STACKTOP = sp;
  return $21 | 0;
 }
 $8 = $3 << 1;
 $$ = ($8 - $5 | 0) >>> 0 < $sz >>> 0 ? $5 + $sz | 0 : $8;
 if ($$ >>> 0 < $5 >>> 0 | ($$ - $5 | 0) >>> 0 < $sz >>> 0) _luaL_error($1, 55328, sp) | 0;
 $15 = _lua_newuserdata($1, $$) | 0;
 _memcpy($15 | 0, HEAP32[$B >> 2] | 0, HEAP32[$4 >> 2] | 0) | 0;
 if ((HEAP32[$B >> 2] | 0) != ($B + 16 | 0)) {
  _lua_rotate($1, -2, -1);
  _lua_settop($1, -2);
 }
 HEAP32[$B >> 2] = $15;
 HEAP32[$2 >> 2] = $$;
 $22 = $15;
 $23 = HEAP32[$4 >> 2] | 0;
 $21 = $22 + $23 | 0;
 STACKTOP = sp;
 return $21 | 0;
}

function _push_system($L, $system) {
 $L = $L | 0;
 $system = $system | 0;
 var $2 = 0, $3 = 0, $5 = 0, $8 = 0, $9 = 0;
 if (!$L) ___assert_fail(23976, 8472, 27, 8504);
 if (!$system) ___assert_fail(10712, 8472, 27, 8504);
 _lua_getfield($L, -1001e3, 19984) | 0;
 $2 = $system + 476 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if ($3) {
  _lua_rawgeti($L, -1, $3) | 0;
  $8 = _lua_gettop($L) | 0;
  $9 = $8 + -1 | 0;
  _lua_rotate($L, $9, -1);
  _lua_settop($L, -2);
  return;
 }
 $5 = _lua_newuserdata($L, 4) | 0;
 if (!$5) _log_oom_and_exit();
 HEAP32[$5 >> 2] = $system;
 _lua_createtable($L, 0, 0);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 64992);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 63048);
 _lua_pushvalue($L, -2);
 _lua_setfield($L, -2, 19992);
 _luaL_setmetatable($L, 10712);
 _lua_setmetatable($L, -2) | 0;
 _lua_pushvalue($L, -1);
 HEAP32[$2 >> 2] = _luaL_ref($L, -3) | 0;
 $8 = _lua_gettop($L) | 0;
 $9 = $8 + -1 | 0;
 _lua_rotate($L, $9, -1);
 _lua_settop($L, -2);
 return;
}

function __ZN16b2BlockAllocatorC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $14 = 0, $2 = 0, $i$02 = 0, $j$01 = 0, $j$1 = 0, dest = 0, label = 0, stop = 0;
 $0 = $this + 8 | 0;
 HEAP32[$0 >> 2] = 128;
 HEAP32[$this + 4 >> 2] = 0;
 $2 = __Z7b2Alloci(1024) | 0;
 HEAP32[$this >> 2] = $2;
 _memset($2 | 0, 0, HEAP32[$0 >> 2] << 3 | 0) | 0;
 dest = $this + 12 | 0;
 stop = dest + 56 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 if (!(HEAP8[83056] | 0)) {
  $i$02 = 1;
  $j$01 = 0;
 } else return;
 while (1) {
  if (($j$01 | 0) >= 14) {
   label = 3;
   break;
  }
  if (($i$02 | 0) > (HEAP32[82352 + ($j$01 << 2) >> 2] | 0)) {
   $14 = $j$01 + 1 | 0;
   HEAP8[82408 + $i$02 >> 0] = $14;
   $j$1 = $14;
  } else {
   HEAP8[82408 + $i$02 >> 0] = $j$01;
   $j$1 = $j$01;
  }
  $i$02 = $i$02 + 1 | 0;
  if (($i$02 | 0) >= 641) break; else $j$01 = $j$1;
 }
 if ((label | 0) == 3) ___assert_fail(83064, 83088, 71, 83152);
 HEAP8[83056] = 1;
 return;
}

function _searcher_C($L) {
 $L = $L | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $3 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $0 = _luaL_checklstring($L, 1, 0) | 0;
 _lua_getfield($L, -1001001, 58400) | 0;
 $1 = _lua_tolstring($L, -1, 0) | 0;
 if (!$1) {
  HEAP32[$vararg_buffer >> 2] = 58400;
  _luaL_error($L, 59016, $vararg_buffer) | 0;
 }
 $3 = _searchpath($L, $0, $1, 107776, 58832) | 0;
 if (!$3) {
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!(_loadfunc($L, $3, $0) | 0)) {
  _lua_pushstring($L, $3) | 0;
  $$0 = 2;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $7 = _lua_tolstring($L, 1, 0) | 0;
  $8 = _lua_tolstring($L, -1, 0) | 0;
  HEAP32[$vararg_buffer1 >> 2] = $7;
  HEAP32[$vararg_buffer1 + 4 >> 2] = $3;
  HEAP32[$vararg_buffer1 + 8 >> 2] = $8;
  $$0 = _luaL_error($L, 58872, $vararg_buffer1) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _push_music($L, $music) {
 $L = $L | 0;
 $music = $music | 0;
 var $2 = 0, $3 = 0, $5 = 0, $8 = 0, $9 = 0;
 if (!$L) ___assert_fail(23976, 12256, 28, 12288);
 if (!$music) ___assert_fail(12304, 12256, 28, 12288);
 _lua_getfield($L, -1001e3, 19984) | 0;
 $2 = $music + 36 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if ($3) {
  _lua_rawgeti($L, -1, $3) | 0;
  $8 = _lua_gettop($L) | 0;
  $9 = $8 + -1 | 0;
  _lua_rotate($L, $9, -1);
  _lua_settop($L, -2);
  return;
 }
 $5 = _lua_newuserdata($L, 4) | 0;
 if (!$5) _log_oom_and_exit();
 HEAP32[$5 >> 2] = $music;
 _lua_createtable($L, 0, 0);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 64992);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 63048);
 _lua_pushvalue($L, -2);
 _lua_setfield($L, -2, 19992);
 _luaL_setmetatable($L, 12304);
 _lua_setmetatable($L, -2) | 0;
 _lua_pushvalue($L, -1);
 HEAP32[$2 >> 2] = _luaL_ref($L, -3) | 0;
 $8 = _lua_gettop($L) | 0;
 $9 = $8 + -1 | 0;
 _lua_rotate($L, $9, -1);
 _lua_settop($L, -2);
 return;
}

function _luaC_checkfinalizer($L, $o, $mt) {
 $L = $L | 0;
 $o = $o | 0;
 $mt = $mt | 0;
 var $1 = 0, $2 = 0, $26 = 0, $27 = 0, $29 = 0, $32 = 0, $35 = 0, $p$0 = 0;
 $1 = HEAP32[$L + 12 >> 2] | 0;
 $2 = $o + 5 | 0;
 if ((HEAP8[$2 >> 0] & 8) != 0 | ($mt | 0) == 0) return;
 if (HEAP8[$mt + 6 >> 0] & 4) return;
 if (!(_luaT_gettm($mt, 2, HEAP32[$1 + 144 >> 2] | 0) | 0)) return;
 if (((HEAP8[$1 + 49 >> 0] | 0) + -2 & 255) < 4) {
  HEAP8[$2 >> 0] = (HEAPU8[$1 + 48 >> 0] | 0) & 3 | (HEAPU8[$2 >> 0] | 0) & 248;
  $26 = $1 + 56 | 0;
  $27 = HEAP32[$26 >> 2] | 0;
  if (($27 | 0) == ($o | 0)) {
   do $29 = _sweeplist($L, $27, 1) | 0; while (($29 | 0) == ($27 | 0));
   HEAP32[$26 >> 2] = $29;
  }
 }
 $p$0 = $1 + 52 | 0;
 while (1) {
  $32 = HEAP32[$p$0 >> 2] | 0;
  if (($32 | 0) == ($o | 0)) break; else $p$0 = $32;
 }
 HEAP32[$p$0 >> 2] = HEAP32[$o >> 2];
 $35 = $1 + 60 | 0;
 HEAP32[$o >> 2] = HEAP32[$35 >> 2];
 HEAP32[$35 >> 2] = $o;
 HEAP8[$2 >> 0] = HEAPU8[$2 >> 0] | 0 | 8;
 return;
}

function _lmc_feed_buffer($mc, $buffer, $len) {
 $mc = $mc | 0;
 $buffer = $buffer | 0;
 $len = $len | 0;
 var $11 = 0, $3 = 0, $4 = 0, $k$01 = 0;
 if (!$mc) ___assert_fail(12576, 12256, 46, 12584);
 if (!$buffer) ___assert_fail(22256, 12256, 47, 12584);
 $3 = HEAP32[$mc + 12 >> 2] | 0;
 $4 = $mc + 20 | 0;
 if ((HEAP32[$4 >> 2] | 0) == -2) {
  _lua_createtable($3, $len, 0);
  HEAP32[$4 >> 2] = _luaL_ref($3, -1001e3) | 0;
 }
 _lua_rawgeti($3, -1001e3, HEAP32[$mc + 16 >> 2] | 0) | 0;
 _lua_rawgeti($3, -1001e3, HEAP32[$4 >> 2] | 0) | 0;
 _lua_pushinteger($3, $len);
 _lua_callk($3, 2, 1, 0, 0);
 $11 = _luaL_checkinteger($3, -1) | 0;
 _lua_settop($3, -2);
 _lua_rawgeti($3, -1001e3, HEAP32[$4 >> 2] | 0) | 0;
 if (!$11) return $11 | 0; else $k$01 = 1;
 do {
  _lua_rawgeti($3, -1, $k$01) | 0;
  HEAP16[$buffer + ($k$01 << 1) >> 1] = ~~(+_luaL_checknumber($3, -1) * 32768.0 + 32768.0);
  _lua_settop($3, -2);
  $k$01 = $k$01 + 1 | 0;
 } while ($k$01 >>> 0 <= $11 >>> 0);
 return $11 | 0;
}

function _push_sound($L, $sound) {
 $L = $L | 0;
 $sound = $sound | 0;
 var $2 = 0, $3 = 0, $5 = 0, $8 = 0, $9 = 0;
 if (!$L) ___assert_fail(23976, 11736, 29, 11768);
 if (!$sound) ___assert_fail(12e3, 11736, 29, 11768);
 _lua_getfield($L, -1001e3, 19984) | 0;
 $2 = $sound + 12 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if ($3) {
  _lua_rawgeti($L, -1, $3) | 0;
  $8 = _lua_gettop($L) | 0;
  $9 = $8 + -1 | 0;
  _lua_rotate($L, $9, -1);
  _lua_settop($L, -2);
  return;
 }
 $5 = _lua_newuserdata($L, 4) | 0;
 if (!$5) _log_oom_and_exit();
 HEAP32[$5 >> 2] = $sound;
 _lua_createtable($L, 0, 0);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 64992);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 63048);
 _lua_pushvalue($L, -2);
 _lua_setfield($L, -2, 19992);
 _luaL_setmetatable($L, 12e3);
 _lua_setmetatable($L, -2) | 0;
 _lua_pushvalue($L, -1);
 HEAP32[$2 >> 2] = _luaL_ref($L, -3) | 0;
 $8 = _lua_gettop($L) | 0;
 $9 = $8 + -1 | 0;
 _lua_rotate($L, $9, -1);
 _lua_settop($L, -2);
 return;
}

function _lua_getlocal($L, $ar, $n) {
 $L = $L | 0;
 $ar = $ar | 0;
 $n = $n | 0;
 var $13 = 0, $15 = 0, $18 = 0, $2 = 0, $23 = 0, $24 = 0, $name$0 = 0, $pos = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $pos = sp;
 if (!$ar) {
  $2 = HEAP32[$L + 8 >> 2] | 0;
  if ((HEAP32[$2 + -4 >> 2] | 0) != 70) {
   $name$0 = 0;
   STACKTOP = sp;
   return $name$0 | 0;
  }
  $name$0 = _luaF_getlocalname(HEAP32[(HEAP32[$2 + -8 >> 2] | 0) + 12 >> 2] | 0, $n, 0) | 0;
  STACKTOP = sp;
  return $name$0 | 0;
 } else {
  HEAP32[$pos >> 2] = 0;
  $13 = _findlocal($L, HEAP32[$ar + 96 >> 2] | 0, $n, $pos) | 0;
  if (!$13) {
   $name$0 = 0;
   STACKTOP = sp;
   return $name$0 | 0;
  }
  $15 = $L + 8 | 0;
  $18 = HEAP32[$pos >> 2] | 0;
  $23 = HEAP32[$18 + 4 >> 2] | 0;
  $24 = HEAP32[$15 >> 2] | 0;
  HEAP32[$24 >> 2] = HEAP32[$18 >> 2];
  HEAP32[$24 + 4 >> 2] = $23;
  HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 8;
  $name$0 = $13;
  STACKTOP = sp;
  return $name$0 | 0;
 }
 return 0;
}

function __ZN13b2DynamicTree12DestroyProxyEi($this, $proxyId) {
 $this = $this | 0;
 $proxyId = $proxyId | 0;
 var $1 = 0, $11 = 0, $14 = 0, $16 = 0, $4 = 0;
 if (($proxyId | 0) <= -1) ___assert_fail(90168, 90016, 123, 90216);
 $1 = $this + 12 | 0;
 if ((HEAP32[$1 >> 2] | 0) <= ($proxyId | 0)) ___assert_fail(90168, 90016, 123, 90216);
 $4 = $this + 4 | 0;
 if ((HEAP32[(HEAP32[$4 >> 2] | 0) + ($proxyId * 36 | 0) + 24 >> 2] | 0) != -1) ___assert_fail(90232, 90016, 124, 90216);
 __ZN13b2DynamicTree10RemoveLeafEi($this, $proxyId);
 if ((HEAP32[$1 >> 2] | 0) <= ($proxyId | 0)) ___assert_fail(90096, 90016, 94, 90136);
 $11 = $this + 8 | 0;
 if ((HEAP32[$11 >> 2] | 0) > 0) {
  $14 = $this + 16 | 0;
  $16 = HEAP32[$4 >> 2] | 0;
  HEAP32[$16 + ($proxyId * 36 | 0) + 20 >> 2] = HEAP32[$14 >> 2];
  HEAP32[$16 + ($proxyId * 36 | 0) + 32 >> 2] = -1;
  HEAP32[$14 >> 2] = $proxyId;
  HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + -1;
  return;
 } else ___assert_fail(90152, 90016, 95, 90136);
}

function _luaD_shrinkstack($L) {
 $L = $L | 0;
 var $$ = 0, $$lim$0$i = 0, $1 = 0, $13 = 0, $15 = 0, $18 = 0, $20 = 0, $5 = 0, $ci$01$i = 0, $ci$03$i = 0, $lim$0$lcssa$i = 0, $lim$02$i = 0;
 $1 = HEAP32[$L + 8 >> 2] | 0;
 $ci$01$i = HEAP32[$L + 16 >> 2] | 0;
 if (!$ci$01$i) $lim$0$lcssa$i = $1; else {
  $ci$03$i = $ci$01$i;
  $lim$02$i = $1;
  while (1) {
   $5 = HEAP32[$ci$03$i + 4 >> 2] | 0;
   $$lim$0$i = $lim$02$i >>> 0 < $5 >>> 0 ? $5 : $lim$02$i;
   $ci$03$i = HEAP32[$ci$03$i + 8 >> 2] | 0;
   if (!$ci$03$i) {
    $lim$0$lcssa$i = $$lim$0$i;
    break;
   } else $lim$02$i = $$lim$0$i;
  }
 }
 $13 = $lim$0$lcssa$i - (HEAP32[$L + 28 >> 2] | 0) | 0;
 $15 = ($13 >> 3) + 1 | 0;
 $18 = (($15 | 0) / 8 | 0) + 10 + $15 | 0;
 $$ = ($18 | 0) > 1e6 ? 1e6 : $18;
 $20 = $L + 92 | 0;
 if ((HEAP32[$20 >> 2] | 0) > 1e6) _luaE_freeCI($L); else _luaE_shrinkCI($L);
 if (($13 | 0) > 7999992) return;
 if (($$ | 0) >= (HEAP32[$20 >> 2] | 0)) return;
 _luaD_reallocstack($L, $$);
 return;
}

function _next_segment($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $17 = 0, $18 = 0, $20 = 0, $27 = 0, $3 = 0, $4 = 0;
 $0 = $f + 1400 | 0;
 if (HEAP32[$0 >> 2] | 0) {
  $$0 = 0;
  return $$0 | 0;
 }
 $3 = $f + 1396 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 do if (($4 | 0) == -1) {
  HEAP32[$f + 1404 >> 2] = (HEAP32[$f + 1132 >> 2] | 0) + -1;
  if (!(_start_page($f) | 0)) {
   HEAP32[$0 >> 2] = 1;
   $$0 = 0;
   return $$0 | 0;
  }
  if (HEAP8[$f + 1391 >> 0] & 1) {
   $18 = HEAP32[$3 >> 2] | 0;
   break;
  }
  HEAP32[$f + 116 >> 2] = 32;
  $$0 = 0;
  return $$0 | 0;
 } else $18 = $4; while (0);
 $17 = $18 + 1 | 0;
 HEAP32[$3 >> 2] = $17;
 $20 = HEAP8[$f + $18 + 1136 >> 0] | 0;
 if ($20 << 24 >> 24 != -1) {
  HEAP32[$0 >> 2] = 1;
  HEAP32[$f + 1404 >> 2] = $18;
 }
 if (($17 | 0) >= (HEAP32[$f + 1132 >> 2] | 0)) HEAP32[$3 >> 2] = -1;
 $27 = $f + 1392 | 0;
 if (HEAP8[$27 >> 0] | 0) ___assert_fail(79432, 78904, 1489, 79456);
 HEAP8[$27 >> 0] = $20;
 $$0 = $20 & 255;
 return $$0 | 0;
}

function _inclinenumber($ls) {
 $ls = $ls | 0;
 var $0 = 0, $1 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $24 = 0, $25 = 0, $27 = 0, $3 = 0, $6 = 0, $7 = 0;
 $0 = HEAP32[$ls >> 2] | 0;
 $1 = $ls + 36 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 HEAP32[$2 >> 2] = $3 + -1;
 if (!$3) $12 = _luaZ_fill($2) | 0; else {
  $6 = $2 + 4 | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  HEAP32[$6 >> 2] = $7 + 1;
  $12 = HEAPU8[$7 >> 0] | 0;
 }
 HEAP32[$ls >> 2] = $12;
 if (($12 | 0) == 13 | ($12 | 0) == 10) if (($12 | 0) != ($0 | 0)) {
  $14 = HEAP32[$1 >> 2] | 0;
  $15 = HEAP32[$14 >> 2] | 0;
  HEAP32[$14 >> 2] = $15 + -1;
  if (!$15) $24 = _luaZ_fill($14) | 0; else {
   $18 = $14 + 4 | 0;
   $19 = HEAP32[$18 >> 2] | 0;
   HEAP32[$18 >> 2] = $19 + 1;
   $24 = HEAPU8[$19 >> 0] | 0;
  }
  HEAP32[$ls >> 2] = $24;
 }
 $25 = $ls + 4 | 0;
 $27 = (HEAP32[$25 >> 2] | 0) + 1 | 0;
 HEAP32[$25 >> 2] = $27;
 if (($27 | 0) == 2147483647) _lexerror($ls, 67480, 0); else return;
}

function _LoadString($S) {
 $S = $S | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $size = 0, $x$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $x$i = sp + 4 | 0;
 $size = sp;
 $0 = $S + 4 | 0;
 if (_luaZ_read(HEAP32[$0 >> 2] | 0, $x$i, 1) | 0) _error($S, 75728);
 $4 = HEAP8[$x$i >> 0] | 0;
 $5 = $4 & 255;
 HEAP32[$size >> 2] = $5;
 do if ($4 << 24 >> 24 == -1) if (!(_luaZ_read(HEAP32[$0 >> 2] | 0, $size, 4) | 0)) {
  $10 = HEAP32[$size >> 2] | 0;
  break;
 } else _error($S, 75728); else $10 = $5; while (0);
 if (!$10) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $12 = HEAP32[$S >> 2] | 0;
 $14 = HEAP32[$S + 8 >> 2] | 0;
 $15 = $10 + -1 | 0;
 HEAP32[$size >> 2] = $15;
 $16 = _luaZ_openspace($12, $14, $15) | 0;
 if (_luaZ_read(HEAP32[$0 >> 2] | 0, $16, HEAP32[$size >> 2] | 0) | 0) _error($S, 75728);
 $$0 = _luaS_newlstr(HEAP32[$S >> 2] | 0, $16, HEAP32[$size >> 2] | 0) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _match_class($c, $cl) {
 $c = $c | 0;
 $cl = $cl | 0;
 var $$0 = 0, $res$0 = 0;
 do switch (_tolower($cl) | 0) {
 case 115:
  {
   $res$0 = _isspace($c) | 0;
   break;
  }
 case 117:
  {
   $res$0 = _isupper($c) | 0;
   break;
  }
 case 112:
  {
   $res$0 = _ispunct($c) | 0;
   break;
  }
 case 103:
  {
   $res$0 = _isgraph($c) | 0;
   break;
  }
 case 108:
  {
   $res$0 = _islower($c) | 0;
   break;
  }
 case 97:
  {
   $res$0 = _isalpha($c) | 0;
   break;
  }
 case 120:
  {
   $res$0 = _isxdigit($c) | 0;
   break;
  }
 case 119:
  {
   $res$0 = _isalnum($c) | 0;
   break;
  }
 case 100:
  {
   $res$0 = ($c + -48 | 0) >>> 0 < 10 & 1;
   break;
  }
 case 122:
  {
   $res$0 = ($c | 0) == 0 & 1;
   break;
  }
 case 99:
  {
   $res$0 = _iscntrl($c) | 0;
   break;
  }
 default:
  {
   $$0 = ($cl | 0) == ($c | 0) & 1;
   return $$0 | 0;
  }
 } while (0);
 if (_islower($cl) | 0) {
  $$0 = $res$0;
  return $$0 | 0;
 }
 $$0 = ($res$0 | 0) == 0 & 1;
 return $$0 | 0;
}

function __Z22mlua_apply_torque_bodyP9lua_State($L) {
 $L = $L | 0;
 var $1 = 0, $11 = 0, $12 = 0, $15 = 0, $19 = 0, $2 = 0, $22 = 0, $24 = 0, $4 = 0.0, $5 = 0.0, $7 = 0.0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!$L) ___assert_fail(23976, 5248, 194, 5648);
 $1 = __Z8pop_bodyP9lua_Statei($L, 1) | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!$2) {
  _luaL_error($L, 5336, sp) | 0;
  $9 = HEAP32[$1 >> 2] | 0;
 } else $9 = $2;
 $4 = +_luaL_checknumber($L, 2);
 $5 = +HEAPF32[616];
 $7 = $4 / $5 / $5;
 if ((HEAP32[$9 >> 2] | 0) != 2) {
  STACKTOP = sp;
  return 0;
 }
 $11 = $9 + 4 | 0;
 $12 = HEAP16[$11 >> 1] | 0;
 if (!($12 & 2)) {
  $15 = $12 & 65535;
  if (!($15 & 2)) {
   $19 = ($15 | 2) & 65535;
   HEAP16[$11 >> 1] = $19;
   HEAPF32[$9 + 144 >> 2] = 0.0;
   $22 = $19;
  } else $22 = $12;
 } else $22 = $12;
 if (!($22 & 2)) {
  STACKTOP = sp;
  return 0;
 }
 $24 = $9 + 84 | 0;
 HEAPF32[$24 >> 2] = $7 + +HEAPF32[$24 >> 2];
 STACKTOP = sp;
 return 0;
}

function _push_font($L, $font) {
 $L = $L | 0;
 $font = $font | 0;
 var $2 = 0, $3 = 0, $5 = 0, $8 = 0, $9 = 0;
 if (!$L) ___assert_fail(23976, 5936, 25, 5968);
 if (!$font) ___assert_fail(7864, 5936, 25, 5968);
 _lua_getfield($L, -1001e3, 19984) | 0;
 $2 = $font + 16 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if ($3) {
  _lua_rawgeti($L, -1, $3) | 0;
  $8 = _lua_gettop($L) | 0;
  $9 = $8 + -1 | 0;
  _lua_rotate($L, $9, -1);
  _lua_settop($L, -2);
  return;
 }
 $5 = _lua_newuserdata($L, 4) | 0;
 if (!$5) _log_oom_and_exit();
 HEAP32[$5 >> 2] = $font;
 _lua_createtable($L, 0, 0);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 64992);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 63048);
 _lua_pushvalue($L, -2);
 _lua_setfield($L, -2, 19992);
 _luaL_setmetatable($L, 7864);
 _lua_setmetatable($L, -2) | 0;
 _lua_pushvalue($L, -1);
 HEAP32[$2 >> 2] = _luaL_ref($L, -3) | 0;
 $8 = _lua_gettop($L) | 0;
 $9 = $8 + -1 | 0;
 _lua_rotate($L, $9, -1);
 _lua_settop($L, -2);
 return;
}

function _luaL_findtable($L, $idx, $fname, $szhint) {
 $L = $L | 0;
 $idx = $idx | 0;
 $fname = $fname | 0;
 $szhint = $szhint | 0;
 var $$0 = 0, $$01 = 0, $1 = 0, $7 = 0, $e$0 = 0, label = 0;
 if (!$idx) $$01 = $fname; else {
  _lua_pushvalue($L, $idx);
  $$01 = $fname;
 }
 while (1) {
  $1 = _strchr($$01, 46) | 0;
  if (!$1) $e$0 = $$01 + (_strlen($$01 | 0) | 0) | 0; else $e$0 = $1;
  $7 = $e$0 - $$01 | 0;
  _lua_pushlstring($L, $$01, $7) | 0;
  if (!(_lua_rawget($L, -2) | 0)) {
   _lua_settop($L, -2);
   _lua_createtable($L, 0, (HEAP8[$e$0 >> 0] | 0) == 46 ? 1 : $szhint);
   _lua_pushlstring($L, $$01, $7) | 0;
   _lua_pushvalue($L, -2);
   _lua_settable($L, -4);
  } else if ((_lua_type($L, -1) | 0) != 5) break;
  _lua_rotate($L, -2, -1);
  _lua_settop($L, -2);
  if ((HEAP8[$e$0 >> 0] | 0) == 46) $$01 = $e$0 + 1 | 0; else {
   $$0 = 0;
   label = 10;
   break;
  }
 }
 if ((label | 0) == 10) return $$0 | 0;
 _lua_settop($L, -3);
 $$0 = $$01;
 return $$0 | 0;
}

function _buffer_upload($b, $method) {
 $b = $b | 0;
 $method = $method | 0;
 var $14 = 0, $2 = 0, $4 = 0, $9 = 0;
 if (!$b) ___assert_fail(23160, 22016, 32, 22736);
 $2 = HEAP32[$b + 44 >> 2] | 0;
 if (!$2) return;
 $4 = $b + 56 | 0;
 if (HEAP8[$4 >> 0] | 0) return;
 _glBindBuffer(34962, HEAP32[$b + 8 >> 2] | 0);
 $9 = $2 << 3;
 _glBufferData(34962, $9 | 0, HEAP32[$b + 24 >> 2] | 0, $method | 0);
 _check_opengl_oom();
 _glBindBuffer(34962, HEAP32[$b + 12 >> 2] | 0);
 $14 = $2 << 2;
 _glBufferData(34962, $14 | 0, HEAP32[$b + 28 >> 2] | 0, $method | 0);
 _check_opengl_oom();
 if (HEAP8[$b + 57 >> 0] | 0) {
  _glBindBuffer(34962, HEAP32[$b + 16 >> 2] | 0);
  _glBufferData(34962, $9 | 0, HEAP32[$b + 32 >> 2] | 0, $method | 0);
  _check_opengl_oom();
 }
 if ((HEAP32[$b >> 2] | 0) == 1) {
  _glBindBuffer(34962, HEAP32[$b + 20 >> 2] | 0);
  _glBufferData(34962, $14 | 0, HEAP32[$b + 36 >> 2] | 0, $method | 0);
  _check_opengl_oom();
 }
 HEAP8[$4 >> 0] = 1;
 return;
}

function __ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2($this, $xf, $p) {
 $this = $this | 0;
 $xf = $xf | 0;
 $p = $p | 0;
 var $$0 = 0, $12 = 0.0, $14 = 0.0, $17 = 0.0, $19 = 0, $2 = 0.0, $7 = 0.0, $9 = 0.0, $i$03 = 0, label = 0;
 $2 = +HEAPF32[$p >> 2] - +HEAPF32[$xf >> 2];
 $7 = +HEAPF32[$p + 4 >> 2] - +HEAPF32[$xf + 4 >> 2];
 $9 = +HEAPF32[$xf + 12 >> 2];
 $12 = +HEAPF32[$xf + 8 >> 2];
 $14 = $2 * $9 + $7 * $12;
 $17 = $9 * $7 - $2 * $12;
 $19 = HEAP32[$this + 148 >> 2] | 0;
 if (($19 | 0) > 0) $i$03 = 0; else {
  $$0 = 1;
  return $$0 | 0;
 }
 while (1) {
  if (($14 - +HEAPF32[$this + ($i$03 << 3) + 20 >> 2]) * +HEAPF32[$this + ($i$03 << 3) + 84 >> 2] + ($17 - +HEAPF32[$this + ($i$03 << 3) + 24 >> 2]) * +HEAPF32[$this + ($i$03 << 3) + 88 >> 2] > 0.0) {
   $$0 = 0;
   label = 4;
   break;
  }
  $i$03 = $i$03 + 1 | 0;
  if (($i$03 | 0) >= ($19 | 0)) {
   $$0 = 1;
   label = 4;
   break;
  }
 }
 if ((label | 0) == 4) return $$0 | 0;
 return 0;
}

function _audio_set_sound_volume($volume) {
 $volume = +$volume;
 var $10 = 0, $12 = 0, $13 = 0, $i$02 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 HEAPF32[2866] = $volume;
 if (!(HEAP8[11016] | 0)) {
  STACKTOP = sp;
  return;
 } else $i$02 = 0;
 do {
  if ((HEAP32[11036 + ($i$02 * 20 | 0) >> 2] | 0) == 1) {
   _alSourcef(HEAP32[11024 + ($i$02 * 20 | 0) >> 2] | 0, 4106, +(+HEAPF32[11040 + ($i$02 * 20 | 0) >> 2] * $volume));
   $10 = _alGetError() | 0;
   if ($10) {
    $12 = $10;
    do {
     $13 = _alGetString($12 | 0) | 0;
     HEAP32[$vararg_buffer >> 2] = 11344;
     HEAP32[$vararg_buffer + 4 >> 2] = 154;
     HEAP32[$vararg_buffer + 8 >> 2] = 11472;
     HEAP32[$vararg_buffer + 12 >> 2] = $13;
     _log_internal(3, 11520, 12024, $vararg_buffer);
     $12 = _alGetError() | 0;
    } while (($12 | 0) != 0);
   }
  }
  $i$02 = $i$02 + 1 | 0;
 } while (($i$02 | 0) != 16);
 STACKTOP = sp;
 return;
}

function _audio_set_music_volume($volume) {
 $volume = +$volume;
 var $10 = 0, $12 = 0, $13 = 0, $i$02 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 HEAPF32[2858] = $volume;
 if (!(HEAP8[11016] | 0)) {
  STACKTOP = sp;
  return;
 } else $i$02 = 0;
 do {
  if (!(HEAP32[11036 + ($i$02 * 20 | 0) >> 2] | 0)) {
   _alSourcef(HEAP32[11024 + ($i$02 * 20 | 0) >> 2] | 0, 4106, +(+HEAPF32[11040 + ($i$02 * 20 | 0) >> 2] * $volume));
   $10 = _alGetError() | 0;
   if ($10) {
    $12 = $10;
    do {
     $13 = _alGetString($12 | 0) | 0;
     HEAP32[$vararg_buffer >> 2] = 11344;
     HEAP32[$vararg_buffer + 4 >> 2] = 138;
     HEAP32[$vararg_buffer + 8 >> 2] = 11440;
     HEAP32[$vararg_buffer + 12 >> 2] = $13;
     _log_internal(3, 11520, 12024, $vararg_buffer);
     $12 = _alGetError() | 0;
    } while (($12 | 0) != 0);
   }
  }
  $i$02 = $i$02 + 1 | 0;
 } while (($i$02 | 0) != 16);
 STACKTOP = sp;
 return;
}

function _lua_settable($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $29 = 0, $30 = 0, $4 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 3) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 59168;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 3) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 4 >> 2] | 0) == 22) $$0$i = 59168; else {
   $21 = HEAP32[$17 >> 2] | 0;
   if (($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0)) $$0$i = 59168; else $$0$i = $21 + 16 + ($16 + -1 << 3) | 0;
  }
 } while (0);
 $29 = $L + 8 | 0;
 $30 = HEAP32[$29 >> 2] | 0;
 _luaV_settable($L, $$0$i, $30 + -16 | 0, $30 + -8 | 0);
 HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + -16;
 return;
}
function _luaB_load($L) {
 $L = $L | 0;
 var $$0$i = 0, $0 = 0, $1 = 0, $3 = 0, $6 = 0, $9 = 0, $l = 0, $status$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $l = sp;
 $0 = _lua_tolstring($L, 1, $l) | 0;
 $1 = _luaL_optlstring($L, 3, 64904, 0) | 0;
 $3 = (_lua_type($L, 4) | 0) != -1;
 if (!$0) {
  $9 = _luaL_optlstring($L, 2, 64912, 0) | 0;
  _luaL_checktype($L, 1, 6);
  _lua_settop($L, 5);
  $status$0 = _lua_load($L, 20, 0, $9, $1) | 0;
 } else {
  $6 = _luaL_optlstring($L, 2, $0, 0) | 0;
  $status$0 = _luaL_loadbufferx($L, $0, HEAP32[$l >> 2] | 0, $6, $1) | 0;
 }
 if ($status$0) {
  _lua_pushnil($L);
  _lua_rotate($L, -2, 1);
  $$0$i = 2;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 if (!$3) {
  $$0$i = 1;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 _lua_pushvalue($L, $3 ? 4 : 0);
 if (_lua_setupvalue($L, -2, 1) | 0) {
  $$0$i = 1;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 _lua_settop($L, -2);
 $$0$i = 1;
 STACKTOP = sp;
 return $$0$i | 0;
}

function _lua_gettable($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $29 = 0, $31 = 0, $4 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 3) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 59168;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 3) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 4 >> 2] | 0) == 22) $$0$i = 59168; else {
   $21 = HEAP32[$17 >> 2] | 0;
   if (($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0)) $$0$i = 59168; else $$0$i = $21 + 16 + ($16 + -1 << 3) | 0;
  }
 } while (0);
 $29 = $L + 8 | 0;
 $31 = (HEAP32[$29 >> 2] | 0) + -8 | 0;
 _luaV_gettable($L, $$0$i, $31, $31);
 return HEAP32[(HEAP32[$29 >> 2] | 0) + -4 >> 2] & 15 | 0;
}

function _luaF_getlocalname($f, $local_number, $pc) {
 $f = $f | 0;
 $local_number = $local_number | 0;
 $pc = $pc | 0;
 var $$0 = 0, $$013 = 0, $$1 = 0, $1 = 0, $11 = 0, $16 = 0, $4 = 0, $i$04 = 0, label = 0;
 $1 = HEAP32[$f + 32 >> 2] | 0;
 if (($1 | 0) <= 0) {
  $$0 = 0;
  return $$0 | 0;
 }
 $4 = HEAP32[$f + 60 >> 2] | 0;
 $$013 = $local_number;
 $i$04 = 0;
 while (1) {
  if ((HEAP32[$4 + ($i$04 * 12 | 0) + 4 >> 2] | 0) > ($pc | 0)) {
   $$0 = 0;
   label = 8;
   break;
  }
  if ((HEAP32[$4 + ($i$04 * 12 | 0) + 8 >> 2] | 0) > ($pc | 0)) {
   $11 = $$013 + -1 | 0;
   if (!$11) {
    label = 6;
    break;
   } else $$1 = $11;
  } else $$1 = $$013;
  $16 = $i$04 + 1 | 0;
  if (($16 | 0) < ($1 | 0)) {
   $$013 = $$1;
   $i$04 = $16;
  } else {
   $$0 = 0;
   label = 8;
   break;
  }
 }
 if ((label | 0) == 6) {
  $$0 = (HEAP32[$4 + ($i$04 * 12 | 0) >> 2] | 0) + 24 | 0;
  return $$0 | 0;
 } else if ((label | 0) == 8) return $$0 | 0;
 return 0;
}

function _lua_type($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $33 = 0, $4 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 3) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 59168;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 3) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 4 >> 2] | 0) == 22) {
   $33 = -1;
   return $33 | 0;
  }
  $21 = HEAP32[$17 >> 2] | 0;
  if (($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0)) {
   $33 = -1;
   return $33 | 0;
  } else {
   $$0$i = $21 + 16 + ($16 + -1 << 3) | 0;
   break;
  }
 } while (0);
 if (($$0$i | 0) == 59168) {
  $33 = -1;
  return $33 | 0;
 }
 $33 = HEAP32[$$0$i + 4 >> 2] & 15;
 return $33 | 0;
}

function _db_getlocal($L) {
 $L = $L | 0;
 var $$0 = 0, $$0$i = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $ar = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $ar = sp;
 if ((_lua_type($L, 1) | 0) == 8) {
  $$0$i = _lua_tothread($L, 1) | 0;
  $4 = 1;
 } else {
  $$0$i = $L;
  $4 = 0;
 }
 $5 = _luaL_checkinteger($L, $4 | 2) | 0;
 $6 = $4 + 1 | 0;
 if ((_lua_type($L, $6) | 0) == 6) {
  _lua_pushvalue($L, $6);
  _lua_pushstring($L, _lua_getlocal($L, 0, $5) | 0) | 0;
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!(_lua_getstack($$0$i, _luaL_checkinteger($L, $6) | 0, $ar) | 0)) {
  $$0 = _luaL_argerror($L, $6, 66528) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $14 = _lua_getlocal($$0$i, $ar, $5) | 0;
 if (!$14) {
  _lua_pushnil($L);
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  _lua_xmove($$0$i, $L, 1);
  _lua_pushstring($L, $14) | 0;
  _lua_rotate($L, -2, 1);
  $$0 = 2;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _math_random($L) {
 $L = $L | 0;
 var $$0 = 0, $2 = 0.0, $3 = 0, $6 = 0, $low$0 = 0, $up$0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $2 = +(_rand() | 0) * 4.656612873077393e-10;
 $3 = _lua_gettop($L) | 0;
 if (($3 | 0) == 1) {
  $low$0 = 1;
  $up$0 = _luaL_checkinteger($L, 1) | 0;
 } else if (($3 | 0) == 2) {
  $6 = _luaL_checkinteger($L, 1) | 0;
  $low$0 = $6;
  $up$0 = _luaL_checkinteger($L, 2) | 0;
 } else if (!$3) {
  _lua_pushnumber($L, $2);
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $$0 = _luaL_error($L, 57960, $vararg_buffer) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (($low$0 | 0) > ($up$0 | 0)) _luaL_argerror($L, 1, 57992) | 0;
 if (($low$0 | 0) < 0 & ($up$0 | 0) > ($low$0 + 2147483647 | 0)) _luaL_argerror($L, 1, 58016) | 0;
 _lua_pushinteger($L, ~~($2 * (+($up$0 - $low$0 | 0) + 1.0)) + $low$0 | 0);
 $$0 = 1;
 STACKTOP = sp;
 return $$0 | 0;
}

function _system_add_color($s, $at, $min_r, $max_r, $min_g, $max_g, $min_b, $max_b) {
 $s = $s | 0;
 $at = +$at;
 $min_r = $min_r | 0;
 $max_r = $max_r | 0;
 $min_g = $min_g | 0;
 $max_g = $max_g | 0;
 $min_b = $min_b | 0;
 $max_b = $max_b | 0;
 var $1 = 0, $2 = 0;
 if (!$s) ___assert_fail(23264, 10392, 218, 10608);
 $1 = $s + 200 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (($2 | 0) == 16) ___assert_fail(10632, 10392, 219, 10608); else {
  HEAPF32[$s + ($2 * 12 | 0) + 204 >> 2] = $at;
  HEAP8[$s + ((HEAP32[$1 >> 2] | 0) * 12 | 0) + 208 >> 0] = $min_r;
  HEAP8[$s + ((HEAP32[$1 >> 2] | 0) * 12 | 0) + 209 >> 0] = $max_r;
  HEAP8[$s + ((HEAP32[$1 >> 2] | 0) * 12 | 0) + 210 >> 0] = $min_g;
  HEAP8[$s + ((HEAP32[$1 >> 2] | 0) * 12 | 0) + 211 >> 0] = $max_g;
  HEAP8[$s + ((HEAP32[$1 >> 2] | 0) * 12 | 0) + 212 >> 0] = $min_b;
  HEAP8[$s + ((HEAP32[$1 >> 2] | 0) * 12 | 0) + 213 >> 0] = $max_b;
  HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + 1;
  return;
 }
}

function _mz_zip_reader_extract_to_file($pZip, $file_index, $pDst_filename, $flags) {
 $pZip = $pZip | 0;
 $file_index = $file_index | 0;
 $pDst_filename = $pDst_filename | 0;
 $flags = $flags | 0;
 var $$0 = 0, $2 = 0, $4 = 0, $9 = 0, $file_stat = 0, $t$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592 | 0;
 $t$i = sp + 576 | 0;
 $file_stat = sp;
 if (!(_mz_zip_reader_file_stat($pZip, $file_index, $file_stat) | 0)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $2 = _fopen($pDst_filename | 0, 94496) | 0;
 if (!$2) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $4 = _mz_zip_reader_extract_to_callback($pZip, $file_index, 13, $2, $flags) | 0;
 if ((_fclose($2 | 0) | 0) == -1 | ($4 | 0) == 0) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $9 = HEAP32[$file_stat + 16 >> 2] | 0;
 HEAP32[$t$i >> 2] = $9;
 HEAP32[$t$i + 4 >> 2] = $9;
 _utime($pDst_filename | 0, $t$i | 0) | 0;
 $$0 = $4;
 STACKTOP = sp;
 return $$0 | 0;
}

function _luaT_trybinTM($L, $p1, $p2, $res, $event) {
 $L = $L | 0;
 $p1 = $p1 | 0;
 $p2 = $p2 | 0;
 $res = $res | 0;
 $event = $event | 0;
 var $dummy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $dummy = sp;
 if (_luaT_callbinTM($L, $p1, $p2, $res, $event) | 0) {
  STACKTOP = sp;
  return;
 }
 switch ($event | 0) {
 case 19:
 case 17:
 case 16:
 case 15:
 case 14:
 case 13:
  {
   if ((HEAP32[$p1 + 4 >> 2] | 0) == 3) HEAPF32[$dummy >> 2] = +HEAPF32[$p1 >> 2]; else if (!(_luaV_tonumber_($p1, $dummy) | 0)) _luaG_opinterror($L, $p1, $p2, 63240);
   if ((HEAP32[$p2 + 4 >> 2] | 0) == 3) {
    HEAPF32[$dummy >> 2] = +HEAPF32[$p2 >> 2];
    _luaG_tointerror($L, $p1, $p2);
   }
   if (!(_luaV_tonumber_($p2, $dummy) | 0)) _luaG_opinterror($L, $p1, $p2, 63240); else _luaG_tointerror($L, $p1, $p2);
   break;
  }
 case 22:
  {
   _luaG_concaterror($L, $p1, $p2);
   break;
  }
 default:
  _luaG_opinterror($L, $p1, $p2, 63272);
 }
}

function _luaL_checkversion_($L, $ver, $sz) {
 $L = $L | 0;
 $ver = +$ver;
 $sz = $sz | 0;
 var $0 = 0, $4 = 0.0, $vararg_buffer3 = 0, $vararg_ptr5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $0 = _lua_version($L) | 0;
 if (($sz | 0) != 68) _luaL_error($L, 55488, sp) | 0;
 if (($0 | 0) != (_lua_version(0) | 0)) {
  _luaL_error($L, 55544, sp + 8 | 0) | 0;
  STACKTOP = sp;
  return;
 }
 $4 = +HEAPF32[$0 >> 2];
 if (!($4 != $ver)) {
  STACKTOP = sp;
  return;
 }
 HEAPF64[tempDoublePtr >> 3] = $ver;
 HEAP32[$vararg_buffer3 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer3 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr5 = $vararg_buffer3 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $4;
 HEAP32[$vararg_ptr5 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr5 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 _luaL_error($L, 55576, $vararg_buffer3) | 0;
 STACKTOP = sp;
 return;
}

function _png_set_hIST($png_ptr, $info_ptr, $hist) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 $hist = $hist | 0;
 var $12 = 0, $2 = 0, $20 = 0, $3 = 0, $6 = 0, $9 = 0, $i$02 = 0;
 if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) return;
 $2 = $info_ptr + 20 | 0;
 $3 = HEAP16[$2 >> 1] | 0;
 if ($3 << 16 >> 16 == 0 | ($3 & 65535) > 256) {
  _png_warning($png_ptr, 77184);
  return;
 }
 _png_free_data($png_ptr, $info_ptr, 8, 0);
 $6 = _png_malloc_warn($png_ptr, 512) | 0;
 HEAP32[$info_ptr + 204 >> 2] = $6;
 if (!$6) {
  _png_warning($png_ptr, 77232);
  return;
 }
 $9 = $info_ptr + 232 | 0;
 HEAP32[$9 >> 2] = HEAP32[$9 >> 2] | 8;
 $12 = HEAP16[$2 >> 1] | 0;
 if ($12 << 16 >> 16) {
  $i$02 = 0;
  do {
   HEAP16[$6 + ($i$02 << 1) >> 1] = HEAP16[$hist + ($i$02 << 1) >> 1] | 0;
   $i$02 = $i$02 + 1 | 0;
  } while (($i$02 | 0) < ($12 & 65535 | 0));
 }
 $20 = $info_ptr + 8 | 0;
 HEAP32[$20 >> 2] = HEAP32[$20 >> 2] | 64;
 return;
}

function _utfchar($L) {
 $L = $L | 0;
 var $0 = 0, $2 = 0, $5 = 0, $b = 0, $i$02 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2080 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $b = sp + 16 | 0;
 $0 = _lua_gettop($L) | 0;
 if (($0 | 0) == 1) {
  $2 = _luaL_checkinteger($L, 1) | 0;
  if ($2 >>> 0 >= 1114112) _luaL_argerror($L, 1, 63816) | 0;
  HEAP32[$vararg_buffer >> 2] = $2;
  _lua_pushfstring($L, 63840, $vararg_buffer) | 0;
  STACKTOP = sp;
  return 1;
 }
 _luaL_buffinit($L, $b);
 if (($0 | 0) >= 1) {
  $i$02 = 1;
  while (1) {
   $5 = _luaL_checkinteger($L, $i$02) | 0;
   if ($5 >>> 0 >= 1114112) _luaL_argerror($L, $i$02, 63816) | 0;
   HEAP32[$vararg_buffer1 >> 2] = $5;
   _lua_pushfstring($L, 63840, $vararg_buffer1) | 0;
   _luaL_addvalue($b);
   if (($i$02 | 0) == ($0 | 0)) break; else $i$02 = $i$02 + 1 | 0;
  }
 }
 _luaL_pushresult($b);
 STACKTOP = sp;
 return 1;
}

function _luaK_jump($fs) {
 $fs = $fs | 0;
 var $0 = 0, $1 = 0, $11 = 0, $13 = 0, $2 = 0, $22 = 0, $5 = 0, $6 = 0, $8 = 0, $fs$idx$val$idx$val$i = 0, $list$0$i = 0;
 $0 = $fs + 24 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = -1;
 $2 = _luaK_code($fs, 2147450910) | 0;
 if (($1 | 0) == -1) {
  $22 = $2;
  return $22 | 0;
 }
 if (($2 | 0) == -1) {
  $22 = $1;
  return $22 | 0;
 }
 $fs$idx$val$idx$val$i = HEAP32[(HEAP32[$fs >> 2] | 0) + 48 >> 2] | 0;
 $list$0$i = $2;
 while (1) {
  $5 = $fs$idx$val$idx$val$i + ($list$0$i << 2) | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  $8 = ($6 >>> 14) + -131071 | 0;
  if (($8 | 0) == -1) break;
  $11 = $list$0$i + 1 + $8 | 0;
  if (($11 | 0) == -1) break; else $list$0$i = $11;
 }
 $13 = $1 + ~$list$0$i | 0;
 if (((($13 | 0) > -1 ? $13 : 0 - $13 | 0) | 0) > 131071) _luaX_syntaxerror(HEAP32[$fs + 8 >> 2] | 0, 65576);
 HEAP32[$5 >> 2] = ($13 << 14) + 2147467264 | $6 & 16383;
 $22 = $2;
 return $22 | 0;
}

function __ZN13b2DynamicTree11CreateProxyERK6b2AABBPv($this, $aabb, $userData) {
 $this = $this | 0;
 $aabb = $aabb | 0;
 $userData = $userData | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $9 = 0.0;
 $0 = __ZN13b2DynamicTree12AllocateNodeEv($this) | 0;
 $1 = $this + 4 | 0;
 $9 = +(+HEAPF32[$aabb >> 2] + -.10000000149011612);
 $10 = +(+HEAPF32[$aabb + 4 >> 2] + -.10000000149011612);
 $11 = (HEAP32[$1 >> 2] | 0) + ($0 * 36 | 0) | 0;
 HEAPF32[$11 >> 2] = $9;
 HEAPF32[$11 + 4 >> 2] = $10;
 $23 = +(+HEAPF32[$aabb + 8 >> 2] + .10000000149011612);
 $24 = +(+HEAPF32[$aabb + 12 >> 2] + .10000000149011612);
 $25 = (HEAP32[$1 >> 2] | 0) + ($0 * 36 | 0) + 8 | 0;
 HEAPF32[$25 >> 2] = $23;
 HEAPF32[$25 + 4 >> 2] = $24;
 HEAP32[(HEAP32[$1 >> 2] | 0) + ($0 * 36 | 0) + 16 >> 2] = $userData;
 HEAP32[(HEAP32[$1 >> 2] | 0) + ($0 * 36 | 0) + 32 >> 2] = 0;
 __ZN13b2DynamicTree10InsertLeafEi($this, $0);
 return $0 | 0;
}

function ___remdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $rem = __stackBase__ | 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
 $4$1 = tempRet0;
 ___udivmoddi4($4$0, $4$1, _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0, tempRet0, $rem) | 0;
 $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
 $10$1 = tempRet0;
 STACKTOP = __stackBase__;
 return (tempRet0 = $10$1, $10$0) | 0;
}

function _tanhf($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $14 = 0.0, $19 = 0.0, $2 = 0.0, $26 = 0.0, $__x = 0, $t$0 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__x = sp;
 $0 = (HEAPF32[tempDoublePtr >> 2] = $x, HEAP32[tempDoublePtr >> 2] | 0);
 $1 = $0 & 2147483647;
 $2 = (HEAP32[tempDoublePtr >> 2] = $1, +HEAPF32[tempDoublePtr >> 2]);
 do if ($1 >>> 0 > 1057791828) if ($1 >>> 0 > 1092616192) {
  $t$0 = 0.0 / $2 + 1.0;
  break;
 } else {
  $t$0 = 1.0 - 2.0 / (+_expm1f($2 * 2.0) + 2.0);
  break;
 } else {
  if ($1 >>> 0 > 1048757624) {
   $14 = +_expm1f($2 * 2.0);
   $t$0 = $14 / ($14 + 2.0);
   break;
  }
  if ($1 >>> 0 > 8388607) {
   $19 = +_expm1f($2 * -2.0);
   $t$0 = -$19 / ($19 + 2.0);
   break;
  } else {
   HEAPF32[$__x >> 2] = $2 * $2;
   $t$0 = $2;
   break;
  }
 } while (0);
 if (($0 | 0) >= 0) {
  $26 = $t$0;
  STACKTOP = sp;
  return +$26;
 }
 $26 = -$t$0;
 STACKTOP = sp;
 return +$26;
}

function _fpconv_g_fmt($str, $num, $precision) {
 $str = $str | 0;
 $num = +$num;
 $precision = $precision | 0;
 var $15 = 0, $fmt = 0, $i$0$i = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $fmt = sp + 8 | 0;
 if (($precision + -1 | 0) >>> 0 >= 14) ___assert_fail(71456, 71496, 165, 71528);
 HEAP8[$fmt >> 0] = 37;
 HEAP8[$fmt + 1 >> 0] = 46;
 if (($precision + 9 | 0) >>> 0 > 18) {
  HEAP8[$fmt + 2 >> 0] = (($precision | 0) / 10 | 0) + 48;
  $i$0$i = 3;
 } else $i$0$i = 2;
 HEAP8[$fmt + $i$0$i >> 0] = (($precision | 0) % 10 | 0) + 48;
 HEAP8[$fmt + ($i$0$i + 1) >> 0] = 103;
 HEAP8[$fmt + ($i$0$i + 2) >> 0] = 0;
 HEAPF64[tempDoublePtr >> 3] = $num;
 HEAP32[$vararg_buffer >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $15 = _snprintf($str, 32, $fmt, $vararg_buffer) | 0;
 STACKTOP = sp;
 return $15 | 0;
}

function __ZN7b2JointC2EPK10b2JointDef($this, $def) {
 $this = $this | 0;
 $def = $def | 0;
 var $0 = 0, $2 = 0, $21 = 0;
 HEAP32[$this >> 2] = 84256;
 $0 = $def + 8 | 0;
 $2 = $def + 12 | 0;
 if ((HEAP32[$0 >> 2] | 0) == (HEAP32[$2 >> 2] | 0)) ___assert_fail(84304, 84184, 185, 84336); else {
  HEAP32[$this + 4 >> 2] = HEAP32[$def >> 2];
  HEAP32[$this + 8 >> 2] = 0;
  HEAP32[$this + 12 >> 2] = 0;
  HEAP32[$this + 48 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$this + 52 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$this + 56 >> 2] = 0;
  HEAP8[$this + 61 >> 0] = HEAP8[$def + 16 >> 0] | 0;
  HEAP8[$this + 60 >> 0] = 0;
  HEAP32[$this + 64 >> 2] = HEAP32[$def + 4 >> 2];
  $21 = $this + 16 | 0;
  HEAP32[$21 + 0 >> 2] = 0;
  HEAP32[$21 + 4 >> 2] = 0;
  HEAP32[$21 + 8 >> 2] = 0;
  HEAP32[$21 + 12 >> 2] = 0;
  HEAP32[$21 + 16 >> 2] = 0;
  HEAP32[$21 + 20 >> 2] = 0;
  HEAP32[$21 + 24 >> 2] = 0;
  HEAP32[$21 + 28 >> 2] = 0;
  return;
 }
}

function __Z35mlua_set_motor_speed_revolute_jointP9lua_State($L) {
 $L = $L | 0;
 var $1 = 0, $2 = 0, $5 = 0, $8 = 0.0, $maxtorque$0 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!$L) ___assert_fail(23976, 4112, 145, 4672);
 $1 = __Z9pop_jointP9lua_Statei($L, 1) | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!$2) {
  _luaL_error($L, 4440, sp) | 0;
  $5 = HEAP32[$1 >> 2] | 0;
 } else $5 = $2;
 if ((HEAP32[$5 + 4 >> 2] | 0) != 1) _luaL_error($L, 4904, sp + 8 | 0) | 0;
 $8 = +_luaL_checknumber($L, 2);
 if ((_lua_gettop($L) | 0) > 3) $maxtorque$0 = +_luaL_checknumber($L, 3); else $maxtorque$0 = 20.0;
 if ($8 != 0.0) {
  __ZN15b2RevoluteJoint13SetMotorSpeedEf($5, $8);
  __ZN15b2RevoluteJoint17SetMaxMotorTorqueEf($5, $maxtorque$0);
  __ZN15b2RevoluteJoint11EnableMotorEb($5, 1);
  STACKTOP = sp;
  return 0;
 } else {
  __ZN15b2RevoluteJoint11EnableMotorEb($5, 0);
  STACKTOP = sp;
  return 0;
 }
 return 0;
}

function __ZN16b2StackAllocator4FreeEPv($this, $p) {
 $this = $this | 0;
 $p = $p | 0;
 var $$pre$phiZ2D = 0, $$sum = 0, $0 = 0, $1 = 0, $11 = 0, $15 = 0, $19 = 0, $9 = 0;
 $0 = $this + 102796 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (($1 | 0) <= 0) ___assert_fail(91144, 90976, 63, 91168);
 $$sum = $1 + -1 | 0;
 if ((HEAP32[$this + ($$sum * 12 | 0) + 102412 >> 2] | 0) != ($p | 0)) ___assert_fail(91176, 90976, 65, 91168);
 if (!(HEAP8[$this + ($$sum * 12 | 0) + 102420 >> 0] | 0)) {
  $9 = $this + ($$sum * 12 | 0) + 102416 | 0;
  $11 = $this + 102400 | 0;
  HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) - (HEAP32[$9 >> 2] | 0);
  $$pre$phiZ2D = $9;
  $19 = $1;
 } else {
  __Z6b2FreePv($p);
  $$pre$phiZ2D = $this + ($$sum * 12 | 0) + 102416 | 0;
  $19 = HEAP32[$0 >> 2] | 0;
 }
 $15 = $this + 102404 | 0;
 HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - (HEAP32[$$pre$phiZ2D >> 2] | 0);
 HEAP32[$0 >> 2] = $19 + -1;
 return;
}

function _luaB_print($L) {
 $L = $L | 0;
 var $$0 = 0, $$pre = 0, $0 = 0, $2 = 0, $i$04 = 0, $l = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $l = sp + 4 | 0;
 $0 = _lua_gettop($L) | 0;
 _lua_getglobal($L, 64680) | 0;
 $$pre = HEAP32[_stdout >> 2] | 0;
 L1 : do if (($0 | 0) >= 1) {
  $i$04 = 1;
  while (1) {
   _lua_pushvalue($L, -1);
   _lua_pushvalue($L, $i$04);
   _lua_callk($L, 1, 1, 0, 0);
   $2 = _lua_tolstring($L, -1, $l) | 0;
   if (!$2) break;
   if (($i$04 | 0) > 1) _fputc(9, $$pre | 0) | 0;
   _fwrite($2 | 0, 1, HEAP32[$l >> 2] | 0, $$pre | 0) | 0;
   _lua_settop($L, -2);
   if (($i$04 | 0) < ($0 | 0)) $i$04 = $i$04 + 1 | 0; else break L1;
  }
  $$0 = _luaL_error($L, 64848, $vararg_buffer) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } while (0);
 _fputc(10, $$pre | 0) | 0;
 _fflush($$pre | 0) | 0;
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _luaK_patchtohere($fs, $list) {
 $fs = $fs | 0;
 $list = $list | 0;
 var $10 = 0, $13 = 0, $15 = 0, $3 = 0, $5 = 0, $7 = 0, $8 = 0, $fs$idx$val$idx$val$i = 0, $list$0$i = 0;
 HEAP32[$fs + 20 >> 2] = HEAP32[$fs + 16 >> 2];
 $3 = $fs + 24 | 0;
 if (($list | 0) == -1) return;
 $5 = HEAP32[$3 >> 2] | 0;
 if (($5 | 0) == -1) {
  HEAP32[$3 >> 2] = $list;
  return;
 }
 $fs$idx$val$idx$val$i = HEAP32[(HEAP32[$fs >> 2] | 0) + 48 >> 2] | 0;
 $list$0$i = $5;
 while (1) {
  $7 = $fs$idx$val$idx$val$i + ($list$0$i << 2) | 0;
  $8 = HEAP32[$7 >> 2] | 0;
  $10 = ($8 >>> 14) + -131071 | 0;
  if (($10 | 0) == -1) break;
  $13 = $list$0$i + 1 + $10 | 0;
  if (($13 | 0) == -1) break; else $list$0$i = $13;
 }
 $15 = ~$list$0$i + $list | 0;
 if (((($15 | 0) > -1 ? $15 : 0 - $15 | 0) | 0) > 131071) _luaX_syntaxerror(HEAP32[$fs + 8 >> 2] | 0, 65576);
 HEAP32[$7 >> 2] = ($15 << 14) + 2147467264 | $8 & 16383;
 return;
}

function _lua_tothread($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $33 = 0, $4 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 3) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 59168;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 3) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 4 >> 2] | 0) == 22) $$0$i = 59168; else {
   $21 = HEAP32[$17 >> 2] | 0;
   if (($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0)) $$0$i = 59168; else $$0$i = $21 + 16 + ($16 + -1 << 3) | 0;
  }
 } while (0);
 if ((HEAP32[$$0$i + 4 >> 2] | 0) != 72) {
  $33 = 0;
  return $33 | 0;
 }
 $33 = HEAP32[$$0$i >> 2] | 0;
 return $33 | 0;
}

function _lua_len($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $29 = 0, $4 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 3) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 59168;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 3) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 4 >> 2] | 0) == 22) $$0$i = 59168; else {
   $21 = HEAP32[$17 >> 2] | 0;
   if (($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0)) $$0$i = 59168; else $$0$i = $21 + 16 + ($16 + -1 << 3) | 0;
  }
 } while (0);
 $29 = $L + 8 | 0;
 _luaV_objlen($L, HEAP32[$29 >> 2] | 0, $$0$i);
 HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + 8;
 return;
}

function __ZN24b2ChainAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
 $this = $this | 0;
 $manifold = $manifold | 0;
 $xfA = $xfA | 0;
 $xfB = $xfB | 0;
 var $3 = 0, $6 = 0, $edge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $edge = sp;
 $3 = HEAP32[(HEAP32[$this + 48 >> 2] | 0) + 12 >> 2] | 0;
 HEAP32[$edge >> 2] = 81784;
 HEAP32[$edge + 4 >> 2] = 1;
 HEAPF32[$edge + 8 >> 2] = .009999999776482582;
 $6 = $edge + 28 | 0;
 HEAP32[$6 + 0 >> 2] = 0;
 HEAP32[$6 + 4 >> 2] = 0;
 HEAP32[$6 + 8 >> 2] = 0;
 HEAP32[$6 + 12 >> 2] = 0;
 HEAP16[$6 + 16 >> 1] = 0;
 __ZNK12b2ChainShape12GetChildEdgeEP11b2EdgeShapei($3, $edge, HEAP32[$this + 56 >> 2] | 0);
 __Z23b2CollideEdgeAndPolygonP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS6_($manifold, $edge, $xfA, HEAP32[(HEAP32[$this + 52 >> 2] | 0) + 12 >> 2] | 0, $xfB);
 STACKTOP = sp;
 return;
}

function _scalbn($x, $n) {
 $x = +$x;
 $n = $n | 0;
 var $$0 = 0, $1 = 0.0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $5 = 0, $8 = 0.0, $9 = 0, $y$0 = 0.0;
 if (($n | 0) > 1023) {
  $1 = $x * 8988465674311579538646525.0e283;
  $2 = $n + -1023 | 0;
  if (($2 | 0) > 1023) {
   $5 = $n + -2046 | 0;
   $$0 = ($5 | 0) > 1023 ? 1023 : $5;
   $y$0 = $1 * 8988465674311579538646525.0e283;
  } else {
   $$0 = $2;
   $y$0 = $1;
  }
 } else if (($n | 0) < -1022) {
  $8 = $x * 2.2250738585072014e-308;
  $9 = $n + 1022 | 0;
  if (($9 | 0) < -1022) {
   $12 = $n + 2044 | 0;
   $$0 = ($12 | 0) < -1022 ? -1022 : $12;
   $y$0 = $8 * 2.2250738585072014e-308;
  } else {
   $$0 = $9;
   $y$0 = $8;
  }
 } else {
  $$0 = $n;
  $y$0 = $x;
 }
 $15 = _bitshift64Shl($$0 + 1023 | 0, 0, 52) | 0;
 $16 = tempRet0;
 HEAP32[tempDoublePtr >> 2] = $15;
 HEAP32[tempDoublePtr + 4 >> 2] = $16;
 return +($y$0 * +HEAPF64[tempDoublePtr >> 3]);
}

function __ZN23b2ChainAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
 $this = $this | 0;
 $manifold = $manifold | 0;
 $xfA = $xfA | 0;
 $xfB = $xfB | 0;
 var $3 = 0, $6 = 0, $edge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $edge = sp;
 $3 = HEAP32[(HEAP32[$this + 48 >> 2] | 0) + 12 >> 2] | 0;
 HEAP32[$edge >> 2] = 81784;
 HEAP32[$edge + 4 >> 2] = 1;
 HEAPF32[$edge + 8 >> 2] = .009999999776482582;
 $6 = $edge + 28 | 0;
 HEAP32[$6 + 0 >> 2] = 0;
 HEAP32[$6 + 4 >> 2] = 0;
 HEAP32[$6 + 8 >> 2] = 0;
 HEAP32[$6 + 12 >> 2] = 0;
 HEAP16[$6 + 16 >> 1] = 0;
 __ZNK12b2ChainShape12GetChildEdgeEP11b2EdgeShapei($3, $edge, HEAP32[$this + 56 >> 2] | 0);
 __Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_($manifold, $edge, $xfA, HEAP32[(HEAP32[$this + 52 >> 2] | 0) + 12 >> 2] | 0, $xfB);
 STACKTOP = sp;
 return;
}

function _unpack($L) {
 $L = $L | 0;
 var $$0 = 0, $0 = 0, $12 = 0, $6 = 0, $7 = 0, $9 = 0, $i$0 = 0, $ta = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $ta = sp + 8 | 0;
 _checktab($L, $ta);
 $0 = _luaL_optinteger($L, 2, 1) | 0;
 if ((_lua_type($L, 3) | 0) < 1) $6 = _luaL_len($L, 1) | 0; else $6 = _luaL_checkinteger($L, 3) | 0;
 if (($0 | 0) > ($6 | 0)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $7 = $6 - $0 | 0;
 if ($7 >>> 0 <= 2147483646) {
  $9 = $7 + 1 | 0;
  if (_lua_checkstack($L, $9) | 0) {
   $12 = HEAP32[$ta >> 2] | 0;
   $i$0 = $0;
   while (1) {
    FUNCTION_TABLE_iiii[$12 & 31]($L, 1, $i$0) | 0;
    if (($i$0 | 0) < ($6 | 0)) $i$0 = $i$0 + 1 | 0; else {
     $$0 = $9;
     break;
    }
   }
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 $$0 = _luaL_error($L, 62696, $vararg_buffer) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _typeerror($L, $arg, $tname) {
 $L = $L | 0;
 $arg = $arg | 0;
 $tname = $tname | 0;
 var $2 = 0, $typearg$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 do if (!(_lua_getmetatable($L, $arg) | 0)) label = 6; else {
  _lua_pushstring($L, 55272) | 0;
  $2 = _lua_rawget($L, -2) | 0;
  if (!$2) {
   _lua_settop($L, -3);
   label = 6;
   break;
  }
  _lua_rotate($L, -2, -1);
  _lua_settop($L, -2);
  if (($2 | 0) == 4) $typearg$0 = _lua_tolstring($L, -1, 0) | 0; else label = 6;
 } while (0);
 if ((label | 0) == 6) if ((_lua_type($L, $arg) | 0) == 2) $typearg$0 = 55760; else $typearg$0 = _lua_typename($L, _lua_type($L, $arg) | 0) | 0;
 HEAP32[$vararg_buffer >> 2] = $tname;
 HEAP32[$vararg_buffer + 4 >> 2] = $typearg$0;
 _luaL_argerror($L, $arg, _lua_pushfstring($L, 55776, $vararg_buffer) | 0) | 0;
 STACKTOP = sp;
 return;
}

function _str_sub($L) {
 $L = $L | 0;
 var $$ = 0, $$0$i = 0, $$0$i1 = 0, $0 = 0, $1 = 0, $2 = 0, $8 = 0, $9 = 0, $end$0 = 0, $l = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $l = sp;
 $0 = _luaL_checklstring($L, 1, $l) | 0;
 $1 = _luaL_checkinteger($L, 2) | 0;
 $2 = HEAP32[$l >> 2] | 0;
 if (($1 | 0) > -1) $$0$i = $1; else if ($2 >>> 0 < (0 - $1 | 0) >>> 0) $$0$i = 0; else $$0$i = $1 + 1 + $2 | 0;
 $8 = _luaL_optinteger($L, 3, -1) | 0;
 $9 = HEAP32[$l >> 2] | 0;
 if (($8 | 0) > -1) $$0$i1 = $8; else if ($9 >>> 0 < (0 - $8 | 0) >>> 0) $$0$i1 = 0; else $$0$i1 = $8 + 1 + $9 | 0;
 $$ = ($$0$i | 0) < 1 ? 1 : $$0$i;
 $end$0 = ($$0$i1 | 0) > ($9 | 0) ? $9 : $$0$i1;
 if (($$ | 0) > ($end$0 | 0)) {
  _lua_pushlstring($L, 62584, 0) | 0;
  STACKTOP = sp;
  return 1;
 } else {
  _lua_pushlstring($L, $0 + ($$ + -1) | 0, 1 - $$ + $end$0 | 0) | 0;
  STACKTOP = sp;
  return 1;
 }
 return 0;
}

function _png_zstream_error($png_ptr, $ret) {
 $png_ptr = $png_ptr | 0;
 $ret = $ret | 0;
 var $0 = 0;
 $0 = $png_ptr + 248 | 0;
 L1 : do if (!(HEAP32[$0 >> 2] | 0)) do switch ($ret | 0) {
 case -1:
  {
   HEAP32[$0 >> 2] = 71912;
   break L1;
   break;
  }
 case -3:
  {
   HEAP32[$0 >> 2] = 71952;
   break L1;
   break;
  }
 case -2:
  {
   HEAP32[$0 >> 2] = 71928;
   break L1;
   break;
  }
 case 1:
  {
   HEAP32[$0 >> 2] = 71856;
   break L1;
   break;
  }
 case 2:
  {
   HEAP32[$0 >> 2] = 71888;
   break L1;
   break;
  }
 case -6:
  {
   HEAP32[$0 >> 2] = 71976;
   break L1;
   break;
  }
 case -4:
  {
   HEAP32[$0 >> 2] = 76280;
   break L1;
   break;
  }
 case -5:
  {
   HEAP32[$0 >> 2] = 75728;
   break L1;
   break;
  }
 case -7:
  {
   HEAP32[$0 >> 2] = 72008;
   break L1;
   break;
  }
 default:
  {
   HEAP32[$0 >> 2] = 71824;
   break L1;
  }
 } while (0); while (0);
 return;
}

function __ZNK7b2World7RayCastEP17b2RayCastCallbackRK6b2Vec2S4_($this, $callback, $point1, $point2) {
 $this = $this | 0;
 $callback = $callback | 0;
 $point1 = $point1 | 0;
 $point2 = $point2 | 0;
 var $0 = 0, $14 = 0, $19 = 0, $20 = 0, $3 = 0, $8 = 0, $9 = 0, $input = 0, $wrapper = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $wrapper = sp + 24 | 0;
 $input = sp;
 $0 = $this + 102872 | 0;
 HEAP32[$wrapper >> 2] = $0;
 HEAP32[$wrapper + 4 >> 2] = $callback;
 HEAPF32[$input + 16 >> 2] = 1.0;
 $3 = $point1;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = $input;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 $14 = $point2;
 $19 = HEAP32[$14 + 4 >> 2] | 0;
 $20 = $input + 8 | 0;
 HEAP32[$20 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$20 + 4 >> 2] = $19;
 __ZNK13b2DynamicTree7RayCastI21b2WorldRayCastWrapperEEvPT_RK14b2RayCastInput($0, $wrapper, $input);
 STACKTOP = sp;
 return;
}

function _wcrtomb($s, $wc, $st) {
 $s = $s | 0;
 $wc = $wc | 0;
 $st = $st | 0;
 var $$0 = 0;
 if (!$s) {
  $$0 = 1;
  return $$0 | 0;
 }
 if ($wc >>> 0 < 128) {
  HEAP8[$s >> 0] = $wc;
  $$0 = 1;
  return $$0 | 0;
 }
 if ($wc >>> 0 < 2048) {
  HEAP8[$s >> 0] = $wc >>> 6 | 192;
  HEAP8[$s + 1 >> 0] = $wc & 63 | 128;
  $$0 = 2;
  return $$0 | 0;
 }
 if ($wc >>> 0 < 55296 | ($wc & -8192 | 0) == 57344) {
  HEAP8[$s >> 0] = $wc >>> 12 | 224;
  HEAP8[$s + 1 >> 0] = $wc >>> 6 & 63 | 128;
  HEAP8[$s + 2 >> 0] = $wc & 63 | 128;
  $$0 = 3;
  return $$0 | 0;
 }
 if (($wc + -65536 | 0) >>> 0 < 1048576) {
  HEAP8[$s >> 0] = $wc >>> 18 | 240;
  HEAP8[$s + 1 >> 0] = $wc >>> 12 & 63 | 128;
  HEAP8[$s + 2 >> 0] = $wc >>> 6 & 63 | 128;
  HEAP8[$s + 3 >> 0] = $wc & 63 | 128;
  $$0 = 4;
  return $$0 | 0;
 } else {
  HEAP32[(___errno_location() | 0) >> 2] = 84;
  $$0 = -1;
  return $$0 | 0;
 }
 return 0;
}

function __Z29mlua_set_linear_velocity_bodyP9lua_State($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $10 = 0, $16 = 0, $18 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $3 = 0.0, $5 = 0.0, $6 = 0.0, $8 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = __Z8pop_bodyP9lua_Statei($L, 1) | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) {
  _luaL_error($L, 5336, sp) | 0;
  $10 = HEAP32[$0 >> 2] | 0;
 } else $10 = $1;
 $3 = +_luaL_checknumber($L, 2);
 $5 = $3 / +HEAPF32[616];
 $6 = +_luaL_checknumber($L, 3);
 $8 = $6 / +HEAPF32[616];
 if (!(HEAP32[$10 >> 2] | 0)) {
  STACKTOP = sp;
  return 0;
 }
 if ($5 * $5 + $8 * $8 > 0.0) {
  $16 = $10 + 4 | 0;
  $18 = HEAPU16[$16 >> 1] | 0;
  if (!($18 & 2)) {
   HEAP16[$16 >> 1] = $18 | 2;
   HEAPF32[$10 + 144 >> 2] = 0.0;
  }
 }
 $25 = +$5;
 $26 = +$8;
 $27 = $10 + 64 | 0;
 HEAPF32[$27 >> 2] = $25;
 HEAPF32[$27 + 4 >> 2] = $26;
 STACKTOP = sp;
 return 0;
}

function _surface_set_filter($s, $new_filter, $current_surface) {
 $s = $s | 0;
 $new_filter = $new_filter | 0;
 $current_surface = $current_surface | 0;
 var $1 = 0, $21 = 0, $7 = 0, $9 = 0;
 if (!$s) ___assert_fail(23264, 16096, 262, 16184);
 $1 = $s + 20 | 0;
 if ((HEAP32[$1 >> 2] | 0) == ($new_filter | 0)) return;
 HEAP32[$1 >> 2] = $new_filter;
 _glBindTexture(3553, HEAP32[$s + 32 >> 2] | 0);
 _glTexParameteri(3553, 10241, HEAP32[$1 >> 2] | 0);
 $7 = HEAP32[$1 >> 2] | 0;
 _glTexParameteri(3553, 10240, ($7 >>> 0 > 9729 ? 9729 : $7) | 0);
 $9 = $s + 25 | 0;
 if (!(HEAP8[$9 >> 0] | 0)) if ((HEAP32[$1 >> 2] | 0) >>> 0 > 9984) if (!(HEAP8[$s + 26 >> 0] | 0)) {
  _glGenerateMipmap(3553);
  HEAP8[$9 >> 0] = 1;
 }
 if (($s | 0) == ($current_surface | 0)) return;
 if (!$current_surface) $21 = 0; else $21 = HEAP32[$current_surface + 32 >> 2] | 0;
 _glBindTexture(3553, $21 | 0);
 return;
}

function __ZN9b2ContactC2EP9b2FixtureiS1_i($this, $fA, $indexA, $fB, $indexB) {
 $this = $this | 0;
 $fA = $fA | 0;
 $indexA = $indexA | 0;
 $fB = $fB | 0;
 $indexB = $indexB | 0;
 var $16 = 0.0, $18 = 0.0, $8 = 0, dest = 0, stop = 0;
 HEAP32[$this >> 2] = 91656;
 HEAP32[$this + 4 >> 2] = 4;
 HEAP32[$this + 48 >> 2] = $fA;
 HEAP32[$this + 52 >> 2] = $fB;
 HEAP32[$this + 56 >> 2] = $indexA;
 HEAP32[$this + 60 >> 2] = $indexB;
 HEAP32[$this + 124 >> 2] = 0;
 HEAP32[$this + 128 >> 2] = 0;
 $8 = $fA + 16 | 0;
 dest = $this + 8 | 0;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF32[$this + 136 >> 2] = +Math_sqrt(+(+HEAPF32[$8 >> 2] * +HEAPF32[$fB + 16 >> 2]));
 $16 = +HEAPF32[$fA + 20 >> 2];
 $18 = +HEAPF32[$fB + 20 >> 2];
 HEAPF32[$this + 140 >> 2] = $16 > $18 ? $16 : $18;
 HEAPF32[$this + 144 >> 2] = 0.0;
 return;
}

function _strncmp($_l, $_r, $n) {
 $_l = $_l | 0;
 $_r = $_r | 0;
 $n = $n | 0;
 var $$03 = 0, $$08$in = 0, $1 = 0, $13 = 0, $3 = 0, $6 = 0, $9 = 0, $l$06 = 0, $r$0$lcssa = 0, $r$07 = 0;
 if (!$n) {
  $$03 = 0;
  return $$03 | 0;
 }
 $1 = HEAP8[$_l >> 0] | 0;
 L4 : do if (!($1 << 24 >> 24)) {
  $13 = 0;
  $r$0$lcssa = $_r;
 } else {
  $$08$in = $n;
  $6 = $1;
  $l$06 = $_l;
  $r$07 = $_r;
  while (1) {
   $$08$in = $$08$in + -1 | 0;
   $3 = HEAP8[$r$07 >> 0] | 0;
   if (!($6 << 24 >> 24 == $3 << 24 >> 24 & (($$08$in | 0) != 0 & $3 << 24 >> 24 != 0))) {
    $13 = $6;
    $r$0$lcssa = $r$07;
    break L4;
   }
   $l$06 = $l$06 + 1 | 0;
   $9 = $r$07 + 1 | 0;
   $6 = HEAP8[$l$06 >> 0] | 0;
   if (!($6 << 24 >> 24)) {
    $13 = 0;
    $r$0$lcssa = $9;
    break;
   } else $r$07 = $9;
  }
 } while (0);
 $$03 = ($13 & 255) - (HEAPU8[$r$0$lcssa >> 0] | 0) | 0;
 return $$03 | 0;
}

function _lua_iscfunction($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $30 = 0, $4 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 3) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 59168;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 3) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 4 >> 2] | 0) == 22) $$0$i = 59168; else {
   $21 = HEAP32[$17 >> 2] | 0;
   if (($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0)) $$0$i = 59168; else $$0$i = $21 + 16 + ($16 + -1 << 3) | 0;
  }
 } while (0);
 $30 = HEAP32[$$0$i + 4 >> 2] | 0;
 return (($30 | 0) == 22 | ($30 | 0) == 102) & 1 | 0;
}

function _music_set_volume($m, $volume) {
 $m = $m | 0;
 $volume = +$volume;
 var $10 = 0, $2 = 0, $4 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 if (!$m) ___assert_fail(23232, 10720, 128, 10792);
 HEAPF32[$m + 48 >> 2] = $volume;
 $2 = HEAP32[$m >> 2] | 0;
 if (!$2) {
  STACKTOP = sp;
  return;
 }
 $4 = HEAP32[$2 >> 2] | 0;
 _alSourcef($4 | 0, 4106, +(+_audio_get_music_volume() * $volume));
 $7 = _alGetError() | 0;
 if (!$7) {
  STACKTOP = sp;
  return;
 } else $9 = $7;
 do {
  $10 = _alGetString($9 | 0) | 0;
  HEAP32[$vararg_buffer >> 2] = 10720;
  HEAP32[$vararg_buffer + 4 >> 2] = 136;
  HEAP32[$vararg_buffer + 8 >> 2] = 10792;
  HEAP32[$vararg_buffer + 12 >> 2] = $10;
  _log_internal(3, 12304, 12024, $vararg_buffer);
  $9 = _alGetError() | 0;
 } while (($9 | 0) != 0);
 STACKTOP = sp;
 return;
}

function _loadfunc($L, $filename, $modname) {
 $L = $L | 0;
 $filename = $filename | 0;
 $modname = $modname | 0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $0 = _luaL_gsub($L, $modname, 107776, 58920) | 0;
 $1 = _strchr($0, 45) | 0;
 do if (!$1) $$01 = $0; else {
  HEAP32[$vararg_buffer >> 2] = _lua_pushlstring($L, $0, $1 - $0 | 0) | 0;
  $8 = _lookforfunc($L, $filename, _lua_pushfstring($L, 58928, $vararg_buffer) | 0) | 0;
  if (($8 | 0) == 2) {
   $$01 = $1 + 1 | 0;
   break;
  } else {
   $$0 = $8;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 HEAP32[$vararg_buffer1 >> 2] = $$01;
 $$0 = _lookforfunc($L, $filename, _lua_pushfstring($L, 58928, $vararg_buffer1) | 0) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _io_open($L) {
 $L = $L | 0;
 var $$ = 0, $0 = 0, $1 = 0, $17 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $7 = 0, label = 0;
 $0 = _luaL_checklstring($L, 1, 0) | 0;
 $1 = _luaL_optlstring($L, 2, 59072, 0) | 0;
 $2 = _lua_newuserdata($L, 8) | 0;
 $3 = $2 + 4 | 0;
 HEAP32[$3 >> 2] = 0;
 _luaL_setmetatable($L, 56736);
 HEAP32[$2 >> 2] = 0;
 HEAP32[$3 >> 2] = 349;
 $4 = HEAP8[$1 >> 0] | 0;
 if (!($4 << 24 >> 24)) label = 4; else {
  $7 = $1 + 1 | 0;
  if (!(_memchr(57336, $4 << 24 >> 24, 4) | 0)) label = 4; else {
   $$ = (HEAP8[$7 >> 0] | 0) == 43 ? $1 + 2 | 0 : $7;
   if (HEAP8[((HEAP8[$$ >> 0] | 0) == 98 ? $$ + 1 | 0 : $$) >> 0] | 0) label = 4;
  }
 }
 if ((label | 0) == 4) _luaL_argerror($L, 2, 57344) | 0;
 $17 = _fopen($0 | 0, $1 | 0) | 0;
 HEAP32[$2 >> 2] = $17;
 if ($17) {
  $20 = 1;
  return $20 | 0;
 }
 $20 = _luaL_fileresult($L, 0, $0) | 0;
 return $20 | 0;
}

function _display_screen2scene($x, $y, $tx, $ty) {
 $x = +$x;
 $y = +$y;
 $tx = $tx | 0;
 $ty = $ty | 0;
 var $0 = 0, $13 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $20 = 0.0, $23 = 0.0, $35 = 0.0, $4 = 0, $8 = 0.0, $cos = 0.0;
 $0 = HEAP32[4528] | 0;
 if (!$0) ___assert_fail(18472, 18224, 275, 18496);
 if (!$tx) ___assert_fail(18520, 18224, 276, 18496);
 if (!$ty) ___assert_fail(18528, 18224, 277, 18496); else {
  $4 = HEAP32[4532] | 0;
  $8 = +((HEAP32[$0 + 4 >> 2] | 0) >>> 0) * .5;
  $13 = +((HEAP32[$0 + 8 >> 2] | 0) >>> 0) * .5;
  $16 = +HEAPF32[$4 + 8 >> 2];
  $17 = ($x - $8) / $16;
  $18 = ($y - $13) / $16;
  $20 = +HEAPF32[$4 + 12 >> 2];
  $cos = +Math_cos(+$20);
  $23 = +Math_sin(+-$20);
  $35 = $13 + ($18 * $cos + $17 * $23) - +HEAPF32[$4 + 4 >> 2];
  HEAPF32[$tx >> 2] = $8 + ($17 * $cos - $18 * $23) - +HEAPF32[$4 >> 2];
  HEAPF32[$ty >> 2] = $35;
  return;
 }
}

function _mlua_new_shader($L) {
 $L = $L | 0;
 var $$0 = 0, $10 = 0, $error = 0, $frag_color$0 = 0, $frag_tex$0 = 0, $vert$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $error = sp;
 if (!$L) ___assert_fail(23976, 13016, 34, 13096);
 if ((_lua_gettop($L) | 0) > 0) $vert$0 = _lua_tolstring($L, 1, 0) | 0; else $vert$0 = 0;
 if ((_lua_gettop($L) | 0) > 1) $frag_color$0 = _lua_tolstring($L, 2, 0) | 0; else $frag_color$0 = 0;
 if ((_lua_gettop($L) | 0) > 2) $frag_tex$0 = _lua_tolstring($L, 3, 0) | 0; else $frag_tex$0 = 0;
 $10 = _display_new_shader($vert$0, $frag_color$0, $frag_tex$0, $error) | 0;
 if (!$10) {
  _lua_pushnil($L);
  _lua_pushstring($L, HEAP32[$error >> 2] | 0) | 0;
  _free(HEAP32[$error >> 2] | 0);
  $$0 = 2;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  _push_shader($L, $10);
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _inflateReset($strm) {
 $strm = $strm | 0;
 var $$0 = 0, $12 = 0, $2 = 0, $22 = 0;
 if (!$strm) {
  $$0 = -2;
  return $$0 | 0;
 }
 $2 = HEAP32[$strm + 28 >> 2] | 0;
 if (!$2) {
  $$0 = -2;
  return $$0 | 0;
 }
 HEAP32[$2 + 40 >> 2] = 0;
 HEAP32[$2 + 44 >> 2] = 0;
 HEAP32[$2 + 48 >> 2] = 0;
 HEAP32[$2 + 28 >> 2] = 0;
 HEAP32[$strm + 20 >> 2] = 0;
 HEAP32[$strm + 8 >> 2] = 0;
 HEAP32[$strm + 24 >> 2] = 0;
 $12 = HEAP32[$2 + 8 >> 2] | 0;
 if ($12) HEAP32[$strm + 48 >> 2] = $12 & 1;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 12 >> 2] = 0;
 HEAP32[$2 + 20 >> 2] = 32768;
 HEAP32[$2 + 32 >> 2] = 0;
 HEAP32[$2 + 56 >> 2] = 0;
 HEAP32[$2 + 60 >> 2] = 0;
 $22 = $2 + 1328 | 0;
 HEAP32[$2 + 108 >> 2] = $22;
 HEAP32[$2 + 80 >> 2] = $22;
 HEAP32[$2 + 76 >> 2] = $22;
 HEAP32[$2 + 7104 >> 2] = 1;
 HEAP32[$2 + 7108 >> 2] = -1;
 $$0 = 0;
 return $$0 | 0;
}

function __ZN12b2BroadPhase11CreateProxyERK6b2AABBPv($this, $aabb, $userData) {
 $this = $this | 0;
 $aabb = $aabb | 0;
 $userData = $userData | 0;
 var $0 = 0, $1 = 0, $10 = 0, $13 = 0, $18 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0;
 $0 = __ZN13b2DynamicTree11CreateProxyERK6b2AABBPv($this, $aabb, $userData) | 0;
 $1 = $this + 28 | 0;
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + 1;
 $4 = $this + 40 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $this + 36 | 0;
 $9 = $this + 32 | 0;
 if (($5 | 0) == (HEAP32[$6 >> 2] | 0)) {
  $10 = HEAP32[$9 >> 2] | 0;
  HEAP32[$6 >> 2] = $5 << 1;
  $13 = __Z7b2Alloci($5 << 3) | 0;
  HEAP32[$9 >> 2] = $13;
  _memcpy($13 | 0, $10 | 0, HEAP32[$4 >> 2] << 2 | 0) | 0;
  __Z6b2FreePv($10);
  $18 = HEAP32[$4 >> 2] | 0;
 } else $18 = $5;
 HEAP32[(HEAP32[$9 >> 2] | 0) + ($18 << 2) >> 2] = $0;
 HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1;
 return $0 | 0;
}

function __ZN12b2BroadPhase9MoveProxyEiRK6b2AABBRK6b2Vec2($this, $proxyId, $aabb, $displacement) {
 $this = $this | 0;
 $proxyId = $proxyId | 0;
 $aabb = $aabb | 0;
 $displacement = $displacement | 0;
 var $1 = 0, $10 = 0, $15 = 0, $2 = 0, $3 = 0, $6 = 0, $7 = 0;
 if (!(__ZN13b2DynamicTree9MoveProxyEiRK6b2AABBRK6b2Vec2($this, $proxyId, $aabb, $displacement) | 0)) return;
 $1 = $this + 40 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $this + 36 | 0;
 $6 = $this + 32 | 0;
 if (($2 | 0) == (HEAP32[$3 >> 2] | 0)) {
  $7 = HEAP32[$6 >> 2] | 0;
  HEAP32[$3 >> 2] = $2 << 1;
  $10 = __Z7b2Alloci($2 << 3) | 0;
  HEAP32[$6 >> 2] = $10;
  _memcpy($10 | 0, $7 | 0, HEAP32[$1 >> 2] << 2 | 0) | 0;
  __Z6b2FreePv($7);
  $15 = HEAP32[$1 >> 2] | 0;
 } else $15 = $2;
 HEAP32[(HEAP32[$6 >> 2] | 0) + ($15 << 2) >> 2] = $proxyId;
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + 1;
 return;
}

function _mz_zip_reader_is_file_a_directory($pZip, $file_index) {
 $pZip = $pZip | 0;
 $file_index = $file_index | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $2 = 0, $24 = 0;
 if (!$pZip) {
  $$0 = 0;
  return $$0 | 0;
 }
 $2 = HEAP32[$pZip + 56 >> 2] | 0;
 if (!$2) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$pZip + 16 >> 2] | 0) >>> 0 <= $file_index >>> 0) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[$pZip + 20 >> 2] | 0) != 1) {
  $$0 = 0;
  return $$0 | 0;
 }
 $13 = HEAP32[(HEAP32[$2 + 16 >> 2] | 0) + ($file_index << 2) >> 2] | 0;
 $14 = HEAP32[$2 >> 2] | 0;
 if (!($14 + $13 | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $24 = HEAPU8[$14 + ($13 + 29) >> 0] << 8 | HEAPU8[$14 + ($13 + 28) >> 0];
 if ($24) if ((HEAP8[$14 + ($13 + 45 + $24) >> 0] | 0) == 47) {
  $$0 = 1;
  return $$0 | 0;
 }
 $$0 = (HEAPU8[$14 + ($13 + 38) >> 0] | 0) >>> 4 & 1;
 return $$0 | 0;
}

function _luaK_nil($fs, $from, $n) {
 $fs = $fs | 0;
 $from = $from | 0;
 $n = $n | 0;
 var $$from = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $3 = 0;
 $0 = $n + $from | 0;
 $1 = $0 + -1 | 0;
 $3 = HEAP32[$fs + 16 >> 2] | 0;
 do if (($3 | 0) > (HEAP32[$fs + 20 >> 2] | 0)) {
  $11 = (HEAP32[(HEAP32[$fs >> 2] | 0) + 48 >> 2] | 0) + ($3 + -1 << 2) | 0;
  $12 = HEAP32[$11 >> 2] | 0;
  if (($12 & 63 | 0) == 4) {
   $16 = $12 >>> 6 & 255;
   $18 = $16 + ($12 >>> 23) | 0;
   if (($16 | 0) > ($from | 0) | ($18 + 1 | 0) < ($from | 0)) if (($16 | 0) < ($from | 0) | ($16 | 0) > ($0 | 0)) break;
   $$from = ($16 | 0) < ($from | 0) ? $16 : $from;
   HEAP32[$11 >> 2] = (($18 | 0) > ($1 | 0) ? $18 : $1) - $$from << 23 | $$from << 6 & 16320 | $12 & 8372287;
   return;
  }
 } while (0);
 _luaK_code($fs, $from << 6 | ($n << 23) + -8388608 | 4) | 0;
 return;
}

function _luaV_objlen($L, $ra, $rb) {
 $L = $L | 0;
 $ra = $ra | 0;
 $rb = $rb | 0;
 var $15 = 0, $2 = 0, $23 = 0, $3 = 0, $5 = 0, $tm$0 = 0;
 $2 = HEAP32[$rb + 4 >> 2] & 15;
 do if (($2 | 0) == 5) {
  $3 = HEAP32[$rb >> 2] | 0;
  $5 = HEAP32[$3 + 24 >> 2] | 0;
  if ($5) if (!(HEAP8[$5 + 6 >> 0] & 16)) {
   $15 = _luaT_gettm($5, 4, HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 152 >> 2] | 0) | 0;
   if ($15) {
    $tm$0 = $15;
    break;
   }
  }
  HEAP32[$ra >> 2] = _luaH_getn($3) | 0;
  HEAP32[$ra + 4 >> 2] = 19;
  return;
 } else if (($2 | 0) == 4) {
  HEAP32[$ra >> 2] = HEAP32[(HEAP32[$rb >> 2] | 0) + 12 >> 2];
  HEAP32[$ra + 4 >> 2] = 19;
  return;
 } else {
  $23 = _luaT_gettmbyobj($L, $rb, 4) | 0;
  if (!(HEAP32[$23 + 4 >> 2] | 0)) _luaG_typeerror($L, $rb, 64064); else $tm$0 = $23;
 } while (0);
 _luaT_callTM($L, $tm$0, $rb, $rb, $ra, 1);
 return;
}

function _register_truetype($L) {
 $L = $L | 0;
 _lua_pushcclosure($L, 231, 0);
 _lua_setfield($L, -2, 5856);
 _luaL_newmetatable($L, 7864) | 0;
 _lua_pushlstring($L, 7864, 4) | 0;
 _lua_setfield($L, -2, 13456);
 _lua_pushcclosure($L, 232, 0);
 _lua_setfield($L, -2, 13576);
 _lua_pushcclosure($L, 233, 0);
 _lua_setfield($L, -2, 5872);
 _lua_pushcclosure($L, 234, 0);
 _lua_setfield($L, -2, 5888);
 _lua_pushcclosure($L, 235, 0);
 _lua_setfield($L, -2, 5896);
 _lua_pushcclosure($L, 236, 0);
 _lua_setfield($L, -2, 63064);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 64992);
 _lua_setfield($L, -2, 5912);
 _lua_createtable($L, 0, 0);
 _lua_pushnumber($L, 1.0);
 _lua_setfield($L, -2, 23488);
 _lua_pushnumber($L, 2.0);
 _lua_setfield($L, -2, 5920);
 _lua_pushnumber($L, 3.0);
 _lua_setfield($L, -2, 23480);
 _lua_setfield($L, -2, 5928);
 return;
}

function _png_safecat($buffer, $bufsize, $pos, $string) {
 $buffer = $buffer | 0;
 $bufsize = $bufsize | 0;
 $pos = $pos | 0;
 $string = $string | 0;
 var $$014 = 0, $$05 = 0, $$1 = 0, $$2 = 0, $10 = 0, $3 = 0, $4 = 0, $8 = 0;
 if (!(($buffer | 0) != 0 & $pos >>> 0 < $bufsize >>> 0)) {
  $$2 = $pos;
  return $$2 | 0;
 }
 if (!$string) $$1 = $pos; else {
  $3 = $bufsize + -1 | 0;
  $4 = HEAP8[$string >> 0] | 0;
  if ($4 << 24 >> 24 != 0 & $3 >>> 0 > $pos >>> 0) {
   $$014 = $pos;
   $$05 = $string;
   $10 = $4;
   while (1) {
    $$05 = $$05 + 1 | 0;
    $8 = $$014 + 1 | 0;
    HEAP8[$buffer + $$014 >> 0] = $10;
    $10 = HEAP8[$$05 >> 0] | 0;
    if (!($10 << 24 >> 24 != 0 & $8 >>> 0 < $3 >>> 0)) {
     $$1 = $8;
     break;
    } else $$014 = $8;
   }
  } else $$1 = $pos;
 }
 HEAP8[$buffer + $$1 >> 0] = 0;
 $$2 = $$1;
 return $$2 | 0;
}

function _lua_isstring($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $4 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 3) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 59168;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 3) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 4 >> 2] | 0) == 22) $$0$i = 59168; else {
   $21 = HEAP32[$17 >> 2] | 0;
   if (($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0)) $$0$i = 59168; else $$0$i = $21 + 16 + ($16 + -1 << 3) | 0;
  }
 } while (0);
 return ((HEAP32[$$0$i + 4 >> 2] & 15) + -3 | 0) >>> 0 < 2 | 0;
}

function _frexp($x, $e) {
 $x = +$x;
 $e = $e | 0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $2 = 0, $4 = 0, $7 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $2 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0;
 $4 = $2 & 2047;
 if (!$4) {
  if ($x != 0.0) {
   $7 = +_frexp($x * 18446744073709551616.0, $e);
   $$01 = $7;
   $storemerge = (HEAP32[$e >> 2] | 0) + -64 | 0;
  } else {
   $$01 = $x;
   $storemerge = 0;
  }
  HEAP32[$e >> 2] = $storemerge;
  $$0 = $$01;
  return +$$0;
 } else if (($4 | 0) == 2047) {
  $$0 = $x;
  return +$$0;
 } else {
  HEAP32[$e >> 2] = $4 + -1022;
  HEAP32[tempDoublePtr >> 2] = $0;
  HEAP32[tempDoublePtr + 4 >> 2] = $1 & -2146435073 | 1071644672;
  $$0 = +HEAPF64[tempDoublePtr >> 3];
  return +$$0;
 }
 return +(0.0);
}

function __ZN15b2ContactSolver13StoreImpulsesEv($this) {
 $this = $this | 0;
 var $1 = 0, $10 = 0, $12 = 0, $4 = 0, $6 = 0, $i$02 = 0, $j$01 = 0;
 $1 = HEAP32[$this + 48 >> 2] | 0;
 if (($1 | 0) <= 0) return;
 $4 = HEAP32[$this + 40 >> 2] | 0;
 $6 = HEAP32[$this + 44 >> 2] | 0;
 $i$02 = 0;
 do {
  $10 = HEAP32[$6 + (HEAP32[$4 + ($i$02 * 156 | 0) + 152 >> 2] << 2) >> 2] | 0;
  $12 = HEAP32[$4 + ($i$02 * 156 | 0) + 148 >> 2] | 0;
  if (($12 | 0) > 0) {
   $j$01 = 0;
   do {
    HEAPF32[$10 + ($j$01 * 20 | 0) + 72 >> 2] = +HEAPF32[$4 + ($i$02 * 156 | 0) + ($j$01 * 36 | 0) + 16 >> 2];
    HEAPF32[$10 + ($j$01 * 20 | 0) + 76 >> 2] = +HEAPF32[$4 + ($i$02 * 156 | 0) + ($j$01 * 36 | 0) + 20 >> 2];
    $j$01 = $j$01 + 1 | 0;
   } while (($j$01 | 0) < ($12 | 0));
  }
  $i$02 = $i$02 + 1 | 0;
 } while (($i$02 | 0) < ($1 | 0));
 return;
}

function _lua_getstack($L, $level, $ar) {
 $L = $L | 0;
 $level = $level | 0;
 $ar = $ar | 0;
 var $$0 = 0, $$015 = 0, $3 = 0, $ci$0$lcssa10 = 0, $ci$04 = 0, $ci$06 = 0, label = 0;
 if (($level | 0) < 0) {
  $$0 = 0;
  return $$0 | 0;
 }
 $ci$04 = HEAP32[$L + 16 >> 2] | 0;
 if (($level | 0) > 0) {
  $3 = $L + 48 | 0;
  $$015 = $level;
  $ci$06 = $ci$04;
  do {
   if (($ci$06 | 0) == ($3 | 0)) {
    $$0 = 0;
    label = 9;
    break;
   }
   $$015 = $$015 + -1 | 0;
   $ci$06 = HEAP32[$ci$06 + 8 >> 2] | 0;
  } while (($$015 | 0) > 0);
  if ((label | 0) == 9) return $$0 | 0;
  if (!$$015) $ci$0$lcssa10 = $ci$06; else {
   $$0 = 0;
   return $$0 | 0;
  }
 } else $ci$0$lcssa10 = $ci$04;
 if (($ci$0$lcssa10 | 0) == ($L + 48 | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP32[$ar + 96 >> 2] = $ci$0$lcssa10;
 $$0 = 1;
 return $$0 | 0;
}

function _lua_isinteger($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $4 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 3) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 59168;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 3) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 36 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 4 >> 2] | 0) == 22) $$0$i = 59168; else {
   $21 = HEAP32[$17 >> 2] | 0;
   if (($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0)) $$0$i = 59168; else $$0$i = $21 + 16 + ($16 + -1 << 3) | 0;
  }
 } while (0);
 return (HEAP32[$$0$i + 4 >> 2] | 0) == 19 | 0;
}

function _finishCcall($L, $status) {
 $L = $L | 0;
 $status = $status | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $25 = 0, $4 = 0;
 $0 = $L + 16 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $1 + 34 | 0;
 $4 = HEAPU8[$2 >> 0] | 0;
 if ($4 & 16) {
  HEAP8[$2 >> 0] = $4 & 239;
  HEAP32[$L + 88 >> 2] = HEAP32[$1 + 20 >> 2];
 }
 if ((HEAP16[$1 + 32 >> 1] | 0) == -1) {
  $16 = (HEAP32[$0 >> 2] | 0) + 4 | 0;
  $18 = $L + 8 | 0;
  $19 = HEAP32[$18 >> 2] | 0;
  if ((HEAP32[$16 >> 2] | 0) >>> 0 < $19 >>> 0) {
   HEAP32[$16 >> 2] = $19;
   $$pre$phiZ2D = $18;
  } else $$pre$phiZ2D = $18;
 } else $$pre$phiZ2D = $L + 8 | 0;
 $25 = FUNCTION_TABLE_iiii[HEAP32[$1 + 16 >> 2] & 31]($L, $status, HEAP32[$1 + 24 >> 2] | 0) | 0;
 _luaD_poscall($L, (HEAP32[$$pre$phiZ2D >> 2] | 0) + (0 - $25 << 3) | 0) | 0;
 return;
}

function _luaE_freethread($L, $L1) {
 $L = $L | 0;
 $L1 = $L1 | 0;
 var $0 = 0, $1 = 0, $16 = 0, $3 = 0, $7 = 0, $8 = 0, $next$01$i$i = 0, $next$01$i$i$looptemp = 0;
 $0 = $L1 + -4 | 0;
 $1 = $L1 + 28 | 0;
 _luaF_close($L1, HEAP32[$1 >> 2] | 0);
 $3 = HEAP32[$1 >> 2] | 0;
 if (!$3) {
  _luaM_realloc_($L, $0, 116, 0) | 0;
  return;
 }
 HEAP32[$L1 + 16 >> 2] = $L1 + 48;
 $7 = $L1 + 60 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 HEAP32[$7 >> 2] = 0;
 if (!$8) $16 = $3; else {
  $next$01$i$i = $8;
  do {
   $next$01$i$i$looptemp = $next$01$i$i;
   $next$01$i$i = HEAP32[$next$01$i$i + 12 >> 2] | 0;
   _luaM_realloc_($L1, $next$01$i$i$looptemp, 36, 0) | 0;
  } while (($next$01$i$i | 0) != 0);
  $16 = HEAP32[$1 >> 2] | 0;
 }
 _luaM_realloc_($L1, $16, HEAP32[$L1 + 92 >> 2] << 3, 0) | 0;
 _luaM_realloc_($L, $0, 116, 0) | 0;
 return;
}

function _music_set_pitch($m, $pitch) {
 $m = $m | 0;
 $pitch = +$pitch;
 var $2 = 0, $5 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 if (!$m) ___assert_fail(23232, 10720, 141, 10816);
 HEAPF32[$m + 44 >> 2] = $pitch;
 $2 = HEAP32[$m >> 2] | 0;
 if (!$2) {
  STACKTOP = sp;
  return;
 }
 _alSourcef(HEAP32[$2 >> 2] | 0, 4099, +$pitch);
 $5 = _alGetError() | 0;
 if (!$5) {
  STACKTOP = sp;
  return;
 } else $7 = $5;
 do {
  $8 = _alGetString($7 | 0) | 0;
  HEAP32[$vararg_buffer >> 2] = 10720;
  HEAP32[$vararg_buffer + 4 >> 2] = 149;
  HEAP32[$vararg_buffer + 8 >> 2] = 10816;
  HEAP32[$vararg_buffer + 12 >> 2] = $8;
  _log_internal(3, 12304, 12024, $vararg_buffer);
  $7 = _alGetError() | 0;
 } while (($7 | 0) != 0);
 STACKTOP = sp;
 return;
}

function _luaK_concat($fs, $l1, $l2) {
 $fs = $fs | 0;
 $l1 = $l1 | 0;
 $l2 = $l2 | 0;
 var $1 = 0, $11 = 0, $3 = 0, $4 = 0, $6 = 0, $9 = 0, $fs$idx$val$idx$val = 0, $list$0 = 0;
 if (($l2 | 0) == -1) return;
 $1 = HEAP32[$l1 >> 2] | 0;
 if (($1 | 0) == -1) {
  HEAP32[$l1 >> 2] = $l2;
  return;
 }
 $fs$idx$val$idx$val = HEAP32[(HEAP32[$fs >> 2] | 0) + 48 >> 2] | 0;
 $list$0 = $1;
 while (1) {
  $3 = $fs$idx$val$idx$val + ($list$0 << 2) | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  $6 = ($4 >>> 14) + -131071 | 0;
  if (($6 | 0) == -1) break;
  $9 = $list$0 + 1 + $6 | 0;
  if (($9 | 0) == -1) break; else $list$0 = $9;
 }
 $11 = ~$list$0 + $l2 | 0;
 if (((($11 | 0) > -1 ? $11 : 0 - $11 | 0) | 0) > 131071) _luaX_syntaxerror(HEAP32[$fs + 8 >> 2] | 0, 65576);
 HEAP32[$3 >> 2] = $4 & 16383 | ($11 << 14) + 2147467264;
 return;
}

function __ZN15b2RevoluteJoint9SetLimitsEff($this, $lower, $upper) {
 $this = $this | 0;
 $lower = +$lower;
 $upper = +$upper;
 var $1 = 0, $11 = 0, $18 = 0, $19 = 0, $21 = 0, $8 = 0, $9 = 0;
 if (!($lower <= $upper)) ___assert_fail(85856, 85872, 471, 85944);
 $1 = $this + 120 | 0;
 if (!(+HEAPF32[$1 >> 2] != $lower)) if (!(+HEAPF32[$this + 124 >> 2] != $upper)) return;
 $8 = HEAP32[$this + 48 >> 2] | 0;
 $9 = $8 + 4 | 0;
 $11 = HEAPU16[$9 >> 1] | 0;
 if (!($11 & 2)) {
  HEAP16[$9 >> 1] = $11 | 2;
  HEAPF32[$8 + 144 >> 2] = 0.0;
 }
 $18 = HEAP32[$this + 52 >> 2] | 0;
 $19 = $18 + 4 | 0;
 $21 = HEAPU16[$19 >> 1] | 0;
 if (!($21 & 2)) {
  HEAP16[$19 >> 1] = $21 | 2;
  HEAPF32[$18 + 144 >> 2] = 0.0;
 }
 HEAPF32[$this + 92 >> 2] = 0.0;
 HEAPF32[$1 >> 2] = $lower;
 HEAPF32[$this + 124 >> 2] = $upper;
 return;
}

function _push_parser() {
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $5 = 0, $7 = 0;
 $0 = HEAP32[1546] | 0;
 $1 = $0 + 1 | 0;
 HEAP32[1546] = $1;
 if (($0 | 0) > 0 | ($1 | 0) < 0) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP32[6192 + ($1 << 2) >> 2] = 0;
 $5 = 6200 + ($1 * 768 | 0) | 0;
 if (!$5) ___assert_fail(23272, 7776, 46, 7808);
 HEAPF32[$5 >> 2] = 1.0;
 $7 = 6204 + ($1 * 768 | 0) | 0;
 HEAP32[$7 + 0 >> 2] = 0;
 HEAP32[$7 + 4 >> 2] = 0;
 HEAP32[$7 + 8 >> 2] = 0;
 HEAP32[$7 + 12 >> 2] = 0;
 HEAP32[6220 + ($1 * 768 | 0) >> 2] = 255;
 HEAP8[6224 + ($1 * 768 | 0) >> 0] = 0;
 $10 = 6228 + ($1 * 768 | 0) | 0;
 HEAP8[6225 + ($1 * 768 | 0) >> 0] = 0;
 HEAP32[$10 + 0 >> 2] = 0;
 HEAP32[$10 + 4 >> 2] = 0;
 HEAP32[$10 + 8 >> 2] = 0;
 HEAP32[$10 + 12 >> 2] = 0;
 HEAP32[$10 + 16 >> 2] = 0;
 $$0 = $5;
 return $$0 | 0;
}

function _realloc($oldmem, $bytes) {
 $oldmem = $oldmem | 0;
 $bytes = $bytes | 0;
 var $12 = 0, $15 = 0, $20 = 0, $8 = 0, $9 = 0, $mem$0 = 0;
 if (!$oldmem) {
  $mem$0 = _malloc($bytes) | 0;
  return $mem$0 | 0;
 }
 if ($bytes >>> 0 > 4294967231) {
  HEAP32[(___errno_location() | 0) >> 2] = 12;
  $mem$0 = 0;
  return $mem$0 | 0;
 }
 if ($bytes >>> 0 < 11) $8 = 16; else $8 = $bytes + 11 & -8;
 $9 = _try_realloc_chunk($oldmem + -8 | 0, $8) | 0;
 if ($9) {
  $mem$0 = $9 + 8 | 0;
  return $mem$0 | 0;
 }
 $12 = _malloc($bytes) | 0;
 if (!$12) {
  $mem$0 = 0;
  return $mem$0 | 0;
 }
 $15 = HEAP32[$oldmem + -4 >> 2] | 0;
 $20 = ($15 & -8) - (($15 & 3 | 0) == 0 ? 8 : 4) | 0;
 _memcpy($12 | 0, $oldmem | 0, ($20 >>> 0 < $bytes >>> 0 ? $20 : $bytes) | 0) | 0;
 _free($oldmem);
 $mem$0 = $12;
 return $mem$0 | 0;
}

function _setpath($L, $fieldname, $envname1, $envname2, $def) {
 $L = $L | 0;
 $fieldname = $fieldname | 0;
 $envname1 = $envname1 | 0;
 $envname2 = $envname2 | 0;
 $def = $def | 0;
 var $0 = 0, $2 = 0, $4 = 0, $path$01 = 0, label = 0;
 $0 = _getenv($envname1 | 0) | 0;
 if (!$0) {
  $2 = _getenv($envname2 | 0) | 0;
  if ($2) {
   $path$01 = $2;
   label = 3;
  }
 } else {
  $path$01 = $0;
  label = 3;
 }
 if ((label | 0) == 3) {
  _lua_getfield($L, -1001e3, 58808) | 0;
  $4 = _lua_toboolean($L, -1) | 0;
  _lua_settop($L, -2);
  if (!$4) {
   _luaL_gsub($L, _luaL_gsub($L, $path$01, 58784, 58792) | 0, 58800, $def) | 0;
   _lua_rotate($L, -2, -1);
   _lua_settop($L, -2);
   _lua_setfield($L, -2, $fieldname);
   return;
  }
 }
 _lua_pushstring($L, $def) | 0;
 _lua_setfield($L, -2, $fieldname);
 return;
}

function _luaL_error($L, $fmt, $varargs) {
 $L = $L | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $ar$i = 0, $argp = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $vararg_buffer = sp;
 $ar$i = sp + 24 | 0;
 $argp = sp + 8 | 0;
 HEAP32[$argp >> 2] = $varargs;
 if (_lua_getstack($L, 1, $ar$i) | 0) {
  _lua_getinfo($L, 55248, $ar$i) | 0;
  $3 = HEAP32[$ar$i + 20 >> 2] | 0;
  if (($3 | 0) > 0) {
   HEAP32[$vararg_buffer >> 2] = $ar$i + 36;
   HEAP32[$vararg_buffer + 4 >> 2] = $3;
   _lua_pushfstring($L, 55256, $vararg_buffer) | 0;
   _lua_pushvfstring($L, $fmt, $argp) | 0;
   _lua_concat($L, 2);
   _lua_error($L) | 0;
  }
 }
 _lua_pushlstring($L, 62584, 0) | 0;
 _lua_pushvfstring($L, $fmt, $argp) | 0;
 _lua_concat($L, 2);
 _lua_error($L) | 0;
 return 0;
}

function _strtof($s, $p) {
 $s = $s | 0;
 $p = $p | 0;
 var $0 = 0, $1 = 0, $12 = 0, $16 = 0, $17 = 0.0, $4 = 0.0, $f$i = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $f$i = sp;
 dest = $f$i + 0 | 0;
 stop = dest + 112 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $0 = $f$i + 4 | 0;
 HEAP32[$0 >> 2] = $s;
 $1 = $f$i + 8 | 0;
 HEAP32[$1 >> 2] = -1;
 HEAP32[$f$i + 44 >> 2] = $s;
 HEAP32[$f$i + 76 >> 2] = -1;
 ___shlim($f$i, 0);
 $4 = +___floatscan($f$i, 0, 1);
 $12 = (HEAP32[$0 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) + (HEAP32[$f$i + 108 >> 2] | 0) | 0;
 if (!$p) {
  $17 = $4;
  STACKTOP = sp;
  return +$17;
 }
 if (!$12) $16 = $s; else $16 = $s + $12 | 0;
 HEAP32[$p >> 2] = $16;
 $17 = $4;
 STACKTOP = sp;
 return +$17;
}

function __ZN24b2ChainAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $indexA, $fixtureB, $indexB, $allocator) {
 $fixtureA = $fixtureA | 0;
 $indexA = $indexA | 0;
 $fixtureB = $fixtureB | 0;
 $indexB = $indexB | 0;
 $allocator = $allocator | 0;
 var $0 = 0, $16 = 0;
 $0 = __ZN16b2BlockAllocator8AllocateEi($allocator, 148) | 0;
 if (!$0) {
  $16 = 0;
  return $16 | 0;
 }
 __ZN9b2ContactC2EP9b2FixtureiS1_i($0, $fixtureA, $indexA, $fixtureB, $indexB);
 HEAP32[$0 >> 2] = 93024;
 if ((HEAP32[(HEAP32[(HEAP32[$0 + 48 >> 2] | 0) + 12 >> 2] | 0) + 4 >> 2] | 0) != 3) ___assert_fail(93040, 93088, 42, 93168);
 if ((HEAP32[(HEAP32[(HEAP32[$0 + 52 >> 2] | 0) + 12 >> 2] | 0) + 4 >> 2] | 0) == 2) {
  $16 = $0;
  return $16 | 0;
 } else ___assert_fail(93200, 93088, 43, 93168);
 return 0;
}

function _mlua_load_surface($L) {
 $L = $L | 0;
 var $$0 = 0, $1 = 0, $2 = 0, $surface = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $surface = sp + 20 | 0;
 if (!$L) ___assert_fail(23976, 19928, 175, 20592);
 $1 = _luaL_checklstring($L, 1, 0) | 0;
 $2 = _display_load_surface($1, $surface) | 0;
 if (($2 | 0) == -7) _luaL_error($L, 20616, sp) | 0; else if (($2 | 0) == -74) _luaL_error($L, 20744, $vararg_buffer3) | 0; else if (($2 | 0) == -95) _luaL_error($L, 20704, $vararg_buffer1) | 0; else if (($2 | 0) >= 0) {
  _push_surface($L, HEAP32[$surface >> 2] | 0);
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $$0 = _luaL_fileresult($L, 0, $1) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _getShaderError($obj) {
 $obj = $obj | 0;
 var $2 = 0, $4 = 0, $6 = 0, $7 = 0, $error$0 = 0, $length = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $length = sp;
 if (!((_glIsShader($obj | 0) | 0) << 24 >> 24)) _glGetProgramiv($obj | 0, 35716, $length | 0); else _glGetShaderiv($obj | 0, 35716, $length | 0);
 $2 = HEAP32[$length >> 2] | 0;
 if (($2 | 0) <= 1) {
  $error$0 = 0;
  STACKTOP = sp;
  return $error$0 | 0;
 }
 $4 = _xmalloc($2) | 0;
 $6 = (_glIsShader($obj | 0) | 0) << 24 >> 24 == 0;
 $7 = HEAP32[$length >> 2] | 0;
 if ($6) {
  _glGetProgramInfoLog($obj | 0, $7 | 0, 0, $4 | 0);
  $error$0 = $4;
  STACKTOP = sp;
  return $error$0 | 0;
 } else {
  _glGetShaderInfoLog($obj | 0, $7 | 0, 0, $4 | 0);
  $error$0 = $4;
  STACKTOP = sp;
  return $error$0 | 0;
 }
 return 0;
}

function __ZN23b2ChainAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $indexA, $fixtureB, $indexB, $allocator) {
 $fixtureA = $fixtureA | 0;
 $indexA = $indexA | 0;
 $fixtureB = $fixtureB | 0;
 $indexB = $indexB | 0;
 $allocator = $allocator | 0;
 var $0 = 0, $16 = 0;
 $0 = __ZN16b2BlockAllocator8AllocateEi($allocator, 148) | 0;
 if (!$0) {
  $16 = 0;
  return $16 | 0;
 }
 __ZN9b2ContactC2EP9b2FixtureiS1_i($0, $fixtureA, $indexA, $fixtureB, $indexB);
 HEAP32[$0 >> 2] = 92848;
 if ((HEAP32[(HEAP32[(HEAP32[$0 + 48 >> 2] | 0) + 12 >> 2] | 0) + 4 >> 2] | 0) != 3) ___assert_fail(93040, 92864, 42, 92944);
 if (!(HEAP32[(HEAP32[(HEAP32[$0 + 52 >> 2] | 0) + 12 >> 2] | 0) + 4 >> 2] | 0)) {
  $16 = $0;
  return $16 | 0;
 } else ___assert_fail(93456, 92864, 43, 92944);
 return 0;
}

function _coshf($x) {
 $x = +$x;
 var $$0 = 0.0, $1 = 0, $13 = 0.0, $2 = 0.0, $6 = 0.0, $__x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__x = sp;
 $1 = (HEAPF32[tempDoublePtr >> 2] = $x, HEAP32[tempDoublePtr >> 2] | 0) & 2147483647;
 $2 = (HEAP32[tempDoublePtr >> 2] = $1, +HEAPF32[tempDoublePtr >> 2]);
 if ($1 >>> 0 < 1060205079) if ($1 >>> 0 < 964689920) {
  HEAPF32[$__x >> 2] = $2 + 1329227995784915872903807.0e12;
  $$0 = 1.0;
  STACKTOP = sp;
  return +$$0;
 } else {
  $6 = +_expm1f($2);
  $$0 = $6 * $6 / (($6 + 1.0) * 2.0) + 1.0;
  STACKTOP = sp;
  return +$$0;
 } else if ($1 >>> 0 < 1118925335) {
  $13 = +Math_exp(+$2);
  $$0 = ($13 + 1.0 / $13) * .5;
  STACKTOP = sp;
  return +$$0;
 } else {
  $$0 = +___expo2f($2);
  STACKTOP = sp;
  return +$$0;
 }
 return +(0.0);
}

function __ZNK13b2CircleShape11ComputeAABBEP6b2AABBRK11b2Transformi($this, $aabb, $transform, $childIndex) {
 $this = $this | 0;
 $aabb = $aabb | 0;
 $transform = $transform | 0;
 $childIndex = $childIndex | 0;
 var $1 = 0.0, $15 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $24 = 0.0, $3 = 0.0, $6 = 0.0, $8 = 0.0;
 $1 = +HEAPF32[$transform + 12 >> 2];
 $3 = +HEAPF32[$this + 12 >> 2];
 $6 = +HEAPF32[$transform + 8 >> 2];
 $8 = +HEAPF32[$this + 16 >> 2];
 $15 = +HEAPF32[$transform >> 2] + ($1 * $3 - $6 * $8);
 $18 = +HEAPF32[$transform + 4 >> 2] + ($3 * $6 + $1 * $8);
 $19 = $this + 8 | 0;
 $20 = +HEAPF32[$19 >> 2];
 HEAPF32[$aabb >> 2] = $15 - $20;
 HEAPF32[$aabb + 4 >> 2] = $18 - $20;
 $24 = +HEAPF32[$19 >> 2];
 HEAPF32[$aabb + 8 >> 2] = $15 + $24;
 HEAPF32[$aabb + 12 >> 2] = $18 + $24;
 return;
}

function _xrealloc($p, $nmemb, $need, $size, $min_nmemb) {
 $p = $p | 0;
 $nmemb = $nmemb | 0;
 $need = $need | 0;
 $size = $size | 0;
 $min_nmemb = $min_nmemb | 0;
 var $$0 = 0, $13 = 0, $6 = 0, $8 = 0, $9 = 0;
 if (!$p) ___assert_fail(23248, 856, 222, 936);
 if (!$nmemb) ___assert_fail(952, 856, 223, 936);
 if (!$size) ___assert_fail(960, 856, 224, 936);
 if ((HEAP32[$nmemb >> 2] | 0) >>> 0 >= $need >>> 0) {
  $$0 = HEAP32[$p >> 2] | 0;
  return $$0 | 0;
 }
 $6 = $need << 1;
 $8 = $6 >>> 0 > $min_nmemb >>> 0 ? $6 : $min_nmemb;
 $9 = Math_imul($8, $size) | 0;
 if ($9 >>> 0 < (Math_imul($size, $need) | 0) >>> 0) _log_oom_and_exit();
 $13 = _realloc(HEAP32[$p >> 2] | 0, $9) | 0;
 if (!$13) _log_oom_and_exit();
 HEAP32[$p >> 2] = $13;
 HEAP32[$nmemb >> 2] = $8;
 $$0 = $13;
 return $$0 | 0;
}

function _luaX_setinput($L, $ls, $z, $source, $firstchar) {
 $L = $L | 0;
 $ls = $ls | 0;
 $z = $z | 0;
 $source = $source | 0;
 $firstchar = $firstchar | 0;
 var $12 = 0, $13 = 0, $17 = 0, $2 = 0;
 HEAP32[$ls + 12 >> 2] = 0;
 HEAP8[$ls + 60 >> 0] = 46;
 $2 = $ls + 32 | 0;
 HEAP32[$2 >> 2] = $L;
 HEAP32[$ls >> 2] = $firstchar;
 HEAP32[$ls + 20 >> 2] = 289;
 HEAP32[$ls + 36 >> 2] = $z;
 HEAP32[$ls + 28 >> 2] = 0;
 HEAP32[$ls + 4 >> 2] = 1;
 HEAP32[$ls + 8 >> 2] = 1;
 HEAP32[$ls + 52 >> 2] = $source;
 HEAP32[$ls + 56 >> 2] = _luaS_new($L, 66968) | 0;
 $12 = $ls + 40 | 0;
 $13 = HEAP32[$12 >> 2] | 0;
 $17 = _luaM_realloc_(HEAP32[$2 >> 2] | 0, HEAP32[$13 >> 2] | 0, HEAP32[$13 + 8 >> 2] | 0, 32) | 0;
 HEAP32[HEAP32[$12 >> 2] >> 2] = $17;
 HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] = 32;
 return;
}

function _luaF_close($L, $level) {
 $L = $L | 0;
 $level = $level | 0;
 var $0 = 0, $1 = 0, $12 = 0, $17 = 0, $18 = 0, $4 = 0, $6 = 0, label = 0;
 $0 = $L + 32 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) return; else $4 = $1;
 while (1) {
  if ((HEAP32[$4 >> 2] | 0) >>> 0 < $level >>> 0) {
   label = 8;
   break;
  }
  $6 = $4 + 8 | 0;
  HEAP32[$0 >> 2] = HEAP32[$6 >> 2];
  if (!(HEAP32[$4 + 4 >> 2] | 0)) _luaM_realloc_($L, $4, 16, 0) | 0; else {
   $12 = HEAP32[$4 >> 2] | 0;
   $17 = HEAP32[$12 + 4 >> 2] | 0;
   $18 = $6;
   HEAP32[$18 >> 2] = HEAP32[$12 >> 2];
   HEAP32[$18 + 4 >> 2] = $17;
   HEAP32[$4 >> 2] = $6;
   if (!(0 == 0 & ($17 & 64 | 0) == 0)) _luaC_upvalbarrier_($L, $4);
  }
  $4 = HEAP32[$0 >> 2] | 0;
  if (!$4) {
   label = 8;
   break;
  }
 }
 if ((label | 0) == 8) return;
}

function _scalbnf($x, $n) {
 $x = +$x;
 $n = $n | 0;
 var $$0 = 0, $1 = 0.0, $12 = 0, $2 = 0, $5 = 0, $8 = 0.0, $9 = 0, $y$0 = 0.0;
 if (($n | 0) > 127) {
  $1 = $x * 1701411834604692317316873.0e14;
  $2 = $n + -127 | 0;
  if (($2 | 0) > 127) {
   $5 = $n + -254 | 0;
   $$0 = ($5 | 0) > 127 ? 127 : $5;
   $y$0 = $1 * 1701411834604692317316873.0e14;
  } else {
   $$0 = $2;
   $y$0 = $1;
  }
 } else if (($n | 0) < -126) {
  $8 = $x * 1.1754943508222875e-38;
  $9 = $n + 126 | 0;
  if (($9 | 0) < -126) {
   $12 = $n + 252 | 0;
   $$0 = ($12 | 0) < -126 ? -126 : $12;
   $y$0 = $8 * 1.1754943508222875e-38;
  } else {
   $$0 = $9;
   $y$0 = $8;
  }
 } else {
  $$0 = $n;
  $y$0 = $x;
 }
 return +($y$0 * (HEAP32[tempDoublePtr >> 2] = ($$0 << 23) + 1065353216, +HEAPF32[tempDoublePtr >> 2]));
}

function __ZN15b2DistanceJointC2EPK18b2DistanceJointDef($this, $def) {
 $this = $this | 0;
 $def = $def | 0;
 var $14 = 0, $19 = 0, $20 = 0, $3 = 0, $8 = 0, $9 = 0;
 __ZN7b2JointC2EPK10b2JointDef($this, $def);
 HEAP32[$this >> 2] = 83280;
 $3 = $def + 20 | 0;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = $this + 80 | 0;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 $14 = $def + 28 | 0;
 $19 = HEAP32[$14 + 4 >> 2] | 0;
 $20 = $this + 88 | 0;
 HEAP32[$20 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$20 + 4 >> 2] = $19;
 HEAPF32[$this + 104 >> 2] = +HEAPF32[$def + 36 >> 2];
 HEAPF32[$this + 68 >> 2] = +HEAPF32[$def + 40 >> 2];
 HEAPF32[$this + 72 >> 2] = +HEAPF32[$def + 44 >> 2];
 HEAPF32[$this + 100 >> 2] = 0.0;
 HEAPF32[$this + 96 >> 2] = 0.0;
 HEAPF32[$this + 76 >> 2] = 0.0;
 return;
}

function _luaX_newstring($ls, $str, $l) {
 $ls = $ls | 0;
 $str = $str | 0;
 $l = $l | 0;
 var $1 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $ts$0 = 0;
 $1 = HEAP32[$ls + 32 >> 2] | 0;
 $2 = _luaS_newlstr($1, $str, $l) | 0;
 $3 = $1 + 8 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 HEAP32[$3 >> 2] = $4 + 8;
 HEAP32[$4 >> 2] = $2;
 HEAP32[$4 + 4 >> 2] = HEAPU8[$2 + 4 >> 0] | 0 | 64;
 $15 = _luaH_set($1, HEAP32[$ls + 44 >> 2] | 0, (HEAP32[$3 >> 2] | 0) + -8 | 0) | 0;
 $16 = $15 + 4 | 0;
 if (!(HEAP32[$16 >> 2] | 0)) {
  HEAP32[$15 >> 2] = 1;
  HEAP32[$16 >> 2] = 1;
  if ((HEAP32[(HEAP32[$1 + 12 >> 2] | 0) + 12 >> 2] | 0) > 0) {
   _luaC_step($1);
   $ts$0 = $2;
  } else $ts$0 = $2;
 } else $ts$0 = HEAP32[$15 + 8 >> 2] | 0;
 HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -8;
 return $ts$0 | 0;
}

function _display_resize($w, $h) {
 $w = $w | 0;
 $h = $h | 0;
 var $0 = 0, $1 = 0, $10 = 0, $currenth = 0, $currentw = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 12 | 0;
 $1 = sp + 8 | 0;
 $currentw = sp + 4 | 0;
 $currenth = sp;
 HEAP32[$0 >> 2] = $w;
 HEAP32[$1 >> 2] = $h;
 _SDL_GetWindowSize(HEAP32[4523] | 0, $currentw | 0, $currenth | 0);
 if ((HEAP32[$currentw >> 2] | 0) == ($w | 0) ? (HEAP32[$currenth >> 2] | 0) == ($h | 0) : 0) {
  STACKTOP = sp;
  return;
 }
 HEAP32[4533] = $w;
 HEAP32[4534] = $h;
 _emscripten_set_canvas_size($w | 0, $h | 0);
 _SDL_GetWindowSize(HEAP32[4523] | 0, $0 | 0, $1 | 0);
 $10 = _display_new_surface(HEAP32[$0 >> 2] | 0, HEAP32[$1 >> 2] | 0, 1) | 0;
 HEAP32[4525] = $10;
 _display_draw_on($10);
 STACKTOP = sp;
 return;
}

function __ZN11b2WeldJointC2EPK14b2WeldJointDef($this, $def) {
 $this = $this | 0;
 $def = $def | 0;
 var $14 = 0, $19 = 0, $20 = 0, $3 = 0, $8 = 0, $9 = 0;
 __ZN7b2JointC2EPK10b2JointDef($this, $def);
 HEAP32[$this >> 2] = 86280;
 $3 = $def + 20 | 0;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = $this + 80 | 0;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 $14 = $def + 28 | 0;
 $19 = HEAP32[$14 + 4 >> 2] | 0;
 $20 = $this + 88 | 0;
 HEAP32[$20 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$20 + 4 >> 2] = $19;
 HEAPF32[$this + 96 >> 2] = +HEAPF32[$def + 36 >> 2];
 HEAPF32[$this + 68 >> 2] = +HEAPF32[$def + 40 >> 2];
 HEAPF32[$this + 72 >> 2] = +HEAPF32[$def + 44 >> 2];
 HEAPF32[$this + 104 >> 2] = 0.0;
 HEAPF32[$this + 108 >> 2] = 0.0;
 HEAPF32[$this + 112 >> 2] = 0.0;
 return;
}

function _db_setlocal($L) {
 $L = $L | 0;
 var $$0 = 0, $$0$i = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $ar = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $ar = sp;
 if ((_lua_type($L, 1) | 0) == 8) {
  $$0$i = _lua_tothread($L, 1) | 0;
  $4 = 1;
 } else {
  $$0$i = $L;
  $4 = 0;
 }
 $3 = $4 + 1 | 0;
 $5 = _luaL_checkinteger($L, $3) | 0;
 $7 = _luaL_checkinteger($L, $4 | 2) | 0;
 if (!(_lua_getstack($$0$i, $5, $ar) | 0)) {
  $$0 = _luaL_argerror($L, $3, 66528) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $11 = $4 + 3 | 0;
 _luaL_checkany($L, $11);
 _lua_settop($L, $11);
 _lua_xmove($L, $$0$i, 1);
 $12 = _lua_setlocal($$0$i, $ar, $7) | 0;
 if (!$12) _lua_settop($$0$i, -2);
 _lua_pushstring($L, $12) | 0;
 $$0 = 1;
 STACKTOP = sp;
 return $$0 | 0;
}

function __Z36mlua_set_angle_limits_revolute_jointP9lua_State($L) {
 $L = $L | 0;
 var $1 = 0, $2 = 0, $5 = 0, $8 = 0.0, $9 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!$L) ___assert_fail(23976, 4112, 129, 4632);
 $1 = __Z9pop_jointP9lua_Statei($L, 1) | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!$2) {
  _luaL_error($L, 4440, sp) | 0;
  $5 = HEAP32[$1 >> 2] | 0;
 } else $5 = $2;
 if ((HEAP32[$5 + 4 >> 2] | 0) != 1) _luaL_error($L, 4904, sp + 8 | 0) | 0;
 $8 = +_luaL_checknumber($L, 2);
 $9 = +_luaL_checknumber($L, 3);
 if ($8 != $9) {
  __ZN15b2RevoluteJoint9SetLimitsEff($5, $8, $9);
  __ZN15b2RevoluteJoint11EnableLimitEb($5, 1);
  STACKTOP = sp;
  return 0;
 } else {
  __ZN15b2RevoluteJoint11EnableLimitEb($5, 0);
  STACKTOP = sp;
  return 0;
 }
 return 0;
}

function _luaopen_base($L) {
 $L = $L | 0;
 _lua_rawgeti($L, -1001e3, 2) | 0;
 _luaL_setfuncs($L, 64248, 0);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 64456);
 _lua_pushlstring($L, 64464, 7) | 0;
 _lua_setfield($L, -2, 64472);
 _lua_pushstring($L, _lua_typename($L, 0) | 0) | 0;
 _lua_pushstring($L, _lua_typename($L, 1) | 0) | 0;
 _lua_pushstring($L, _lua_typename($L, 2) | 0) | 0;
 _lua_pushstring($L, _lua_typename($L, 3) | 0) | 0;
 _lua_pushstring($L, _lua_typename($L, 4) | 0) | 0;
 _lua_pushstring($L, _lua_typename($L, 5) | 0) | 0;
 _lua_pushstring($L, _lua_typename($L, 6) | 0) | 0;
 _lua_pushstring($L, _lua_typename($L, 7) | 0) | 0;
 _lua_pushstring($L, _lua_typename($L, 8) | 0) | 0;
 _lua_pushcclosure($L, 359, 9);
 _lua_setfield($L, -2, 64488);
 return 1;
}

function ___divdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $7$0 = 0, $7$1 = 0, $10$0 = 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
 $4$1 = tempRet0;
 $7$0 = $2$0 ^ $1$0;
 $7$1 = $2$1 ^ $1$1;
 $10$0 = _i64Subtract((___udivmoddi4($4$0, $4$1, _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0, tempRet0, 0) | 0) ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
 return $10$0 | 0;
}

function _mlua_camera__newindex($L) {
 $L = $L | 0;
 var $1 = 0, $10 = 0.0, $4 = 0.0;
 if (!$L) ___assert_fail(23976, 21816, 29, 21848);
 $1 = _luaL_checklstring($L, 2, 0) | 0;
 if (!(_strcmp($1, 23296) | 0)) {
  $4 = +_luaL_checknumber($L, 3);
  _display_set_camera_position($4, +HEAPF32[(_display_get_camera() | 0) + 4 >> 2]);
  return 0;
 }
 if (!(_strcmp($1, 23304) | 0)) {
  $10 = +_luaL_checknumber($L, 3);
  _display_set_camera_position(+HEAPF32[(_display_get_camera() | 0) >> 2], $10);
  return 0;
 }
 if (!(_strcmp($1, 21872) | 0)) {
  _display_set_camera_angle(+_luaL_checknumber($L, 3));
  return 0;
 }
 if (!(_strcmp($1, 21880) | 0)) {
  _display_set_camera_zoom(+_luaL_checknumber($L, 3));
  return 0;
 } else {
  _lua_rawset($L, 1);
  return 0;
 }
 return 0;
}

function _strtod($s, $p) {
 $s = $s | 0;
 $p = $p | 0;
 var $0 = 0, $1 = 0, $12 = 0, $16 = 0, $4 = 0.0, $f$i = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $f$i = sp;
 dest = $f$i + 0 | 0;
 stop = dest + 112 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $0 = $f$i + 4 | 0;
 HEAP32[$0 >> 2] = $s;
 $1 = $f$i + 8 | 0;
 HEAP32[$1 >> 2] = -1;
 HEAP32[$f$i + 44 >> 2] = $s;
 HEAP32[$f$i + 76 >> 2] = -1;
 ___shlim($f$i, 0);
 $4 = +___floatscan($f$i, 1, 1);
 $12 = (HEAP32[$0 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) + (HEAP32[$f$i + 108 >> 2] | 0) | 0;
 if (!$p) {
  STACKTOP = sp;
  return +$4;
 }
 if (!$12) $16 = $s; else $16 = $s + $12 | 0;
 HEAP32[$p >> 2] = $16;
 STACKTOP = sp;
 return +$4;
}

function _display_free_shader($shader) {
 $shader = $shader | 0;
 var $12 = 0, $3 = 0, $9 = 0, $prog = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $prog = sp;
 if (!$shader) {
  STACKTOP = sp;
  return;
 }
 do if ((HEAP32[4526] | 0) != ($shader | 0)) {
  _glGetIntegerv(35725, $prog | 0);
  $3 = HEAP32[$prog >> 2] | 0;
  if (($3 | 0) != (HEAP32[$shader >> 2] | 0)) if (($3 | 0) != (HEAP32[$shader + 4 >> 2] | 0)) break;
  $9 = HEAP32[4526] | 0;
  if (!$9) ___assert_fail(22712, 18224, 837, 19240);
  _buffer_check_empty(HEAP32[4530] | 0);
  HEAP32[4527] = $9;
  $12 = HEAP32[4530] | 0;
  if (!$12) ___assert_fail(23160, 19880, 112, 19312); else {
   HEAP32[$12 + 60 >> 2] = $9;
   break;
  }
 } while (0);
 _shader_free($shader);
 STACKTOP = sp;
 return;
}

function _mlua_add_color_system($L) {
 $L = $L | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $2 = 0.0, $4 = 0, $6 = 0, $8 = 0;
 if (!$L) ___assert_fail(23976, 8472, 207, 9496);
 $1 = _pop_system($L, 1) | 0;
 $2 = +_luaL_checknumber($L, 2);
 $4 = (_lua_gettop($L) | 0) == 5;
 $6 = ~~+_luaL_checknumber($L, 3);
 $8 = ~~+_luaL_checknumber($L, 4);
 $10 = ~~+_luaL_checknumber($L, 5);
 if ($4) {
  $11 = $6 & 255;
  $12 = $8 & 255;
  $13 = $10 & 255;
  _system_add_color($1, $2, $11, $11, $12, $12, $13, $13);
  return 0;
 } else {
  $15 = ~~+_luaL_checknumber($L, 6);
  $17 = ~~+_luaL_checknumber($L, 7);
  _system_add_color($1, $2, $6 & 255, $8 & 255, $10 & 255, $15 & 255, $17 & 255, ~~+_luaL_checknumber($L, 8) & 255);
  return 0;
 }
 return 0;
}

function _sound_free($s) {
 $s = $s | 0;
 var $4 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 if (!$s) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$s + 4 >> 2] | 0);
 if (!(_audio_try_free_sound($s) | 0)) {
  HEAP8[$s + 8 >> 0] = 1;
  STACKTOP = sp;
  return;
 }
 _alDeleteBuffers(1, $s | 0);
 $4 = _alGetError() | 0;
 if ($4) {
  $6 = $4;
  do {
   $7 = _alGetString($6 | 0) | 0;
   HEAP32[$vararg_buffer >> 2] = 11952;
   HEAP32[$vararg_buffer + 4 >> 2] = 124;
   HEAP32[$vararg_buffer + 8 >> 2] = 12048;
   HEAP32[$vararg_buffer + 12 >> 2] = $7;
   _log_internal(3, 12e3, 12024, $vararg_buffer);
   $6 = _alGetError() | 0;
  } while (($6 | 0) != 0);
 }
 _free($s);
 STACKTOP = sp;
 return;
}

function _luaB_costatus($L) {
 $L = $L | 0;
 var $0 = 0, $3 = 0, $ar = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $ar = sp;
 $0 = _lua_tothread($L, 1) | 0;
 if (!$0) _luaL_argerror($L, 1, 65864) | 0;
 do if (($0 | 0) == ($L | 0)) _lua_pushlstring($L, 65688, 7) | 0; else {
  $3 = _lua_status($0) | 0;
  if (($3 | 0) == 1) {
   _lua_pushlstring($L, 65832, 9) | 0;
   break;
  } else if (!$3) {
   if ((_lua_getstack($0, 0, $ar) | 0) > 0) {
    _lua_pushlstring($L, 65848, 6) | 0;
    break;
   }
   if (!(_lua_gettop($0) | 0)) {
    _lua_pushlstring($L, 65856, 4) | 0;
    break;
   } else {
    _lua_pushlstring($L, 65832, 9) | 0;
    break;
   }
  } else {
   _lua_pushlstring($L, 65856, 4) | 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return 1;
}

function _music_pause($m) {
 $m = $m | 0;
 var $1 = 0, $4 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 if (!$m) ___assert_fail(23232, 10720, 102, 10760);
 $1 = HEAP32[$m >> 2] | 0;
 if (!$1) {
  STACKTOP = sp;
  return;
 }
 _alSourcePause(HEAP32[$1 >> 2] | 0);
 $4 = _alGetError() | 0;
 if ($4) {
  $6 = $4;
  do {
   $7 = _alGetString($6 | 0) | 0;
   HEAP32[$vararg_buffer >> 2] = 10720;
   HEAP32[$vararg_buffer + 4 >> 2] = 108;
   HEAP32[$vararg_buffer + 8 >> 2] = 10760;
   HEAP32[$vararg_buffer + 12 >> 2] = $7;
   _log_internal(3, 12304, 12024, $vararg_buffer);
   $6 = _alGetError() | 0;
  } while (($6 | 0) != 0);
 }
 HEAP8[(HEAP32[$m >> 2] | 0) + 5 >> 0] = 1;
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $0 = 0, $1 = 0, $6 = 0, $9 = 0;
 $0 = $info + 16 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 do if (!$1) {
  HEAP32[$0 >> 2] = $adjustedPtr;
  HEAP32[$info + 24 >> 2] = $path_below;
  HEAP32[$info + 36 >> 2] = 1;
 } else {
  if (($1 | 0) != ($adjustedPtr | 0)) {
   $9 = $info + 36 | 0;
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + 1;
   HEAP32[$info + 24 >> 2] = 2;
   HEAP8[$info + 54 >> 0] = 1;
   break;
  }
  $6 = $info + 24 | 0;
  if ((HEAP32[$6 >> 2] | 0) == 2) HEAP32[$6 >> 2] = $path_below;
 } while (0);
 return;
}

function _luaV_tonumber_($obj, $n) {
 $obj = $obj | 0;
 $n = $n | 0;
 var $$0 = 0, $1 = 0, $21 = 0.0, $9 = 0, $v = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $v = sp;
 $1 = HEAP32[$obj + 4 >> 2] | 0;
 if (($1 | 0) == 19) {
  HEAPF32[$n >> 2] = +(HEAP32[$obj >> 2] | 0);
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (($1 & 15 | 0) != 4) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $9 = _luaO_str2num((HEAP32[$obj >> 2] | 0) + 24 | 0, $v) | 0;
 if (($9 | 0) != ((HEAP32[(HEAP32[$obj >> 2] | 0) + 12 >> 2] | 0) + 1 | 0)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ((HEAP32[$v + 4 >> 2] | 0) == 19) $21 = +(HEAP32[$v >> 2] | 0); else $21 = +HEAPF32[$v >> 2];
 HEAPF32[$n >> 2] = $21;
 $$0 = 1;
 STACKTOP = sp;
 return $$0 | 0;
}

function _lua_callk($L, $nargs, $nresults, $ctx, $k) {
 $L = $L | 0;
 $nargs = $nargs | 0;
 $nresults = $nresults | 0;
 $ctx = $ctx | 0;
 $k = $k | 0;
 var $0 = 0, $16 = 0, $18 = 0, $3 = 0, $8 = 0, label = 0;
 $0 = $L + 8 | 0;
 $3 = (HEAP32[$0 >> 2] | 0) + (~$nargs << 3) | 0;
 if (!$k) label = 4; else if (!(HEAP16[$L + 104 >> 1] | 0)) {
  $8 = $L + 16 | 0;
  HEAP32[(HEAP32[$8 >> 2] | 0) + 16 >> 2] = $k;
  HEAP32[(HEAP32[$8 >> 2] | 0) + 24 >> 2] = $ctx;
  _luaD_call($L, $3, $nresults, 1);
 } else label = 4;
 if ((label | 0) == 4) _luaD_call($L, $3, $nresults, 0);
 if (($nresults | 0) != -1) return;
 $16 = (HEAP32[$L + 16 >> 2] | 0) + 4 | 0;
 $18 = HEAP32[$0 >> 2] | 0;
 if ((HEAP32[$16 >> 2] | 0) >>> 0 >= $18 >>> 0) return;
 HEAP32[$16 >> 2] = $18;
 return;
}

function __ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $0, $fixtureB, $1, $allocator) {
 $fixtureA = $fixtureA | 0;
 $0 = $0 | 0;
 $fixtureB = $fixtureB | 0;
 $1 = $1 | 0;
 $allocator = $allocator | 0;
 var $18 = 0, $2 = 0;
 $2 = __ZN16b2BlockAllocator8AllocateEi($allocator, 148) | 0;
 if (!$2) {
  $18 = 0;
  return $18 | 0;
 }
 __ZN9b2ContactC2EP9b2FixtureiS1_i($2, $fixtureA, 0, $fixtureB, 0);
 HEAP32[$2 >> 2] = 91880;
 if ((HEAP32[(HEAP32[(HEAP32[$2 + 48 >> 2] | 0) + 12 >> 2] | 0) + 4 >> 2] | 0) != 1) ___assert_fail(91896, 91944, 40, 92024);
 if ((HEAP32[(HEAP32[(HEAP32[$2 + 52 >> 2] | 0) + 12 >> 2] | 0) + 4 >> 2] | 0) == 2) {
  $18 = $2;
  return $18 | 0;
 } else ___assert_fail(93200, 91944, 41, 92024);
 return 0;
}

function __Z27mlua_set_target_mouse_jointP9lua_State($L) {
 $L = $L | 0;
 var $0 = 0, $11 = 0.0, $12 = 0.0, $14 = 0.0, $2 = 0, $3 = 0, $6 = 0, $9 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 if (!$L) ___assert_fail(23976, 4112, 88, 4496);
 $2 = __Z9pop_jointP9lua_Statei($L, 1) | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if (!$3) {
  _luaL_error($L, 4440, sp) | 0;
  $6 = HEAP32[$2 >> 2] | 0;
 } else $6 = $3;
 if ((HEAP32[$6 + 4 >> 2] | 0) != 5) _luaL_error($L, 5040, sp + 8 | 0) | 0;
 $9 = +_luaL_checknumber($L, 2);
 $11 = $9 / +HEAPF32[616];
 $12 = +_luaL_checknumber($L, 3);
 $14 = $12 / +HEAPF32[616];
 HEAPF32[$0 >> 2] = $11;
 HEAPF32[$0 + 4 >> 2] = $14;
 __ZN12b2MouseJoint9SetTargetERK6b2Vec2($6, $0);
 STACKTOP = sp;
 return 0;
}

function __ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $0, $fixtureB, $1, $allocator) {
 $fixtureA = $fixtureA | 0;
 $0 = $0 | 0;
 $fixtureB = $fixtureB | 0;
 $1 = $1 | 0;
 $allocator = $allocator | 0;
 var $18 = 0, $2 = 0;
 $2 = __ZN16b2BlockAllocator8AllocateEi($allocator, 148) | 0;
 if (!$2) {
  $18 = 0;
  return $18 | 0;
 }
 __ZN9b2ContactC2EP9b2FixtureiS1_i($2, $fixtureA, 0, $fixtureB, 0);
 HEAP32[$2 >> 2] = 92104;
 if ((HEAP32[(HEAP32[(HEAP32[$2 + 48 >> 2] | 0) + 12 >> 2] | 0) + 4 >> 2] | 0) != 2) ___assert_fail(92304, 92120, 40, 92200);
 if (!(HEAP32[(HEAP32[(HEAP32[$2 + 52 >> 2] | 0) + 12 >> 2] | 0) + 4 >> 2] | 0)) {
  $18 = $2;
  return $18 | 0;
 } else ___assert_fail(93456, 92120, 41, 92200);
 return 0;
}

function __ZNK13b2CircleShape5CloneEP16b2BlockAllocator($this, $allocator) {
 $this = $this | 0;
 $allocator = $allocator | 0;
 var $0 = 0, $11 = 0, $12 = 0, $18 = 0, $2 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0;
 $0 = __ZN16b2BlockAllocator8AllocateEi($allocator, 20) | 0;
 if (!$0) $4 = 0; else {
  HEAP32[$0 >> 2] = 81712;
  $2 = $0 + 4 | 0;
  HEAP32[$2 + 0 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$2 + 8 >> 2] = 0;
  HEAP32[$2 + 12 >> 2] = 0;
  $4 = $0;
 }
 $6 = $this + 4 | 0;
 $11 = HEAP32[$6 + 4 >> 2] | 0;
 $12 = $4 + 4 | 0;
 HEAP32[$12 >> 2] = HEAP32[$6 >> 2];
 HEAP32[$12 + 4 >> 2] = $11;
 $18 = $this + 12 | 0;
 $23 = HEAP32[$18 + 4 >> 2] | 0;
 $24 = $4 + 12 | 0;
 HEAP32[$24 >> 2] = HEAP32[$18 >> 2];
 HEAP32[$24 + 4 >> 2] = $23;
 return $4 | 0;
}

function __ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $0, $fixtureB, $1, $allocator) {
 $fixtureA = $fixtureA | 0;
 $0 = $0 | 0;
 $fixtureB = $fixtureB | 0;
 $1 = $1 | 0;
 $allocator = $allocator | 0;
 var $18 = 0, $2 = 0;
 $2 = __ZN16b2BlockAllocator8AllocateEi($allocator, 148) | 0;
 if (!$2) {
  $18 = 0;
  return $18 | 0;
 }
 __ZN9b2ContactC2EP9b2FixtureiS1_i($2, $fixtureA, 0, $fixtureB, 0);
 HEAP32[$2 >> 2] = 91704;
 if ((HEAP32[(HEAP32[(HEAP32[$2 + 48 >> 2] | 0) + 12 >> 2] | 0) + 4 >> 2] | 0) != 1) ___assert_fail(91896, 91720, 40, 91800);
 if (!(HEAP32[(HEAP32[(HEAP32[$2 + 52 >> 2] | 0) + 12 >> 2] | 0) + 4 >> 2] | 0)) {
  $18 = $2;
  return $18 | 0;
 } else ___assert_fail(93456, 91720, 41, 91800);
 return 0;
}

function __ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $0, $fixtureB, $1, $allocator) {
 $fixtureA = $fixtureA | 0;
 $0 = $0 | 0;
 $fixtureB = $fixtureB | 0;
 $1 = $1 | 0;
 $allocator = $allocator | 0;
 var $18 = 0, $2 = 0;
 $2 = __ZN16b2BlockAllocator8AllocateEi($allocator, 148) | 0;
 if (!$2) {
  $18 = 0;
  return $18 | 0;
 }
 __ZN9b2ContactC2EP9b2FixtureiS1_i($2, $fixtureA, 0, $fixtureB, 0);
 HEAP32[$2 >> 2] = 92288;
 if ((HEAP32[(HEAP32[(HEAP32[$2 + 48 >> 2] | 0) + 12 >> 2] | 0) + 4 >> 2] | 0) != 2) ___assert_fail(92304, 92352, 43, 92424);
 if ((HEAP32[(HEAP32[(HEAP32[$2 + 52 >> 2] | 0) + 12 >> 2] | 0) + 4 >> 2] | 0) == 2) {
  $18 = $2;
  return $18 | 0;
 } else ___assert_fail(93200, 92352, 44, 92424);
 return 0;
}

function _luaX_token2str($ls, $token) {
 $ls = $ls | 0;
 $token = $token | 0;
 var $$0 = 0, $2 = 0, $6 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 if (($token | 0) < 257) {
  $2 = HEAP32[$ls + 32 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = $token;
  $$0 = _luaO_pushfstring($2, 67128, $vararg_buffer) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $6 = HEAP32[66976 + ($token + -257 << 2) >> 2] | 0;
 if (($token | 0) >= 289) {
  $$0 = $6;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $9 = HEAP32[$ls + 32 >> 2] | 0;
 HEAP32[$vararg_buffer1 >> 2] = $6;
 $$0 = _luaO_pushfstring($9, 67136, $vararg_buffer1) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _luaM_realloc_($L, $block, $osize, $nsize) {
 $L = $L | 0;
 $block = $block | 0;
 $osize = $osize | 0;
 $nsize = $nsize | 0;
 var $1 = 0, $11 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $newblock$0 = 0;
 $1 = HEAP32[$L + 12 >> 2] | 0;
 $2 = ($block | 0) != 0;
 $4 = $1 + 4 | 0;
 $6 = FUNCTION_TABLE_iiiii[HEAP32[$1 >> 2] & 7](HEAP32[$4 >> 2] | 0, $block, $osize, $nsize) | 0;
 if (($6 | 0) != 0 | ($nsize | 0) == 0) $newblock$0 = $6; else {
  _luaC_fullgc($L, 1);
  $11 = FUNCTION_TABLE_iiiii[HEAP32[$1 >> 2] & 7](HEAP32[$4 >> 2] | 0, $block, $osize, $nsize) | 0;
  if (!$11) _luaD_throw($L, 4); else $newblock$0 = $11;
 }
 $13 = $1 + 12 | 0;
 HEAP32[$13 >> 2] = ($2 ? 0 - $osize | 0 : 0) + $nsize + (HEAP32[$13 >> 2] | 0);
 return $newblock$0 | 0;
}

function _luaL_requiref($L, $modname, $openf, $glb) {
 $L = $L | 0;
 $modname = $modname | 0;
 $openf = $openf | 0;
 $glb = $glb | 0;
 var $2 = 0;
 if ((_lua_getfield($L, -1001e3, 58536) | 0) != 5) {
  _lua_settop($L, -2);
  $2 = _lua_absindex($L, -1001e3) | 0;
  _lua_createtable($L, 0, 0);
  _lua_pushvalue($L, -1);
  _lua_setfield($L, $2, 58536);
 }
 _lua_getfield($L, -1, $modname) | 0;
 if (!(_lua_toboolean($L, -1) | 0)) {
  _lua_settop($L, -2);
  _lua_pushcclosure($L, $openf, 0);
  _lua_pushstring($L, $modname) | 0;
  _lua_callk($L, 1, 1, 0, 0);
  _lua_pushvalue($L, -1);
  _lua_setfield($L, -3, $modname);
 }
 _lua_rotate($L, -2, -1);
 _lua_settop($L, -2);
 if (!$glb) return;
 _lua_pushvalue($L, -1);
 _lua_setglobal($L, $modname);
 return;
}

function _mlua_draw_line($L) {
 $L = $L | 0;
 var $$0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 if (!$L) ___assert_fail(23976, 19928, 330, 21480);
 $1 = _display_get_current_buffer() | 0;
 do if (HEAP8[$1 + 68 >> 0] | 0) {
  $5 = HEAP32[$1 >> 2] | 0;
  if (!$5) break; else if (($5 | 0) == 2) if (!(HEAP8[$1 + 57 >> 0] | 0)) break;
  $$0 = _luaL_error($L, 21496, $vararg_buffer) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } while (0);
 $10 = +_luaL_checknumber($L, 1);
 $11 = +_luaL_checknumber($L, 2);
 $12 = +_luaL_checknumber($L, 3);
 _display_draw_line($10, $11, $12, +_luaL_checknumber($L, 4));
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _str_reverse($L) {
 $L = $L | 0;
 var $$lcssa = 0, $0 = 0, $12 = 0, $2 = 0, $3 = 0, $7 = 0, $b = 0, $i$01 = 0, $l = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2080 | 0;
 $l = sp + 2064 | 0;
 $b = sp;
 $0 = _luaL_checklstring($L, 1, $l) | 0;
 $2 = _luaL_buffinitsize($L, $b, HEAP32[$l >> 2] | 0) | 0;
 $3 = HEAP32[$l >> 2] | 0;
 if (!$3) {
  $$lcssa = 0;
  _luaL_pushresultsize($b, $$lcssa);
  STACKTOP = sp;
  return 1;
 } else {
  $7 = $3;
  $i$01 = 0;
 }
 while (1) {
  HEAP8[$2 + $i$01 >> 0] = HEAP8[$0 + ($7 + ~$i$01) >> 0] | 0;
  $i$01 = $i$01 + 1 | 0;
  $12 = HEAP32[$l >> 2] | 0;
  if ($i$01 >>> 0 >= $12 >>> 0) {
   $$lcssa = $12;
   break;
  } else $7 = $12;
 }
 _luaL_pushresultsize($b, $$lcssa);
 STACKTOP = sp;
 return 1;
}

function _check_match($ls, $what, $who, $where) {
 $ls = $ls | 0;
 $what = $what | 0;
 $who = $who | 0;
 $where = $where | 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 if ((HEAP32[$ls + 12 >> 2] | 0) == ($what | 0)) {
  _luaX_next($ls);
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$ls + 4 >> 2] | 0) == ($where | 0)) _error_expected($ls, $what); else {
  $7 = HEAP32[$ls + 32 >> 2] | 0;
  $8 = _luaX_token2str($ls, $what) | 0;
  $9 = _luaX_token2str($ls, $who) | 0;
  HEAP32[$vararg_buffer >> 2] = $8;
  HEAP32[$vararg_buffer + 4 >> 2] = $9;
  HEAP32[$vararg_buffer + 8 >> 2] = $where;
  _luaX_syntaxerror($ls, _luaO_pushfstring($7, 60888, $vararg_buffer) | 0);
 }
}

function _auxresume($L, $co, $narg) {
 $L = $L | 0;
 $co = $co | 0;
 $narg = $narg | 0;
 var $$0 = 0, $8 = 0;
 if (!(_lua_checkstack($co, $narg) | 0)) {
  _lua_pushlstring($L, 65736, 28) | 0;
  $$0 = -1;
  return $$0 | 0;
 }
 if (!(_lua_status($co) | 0)) if (!(_lua_gettop($co) | 0)) {
  _lua_pushlstring($L, 65768, 28) | 0;
  $$0 = -1;
  return $$0 | 0;
 }
 _lua_xmove($L, $co, $narg);
 if ((_lua_resume($co, $L, $narg) | 0) >>> 0 >= 2) {
  _lua_xmove($co, $L, 1);
  $$0 = -1;
  return $$0 | 0;
 }
 $8 = _lua_gettop($co) | 0;
 if (!(_lua_checkstack($L, $8 + 1 | 0) | 0)) {
  _lua_settop($co, ~$8);
  _lua_pushlstring($L, 65800, 26) | 0;
  $$0 = -1;
  return $$0 | 0;
 } else {
  _lua_xmove($co, $L, $8);
  $$0 = $8;
  return $$0 | 0;
 }
 return 0;
}

function __ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $0, $fixtureB, $1, $allocator) {
 $fixtureA = $fixtureA | 0;
 $0 = $0 | 0;
 $fixtureB = $fixtureB | 0;
 $1 = $1 | 0;
 $allocator = $allocator | 0;
 var $18 = 0, $2 = 0;
 $2 = __ZN16b2BlockAllocator8AllocateEi($allocator, 148) | 0;
 if (!$2) {
  $18 = 0;
  return $18 | 0;
 }
 __ZN9b2ContactC2EP9b2FixtureiS1_i($2, $fixtureA, 0, $fixtureB, 0);
 HEAP32[$2 >> 2] = 93304;
 if (HEAP32[(HEAP32[(HEAP32[$2 + 48 >> 2] | 0) + 12 >> 2] | 0) + 4 >> 2] | 0) ___assert_fail(93320, 93368, 43, 93440);
 if (!(HEAP32[(HEAP32[(HEAP32[$2 + 52 >> 2] | 0) + 12 >> 2] | 0) + 4 >> 2] | 0)) {
  $18 = $2;
  return $18 | 0;
 } else ___assert_fail(93456, 93368, 44, 93440);
 return 0;
}

function _strbuf_free($s) {
 $s = $s | 0;
 var $10 = 0, $11 = 0, $3 = 0, $6 = 0, $8 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 if (HEAP32[$s + 24 >> 2] | 0) {
  $3 = HEAP32[_stderr >> 2] | 0;
  $6 = HEAP32[$s + 20 >> 2] | 0;
  $8 = HEAP32[$s + 8 >> 2] | 0;
  $10 = HEAP32[$s + 4 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = $s;
  HEAP32[$vararg_buffer + 4 >> 2] = $6;
  HEAP32[$vararg_buffer + 8 >> 2] = $8;
  HEAP32[$vararg_buffer + 12 >> 2] = $10;
  _fprintf($3 | 0, 71624, $vararg_buffer | 0) | 0;
 }
 $11 = HEAP32[$s >> 2] | 0;
 if ($11) {
  _free($11);
  HEAP32[$s >> 2] = 0;
 }
 if (!(HEAP32[$s + 16 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 _free($s);
 STACKTOP = sp;
 return;
}

function _mlua_load_music($L) {
 $L = $L | 0;
 var $$0 = 0, $3 = 0, $4 = 0, $7 = 0, $music$0 = 0;
 if (!$L) ___assert_fail(23976, 12256, 113, 12344);
 if (!(_lua_isstring($L, 1) | 0)) {
  $7 = _xmalloc(24) | 0;
  HEAP32[$7 + 12 >> 2] = $L;
  _lua_pushvalue($L, 1);
  HEAP32[$7 + 16 >> 2] = _luaL_ref($L, -1001e3) | 0;
  HEAP32[$7 + 20 >> 2] = -2;
  HEAP32[$7 + 8 >> 2] = 83;
  HEAP32[$7 + 4 >> 2] = 84;
  HEAP32[$7 >> 2] = 9;
  $music$0 = _music_load($7, _luaL_optinteger($L, 2, 44100) | 0, 1) | 0;
 } else {
  $3 = _lua_tolstring($L, 1, 0) | 0;
  $4 = _music_load_from_file($3) | 0;
  if (!$4) {
   $$0 = _luaL_fileresult($L, 0, $3) | 0;
   return $$0 | 0;
  } else $music$0 = $4;
 }
 _push_music($L, $music$0);
 $$0 = 1;
 return $$0 | 0;
}

function __ZN15b2FrictionJointC2EPK18b2FrictionJointDef($this, $def) {
 $this = $this | 0;
 $def = $def | 0;
 var $14 = 0, $19 = 0, $20 = 0, $3 = 0, $8 = 0, $9 = 0;
 __ZN7b2JointC2EPK10b2JointDef($this, $def);
 HEAP32[$this >> 2] = 83456;
 $3 = $def + 20 | 0;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = $this + 68 | 0;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 $14 = $def + 28 | 0;
 $19 = HEAP32[$14 + 4 >> 2] | 0;
 $20 = $this + 76 | 0;
 HEAP32[$20 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$20 + 4 >> 2] = $19;
 HEAPF32[$this + 84 >> 2] = 0.0;
 HEAPF32[$this + 88 >> 2] = 0.0;
 HEAPF32[$this + 92 >> 2] = 0.0;
 HEAPF32[$this + 96 >> 2] = +HEAPF32[$def + 36 >> 2];
 HEAPF32[$this + 100 >> 2] = +HEAPF32[$def + 40 >> 2];
 return;
}

function _luaL_pushmodule($L, $modname, $sizehint) {
 $L = $L | 0;
 $modname = $modname | 0;
 $sizehint = $sizehint | 0;
 var $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 _luaL_findtable($L, -1001e3, 58536, 1) | 0;
 if ((_lua_getfield($L, -1, $modname) | 0) == 5) {
  _lua_rotate($L, -2, -1);
  _lua_settop($L, -2);
  STACKTOP = sp;
  return;
 }
 _lua_settop($L, -2);
 _lua_rawgeti($L, -1001e3, 2) | 0;
 if (_luaL_findtable($L, 0, $modname, $sizehint) | 0) {
  HEAP32[$vararg_buffer >> 2] = $modname;
  _luaL_error($L, 55432, $vararg_buffer) | 0;
 }
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -3, $modname);
 _lua_rotate($L, -2, -1);
 _lua_settop($L, -2);
 STACKTOP = sp;
 return;
}

function _png_calculate_crc($png_ptr, $ptr, $length) {
 $png_ptr = $png_ptr | 0;
 $ptr = $ptr | 0;
 $length = $length | 0;
 var $$ = 0, $$0 = 0, $$01 = 0, $10 = 0, $5 = 0, $crc$0 = 0, $need_crc$0 = 0;
 $5 = HEAP32[$png_ptr + 212 >> 2] | 0;
 if (!(HEAP32[$png_ptr + 376 >> 2] & 536870912)) $need_crc$0 = ($5 & 2048 | 0) == 0; else $need_crc$0 = ($5 & 768 | 0) != 768;
 if (($length | 0) == 0 | $need_crc$0 ^ 1) return;
 $10 = $png_ptr + 412 | 0;
 $$0 = $ptr;
 $$01 = $length;
 $crc$0 = HEAP32[$10 >> 2] | 0;
 while (1) {
  $$ = ($$01 | 0) == 0 ? -1 : $$01;
  $crc$0 = _crc32($crc$0, $$0, $$) | 0;
  if (($$01 | 0) == ($$ | 0)) break; else {
   $$0 = $$0 + $$ | 0;
   $$01 = $$01 - $$ | 0;
  }
 }
 HEAP32[$10 >> 2] = $crc$0;
 return;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $4 = 0;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $info, $dst_ptr, $current_ptr, $path_below); else {
  $4 = HEAP32[$this + 8 >> 2] | 0;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] & 3]($4, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
 }
 return;
}

function _mlua_camera__index($L) {
 $L = $L | 0;
 var $$0 = 0, $1 = 0;
 if (!$L) ___assert_fail(23976, 21816, 53, 21888);
 $1 = _luaL_checklstring($L, 2, 0) | 0;
 if (!(_strcmp($1, 23296) | 0)) {
  _lua_pushnumber($L, +HEAPF32[(_display_get_camera() | 0) >> 2]);
  $$0 = 1;
  return $$0 | 0;
 }
 if (!(_strcmp($1, 23304) | 0)) {
  _lua_pushnumber($L, +HEAPF32[(_display_get_camera() | 0) + 4 >> 2]);
  $$0 = 1;
  return $$0 | 0;
 }
 if (!(_strcmp($1, 21872) | 0)) {
  _lua_pushnumber($L, +HEAPF32[(_display_get_camera() | 0) + 12 >> 2]);
  $$0 = 1;
  return $$0 | 0;
 }
 if (_strcmp($1, 21880) | 0) {
  $$0 = 0;
  return $$0 | 0;
 }
 _lua_pushnumber($L, +HEAPF32[(_display_get_camera() | 0) + 8 >> 2]);
 $$0 = 1;
 return $$0 | 0;
}

function _png_read_sig($png_ptr, $info_ptr) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 var $0 = 0, $1 = 0, $15 = 0, $2 = 0, $4 = 0, $7 = 0;
 $0 = $png_ptr + 441 | 0;
 $1 = HEAP8[$0 >> 0] | 0;
 $2 = $1 & 255;
 if (($1 & 255) > 7) return;
 $4 = 8 - $2 | 0;
 HEAP32[$png_ptr + 800 >> 2] = 17;
 _png_read_data($png_ptr, $info_ptr + $2 + 32 | 0, $4);
 HEAP8[$0 >> 0] = 8;
 $7 = $info_ptr + 32 | 0;
 if (!(_png_sig_cmp($7, $2, $4) | 0)) {
  if (($1 & 255) >= 3) return;
  $15 = $png_ptr + 208 | 0;
  HEAP32[$15 >> 2] = HEAP32[$15 >> 2] | 4096;
  return;
 }
 if (($1 & 255) >= 4) _png_error($png_ptr, 75416);
 if (!(_png_sig_cmp($7, $2, $4 + -4 | 0) | 0)) _png_error($png_ptr, 75416); else _png_error($png_ptr, 75400);
}

function __ZN12b2BroadPhase12DestroyProxyEi($this, $proxyId) {
 $this = $this | 0;
 $proxyId = $proxyId | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $14 = 0, $4 = 0, $5 = 0, $i$01$i = 0;
 $0 = $this + 40 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (($1 | 0) > 0) {
  $4 = HEAP32[$this + 32 >> 2] | 0;
  $14 = $1;
  $i$01$i = 0;
  while (1) {
   $5 = $4 + ($i$01$i << 2) | 0;
   if ((HEAP32[$5 >> 2] | 0) == ($proxyId | 0)) {
    HEAP32[$5 >> 2] = -1;
    $10 = HEAP32[$0 >> 2] | 0;
   } else $10 = $14;
   $i$01$i = $i$01$i + 1 | 0;
   if (($i$01$i | 0) >= ($10 | 0)) break; else $14 = $10;
  }
 }
 $11 = $this + 28 | 0;
 HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + -1;
 __ZN13b2DynamicTree12DestroyProxyEi($this, $proxyId);
 return;
}

function _luaK_setlist($fs, $base, $nelems, $tostore) {
 $fs = $fs | 0;
 $base = $base | 0;
 $nelems = $nelems | 0;
 $tostore = $tostore | 0;
 var $2 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0;
 $2 = (($nelems + -1 | 0) / 50 | 0) + 1 | 0;
 $4 = ($tostore | 0) == -1 ? 0 : $tostore;
 if (($2 | 0) < 512) {
  _luaK_code($fs, $base << 6 | $4 << 23 | $2 << 14 | 43) | 0;
  $21 = $base + 1 | 0;
  $22 = $21 & 255;
  $23 = $fs + 44 | 0;
  HEAP8[$23 >> 0] = $22;
  return;
 }
 if (($2 | 0) >= 67108864) _luaX_syntaxerror(HEAP32[$fs + 8 >> 2] | 0, 65528);
 _luaK_code($fs, $base << 6 | $4 << 23 | 43) | 0;
 _luaK_code($fs, $2 << 6 | 46) | 0;
 $21 = $base + 1 | 0;
 $22 = $21 & 255;
 $23 = $fs + 44 | 0;
 HEAP8[$23 >> 0] = $22;
 return;
}

function _png_sig_cmp($sig, $start, $num_to_check) {
 $sig = $sig | 0;
 $start = $start | 0;
 $num_to_check = $num_to_check | 0;
 var $$0 = 0, $$01 = 0, $0 = 0, $png_signature = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $png_signature = sp;
 $0 = $png_signature;
 HEAP32[$0 >> 2] = 1196314761;
 HEAP32[$0 + 4 >> 2] = 169478669;
 if ($num_to_check >>> 0 > 8) $$0 = 8; else if (!$num_to_check) {
  $$01 = -1;
  STACKTOP = sp;
  return $$01 | 0;
 } else $$0 = $num_to_check;
 if ($start >>> 0 > 7) {
  $$01 = -1;
  STACKTOP = sp;
  return $$01 | 0;
 }
 $$01 = _memcmp($sig + $start | 0, $png_signature + $start | 0, ($$0 + $start | 0) >>> 0 > 8 ? 8 - $start | 0 : $$0) | 0;
 STACKTOP = sp;
 return $$01 | 0;
}

function _buffer_push_color($buffer, $r, $g, $b, $a) {
 $buffer = $buffer | 0;
 $r = $r | 0;
 $g = $g | 0;
 $b = $b | 0;
 $a = $a | 0;
 var $1 = 0, $2 = 0, $6 = 0, $7 = 0;
 if (!$buffer) ___assert_fail(22256, 22016, 218, 22264);
 $1 = $buffer + 44 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if ($2 >>> 0 < (HEAP32[$buffer + 4 >> 2] | 0) >>> 0) {
  $6 = $2 << 2;
  $7 = $buffer + 28 | 0;
  HEAP8[(HEAP32[$7 >> 2] | 0) + $6 >> 0] = $r;
  HEAP8[(HEAP32[$7 >> 2] | 0) + ($6 | 1) >> 0] = $g;
  HEAP8[(HEAP32[$7 >> 2] | 0) + ($6 | 2) >> 0] = $b;
  HEAP8[(HEAP32[$7 >> 2] | 0) + ($6 | 3) >> 0] = $a;
  HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + 1;
  HEAP8[$buffer + 56 >> 0] = 0;
  return;
 } else ___assert_fail(22288, 22016, 219, 22264);
}

function runPostSets() {}
function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((num | 0) >= 4096) return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
 ret = dest | 0;
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
   num = num - 1 | 0;
  }
  while ((num | 0) >= 4) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
   num = num - 4 | 0;
  }
 }
 while ((num | 0) > 0) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
  num = num - 1 | 0;
 }
 return ret | 0;
}

function __ZNK13b2CircleShape11ComputeMassEP10b2MassDataf($this, $massData, $density) {
 $this = $this | 0;
 $massData = $massData | 0;
 $density = +$density;
 var $1 = 0, $12 = 0, $13 = 0, $17 = 0.0, $2 = 0.0, $20 = 0.0, $23 = 0.0, $4 = 0.0, $6 = 0, $7 = 0;
 $1 = $this + 8 | 0;
 $2 = +HEAPF32[$1 >> 2];
 $4 = $2 * ($density * 3.1415927410125732 * $2);
 HEAPF32[$massData >> 2] = $4;
 $6 = $this + 12 | 0;
 $7 = $6;
 $12 = HEAP32[$7 + 4 >> 2] | 0;
 $13 = $massData + 4 | 0;
 HEAP32[$13 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$13 + 4 >> 2] = $12;
 $17 = +HEAPF32[$1 >> 2];
 $20 = +HEAPF32[$6 >> 2];
 $23 = +HEAPF32[$this + 16 >> 2];
 HEAPF32[$massData + 12 >> 2] = $4 * ($17 * ($17 * .5) + ($20 * $20 + $23 * $23));
 return;
}

function _music_update($m) {
 $m = $m | 0;
 var $12 = 0, $17 = 0, $20 = 0, $6 = 0;
 if (!$m) ___assert_fail(23232, 10720, 304, 10928);
 if (!(HEAP32[$m >> 2] | 0)) return;
 _music_stream($m);
 if (!(HEAP8[$m + 16 >> 0] | 0)) return;
 $6 = HEAP32[$m >> 2] | 0;
 if ($6) {
  _alSourceStop(HEAP32[$6 >> 2] | 0);
  _alSourcei(HEAP32[HEAP32[$m >> 2] >> 2] | 0, 4105, 0);
  $12 = HEAP32[$m + 20 >> 2] | 0;
  FUNCTION_TABLE_vi[HEAP32[$12 + 4 >> 2] & 127]($12);
  HEAP8[(HEAP32[$m >> 2] | 0) + 4 >> 0] = 0;
  HEAP32[$m >> 2] = 0;
 }
 $17 = $m + 40 | 0;
 if (!(HEAP32[$17 >> 2] | 0)) return;
 $20 = _dlua_get_lua_state() | 0;
 _lua_rawgeti($20, -1001e3, HEAP32[$17 >> 2] | 0) | 0;
 _call_lua_function($20, 0, 0);
 return;
}

function _frexpf($x, $e) {
 $x = +$x;
 $e = $e | 0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $2 = 0, $5 = 0.0, $storemerge = 0;
 $0 = (HEAPF32[tempDoublePtr >> 2] = $x, HEAP32[tempDoublePtr >> 2] | 0);
 $2 = $0 >>> 23 & 255;
 if (($2 | 0) == 255) {
  $$0 = $x;
  return +$$0;
 } else if (!$2) {
  if ($x != 0.0) {
   $5 = +_frexpf($x * 18446744073709551616.0, $e);
   $$01 = $5;
   $storemerge = (HEAP32[$e >> 2] | 0) + -64 | 0;
  } else {
   $$01 = $x;
   $storemerge = 0;
  }
  HEAP32[$e >> 2] = $storemerge;
  $$0 = $$01;
  return +$$0;
 } else {
  HEAP32[$e >> 2] = $2 + -126;
  $$0 = (HEAP32[tempDoublePtr >> 2] = $0 & -2139095041 | 1056964608, +HEAPF32[tempDoublePtr >> 2]);
  return +$$0;
 }
 return +(0.0);
}

function _inflateEnd($strm) {
 $strm = $strm | 0;
 var $$0 = 0, $$pre2 = 0, $1 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $5 = 0, $8 = 0;
 if (!$strm) {
  $$0 = -2;
  return $$0 | 0;
 }
 $1 = $strm + 28 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!$2) {
  $$0 = -2;
  return $$0 | 0;
 }
 $4 = $strm + 36 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 if (!$5) {
  $$0 = -2;
  return $$0 | 0;
 }
 $8 = HEAP32[$2 + 52 >> 2] | 0;
 $$pre2 = $strm + 40 | 0;
 if (!$8) {
  $12 = $5;
  $13 = $2;
 } else {
  FUNCTION_TABLE_vii[$5 & 127](HEAP32[$$pre2 >> 2] | 0, $8);
  $12 = HEAP32[$4 >> 2] | 0;
  $13 = HEAP32[$1 >> 2] | 0;
 }
 FUNCTION_TABLE_vii[$12 & 127](HEAP32[$$pre2 >> 2] | 0, $13);
 HEAP32[$1 >> 2] = 0;
 $$0 = 0;
 return $$0 | 0;
}

function __ZN11b2RopeJointC2EPK14b2RopeJointDef($this, $def) {
 $this = $this | 0;
 $def = $def | 0;
 var $14 = 0, $19 = 0, $20 = 0, $3 = 0, $8 = 0, $9 = 0;
 __ZN7b2JointC2EPK10b2JointDef($this, $def);
 HEAP32[$this >> 2] = 86136;
 $3 = $def + 20 | 0;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = $this + 68 | 0;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 $14 = $def + 28 | 0;
 $19 = HEAP32[$14 + 4 >> 2] | 0;
 $20 = $this + 76 | 0;
 HEAP32[$20 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$20 + 4 >> 2] = $19;
 HEAPF32[$this + 84 >> 2] = +HEAPF32[$def + 36 >> 2];
 HEAPF32[$this + 160 >> 2] = 0.0;
 HEAPF32[$this + 92 >> 2] = 0.0;
 HEAP32[$this + 164 >> 2] = 0;
 HEAPF32[$this + 88 >> 2] = 0.0;
 return;
}

function __ZNK7b2Mat3312GetInverse22EPS_($this, $M) {
 $this = $this | 0;
 $M = $M | 0;
 var $0 = 0.0, $13 = 0.0, $2 = 0.0, $21 = 0, $4 = 0.0, $6 = 0.0, $9 = 0.0, $det$0 = 0.0;
 $0 = +HEAPF32[$this >> 2];
 $2 = +HEAPF32[$this + 12 >> 2];
 $4 = +HEAPF32[$this + 4 >> 2];
 $6 = +HEAPF32[$this + 16 >> 2];
 $9 = $0 * $6 - $2 * $4;
 if ($9 != 0.0) $det$0 = 1.0 / $9; else $det$0 = $9;
 HEAPF32[$M >> 2] = $6 * $det$0;
 $13 = -$det$0;
 HEAPF32[$M + 12 >> 2] = $2 * $13;
 HEAPF32[$M + 8 >> 2] = 0.0;
 HEAPF32[$M + 4 >> 2] = $4 * $13;
 HEAPF32[$M + 16 >> 2] = $0 * $det$0;
 $21 = $M + 20 | 0;
 HEAP32[$21 + 0 >> 2] = 0;
 HEAP32[$21 + 4 >> 2] = 0;
 HEAP32[$21 + 8 >> 2] = 0;
 HEAP32[$21 + 12 >> 2] = 0;
 return;
}

function _mlua_draw_point($L) {
 $L = $L | 0;
 var $$0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 if (!$L) ___assert_fail(23976, 19928, 289, 21288);
 $1 = _display_get_current_buffer() | 0;
 do if (HEAP8[$1 + 68 >> 0] | 0) {
  $5 = HEAP32[$1 >> 2] | 0;
  if (!$5) break; else if (($5 | 0) == 1) if (!(HEAP8[$1 + 57 >> 0] | 0)) break;
  $$0 = _luaL_error($L, 21304, $vararg_buffer) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } while (0);
 $10 = +_luaL_checknumber($L, 1);
 $11 = +_luaL_checknumber($L, 2);
 _display_draw_point($10, $11, +_luaL_checknumber($L, 3));
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _png_gamma_correct($png_ptr, $value, $gamma_val) {
 $png_ptr = $png_ptr | 0;
 $value = $value | 0;
 $gamma_val = $gamma_val | 0;
 var $$0 = 0, $$0$i = 0, $3 = 0;
 $3 = ($value | 0) != 0;
 if ((HEAP8[$png_ptr + 436 >> 0] | 0) == 8) {
  if ($3 & $value >>> 0 < 255) $$0$i = ~~+Math_floor(+(+Math_pow(+(+($value | 0) / 255.0), +(+($gamma_val | 0) * 1.0e-05)) * 255.0 + .5)) & 255; else $$0$i = $value & 255;
  $$0 = $$0$i & 255;
  return $$0 | 0;
 } else if ($3 & $value >>> 0 < 65535) {
  $$0 = ~~+Math_floor(+(+Math_pow(+(+($value | 0) / 65535.0), +(+($gamma_val | 0) * 1.0e-05)) * 65535.0 + .5)) & 65535;
  return $$0 | 0;
 } else {
  $$0 = $value & 65535;
  return $$0 | 0;
 }
 return 0;
}

function ___toread($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $15 = 0, $2 = 0, $21 = 0, $6 = 0, $8 = 0;
 $0 = $f + 74 | 0;
 $2 = HEAP8[$0 >> 0] | 0;
 HEAP8[$0 >> 0] = $2 + 255 | $2;
 $6 = $f + 20 | 0;
 $8 = $f + 44 | 0;
 if ((HEAP32[$6 >> 2] | 0) >>> 0 > (HEAP32[$8 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, 0, 0) | 0;
 HEAP32[$f + 16 >> 2] = 0;
 HEAP32[$f + 28 >> 2] = 0;
 HEAP32[$6 >> 2] = 0;
 $15 = HEAP32[$f >> 2] | 0;
 if (!($15 & 20)) {
  $21 = HEAP32[$8 >> 2] | 0;
  HEAP32[$f + 8 >> 2] = $21;
  HEAP32[$f + 4 >> 2] = $21;
  $$0 = 0;
  return $$0 | 0;
 }
 if (!($15 & 4)) {
  $$0 = -1;
  return $$0 | 0;
 }
 HEAP32[$f >> 2] = $15 | 32;
 $$0 = -1;
 return $$0 | 0;
}

function _memcmp($vl, $vr, $n) {
 $vl = $vl | 0;
 $vr = $vr | 0;
 $n = $n | 0;
 var $$03 = 0, $$lcssa = 0, $$lcssa13 = 0, $1 = 0, $11 = 0, $2 = 0, $l$04 = 0, $r$05 = 0, label = 0;
 if (!$n) {
  $11 = 0;
  return $11 | 0;
 } else {
  $$03 = $n;
  $l$04 = $vl;
  $r$05 = $vr;
 }
 while (1) {
  $1 = HEAP8[$l$04 >> 0] | 0;
  $2 = HEAP8[$r$05 >> 0] | 0;
  if ($1 << 24 >> 24 != $2 << 24 >> 24) {
   $$lcssa = $1;
   $$lcssa13 = $2;
   break;
  }
  $$03 = $$03 + -1 | 0;
  if (!$$03) {
   $11 = 0;
   label = 5;
   break;
  } else {
   $l$04 = $l$04 + 1 | 0;
   $r$05 = $r$05 + 1 | 0;
  }
 }
 if ((label | 0) == 5) return $11 | 0;
 $11 = ($$lcssa & 255) - ($$lcssa13 & 255) | 0;
 return $11 | 0;
}

function _luaL_openlibs($L) {
 $L = $L | 0;
 _luaL_requiref($L, 64456, 337, 1);
 _lua_settop($L, -2);
 _luaL_requiref($L, 56520, 338, 1);
 _lua_settop($L, -2);
 _luaL_requiref($L, 56528, 339, 1);
 _lua_settop($L, -2);
 _luaL_requiref($L, 62880, 340, 1);
 _lua_settop($L, -2);
 _luaL_requiref($L, 56544, 341, 1);
 _lua_settop($L, -2);
 _luaL_requiref($L, 56552, 342, 1);
 _lua_settop($L, -2);
 _luaL_requiref($L, 67416, 343, 1);
 _lua_settop($L, -2);
 _luaL_requiref($L, 56560, 344, 1);
 _lua_settop($L, -2);
 _luaL_requiref($L, 56568, 345, 1);
 _lua_settop($L, -2);
 _luaL_requiref($L, 66280, 346, 1);
 _lua_settop($L, -2);
 _luaL_requiref($L, 56576, 347, 1);
 _lua_settop($L, -2);
 return;
}

function _luaK_patchclose($fs, $list, $level) {
 $fs = $fs | 0;
 $list = $list | 0;
 $level = $level | 0;
 var $$01 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $fs$idx$val$idx$val = 0, label = 0;
 if (($list | 0) == -1) return;
 $fs$idx$val$idx$val = HEAP32[(HEAP32[$fs >> 2] | 0) + 48 >> 2] | 0;
 $3 = ($level << 6) + 64 & 16320;
 $$01 = $list;
 while (1) {
  $4 = $fs$idx$val$idx$val + ($$01 << 2) | 0;
  $5 = HEAP32[$4 >> 2] | 0;
  $7 = ($5 >>> 14) + -131071 | 0;
  if (($7 | 0) == -1) break;
  $$01 = $$01 + 1 + $7 | 0;
  HEAP32[$4 >> 2] = $5 & -16321 | $3;
  if (($$01 | 0) == -1) {
   label = 6;
   break;
  }
 }
 if ((label | 0) == 6) return;
 HEAP32[$4 >> 2] = $5 & -16321 | $3;
 return;
}

function _mlua_play_sound($L) {
 $L = $L | 0;
 var $1 = 0, $pitch$0 = 0.0, $volume$0 = 0.0, $x$0 = 0.0, $y$0 = 0.0;
 if (!$L) ___assert_fail(23976, 11736, 102, 11904);
 $1 = _pop_sound($L, 1) | 0;
 if ((_lua_type($L, 2) | 0) == -1) $volume$0 = 1.0; else $volume$0 = +_luaL_checknumber($L, 2);
 if ((_lua_type($L, 3) | 0) == -1) $x$0 = 0.0; else $x$0 = +_luaL_checknumber($L, 3);
 if ((_lua_type($L, 4) | 0) == -1) $y$0 = 0.0; else $y$0 = +_luaL_checknumber($L, 4);
 if ((_lua_type($L, 5) | 0) == -1) {
  $pitch$0 = 1.0;
  _sound_play($1, $volume$0, $x$0, $y$0, $pitch$0);
  return 0;
 }
 $pitch$0 = +_luaL_checknumber($L, 5);
 _sound_play($1, $volume$0, $x$0, $y$0, $pitch$0);
 return 0;
}

function _luaG_errormsg($L) {
 $L = $L | 0;
 var $1 = 0, $14 = 0, $15 = 0, $21 = 0, $26 = 0, $27 = 0, $31 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0;
 $1 = HEAP32[$L + 88 >> 2] | 0;
 if (!$1) _luaD_throw($L, 2);
 $5 = (HEAP32[$L + 28 >> 2] | 0) + $1 | 0;
 $6 = $L + 8 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 $9 = $7 + -8 | 0;
 $14 = HEAP32[$9 + 4 >> 2] | 0;
 $15 = $7;
 HEAP32[$15 >> 2] = HEAP32[$9 >> 2];
 HEAP32[$15 + 4 >> 2] = $14;
 $21 = $5;
 $26 = HEAP32[$21 + 4 >> 2] | 0;
 $27 = (HEAP32[$6 >> 2] | 0) + -8 | 0;
 HEAP32[$27 >> 2] = HEAP32[$21 >> 2];
 HEAP32[$27 + 4 >> 2] = $26;
 $31 = HEAP32[$6 >> 2] | 0;
 HEAP32[$6 >> 2] = $31 + 8;
 _luaD_call($L, $31 + -8 | 0, 1, 0);
 _luaD_throw($L, 2);
}

function __Z13mlua_gc_shapeP9lua_State($L) {
 $L = $L | 0;
 var $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 if (!$L) ___assert_fail(23976, 5080, 105, 5232);
 HEAP32[$vararg_buffer >> 2] = 5080;
 HEAP32[$vararg_buffer + 4 >> 2] = 106;
 HEAP32[$vararg_buffer + 8 >> 2] = 5232;
 _log_internal(3, 5128, 20912, $vararg_buffer);
 $1 = __Z9pop_shapeP9lua_Statei($L, 1) | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if ($3) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] & 127]($3);
 if ($2) __ZdlPv($2);
 if (!$1) {
  STACKTOP = sp;
  return 0;
 }
 __ZdlPv($1);
 STACKTOP = sp;
 return 0;
}

function __ZNK6b2Body13ShouldCollideEPKS_($this, $other) {
 $this = $this | 0;
 $other = $other | 0;
 var $$0 = 0, $jn$01 = 0, $jn$02 = 0, label = 0;
 if ((HEAP32[$this >> 2] | 0) != 2) if ((HEAP32[$other >> 2] | 0) != 2) {
  $$0 = 0;
  return $$0 | 0;
 }
 $jn$01 = HEAP32[$this + 108 >> 2] | 0;
 if (!$jn$01) {
  $$0 = 1;
  return $$0 | 0;
 } else $jn$02 = $jn$01;
 while (1) {
  if ((HEAP32[$jn$02 >> 2] | 0) == ($other | 0)) if (!(HEAP8[(HEAP32[$jn$02 + 4 >> 2] | 0) + 61 >> 0] | 0)) {
   $$0 = 0;
   label = 7;
   break;
  }
  $jn$02 = HEAP32[$jn$02 + 12 >> 2] | 0;
  if (!$jn$02) {
   $$0 = 1;
   label = 7;
   break;
  }
 }
 if ((label | 0) == 7) return $$0 | 0;
 return 0;
}

function _png_malloc_array($png_ptr, $nelements, $element_size) {
 $png_ptr = $png_ptr | 0;
 $nelements = $nelements | 0;
 $element_size = $element_size | 0;
 var $$0$i = 0, $4 = 0, $8 = 0;
 if (($nelements | 0) < 1 | ($element_size | 0) == 0) _png_error($png_ptr, 74328);
 if ((4294967295 / ($element_size >>> 0) | 0) >>> 0 < $nelements >>> 0) {
  $$0$i = 0;
  return $$0$i | 0;
 }
 $4 = Math_imul($element_size, $nelements) | 0;
 if (!$4) {
  $$0$i = 0;
  return $$0$i | 0;
 }
 if ($png_ptr) {
  $8 = HEAP32[$png_ptr + 720 >> 2] | 0;
  if ($8) {
   $$0$i = FUNCTION_TABLE_iii[$8 & 31]($png_ptr, $4) | 0;
   return $$0$i | 0;
  }
 }
 $$0$i = _malloc($4) | 0;
 return $$0$i | 0;
}

function _luaopen_drystal($L) {
 $L = $L | 0;
 if (!$L) ___assert_fail(23976, 128, 426, 328);
 _lua_createtable($L, 0, 0);
 _luaL_newmetatable($L, 344) | 0;
 _lua_pushlstring($L, 23288, 1) | 0;
 _lua_setfield($L, -2, 66568);
 _lua_setmetatable($L, -2) | 0;
 _lua_setfield($L, -1001e3, 19984);
 _luaL_checkversion_($L, 503.0, 68);
 _lua_createtable($L, 0, 6);
 _luaL_setfuncs($L, 360, 0);
 _luaL_newmetatable($L, 496) | 0;
 _lua_pushcclosure($L, 165, 0);
 _lua_setfield($L, -2, 64992);
 _lua_setmetatable($L, -2) | 0;
 _lua_pushvalue($L, -1);
 HEAP32[18] = _luaL_ref($L, -1001e3) | 0;
 if ((_lua_gettop($L) | 0) == 2) return 1; else ___assert_fail(512, 128, 463, 328);
 return 0;
}

function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
 stop = ptr + num | 0;
 if ((num | 0) >= 20) {
  value = value & 255;
  unaligned = ptr & 3;
  value4 = value | value << 8 | value << 16 | value << 24;
  stop4 = stop & ~3;
  if (unaligned) {
   unaligned = ptr + 4 - unaligned | 0;
   while ((ptr | 0) < (unaligned | 0)) {
    HEAP8[ptr >> 0] = value;
    ptr = ptr + 1 | 0;
   }
  }
  while ((ptr | 0) < (stop4 | 0)) {
   HEAP32[ptr >> 2] = value4;
   ptr = ptr + 4 | 0;
  }
 }
 while ((ptr | 0) < (stop | 0)) {
  HEAP8[ptr >> 0] = value;
  ptr = ptr + 1 | 0;
 }
 return ptr - num | 0;
}

function __Z22mlua_set_position_bodyP9lua_State($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $11 = 0, $3 = 0.0, $5 = 0.0, $6 = 0.0, $8 = 0.0, $vector = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vector = sp + 8 | 0;
 $0 = __Z8pop_bodyP9lua_Statei($L, 1) | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) {
  _luaL_error($L, 5336, sp) | 0;
  $11 = HEAP32[$0 >> 2] | 0;
 } else $11 = $1;
 $3 = +_luaL_checknumber($L, 2);
 $5 = $3 / +HEAPF32[616];
 $6 = +_luaL_checknumber($L, 3);
 $8 = $6 / +HEAPF32[616];
 HEAPF32[$vector >> 2] = $5;
 HEAPF32[$vector + 4 >> 2] = $8;
 __ZN6b2Body12SetTransformERK6b2Vec2f($11, $vector, +HEAPF32[$11 + 56 >> 2]);
 STACKTOP = sp;
 return 0;
}

function _str_upper($L) {
 $L = $L | 0;
 var $$lcssa = 0, $0 = 0, $12 = 0, $2 = 0, $b = 0, $i$01 = 0, $l = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2080 | 0;
 $l = sp + 2064 | 0;
 $b = sp;
 $0 = _luaL_checklstring($L, 1, $l) | 0;
 $2 = _luaL_buffinitsize($L, $b, HEAP32[$l >> 2] | 0) | 0;
 if (!(HEAP32[$l >> 2] | 0)) {
  $$lcssa = 0;
  _luaL_pushresultsize($b, $$lcssa);
  STACKTOP = sp;
  return 1;
 } else $i$01 = 0;
 do {
  HEAP8[$2 + $i$01 >> 0] = _toupper(HEAPU8[$0 + $i$01 >> 0] | 0) | 0;
  $i$01 = $i$01 + 1 | 0;
  $12 = HEAP32[$l >> 2] | 0;
 } while ($i$01 >>> 0 < $12 >>> 0);
 $$lcssa = $12;
 _luaL_pushresultsize($b, $$lcssa);
 STACKTOP = sp;
 return 1;
}

function _str_lower($L) {
 $L = $L | 0;
 var $$lcssa = 0, $0 = 0, $12 = 0, $2 = 0, $b = 0, $i$01 = 0, $l = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2080 | 0;
 $l = sp + 2064 | 0;
 $b = sp;
 $0 = _luaL_checklstring($L, 1, $l) | 0;
 $2 = _luaL_buffinitsize($L, $b, HEAP32[$l >> 2] | 0) | 0;
 if (!(HEAP32[$l >> 2] | 0)) {
  $$lcssa = 0;
  _luaL_pushresultsize($b, $$lcssa);
  STACKTOP = sp;
  return 1;
 } else $i$01 = 0;
 do {
  HEAP8[$2 + $i$01 >> 0] = _tolower(HEAPU8[$0 + $i$01 >> 0] | 0) | 0;
  $i$01 = $i$01 + 1 | 0;
  $12 = HEAP32[$l >> 2] | 0;
 } while ($i$01 >>> 0 < $12 >>> 0);
 $$lcssa = $12;
 _luaL_pushresultsize($b, $$lcssa);
 STACKTOP = sp;
 return 1;
}

function _luaH_getint($t, $key) {
 $t = $t | 0;
 $key = $key | 0;
 var $$0 = 0, $0 = 0, $23 = 0, $n$0 = 0, label = 0;
 $0 = $key + -1 | 0;
 if ($0 >>> 0 < (HEAP32[$t + 8 >> 2] | 0) >>> 0) {
  $$0 = (HEAP32[$t + 12 >> 2] | 0) + ($0 << 3) | 0;
  return $$0 | 0;
 }
 $n$0 = (HEAP32[$t + 16 >> 2] | 0) + (((1 << (HEAPU8[$t + 7 >> 0] | 0)) + -1 & $key) * 20 | 0) | 0;
 while (1) {
  if ((HEAP32[$n$0 + 12 >> 2] | 0) == 19) if ((HEAP32[$n$0 + 8 >> 2] | 0) == ($key | 0)) break;
  $23 = HEAP32[$n$0 + 16 >> 2] | 0;
  if (!$23) {
   $$0 = 59168;
   label = 9;
   break;
  }
  $n$0 = $n$0 + ($23 * 20 | 0) | 0;
 }
 if ((label | 0) == 9) return $$0 | 0;
 $$0 = $n$0;
 return $$0 | 0;
}

function __ZNK14b2PolygonShape5CloneEP16b2BlockAllocator($this, $allocator) {
 $this = $this | 0;
 $allocator = $allocator | 0;
 var $0 = 0, $10 = 0, $15 = 0, $16 = 0, $8 = 0;
 $0 = __ZN16b2BlockAllocator8AllocateEi($allocator, 152) | 0;
 if (!$0) $8 = 0; else {
  HEAP32[$0 >> 2] = 82040;
  HEAP32[$0 + 4 >> 2] = 2;
  HEAPF32[$0 + 8 >> 2] = .009999999776482582;
  HEAP32[$0 + 148 >> 2] = 0;
  HEAPF32[$0 + 12 >> 2] = 0.0;
  HEAPF32[$0 + 16 >> 2] = 0.0;
  $8 = $0;
 }
 $10 = $this + 4 | 0;
 $15 = HEAP32[$10 + 4 >> 2] | 0;
 $16 = $8 + 4 | 0;
 HEAP32[$16 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$16 + 4 >> 2] = $15;
 _memcpy($8 + 12 | 0, $this + 12 | 0, 140) | 0;
 return $8 | 0;
}

function _luaL_fileresult($L, $stat, $fname) {
 $L = $L | 0;
 $stat = $stat | 0;
 $fname = $fname | 0;
 var $$0 = 0, $1 = 0, $4 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $1 = HEAP32[(___errno_location() | 0) >> 2] | 0;
 if ($stat) {
  _lua_pushboolean($L, 1);
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _lua_pushnil($L);
 $4 = _strerror($1 | 0) | 0;
 if (!$fname) _lua_pushstring($L, $4) | 0; else {
  HEAP32[$vararg_buffer >> 2] = $fname;
  HEAP32[$vararg_buffer + 4 >> 2] = $4;
  _lua_pushfstring($L, 55264, $vararg_buffer) | 0;
 }
 _lua_pushinteger($L, $1);
 $$0 = 3;
 STACKTOP = sp;
 return $$0 | 0;
}

function __Z18mlua_destroy_jointP9lua_State($L) {
 $L = $L | 0;
 var $3 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!$L) ___assert_fail(23976, 2472, 631, 3576);
 if (!(HEAP32[632] | 0)) _luaL_error($L, 3600, sp) | 0;
 $3 = __Z16pop_joint_secureP9lua_Statei($L, 1) | 0;
 $4 = HEAP32[632] | 0;
 if (!(HEAP32[$4 + 102868 >> 2] & 2)) {
  __ZN7b2World12DestroyJointEP7b2Joint($4, HEAP32[$3 >> 2] | 0);
  HEAP32[$3 >> 2] = 0;
  STACKTOP = sp;
  return 0;
 }
 $9 = $3 + 8 | 0;
 if (HEAP8[$9 >> 0] | 0) {
  STACKTOP = sp;
  return 0;
 }
 HEAP32[$3 + 4 >> 2] = HEAP32[710];
 HEAP8[$9 >> 0] = 1;
 HEAP32[710] = $3;
 STACKTOP = sp;
 return 0;
}

function __ZN12b2MotorJointC2EPK15b2MotorJointDef($this, $def) {
 $this = $this | 0;
 $def = $def | 0;
 var $2 = 0, $7 = 0, $8 = 0;
 __ZN7b2JointC2EPK10b2JointDef($this, $def);
 HEAP32[$this >> 2] = 84400;
 $2 = $def + 20 | 0;
 $7 = HEAP32[$2 + 4 >> 2] | 0;
 $8 = $this + 68 | 0;
 HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$8 + 4 >> 2] = $7;
 HEAPF32[$this + 76 >> 2] = +HEAPF32[$def + 28 >> 2];
 HEAPF32[$this + 80 >> 2] = 0.0;
 HEAPF32[$this + 84 >> 2] = 0.0;
 HEAPF32[$this + 88 >> 2] = 0.0;
 HEAPF32[$this + 92 >> 2] = +HEAPF32[$def + 32 >> 2];
 HEAPF32[$this + 96 >> 2] = +HEAPF32[$def + 36 >> 2];
 HEAPF32[$this + 100 >> 2] = +HEAPF32[$def + 40 >> 2];
 return;
}

function __Z17mlua_destroy_bodyP9lua_State($L) {
 $L = $L | 0;
 var $3 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!$L) ___assert_fail(23976, 2472, 489, 3224);
 if (!(HEAP32[632] | 0)) _luaL_error($L, 3248, sp) | 0;
 $3 = __Z15pop_body_secureP9lua_Statei($L, 1) | 0;
 $4 = HEAP32[632] | 0;
 if (!(HEAP32[$4 + 102868 >> 2] & 2)) {
  __ZN7b2World11DestroyBodyEP6b2Body($4, HEAP32[$3 >> 2] | 0);
  HEAP32[$3 >> 2] = 0;
  STACKTOP = sp;
  return 0;
 }
 $9 = $3 + 8 | 0;
 if (HEAP8[$9 >> 0] | 0) {
  STACKTOP = sp;
  return 0;
 }
 HEAP32[$3 + 4 >> 2] = HEAP32[712];
 HEAP8[$9 >> 0] = 1;
 HEAP32[712] = $3;
 STACKTOP = sp;
 return 0;
}

function _luaF_newproto($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $4 = 0;
 $0 = _luaC_newobj($L, 9, 80) | 0;
 $1 = $0 + 44 | 0;
 HEAP32[$0 + 68 >> 2] = 0;
 HEAP32[$0 + 64 >> 2] = 0;
 $4 = $0 + 12 | 0;
 HEAP32[$4 + 0 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 HEAP32[$4 + 8 >> 2] = 0;
 HEAP32[$4 + 12 >> 2] = 0;
 HEAP32[$4 + 16 >> 2] = 0;
 HEAP32[$1 + 0 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 + 12 >> 2] = 0;
 HEAP8[$0 + 6 >> 0] = 0;
 HEAP8[$0 + 7 >> 0] = 0;
 HEAP8[$0 + 8 >> 0] = 0;
 HEAP32[$0 + 60 >> 2] = 0;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP32[$0 + 36 >> 2] = 0;
 HEAP32[$0 + 40 >> 2] = 0;
 HEAP32[$0 + 72 >> 2] = 0;
 return $0 | 0;
}

function __ZN7b2WorldD2Ev($this) {
 $this = $this | 0;
 var $1 = 0, $10 = 0, $b$04 = 0, $f$0 = 0, $b$04$looptemp = 0;
 $1 = HEAP32[$this + 102952 >> 2] | 0;
 if ($1) {
  $b$04 = $1;
  do {
   $b$04$looptemp = $b$04;
   $b$04 = HEAP32[$b$04 + 96 >> 2] | 0;
   $f$0 = HEAP32[$b$04$looptemp + 100 >> 2] | 0;
   while (1) {
    if (!$f$0) break;
    $10 = HEAP32[$f$0 + 4 >> 2] | 0;
    HEAP32[$f$0 + 28 >> 2] = 0;
    __ZN9b2Fixture7DestroyEP16b2BlockAllocator($f$0, $this);
    $f$0 = $10;
   }
  } while (($b$04 | 0) != 0);
 }
 __ZN12b2BroadPhaseD2Ev($this + 102872 | 0);
 __ZN16b2StackAllocatorD2Ev($this + 68 | 0);
 __ZN16b2BlockAllocatorD2Ev($this);
 return;
}

function __Z30mlua_set_angular_velocity_bodyP9lua_State($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $11 = 0, $3 = 0.0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = __Z8pop_bodyP9lua_Statei($L, 1) | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) {
  _luaL_error($L, 5336, sp) | 0;
  $5 = HEAP32[$0 >> 2] | 0;
 } else $5 = $1;
 $3 = +_luaL_checknumber($L, 2);
 if (!(HEAP32[$5 >> 2] | 0)) {
  STACKTOP = sp;
  return 0;
 }
 if ($3 * $3 > 0.0) {
  $9 = $5 + 4 | 0;
  $11 = HEAPU16[$9 >> 1] | 0;
  if (!($11 & 2)) {
   HEAP16[$9 >> 1] = $11 | 2;
   HEAPF32[$5 + 144 >> 2] = 0.0;
  }
 }
 HEAPF32[$5 + 72 >> 2] = $3;
 STACKTOP = sp;
 return 0;
}

function __ZN16b2PrismaticJoint11EnableMotorEb($this, $flag) {
 $this = $this | 0;
 $flag = $flag | 0;
 var $1 = 0, $11 = 0, $12 = 0, $14 = 0, $2 = 0, $20 = 0, $21 = 0, $4 = 0;
 $1 = HEAP32[$this + 48 >> 2] | 0;
 $2 = $1 + 4 | 0;
 $4 = HEAPU16[$2 >> 1] | 0;
 if (!($4 & 2)) {
  HEAP16[$2 >> 1] = $4 | 2;
  HEAPF32[$1 + 144 >> 2] = 0.0;
 }
 $11 = HEAP32[$this + 52 >> 2] | 0;
 $12 = $11 + 4 | 0;
 $14 = HEAPU16[$12 >> 1] | 0;
 if ($14 & 2) {
  $20 = $this + 137 | 0;
  $21 = $flag & 1;
  HEAP8[$20 >> 0] = $21;
  return;
 }
 HEAP16[$12 >> 1] = $14 | 2;
 HEAPF32[$11 + 144 >> 2] = 0.0;
 $20 = $this + 137 | 0;
 $21 = $flag & 1;
 HEAP8[$20 >> 0] = $21;
 return;
}

function _saveSetjmp(env, label, table, size) {
 env = env | 0;
 label = label | 0;
 table = table | 0;
 size = size | 0;
 var i = 0;
 setjmpId = setjmpId + 1 | 0;
 HEAP32[env >> 2] = setjmpId;
 while ((i | 0) < (size | 0)) {
  if (!(HEAP32[table + (i << 3) >> 2] | 0)) {
   HEAP32[table + (i << 3) >> 2] = setjmpId;
   HEAP32[table + ((i << 3) + 4) >> 2] = label;
   HEAP32[table + ((i << 3) + 8) >> 2] = 0;
   tempRet0 = size;
   return table | 0;
  }
  i = i + 1 | 0;
 }
 size = size * 2 | 0;
 table = _realloc(table | 0, 8 * (size + 1 | 0) | 0) | 0;
 table = _saveSetjmp(env | 0, label | 0, table | 0, size | 0) | 0;
 tempRet0 = size;
 return table | 0;
}

function __ZN15b2RevoluteJoint11EnableMotorEb($this, $flag) {
 $this = $this | 0;
 $flag = $flag | 0;
 var $1 = 0, $11 = 0, $12 = 0, $14 = 0, $2 = 0, $20 = 0, $21 = 0, $4 = 0;
 $1 = HEAP32[$this + 48 >> 2] | 0;
 $2 = $1 + 4 | 0;
 $4 = HEAPU16[$2 >> 1] | 0;
 if (!($4 & 2)) {
  HEAP16[$2 >> 1] = $4 | 2;
  HEAPF32[$1 + 144 >> 2] = 0.0;
 }
 $11 = HEAP32[$this + 52 >> 2] | 0;
 $12 = $11 + 4 | 0;
 $14 = HEAPU16[$12 >> 1] | 0;
 if ($14 & 2) {
  $20 = $this + 100 | 0;
  $21 = $flag & 1;
  HEAP8[$20 >> 0] = $21;
  return;
 }
 HEAP16[$12 >> 1] = $14 | 2;
 HEAPF32[$11 + 144 >> 2] = 0.0;
 $20 = $this + 100 | 0;
 $21 = $flag & 1;
 HEAP8[$20 >> 0] = $21;
 return;
}

function __ZN14CustomListener9PostSolveEP9b2ContactPK16b2ContactImpulse($this, $contact, $0) {
 $this = $this | 0;
 $contact = $contact | 0;
 $0 = $0 | 0;
 var $13 = 0, $2 = 0, $4 = 0;
 $2 = HEAP32[$this + 20 >> 2] | 0;
 if (($2 | 0) == -1) return;
 $4 = $this + 4 | 0;
 _lua_rawgeti(HEAP32[$4 >> 2] | 0, -1001e3, $2) | 0;
 $13 = HEAP32[(HEAP32[$contact + 52 >> 2] | 0) + 8 >> 2] | 0;
 __Z9push_bodyP9lua_StateP4Body(HEAP32[$4 >> 2] | 0, HEAP32[(HEAP32[(HEAP32[$contact + 48 >> 2] | 0) + 8 >> 2] | 0) + 148 >> 2] | 0);
 __Z9push_bodyP9lua_StateP4Body(HEAP32[$4 >> 2] | 0, HEAP32[$13 + 148 >> 2] | 0);
 _call_lua_function(HEAP32[$4 >> 2] | 0, 2, 0);
 return;
}

function _camera_pop($c) {
 $c = $c | 0;
 var $1 = 0, $3 = 0, $4 = 0;
 if (!$c) ___assert_fail(23168, 13848, 80, 16048);
 $1 = HEAP32[3498] | 0;
 if (!$1) ___assert_fail(16064, 13848, 81, 16048); else {
  $3 = $1 + -1 | 0;
  HEAP32[3498] = $3;
  $4 = 14e3 + ($3 << 5) | 0;
  HEAP32[$c + 0 >> 2] = HEAP32[$4 + 0 >> 2];
  HEAP32[$c + 4 >> 2] = HEAP32[$4 + 4 >> 2];
  HEAP32[$c + 8 >> 2] = HEAP32[$4 + 8 >> 2];
  HEAP32[$c + 12 >> 2] = HEAP32[$4 + 12 >> 2];
  HEAP32[$c + 16 >> 2] = HEAP32[$4 + 16 >> 2];
  HEAP32[$c + 20 >> 2] = HEAP32[$4 + 20 >> 2];
  HEAP32[$c + 24 >> 2] = HEAP32[$4 + 24 >> 2];
  HEAP32[$c + 28 >> 2] = HEAP32[$4 + 28 >> 2];
  return;
 }
}

function __ZN16b2PrismaticJoint11EnableLimitEb($this, $flag) {
 $this = $this | 0;
 $flag = $flag | 0;
 var $1 = 0, $16 = 0, $17 = 0, $19 = 0, $6 = 0, $7 = 0, $9 = 0;
 $1 = $this + 136 | 0;
 if (($flag & 1 | 0) == (HEAPU8[$1 >> 0] | 0 | 0)) return;
 $6 = HEAP32[$this + 48 >> 2] | 0;
 $7 = $6 + 4 | 0;
 $9 = HEAPU16[$7 >> 1] | 0;
 if (!($9 & 2)) {
  HEAP16[$7 >> 1] = $9 | 2;
  HEAPF32[$6 + 144 >> 2] = 0.0;
 }
 $16 = HEAP32[$this + 52 >> 2] | 0;
 $17 = $16 + 4 | 0;
 $19 = HEAPU16[$17 >> 1] | 0;
 if (!($19 & 2)) {
  HEAP16[$17 >> 1] = $19 | 2;
  HEAPF32[$16 + 144 >> 2] = 0.0;
 }
 HEAP8[$1 >> 0] = $flag & 1;
 HEAPF32[$this + 112 >> 2] = 0.0;
 return;
}

function __ZN7b2World10CreateBodyEPK9b2BodyDef($this, $def) {
 $this = $this | 0;
 $def = $def | 0;
 var $11 = 0, $14 = 0, $4 = 0, $7 = 0, $8 = 0;
 if (HEAP32[$this + 102868 >> 2] & 2) ___assert_fail(89248, 89272, 109, 89328);
 $4 = __ZN16b2BlockAllocator8AllocateEi($this, 152) | 0;
 if (!$4) $7 = 0; else {
  __ZN6b2BodyC2EPK9b2BodyDefP7b2World($4, $def, $this);
  $7 = $4;
 }
 HEAP32[$7 + 92 >> 2] = 0;
 $8 = $this + 102952 | 0;
 HEAP32[$7 + 96 >> 2] = HEAP32[$8 >> 2];
 $11 = HEAP32[$8 >> 2] | 0;
 if ($11) HEAP32[$11 + 92 >> 2] = $7;
 HEAP32[$8 >> 2] = $7;
 $14 = $this + 102960 | 0;
 HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 1;
 return $7 | 0;
}

function __ZN15b2RevoluteJoint11EnableLimitEb($this, $flag) {
 $this = $this | 0;
 $flag = $flag | 0;
 var $1 = 0, $16 = 0, $17 = 0, $19 = 0, $6 = 0, $7 = 0, $9 = 0;
 $1 = $this + 112 | 0;
 if (($flag & 1 | 0) == (HEAPU8[$1 >> 0] | 0 | 0)) return;
 $6 = HEAP32[$this + 48 >> 2] | 0;
 $7 = $6 + 4 | 0;
 $9 = HEAPU16[$7 >> 1] | 0;
 if (!($9 & 2)) {
  HEAP16[$7 >> 1] = $9 | 2;
  HEAPF32[$6 + 144 >> 2] = 0.0;
 }
 $16 = HEAP32[$this + 52 >> 2] | 0;
 $17 = $16 + 4 | 0;
 $19 = HEAPU16[$17 >> 1] | 0;
 if (!($19 & 2)) {
  HEAP16[$17 >> 1] = $19 | 2;
  HEAPF32[$16 + 144 >> 2] = 0.0;
 }
 HEAP8[$1 >> 0] = $flag & 1;
 HEAPF32[$this + 92 >> 2] = 0.0;
 return;
}

function _luaG_ordererror($L, $p1, $p2) {
 $L = $L | 0;
 $p1 = $p1 | 0;
 $p2 = $p2 | 0;
 var $11 = 0, $5 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $5 = HEAP32[62904 + ((HEAP32[$p1 + 4 >> 2] & 15) + 1 << 2) >> 2] | 0;
 $11 = HEAP32[62904 + ((HEAP32[$p2 + 4 >> 2] & 15) + 1 << 2) >> 2] | 0;
 if (($5 | 0) == ($11 | 0)) {
  HEAP32[$vararg_buffer >> 2] = $5;
  _luaG_runerror($L, 55960, $vararg_buffer);
 } else {
  HEAP32[$vararg_buffer1 >> 2] = $5;
  HEAP32[$vararg_buffer1 + 4 >> 2] = $11;
  _luaG_runerror($L, 56e3, $vararg_buffer1);
 }
}

function _png_read_filter_row($pp, $row_info, $row, $prev_row, $filter) {
 $pp = $pp | 0;
 $row_info = $row_info | 0;
 $row = $row | 0;
 $prev_row = $prev_row | 0;
 $filter = $filter | 0;
 var $1 = 0, $7 = 0, $filter$off = 0;
 $filter$off = $filter + -1 | 0;
 if ($filter$off >>> 0 >= 4) return;
 $1 = $pp + 808 | 0;
 if (!(HEAP32[$1 >> 2] | 0)) {
  $7 = (HEAPU8[$pp + 438 >> 0] | 0) + 7 | 0;
  HEAP32[$1 >> 2] = 10;
  HEAP32[$pp + 812 >> 2] = 11;
  HEAP32[$pp + 816 >> 2] = 12;
  HEAP32[$pp + 820 >> 2] = ($7 & 504 | 0) == 8 ? 14 : 13;
 }
 FUNCTION_TABLE_viii[HEAP32[$pp + ($filter$off << 2) + 808 >> 2] & 15]($row_info, $row, $prev_row);
 return;
}

function _graphics_index($L) {
 $L = $L | 0;
 var $$0 = 0, $0 = 0, $11 = 0, $3 = 0, $7 = 0;
 $0 = _luaL_checklstring($L, 2, 0) | 0;
 do if (!(_strcmp($0, 20384) | 0)) {
  $3 = _display_get_screen() | 0;
  if (!$3) $$0 = 0; else {
   _push_surface($L, $3);
   $$0 = 1;
  }
 } else {
  if (!(_strcmp($0, 13808) | 0)) {
   $7 = _display_get_draw_on() | 0;
   if (!$7) {
    $$0 = 0;
    break;
   }
   _push_surface($L, $7);
   $$0 = 1;
   break;
  }
  if (!(_strcmp($0, 13824) | 0)) {
   $11 = _display_get_draw_from() | 0;
   if (!$11) $$0 = 0; else {
    _push_surface($L, $11);
    $$0 = 1;
   }
  } else $$0 = 0;
 } while (0);
 return $$0 | 0;
}

function _camera_push($c) {
 $c = $c | 0;
 var $1 = 0, $4 = 0;
 if (!$c) ___assert_fail(23168, 13848, 72, 13952);
 $1 = HEAP32[3498] | 0;
 if (($1 | 0) == 64) ___assert_fail(13968, 13848, 73, 13952); else {
  HEAP32[3498] = $1 + 1;
  $4 = 14e3 + ($1 << 5) | 0;
  HEAP32[$4 + 0 >> 2] = HEAP32[$c + 0 >> 2];
  HEAP32[$4 + 4 >> 2] = HEAP32[$c + 4 >> 2];
  HEAP32[$4 + 8 >> 2] = HEAP32[$c + 8 >> 2];
  HEAP32[$4 + 12 >> 2] = HEAP32[$c + 12 >> 2];
  HEAP32[$4 + 16 >> 2] = HEAP32[$c + 16 >> 2];
  HEAP32[$4 + 20 >> 2] = HEAP32[$c + 20 >> 2];
  HEAP32[$4 + 24 >> 2] = HEAP32[$c + 24 >> 2];
  HEAP32[$4 + 28 >> 2] = HEAP32[$c + 28 >> 2];
  return;
 }
}

function _display_new_surface($w, $h, $force_npot) {
 $w = $w | 0;
 $h = $h | 0;
 $force_npot = $force_npot | 0;
 var $15 = 0, $18 = 0, $8 = 0;
 if (($w | 0) <= 0) ___assert_fail(18936, 18224, 556, 18944);
 if (($h | 0) <= 0) ___assert_fail(18968, 18224, 557, 18944);
 $8 = ~~+_ldexp(1.0, ~~+Math_ceil(+(+Math_log(+(+($w | 0))) / .6931471805599453)));
 $15 = ~~+_ldexp(1.0, ~~+Math_ceil(+(+Math_log(+(+($h | 0))) / .6931471805599453)));
 $18 = _surface_new($w, $h, $force_npot ? $w : $8, $force_npot ? $h : $15, 6408, 0, HEAP32[4529] | 0, HEAP32[4528] | 0) | 0;
 if (!$force_npot) return $18 | 0;
 HEAP8[$18 + 26 >> 0] = 1;
 return $18 | 0;
}

function _mz_zip_mem_read_func($pOpaque, $0, $1, $pBuf, $n) {
 $pOpaque = $pOpaque | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $pBuf = $pBuf | 0;
 $n = $n | 0;
 var $13 = 0, $14 = 0, $2 = 0, $25 = 0, $4 = 0, $7 = 0;
 $2 = $pOpaque;
 $4 = HEAP32[$2 >> 2] | 0;
 $7 = HEAP32[$2 + 4 >> 2] | 0;
 if ($7 >>> 0 > $1 >>> 0 | ($7 | 0) == ($1 | 0) & $4 >>> 0 > $0 >>> 0) {
  $13 = _i64Subtract($4 | 0, $7 | 0, $0 | 0, $1 | 0) | 0;
  $14 = tempRet0;
  $25 = $14 >>> 0 < 0 | ($14 | 0) == 0 & $13 >>> 0 < $n >>> 0 ? $13 : $n;
 } else $25 = 0;
 _memcpy($pBuf | 0, (HEAP32[(HEAP32[$pOpaque + 56 >> 2] | 0) + 52 >> 2] | 0) + $0 | 0, $25 | 0) | 0;
 return $25 | 0;
}

function _luaE_shrinkCI($L) {
 $L = $L | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $9 = 0, $ci$01 = 0, label = 0, $ci$01$looptemp = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 $2 = $1 + 12 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if (!$3) return; else {
  $6 = $3;
  $9 = $2;
  $ci$01 = $1;
 }
 while (1) {
  $ci$01$looptemp = $ci$01;
  $ci$01 = HEAP32[$6 + 12 >> 2] | 0;
  if (!$ci$01) {
   label = 4;
   break;
  }
  _luaM_realloc_($L, $6, 36, 0) | 0;
  HEAP32[$9 >> 2] = $ci$01;
  HEAP32[$ci$01 + 8 >> 2] = $ci$01$looptemp;
  $9 = $ci$01 + 12 | 0;
  $6 = HEAP32[$9 >> 2] | 0;
  if (!$6) {
   label = 4;
   break;
  }
 }
 if ((label | 0) == 4) return;
}

function _png_set_bKGD($png_ptr, $info_ptr, $background) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 $background = $background | 0;
 var $3 = 0, $4 = 0;
 if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0 | ($background | 0) == 0) return;
 $3 = $info_ptr + 170 | 0;
 HEAP16[$3 + 0 >> 1] = HEAP16[$background + 0 >> 1] | 0;
 HEAP16[$3 + 2 >> 1] = HEAP16[$background + 2 >> 1] | 0;
 HEAP16[$3 + 4 >> 1] = HEAP16[$background + 4 >> 1] | 0;
 HEAP16[$3 + 6 >> 1] = HEAP16[$background + 6 >> 1] | 0;
 HEAP16[$3 + 8 >> 1] = HEAP16[$background + 8 >> 1] | 0;
 $4 = $info_ptr + 8 | 0;
 HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 32;
 return;
}

function _png_read_finish_IDAT($png_ptr) {
 $png_ptr = $png_ptr | 0;
 var $0 = 0, $12 = 0, $5 = 0, $8 = 0;
 $0 = $png_ptr + 212 | 0;
 if (!(HEAP32[$0 >> 2] & 8)) {
  _png_read_IDAT_data($png_ptr, 0, 0);
  HEAP32[$png_ptr + 236 >> 2] = 0;
  $5 = HEAP32[$0 >> 2] | 0;
  if (!($5 & 8)) {
   $8 = $png_ptr + 208 | 0;
   HEAP32[$8 >> 2] = HEAP32[$8 >> 2] | 8;
   HEAP32[$0 >> 2] = $5 | 8;
  }
 }
 $12 = $png_ptr + 220 | 0;
 if ((HEAP32[$12 >> 2] | 0) != 1229209940) return;
 HEAP32[$png_ptr + 224 >> 2] = 0;
 HEAP32[$png_ptr + 228 >> 2] = 0;
 HEAP32[$12 >> 2] = 0;
 _png_crc_finish($png_ptr, HEAP32[$png_ptr + 408 >> 2] | 0) | 0;
 return;
}

function _png_check_fp_string($string, $size) {
 $string = $string | 0;
 $size = $size | 0;
 var $$0 = 0, $2 = 0, $char_index = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $state = sp + 4 | 0;
 $char_index = sp;
 HEAP32[$state >> 2] = 0;
 HEAP32[$char_index >> 2] = 0;
 if (!(_png_check_fp_number($string, $size, $state, $char_index) | 0)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $2 = HEAP32[$char_index >> 2] | 0;
 if (($2 | 0) != ($size | 0)) if (HEAP8[$string + $2 >> 0] | 0) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $$0 = HEAP32[$state >> 2] | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _maxn($L) {
 $L = $L | 0;
 var $4 = 0.0, $max$0$ph2 = 0.0, $max$0$ph3 = 0.0;
 _luaL_checktype($L, 1, 5);
 _lua_pushnil($L);
 L1 : do if (!(_lua_next($L, 1) | 0)) $max$0$ph2 = 0.0; else {
  $max$0$ph3 = 0.0;
  while (1) {
   while (1) {
    _lua_settop($L, -2);
    if ((_lua_type($L, -1) | 0) == 3) {
     $4 = +_lua_tonumberx($L, -1, 0);
     if ($4 > $max$0$ph3) break;
    }
    if (!(_lua_next($L, 1) | 0)) {
     $max$0$ph2 = $max$0$ph3;
     break L1;
    }
   }
   if (!(_lua_next($L, 1) | 0)) {
    $max$0$ph2 = $4;
    break;
   } else $max$0$ph3 = $4;
  }
 } while (0);
 _lua_pushnumber($L, $max$0$ph2);
 return 1;
}

function _luaK_infix($fs, $op, $v) {
 $fs = $fs | 0;
 $op = $op | 0;
 $v = $v | 0;
 switch ($op | 0) {
 case 12:
  {
   _luaK_exp2nextreg($fs, $v);
   return;
  }
 case 20:
  {
   _luaK_goiffalse($fs, $v);
   return;
  }
 case 11:
 case 10:
 case 9:
 case 8:
 case 7:
 case 4:
 case 3:
 case 6:
 case 5:
 case 2:
 case 1:
 case 0:
  {
   if ((HEAP32[$v + 8 >> 2] | 0) == -1) if ((HEAP32[$v + 12 >> 2] | 0) == -1) if (((HEAP32[$v >> 2] | 0) + -5 | 0) >>> 0 < 2) return;
   _luaK_exp2RK($fs, $v) | 0;
   return;
  }
 case 19:
  {
   _luaK_goiftrue($fs, $v);
   return;
  }
 default:
  {
   _luaK_exp2RK($fs, $v) | 0;
   return;
  }
 }
}

function __ZN15b2RevoluteJoint17SetMaxMotorTorqueEf($this, $torque) {
 $this = $this | 0;
 $torque = +$torque;
 var $1 = 0, $11 = 0, $12 = 0, $14 = 0, $2 = 0, $20 = 0, $4 = 0;
 $1 = HEAP32[$this + 48 >> 2] | 0;
 $2 = $1 + 4 | 0;
 $4 = HEAPU16[$2 >> 1] | 0;
 if (!($4 & 2)) {
  HEAP16[$2 >> 1] = $4 | 2;
  HEAPF32[$1 + 144 >> 2] = 0.0;
 }
 $11 = HEAP32[$this + 52 >> 2] | 0;
 $12 = $11 + 4 | 0;
 $14 = HEAPU16[$12 >> 1] | 0;
 if ($14 & 2) {
  $20 = $this + 104 | 0;
  HEAPF32[$20 >> 2] = $torque;
  return;
 }
 HEAP16[$12 >> 1] = $14 | 2;
 HEAPF32[$11 + 144 >> 2] = 0.0;
 $20 = $this + 104 | 0;
 HEAPF32[$20 >> 2] = $torque;
 return;
}

function _lua_xmove($from, $to, $n) {
 $from = $from | 0;
 $to = $to | 0;
 $n = $n | 0;
 var $1 = 0, $11 = 0, $16 = 0, $17 = 0, $6 = 0, $7 = 0, $i$01 = 0;
 if (($from | 0) == ($to | 0)) return;
 $1 = $from + 8 | 0;
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + (0 - $n << 3);
 if (($n | 0) <= 0) return;
 $6 = $to + 8 | 0;
 $i$01 = 0;
 do {
  $7 = HEAP32[$6 >> 2] | 0;
  HEAP32[$6 >> 2] = $7 + 8;
  $11 = (HEAP32[$1 >> 2] | 0) + ($i$01 << 3) | 0;
  $16 = HEAP32[$11 + 4 >> 2] | 0;
  $17 = $7;
  HEAP32[$17 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$17 + 4 >> 2] = $16;
  $i$01 = $i$01 + 1 | 0;
 } while (($i$01 | 0) != ($n | 0));
 return;
}

function _png_do_packswap($row_info, $row) {
 $row_info = $row_info | 0;
 $row = $row | 0;
 var $1 = 0, $4 = 0, $5 = 0, $rp$01 = 0, $table$0 = 0;
 $1 = HEAP8[$row_info + 9 >> 0] | 0;
 if (($1 & 255) >= 8) return;
 $4 = HEAP32[$row_info + 4 >> 2] | 0;
 $5 = $row + $4 | 0;
 if ($1 << 24 >> 24 == 4) $table$0 = 78632; else if ($1 << 24 >> 24 == 2) $table$0 = 78376; else if ($1 << 24 >> 24 == 1) $table$0 = 78120; else return;
 if (($4 | 0) > 0) $rp$01 = $row; else return;
 do {
  HEAP8[$rp$01 >> 0] = HEAP8[$table$0 + (HEAPU8[$rp$01 >> 0] | 0) >> 0] | 0;
  $rp$01 = $rp$01 + 1 | 0;
 } while ($rp$01 >>> 0 < $5 >>> 0);
 return;
}

function __ZN16b2PrismaticJoint13SetMotorSpeedEf($this, $speed) {
 $this = $this | 0;
 $speed = +$speed;
 var $1 = 0, $11 = 0, $12 = 0, $14 = 0, $2 = 0, $20 = 0, $4 = 0;
 $1 = HEAP32[$this + 48 >> 2] | 0;
 $2 = $1 + 4 | 0;
 $4 = HEAPU16[$2 >> 1] | 0;
 if (!($4 & 2)) {
  HEAP16[$2 >> 1] = $4 | 2;
  HEAPF32[$1 + 144 >> 2] = 0.0;
 }
 $11 = HEAP32[$this + 52 >> 2] | 0;
 $12 = $11 + 4 | 0;
 $14 = HEAPU16[$12 >> 1] | 0;
 if ($14 & 2) {
  $20 = $this + 132 | 0;
  HEAPF32[$20 >> 2] = $speed;
  return;
 }
 HEAP16[$12 >> 1] = $14 | 2;
 HEAPF32[$11 + 144 >> 2] = 0.0;
 $20 = $this + 132 | 0;
 HEAPF32[$20 >> 2] = $speed;
 return;
}

function _fieldsel($ls, $v) {
 $ls = $ls | 0;
 $v = $v | 0;
 var $0 = 0, $1 = 0, $6 = 0, $7 = 0, $key = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $key = sp;
 $0 = $ls + 28 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 _luaK_exp2anyregup($1, $v);
 _luaX_next($ls);
 if ((HEAP32[$ls + 12 >> 2] | 0) == 292) {
  $6 = HEAP32[$ls + 16 >> 2] | 0;
  _luaX_next($ls);
  $7 = _luaK_stringK(HEAP32[$0 >> 2] | 0, $6) | 0;
  HEAP32[$key + 8 >> 2] = -1;
  HEAP32[$key + 12 >> 2] = -1;
  HEAP32[$key >> 2] = 4;
  HEAP32[$key + 4 >> 2] = $7;
  _luaK_indexed($1, $v, $key);
  STACKTOP = sp;
  return;
 } else _error_expected($ls, 292);
}

function __ZN15b2RevoluteJoint13SetMotorSpeedEf($this, $speed) {
 $this = $this | 0;
 $speed = +$speed;
 var $1 = 0, $11 = 0, $12 = 0, $14 = 0, $2 = 0, $20 = 0, $4 = 0;
 $1 = HEAP32[$this + 48 >> 2] | 0;
 $2 = $1 + 4 | 0;
 $4 = HEAPU16[$2 >> 1] | 0;
 if (!($4 & 2)) {
  HEAP16[$2 >> 1] = $4 | 2;
  HEAPF32[$1 + 144 >> 2] = 0.0;
 }
 $11 = HEAP32[$this + 52 >> 2] | 0;
 $12 = $11 + 4 | 0;
 $14 = HEAPU16[$12 >> 1] | 0;
 if ($14 & 2) {
  $20 = $this + 108 | 0;
  HEAPF32[$20 >> 2] = $speed;
  return;
 }
 HEAP16[$12 >> 1] = $14 | 2;
 HEAPF32[$11 + 144 >> 2] = 0.0;
 $20 = $this + 108 | 0;
 HEAPF32[$20 >> 2] = $speed;
 return;
}

function _strbuf_new($len) {
 $len = $len | 0;
 var $0 = 0, $10 = 0, $7 = 0, $size$0$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = _malloc(28) | 0;
 if (!$0) _die(74392, sp);
 $size$0$i = ($len | 0) < 1 ? 1023 : $len + 1 | 0;
 HEAP32[$0 + 4 >> 2] = $size$0$i;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = -2;
 $7 = $0 + 16 | 0;
 HEAP32[$7 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 $10 = _malloc($size$0$i) | 0;
 HEAP32[$0 >> 2] = $10;
 if (!$10) _die(74392, sp + 8 | 0); else {
  HEAP8[$10 >> 0] = 0;
  HEAP32[$7 >> 2] = 1;
  STACKTOP = sp;
  return $0 | 0;
 }
 return 0;
}

function _f_seek($L) {
 $L = $L | 0;
 var $$0 = 0, $0 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = _luaL_checkudata($L, 1, 56736) | 0;
 if (!(HEAP32[$0 + 4 >> 2] | 0)) _luaL_error($L, 56960, sp) | 0;
 $4 = HEAP32[$0 >> 2] | 0;
 $5 = _luaL_checkoption($L, 2, 57080, 57056) | 0;
 $6 = _luaL_optinteger($L, 3, 0) | 0;
 if (!(_fseek($4 | 0, $6 | 0, HEAP32[57040 + ($5 << 2) >> 2] | 0) | 0)) {
  _lua_pushinteger($L, _ftell($4 | 0) | 0);
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $$0 = _luaL_fileresult($L, 0, 0) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _math_min($L) {
 $L = $L | 0;
 var $0 = 0, $4 = 0, $i$02 = 0, $imin$0$i$0 = 0, $imin$0$lcssa = 0, $imin$01 = 0;
 $0 = _lua_gettop($L) | 0;
 if (($0 | 0) > 0) if (($0 | 0) < 2) $imin$0$lcssa = 1; else {
  $i$02 = 2;
  $imin$01 = 1;
  while (1) {
   $4 = (_lua_compare($L, $i$02, $imin$01, 1) | 0) == 0;
   $imin$0$i$0 = $4 ? $imin$01 : $i$02;
   if (($i$02 | 0) == ($0 | 0)) {
    $imin$0$lcssa = $imin$0$i$0;
    break;
   } else {
    $i$02 = $i$02 + 1 | 0;
    $imin$01 = $imin$0$i$0;
   }
  }
 } else {
  _luaL_argerror($L, 1, 58040) | 0;
  $imin$0$lcssa = 1;
 }
 _lua_pushvalue($L, $imin$0$lcssa);
 return 1;
}

function _math_max($L) {
 $L = $L | 0;
 var $0 = 0, $4 = 0, $i$02 = 0, $imax$0$i$0 = 0, $imax$0$lcssa = 0, $imax$01 = 0;
 $0 = _lua_gettop($L) | 0;
 if (($0 | 0) > 0) if (($0 | 0) < 2) $imax$0$lcssa = 1; else {
  $i$02 = 2;
  $imax$01 = 1;
  while (1) {
   $4 = (_lua_compare($L, $imax$01, $i$02, 1) | 0) == 0;
   $imax$0$i$0 = $4 ? $imax$01 : $i$02;
   if (($i$02 | 0) == ($0 | 0)) {
    $imax$0$lcssa = $imax$0$i$0;
    break;
   } else {
    $i$02 = $i$02 + 1 | 0;
    $imax$01 = $imax$0$i$0;
   }
  }
 } else {
  _luaL_argerror($L, 1, 58040) | 0;
  $imax$0$lcssa = 1;
 }
 _lua_pushvalue($L, $imax$0$lcssa);
 return 1;
}

function __ZN14CustomListener10EndContactEP9b2Contact($this, $contact) {
 $this = $this | 0;
 $contact = $contact | 0;
 var $1 = 0, $12 = 0, $3 = 0;
 $1 = HEAP32[$this + 12 >> 2] | 0;
 if (($1 | 0) == -1) return;
 $3 = $this + 4 | 0;
 _lua_rawgeti(HEAP32[$3 >> 2] | 0, -1001e3, $1) | 0;
 $12 = HEAP32[(HEAP32[$contact + 52 >> 2] | 0) + 8 >> 2] | 0;
 __Z9push_bodyP9lua_StateP4Body(HEAP32[$3 >> 2] | 0, HEAP32[(HEAP32[(HEAP32[$contact + 48 >> 2] | 0) + 8 >> 2] | 0) + 148 >> 2] | 0);
 __Z9push_bodyP9lua_StateP4Body(HEAP32[$3 >> 2] | 0, HEAP32[$12 + 148 >> 2] | 0);
 _call_lua_function(HEAP32[$3 >> 2] | 0, 2, 0);
 return;
}

function _music_free($m) {
 $m = $m | 0;
 var $$pre$phiZ2D = 0, $1 = 0, $13 = 0, $6 = 0, $7 = 0;
 if (!$m) return;
 $1 = HEAP32[$m >> 2] | 0;
 if (!$1) $$pre$phiZ2D = $m + 20 | 0; else {
  _alSourceStop(HEAP32[$1 >> 2] | 0);
  _alSourcei(HEAP32[HEAP32[$m >> 2] >> 2] | 0, 4105, 0);
  $6 = $m + 20 | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  FUNCTION_TABLE_vi[HEAP32[$7 + 4 >> 2] & 127]($7);
  HEAP8[(HEAP32[$m >> 2] | 0) + 4 >> 0] = 0;
  HEAP32[$m >> 2] = 0;
  $$pre$phiZ2D = $6;
 }
 _alDeleteBuffers(3, $m + 4 | 0);
 $13 = HEAP32[$$pre$phiZ2D >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[$13 + 8 >> 2] & 127]($13);
 _free($m);
 return;
}

function __ZNK7b2Mat337Solve22ERK6b2Vec2($agg$result, $this, $b) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $b = $b | 0;
 var $0 = 0.0, $12 = 0.0, $15 = 0.0, $2 = 0.0, $4 = 0.0, $6 = 0.0, $9 = 0.0, $det$0 = 0.0;
 $0 = +HEAPF32[$this >> 2];
 $2 = +HEAPF32[$this + 12 >> 2];
 $4 = +HEAPF32[$this + 4 >> 2];
 $6 = +HEAPF32[$this + 16 >> 2];
 $9 = $0 * $6 - $2 * $4;
 if ($9 != 0.0) $det$0 = 1.0 / $9; else $det$0 = $9;
 $12 = +HEAPF32[$b >> 2];
 $15 = +HEAPF32[$b + 4 >> 2];
 HEAPF32[$agg$result >> 2] = $det$0 * ($6 * $12 - $2 * $15);
 HEAPF32[$agg$result + 4 >> 2] = $det$0 * ($0 * $15 - $4 * $12);
 return;
}

function _luaK_reserveregs($fs, $n) {
 $fs = $fs | 0;
 $n = $n | 0;
 var $0 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $5 = 0;
 $0 = $fs + 44 | 0;
 $1 = HEAP8[$0 >> 0] | 0;
 $3 = ($1 & 255) + $n | 0;
 $5 = (HEAP32[$fs >> 2] | 0) + 8 | 0;
 if (($3 | 0) <= (HEAPU8[$5 >> 0] | 0 | 0)) {
  $14 = $1;
  $13 = $14 & 255;
  $15 = $13 + $n | 0;
  $16 = $15 & 255;
  HEAP8[$0 >> 0] = $16;
  return;
 }
 if (($3 | 0) > 249) _luaX_syntaxerror(HEAP32[$fs + 8 >> 2] | 0, 65488);
 HEAP8[$5 >> 0] = $3;
 $14 = HEAP8[$0 >> 0] | 0;
 $13 = $14 & 255;
 $15 = $13 + $n | 0;
 $16 = $15 & 255;
 HEAP8[$0 >> 0] = $16;
 return;
}

function __ZNK13b2CircleShape9TestPointERK11b2TransformRK6b2Vec2($this, $transform, $p) {
 $this = $this | 0;
 $transform = $transform | 0;
 $p = $p | 0;
 var $1 = 0.0, $20 = 0.0, $23 = 0.0, $28 = 0.0, $3 = 0.0, $6 = 0.0, $8 = 0.0;
 $1 = +HEAPF32[$transform + 12 >> 2];
 $3 = +HEAPF32[$this + 12 >> 2];
 $6 = +HEAPF32[$transform + 8 >> 2];
 $8 = +HEAPF32[$this + 16 >> 2];
 $20 = +HEAPF32[$p >> 2] - (+HEAPF32[$transform >> 2] + ($1 * $3 - $6 * $8));
 $23 = +HEAPF32[$p + 4 >> 2] - (+HEAPF32[$transform + 4 >> 2] + ($3 * $6 + $1 * $8));
 $28 = +HEAPF32[$this + 8 >> 2];
 return $20 * $20 + $23 * $23 <= $28 * $28 | 0;
}

function _str_char($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $3 = 0, $b = 0, $i$01 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2064 | 0;
 $b = sp;
 $0 = _lua_gettop($L) | 0;
 $1 = _luaL_buffinitsize($L, $b, $0) | 0;
 if (($0 | 0) < 1) {
  _luaL_pushresultsize($b, $0);
  STACKTOP = sp;
  return 1;
 } else $i$01 = 1;
 while (1) {
  $3 = _luaL_checkinteger($L, $i$01) | 0;
  if (($3 & 255 | 0) != ($3 | 0)) _luaL_argerror($L, $i$01, 63816) | 0;
  HEAP8[$1 + ($i$01 + -1) >> 0] = $3;
  if (($i$01 | 0) == ($0 | 0)) break; else $i$01 = $i$01 + 1 | 0;
 }
 _luaL_pushresultsize($b, $0);
 STACKTOP = sp;
 return 1;
}

function _audio_get_free_source() {
 var $$0 = 0, $0 = 0, $i$02 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $i$02 = 0;
 while (1) {
  $0 = $i$02 + 1 | 0;
  if (!(HEAP8[11028 + ($i$02 * 20 | 0) >> 0] | 0)) {
   label = 4;
   break;
  }
  if ($0 >>> 0 < 16) $i$02 = $0; else {
   label = 5;
   break;
  }
 }
 if ((label | 0) == 4) {
  $$0 = 11024 + ($i$02 * 20 | 0) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else if ((label | 0) == 5) {
  _log_internal(0, 11520, 11400, $vararg_buffer);
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $4 = 0;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $info, $adjustedPtr, $path_below); else {
  $4 = HEAP32[$this + 8 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 28 >> 2] & 31]($4, $info, $adjustedPtr, $path_below);
 }
 return;
}

function _camera_update_matrix($c, $width, $height) {
 $c = $c | 0;
 $width = $width | 0;
 $height = $height | 0;
 var $10 = 0.0, $4 = 0.0, $7 = 0.0, $8 = 0.0;
 if (!$c) ___assert_fail(23168, 13848, 48, 13880);
 if (($width | 0) <= 0) ___assert_fail(13904, 13848, 49, 13880);
 if (($height | 0) > 0) {
  $4 = +HEAPF32[$c + 12 >> 2];
  $7 = +($width | 0) / +($height | 0);
  $8 = +Math_cos(+$4);
  HEAPF32[$c + 16 >> 2] = $8;
  $10 = +Math_sin(+$4);
  HEAPF32[$c + 20 >> 2] = $7 * $10;
  HEAPF32[$c + 24 >> 2] = -$10 / $7;
  HEAPF32[$c + 28 >> 2] = $8;
  return;
 } else ___assert_fail(13920, 13848, 50, 13880);
}

function _strcmp($l, $r) {
 $l = $l | 0;
 $r = $r | 0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $6 = 0, $7 = 0;
 $0 = HEAP8[$l >> 0] | 0;
 $1 = HEAP8[$r >> 0] | 0;
 if ($0 << 24 >> 24 == 0 ? 1 : $0 << 24 >> 24 != $1 << 24 >> 24) {
  $$lcssa = $0;
  $$lcssa2 = $1;
 } else {
  $$014 = $l;
  $$05 = $r;
  do {
   $$014 = $$014 + 1 | 0;
   $$05 = $$05 + 1 | 0;
   $6 = HEAP8[$$014 >> 0] | 0;
   $7 = HEAP8[$$05 >> 0] | 0;
  } while (!($6 << 24 >> 24 == 0 ? 1 : $6 << 24 >> 24 != $7 << 24 >> 24));
  $$lcssa = $6;
  $$lcssa2 = $7;
 }
 return ($$lcssa & 255) - ($$lcssa2 & 255) | 0;
}

function _lua_setlocal($L, $ar, $n) {
 $L = $L | 0;
 $ar = $ar | 0;
 $n = $n | 0;
 var $13 = 0, $14 = 0, $2 = 0, $5 = 0, $8 = 0, $pos = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $pos = sp;
 HEAP32[$pos >> 2] = 0;
 $2 = _findlocal($L, HEAP32[$ar + 96 >> 2] | 0, $n, $pos) | 0;
 if (!$2) {
  STACKTOP = sp;
  return $2 | 0;
 }
 $5 = $L + 8 | 0;
 $8 = (HEAP32[$5 >> 2] | 0) + -8 | 0;
 $13 = HEAP32[$8 + 4 >> 2] | 0;
 $14 = HEAP32[$pos >> 2] | 0;
 HEAP32[$14 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$14 + 4 >> 2] = $13;
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -8;
 STACKTOP = sp;
 return $2 | 0;
}

function _sinhf($x) {
 $x = +$x;
 var $$ = 0.0, $$0 = 0.0, $0 = 0, $2 = 0, $3 = 0.0, $5 = 0.0;
 $0 = (HEAPF32[tempDoublePtr >> 2] = $x, HEAP32[tempDoublePtr >> 2] | 0);
 $$ = ($0 | 0) < 0 ? -.5 : .5;
 $2 = $0 & 2147483647;
 $3 = (HEAP32[tempDoublePtr >> 2] = $2, +HEAPF32[tempDoublePtr >> 2]);
 if ($2 >>> 0 >= 1118925335) {
  $$0 = $$ * 2.0 * +___expo2f($3);
  return +$$0;
 }
 $5 = +_expm1f($3);
 if ($2 >>> 0 >= 1065353216) {
  $$0 = $$ * ($5 + $5 / ($5 + 1.0));
  return +$$0;
 }
 if ($2 >>> 0 < 964689920) {
  $$0 = $x;
  return +$$0;
 }
 $$0 = $$ * ($5 * 2.0 - $5 * $5 / ($5 + 1.0));
 return +$$0;
}

function _luaF_freeproto($L, $f) {
 $L = $L | 0;
 $f = $f | 0;
 _luaM_realloc_($L, HEAP32[$f + 48 >> 2] | 0, HEAP32[$f + 20 >> 2] << 2, 0) | 0;
 _luaM_realloc_($L, HEAP32[$f + 52 >> 2] | 0, HEAP32[$f + 28 >> 2] << 2, 0) | 0;
 _luaM_realloc_($L, HEAP32[$f + 44 >> 2] | 0, HEAP32[$f + 16 >> 2] << 3, 0) | 0;
 _luaM_realloc_($L, HEAP32[$f + 56 >> 2] | 0, HEAP32[$f + 24 >> 2] << 2, 0) | 0;
 _luaM_realloc_($L, HEAP32[$f + 60 >> 2] | 0, (HEAP32[$f + 32 >> 2] | 0) * 12 | 0, 0) | 0;
 _luaM_realloc_($L, HEAP32[$f + 64 >> 2] | 0, HEAP32[$f + 12 >> 2] << 3, 0) | 0;
 _luaM_realloc_($L, $f, 80, 0) | 0;
 return;
}

function _luaK_exp2anyreg($fs, $e) {
 $fs = $fs | 0;
 $e = $e | 0;
 var $$0 = 0, $$pre$phiZ2D = 0, $7 = 0, $8 = 0;
 _luaK_dischargevars($fs, $e);
 if ((HEAP32[$e >> 2] | 0) == 7) {
  $7 = $e + 4 | 0;
  $8 = HEAP32[$7 >> 2] | 0;
  if ((HEAP32[$e + 8 >> 2] | 0) == (HEAP32[$e + 12 >> 2] | 0)) {
   $$0 = $8;
   return $$0 | 0;
  }
  if (($8 | 0) < (HEAPU8[$fs + 42 >> 0] | 0 | 0)) $$pre$phiZ2D = $7; else {
   _exp2reg($fs, $e, $8);
   $$0 = HEAP32[$7 >> 2] | 0;
   return $$0 | 0;
  }
 } else $$pre$phiZ2D = $e + 4 | 0;
 _luaK_exp2nextreg($fs, $e);
 $$0 = HEAP32[$$pre$phiZ2D >> 2] | 0;
 return $$0 | 0;
}

function _storage_store($key, $value) {
 $key = $key | 0;
 $value = $value | 0;
 var $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp;
 if (!$key) ___assert_fail(12760, 12768, 38, 12888);
 if (!$value) ___assert_fail(69560, 12768, 39, 12888); else {
  HEAP32[$vararg_buffer >> 2] = $key;
  HEAP32[$vararg_buffer + 4 >> 2] = 12920;
  HEAP32[$vararg_buffer + 8 >> 2] = $value;
  HEAP32[$vararg_buffer + 12 >> 2] = 12928;
  HEAP32[$vararg_buffer + 16 >> 2] = 0;
  _emscripten_run_script(_strjoin(12904, $vararg_buffer) | 0);
  STACKTOP = sp;
  return;
 }
}

function _png_set_sBIT($png_ptr, $info_ptr, $sig_bit) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 $sig_bit = $sig_bit | 0;
 var $3 = 0, $4 = 0;
 if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0 | ($sig_bit | 0) == 0) return;
 $3 = $info_ptr + 148 | 0;
 HEAP8[$3 + 0 >> 0] = HEAP8[$sig_bit + 0 >> 0] | 0;
 HEAP8[$3 + 1 >> 0] = HEAP8[$sig_bit + 1 >> 0] | 0;
 HEAP8[$3 + 2 >> 0] = HEAP8[$sig_bit + 2 >> 0] | 0;
 HEAP8[$3 + 3 >> 0] = HEAP8[$sig_bit + 3 >> 0] | 0;
 HEAP8[$3 + 4 >> 0] = HEAP8[$sig_bit + 4 >> 0] | 0;
 $4 = $info_ptr + 8 | 0;
 HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 return;
}

function _surface_create_fbo($s) {
 $s = $s | 0;
 var $1 = 0, $4 = 0;
 if (!$s) ___assert_fail(23264, 16096, 160, 16376);
 $1 = $s + 24 | 0;
 if (HEAP8[$1 >> 0] | 0) ___assert_fail(16400, 16096, 161, 16376);
 $4 = $s + 36 | 0;
 _glGenFramebuffers(1, $4 | 0);
 _glBindFramebuffer(36160, HEAP32[$4 >> 2] | 0);
 _glFramebufferTexture2D(36160, 36064, 3553, HEAP32[$s + 32 >> 2] | 0, 0);
 if (!(HEAP32[$4 >> 2] | 0)) ___assert_fail(16416, 16096, 167, 16376);
 if ((_glCheckFramebufferStatus(36160) | 0) == 36053) {
  HEAP8[$1 >> 0] = 1;
  return;
 } else ___assert_fail(16424, 16096, 172, 16376);
}

function _luaL_optinteger($L, $arg, $def) {
 $L = $L | 0;
 $arg = $arg | 0;
 $def = $def | 0;
 var $2 = 0, $8 = 0, $isnum$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $isnum$i = sp;
 do if ((_lua_type($L, $arg) | 0) < 1) $8 = $def; else {
  $2 = _lua_tointegerx($L, $arg, $isnum$i) | 0;
  if (!(HEAP32[$isnum$i >> 2] | 0)) if (!(_lua_isnumber($L, $arg) | 0)) {
   _typeerror($L, $arg, _lua_typename($L, 3) | 0);
   $8 = $2;
   break;
  } else {
   _luaL_argerror($L, $arg, 55720) | 0;
   $8 = $2;
   break;
  } else $8 = $2;
 } while (0);
 STACKTOP = sp;
 return $8 | 0;
}

function _checktab($L, $ta) {
 $L = $L | 0;
 $ta = $ta | 0;
 var $0 = 0;
 HEAP32[$ta >> 2] = 0;
 $0 = $ta + 4 | 0;
 HEAP32[$0 >> 2] = 0;
 if (_lua_getmetatable($L, 1) | 0) {
  _lua_pushlstring($L, 64992, 7) | 0;
  if (_lua_rawget($L, -2) | 0) HEAP32[$ta >> 2] = 17;
  _lua_pushlstring($L, 63048, 10) | 0;
  if (_lua_rawget($L, -3) | 0) HEAP32[$0 >> 2] = 7;
  _lua_settop($L, -4);
 }
 if (HEAP32[$ta >> 2] | 0) if (HEAP32[$0 >> 2] | 0) return;
 _luaL_checktype($L, 1, 5);
 if (!(HEAP32[$ta >> 2] | 0)) HEAP32[$ta >> 2] = 18;
 if (HEAP32[$0 >> 2] | 0) return;
 HEAP32[$0 >> 2] = 8;
 return;
}

function _json_encode($l) {
 $l = $l | 0;
 var $encode_buf$0 = 0, $local_encode_buf = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $local_encode_buf = sp;
 if (!(HEAP32[17297] | 0)) {
  _strbuf_init($local_encode_buf, 0);
  $encode_buf$0 = $local_encode_buf;
 } else {
  HEAP32[17286] = 0;
  $encode_buf$0 = 69136 | 0;
 }
 _json_append_data($l, 0, $encode_buf$0);
 _lua_pushlstring($l, HEAP32[$encode_buf$0 >> 2] | 0, HEAP32[$encode_buf$0 + 8 >> 2] | 0) | 0;
 if (HEAP32[17297] | 0) {
  STACKTOP = sp;
  return 1;
 }
 _strbuf_free($encode_buf$0);
 STACKTOP = sp;
 return 1;
}

function _lua_pushstring($L, $s) {
 $L = $L | 0;
 $s = $s | 0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0;
 if (!$s) {
  $1 = $L + 8 | 0;
  $2 = HEAP32[$1 >> 2] | 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$1 >> 2] = $2 + 8;
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 12 >> 2] | 0) > 0) _luaC_step($L);
 $10 = _luaS_new($L, $s) | 0;
 $11 = $L + 8 | 0;
 $12 = HEAP32[$11 >> 2] | 0;
 HEAP32[$12 >> 2] = $10;
 HEAP32[$12 + 4 >> 2] = HEAPU8[$10 + 4 >> 0] | 0 | 64;
 HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 8;
 $$0 = $10 + 24 | 0;
 return $$0 | 0;
}

function _db_upvaluejoin($L) {
 $L = $L | 0;
 var $0 = 0, $3 = 0;
 $0 = _luaL_checkinteger($L, 2) | 0;
 _luaL_checktype($L, 1, 6);
 if (!(_lua_getupvalue($L, 1, $0) | 0)) _luaL_argerror($L, 2, 66640) | 0;
 $3 = _luaL_checkinteger($L, 4) | 0;
 _luaL_checktype($L, 3, 6);
 if (!(_lua_getupvalue($L, 3, $3) | 0)) _luaL_argerror($L, 4, 66640) | 0;
 if (_lua_iscfunction($L, 1) | 0) _luaL_argerror($L, 1, 66664) | 0;
 if (!(_lua_iscfunction($L, 3) | 0)) {
  _lua_upvaluejoin($L, 1, $0, 3, $3);
  return 0;
 }
 _luaL_argerror($L, 3, 66664) | 0;
 _lua_upvaluejoin($L, 1, $0, 3, $3);
 return 0;
}

function _display_draw_point_tex($sx, $sy, $x, $y, $size) {
 $sx = +$sx;
 $sy = +$sy;
 $x = +$x;
 $y = +$y;
 $size = +$size;
 var $2 = 0, $3 = 0;
 if (!(HEAP32[4529] | 0)) ___assert_fail(18976, 18224, 609, 19e3); else {
  $2 = HEAP32[4530] | 0;
  _buffer_check_type($2, 1);
  _buffer_check_use_texture($2);
  _buffer_check_not_full($2);
  _buffer_push_vertex($2, $x, $y);
  _buffer_push_tex_coord($2, $sx, $sy);
  _buffer_push_point_size($2, $size);
  $3 = HEAP32[4531] | 0;
  _buffer_push_color($2, $3 & 255, ($3 & 65535) >>> 8 & 255, $3 >>> 16 & 255, $3 >>> 24 & 255);
  return;
 }
}

function __ZN15b2ContactFilter13ShouldCollideEP9b2FixtureS1_($this, $fixtureA, $fixtureB) {
 $this = $this | 0;
 $fixtureA = $fixtureA | 0;
 $fixtureB = $fixtureB | 0;
 var $$0 = 0, $1 = 0;
 $1 = HEAP16[$fixtureA + 36 >> 1] | 0;
 if (!($1 << 16 >> 16 == 0 ? 1 : $1 << 16 >> 16 != (HEAP16[$fixtureB + 36 >> 1] | 0))) {
  $$0 = $1 << 16 >> 16 > 0;
  return $$0 | 0;
 }
 if (!((HEAP16[$fixtureB + 32 >> 1] & HEAP16[$fixtureA + 34 >> 1]) << 16 >> 16)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $$0 = (HEAP16[$fixtureB + 34 >> 1] & HEAP16[$fixtureA + 32 >> 1]) << 16 >> 16 != 0;
 return $$0 | 0;
}

function _luaL_addvalue($B) {
 $B = $B | 0;
 var $1 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $l = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $l = sp;
 $1 = HEAP32[$B + 12 >> 2] | 0;
 $2 = _lua_tolstring($1, -1, $l) | 0;
 $4 = $B + 16 | 0;
 if ((HEAP32[$B >> 2] | 0) != ($4 | 0)) _lua_rotate($1, -2, 1);
 $6 = HEAP32[$l >> 2] | 0;
 _memcpy(_luaL_prepbuffsize($B, $6) | 0, $2 | 0, $6 | 0) | 0;
 $8 = $B + 8 | 0;
 HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + $6;
 _lua_rotate($1, (HEAP32[$B >> 2] | 0) != ($4 | 0) ? -2 : -1, -1);
 _lua_settop($1, -2);
 STACKTOP = sp;
 return;
}

function _luaL_where($L, $level) {
 $L = $L | 0;
 $level = $level | 0;
 var $3 = 0, $ar = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $vararg_buffer = sp;
 $ar = sp + 8 | 0;
 if (_lua_getstack($L, $level, $ar) | 0) {
  _lua_getinfo($L, 55248, $ar) | 0;
  $3 = HEAP32[$ar + 20 >> 2] | 0;
  if (($3 | 0) > 0) {
   HEAP32[$vararg_buffer >> 2] = $ar + 36;
   HEAP32[$vararg_buffer + 4 >> 2] = $3;
   _lua_pushfstring($L, 55256, $vararg_buffer) | 0;
   STACKTOP = sp;
   return;
  }
 }
 _lua_pushlstring($L, 62584, 0) | 0;
 STACKTOP = sp;
 return;
}
function _lua_settop($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $13 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, $9$looptemp = 0;
 if (($idx | 0) <= -1) {
  $13 = $L + 8 | 0;
  HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + ($idx + 1 << 3);
  return;
 }
 $4 = $L + 8 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = (HEAP32[HEAP32[$L + 16 >> 2] >> 2] | 0) + ($idx + 1 << 3) | 0;
 if ($5 >>> 0 < $6 >>> 0) {
  $9 = $5;
  do {
   $9$looptemp = $9;
   $9 = $9 + 8 | 0;
   HEAP32[$9$looptemp + 4 >> 2] = 0;
  } while ($9 >>> 0 < $6 >>> 0);
  HEAP32[$4 >> 2] = $9;
 }
 HEAP32[$4 >> 2] = $6;
 return;
}

function _png_read_filter_row_sub($row_info, $row, $prev_row) {
 $row_info = $row_info | 0;
 $row = $row | 0;
 $prev_row = $prev_row | 0;
 var $1 = 0, $6 = 0, $9 = 0, $i$01 = 0, $rp$02 = 0;
 $1 = HEAP32[$row_info + 4 >> 2] | 0;
 $6 = ((HEAPU8[$row_info + 11 >> 0] | 0) + 7 | 0) >>> 3;
 if ($6 >>> 0 >= $1 >>> 0) return;
 $9 = 0 - $6 | 0;
 $i$01 = $6;
 $rp$02 = $row + $6 | 0;
 while (1) {
  HEAP8[$rp$02 >> 0] = (HEAPU8[$rp$02 + $9 >> 0] | 0) + (HEAPU8[$rp$02 >> 0] | 0);
  $i$01 = $i$01 + 1 | 0;
  if (($i$01 | 0) == ($1 | 0)) break; else $rp$02 = $rp$02 + 1 | 0;
 }
 return;
}

function _luaD_growstack($L, $n) {
 $L = $L | 0;
 $n = $n | 0;
 var $$ = 0, $$$ = 0, $1 = 0, $12 = 0, $13 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = HEAP32[$L + 92 >> 2] | 0;
 if (($1 | 0) > 1e6) _luaD_throw($L, 6);
 $12 = $n + 5 + ((HEAP32[$L + 8 >> 2] | 0) - (HEAP32[$L + 28 >> 2] | 0) >> 3) | 0;
 $13 = $1 << 1;
 $$ = ($13 | 0) > 1e6 ? 1e6 : $13;
 $$$ = ($$ | 0) < ($12 | 0) ? $12 : $$;
 if (($$$ | 0) > 1e6) {
  _luaD_reallocstack($L, 1000200);
  _luaG_runerror($L, 56208, sp);
 } else {
  _luaD_reallocstack($L, $$$);
  STACKTOP = sp;
  return;
 }
}

function _png_error($png_ptr, $error_message) {
 $png_ptr = $png_ptr | 0;
 $error_message = $error_message | 0;
 var $2 = 0, $4 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 if ($png_ptr) {
  $2 = HEAP32[$png_ptr + 168 >> 2] | 0;
  if ($2) FUNCTION_TABLE_vii[$2 & 127]($png_ptr, $error_message);
 }
 $4 = HEAP32[_stderr >> 2] | 0;
 HEAP32[$vararg_buffer >> 2] = ($error_message | 0) != 0 ? $error_message : 74312;
 _fprintf($4 | 0, 74288, $vararg_buffer | 0) | 0;
 _fputc(10, $4 | 0) | 0;
 _png_longjmp($png_ptr, 1);
}

function _png_do_swap($row_info, $row) {
 $row_info = $row_info | 0;
 $row = $row | 0;
 var $10 = 0, $7 = 0, $9 = 0, $i$01 = 0, $rp$02 = 0;
 if ((HEAP8[$row_info + 9 >> 0] | 0) != 16) return;
 $7 = Math_imul(HEAPU8[$row_info + 10 >> 0] | 0, HEAP32[$row_info >> 2] | 0) | 0;
 if (!$7) return; else {
  $i$01 = 0;
  $rp$02 = $row;
 }
 while (1) {
  $9 = HEAP8[$rp$02 >> 0] | 0;
  $10 = $rp$02 + 1 | 0;
  HEAP8[$rp$02 >> 0] = HEAP8[$10 >> 0] | 0;
  HEAP8[$10 >> 0] = $9;
  $i$01 = $i$01 + 1 | 0;
  if (($i$01 | 0) == ($7 | 0)) break; else $rp$02 = $rp$02 + 2 | 0;
 }
 return;
}

function _luaT_gettmbyobj($L, $o, $event) {
 $L = $L | 0;
 $o = $o | 0;
 $event = $event | 0;
 var $16 = 0, $2 = 0, $mt$0 = 0, $mt$0$in = 0;
 $2 = HEAP32[$o + 4 >> 2] & 15;
 if (($2 | 0) == 7) $mt$0$in = (HEAP32[$o >> 2] | 0) + 8 | 0; else if (($2 | 0) == 5) $mt$0$in = (HEAP32[$o >> 2] | 0) + 24 | 0; else $mt$0$in = (HEAP32[$L + 12 >> 2] | 0) + ($2 << 2) + 232 | 0;
 $mt$0 = HEAP32[$mt$0$in >> 2] | 0;
 if (!$mt$0) {
  $16 = 59168;
  return $16 | 0;
 }
 $16 = _luaH_getstr($mt$0, HEAP32[(HEAP32[$L + 12 >> 2] | 0) + ($event << 2) + 136 >> 2] | 0) | 0;
 return $16 | 0;
}

function __ZN19CustomQueryCallback13ReportFixtureEP9b2Fixture($this, $fixture) {
 $this = $this | 0;
 $fixture = $fixture | 0;
 var $4 = 0, $5 = 0, $7 = 0;
 if (!$fixture) ___assert_fail(3832, 2472, 407, 3840); else {
  $4 = HEAP32[(HEAP32[$fixture + 8 >> 2] | 0) + 148 >> 2] | 0;
  $5 = $this + 4 | 0;
  $7 = $this + 8 | 0;
  _lua_pushnumber(HEAP32[$5 >> 2] | 0, +((HEAP32[$7 >> 2] | 0) >>> 0));
  __Z9push_bodyP9lua_StateP4Body(HEAP32[$5 >> 2] | 0, $4);
  _lua_settable(HEAP32[$5 >> 2] | 0, -3);
  HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1;
  return 1;
 }
 return 0;
}

function _b_replace($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = _luaL_checkinteger($L, 1) | 0;
 $1 = _luaL_checkinteger($L, 2) | 0;
 $2 = _luaL_checkinteger($L, 3) | 0;
 $3 = _luaL_optinteger($L, 4, 1) | 0;
 if (($2 | 0) <= -1) _luaL_argerror($L, 3, 65392) | 0;
 if (($3 | 0) <= 0) _luaL_argerror($L, 4, 65424) | 0;
 if (($3 + $2 | 0) > 32) _luaL_error($L, 65448, sp) | 0;
 $10 = ~(-2 << $3 + -1);
 _lua_pushinteger($L, $0 & ~($10 << $2) | ($1 & $10) << $2);
 STACKTOP = sp;
 return 1;
}

function _display_draw_quad($xi1, $yi1, $xi2, $yi2, $xi3, $yi3, $xi4, $yi4, $xo1, $yo1, $xo2, $yo2, $xo3, $yo3, $xo4, $yo4) {
 $xi1 = +$xi1;
 $yi1 = +$yi1;
 $xi2 = +$xi2;
 $yi2 = +$yi2;
 $xi3 = +$xi3;
 $yi3 = +$yi3;
 $xi4 = +$xi4;
 $yi4 = +$yi4;
 $xo1 = +$xo1;
 $yo1 = +$yo1;
 $xo2 = +$xo2;
 $yo2 = +$yo2;
 $xo3 = +$xo3;
 $yo3 = +$yo3;
 $xo4 = +$xo4;
 $yo4 = +$yo4;
 _display_draw_surface($xi1, $yi1, $xi2, $yi2, $xi3, $yi3, $xo1, $yo1, $xo2, $yo2, $xo3, $yo3);
 _display_draw_surface($xi1, $yi1, $xi3, $yi3, $xi4, $yi4, $xo1, $yo1, $xo3, $yo3, $xo4, $yo4);
 return;
}

function _generic_reader($L, $ud, $size) {
 $L = $L | 0;
 $ud = $ud | 0;
 $size = $size | 0;
 var $$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 _luaL_checkstack($L, 2, 64920);
 _lua_pushvalue($L, 1);
 _lua_callk($L, 0, 1, 0, 0);
 if (!(_lua_type($L, -1) | 0)) {
  _lua_settop($L, -2);
  HEAP32[$size >> 2] = 0;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!(_lua_isstring($L, -1) | 0)) _luaL_error($L, 64952, sp) | 0;
 _lua_copy($L, -1, 5);
 _lua_settop($L, -2);
 $$0 = _lua_tolstring($L, 5, $size) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _pushglobalfuncname($L, $ar) {
 $L = $L | 0;
 $ar = $ar | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $4 = 0;
 $0 = _lua_gettop($L) | 0;
 _lua_getinfo($L, 58712, $ar) | 0;
 _lua_getfield($L, -1001e3, 58536) | 0;
 $1 = $0 + 1 | 0;
 if (!(_findfield1386($L, $1, 2) | 0)) {
  _lua_settop($L, $0);
  $$0 = 0;
  return $$0 | 0;
 }
 $4 = _lua_tolstring($L, -1, 0) | 0;
 if (!(_strncmp($4, 55800, 3) | 0)) {
  _lua_pushstring($L, $4 + 3 | 0) | 0;
  _lua_rotate($L, -2, -1);
  _lua_settop($L, -2);
 }
 _lua_copy($L, -1, $1);
 _lua_settop($L, -3);
 $$0 = 1;
 return $$0 | 0;
}

function __Z30mlua_set_max_length_rope_jointP9lua_State($L) {
 $L = $L | 0;
 var $1 = 0, $2 = 0, $5 = 0, $8 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!$L) ___assert_fail(23976, 4112, 119, 4600);
 $1 = __Z9pop_jointP9lua_Statei($L, 1) | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!$2) {
  _luaL_error($L, 4440, sp) | 0;
  $5 = HEAP32[$1 >> 2] | 0;
 } else $5 = $2;
 if ((HEAP32[$5 + 4 >> 2] | 0) != 10) _luaL_error($L, 4952, sp + 8 | 0) | 0;
 $8 = +_luaL_checknumber($L, 2);
 HEAPF32[$5 + 84 >> 2] = $8 / +HEAPF32[616];
 STACKTOP = sp;
 return 0;
}

function __Z30mlua_set_length_distance_jointP9lua_State($L) {
 $L = $L | 0;
 var $1 = 0, $2 = 0, $5 = 0, $8 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!$L) ___assert_fail(23976, 4112, 99, 4528);
 $1 = __Z9pop_jointP9lua_Statei($L, 1) | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!$2) {
  _luaL_error($L, 4440, sp) | 0;
  $5 = HEAP32[$1 >> 2] | 0;
 } else $5 = $2;
 if ((HEAP32[$5 + 4 >> 2] | 0) != 3) _luaL_error($L, 4992, sp + 8 | 0) | 0;
 $8 = +_luaL_checknumber($L, 2);
 HEAPF32[$5 + 104 >> 2] = $8 / +HEAPF32[616];
 STACKTOP = sp;
 return 0;
}

function __ZN9b2Fixture14DestroyProxiesEP12b2BroadPhase($this, $broadPhase) {
 $this = $this | 0;
 $broadPhase = $broadPhase | 0;
 var $0 = 0, $3 = 0, $5 = 0, $i$01 = 0;
 $0 = $this + 28 | 0;
 if ((HEAP32[$0 >> 2] | 0) <= 0) {
  HEAP32[$0 >> 2] = 0;
  return;
 }
 $3 = $this + 24 | 0;
 $i$01 = 0;
 do {
  $5 = (HEAP32[$3 >> 2] | 0) + ($i$01 * 28 | 0) + 24 | 0;
  __ZN12b2BroadPhase12DestroyProxyEi($broadPhase, HEAP32[$5 >> 2] | 0);
  HEAP32[$5 >> 2] = -1;
  $i$01 = $i$01 + 1 | 0;
 } while (($i$01 | 0) < (HEAP32[$0 >> 2] | 0));
 HEAP32[$0 >> 2] = 0;
 return;
}

function _luaS_hash($str, $l, $seed) {
 $str = $str | 0;
 $l = $l | 0;
 $seed = $seed | 0;
 var $0 = 0, $12 = 0, $2 = 0, $h$0$lcssa = 0, $h$02 = 0, $l1$01 = 0;
 $0 = $seed ^ $l;
 $2 = ($l >>> 5) + 1 | 0;
 if ($2 >>> 0 > $l >>> 0) {
  $h$0$lcssa = $0;
  return $h$0$lcssa | 0;
 } else {
  $h$02 = $0;
  $l1$01 = $l;
 }
 while (1) {
  $12 = ($h$02 << 5) + ($h$02 >>> 2) + (HEAPU8[$str + ($l1$01 + -1) >> 0] | 0) ^ $h$02;
  $l1$01 = $l1$01 - $2 | 0;
  if ($l1$01 >>> 0 < $2 >>> 0) {
   $h$0$lcssa = $12;
   break;
  } else $h$02 = $12;
 }
 return $h$0$lcssa | 0;
}

function __ZN16b2BlockAllocatorD2Ev($this) {
 $this = $this | 0;
 var $$lcssa = 0, $0 = 0, $10 = 0, $3 = 0, $5 = 0, $i$01 = 0;
 $0 = $this + 4 | 0;
 $3 = HEAP32[$this >> 2] | 0;
 if ((HEAP32[$0 >> 2] | 0) > 0) {
  $5 = $3;
  $i$01 = 0;
 } else {
  $$lcssa = $3;
  __Z6b2FreePv($$lcssa);
  return;
 }
 while (1) {
  __Z6b2FreePv(HEAP32[$5 + ($i$01 << 3) + 4 >> 2] | 0);
  $i$01 = $i$01 + 1 | 0;
  $10 = HEAP32[$this >> 2] | 0;
  if (($i$01 | 0) >= (HEAP32[$0 >> 2] | 0)) {
   $$lcssa = $10;
   break;
  } else $5 = $10;
 }
 __Z6b2FreePv($$lcssa);
 return;
}

function _display_draw_line($x1, $y1, $x2, $y2) {
 $x1 = +$x1;
 $y1 = +$y1;
 $x2 = +$x2;
 $y2 = +$y2;
 var $0 = 0, $1 = 0, $3 = 0, $5 = 0, $7 = 0, $9 = 0;
 $0 = HEAP32[4530] | 0;
 $1 = HEAP32[4531] | 0;
 $3 = $1 & 255;
 $5 = ($1 & 65535) >>> 8 & 255;
 $7 = $1 >>> 16 & 255;
 $9 = $1 >>> 24 & 255;
 _buffer_check_type($0, 2);
 _buffer_check_not_use_texture($0);
 _buffer_check_not_full($0);
 _buffer_push_vertex($0, $x1, $y1);
 _buffer_push_vertex($0, $x2, $y2);
 _buffer_push_color($0, $3, $5, $7, $9);
 _buffer_push_color($0, $3, $5, $7, $9);
 return;
}

function _luaK_setoneret($fs, $e) {
 $fs = $fs | 0;
 $e = $e | 0;
 var $0 = 0, $1 = 0, $15 = 0;
 $0 = HEAP32[$e >> 2] | 0;
 if (($0 | 0) == 14) {
  $15 = (HEAP32[(HEAP32[$fs >> 2] | 0) + 48 >> 2] | 0) + (HEAP32[$e + 4 >> 2] << 2) | 0;
  HEAP32[$15 >> 2] = HEAP32[$15 >> 2] & 8388607 | 16777216;
  HEAP32[$e >> 2] = 12;
  return;
 } else if (($0 | 0) == 13) {
  HEAP32[$e >> 2] = 7;
  $1 = $e + 4 | 0;
  HEAP32[$1 >> 2] = (HEAP32[(HEAP32[(HEAP32[$fs >> 2] | 0) + 48 >> 2] | 0) + (HEAP32[$1 >> 2] << 2) >> 2] | 0) >>> 6 & 255;
  return;
 } else return;
}

function __Znwj($size) {
 $size = $size | 0;
 var $$lcssa = 0, $$size = 0, $1 = 0, $3 = 0, $5 = 0, label = 0;
 $$size = ($size | 0) == 0 ? 1 : $size;
 while (1) {
  $1 = _malloc($$size) | 0;
  if ($1) {
   $$lcssa = $1;
   label = 6;
   break;
  }
  $3 = __ZSt15get_new_handlerv() | 0;
  if (!$3) {
   label = 5;
   break;
  }
  FUNCTION_TABLE_v[$3 & 7]();
 }
 if ((label | 0) == 5) {
  $5 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$5 >> 2] = 106144;
  ___cxa_throw($5 | 0, 106192, 73);
 } else if ((label | 0) == 6) return $$lcssa | 0;
 return 0;
}

function __ZN13b2PulleyJoint11ShiftOriginERK6b2Vec2($this, $newOrigin) {
 $this = $this | 0;
 $newOrigin = $newOrigin | 0;
 var $1 = 0, $10 = 0, $14 = 0, $4 = 0, $6 = 0;
 $1 = $this + 68 | 0;
 HEAPF32[$1 >> 2] = +HEAPF32[$1 >> 2] - +HEAPF32[$newOrigin >> 2];
 $4 = $newOrigin + 4 | 0;
 $6 = $this + 72 | 0;
 HEAPF32[$6 >> 2] = +HEAPF32[$6 >> 2] - +HEAPF32[$4 >> 2];
 $10 = $this + 76 | 0;
 HEAPF32[$10 >> 2] = +HEAPF32[$10 >> 2] - +HEAPF32[$newOrigin >> 2];
 $14 = $this + 80 | 0;
 HEAPF32[$14 >> 2] = +HEAPF32[$14 >> 2] - +HEAPF32[$4 >> 2];
 return;
}

function _luaV_div($L, $m, $n) {
 $L = $L | 0;
 $m = $m | 0;
 $n = $n | 0;
 var $$0 = 0, $4 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 if (($n + 1 | 0) >>> 0 >= 2) {
  $4 = ($m | 0) / ($n | 0) | 0;
  if (($n ^ $m | 0) < 0) {
   STACKTOP = sp;
   return (((($m | 0) % ($n | 0) | 0 | 0) != 0) << 31 >> 31) + $4 | 0;
  } else {
   $$0 = $4;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 if (!$n) _luaG_runerror($L, 64080, $vararg_buffer);
 $$0 = 0 - $m | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _mlua_reset_buffer($L) {
 $L = $L | 0;
 var $$0 = 0, $1 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!$L) ___assert_fail(23976, 19560, 79, 19728);
 $1 = _pop_buffer($L, 1) | 0;
 if (!(HEAP32[$1 + 24 >> 2] | 0)) {
  $$0 = _luaL_error($L, 19752, sp) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!$1) ___assert_fail(23160, 19880, 97, 19912);
 $5 = $1 + 40 | 0;
 HEAP32[$5 + 0 >> 2] = 0;
 HEAP32[$5 + 4 >> 2] = 0;
 HEAP32[$5 + 8 >> 2] = 0;
 HEAP32[$5 + 12 >> 2] = 0;
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _display_set_fullscreen($fullscreen) {
 $fullscreen = $fullscreen | 0;
 var $3 = 0, $h = 0, $w = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $w = sp + 4 | 0;
 $h = sp;
 if ($fullscreen) {
  _emscripten_run_script(18352);
  _SDL_GetWindowSize(HEAP32[4523] | 0, $w | 0, $h | 0);
  $3 = _display_new_surface(HEAP32[$w >> 2] | 0, HEAP32[$h >> 2] | 0, 1) | 0;
  HEAP32[4525] = $3;
  _display_draw_on($3);
  STACKTOP = sp;
  return;
 } else {
  _display_resize(HEAP32[4533] | 0, HEAP32[4534] | 0);
  STACKTOP = sp;
  return;
 }
}

function _stb_vorbis_open_filename($filename, $error, $alloc) {
 $filename = $filename | 0;
 $error = $error | 0;
 $alloc = $alloc | 0;
 var $$0 = 0, $0 = 0, $2 = 0, $4 = 0;
 $0 = _fopen($filename | 0, 80904) | 0;
 if ($0) {
  $2 = _ftell($0 | 0) | 0;
  _fseek($0 | 0, 0, 2) | 0;
  $4 = (_ftell($0 | 0) | 0) - $2 | 0;
  _fseek($0 | 0, $2 | 0, 0) | 0;
  $$0 = _stb_vorbis_open_file_section($0, 1, $error, $alloc, $4) | 0;
  return $$0 | 0;
 }
 if (!$error) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP32[$error >> 2] = 6;
 $$0 = 0;
 return $$0 | 0;
}

function __Z20mlua_set_bullet_bodyP9lua_State($L) {
 $L = $L | 0;
 var $1 = 0, $2 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!$L) ___assert_fail(23976, 5248, 92, 5416);
 $1 = __Z8pop_bodyP9lua_Statei($L, 1) | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!$2) {
  _luaL_error($L, 5336, sp) | 0;
  $7 = HEAP32[$1 >> 2] | 0;
 } else $7 = $2;
 $5 = (_lua_toboolean($L, 2) | 0) != 0;
 $6 = $7 + 4 | 0;
 $9 = HEAPU16[$6 >> 1] | 0;
 HEAP16[$6 >> 1] = $5 ? $9 | 8 : $9 & 65527;
 STACKTOP = sp;
 return 0;
}

function _stb_vorbis_get_info($agg$result, $f) {
 $agg$result = $agg$result | 0;
 $f = $f | 0;
 var $1 = 0, $11 = 0, $4 = 0, $6 = 0, $8 = 0;
 $1 = HEAP32[$f + 4 >> 2] | 0;
 $4 = HEAP32[$f + 8 >> 2] | 0;
 $6 = HEAP32[$f + 16 >> 2] | 0;
 $8 = HEAP32[$f + 12 >> 2] | 0;
 $11 = HEAP32[$f + 132 >> 2] >> 1;
 HEAP32[$agg$result >> 2] = HEAP32[$f >> 2];
 HEAP32[$agg$result + 4 >> 2] = $1;
 HEAP32[$agg$result + 8 >> 2] = $4;
 HEAP32[$agg$result + 12 >> 2] = $6;
 HEAP32[$agg$result + 16 >> 2] = $8;
 HEAP32[$agg$result + 20 >> 2] = $11;
 return;
}

function _luaZ_fill($z) {
 $z = $z | 0;
 var $$0 = 0, $6 = 0, $8 = 0, $size = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $size = sp;
 $6 = FUNCTION_TABLE_iiii[HEAP32[$z + 8 >> 2] & 31](HEAP32[$z + 16 >> 2] | 0, HEAP32[$z + 12 >> 2] | 0, $size) | 0;
 if (!$6) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $8 = HEAP32[$size >> 2] | 0;
 if (!$8) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[$z >> 2] = $8 + -1;
 HEAP32[$z + 4 >> 2] = $6 + 1;
 $$0 = HEAPU8[$6 >> 0] | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _dlua_reload_code() {
 var $0 = 0, $8 = 0;
 $0 = HEAP32[16] | 0;
 if (!$0) ___assert_fail(23976, 128, 281, 264);
 _lua_rawgeti($0, -1001e3, HEAP32[18] | 0) | 0;
 _lua_pushstring($0, 288) | 0;
 _lua_rawget($0, -2) | 0;
 _lua_rotate($0, (_lua_gettop($0) | 0) + -1 | 0, -1);
 _lua_settop($0, -2);
 if ((_lua_type($0, -1) | 0) == 6) {
  _call_lua_function($0, 0, 1);
  $8 = (_lua_toboolean($0, -1) | 0) != 0;
  _lua_settop($0, -2);
  return $8 | 0;
 } else {
  _lua_settop($0, -2);
  ___assert_fail(296, 128, 283, 264);
 }
 return 0;
}

function _luaH_getstr($t, $key) {
 $t = $t | 0;
 $key = $key | 0;
 var $$0 = 0, $18 = 0, $n$0 = 0, label = 0;
 $n$0 = (HEAP32[$t + 16 >> 2] | 0) + (((1 << (HEAPU8[$t + 7 >> 0] | 0)) + -1 & HEAP32[$key + 8 >> 2]) * 20 | 0) | 0;
 while (1) {
  if ((HEAP32[$n$0 + 12 >> 2] | 0) == 68) if ((HEAP32[$n$0 + 8 >> 2] | 0) == ($key | 0)) break;
  $18 = HEAP32[$n$0 + 16 >> 2] | 0;
  if (!$18) {
   $$0 = 59168;
   label = 7;
   break;
  }
  $n$0 = $n$0 + ($18 * 20 | 0) | 0;
 }
 if ((label | 0) == 7) return $$0 | 0;
 $$0 = $n$0;
 return $$0 | 0;
}

function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $info, $dst_ptr, $current_ptr, $path_below);
 return;
}

function _luaO_utf8esc($buff, $x) {
 $buff = $buff | 0;
 $x = $x | 0;
 var $$0 = 0, $6 = 0, $mfb$0 = 0, $n$0 = 0, $n$1 = 0;
 if ($x >>> 0 < 128) {
  HEAP8[$buff + 7 >> 0] = $x;
  $n$1 = 1;
  return $n$1 | 0;
 } else {
  $$0 = $x;
  $mfb$0 = 63;
  $n$0 = 1;
 }
 while (1) {
  $6 = $n$0 + 1 | 0;
  HEAP8[$buff + (8 - $n$0) >> 0] = $$0 & 63 | 128;
  $$0 = $$0 >>> 6;
  $mfb$0 = $mfb$0 >>> 1;
  if ($$0 >>> 0 <= $mfb$0 >>> 0) break; else $n$0 = $6;
 }
 HEAP8[$buff + (7 - $n$0) >> 0] = $mfb$0 << 1 ^ 254 | $$0;
 $n$1 = $6;
 return $n$1 | 0;
}

function _png_read_filter_row_up($row_info, $row, $prev_row) {
 $row_info = $row_info | 0;
 $row = $row | 0;
 $prev_row = $prev_row | 0;
 var $1 = 0, $i$01 = 0, $pp$03 = 0, $rp$02 = 0;
 $1 = HEAP32[$row_info + 4 >> 2] | 0;
 if (!$1) return; else {
  $i$01 = 0;
  $pp$03 = $prev_row;
  $rp$02 = $row;
 }
 while (1) {
  HEAP8[$rp$02 >> 0] = (HEAPU8[$pp$03 >> 0] | 0) + (HEAPU8[$rp$02 >> 0] | 0);
  $i$01 = $i$01 + 1 | 0;
  if (($i$01 | 0) == ($1 | 0)) break; else {
   $pp$03 = $pp$03 + 1 | 0;
   $rp$02 = $rp$02 + 1 | 0;
  }
 }
 return;
}

function _buffer_check_type($b, $atype) {
 $b = $b | 0;
 $atype = $atype | 0;
 var $3 = 0, $5 = 0;
 if (!$b) ___assert_fail(23160, 22016, 142, 22064);
 if ((HEAP32[$b >> 2] | 0) == ($atype | 0)) return;
 _buffer_draw($b, 0.0, 0.0);
 $3 = $b + 40 | 0;
 HEAP32[$3 + 0 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = 0;
 HEAP32[$3 + 12 >> 2] = 0;
 HEAP32[$b >> 2] = $atype;
 if (($atype | 0) != 1) return;
 $5 = $b + 36 | 0;
 if (HEAP32[$5 >> 2] | 0) return;
 HEAP32[$5 >> 2] = _xmalloc(HEAP32[$b + 4 >> 2] << 2) | 0;
 return;
}

function __ZNK16b2PrismaticJoint16GetReactionForceEf($agg$result, $this, $inv_dt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 var $1 = 0.0, $12 = 0.0, $22 = 0.0;
 $1 = +HEAPF32[$this + 104 >> 2];
 $12 = +HEAPF32[$this + 116 >> 2] + +HEAPF32[$this + 112 >> 2];
 $22 = ($1 * +HEAPF32[$this + 196 >> 2] + $12 * +HEAPF32[$this + 188 >> 2]) * $inv_dt;
 HEAPF32[$agg$result >> 2] = ($1 * +HEAPF32[$this + 192 >> 2] + +HEAPF32[$this + 184 >> 2] * $12) * $inv_dt;
 HEAPF32[$agg$result + 4 >> 2] = $22;
 return;
}

function _system_add_size($s, $at, $min, $max) {
 $s = $s | 0;
 $at = +$at;
 $min = +$min;
 $max = +$max;
 var $1 = 0, $2 = 0;
 if (!$s) ___assert_fail(23264, 10392, 207, 10560);
 $1 = $s + 4 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (($2 | 0) == 16) ___assert_fail(10576, 10392, 208, 10560); else {
  HEAPF32[$s + ($2 * 12 | 0) + 8 >> 2] = $at;
  HEAPF32[$s + ((HEAP32[$1 >> 2] | 0) * 12 | 0) + 12 >> 2] = $min;
  HEAPF32[$s + ((HEAP32[$1 >> 2] | 0) * 12 | 0) + 16 >> 2] = $max;
  HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + 1;
  return;
 }
}

function _luaB_loadfile($L) {
 $L = $L | 0;
 var $$0$i = 0, $0 = 0, $1 = 0, $3 = 0;
 $0 = _luaL_optlstring($L, 1, 0, 0) | 0;
 $1 = _luaL_optlstring($L, 2, 0, 0) | 0;
 $3 = (_lua_type($L, 3) | 0) != -1;
 if (_luaL_loadfilex($L, $0, $1) | 0) {
  _lua_pushnil($L);
  _lua_rotate($L, -2, 1);
  $$0$i = 2;
  return $$0$i | 0;
 }
 if (!$3) {
  $$0$i = 1;
  return $$0$i | 0;
 }
 _lua_pushvalue($L, $3 ? 3 : 0);
 if (_lua_setupvalue($L, -2, 1) | 0) {
  $$0$i = 1;
  return $$0$i | 0;
 }
 _lua_settop($L, -2);
 $$0$i = 1;
 return $$0$i | 0;
}

function __Z15mlua_free_jointP9lua_State($L) {
 $L = $L | 0;
 var $0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = 4112;
 HEAP32[$vararg_buffer + 4 >> 2] = 276;
 HEAP32[$vararg_buffer + 8 >> 2] = 4712;
 _log_internal(3, 4760, 20912, $vararg_buffer);
 $0 = __Z9pop_jointP9lua_Statei($L, 1) | 0;
 if (HEAP32[$0 >> 2] | 0) _luaL_error($L, 4728, sp + 16 | 0) | 0;
 if (!$0) {
  STACKTOP = sp;
  return 0;
 }
 __ZdlPv($0);
 STACKTOP = sp;
 return 0;
}

function _calloc($n_elements, $elem_size) {
 $n_elements = $n_elements | 0;
 $elem_size = $elem_size | 0;
 var $1 = 0, $6 = 0, $req$0 = 0;
 if (!$n_elements) $req$0 = 0; else {
  $1 = Math_imul($elem_size, $n_elements) | 0;
  if (($elem_size | $n_elements) >>> 0 > 65535) $req$0 = (($1 >>> 0) / ($n_elements >>> 0) | 0 | 0) == ($elem_size | 0) ? $1 : -1; else $req$0 = $1;
 }
 $6 = _malloc($req$0) | 0;
 if (!$6) return $6 | 0;
 if (!(HEAP32[$6 + -4 >> 2] & 3)) return $6 | 0;
 _memset($6 | 0, 0, $req$0 | 0) | 0;
 return $6 | 0;
}

function __Z14mlua_free_bodyP9lua_State($L) {
 $L = $L | 0;
 var $0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = 5248;
 HEAP32[$vararg_buffer + 4 >> 2] = 213;
 HEAP32[$vararg_buffer + 8 >> 2] = 5688;
 _log_internal(3, 5296, 20912, $vararg_buffer);
 $0 = __Z8pop_bodyP9lua_Statei($L, 1) | 0;
 if (HEAP32[$0 >> 2] | 0) _luaL_error($L, 5704, sp + 16 | 0) | 0;
 if (!$0) {
  STACKTOP = sp;
  return 0;
 }
 __ZdlPv($0);
 STACKTOP = sp;
 return 0;
}

function _luaK_exp2val($fs, $e) {
 $fs = $fs | 0;
 $e = $e | 0;
 var $0 = 0, $11 = 0, $2 = 0;
 $0 = $e + 8 | 0;
 $2 = $e + 12 | 0;
 if ((HEAP32[$0 >> 2] | 0) == (HEAP32[$2 >> 2] | 0)) {
  _luaK_dischargevars($fs, $e);
  return;
 }
 _luaK_dischargevars($fs, $e);
 if ((HEAP32[$e >> 2] | 0) == 7) {
  $11 = HEAP32[$e + 4 >> 2] | 0;
  if ((HEAP32[$0 >> 2] | 0) == (HEAP32[$2 >> 2] | 0)) return;
  if (($11 | 0) >= (HEAPU8[$fs + 42 >> 0] | 0 | 0)) {
   _exp2reg($fs, $e, $11);
   return;
  }
 }
 _luaK_exp2nextreg($fs, $e);
 return;
}

function ___towrite($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $13 = 0, $2 = 0, $6 = 0;
 $0 = $f + 74 | 0;
 $2 = HEAP8[$0 >> 0] | 0;
 HEAP8[$0 >> 0] = $2 + 255 | $2;
 $6 = HEAP32[$f >> 2] | 0;
 if (!($6 & 8)) {
  HEAP32[$f + 8 >> 2] = 0;
  HEAP32[$f + 4 >> 2] = 0;
  $13 = HEAP32[$f + 44 >> 2] | 0;
  HEAP32[$f + 28 >> 2] = $13;
  HEAP32[$f + 20 >> 2] = $13;
  HEAP32[$f + 16 >> 2] = $13 + (HEAP32[$f + 48 >> 2] | 0);
  $$0 = 0;
  return $$0 | 0;
 } else {
  HEAP32[$f >> 2] = $6 | 32;
  $$0 = -1;
  return $$0 | 0;
 }
 return 0;
}

function __Z33mlua_set_frequency_distance_jointP9lua_State($L) {
 $L = $L | 0;
 var $1 = 0, $2 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!$L) ___assert_fail(23976, 4112, 109, 4560);
 $1 = __Z9pop_jointP9lua_Statei($L, 1) | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!$2) {
  _luaL_error($L, 4440, sp) | 0;
  $5 = HEAP32[$1 >> 2] | 0;
 } else $5 = $2;
 if ((HEAP32[$5 + 4 >> 2] | 0) != 3) _luaL_error($L, 4992, sp + 8 | 0) | 0;
 HEAPF32[$5 + 68 >> 2] = +_luaL_checknumber($L, 2);
 STACKTOP = sp;
 return 0;
}

function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0;
 $y_sroa_0_0_extract_trunc = $b$0;
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
 $1$1 = tempRet0;
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0;
}

function _io_close($L) {
 $L = $L | 0;
 var $10 = 0, $7 = 0, $cf$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $cf$i = sp + 4 | 0;
 if ((_lua_type($L, 1) | 0) == -1) _lua_getfield($L, -1001e3, 56704) | 0;
 if (!(HEAP32[(_luaL_checkudata($L, 1, 56736) | 0) + 4 >> 2] | 0)) _luaL_error($L, 56960, sp) | 0;
 $7 = (_luaL_checkudata($L, 1, 56736) | 0) + 4 | 0;
 HEAP32[$cf$i >> 2] = HEAP32[$7 >> 2];
 HEAP32[$7 >> 2] = 0;
 $10 = FUNCTION_TABLE_ii[HEAP32[$cf$i >> 2] & 511]($L) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZN12b2MouseJoint9SetTargetERK6b2Vec2($this, $target) {
 $this = $this | 0;
 $target = $target | 0;
 var $1 = 0, $13 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $6 = 0;
 $1 = HEAP32[$this + 52 >> 2] | 0;
 $2 = $1 + 4 | 0;
 $3 = HEAP16[$2 >> 1] | 0;
 if (!($3 & 2)) {
  $6 = $3 & 65535;
  if (!($6 & 2)) {
   HEAP16[$2 >> 1] = $6 | 2;
   HEAPF32[$1 + 144 >> 2] = 0.0;
  }
 }
 $13 = $target;
 $18 = HEAP32[$13 + 4 >> 2] | 0;
 $19 = $this + 76 | 0;
 HEAP32[$19 >> 2] = HEAP32[$13 >> 2];
 HEAP32[$19 + 4 >> 2] = $18;
 return;
}

function __ZNK16b2PrismaticJoint10GetAnchorBEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $1 = 0, $10 = 0.0, $21 = 0.0, $3 = 0.0, $5 = 0.0, $8 = 0.0;
 $1 = HEAP32[$this + 52 >> 2] | 0;
 $3 = +HEAPF32[$1 + 24 >> 2];
 $5 = +HEAPF32[$this + 76 >> 2];
 $8 = +HEAPF32[$1 + 20 >> 2];
 $10 = +HEAPF32[$this + 80 >> 2];
 $21 = $5 * $8 + $3 * $10 + +HEAPF32[$1 + 16 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$1 + 12 >> 2] + ($3 * $5 - $8 * $10);
 HEAPF32[$agg$result + 4 >> 2] = $21;
 return;
}

function __ZNK16b2PrismaticJoint10GetAnchorAEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $1 = 0, $10 = 0.0, $21 = 0.0, $3 = 0.0, $5 = 0.0, $8 = 0.0;
 $1 = HEAP32[$this + 48 >> 2] | 0;
 $3 = +HEAPF32[$1 + 24 >> 2];
 $5 = +HEAPF32[$this + 68 >> 2];
 $8 = +HEAPF32[$1 + 20 >> 2];
 $10 = +HEAPF32[$this + 72 >> 2];
 $21 = $5 * $8 + $3 * $10 + +HEAPF32[$1 + 16 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$1 + 12 >> 2] + ($3 * $5 - $8 * $10);
 HEAPF32[$agg$result + 4 >> 2] = $21;
 return;
}

function __ZNK15b2RevoluteJoint10GetAnchorBEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $1 = 0, $10 = 0.0, $21 = 0.0, $3 = 0.0, $5 = 0.0, $8 = 0.0;
 $1 = HEAP32[$this + 52 >> 2] | 0;
 $3 = +HEAPF32[$1 + 24 >> 2];
 $5 = +HEAPF32[$this + 76 >> 2];
 $8 = +HEAPF32[$1 + 20 >> 2];
 $10 = +HEAPF32[$this + 80 >> 2];
 $21 = $5 * $8 + $3 * $10 + +HEAPF32[$1 + 16 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$1 + 12 >> 2] + ($3 * $5 - $8 * $10);
 HEAPF32[$agg$result + 4 >> 2] = $21;
 return;
}

function __ZNK15b2RevoluteJoint10GetAnchorAEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $1 = 0, $10 = 0.0, $21 = 0.0, $3 = 0.0, $5 = 0.0, $8 = 0.0;
 $1 = HEAP32[$this + 48 >> 2] | 0;
 $3 = +HEAPF32[$1 + 24 >> 2];
 $5 = +HEAPF32[$this + 68 >> 2];
 $8 = +HEAPF32[$1 + 20 >> 2];
 $10 = +HEAPF32[$this + 72 >> 2];
 $21 = $5 * $8 + $3 * $10 + +HEAPF32[$1 + 16 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$1 + 12 >> 2] + ($3 * $5 - $8 * $10);
 HEAPF32[$agg$result + 4 >> 2] = $21;
 return;
}

function __ZNK15b2FrictionJoint10GetAnchorBEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $1 = 0, $10 = 0.0, $21 = 0.0, $3 = 0.0, $5 = 0.0, $8 = 0.0;
 $1 = HEAP32[$this + 52 >> 2] | 0;
 $3 = +HEAPF32[$1 + 24 >> 2];
 $5 = +HEAPF32[$this + 76 >> 2];
 $8 = +HEAPF32[$1 + 20 >> 2];
 $10 = +HEAPF32[$this + 80 >> 2];
 $21 = $5 * $8 + $3 * $10 + +HEAPF32[$1 + 16 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$1 + 12 >> 2] + ($3 * $5 - $8 * $10);
 HEAPF32[$agg$result + 4 >> 2] = $21;
 return;
}

function __ZNK15b2FrictionJoint10GetAnchorAEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $1 = 0, $10 = 0.0, $21 = 0.0, $3 = 0.0, $5 = 0.0, $8 = 0.0;
 $1 = HEAP32[$this + 48 >> 2] | 0;
 $3 = +HEAPF32[$1 + 24 >> 2];
 $5 = +HEAPF32[$this + 68 >> 2];
 $8 = +HEAPF32[$1 + 20 >> 2];
 $10 = +HEAPF32[$this + 72 >> 2];
 $21 = $5 * $8 + $3 * $10 + +HEAPF32[$1 + 16 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$1 + 12 >> 2] + ($3 * $5 - $8 * $10);
 HEAPF32[$agg$result + 4 >> 2] = $21;
 return;
}

function __ZNK15b2DistanceJoint10GetAnchorBEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $1 = 0, $10 = 0.0, $21 = 0.0, $3 = 0.0, $5 = 0.0, $8 = 0.0;
 $1 = HEAP32[$this + 52 >> 2] | 0;
 $3 = +HEAPF32[$1 + 24 >> 2];
 $5 = +HEAPF32[$this + 88 >> 2];
 $8 = +HEAPF32[$1 + 20 >> 2];
 $10 = +HEAPF32[$this + 92 >> 2];
 $21 = $5 * $8 + $3 * $10 + +HEAPF32[$1 + 16 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$1 + 12 >> 2] + ($3 * $5 - $8 * $10);
 HEAPF32[$agg$result + 4 >> 2] = $21;
 return;
}

function __ZNK15b2DistanceJoint10GetAnchorAEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $1 = 0, $10 = 0.0, $21 = 0.0, $3 = 0.0, $5 = 0.0, $8 = 0.0;
 $1 = HEAP32[$this + 48 >> 2] | 0;
 $3 = +HEAPF32[$1 + 24 >> 2];
 $5 = +HEAPF32[$this + 80 >> 2];
 $8 = +HEAPF32[$1 + 20 >> 2];
 $10 = +HEAPF32[$this + 84 >> 2];
 $21 = $5 * $8 + $3 * $10 + +HEAPF32[$1 + 16 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$1 + 12 >> 2] + ($3 * $5 - $8 * $10);
 HEAPF32[$agg$result + 4 >> 2] = $21;
 return;
}

function __ZNK13b2PulleyJoint10GetAnchorBEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $1 = 0, $10 = 0.0, $21 = 0.0, $3 = 0.0, $5 = 0.0, $8 = 0.0;
 $1 = HEAP32[$this + 52 >> 2] | 0;
 $3 = +HEAPF32[$1 + 24 >> 2];
 $5 = +HEAPF32[$this + 100 >> 2];
 $8 = +HEAPF32[$1 + 20 >> 2];
 $10 = +HEAPF32[$this + 104 >> 2];
 $21 = $5 * $8 + $3 * $10 + +HEAPF32[$1 + 16 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$1 + 12 >> 2] + ($3 * $5 - $8 * $10);
 HEAPF32[$agg$result + 4 >> 2] = $21;
 return;
}

function __ZNK13b2PulleyJoint10GetAnchorAEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $1 = 0, $10 = 0.0, $21 = 0.0, $3 = 0.0, $5 = 0.0, $8 = 0.0;
 $1 = HEAP32[$this + 48 >> 2] | 0;
 $3 = +HEAPF32[$1 + 24 >> 2];
 $5 = +HEAPF32[$this + 92 >> 2];
 $8 = +HEAPF32[$1 + 20 >> 2];
 $10 = +HEAPF32[$this + 96 >> 2];
 $21 = $5 * $8 + $3 * $10 + +HEAPF32[$1 + 16 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$1 + 12 >> 2] + ($3 * $5 - $8 * $10);
 HEAPF32[$agg$result + 4 >> 2] = $21;
 return;
}

function __ZNK11b2GearJoint10GetAnchorBEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $1 = 0, $10 = 0.0, $21 = 0.0, $3 = 0.0, $5 = 0.0, $8 = 0.0;
 $1 = HEAP32[$this + 52 >> 2] | 0;
 $3 = +HEAPF32[$1 + 24 >> 2];
 $5 = +HEAPF32[$this + 100 >> 2];
 $8 = +HEAPF32[$1 + 20 >> 2];
 $10 = +HEAPF32[$this + 104 >> 2];
 $21 = $5 * $8 + $3 * $10 + +HEAPF32[$1 + 16 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$1 + 12 >> 2] + ($3 * $5 - $8 * $10);
 HEAPF32[$agg$result + 4 >> 2] = $21;
 return;
}

function __ZNK12b2WheelJoint10GetAnchorBEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $1 = 0, $10 = 0.0, $21 = 0.0, $3 = 0.0, $5 = 0.0, $8 = 0.0;
 $1 = HEAP32[$this + 52 >> 2] | 0;
 $3 = +HEAPF32[$1 + 24 >> 2];
 $5 = +HEAPF32[$this + 84 >> 2];
 $8 = +HEAPF32[$1 + 20 >> 2];
 $10 = +HEAPF32[$this + 88 >> 2];
 $21 = $5 * $8 + $3 * $10 + +HEAPF32[$1 + 16 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$1 + 12 >> 2] + ($3 * $5 - $8 * $10);
 HEAPF32[$agg$result + 4 >> 2] = $21;
 return;
}

function __ZNK12b2WheelJoint10GetAnchorAEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $1 = 0, $10 = 0.0, $21 = 0.0, $3 = 0.0, $5 = 0.0, $8 = 0.0;
 $1 = HEAP32[$this + 48 >> 2] | 0;
 $3 = +HEAPF32[$1 + 24 >> 2];
 $5 = +HEAPF32[$this + 76 >> 2];
 $8 = +HEAPF32[$1 + 20 >> 2];
 $10 = +HEAPF32[$this + 80 >> 2];
 $21 = $5 * $8 + $3 * $10 + +HEAPF32[$1 + 16 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$1 + 12 >> 2] + ($3 * $5 - $8 * $10);
 HEAPF32[$agg$result + 4 >> 2] = $21;
 return;
}

function __ZNK12b2MouseJoint10GetAnchorBEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $1 = 0, $10 = 0.0, $21 = 0.0, $3 = 0.0, $5 = 0.0, $8 = 0.0;
 $1 = HEAP32[$this + 52 >> 2] | 0;
 $3 = +HEAPF32[$1 + 24 >> 2];
 $5 = +HEAPF32[$this + 68 >> 2];
 $8 = +HEAPF32[$1 + 20 >> 2];
 $10 = +HEAPF32[$this + 72 >> 2];
 $21 = $5 * $8 + $3 * $10 + +HEAPF32[$1 + 16 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$1 + 12 >> 2] + ($3 * $5 - $8 * $10);
 HEAPF32[$agg$result + 4 >> 2] = $21;
 return;
}

function __ZNK11b2WeldJoint10GetAnchorBEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $1 = 0, $10 = 0.0, $21 = 0.0, $3 = 0.0, $5 = 0.0, $8 = 0.0;
 $1 = HEAP32[$this + 52 >> 2] | 0;
 $3 = +HEAPF32[$1 + 24 >> 2];
 $5 = +HEAPF32[$this + 88 >> 2];
 $8 = +HEAPF32[$1 + 20 >> 2];
 $10 = +HEAPF32[$this + 92 >> 2];
 $21 = $5 * $8 + $3 * $10 + +HEAPF32[$1 + 16 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$1 + 12 >> 2] + ($3 * $5 - $8 * $10);
 HEAPF32[$agg$result + 4 >> 2] = $21;
 return;
}

function __ZNK11b2WeldJoint10GetAnchorAEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $1 = 0, $10 = 0.0, $21 = 0.0, $3 = 0.0, $5 = 0.0, $8 = 0.0;
 $1 = HEAP32[$this + 48 >> 2] | 0;
 $3 = +HEAPF32[$1 + 24 >> 2];
 $5 = +HEAPF32[$this + 80 >> 2];
 $8 = +HEAPF32[$1 + 20 >> 2];
 $10 = +HEAPF32[$this + 84 >> 2];
 $21 = $5 * $8 + $3 * $10 + +HEAPF32[$1 + 16 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$1 + 12 >> 2] + ($3 * $5 - $8 * $10);
 HEAPF32[$agg$result + 4 >> 2] = $21;
 return;
}

function __ZNK11b2RopeJoint10GetAnchorBEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $1 = 0, $10 = 0.0, $21 = 0.0, $3 = 0.0, $5 = 0.0, $8 = 0.0;
 $1 = HEAP32[$this + 52 >> 2] | 0;
 $3 = +HEAPF32[$1 + 24 >> 2];
 $5 = +HEAPF32[$this + 76 >> 2];
 $8 = +HEAPF32[$1 + 20 >> 2];
 $10 = +HEAPF32[$this + 80 >> 2];
 $21 = $5 * $8 + $3 * $10 + +HEAPF32[$1 + 16 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$1 + 12 >> 2] + ($3 * $5 - $8 * $10);
 HEAPF32[$agg$result + 4 >> 2] = $21;
 return;
}

function __ZNK11b2RopeJoint10GetAnchorAEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $1 = 0, $10 = 0.0, $21 = 0.0, $3 = 0.0, $5 = 0.0, $8 = 0.0;
 $1 = HEAP32[$this + 48 >> 2] | 0;
 $3 = +HEAPF32[$1 + 24 >> 2];
 $5 = +HEAPF32[$this + 68 >> 2];
 $8 = +HEAPF32[$1 + 20 >> 2];
 $10 = +HEAPF32[$this + 72 >> 2];
 $21 = $5 * $8 + $3 * $10 + +HEAPF32[$1 + 16 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$1 + 12 >> 2] + ($3 * $5 - $8 * $10);
 HEAPF32[$agg$result + 4 >> 2] = $21;
 return;
}

function __ZNK11b2GearJoint10GetAnchorAEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $1 = 0, $10 = 0.0, $21 = 0.0, $3 = 0.0, $5 = 0.0, $8 = 0.0;
 $1 = HEAP32[$this + 48 >> 2] | 0;
 $3 = +HEAPF32[$1 + 24 >> 2];
 $5 = +HEAPF32[$this + 92 >> 2];
 $8 = +HEAPF32[$1 + 20 >> 2];
 $10 = +HEAPF32[$this + 96 >> 2];
 $21 = $5 * $8 + $3 * $10 + +HEAPF32[$1 + 16 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$1 + 12 >> 2] + ($3 * $5 - $8 * $10);
 HEAPF32[$agg$result + 4 >> 2] = $21;
 return;
}

function _luaL_optlstring($L, $arg, $def, $len) {
 $L = $L | 0;
 $arg = $arg | 0;
 $def = $def | 0;
 $len = $len | 0;
 var $$0 = 0, $5 = 0, $6 = 0;
 if ((_lua_type($L, $arg) | 0) >= 1) {
  $6 = _lua_tolstring($L, $arg, $len) | 0;
  if ($6) {
   $$0 = $6;
   return $$0 | 0;
  }
  _typeerror($L, $arg, _lua_typename($L, 4) | 0);
  $$0 = 0;
  return $$0 | 0;
 }
 if (!$len) {
  $$0 = $def;
  return $$0 | 0;
 }
 if (!$def) $5 = 0; else $5 = _strlen($def | 0) | 0;
 HEAP32[$len >> 2] = $5;
 $$0 = $def;
 return $$0 | 0;
}

function _luaG_tointerror($L, $p1, $p2) {
 $L = $L | 0;
 $p1 = $p1 | 0;
 $p2 = $p2 | 0;
 var $$0 = 0, $5 = 0, $temp = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $temp = sp + 4 | 0;
 if ((HEAP32[$p1 + 4 >> 2] | 0) == 19) {
  HEAP32[$temp >> 2] = HEAP32[$p1 >> 2];
  $$0 = $p2;
 } else {
  $5 = (_luaV_tointeger_($p1, $temp) | 0) == 0;
  $$0 = $5 ? $p1 : $p2;
 }
 HEAP32[$vararg_buffer >> 2] = _varinfo($L, $$0) | 0;
 _luaG_runerror($L, 55920, $vararg_buffer);
}

function _png_muldiv($res, $a, $times, $divisor) {
 $res = $res | 0;
 $a = $a | 0;
 $times = $times | 0;
 $divisor = $divisor | 0;
 var $$0 = 0, $9 = 0.0;
 if (!$divisor) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (($a | 0) == 0 | ($times | 0) == 0) {
  HEAP32[$res >> 2] = 0;
  $$0 = 1;
  return $$0 | 0;
 }
 $9 = +Math_floor(+(+($a | 0) * +($times | 0) / +($divisor | 0) + .5));
 if (!($9 <= 2147483647.0 & $9 >= -2147483648.0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP32[$res >> 2] = ~~$9;
 $$0 = 1;
 return $$0 | 0;
}

function _png_create_read_struct($user_png_ver, $error_ptr, $error_fn, $warn_fn) {
 $user_png_ver = $user_png_ver | 0;
 $error_ptr = $error_ptr | 0;
 $error_fn = $error_fn | 0;
 $warn_fn = $warn_fn | 0;
 var $0 = 0, $4 = 0;
 $0 = _png_create_png_struct($user_png_ver, $error_ptr, $error_fn, $warn_fn, 0, 0, 0) | 0;
 if (!$0) return $0 | 0;
 HEAP32[$0 + 208 >> 2] = 32768;
 HEAP32[$0 + 796 >> 2] = 8192;
 $4 = $0 + 212 | 0;
 HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 1048576;
 _png_set_read_fn($0, 0, 0);
 return $0 | 0;
}

function _lookforfunc($L, $path, $sym) {
 $L = $L | 0;
 $path = $path | 0;
 $sym = $sym | 0;
 var $$0 = 0, $0 = 0;
 _lua_rawgetp($L, -1001e3, 59008) | 0;
 _lua_getfield($L, -1, $path) | 0;
 $0 = _lua_touserdata($L, -1) | 0;
 _lua_settop($L, -3);
 if (!$0) {
  _lua_pushlstring($L, 58944, 58) | 0;
  $$0 = 1;
  return $$0 | 0;
 }
 if ((HEAP8[$sym >> 0] | 0) == 42) {
  _lua_pushboolean($L, 1);
  $$0 = 0;
  return $$0 | 0;
 } else {
  _lua_pushlstring($L, 58944, 58) | 0;
  $$0 = 2;
  return $$0 | 0;
 }
 return 0;
}

function _mlua_surface_class_index($L) {
 $L = $L | 0;
 var $1 = 0, $2 = 0;
 if (!$L) ___assert_fail(23976, 19928, 158, 20560);
 $1 = _pop_surface($L, 1) | 0;
 $2 = _luaL_checklstring($L, 2, 0) | 0;
 if (!(_strcmp($2, 57296) | 0)) {
  _lua_pushnumber($L, +((HEAP32[$1 + 4 >> 2] | 0) >>> 0));
  return 1;
 }
 if (!(_strcmp($2, 23200) | 0)) {
  _lua_pushnumber($L, +((HEAP32[$1 + 8 >> 2] | 0) >>> 0));
  return 1;
 } else {
  _lua_getmetatable($L, 1) | 0;
  _lua_getfield($L, -1, $2) | 0;
  return 1;
 }
 return 0;
}

function _lua_setglobal($L, $name) {
 $L = $L | 0;
 $name = $name | 0;
 var $14 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0;
 $4 = _luaH_getint(HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 36 >> 2] | 0, 2) | 0;
 $5 = $L + 8 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 HEAP32[$5 >> 2] = $6 + 8;
 $8 = _luaS_new($L, $name) | 0;
 HEAP32[$6 >> 2] = $8;
 HEAP32[$6 + 4 >> 2] = HEAPU8[$8 + 4 >> 0] | 0 | 64;
 $14 = HEAP32[$5 >> 2] | 0;
 _luaV_settable($L, $4, $14 + -8 | 0, $14 + -16 | 0);
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -16;
 return;
}

function _luaL_ref($L, $t) {
 $L = $L | 0;
 $t = $t | 0;
 var $$0 = 0, $2 = 0, $3 = 0, $ref$0 = 0;
 if (!(_lua_type($L, -1) | 0)) {
  _lua_settop($L, -2);
  $$0 = -1;
  return $$0 | 0;
 }
 $2 = _lua_absindex($L, $t) | 0;
 _lua_rawgeti($L, $2, 0) | 0;
 $3 = _lua_tointegerx($L, -1, 0) | 0;
 _lua_settop($L, -2);
 if (!$3) $ref$0 = (_lua_rawlen($L, $2) | 0) + 1 | 0; else {
  _lua_rawgeti($L, $2, $3) | 0;
  _lua_rawseti($L, $2, 0);
  $ref$0 = $3;
 }
 _lua_rawseti($L, $2, $ref$0);
 $$0 = $ref$0;
 return $$0 | 0;
}

function _display_draw_on($surface) {
 $surface = $surface | 0;
 var $5 = 0, $7 = 0;
 if (!$surface) ___assert_fail(19976, 18224, 527, 18920);
 if ((HEAP32[4528] | 0) == ($surface | 0)) return;
 _buffer_check_empty(HEAP32[4530] | 0);
 HEAP32[4528] = $surface;
 _surface_draw_on($surface);
 $5 = HEAP32[$surface + 4 >> 2] | 0;
 $7 = HEAP32[$surface + 8 >> 2] | 0;
 _glViewport(0, 0, $5 | 0, $7 | 0);
 _camera_update_matrix(HEAP32[4532] | 0, $5, $7);
 HEAP32[(HEAP32[4530] | 0) + 76 >> 2] = HEAP32[4528];
 return;
}

function _buffer_push_tex_coord($b, $x, $y) {
 $b = $b | 0;
 $x = +$x;
 $y = +$y;
 var $1 = 0, $2 = 0, $6 = 0, $8 = 0;
 if (!$b) ___assert_fail(23160, 22016, 235, 22328);
 $1 = $b + 48 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if ($2 >>> 0 < (HEAP32[$b + 4 >> 2] | 0) >>> 0) {
  $6 = $2 << 1;
  $8 = HEAP32[$b + 32 >> 2] | 0;
  HEAPF32[$8 + ($6 << 2) >> 2] = $x;
  HEAPF32[$8 + (($6 | 1) << 2) >> 2] = $y;
  HEAP32[$1 >> 2] = $2 + 1;
  HEAP8[$b + 56 >> 0] = 0;
  return;
 } else ___assert_fail(22352, 22016, 236, 22328);
}

function _f_setvbuf($L) {
 $L = $L | 0;
 var $0 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = _luaL_checkudata($L, 1, 56736) | 0;
 if (!(HEAP32[$0 + 4 >> 2] | 0)) _luaL_error($L, 56960, sp) | 0;
 $4 = HEAP32[$0 >> 2] | 0;
 $5 = _luaL_checkoption($L, 2, 0, 57008) | 0;
 $6 = _luaL_optinteger($L, 3, 2048) | 0;
 $12 = _luaL_fileresult($L, (_setvbuf($4 | 0, 0, HEAP32[56992 + ($5 << 2) >> 2] | 0, $6 | 0) | 0) == 0 & 1, 0) | 0;
 STACKTOP = sp;
 return $12 | 0;
}

function __Z37mlua_is_motor_enabled_prismatic_jointP9lua_State($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = __Z9pop_jointP9lua_Statei($L, 1) | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) {
  _luaL_error($L, 4440, sp) | 0;
  $4 = HEAP32[$0 >> 2] | 0;
 } else $4 = $1;
 if ((HEAP32[$4 + 4 >> 2] | 0) != 2) _luaL_error($L, 4856, sp + 8 | 0) | 0;
 _lua_pushboolean($L, (__ZNK16b2PrismaticJoint14IsMotorEnabledEv($4) | 0) & 1);
 STACKTOP = sp;
 return 1;
}

function __Z37mlua_is_limit_enabled_prismatic_jointP9lua_State($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = __Z9pop_jointP9lua_Statei($L, 1) | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) {
  _luaL_error($L, 4440, sp) | 0;
  $4 = HEAP32[$0 >> 2] | 0;
 } else $4 = $1;
 if ((HEAP32[$4 + 4 >> 2] | 0) != 2) _luaL_error($L, 4856, sp + 8 | 0) | 0;
 _lua_pushboolean($L, (__ZNK16b2PrismaticJoint14IsLimitEnabledEv($4) | 0) & 1);
 STACKTOP = sp;
 return 1;
}

function _buffer_push_vertex($b, $x, $y) {
 $b = $b | 0;
 $x = +$x;
 $y = +$y;
 var $1 = 0, $2 = 0, $6 = 0, $8 = 0;
 if (!$b) ___assert_fail(23160, 22016, 203, 22200);
 $1 = $b + 40 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if ($2 >>> 0 < (HEAP32[$b + 4 >> 2] | 0) >>> 0) {
  $6 = $2 << 1;
  $8 = HEAP32[$b + 24 >> 2] | 0;
  HEAPF32[$8 + ($6 << 2) >> 2] = $x;
  HEAPF32[$8 + (($6 | 1) << 2) >> 2] = $y;
  HEAP32[$1 >> 2] = $2 + 1;
  HEAP8[$b + 56 >> 0] = 0;
  return;
 } else ___assert_fail(22224, 22016, 204, 22200);
}

function __Z37mlua_set_enable_motor_prismatic_jointP9lua_State($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = __Z9pop_jointP9lua_Statei($L, 1) | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) {
  _luaL_error($L, 4440, sp) | 0;
  $4 = HEAP32[$0 >> 2] | 0;
 } else $4 = $1;
 if ((HEAP32[$4 + 4 >> 2] | 0) != 2) _luaL_error($L, 4856, sp + 8 | 0) | 0;
 __ZN16b2PrismaticJoint11EnableMotorEb($4, (_lua_toboolean($L, 2) | 0) != 0);
 STACKTOP = sp;
 return 0;
}

function __Z37mlua_set_enable_limit_prismatic_jointP9lua_State($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = __Z9pop_jointP9lua_Statei($L, 1) | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) {
  _luaL_error($L, 4440, sp) | 0;
  $4 = HEAP32[$0 >> 2] | 0;
 } else $4 = $1;
 if ((HEAP32[$4 + 4 >> 2] | 0) != 2) _luaL_error($L, 4856, sp + 8 | 0) | 0;
 __ZN16b2PrismaticJoint11EnableLimitEb($4, (_lua_toboolean($L, 2) | 0) != 0);
 STACKTOP = sp;
 return 0;
}

function _luaL_callmeta($L, $obj, $event) {
 $L = $L | 0;
 $obj = $obj | 0;
 $event = $event | 0;
 var $$0 = 0, $0 = 0;
 $0 = _lua_absindex($L, $obj) | 0;
 if (!(_lua_getmetatable($L, $0) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 _lua_pushstring($L, $event) | 0;
 if (!(_lua_rawget($L, -2) | 0)) {
  _lua_settop($L, -3);
  $$0 = 0;
  return $$0 | 0;
 } else {
  _lua_rotate($L, -2, -1);
  _lua_settop($L, -2);
  _lua_pushvalue($L, $0);
  _lua_callk($L, 1, 1, 0, 0);
  $$0 = 1;
  return $$0 | 0;
 }
 return 0;
}

function _png_destroy_png_struct($png_ptr) {
 $png_ptr = $png_ptr | 0;
 var $2 = 0, $dummy_struct = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 912 | 0;
 $dummy_struct = sp;
 if (!$png_ptr) {
  STACKTOP = sp;
  return;
 }
 _memcpy($dummy_struct | 0, $png_ptr | 0, 900) | 0;
 _memset($png_ptr | 0, 0, 900) | 0;
 $2 = HEAP32[$dummy_struct + 724 >> 2] | 0;
 if (!$2) _free($png_ptr); else FUNCTION_TABLE_vii[$2 & 127]($dummy_struct, $png_ptr);
 _png_free_jmpbuf($dummy_struct);
 STACKTOP = sp;
 return;
}

function _lua_getglobal($L, $name) {
 $L = $L | 0;
 $name = $name | 0;
 var $15 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0;
 $4 = _luaH_getint(HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 36 >> 2] | 0, 2) | 0;
 $5 = $L + 8 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 HEAP32[$5 >> 2] = $6 + 8;
 $8 = _luaS_new($L, $name) | 0;
 HEAP32[$6 >> 2] = $8;
 HEAP32[$6 + 4 >> 2] = HEAPU8[$8 + 4 >> 0] | 0 | 64;
 $15 = (HEAP32[$5 >> 2] | 0) + -8 | 0;
 _luaV_gettable($L, $4, $15, $15);
 return HEAP32[(HEAP32[$5 >> 2] | 0) + -4 >> 2] & 15 | 0;
}

function _mlua_new_surface($L) {
 $L = $L | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!$L) ___assert_fail(23976, 19928, 193, 20768);
 $1 = _luaL_checkinteger($L, 1) | 0;
 $2 = _luaL_checkinteger($L, 2) | 0;
 if (($1 + -1 | 0) >>> 0 >= 2048) _luaL_error($L, 20792, sp) | 0;
 if (($2 + -1 | 0) >>> 0 >= 2048) _luaL_error($L, 20840, sp + 8 | 0) | 0;
 _push_surface($L, _display_new_surface($1, $2, (_lua_toboolean($L, 3) | 0) != 0) | 0);
 STACKTOP = sp;
 return 1;
}

function __Z9pop_shapeP9lua_Statei($L, $index) {
 $L = $L | 0;
 $index = $index | 0;
 var $3 = 0, $5 = 0;
 if (!$L) ___assert_fail(23976, 5080, 20, 5136);
 if ((_lua_type($L, $index) | 0) == 5) {
  _lua_getfield($L, $index, 19992) | 0;
  $5 = __Z9pop_shapeP9lua_Statei($L, -1) | 0;
  _lua_settop($L, -2);
  return $5 | 0;
 }
 $3 = _lua_touserdata($L, $index) | 0;
 if (!$3) {
  _luaL_argerror($L, $index, 5152) | 0;
  ___assert_fail(23248, 5080, 20, 5136);
 } else return HEAP32[$3 >> 2] | 0;
 return 0;
}

function __Z9pop_jointP9lua_Statei($L, $index) {
 $L = $L | 0;
 $index = $index | 0;
 var $3 = 0, $5 = 0;
 if (!$L) ___assert_fail(23976, 4112, 28, 4408);
 if ((_lua_type($L, $index) | 0) == 5) {
  _lua_getfield($L, $index, 19992) | 0;
  $5 = __Z9pop_jointP9lua_Statei($L, -1) | 0;
  _lua_settop($L, -2);
  return $5 | 0;
 }
 $3 = _lua_touserdata($L, $index) | 0;
 if (!$3) {
  _luaL_argerror($L, $index, 4424) | 0;
  ___assert_fail(23248, 4112, 28, 4408);
 } else return HEAP32[$3 >> 2] | 0;
 return 0;
}

function __Z36mlua_set_motor_speed_prismatic_jointP9lua_State($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = __Z9pop_jointP9lua_Statei($L, 1) | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) {
  _luaL_error($L, 4440, sp) | 0;
  $4 = HEAP32[$0 >> 2] | 0;
 } else $4 = $1;
 if ((HEAP32[$4 + 4 >> 2] | 0) != 2) _luaL_error($L, 4856, sp + 8 | 0) | 0;
 __ZN16b2PrismaticJoint13SetMotorSpeedEf($4, +_luaL_checknumber($L, 2));
 STACKTOP = sp;
 return 0;
}

function __Z8pop_bodyP9lua_Statei($L, $index) {
 $L = $L | 0;
 $index = $index | 0;
 var $3 = 0, $5 = 0;
 if (!$L) ___assert_fail(23976, 5248, 19, 5304);
 if ((_lua_type($L, $index) | 0) == 5) {
  _lua_getfield($L, $index, 19992) | 0;
  $5 = __Z8pop_bodyP9lua_Statei($L, -1) | 0;
  _lua_settop($L, -2);
  return $5 | 0;
 }
 $3 = _lua_touserdata($L, $index) | 0;
 if (!$3) {
  _luaL_argerror($L, $index, 5320) | 0;
  ___assert_fail(23248, 5248, 19, 5304);
 } else return HEAP32[$3 >> 2] | 0;
 return 0;
}

function _luaB_setmetatable($L) {
 $L = $L | 0;
 var $$0 = 0, $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = _lua_type($L, 2) | 0;
 _luaL_checktype($L, 1, 5);
 if (!(($0 | 0) == 0 | ($0 | 0) == 5)) _luaL_argerror($L, 2, 66504) | 0;
 if (!(_luaL_getmetafield($L, 1, 64736) | 0)) {
  _lua_settop($L, 2);
  _lua_setmetatable($L, 1) | 0;
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $$0 = _luaL_error($L, 64752, sp) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _f_gc($L) {
 $L = $L | 0;
 var $0 = 0, $7 = 0, $cf$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $cf$i = sp;
 $0 = _luaL_checkudata($L, 1, 56736) | 0;
 if (!(HEAP32[$0 + 4 >> 2] | 0)) {
  STACKTOP = sp;
  return 0;
 }
 if (!(HEAP32[$0 >> 2] | 0)) {
  STACKTOP = sp;
  return 0;
 }
 $7 = (_luaL_checkudata($L, 1, 56736) | 0) + 4 | 0;
 HEAP32[$cf$i >> 2] = HEAP32[$7 >> 2];
 HEAP32[$7 >> 2] = 0;
 FUNCTION_TABLE_ii[HEAP32[$cf$i >> 2] & 511]($L) | 0;
 STACKTOP = sp;
 return 0;
}

function _strbuf_init($s, $len) {
 $s = $s | 0;
 $len = $len | 0;
 var $8 = 0, $size$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $size$0 = ($len | 0) < 1 ? 1023 : $len + 1 | 0;
 HEAP32[$s + 4 >> 2] = $size$0;
 HEAP32[$s + 8 >> 2] = 0;
 HEAP32[$s + 12 >> 2] = -2;
 HEAP32[$s + 16 >> 2] = 0;
 HEAP32[$s + 20 >> 2] = 0;
 HEAP32[$s + 24 >> 2] = 0;
 $8 = _malloc($size$0) | 0;
 HEAP32[$s >> 2] = $8;
 if (!$8) _die(74392, sp); else {
  HEAP8[$8 >> 0] = 0;
  STACKTOP = sp;
  return;
 }
}

function __Z34mlua_set_max_torque_friction_jointP9lua_State($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = __Z9pop_jointP9lua_Statei($L, 1) | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) {
  _luaL_error($L, 4440, sp) | 0;
  $4 = HEAP32[$0 >> 2] | 0;
 } else $4 = $1;
 if ((HEAP32[$4 + 4 >> 2] | 0) != 9) _luaL_error($L, 4768, sp + 8 | 0) | 0;
 __ZN15b2FrictionJoint12SetMaxTorqueEf($4, +_luaL_checknumber($L, 2));
 STACKTOP = sp;
 return 0;
}

function __ZNK12b2WheelJoint16GetReactionForceEf($agg$result, $this, $inv_dt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 var $1 = 0.0, $19 = 0.0, $9 = 0.0;
 $1 = +HEAPF32[$this + 108 >> 2];
 $9 = +HEAPF32[$this + 116 >> 2];
 $19 = ($1 * +HEAPF32[$this + 184 >> 2] + $9 * +HEAPF32[$this + 176 >> 2]) * $inv_dt;
 HEAPF32[$agg$result >> 2] = ($1 * +HEAPF32[$this + 180 >> 2] + $9 * +HEAPF32[$this + 172 >> 2]) * $inv_dt;
 HEAPF32[$agg$result + 4 >> 2] = $19;
 return;
}

function __ZNK11b2EdgeShape11ComputeMassEP10b2MassDataf($this, $massData, $density) {
 $this = $this | 0;
 $massData = $massData | 0;
 $density = +$density;
 var $13 = 0.0, $14 = 0.0, $15 = 0;
 HEAPF32[$massData >> 2] = 0.0;
 $13 = +((+HEAPF32[$this + 12 >> 2] + +HEAPF32[$this + 20 >> 2]) * .5);
 $14 = +((+HEAPF32[$this + 16 >> 2] + +HEAPF32[$this + 24 >> 2]) * .5);
 $15 = $massData + 4 | 0;
 HEAPF32[$15 >> 2] = $13;
 HEAPF32[$15 + 4 >> 2] = $14;
 HEAPF32[$massData + 12 >> 2] = 0.0;
 return;
}

function __Z33mlua_set_max_force_friction_jointP9lua_State($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = __Z9pop_jointP9lua_Statei($L, 1) | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) {
  _luaL_error($L, 4440, sp) | 0;
  $4 = HEAP32[$0 >> 2] | 0;
 } else $4 = $1;
 if ((HEAP32[$4 + 4 >> 2] | 0) != 9) _luaL_error($L, 4768, sp + 8 | 0) | 0;
 __ZN15b2FrictionJoint11SetMaxForceEf($4, +_luaL_checknumber($L, 2));
 STACKTOP = sp;
 return 0;
}

function _png_set_oFFs($png_ptr, $info_ptr, $offset_x, $offset_y, $unit_type) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 $offset_x = $offset_x | 0;
 $offset_y = $offset_y | 0;
 $unit_type = $unit_type | 0;
 var $6 = 0;
 if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) return;
 HEAP32[$info_ptr + 180 >> 2] = $offset_x;
 HEAP32[$info_ptr + 184 >> 2] = $offset_y;
 HEAP8[$info_ptr + 188 >> 0] = $unit_type;
 $6 = $info_ptr + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 256;
 return;
}

function _luaO_ceillog2($x) {
 $x = $x | 0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $2 = 0, $3 = 0, $l$0$lcssa = 0, $l$02 = 0;
 $0 = $x + -1 | 0;
 if ($0 >>> 0 > 255) {
  $$01 = $0;
  $l$02 = 0;
  while (1) {
   $2 = $l$02 + 8 | 0;
   $3 = $$01 >>> 8;
   if ($$01 >>> 0 > 65535) {
    $$01 = $3;
    $l$02 = $2;
   } else {
    $$0$lcssa = $3;
    $l$0$lcssa = $2;
    break;
   }
  }
 } else {
  $$0$lcssa = $0;
  $l$0$lcssa = 0;
 }
 return (HEAPU8[59176 + $$0$lcssa >> 0] | 0) + $l$0$lcssa | 0;
}

function __Z34mlua_get_max_torque_friction_jointP9lua_State($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = __Z9pop_jointP9lua_Statei($L, 1) | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) {
  _luaL_error($L, 4440, sp) | 0;
  $4 = HEAP32[$0 >> 2] | 0;
 } else $4 = $1;
 if ((HEAP32[$4 + 4 >> 2] | 0) != 9) _luaL_error($L, 4768, sp + 8 | 0) | 0;
 _lua_pushnumber($L, +__ZNK15b2FrictionJoint12GetMaxTorqueEv($4));
 STACKTOP = sp;
 return 1;
}

function __ZN8b2IslandD2Ev($this) {
 $this = $this | 0;
 __ZN16b2StackAllocator4FreeEPv(HEAP32[$this >> 2] | 0, HEAP32[$this + 20 >> 2] | 0);
 __ZN16b2StackAllocator4FreeEPv(HEAP32[$this >> 2] | 0, HEAP32[$this + 24 >> 2] | 0);
 __ZN16b2StackAllocator4FreeEPv(HEAP32[$this >> 2] | 0, HEAP32[$this + 16 >> 2] | 0);
 __ZN16b2StackAllocator4FreeEPv(HEAP32[$this >> 2] | 0, HEAP32[$this + 12 >> 2] | 0);
 __ZN16b2StackAllocator4FreeEPv(HEAP32[$this >> 2] | 0, HEAP32[$this + 8 >> 2] | 0);
 return;
}

function __ZN16b2BlockAllocator4FreeEPvi($this, $p, $size) {
 $this = $this | 0;
 $p = $p | 0;
 $size = $size | 0;
 var $4 = 0, $7 = 0;
 if (!$size) return;
 if (($size | 0) <= 0) ___assert_fail(83176, 83088, 162, 91168);
 if (($size | 0) > 640) {
  __Z6b2FreePv($p);
  return;
 }
 $4 = HEAP8[82408 + $size >> 0] | 0;
 if (($4 & 255) >= 14) ___assert_fail(83192, 83088, 171, 91168);
 $7 = $this + (($4 & 255) << 2) + 12 | 0;
 HEAP32[$p >> 2] = HEAP32[$7 >> 2];
 HEAP32[$7 >> 2] = $p;
 return;
}

function __Z33mlua_get_max_force_friction_jointP9lua_State($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = __Z9pop_jointP9lua_Statei($L, 1) | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) {
  _luaL_error($L, 4440, sp) | 0;
  $4 = HEAP32[$0 >> 2] | 0;
 } else $4 = $1;
 if ((HEAP32[$4 + 4 >> 2] | 0) != 9) _luaL_error($L, 4768, sp + 8 | 0) | 0;
 _lua_pushnumber($L, +__ZNK15b2FrictionJoint11GetMaxForceEv($4));
 STACKTOP = sp;
 return 1;
}

function _mlua_resize($L) {
 $L = $L | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!$L) ___assert_fail(23976, 19928, 127, 20456);
 $1 = _luaL_checkinteger($L, 1) | 0;
 $2 = _luaL_checkinteger($L, 2) | 0;
 if (($1 | 0) <= 0) _luaL_error($L, 20472, sp) | 0;
 if (($2 | 0) <= 0) _luaL_error($L, 20504, sp + 8 | 0) | 0;
 _display_resize($1, $2);
 _push_surface($L, _display_get_screen() | 0);
 _lua_setfield($L, -1001e3, 20384);
 STACKTOP = sp;
 return 0;
}

function _luaK_exp2anyregup($fs, $e) {
 $fs = $fs | 0;
 $e = $e | 0;
 var $15 = 0;
 if ((HEAP32[$e >> 2] | 0) == 9) if ((HEAP32[$e + 8 >> 2] | 0) == (HEAP32[$e + 12 >> 2] | 0)) return;
 _luaK_dischargevars($fs, $e);
 if ((HEAP32[$e >> 2] | 0) == 7) {
  $15 = HEAP32[$e + 4 >> 2] | 0;
  if ((HEAP32[$e + 8 >> 2] | 0) == (HEAP32[$e + 12 >> 2] | 0)) return;
  if (($15 | 0) >= (HEAPU8[$fs + 42 >> 0] | 0 | 0)) {
   _exp2reg($fs, $e, $15);
   return;
  }
 }
 _luaK_exp2nextreg($fs, $e);
 return;
}

function _luaS_remove($L, $ts) {
 $L = $L | 0;
 $ts = $ts | 0;
 var $1 = 0, $11 = 0, $13 = 0, $15 = 0, $p$0 = 0;
 $1 = HEAP32[$L + 12 >> 2] | 0;
 $p$0 = (HEAP32[$1 + 24 >> 2] | 0) + (((HEAP32[$1 + 32 >> 2] | 0) + -1 & HEAP32[$ts + 8 >> 2]) << 2) | 0;
 while (1) {
  $11 = HEAP32[$p$0 >> 2] | 0;
  $13 = $11 + 16 | 0;
  if (($11 | 0) == ($ts | 0)) break; else $p$0 = $13;
 }
 HEAP32[$p$0 >> 2] = HEAP32[$13 >> 2];
 $15 = $1 + 28 | 0;
 HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + -1;
 return;
}

function _png_calloc($png_ptr, $size) {
 $png_ptr = $png_ptr | 0;
 $size = $size | 0;
 var $$0$i$i = 0, $$0$i1 = 0, $3 = 0;
 if (!$png_ptr) {
  $$0$i1 = 0;
  return $$0$i1 | 0;
 }
 if (!$size) _png_error($png_ptr, 74392);
 $3 = HEAP32[$png_ptr + 720 >> 2] | 0;
 if (!$3) $$0$i$i = _malloc($size) | 0; else $$0$i$i = FUNCTION_TABLE_iii[$3 & 31]($png_ptr, $size) | 0;
 if (!$$0$i$i) _png_error($png_ptr, 74392);
 _memset($$0$i$i | 0, 0, $size | 0) | 0;
 $$0$i1 = $$0$i$i;
 return $$0$i1 | 0;
}

function _buffer_check_use_texture($b) {
 $b = $b | 0;
 var $1 = 0, $4 = 0, $5 = 0;
 if (!$b) ___assert_fail(23160, 22016, 178, 22136);
 $1 = $b + 57 | 0;
 if (!(HEAP8[$1 >> 0] | 0)) {
  _buffer_draw($b, 0.0, 0.0);
  $4 = $b + 40 | 0;
  HEAP32[$4 + 0 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$4 + 8 >> 2] = 0;
  HEAP32[$4 + 12 >> 2] = 0;
  HEAP8[$1 >> 0] = 1;
 }
 $5 = $b + 32 | 0;
 if (HEAP32[$5 >> 2] | 0) return;
 HEAP32[$5 >> 2] = _xmalloc(HEAP32[$b + 4 >> 2] << 3) | 0;
 return;
}

function __Z29mlua_get_linear_velocity_bodyP9lua_State($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $4 = 0, $7 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = __Z8pop_bodyP9lua_Statei($L, 1) | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) {
  _luaL_error($L, 5336, sp) | 0;
  $4 = HEAP32[$0 >> 2] | 0;
 } else $4 = $1;
 $7 = +HEAPF32[$4 + 68 >> 2];
 _lua_pushnumber($L, +HEAPF32[$4 + 64 >> 2] * +HEAPF32[616]);
 _lua_pushnumber($L, $7 * +HEAPF32[616]);
 STACKTOP = sp;
 return 2;
}

function __Z29mlua_get_center_position_bodyP9lua_State($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $4 = 0, $7 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = __Z8pop_bodyP9lua_Statei($L, 1) | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) {
  _luaL_error($L, 5336, sp) | 0;
  $4 = HEAP32[$0 >> 2] | 0;
 } else $4 = $1;
 $7 = +HEAPF32[$4 + 48 >> 2];
 _lua_pushnumber($L, +HEAPF32[$4 + 44 >> 2] * +HEAPF32[616]);
 _lua_pushnumber($L, $7 * +HEAPF32[616]);
 STACKTOP = sp;
 return 2;
}

function _luaL_checkstack($L, $space, $msg) {
 $L = $L | 0;
 $space = $space | 0;
 $msg = $msg | 0;
 var $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 if (_lua_checkstack($L, $space + 20 | 0) | 0) {
  STACKTOP = sp;
  return;
 }
 if (!$msg) {
  _luaL_error($L, 56208, sp + 8 | 0) | 0;
  STACKTOP = sp;
  return;
 } else {
  HEAP32[$vararg_buffer >> 2] = $msg;
  _luaL_error($L, 55304, $vararg_buffer) | 0;
  STACKTOP = sp;
  return;
 }
}

function _luaB_select($L) {
 $L = $L | 0;
 var $$0 = 0, $0 = 0, $7 = 0, $i$0 = 0;
 $0 = _lua_gettop($L) | 0;
 if ((_lua_type($L, 1) | 0) == 4) if ((HEAP8[(_lua_tolstring($L, 1, 0) | 0) >> 0] | 0) == 35) {
  _lua_pushinteger($L, $0 + -1 | 0);
  $$0 = 1;
  return $$0 | 0;
 }
 $7 = _luaL_checkinteger($L, 1) | 0;
 if (($7 | 0) < 0) $i$0 = $7 + $0 | 0; else $i$0 = ($7 | 0) > ($0 | 0) ? $0 : $7;
 if (($i$0 | 0) <= 0) _luaL_argerror($L, 1, 64792) | 0;
 $$0 = $0 - $i$0 | 0;
 return $$0 | 0;
}

function __Z16mlua_get_gravityP9lua_State($L) {
 $L = $L | 0;
 var $1 = 0, $11 = 0.0, $12 = 0.0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!$L) ___assert_fail(23976, 2472, 133, 2664);
 $1 = HEAP32[632] | 0;
 if (!$1) {
  _luaL_error($L, 2688, sp) | 0;
  $4 = HEAP32[632] | 0;
 } else $4 = $1;
 $5 = $4 + 102968 | 0;
 $11 = +HEAPF32[$5 >> 2];
 $12 = +HEAPF32[$5 + 4 >> 2];
 _lua_pushnumber($L, $11);
 _lua_pushnumber($L, $12);
 STACKTOP = sp;
 return 2;
}

function __Z23b2CollideEdgeAndPolygonP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS6_($manifold, $edgeA, $xfA, $polygonB, $xfB) {
 $manifold = $manifold | 0;
 $edgeA = $edgeA | 0;
 $xfA = $xfA | 0;
 $polygonB = $polygonB | 0;
 $xfB = $xfB | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 __ZN12b2EPCollider7CollideEP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS7_(sp, $manifold, $edgeA, $xfA, $polygonB, $xfB);
 STACKTOP = sp;
 return;
}

function _math_fmod($L) {
 $L = $L | 0;
 var $10 = 0.0, $4 = 0;
 if (_lua_isinteger($L, 1) | 0) if (_lua_isinteger($L, 2) | 0) {
  $4 = _lua_tointegerx($L, 2, 0) | 0;
  if (($4 + 1 | 0) >>> 0 >= 2) {
   _lua_pushinteger($L, (_lua_tointegerx($L, 1, 0) | 0) % ($4 | 0) | 0);
   return 1;
  }
  if (!$4) _luaL_argerror($L, 2, 58056) | 0;
  _lua_pushinteger($L, 0);
  return 1;
 }
 $10 = +_luaL_checknumber($L, 1);
 _lua_pushnumber($L, +_fmodf($10, +_luaL_checknumber($L, 2)));
 return 1;
}

function __Z22mlua_get_position_bodyP9lua_State($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $4 = 0, $7 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = __Z8pop_bodyP9lua_Statei($L, 1) | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) {
  _luaL_error($L, 5336, sp) | 0;
  $4 = HEAP32[$0 >> 2] | 0;
 } else $4 = $1;
 $7 = +HEAPF32[$4 + 16 >> 2];
 _lua_pushnumber($L, +HEAPF32[$4 + 12 >> 2] * +HEAPF32[616]);
 _lua_pushnumber($L, $7 * +HEAPF32[616]);
 STACKTOP = sp;
 return 2;
}

function _b_extract($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = _luaL_checkinteger($L, 1) | 0;
 $1 = _luaL_checkinteger($L, 2) | 0;
 $2 = _luaL_optinteger($L, 3, 1) | 0;
 if (($1 | 0) <= -1) _luaL_argerror($L, 2, 65392) | 0;
 if (($2 | 0) <= 0) _luaL_argerror($L, 3, 65424) | 0;
 if (($2 + $1 | 0) > 32) _luaL_error($L, 65448, sp) | 0;
 _lua_pushinteger($L, $0 >>> $1 & ~(-2 << $2 + -1));
 STACKTOP = sp;
 return 1;
}

function _pop_shader($L, $index) {
 $L = $L | 0;
 $index = $index | 0;
 var $3 = 0, $5 = 0;
 if (!$L) ___assert_fail(23976, 13016, 30, 13064);
 if ((_lua_type($L, $index) | 0) == 5) {
  _lua_getfield($L, $index, 19992) | 0;
  $5 = _pop_shader($L, -1) | 0;
  _lua_settop($L, -2);
  return $5 | 0;
 }
 $3 = _lua_touserdata($L, $index) | 0;
 if (!$3) {
  _luaL_argerror($L, $index, 13080) | 0;
  ___assert_fail(23248, 13016, 30, 13064);
 } else return HEAP32[$3 >> 2] | 0;
 return 0;
}

function _pop_buffer($L, $index) {
 $L = $L | 0;
 $index = $index | 0;
 var $3 = 0, $5 = 0;
 if (!$L) ___assert_fail(23976, 19560, 27, 19608);
 if ((_lua_type($L, $index) | 0) == 5) {
  _lua_getfield($L, $index, 19992) | 0;
  $5 = _pop_buffer($L, -1) | 0;
  _lua_settop($L, -2);
  return $5 | 0;
 }
 $3 = _lua_touserdata($L, $index) | 0;
 if (!$3) {
  _luaL_argerror($L, $index, 19624) | 0;
  ___assert_fail(23248, 19560, 27, 19608);
 } else return HEAP32[$3 >> 2] | 0;
 return 0;
}

function _lua_sethook($L, $func, $mask, $count) {
 $L = $L | 0;
 $func = $func | 0;
 $mask = $mask | 0;
 $count = $count | 0;
 var $3 = 0, $or$cond = 0;
 $or$cond = ($func | 0) == 0 | ($mask | 0) == 0;
 $3 = HEAP32[$L + 16 >> 2] | 0;
 if (HEAP8[$3 + 34 >> 0] & 2) HEAP32[$L + 20 >> 2] = HEAP32[$3 + 20 >> 2];
 HEAP32[$L + 84 >> 2] = $or$cond ? 0 : $func;
 HEAP32[$L + 96 >> 2] = $count;
 HEAP32[$L + 100 >> 2] = $count;
 HEAP8[$L + 108 >> 0] = $or$cond ? 0 : $mask & 255;
 return;
}

function ___cxa_can_catch($catchType, $excpType, $thrown) {
 $catchType = $catchType | 0;
 $excpType = $excpType | 0;
 $thrown = $thrown | 0;
 var $4 = 0, $temp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $temp = sp;
 HEAP32[$temp >> 2] = HEAP32[$thrown >> 2];
 $4 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$catchType >> 2] | 0) + 16 >> 2] & 31]($catchType, $excpType, $temp) | 0;
 if ($4) HEAP32[$thrown >> 2] = HEAP32[$temp >> 2];
 STACKTOP = sp;
 return $4 & 1 | 0;
}

function __Z25mlua_set_ratio_gear_jointP9lua_State($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = __Z9pop_jointP9lua_Statei($L, 1) | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) {
  _luaL_error($L, 4440, sp) | 0;
  $4 = HEAP32[$0 >> 2] | 0;
 } else $4 = $1;
 if ((HEAP32[$4 + 4 >> 2] | 0) != 6) _luaL_error($L, 4816, sp + 8 | 0) | 0;
 __ZN11b2GearJoint8SetRatioEf($4, +_luaL_checknumber($L, 2));
 STACKTOP = sp;
 return 0;
}

function __Z16mlua_set_gravityP9lua_State($L) {
 $L = $L | 0;
 var $3 = 0.0, $4 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!$L) ___assert_fail(23976, 2472, 121, 2584);
 if (!(HEAP32[632] | 0)) _luaL_error($L, 2608, sp) | 0;
 $3 = +_luaL_checknumber($L, 1);
 $4 = +_luaL_checknumber($L, 2);
 $7 = +$3;
 $8 = +$4;
 $9 = (HEAP32[632] | 0) + 102968 | 0;
 HEAPF32[$9 >> 2] = $7;
 HEAPF32[$9 + 4 >> 2] = $8;
 STACKTOP = sp;
 return 0;
}

function _pop_surface($L, $index) {
 $L = $L | 0;
 $index = $index | 0;
 var $3 = 0, $5 = 0;
 if (!$L) ___assert_fail(23976, 19928, 32, 2e4);
 if ((_lua_type($L, $index) | 0) == 5) {
  _lua_getfield($L, $index, 19992) | 0;
  $5 = _pop_surface($L, -1) | 0;
  _lua_settop($L, -2);
  return $5 | 0;
 }
 $3 = _lua_touserdata($L, $index) | 0;
 if (!$3) {
  _luaL_argerror($L, $index, 20016) | 0;
  ___assert_fail(23248, 19928, 32, 2e4);
 } else return HEAP32[$3 >> 2] | 0;
 return 0;
}

function _pop_sound($L, $index) {
 $L = $L | 0;
 $index = $index | 0;
 var $3 = 0, $5 = 0;
 if (!$L) ___assert_fail(23976, 11736, 29, 11784);
 if ((_lua_type($L, $index) | 0) == 5) {
  _lua_getfield($L, $index, 19992) | 0;
  $5 = _pop_sound($L, -1) | 0;
  _lua_settop($L, -2);
  return $5 | 0;
 }
 $3 = _lua_touserdata($L, $index) | 0;
 if (!$3) {
  _luaL_argerror($L, $index, 11800) | 0;
  ___assert_fail(23248, 11736, 29, 11784);
 } else return HEAP32[$3 >> 2] | 0;
 return 0;
}

function _pop_music($L, $index) {
 $L = $L | 0;
 $index = $index | 0;
 var $3 = 0, $5 = 0;
 if (!$L) ___assert_fail(23976, 12256, 28, 12312);
 if ((_lua_type($L, $index) | 0) == 5) {
  _lua_getfield($L, $index, 19992) | 0;
  $5 = _pop_music($L, -1) | 0;
  _lua_settop($L, -2);
  return $5 | 0;
 }
 $3 = _lua_touserdata($L, $index) | 0;
 if (!$3) {
  _luaL_argerror($L, $index, 12328) | 0;
  ___assert_fail(23248, 12256, 28, 12312);
 } else return HEAP32[$3 >> 2] | 0;
 return 0;
}

function _lua_createtable($L, $narray, $nrec) {
 $L = $L | 0;
 $narray = $narray | 0;
 $nrec = $nrec | 0;
 var $5 = 0, $6 = 0, $7 = 0;
 if ((HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 12 >> 2] | 0) > 0) _luaC_step($L);
 $5 = _luaH_new($L) | 0;
 $6 = $L + 8 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 HEAP32[$7 >> 2] = $5;
 HEAP32[$7 + 4 >> 2] = 69;
 HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 8;
 if (!(($narray | 0) > 0 | ($nrec | 0) > 0)) return;
 _luaH_resize($L, $5, $narray, $nrec);
 return;
}

function _luaL_checkudata($L, $ud, $tname) {
 $L = $L | 0;
 $ud = $ud | 0;
 $tname = $tname | 0;
 var $$$i = 0, $$0$i1 = 0, $0 = 0, $5 = 0;
 $0 = _lua_touserdata($L, $ud) | 0;
 if ($0) if (_lua_getmetatable($L, $ud) | 0) {
  _lua_getfield($L, -1001e3, $tname) | 0;
  $5 = (_lua_rawequal($L, -1, -2) | 0) == 0;
  $$$i = $5 ? 0 : $0;
  _lua_settop($L, -3);
  if ($$$i) {
   $$0$i1 = $$$i;
   return $$0$i1 | 0;
  }
 }
 _typeerror($L, $ud, $tname);
 $$0$i1 = 0;
 return $$0$i1 | 0;
}

function __Z25mlua_get_ratio_gear_jointP9lua_State($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = __Z9pop_jointP9lua_Statei($L, 1) | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) {
  _luaL_error($L, 4440, sp) | 0;
  $4 = HEAP32[$0 >> 2] | 0;
 } else $4 = $1;
 if ((HEAP32[$4 + 4 >> 2] | 0) != 6) _luaL_error($L, 4816, sp + 8 | 0) | 0;
 _lua_pushnumber($L, +__ZNK11b2GearJoint8GetRatioEv($4));
 STACKTOP = sp;
 return 1;
}

function _pop_system($L, $index) {
 $L = $L | 0;
 $index = $index | 0;
 var $3 = 0, $5 = 0;
 if (!$L) ___assert_fail(23976, 8472, 27, 8520);
 if ((_lua_type($L, $index) | 0) == 5) {
  _lua_getfield($L, $index, 19992) | 0;
  $5 = _pop_system($L, -1) | 0;
  _lua_settop($L, -2);
  return $5 | 0;
 }
 $3 = _lua_touserdata($L, $index) | 0;
 if (!$3) {
  _luaL_argerror($L, $index, 8536) | 0;
  ___assert_fail(23248, 8472, 27, 8520);
 } else return HEAP32[$3 >> 2] | 0;
 return 0;
}

function _b_arshift($L) {
 $L = $L | 0;
 var $$1$i = 0, $0 = 0, $1 = 0, $4 = 0, $r$0 = 0;
 $0 = _luaL_checkinteger($L, 1) | 0;
 $1 = _luaL_checkinteger($L, 2) | 0;
 if (($1 | 0) > -1 & ($0 | 0) < 0) {
  if (($1 | 0) > 31) $r$0 = -1; else $r$0 = $0 >>> $1 | ~(-1 >>> $1);
  _lua_pushinteger($L, $r$0);
  return 1;
 }
 $4 = 0 - $1 | 0;
 if (($1 | 0) > 0) $$1$i = ($1 | 0) > 31 ? 0 : $0 >>> $1; else $$1$i = ($4 | 0) > 31 ? 0 : $0 << $4;
 _lua_pushinteger($L, $$1$i);
 return 1;
}

function _mlua_free_surface($L) {
 $L = $L | 0;
 var $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 if (!$L) ___assert_fail(23976, 19928, 209, 20888); else {
  HEAP32[$vararg_buffer >> 2] = 19928;
  HEAP32[$vararg_buffer + 4 >> 2] = 211;
  HEAP32[$vararg_buffer + 8 >> 2] = 20888;
  _log_internal(3, 21800, 20912, $vararg_buffer);
  _display_free_surface(_pop_surface($L, 1) | 0);
  STACKTOP = sp;
  return 0;
 }
 return 0;
}

function _lua_concat($L, $n) {
 $L = $L | 0;
 $n = $n | 0;
 var $7 = 0, $8 = 0, $9 = 0;
 if (($n | 0) > 1) {
  if ((HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 12 >> 2] | 0) > 0) _luaC_step($L);
  _luaV_concat($L, $n);
  return;
 } else {
  if ($n) return;
  $7 = $L + 8 | 0;
  $8 = HEAP32[$7 >> 2] | 0;
  $9 = _luaS_newlstr($L, 62584, 0) | 0;
  HEAP32[$8 >> 2] = $9;
  HEAP32[$8 + 4 >> 2] = HEAPU8[$9 + 4 >> 0] | 0 | 64;
  HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 8;
  return;
 }
}

function _luaO_int2fb($x) {
 $x = $x | 0;
 var $$0$lcssa = 0, $$01 = 0, $$02 = 0, $2 = 0, $e$0$lcssa = 0, $e$03 = 0;
 if ($x >>> 0 < 8) {
  $$01 = $x;
  return $$01 | 0;
 }
 if ($x >>> 0 > 15) {
  $$02 = $x;
  $e$03 = 1;
  do {
   $2 = $$02 + 1 | 0;
   $$02 = $2 >>> 1;
   $e$03 = $e$03 + 1 | 0;
  } while ($2 >>> 0 > 31);
  $$0$lcssa = $$02;
  $e$0$lcssa = $e$03 << 3;
 } else {
  $$0$lcssa = $x;
  $e$0$lcssa = 8;
 }
 $$01 = $e$0$lcssa | $$0$lcssa + -8;
 return $$01 | 0;
}

function _luaT_callorderTM($L, $p1, $p2, $event) {
 $L = $L | 0;
 $p1 = $p1 | 0;
 $p2 = $p2 | 0;
 $event = $event | 0;
 var $$0 = 0, $0 = 0, $11 = 0, $4 = 0, $6 = 0;
 $0 = $L + 8 | 0;
 if (!(_luaT_callbinTM($L, $p1, $p2, HEAP32[$0 >> 2] | 0, $event) | 0)) {
  $$0 = -1;
  return $$0 | 0;
 }
 $4 = HEAP32[$0 >> 2] | 0;
 $6 = HEAP32[$4 + 4 >> 2] | 0;
 if (!$6) $11 = 0; else if (($6 | 0) == 1) $11 = (HEAP32[$4 >> 2] | 0) != 0; else $11 = 1;
 $$0 = $11 & 1;
 return $$0 | 0;
}

function _luaB_collectgarbage($L) {
 $L = $L | 0;
 var $2 = 0, $4 = 0;
 $2 = HEAP32[65136 + ((_luaL_checkoption($L, 1, 65072, 65016) | 0) << 2) >> 2] | 0;
 $4 = _lua_gc($L, $2, _luaL_optinteger($L, 2, 0) | 0) | 0;
 if (($2 | 0) == 3) {
  _lua_pushnumber($L, +($4 | 0) + +(_lua_gc($L, 4, 0) | 0) * .0009765625);
  return 1;
 } else if (($2 | 0) == 9 | ($2 | 0) == 5) {
  _lua_pushboolean($L, $4);
  return 1;
 } else {
  _lua_pushinteger($L, $4);
  return 1;
 }
 return 0;
}

function _getF($L, $ud, $size) {
 $L = $L | 0;
 $ud = $ud | 0;
 $size = $size | 0;
 var $$0 = 0, $0 = 0, $2 = 0, $6 = 0;
 $0 = HEAP32[$ud >> 2] | 0;
 if (($0 | 0) > 0) {
  HEAP32[$size >> 2] = $0;
  HEAP32[$ud >> 2] = 0;
  $$0 = $ud + 8 | 0;
  return $$0 | 0;
 }
 $2 = $ud + 4 | 0;
 if (_feof(HEAP32[$2 >> 2] | 0) | 0) {
  $$0 = 0;
  return $$0 | 0;
 }
 $6 = $ud + 8 | 0;
 HEAP32[$size >> 2] = _fread($6 | 0, 1, 1024, HEAP32[$2 >> 2] | 0) | 0;
 $$0 = $6;
 return $$0 | 0;
}

function copyTempDouble(ptr) {
 ptr = ptr | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[ptr >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[ptr + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[ptr + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[ptr + 3 >> 0];
 HEAP8[tempDoublePtr + 4 >> 0] = HEAP8[ptr + 4 >> 0];
 HEAP8[tempDoublePtr + 5 >> 0] = HEAP8[ptr + 5 >> 0];
 HEAP8[tempDoublePtr + 6 >> 0] = HEAP8[ptr + 6 >> 0];
 HEAP8[tempDoublePtr + 7 >> 0] = HEAP8[ptr + 7 >> 0];
}

function _pop_font($L, $index) {
 $L = $L | 0;
 $index = $index | 0;
 var $3 = 0, $5 = 0;
 if (!$L) ___assert_fail(23976, 5936, 25, 5984);
 if ((_lua_type($L, $index) | 0) == 5) {
  _lua_getfield($L, $index, 19992) | 0;
  $5 = _pop_font($L, -1) | 0;
  _lua_settop($L, -2);
  return $5 | 0;
 }
 $3 = _lua_touserdata($L, $index) | 0;
 if (!$3) {
  _luaL_argerror($L, $index, 6e3) | 0;
  ___assert_fail(23248, 5936, 25, 5984);
 } else return HEAP32[$3 >> 2] | 0;
 return 0;
}

function _png_set_pHYs($png_ptr, $info_ptr, $res_x, $res_y, $unit_type) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 $res_x = $res_x | 0;
 $res_y = $res_y | 0;
 $unit_type = $unit_type | 0;
 var $6 = 0;
 if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) return;
 HEAP32[$info_ptr + 192 >> 2] = $res_x;
 HEAP32[$info_ptr + 196 >> 2] = $res_y;
 HEAP8[$info_ptr + 200 >> 0] = $unit_type;
 $6 = $info_ptr + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 128;
 return;
}

function _mlua_free_shader($L) {
 $L = $L | 0;
 var $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 if (!$L) ___assert_fail(23976, 13016, 88, 13152); else {
  HEAP32[$vararg_buffer >> 2] = 13016;
  HEAP32[$vararg_buffer + 4 >> 2] = 90;
  HEAP32[$vararg_buffer + 8 >> 2] = 13152;
  _log_internal(3, 22712, 20912, $vararg_buffer);
  _display_free_shader(_pop_shader($L, 1) | 0);
  STACKTOP = sp;
  return 0;
 }
 return 0;
}

function _io_popen($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = _luaL_checklstring($L, 1, 0) | 0;
 _luaL_optlstring($L, 2, 59072, 0) | 0;
 $1 = _lua_newuserdata($L, 8) | 0;
 $2 = $1 + 4 | 0;
 HEAP32[$2 >> 2] = 0;
 _luaL_setmetatable($L, 56736);
 _luaL_error($L, 57272, sp) | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$2 >> 2] = 351;
 $3 = _luaL_fileresult($L, 0, $0) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function _storage_fetch($key) {
 $key = $key | 0;
 var $2 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 if (!$key) ___assert_fail(12760, 12768, 27, 12800); else {
  HEAP32[$vararg_buffer >> 2] = $key;
  HEAP32[$vararg_buffer + 4 >> 2] = 12864;
  HEAP32[$vararg_buffer + 8 >> 2] = 0;
  $2 = _emscripten_run_script_string(_strjoin(12816, $vararg_buffer) | 0) | 0;
  STACKTOP = sp;
  return $2 | 0;
 }
 return 0;
}

function _register_event($L) {
 $L = $L | 0;
 _lua_pushcclosure($L, 335, 0);
 _lua_setfield($L, -2, 22768);
 _lua_createtable($L, 0, 0);
 _lua_pushnumber($L, 1.0);
 _lua_setfield($L, -2, 23488);
 _lua_pushnumber($L, 2.0);
 _lua_setfield($L, -2, 22792);
 _lua_pushnumber($L, 3.0);
 _lua_setfield($L, -2, 23480);
 _lua_pushnumber($L, 4.0);
 _lua_setfield($L, -2, 22800);
 _lua_pushnumber($L, 5.0);
 _lua_setfield($L, -2, 22816);
 _lua_setfield($L, -2, 22832);
 return;
}

function _io_flush($L) {
 $L = $L | 0;
 var $0 = 0, $8 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 _lua_getfield($L, -1001e3, 56704) | 0;
 $0 = _lua_touserdata($L, -1) | 0;
 if (!(HEAP32[$0 + 4 >> 2] | 0)) {
  HEAP32[$vararg_buffer >> 2] = 56708;
  _luaL_error($L, 57216, $vararg_buffer) | 0;
 }
 $8 = _luaL_fileresult($L, (_fflush(HEAP32[$0 >> 2] | 0) | 0) == 0 & 1, 0) | 0;
 STACKTOP = sp;
 return $8 | 0;
}

function __Z28mlua_set_fixed_rotation_bodyP9lua_State($L) {
 $L = $L | 0;
 var $1 = 0, $2 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!$L) ___assert_fail(23976, 5248, 142, 5496);
 $1 = __Z8pop_bodyP9lua_Statei($L, 1) | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!$2) {
  _luaL_error($L, 5336, sp) | 0;
  $6 = HEAP32[$1 >> 2] | 0;
 } else $6 = $2;
 __ZN6b2Body16SetFixedRotationEb($6, (_lua_toboolean($L, 2) | 0) != 0);
 STACKTOP = sp;
 return 0;
}

function _b_and($L) {
 $L = $L | 0;
 var $0 = 0, $3 = 0, $i$01$i = 0, $r$0$lcssa$i = 0, $r$02$i = 0;
 $0 = _lua_gettop($L) | 0;
 if (($0 | 0) < 1) $r$0$lcssa$i = -1; else {
  $i$01$i = 1;
  $r$02$i = -1;
  while (1) {
   $3 = (_luaL_checkinteger($L, $i$01$i) | 0) & $r$02$i;
   if (($i$01$i | 0) == ($0 | 0)) {
    $r$0$lcssa$i = $3;
    break;
   } else {
    $i$01$i = $i$01$i + 1 | 0;
    $r$02$i = $3;
   }
  }
 }
 _lua_pushinteger($L, $r$0$lcssa$i);
 return 1;
}

function ___shlim($f, $lim) {
 $f = $f | 0;
 $lim = $lim | 0;
 var $$sink = 0, $12 = 0, $2 = 0, $4 = 0, $7 = 0;
 HEAP32[$f + 104 >> 2] = $lim;
 $2 = HEAP32[$f + 8 >> 2] | 0;
 $4 = HEAP32[$f + 4 >> 2] | 0;
 $7 = $2 - $4 | 0;
 HEAP32[$f + 108 >> 2] = $7;
 if (!(($lim | 0) != 0 & ($7 | 0) > ($lim | 0))) {
  $$sink = $2;
  $12 = $f + 100 | 0;
  HEAP32[$12 >> 2] = $$sink;
  return;
 }
 $$sink = $4 + $lim | 0;
 $12 = $f + 100 | 0;
 HEAP32[$12 >> 2] = $$sink;
 return;
}

function _mlua_free_buffer($L) {
 $L = $L | 0;
 var $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 if (!$L) ___assert_fail(23976, 19560, 103, 19856); else {
  HEAP32[$vararg_buffer >> 2] = 19560;
  HEAP32[$vararg_buffer + 4 >> 2] = 105;
  HEAP32[$vararg_buffer + 8 >> 2] = 19856;
  _log_internal(3, 22256, 20912, $vararg_buffer);
  _buffer_free(_pop_buffer($L, 1) | 0);
  STACKTOP = sp;
  return 0;
 }
 return 0;
}

function _push_keyname($L, $key) {
 $L = $L | 0;
 $key = $key | 0;
 if (!$L) ___assert_fail(23976, 23872, 184, 23928);
 _lua_rawgeti($L, -1001e3, HEAP32[5950] | 0) | 0;
 _lua_pushnumber($L, +($key >>> 16 | $key & 65535 | 0));
 _lua_rawget($L, -2) | 0;
 if (!(_lua_isstring($L, -1) | 0)) {
  _lua_settop($L, -3);
  _lua_pushlstring($L, 23944, 11) | 0;
  return;
 } else {
  _lua_rotate($L, (_lua_gettop($L) | 0) + -1 | 0, -1);
  _lua_settop($L, -2);
  return;
 }
}

function _luaG_opinterror($L, $p1, $p2, $msg) {
 $L = $L | 0;
 $p1 = $p1 | 0;
 $p2 = $p2 | 0;
 $msg = $msg | 0;
 var $$0 = 0, $5 = 0, $temp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $temp = sp;
 if ((HEAP32[$p1 + 4 >> 2] | 0) == 3) {
  HEAPF32[$temp >> 2] = +HEAPF32[$p1 >> 2];
  $$0 = $p2;
  _luaG_typeerror($L, $$0, $msg);
 } else {
  $5 = (_luaV_tonumber_($p1, $temp) | 0) == 0;
  $$0 = $5 ? $p1 : $p2;
  _luaG_typeerror($L, $$0, $msg);
 }
}

function _system_new($x, $y, $size) {
 $x = +$x;
 $y = +$y;
 $size = $size | 0;
 var $0 = 0, $5 = 0, $i$01 = 0;
 $0 = _xcalloc(1, 480) | 0;
 HEAPF32[$0 + 412 >> 2] = $x;
 HEAPF32[$0 + 416 >> 2] = $y;
 HEAP32[$0 + 404 >> 2] = $size;
 $5 = _xmalloc($size * 56 | 0) | 0;
 HEAP32[$0 >> 2] = $5;
 if (!$size) return $0 | 0; else $i$01 = 0;
 do {
  HEAP8[$5 + ($i$01 * 56 | 0) >> 0] = 1;
  $i$01 = $i$01 + 1 | 0;
 } while ($i$01 >>> 0 < $size >>> 0);
 return $0 | 0;
}

function _mlua_free_music($L) {
 $L = $L | 0;
 var $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 if (!$L) ___assert_fail(23976, 12256, 195, 12560); else {
  HEAP32[$vararg_buffer >> 2] = 12256;
  HEAP32[$vararg_buffer + 4 >> 2] = 197;
  HEAP32[$vararg_buffer + 8 >> 2] = 12560;
  _log_internal(3, 12304, 20912, $vararg_buffer);
  _music_free(_pop_music($L, 1) | 0);
  STACKTOP = sp;
  return 0;
 }
 return 0;
}

function _math_modf($L) {
 $L = $L | 0;
 var $12 = 0.0, $2 = 0.0, $7 = 0.0;
 if (_lua_isinteger($L, 1) | 0) {
  _lua_settop($L, 1);
  _lua_pushnumber($L, 0.0);
  return 2;
 }
 $2 = +_luaL_checknumber($L, 1);
 if ($2 < 0.0) $7 = +Math_ceil(+$2); else $7 = +Math_floor(+$2);
 if ($7 >= -2147483648.0 & $7 < 2147483648.0) _lua_pushinteger($L, ~~$7); else _lua_pushnumber($L, $7);
 if ($2 == $7) $12 = 0.0; else $12 = $2 - $7;
 _lua_pushnumber($L, $12);
 return 2;
}

function _luaZ_openspace($L, $buff, $n) {
 $L = $L | 0;
 $buff = $buff | 0;
 $n = $n | 0;
 var $$n = 0, $0 = 0, $1 = 0, $5 = 0, $6 = 0;
 $0 = $buff + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ($1 >>> 0 < $n >>> 0) {
  $$n = $n >>> 0 < 32 ? 32 : $n;
  $5 = _luaM_realloc_($L, HEAP32[$buff >> 2] | 0, $1, $$n) | 0;
  HEAP32[$buff >> 2] = $5;
  HEAP32[$0 >> 2] = $$n;
  $6 = $5;
  return $6 | 0;
 } else {
  $6 = HEAP32[$buff >> 2] | 0;
  return $6 | 0;
 }
 return 0;
}

function __ZNK7b2World9QueryAABBEP15b2QueryCallbackRK6b2AABB($this, $callback, $aabb) {
 $this = $this | 0;
 $callback = $callback | 0;
 $aabb = $aabb | 0;
 var $0 = 0, $wrapper = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $wrapper = sp;
 $0 = $this + 102872 | 0;
 HEAP32[$wrapper >> 2] = $0;
 HEAP32[$wrapper + 4 >> 2] = $callback;
 __ZNK13b2DynamicTree5QueryI19b2WorldQueryWrapperEEvPT_RK6b2AABB($0, $wrapper, $aabb);
 STACKTOP = sp;
 return;
}

function _str_dump($L) {
 $L = $L | 0;
 var $$0 = 0, $0 = 0, $b = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2080 | 0;
 $b = sp + 8 | 0;
 $0 = _lua_toboolean($L, 2) | 0;
 _luaL_checktype($L, 1, 6);
 _lua_settop($L, 1);
 _luaL_buffinit($L, $b);
 if (!(_lua_dump($L, 4, $b, $0) | 0)) {
  _luaL_pushresult($b);
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $$0 = _luaL_error($L, 62304, sp) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _mlua_free_sound($L) {
 $L = $L | 0;
 var $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 if (!$L) ___assert_fail(23976, 11736, 125, 11920); else {
  HEAP32[$vararg_buffer >> 2] = 11736;
  HEAP32[$vararg_buffer + 4 >> 2] = 127;
  HEAP32[$vararg_buffer + 8 >> 2] = 11920;
  _log_internal(3, 12e3, 20912, $vararg_buffer);
  _sound_free(_pop_sound($L, 1) | 0);
  STACKTOP = sp;
  return 0;
 }
 return 0;
}

function _png_set_read_fn($png_ptr, $io_ptr, $read_data_fn) {
 $png_ptr = $png_ptr | 0;
 $io_ptr = $io_ptr | 0;
 $read_data_fn = $read_data_fn | 0;
 var $4 = 0;
 if (!$png_ptr) return;
 HEAP32[$png_ptr + 188 >> 2] = $io_ptr;
 HEAP32[$png_ptr + 184 >> 2] = ($read_data_fn | 0) == 0 ? 9 : $read_data_fn;
 $4 = $png_ptr + 180 | 0;
 if (HEAP32[$4 >> 2] | 0) {
  HEAP32[$4 >> 2] = 0;
  _png_warning($png_ptr, 74936);
 }
 HEAP32[$png_ptr + 472 >> 2] = 0;
 return;
}

function _luaG_typeerror($L, $o, $op) {
 $L = $L | 0;
 $o = $o | 0;
 $op = $op | 0;
 var $5 = 0, $6 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $5 = HEAP32[62904 + ((HEAP32[$o + 4 >> 2] & 15) + 1 << 2) >> 2] | 0;
 $6 = _varinfo($L, $o) | 0;
 HEAP32[$vararg_buffer >> 2] = $op;
 HEAP32[$vararg_buffer + 4 >> 2] = $5;
 HEAP32[$vararg_buffer + 8 >> 2] = $6;
 _luaG_runerror($L, 55872, $vararg_buffer);
}

function __ZN25CustomDestructionListener10SayGoodbyeEP7b2Joint($this, $joint) {
 $this = $this | 0;
 $joint = $joint | 0;
 var $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 HEAP32[HEAP32[$joint + 64 >> 2] >> 2] = 0;
 HEAP32[$vararg_buffer >> 2] = 2472;
 HEAP32[$vararg_buffer + 4 >> 2] = 72;
 HEAP32[$vararg_buffer + 8 >> 2] = 4088;
 _log_internal(3, 4104, 4056, $vararg_buffer);
 STACKTOP = sp;
 return;
}

function __Z28mlua_get_fixed_rotation_bodyP9lua_State($L) {
 $L = $L | 0;
 var $1 = 0, $2 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!$L) ___assert_fail(23976, 5248, 142, 5528);
 $1 = __Z8pop_bodyP9lua_Statei($L, 1) | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!$2) {
  _luaL_error($L, 5336, sp) | 0;
  $5 = HEAP32[$1 >> 2] | 0;
 } else $5 = $2;
 _lua_pushboolean($L, (HEAPU16[$5 + 4 >> 1] | 0) >>> 4 & 1);
 STACKTOP = sp;
 return 1;
}

function __Z14mlua_dump_bodyP9lua_State($L) {
 $L = $L | 0;
 var $1 = 0, $2 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!$L) ___assert_fail(23976, 5248, 204, 5672);
 $1 = __Z8pop_bodyP9lua_Statei($L, 1) | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if ($2) {
  $4 = $2;
  __ZN6b2Body4DumpEv($4);
  STACKTOP = sp;
  return 0;
 }
 _luaL_error($L, 5336, sp) | 0;
 $4 = HEAP32[$1 >> 2] | 0;
 __ZN6b2Body4DumpEv($4);
 STACKTOP = sp;
 return 0;
}

function _mlua_screen2scene($L) {
 $L = $L | 0;
 var $1 = 0.0, $tx = 0, $ty = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tx = sp + 4 | 0;
 $ty = sp;
 if (!$L) ___assert_fail(23976, 19928, 145, 20536); else {
  $1 = +_luaL_checknumber($L, 1);
  _display_screen2scene($1, +_luaL_checknumber($L, 2), $tx, $ty);
  _lua_pushnumber($L, +HEAPF32[$tx >> 2]);
  _lua_pushnumber($L, +HEAPF32[$ty >> 2]);
  STACKTOP = sp;
  return 2;
 }
 return 0;
}

function _mlua_sizeof_plain_font($L) {
 $L = $L | 0;
 var $1 = 0, $h = 0, $w = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $w = sp + 4 | 0;
 $h = sp;
 if (!$L) ___assert_fail(23976, 5936, 81, 6096); else {
  $1 = _pop_font($L, 1) | 0;
  _font_get_textsize_plain($1, _luaL_checklstring($L, 2, 0) | 0, $w, $h);
  _lua_pushnumber($L, +HEAPF32[$w >> 2]);
  _lua_pushnumber($L, +HEAPF32[$h >> 2]);
  STACKTOP = sp;
  return 2;
 }
 return 0;
}

function _db_traceback($L) {
 $L = $L | 0;
 var $$0$i = 0, $3 = 0, $4 = 0, $5 = 0;
 if ((_lua_type($L, 1) | 0) == 8) {
  $$0$i = _lua_tothread($L, 1) | 0;
  $4 = 1;
 } else {
  $$0$i = $L;
  $4 = 0;
 }
 $3 = $4 + 1 | 0;
 $5 = _lua_tolstring($L, $3, 0) | 0;
 if (!$5) if ((_lua_type($L, $3) | 0) >= 1) {
  _lua_pushvalue($L, $3);
  return 1;
 }
 _luaL_traceback($L, $$0$i, $5, _luaL_optinteger($L, $4 | 2, ($$0$i | 0) == ($L | 0) & 1) | 0);
 return 1;
}

function __Z20mlua_set_active_bodyP9lua_State($L) {
 $L = $L | 0;
 var $1 = 0, $2 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!$L) ___assert_fail(23976, 5248, 82, 5392);
 $1 = __Z8pop_bodyP9lua_Statei($L, 1) | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!$2) {
  _luaL_error($L, 5336, sp) | 0;
  $6 = HEAP32[$1 >> 2] | 0;
 } else $6 = $2;
 __ZN6b2Body9SetActiveEb($6, (_lua_toboolean($L, 2) | 0) != 0);
 STACKTOP = sp;
 return 0;
}

function _luaL_optnumber($L, $arg, $def) {
 $L = $L | 0;
 $arg = $arg | 0;
 $def = +$def;
 var $2 = 0.0, $6 = 0.0, $isnum$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $isnum$i = sp;
 if ((_lua_type($L, $arg) | 0) < 1) $6 = $def; else {
  $2 = +_lua_tonumberx($L, $arg, $isnum$i);
  if (!(HEAP32[$isnum$i >> 2] | 0)) {
   _typeerror($L, $arg, _lua_typename($L, 3) | 0);
   $6 = $2;
  } else $6 = $2;
 }
 STACKTOP = sp;
 return +$6;
}

function _f_tostring($L) {
 $L = $L | 0;
 var $0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $0 = _luaL_checkudata($L, 1, 56736) | 0;
 if (!(HEAP32[$0 + 4 >> 2] | 0)) {
  _lua_pushlstring($L, 56928, 13) | 0;
  STACKTOP = sp;
  return 1;
 } else {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$0 >> 2];
  _lua_pushfstring($L, 56944, $vararg_buffer) | 0;
  STACKTOP = sp;
  return 1;
 }
 return 0;
}

function _luaL_checkinteger($L, $arg) {
 $L = $L | 0;
 $arg = $arg | 0;
 var $0 = 0, $isnum = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $isnum = sp;
 $0 = _lua_tointegerx($L, $arg, $isnum) | 0;
 do if (!(HEAP32[$isnum >> 2] | 0)) if (!(_lua_isnumber($L, $arg) | 0)) {
  _typeerror($L, $arg, _lua_typename($L, 3) | 0);
  break;
 } else {
  _luaL_argerror($L, $arg, 55720) | 0;
  break;
 } while (0);
 STACKTOP = sp;
 return $0 | 0;
}

function _dlua_call_update($dt) {
 $dt = +$dt;
 var $0 = 0, $6 = 0;
 $0 = HEAP32[16] | 0;
 _lua_rawgeti($0, -1001e3, HEAP32[18] | 0) | 0;
 _lua_pushstring($0, 9680) | 0;
 _lua_rawget($0, -2) | 0;
 _lua_rotate($0, (_lua_gettop($0) | 0) + -1 | 0, -1);
 _lua_settop($0, -2);
 if ((_lua_type($0, -1) | 0) == 6) {
  $6 = HEAP32[16] | 0;
  _lua_pushnumber($6, $dt);
  _call_lua_function($6, 1, 0);
  return;
 } else {
  _lua_settop($0, -2);
  return;
 }
}

function _png_malloc($png_ptr, $size) {
 $png_ptr = $png_ptr | 0;
 $size = $size | 0;
 var $$0 = 0, $$0$i = 0, $3 = 0;
 if (!$png_ptr) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!$size) _png_error($png_ptr, 74392);
 $3 = HEAP32[$png_ptr + 720 >> 2] | 0;
 if (!$3) $$0$i = _malloc($size) | 0; else $$0$i = FUNCTION_TABLE_iii[$3 & 31]($png_ptr, $size) | 0;
 if (!$$0$i) _png_error($png_ptr, 74392); else {
  $$0 = $$0$i;
  return $$0 | 0;
 }
 return 0;
}

function _mlua_draw_buffer($L) {
 $L = $L | 0;
 var $1 = 0, $dx$0 = 0.0, $dy$0 = 0.0;
 if (!$L) ___assert_fail(23976, 19560, 65, 19704);
 $1 = _pop_buffer($L, 1) | 0;
 if ((_lua_gettop($L) | 0) > 1) $dx$0 = +_luaL_checknumber($L, 2); else $dx$0 = 0.0;
 if ((_lua_gettop($L) | 0) <= 2) {
  $dy$0 = 0.0;
  _display_draw_buffer($1, $dx$0, $dy$0);
  return 0;
 }
 $dy$0 = +_luaL_checknumber($L, 3);
 _display_draw_buffer($1, $dx$0, $dy$0);
 return 0;
}

function _endswith($s, $postfix) {
 $s = $s | 0;
 $postfix = $postfix | 0;
 var $$0 = 0, $2 = 0, $3 = 0;
 if (!$s) ___assert_fail(23264, 856, 164, 880);
 if (!$postfix) ___assert_fail(896, 856, 165, 880);
 $2 = _strlen($s | 0) | 0;
 $3 = _strlen($postfix | 0) | 0;
 if (!$3) {
  $$0 = 1;
  return $$0 | 0;
 }
 if ($2 >>> 0 < $3 >>> 0) {
  $$0 = 0;
  return $$0 | 0;
 }
 $$0 = (_memcmp($s + ($2 - $3) | 0, $postfix, $3) | 0) == 0;
 return $$0 | 0;
}

function _unroll($L, $ud) {
 $L = $L | 0;
 $ud = $ud | 0;
 var $2 = 0, $3 = 0, $4 = 0, $7 = 0;
 if ($ud) _finishCcall($L, HEAP32[$ud >> 2] | 0);
 $2 = $L + 16 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $L + 48 | 0;
 if (($3 | 0) == ($4 | 0)) return; else $7 = $3;
 do {
  if (!(HEAP8[$7 + 34 >> 0] & 2)) _finishCcall($L, 1); else {
   _luaV_finishOp($L);
   _luaV_execute($L);
  }
  $7 = HEAP32[$2 >> 2] | 0;
 } while (($7 | 0) != ($4 | 0));
 return;
}

function _png_malloc_warn($png_ptr, $size) {
 $png_ptr = $png_ptr | 0;
 $size = $size | 0;
 var $$0 = 0, $$0$i = 0, $3 = 0;
 if (!$png_ptr) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ($size) {
  $3 = HEAP32[$png_ptr + 720 >> 2] | 0;
  if (!$3) $$0$i = _malloc($size) | 0; else $$0$i = FUNCTION_TABLE_iii[$3 & 31]($png_ptr, $size) | 0;
  if ($$0$i) {
   $$0 = $$0$i;
   return $$0 | 0;
  }
 }
 _png_warning($png_ptr, 74392);
 $$0 = 0;
 return $$0 | 0;
}

function _display_get_color($red, $green, $blue) {
 $red = $red | 0;
 $green = $green | 0;
 $blue = $blue | 0;
 var $3 = 0;
 if (!$red) ___assert_fail(18216, 18224, 195, 18256);
 if (!$green) ___assert_fail(18280, 18224, 196, 18256);
 if (!$blue) ___assert_fail(18288, 18224, 197, 18256); else {
  $3 = HEAP32[4531] | 0;
  HEAP32[$red >> 2] = $3 & 255;
  HEAP32[$green >> 2] = $3 >>> 8 & 255;
  HEAP32[$blue >> 2] = $3 >>> 16 & 255;
  return;
 }
}

function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $info, $adjustedPtr, $path_below);
 return;
}

function _mlua_sizeof_font($L) {
 $L = $L | 0;
 var $1 = 0, $h = 0, $w = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $w = sp + 4 | 0;
 $h = sp;
 if (!$L) ___assert_fail(23976, 5936, 68, 6072); else {
  $1 = _pop_font($L, 1) | 0;
  _font_get_textsize($1, _luaL_checklstring($L, 2, 0) | 0, $w, $h, -1);
  _lua_pushnumber($L, +HEAPF32[$w >> 2]);
  _lua_pushnumber($L, +HEAPF32[$h >> 2]);
  STACKTOP = sp;
  return 2;
 }
 return 0;
}

function __ZN14CustomListenerD0Ev($this) {
 $this = $this | 0;
 var $0 = 0;
 HEAP32[$this >> 2] = 2864;
 $0 = $this + 4 | 0;
 _luaL_unref(HEAP32[$0 >> 2] | 0, -1001e3, HEAP32[$this + 8 >> 2] | 0);
 _luaL_unref(HEAP32[$0 >> 2] | 0, -1001e3, HEAP32[$this + 12 >> 2] | 0);
 _luaL_unref(HEAP32[$0 >> 2] | 0, -1001e3, HEAP32[$this + 16 >> 2] | 0);
 _luaL_unref(HEAP32[$0 >> 2] | 0, -1001e3, HEAP32[$this + 20 >> 2] | 0);
 __ZdlPv($this);
 return;
}

function _b_test($L) {
 $L = $L | 0;
 var $0 = 0, $i$01$i = 0, $r$0$lcssa$i = 0, $r$02$i = 0;
 $0 = _lua_gettop($L) | 0;
 if (($0 | 0) < 1) $r$0$lcssa$i = 1; else {
  $i$01$i = 1;
  $r$02$i = -1;
  while (1) {
   $r$02$i = (_luaL_checkinteger($L, $i$01$i) | 0) & $r$02$i;
   if (($i$01$i | 0) == ($0 | 0)) break; else $i$01$i = $i$01$i + 1 | 0;
  }
  $r$0$lcssa$i = ($r$02$i | 0) != 0;
 }
 _lua_pushboolean($L, $r$0$lcssa$i & 1);
 return 1;
}

function _em_ui_callback($eventType, $uiEvent, $userData) {
 $eventType = $eventType | 0;
 $uiEvent = $uiEvent | 0;
 $userData = $userData | 0;
 var $1 = 0, $3 = 0, $5 = 0;
 $1 = HEAP32[$uiEvent + 12 >> 2] | 0;
 $3 = HEAP32[$uiEvent + 16 >> 2] | 0;
 if (!(_dlua_get_function(23808) | 0)) return 0;
 $5 = _dlua_get_lua_state() | 0;
 _lua_pushnumber($5, +($1 | 0));
 _lua_pushnumber($5, +($3 | 0));
 _call_lua_function($5, 2, 0);
 return 0;
}

function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535;
 $2 = $b & 65535;
 $3 = Math_imul($2, $1) | 0;
 $6 = $a >>> 16;
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
 $11 = $b >>> 16;
 $12 = Math_imul($11, $1) | 0;
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0;
}

function _mlua_play_music($L) {
 $L = $L | 0;
 var $1 = 0, $3 = 0, $onend$0 = 0;
 if (!$L) ___assert_fail(23976, 12256, 160, 12504);
 $1 = _pop_music($L, 1) | 0;
 $3 = (_lua_toboolean($L, 2) | 0) != 0;
 if ((_lua_gettop($L) | 0) <= 2) {
  $onend$0 = -2;
  _music_play($1, $3, $onend$0);
  return 0;
 }
 _luaL_checktype($L, 3, 6);
 _lua_pushvalue($L, 3);
 $onend$0 = _luaL_ref($L, -1001e3) | 0;
 _music_play($1, $3, $onend$0);
 return 0;
}

function _b_xor($L) {
 $L = $L | 0;
 var $0 = 0, $3 = 0, $i$01 = 0, $r$0$lcssa = 0, $r$02 = 0;
 $0 = _lua_gettop($L) | 0;
 if (($0 | 0) < 1) $r$0$lcssa = 0; else {
  $i$01 = 1;
  $r$02 = 0;
  while (1) {
   $3 = (_luaL_checkinteger($L, $i$01) | 0) ^ $r$02;
   if (($i$01 | 0) == ($0 | 0)) {
    $r$0$lcssa = $3;
    break;
   } else {
    $i$01 = $i$01 + 1 | 0;
    $r$02 = $3;
   }
  }
 }
 _lua_pushinteger($L, $r$0$lcssa);
 return 1;
}

function _io_write($L) {
 $L = $L | 0;
 var $0 = 0, $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 _lua_getfield($L, -1001e3, 56704) | 0;
 $0 = _lua_touserdata($L, -1) | 0;
 if (!(HEAP32[$0 + 4 >> 2] | 0)) {
  HEAP32[$vararg_buffer >> 2] = 56708;
  _luaL_error($L, 57216, $vararg_buffer) | 0;
 }
 $5 = _g_write($L, HEAP32[$0 >> 2] | 0, 1) | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function __ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
 $this = $this | 0;
 $manifold = $manifold | 0;
 $xfA = $xfA | 0;
 $xfB = $xfB | 0;
 __Z25b2CollidePolygonAndCircleP10b2ManifoldPK14b2PolygonShapeRK11b2TransformPK13b2CircleShapeS6_($manifold, HEAP32[(HEAP32[$this + 48 >> 2] | 0) + 12 >> 2] | 0, $xfA, HEAP32[(HEAP32[$this + 52 >> 2] | 0) + 12 >> 2] | 0, $xfB);
 return;
}

function _luaB_xpcall($L) {
 $L = $L | 0;
 var $$0$i = 0, $0 = 0;
 $0 = _lua_gettop($L) | 0;
 _luaL_checktype($L, 2, 6);
 _lua_pushboolean($L, 1);
 _lua_pushvalue($L, 1);
 _lua_rotate($L, 3, 2);
 if ((_lua_pcallk($L, $0 + -2 | 0, -1, 2, 2, 21) | 0) >>> 0 > 1) {
  _lua_pushboolean($L, 0);
  _lua_pushvalue($L, -2);
  $$0$i = 2;
  return $$0$i | 0;
 } else {
  $$0$i = (_lua_gettop($L) | 0) + -2 | 0;
  return $$0$i | 0;
 }
 return 0;
}

function _luaX_next($ls) {
 $ls = $ls | 0;
 var $12 = 0, $13 = 0, $3 = 0, $7 = 0;
 HEAP32[$ls + 8 >> 2] = HEAP32[$ls + 4 >> 2];
 $3 = $ls + 20 | 0;
 if ((HEAP32[$3 >> 2] | 0) == 289) {
  HEAP32[$ls + 12 >> 2] = _llex($ls, $ls + 16 | 0) | 0;
  return;
 } else {
  $7 = $3;
  $12 = HEAP32[$7 + 4 >> 2] | 0;
  $13 = $ls + 12 | 0;
  HEAP32[$13 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$13 + 4 >> 2] = $12;
  HEAP32[$3 >> 2] = 289;
  return;
 }
}

function _io_read($L) {
 $L = $L | 0;
 var $0 = 0, $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 _lua_getfield($L, -1001e3, 56680) | 0;
 $0 = _lua_touserdata($L, -1) | 0;
 if (!(HEAP32[$0 + 4 >> 2] | 0)) {
  HEAP32[$vararg_buffer >> 2] = 56684;
  _luaL_error($L, 57216, $vararg_buffer) | 0;
 }
 $5 = _g_read($L, HEAP32[$0 >> 2] | 0, 1) | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function _b_or($L) {
 $L = $L | 0;
 var $0 = 0, $3 = 0, $i$01 = 0, $r$0$lcssa = 0, $r$02 = 0;
 $0 = _lua_gettop($L) | 0;
 if (($0 | 0) < 1) $r$0$lcssa = 0; else {
  $i$01 = 1;
  $r$02 = 0;
  while (1) {
   $3 = _luaL_checkinteger($L, $i$01) | 0 | $r$02;
   if (($i$01 | 0) == ($0 | 0)) {
    $r$0$lcssa = $3;
    break;
   } else {
    $i$01 = $i$01 + 1 | 0;
    $r$02 = $3;
   }
  }
 }
 _lua_pushinteger($L, $r$0$lcssa);
 return 1;
}

function _luaL_getmetafield($L, $obj, $event) {
 $L = $L | 0;
 $obj = $obj | 0;
 $event = $event | 0;
 var $$0 = 0, $2 = 0;
 if (!(_lua_getmetatable($L, $obj) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 _lua_pushstring($L, $event) | 0;
 $2 = _lua_rawget($L, -2) | 0;
 if (!$2) {
  _lua_settop($L, -3);
  $$0 = 0;
  return $$0 | 0;
 } else {
  _lua_rotate($L, -2, -1);
  _lua_settop($L, -2);
  $$0 = $2;
  return $$0 | 0;
 }
 return 0;
}

function __Z18mlua_get_mass_bodyP9lua_State($L) {
 $L = $L | 0;
 var $1 = 0, $2 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!$L) ___assert_fail(23976, 5248, 102, 5440);
 $1 = __Z8pop_bodyP9lua_Statei($L, 1) | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!$2) {
  _luaL_error($L, 5336, sp) | 0;
  $5 = HEAP32[$1 >> 2] | 0;
 } else $5 = $2;
 _lua_pushnumber($L, +HEAPF32[$5 + 116 >> 2]);
 STACKTOP = sp;
 return 1;
}

function _pairsmeta($L, $method, $iszero, $iter) {
 $L = $L | 0;
 $method = $method | 0;
 $iszero = $iszero | 0;
 $iter = $iter | 0;
 if (_luaL_getmetafield($L, 1, $method) | 0) {
  _lua_pushvalue($L, 1);
  _lua_callk($L, 1, 3, 0, 0);
  return;
 }
 _luaL_checktype($L, 1, 5);
 _lua_pushcclosure($L, $iter, 0);
 _lua_pushvalue($L, 1);
 if (!$iszero) {
  _lua_pushnil($L);
  return;
 } else {
  _lua_pushinteger($L, 0);
  return;
 }
}

function _luaB_coresume($L) {
 $L = $L | 0;
 var $$0 = 0, $0 = 0, $4 = 0;
 $0 = _lua_tothread($L, 1) | 0;
 if (!$0) _luaL_argerror($L, 1, 65864) | 0;
 $4 = _auxresume($L, $0, (_lua_gettop($L) | 0) + -1 | 0) | 0;
 if (($4 | 0) < 0) {
  _lua_pushboolean($L, 0);
  _lua_rotate($L, -2, 1);
  $$0 = 2;
  return $$0 | 0;
 } else {
  _lua_pushboolean($L, 1);
  _lua_rotate($L, ~$4, 1);
  $$0 = $4 + 1 | 0;
  return $$0 | 0;
 }
 return 0;
}

function _buffer_upload_and_free($b) {
 $b = $b | 0;
 var $1 = 0;
 if (!$b) ___assert_fail(23160, 22016, 263, 22424); else {
  _buffer_upload($b, 35044);
  $1 = $b + 24 | 0;
  _free(HEAP32[$1 >> 2] | 0);
  _free(HEAP32[$b + 28 >> 2] | 0);
  _free(HEAP32[$b + 32 >> 2] | 0);
  _free(HEAP32[$b + 36 >> 2] | 0);
  HEAP32[$1 + 0 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$1 + 8 >> 2] = 0;
  HEAP32[$1 + 12 >> 2] = 0;
  return;
 }
}

function __ZN23b2EdgeAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
 $this = $this | 0;
 $manifold = $manifold | 0;
 $xfA = $xfA | 0;
 $xfB = $xfB | 0;
 __Z23b2CollideEdgeAndPolygonP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS6_($manifold, HEAP32[(HEAP32[$this + 48 >> 2] | 0) + 12 >> 2] | 0, $xfA, HEAP32[(HEAP32[$this + 52 >> 2] | 0) + 12 >> 2] | 0, $xfB);
 return;
}

function _mlua_upload_and_free_buffer($L) {
 $L = $L | 0;
 var $$0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!$L) ___assert_fail(23976, 19560, 91, 19784);
 $1 = _pop_buffer($L, 1) | 0;
 if (!(HEAP32[$1 + 24 >> 2] | 0)) {
  $$0 = _luaL_error($L, 19816, sp) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  _buffer_upload_and_free($1);
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _luaF_initupvals($L, $cl) {
 $L = $L | 0;
 $cl = $cl | 0;
 var $0 = 0, $3 = 0, $i$01 = 0;
 $0 = $cl + 6 | 0;
 if (!(HEAP8[$0 >> 0] | 0)) return; else $i$01 = 0;
 do {
  $3 = _luaM_realloc_($L, 0, 0, 16) | 0;
  HEAP32[$3 + 4 >> 2] = 1;
  HEAP32[$3 >> 2] = $3 + 8;
  HEAP32[$3 + 12 >> 2] = 0;
  HEAP32[$cl + ($i$01 << 2) + 16 >> 2] = $3;
  $i$01 = $i$01 + 1 | 0;
 } while (($i$01 | 0) < (HEAPU8[$0 >> 0] | 0));
 return;
}

function _sort_comp($L, $a, $b) {
 $L = $L | 0;
 $a = $a | 0;
 $b = $b | 0;
 var $$0 = 0, $4 = 0;
 if (!(_lua_type($L, 2) | 0)) {
  $$0 = _lua_compare($L, $a, $b, 1) | 0;
  return $$0 | 0;
 } else {
  _lua_pushvalue($L, 2);
  _lua_pushvalue($L, $a + -1 | 0);
  _lua_pushvalue($L, $b + -2 | 0);
  _lua_callk($L, 2, 1, 0, 0);
  $4 = _lua_toboolean($L, -1) | 0;
  _lua_settop($L, -2);
  $$0 = $4;
  return $$0 | 0;
 }
 return 0;
}

function _dlua_add_arg($arg) {
 $arg = $arg | 0;
 var $0 = 0, $4 = 0;
 $0 = HEAP32[16] | 0;
 if (_lua_gettop($0) | 0) ___assert_fail(104, 128, 108, 144);
 if (!$arg) ___assert_fail(96, 128, 110, 144);
 _lua_getglobal($0, 96) | 0;
 $4 = _luaL_len($0, -1) | 0;
 _lua_pushstring($0, $arg) | 0;
 _lua_rawseti($0, -2, $4 + 1 | 0);
 _lua_settop($0, -2);
 if (!(_lua_gettop($0) | 0)) return; else ___assert_fail(104, 128, 117, 144);
}

function __ZN22b2EdgeAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
 $this = $this | 0;
 $manifold = $manifold | 0;
 $xfA = $xfA | 0;
 $xfB = $xfB | 0;
 __Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_($manifold, HEAP32[(HEAP32[$this + 48 >> 2] | 0) + 12 >> 2] | 0, $xfA, HEAP32[(HEAP32[$this + 52 >> 2] | 0) + 12 >> 2] | 0, $xfB);
 return;
}

function _luaV_mod($L, $m, $n) {
 $L = $L | 0;
 $m = $m | 0;
 $n = $n | 0;
 var $$0 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (($n + 1 | 0) >>> 0 >= 2) {
  $3 = ($m | 0) % ($n | 0) | 0;
  $$0 = (($3 | 0) != 0 & ($n ^ $m | 0) < 0 ? $n : 0) + $3 | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!$n) _luaG_runerror($L, 64112, sp); else {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function __ZN14CustomListenerD2Ev($this) {
 $this = $this | 0;
 var $0 = 0;
 HEAP32[$this >> 2] = 2864;
 $0 = $this + 4 | 0;
 _luaL_unref(HEAP32[$0 >> 2] | 0, -1001e3, HEAP32[$this + 8 >> 2] | 0);
 _luaL_unref(HEAP32[$0 >> 2] | 0, -1001e3, HEAP32[$this + 12 >> 2] | 0);
 _luaL_unref(HEAP32[$0 >> 2] | 0, -1001e3, HEAP32[$this + 16 >> 2] | 0);
 _luaL_unref(HEAP32[$0 >> 2] | 0, -1001e3, HEAP32[$this + 20 >> 2] | 0);
 return;
}

function _luaL_testudata($L, $ud, $tname) {
 $L = $L | 0;
 $ud = $ud | 0;
 $tname = $tname | 0;
 var $$0 = 0, $0 = 0, $5 = 0;
 $0 = _lua_touserdata($L, $ud) | 0;
 if (!$0) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(_lua_getmetatable($L, $ud) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 _lua_getfield($L, -1001e3, $tname) | 0;
 $5 = (_lua_rawequal($L, -1, -2) | 0) == 0;
 _lua_settop($L, -3);
 $$0 = $5 ? 0 : $0;
 return $$0 | 0;
}

function _mlua_set_volume_music($L) {
 $L = $L | 0;
 var $1 = 0, $2 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!$L) ___assert_fail(23976, 12256, 147, 12432);
 $1 = _pop_music($L, 1) | 0;
 $2 = +_luaL_checknumber($L, 2);
 if ($2 >= 0.0 & $2 <= 1.0) {
  _music_set_volume($1, $2);
  STACKTOP = sp;
  return 0;
 }
 _luaL_error($L, 12456, sp) | 0;
 _music_set_volume($1, $2);
 STACKTOP = sp;
 return 0;
}

function _mlua_log_debug($L) {
 $L = $L | 0;
 var $0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $0 = _luaL_checklstring($L, 1, 0) | 0;
 HEAP32[$vararg_buffer >> 2] = 128;
 HEAP32[$vararg_buffer + 4 >> 2] = 321;
 HEAP32[$vararg_buffer + 8 >> 2] = 552;
 HEAP32[$vararg_buffer + 12 >> 2] = $0;
 _log_internal(3, 848, 536, $vararg_buffer);
 STACKTOP = sp;
 return 0;
}

function _display_draw_point($x, $y, $size) {
 $x = +$x;
 $y = +$y;
 $size = +$size;
 var $0 = 0, $1 = 0;
 $0 = HEAP32[4530] | 0;
 _buffer_check_type($0, 1);
 _buffer_check_not_use_texture($0);
 _buffer_check_not_full($0);
 _buffer_push_vertex($0, $x, $y);
 _buffer_push_point_size($0, $size);
 $1 = HEAP32[4531] | 0;
 _buffer_push_color($0, $1 & 255, ($1 & 65535) >>> 8 & 255, $1 >>> 16 & 255, $1 >>> 24 & 255);
 return;
}

function _lua_pushlstring($L, $s, $len) {
 $L = $L | 0;
 $s = $s | 0;
 $len = $len | 0;
 var $5 = 0, $6 = 0, $7 = 0;
 if ((HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 12 >> 2] | 0) > 0) _luaC_step($L);
 $5 = _luaS_newlstr($L, $s, $len) | 0;
 $6 = $L + 8 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 HEAP32[$7 >> 2] = $5;
 HEAP32[$7 + 4 >> 2] = HEAPU8[$5 + 4 >> 0] | 0 | 64;
 HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 8;
 return $5 + 24 | 0;
}

function _searcher_preload($L) {
 $L = $L | 0;
 var $0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $0 = _luaL_checklstring($L, 1, 0) | 0;
 _lua_getfield($L, -1001e3, 58552) | 0;
 if (_lua_getfield($L, -1, $0) | 0) {
  STACKTOP = sp;
  return 1;
 }
 HEAP32[$vararg_buffer >> 2] = $0;
 _lua_pushfstring($L, 59080, $vararg_buffer) | 0;
 STACKTOP = sp;
 return 1;
}

function __Z19mlua_set_angle_bodyP9lua_State($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = __Z8pop_bodyP9lua_Statei($L, 1) | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) {
  _luaL_error($L, 5336, sp) | 0;
  $5 = HEAP32[$0 >> 2] | 0;
 } else $5 = $1;
 __ZN6b2Body12SetTransformERK6b2Vec2f($5, $5 + 12 | 0, +_luaL_checknumber($L, 2));
 STACKTOP = sp;
 return 0;
}

function _png_zalloc($png_ptr, $items, $size) {
 $png_ptr = $png_ptr | 0;
 $items = $items | 0;
 $size = $size | 0;
 var $$0 = 0;
 if (!$png_ptr) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((4294967295 / ($size >>> 0) | 0) >>> 0 > $items >>> 0) {
  $$0 = _png_malloc_warn($png_ptr, Math_imul($size, $items) | 0) | 0;
  return $$0 | 0;
 } else {
  _png_warning($png_ptr, 71712);
  $$0 = 0;
  return $$0 | 0;
 }
 return 0;
}

function _luaopen_math($L) {
 $L = $L | 0;
 _luaL_checkversion_($L, 503.0, 68);
 _lua_createtable($L, 0, 35);
 _luaL_setfuncs($L, 57360, 0);
 _lua_pushnumber($L, 3.1415927410125732);
 _lua_setfield($L, -2, 57648);
 _lua_pushnumber($L, inf);
 _lua_setfield($L, -2, 57656);
 _lua_pushinteger($L, 2147483647);
 _lua_setfield($L, -2, 57664);
 _lua_pushinteger($L, -2147483648);
 _lua_setfield($L, -2, 57680);
 return 1;
}

function _luaL_execresult($L, $stat) {
 $L = $L | 0;
 $stat = $stat | 0;
 var $1 = 0;
 if (($stat | 0) == -1) {
  $1 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  _lua_pushnil($L);
  _lua_pushstring($L, _strerror($1 | 0) | 0) | 0;
  _lua_pushinteger($L, $1);
  return 3;
 } else if (!$stat) _lua_pushboolean($L, 1); else _lua_pushnil($L);
 _lua_pushstring($L, 59752) | 0;
 _lua_pushinteger($L, $stat);
 return 3;
}

function _display_free_surface($surface) {
 $surface = $surface | 0;
 if (!$surface) return;
 if ((HEAP32[4529] | 0) == ($surface | 0)) {
  _buffer_check_not_use_texture(HEAP32[4530] | 0);
  _glBindTexture(3553, 0);
  HEAP32[4529] = 0;
 }
 if ((HEAP32[4528] | 0) == ($surface | 0)) {
  _buffer_check_empty(HEAP32[4530] | 0);
  _glBindFramebuffer(36160, 0);
  HEAP32[4528] = 0;
 }
 _surface_free($surface);
 return;
}

function __ZSt9terminatev() {
 var $0 = 0, $17 = 0, $2 = 0, $5 = 0;
 $0 = ___cxa_get_globals_fast() | 0;
 if ($0) {
  $2 = HEAP32[$0 >> 2] | 0;
  if ($2) {
   $5 = $2 + 48 | 0;
   if ((HEAP32[$5 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[$5 + 4 >> 2] | 0) == 1129074247 : 0) __ZSt11__terminatePFvvE(HEAP32[$2 + 12 >> 2] | 0);
  }
 }
 $17 = HEAP32[26444] | 0;
 HEAP32[26444] = $17 + 0;
 __ZSt11__terminatePFvvE($17);
}

function _buffer_push_point_size($b, $s) {
 $b = $b | 0;
 $s = +$s;
 var $1 = 0, $2 = 0;
 if (!$b) ___assert_fail(23160, 22016, 250, 22384);
 $1 = $b + 52 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if ($2 >>> 0 < (HEAP32[$b + 4 >> 2] | 0) >>> 0) {
  HEAPF32[(HEAP32[$b + 36 >> 2] | 0) + ($2 << 2) >> 2] = $s;
  HEAP32[$1 >> 2] = $2 + 1;
  HEAP8[$b + 56 >> 0] = 0;
  return;
 } else ___assert_fail(22408, 22016, 254, 22384);
}

function _png_handle_IEND($png_ptr, $info_ptr, $length) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 $length = $length | 0;
 var $0 = 0, $1 = 0;
 $0 = $png_ptr + 208 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (($1 & 5 | 0) != 5) _png_chunk_error($png_ptr, 75472);
 HEAP32[$0 >> 2] = $1 | 24;
 _png_crc_finish($png_ptr, $length) | 0;
 if (!$length) return;
 _png_chunk_benign_error($png_ptr, 75488);
 return;
}

function _copysign($x, $y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $6 = 0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = $y;
 $6 = HEAP32[tempDoublePtr + 4 >> 2] & -2147483648 | $1 & 2147483647;
 HEAP32[tempDoublePtr >> 2] = $0;
 HEAP32[tempDoublePtr + 4 >> 2] = $6;
 return +(+HEAPF64[tempDoublePtr >> 3]);
}

function _mlua_use_buffer($L) {
 $L = $L | 0;
 var $$0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!$L) ___assert_fail(23976, 19560, 47, 19656);
 $1 = _pop_buffer($L, 1) | 0;
 if (!(HEAP32[$1 + 24 >> 2] | 0)) {
  $$0 = _luaL_error($L, 19672, sp) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  _display_use_buffer($1);
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function ___memrchr($m, $c, $n) {
 $m = $m | 0;
 $c = $c | 0;
 $n = $n | 0;
 var $$0 = 0, $$01 = 0, $0 = 0, $3 = 0, label = 0;
 $0 = $c & 255;
 $$01 = $n;
 while (1) {
  if (!$$01) {
   $$0 = 0;
   label = 4;
   break;
  }
  $$01 = $$01 + -1 | 0;
  $3 = $m + $$01 | 0;
  if ((HEAP8[$3 >> 0] | 0) == $0 << 24 >> 24) {
   $$0 = $3;
   label = 4;
   break;
  }
 }
 if ((label | 0) == 4) return $$0 | 0;
 return 0;
}

function _music_stop($m) {
 $m = $m | 0;
 var $1 = 0, $7 = 0;
 if (!$m) ___assert_fail(23232, 10720, 114, 10776);
 $1 = HEAP32[$m >> 2] | 0;
 if (!$1) return;
 _alSourceStop(HEAP32[$1 >> 2] | 0);
 _alSourcei(HEAP32[HEAP32[$m >> 2] >> 2] | 0, 4105, 0);
 $7 = HEAP32[$m + 20 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[$7 + 4 >> 2] & 127]($7);
 HEAP8[(HEAP32[$m >> 2] | 0) + 4 >> 0] = 0;
 HEAP32[$m >> 2] = 0;
 return;
}

function ___uflow($f) {
 $f = $f | 0;
 var $$0 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $c = sp;
 if (!(HEAP32[$f + 8 >> 2] | 0)) if (!(___toread($f) | 0)) label = 3; else $$0 = -1; else label = 3;
 if ((label | 0) == 3) if ((FUNCTION_TABLE_iiii[HEAP32[$f + 32 >> 2] & 31]($f, $c, 1) | 0) == 1) $$0 = HEAPU8[$c >> 0] | 0; else $$0 = -1;
 STACKTOP = sp;
 return $$0 | 0;
}

function _mlua_set_pitch_music($L) {
 $L = $L | 0;
 var $1 = 0, $2 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!$L) ___assert_fail(23976, 12256, 134, 12360);
 $1 = _pop_music($L, 1) | 0;
 $2 = +_luaL_checknumber($L, 2);
 if ($2 > 0.0) {
  _music_set_pitch($1, $2);
  STACKTOP = sp;
  return 0;
 }
 _luaL_error($L, 12384, sp) | 0;
 _music_set_pitch($1, $2);
 STACKTOP = sp;
 return 0;
}

function _system_reset($s) {
 $s = $s | 0;
 var $1 = 0, $2 = 0, $4 = 0, $i$01 = 0;
 if (!$s) ___assert_fail(23264, 10392, 82, 10456);
 $1 = $s + 408 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!$2) {
  HEAP32[$1 >> 2] = 0;
  return;
 }
 $4 = HEAP32[$s >> 2] | 0;
 $i$01 = 0;
 do {
  HEAP8[$4 + ($i$01 * 56 | 0) >> 0] = 1;
  $i$01 = $i$01 + 1 | 0;
 } while ($i$01 >>> 0 < $2 >>> 0);
 HEAP32[$1 >> 2] = 0;
 return;
}

function _luaE_freeCI($L) {
 $L = $L | 0;
 var $2 = 0, $3 = 0, $next$01 = 0, $next$01$looptemp = 0;
 $2 = (HEAP32[$L + 16 >> 2] | 0) + 12 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 HEAP32[$2 >> 2] = 0;
 if (!$3) return; else $next$01 = $3;
 do {
  $next$01$looptemp = $next$01;
  $next$01 = HEAP32[$next$01 + 12 >> 2] | 0;
  _luaM_realloc_($L, $next$01$looptemp, 36, 0) | 0;
 } while (($next$01 | 0) != 0);
 return;
}

function __ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
 $this = $this | 0;
 $manifold = $manifold | 0;
 $xfA = $xfA | 0;
 $xfB = $xfB | 0;
 __Z17b2CollidePolygonsP10b2ManifoldPK14b2PolygonShapeRK11b2TransformS3_S6_($manifold, HEAP32[(HEAP32[$this + 48 >> 2] | 0) + 12 >> 2] | 0, $xfA, HEAP32[(HEAP32[$this + 52 >> 2] | 0) + 12 >> 2] | 0, $xfB);
 return;
}

function _lua_dump($L, $writer, $data, $strip) {
 $L = $L | 0;
 $writer = $writer | 0;
 $data = $data | 0;
 $strip = $strip | 0;
 var $1 = 0, $status$0 = 0;
 $1 = HEAP32[$L + 8 >> 2] | 0;
 if ((HEAP32[$1 + -4 >> 2] | 0) != 70) {
  $status$0 = 1;
  return $status$0 | 0;
 }
 $status$0 = _luaU_dump($L, HEAP32[(HEAP32[$1 + -8 >> 2] | 0) + 12 >> 2] | 0, $writer, $data, $strip) | 0;
 return $status$0 | 0;
}

function _display_set_color($red, $green, $blue) {
 $red = $red | 0;
 $green = $green | 0;
 $blue = $blue | 0;
 if ($red >>> 0 >= 256) ___assert_fail(18672, 18224, 390, 18696);
 if ($green >>> 0 >= 256) ___assert_fail(18720, 18224, 391, 18696);
 if ($blue >>> 0 < 256) {
  HEAP8[18124] = $red;
  HEAP8[18125] = $green;
  HEAP8[18126] = $blue;
  return;
 } else ___assert_fail(18752, 18224, 392, 18696);
}

function __Z14b2PairLessThanRK6b2PairS1_($pair1, $pair2) {
 $pair1 = $pair1 | 0;
 $pair2 = $pair2 | 0;
 var $$0 = 0, $0 = 0, $1 = 0;
 $0 = HEAP32[$pair1 >> 2] | 0;
 $1 = HEAP32[$pair2 >> 2] | 0;
 if (($0 | 0) < ($1 | 0)) {
  $$0 = 1;
  return $$0 | 0;
 }
 if (($0 | 0) != ($1 | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $$0 = (HEAP32[$pair1 + 4 >> 2] | 0) < (HEAP32[$pair2 + 4 >> 2] | 0);
 return $$0 | 0;
}

function __ZN15b2CircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
 $this = $this | 0;
 $manifold = $manifold | 0;
 $xfA = $xfA | 0;
 $xfB = $xfB | 0;
 __Z16b2CollideCirclesP10b2ManifoldPK13b2CircleShapeRK11b2TransformS3_S6_($manifold, HEAP32[(HEAP32[$this + 48 >> 2] | 0) + 12 >> 2] | 0, $xfA, HEAP32[(HEAP32[$this + 52 >> 2] | 0) + 12 >> 2] | 0, $xfB);
 return;
}

function __Z29mlua_set_angular_damping_bodyP9lua_State($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = __Z8pop_bodyP9lua_Statei($L, 1) | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) {
  _luaL_error($L, 5336, sp) | 0;
  $5 = HEAP32[$0 >> 2] | 0;
 } else $5 = $1;
 HEAPF32[$5 + 136 >> 2] = +_luaL_checknumber($L, 2);
 STACKTOP = sp;
 return 0;
}

function __Z28mlua_set_linear_damping_bodyP9lua_State($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = __Z8pop_bodyP9lua_Statei($L, 1) | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) {
  _luaL_error($L, 5336, sp) | 0;
  $5 = HEAP32[$0 >> 2] | 0;
 } else $5 = $1;
 HEAPF32[$5 + 132 >> 2] = +_luaL_checknumber($L, 2);
 STACKTOP = sp;
 return 0;
}

function _hookf($L, $ar) {
 $L = $L | 0;
 $ar = $ar | 0;
 var $6 = 0;
 _lua_rawgetp($L, -1001e3, 66552) | 0;
 _lua_pushthread($L) | 0;
 if ((_lua_rawget($L, -2) | 0) != 6) return;
 _lua_pushstring($L, HEAP32[66576 + (HEAP32[$ar >> 2] << 2) >> 2] | 0) | 0;
 $6 = HEAP32[$ar + 20 >> 2] | 0;
 if (($6 | 0) > -1) _lua_pushinteger($L, $6); else _lua_pushnil($L);
 _lua_callk($L, 2, 0, 0, 0);
 return;
}

function _math_log($L) {
 $L = $L | 0;
 var $0 = 0.0, $4 = 0.0, $res$0 = 0.0;
 $0 = +_luaL_checknumber($L, 1);
 do if ((_lua_type($L, 2) | 0) < 1) $res$0 = +Math_log(+$0); else {
  $4 = +_luaL_checknumber($L, 2);
  if ($4 == 10.0) {
   $res$0 = +_log10f($0);
   break;
  } else {
   $res$0 = +Math_log(+$0) / +Math_log(+$4);
   break;
  }
 } while (0);
 _lua_pushnumber($L, $res$0);
 return 1;
}

function _png_destroy_info_struct($png_ptr, $info_ptr_ptr) {
 $png_ptr = $png_ptr | 0;
 $info_ptr_ptr = $info_ptr_ptr | 0;
 var $2 = 0;
 if (($png_ptr | 0) == 0 | ($info_ptr_ptr | 0) == 0) return;
 $2 = HEAP32[$info_ptr_ptr >> 2] | 0;
 if (!$2) return;
 HEAP32[$info_ptr_ptr >> 2] = 0;
 _png_free_data($png_ptr, $2, 32767, -1);
 _memset($2 | 0, 0, 268) | 0;
 _png_free($png_ptr, $2);
 return;
}

function __Z30mlua_get_angular_velocity_bodyP9lua_State($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = __Z8pop_bodyP9lua_Statei($L, 1) | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) {
  _luaL_error($L, 5336, sp) | 0;
  $4 = HEAP32[$0 >> 2] | 0;
 } else $4 = $1;
 _lua_pushnumber($L, +HEAPF32[$4 + 72 >> 2]);
 STACKTOP = sp;
 return 1;
}

function __Z29mlua_get_angular_damping_bodyP9lua_State($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = __Z8pop_bodyP9lua_Statei($L, 1) | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) {
  _luaL_error($L, 5336, sp) | 0;
  $4 = HEAP32[$0 >> 2] | 0;
 } else $4 = $1;
 _lua_pushnumber($L, +HEAPF32[$4 + 136 >> 2]);
 STACKTOP = sp;
 return 1;
}

function __Z28mlua_get_linear_damping_bodyP9lua_State($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = __Z8pop_bodyP9lua_Statei($L, 1) | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) {
  _luaL_error($L, 5336, sp) | 0;
  $4 = HEAP32[$0 >> 2] | 0;
 } else $4 = $1;
 _lua_pushnumber($L, +HEAPF32[$4 + 132 >> 2]);
 STACKTOP = sp;
 return 1;
}

function _ll_searchpath($L) {
 $L = $L | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0;
 $0 = _luaL_checklstring($L, 1, 0) | 0;
 $1 = _luaL_checklstring($L, 2, 0) | 0;
 $2 = _luaL_optlstring($L, 3, 107776, 0) | 0;
 if (_searchpath($L, $0, $1, $2, _luaL_optlstring($L, 4, 58832, 0) | 0) | 0) {
  $$0 = 1;
  return $$0 | 0;
 }
 _lua_pushnil($L);
 _lua_rotate($L, -2, 1);
 $$0 = 2;
 return $$0 | 0;
}

function _is_directory($directory) {
 $directory = $directory | 0;
 var $$0 = 0, $s = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $s = sp;
 if (!$directory) ___assert_fail(904, 856, 186, 920);
 if ((_stat($directory | 0, $s | 0) | 0) < 0) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $$0 = (HEAP32[$s + 12 >> 2] & 61440 | 0) == 16384;
 STACKTOP = sp;
 return $$0 | 0;
}

function _mlua_set_sound_volume($L) {
 $L = $L | 0;
 var $1 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!$L) ___assert_fail(23976, 12096, 27, 12128);
 $1 = +_luaL_checknumber($L, 1);
 if ($1 >= 0.0 & $1 <= 1.0) {
  _audio_set_sound_volume($1);
  STACKTOP = sp;
  return 0;
 }
 _luaL_error($L, 12152, sp) | 0;
 _audio_set_sound_volume($1);
 STACKTOP = sp;
 return 0;
}

function _mlua_set_music_volume($L) {
 $L = $L | 0;
 var $1 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!$L) ___assert_fail(23976, 12096, 39, 12192);
 $1 = +_luaL_checknumber($L, 1);
 if ($1 >= 0.0 & $1 <= 1.0) {
  _audio_set_music_volume($1);
  STACKTOP = sp;
  return 0;
 }
 _luaL_error($L, 12216, sp) | 0;
 _audio_set_music_volume($1);
 STACKTOP = sp;
 return 0;
}

function _mlua_new_buffer($L) {
 $L = $L | 0;
 var $buffer$0 = 0;
 if (!$L) ___assert_fail(23976, 19560, 31, 19640);
 if ((_lua_gettop($L) | 0) == 1) $buffer$0 = _display_new_buffer(_luaL_checkinteger($L, 1) | 0) | 0; else $buffer$0 = _display_new_buffer(24576) | 0;
 if (!$buffer$0) ___assert_fail(22256, 19560, 40, 19640); else {
  _push_buffer($L, $buffer$0);
  return 1;
 }
 return 0;
}

function _vmc_feed_buffer($mc, $buffer, $len) {
 $mc = $mc | 0;
 $buffer = $buffer | 0;
 $len = $len | 0;
 var $4 = 0, $6 = 0;
 if (!$mc) ___assert_fail(10960, 10720, 250, 10968); else {
  $4 = $mc + 20 | 0;
  $6 = _stb_vorbis_get_samples_short_interleaved(HEAP32[$mc + 12 >> 2] | 0, HEAP32[$4 >> 2] | 0, $buffer, $len) | 0;
  return Math_imul(HEAP32[$4 >> 2] | 0, $6) | 0;
 }
 return 0;
}

function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $rem = __stackBase__ | 0;
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
 STACKTOP = __stackBase__;
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}

function _png_icc_check_length($png_ptr, $colorspace, $name, $profile_length) {
 $png_ptr = $png_ptr | 0;
 $colorspace = $colorspace | 0;
 $name = $name | 0;
 $profile_length = $profile_length | 0;
 var $$0 = 0;
 if ($profile_length >>> 0 >= 132) {
  $$0 = 1;
  return $$0 | 0;
 }
 _png_icc_profile_error($png_ptr, $colorspace, $name, $profile_length, 75672);
 $$0 = 0;
 return $$0 | 0;
}

function _lua_pushfstring($L, $fmt, $varargs) {
 $L = $L | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $5 = 0, $argp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $argp = sp;
 if ((HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 12 >> 2] | 0) > 0) _luaC_step($L);
 HEAP32[$argp >> 2] = $varargs;
 $5 = _luaO_pushvfstring($L, $fmt, $argp) | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function _f_lines($L) {
 $L = $L | 0;
 var $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!(HEAP32[(_luaL_checkudata($L, 1, 56736) | 0) + 4 >> 2] | 0)) _luaL_error($L, 56960, sp) | 0;
 $4 = _lua_gettop($L) | 0;
 _lua_pushinteger($L, $4 + -1 | 0);
 _lua_pushboolean($L, 0);
 _lua_rotate($L, 2, 2);
 _lua_pushcclosure($L, 350, $4 + 2 | 0);
 STACKTOP = sp;
 return 1;
}

function _dlua_call_init() {
 var $0 = 0;
 $0 = HEAP32[16] | 0;
 _lua_rawgeti($0, -1001e3, HEAP32[18] | 0) | 0;
 _lua_pushstring($0, 59160) | 0;
 _lua_rawget($0, -2) | 0;
 _lua_rotate($0, (_lua_gettop($0) | 0) + -1 | 0, -1);
 _lua_settop($0, -2);
 if ((_lua_type($0, -1) | 0) == 6) {
  _call_lua_function(HEAP32[16] | 0, 0, 0);
  return;
 } else {
  _lua_settop($0, -2);
  return;
 }
}

function _dlua_call_draw() {
 var $0 = 0;
 $0 = HEAP32[16] | 0;
 _lua_rawgeti($0, -1001e3, HEAP32[18] | 0) | 0;
 _lua_pushstring($0, 13576) | 0;
 _lua_rawget($0, -2) | 0;
 _lua_rotate($0, (_lua_gettop($0) | 0) + -1 | 0, -1);
 _lua_settop($0, -2);
 if ((_lua_type($0, -1) | 0) == 6) {
  _call_lua_function(HEAP32[16] | 0, 0, 0);
  return;
 } else {
  _lua_settop($0, -2);
  return;
 }
}

function _dlua_call_atexit() {
 var $0 = 0;
 $0 = HEAP32[16] | 0;
 _lua_rawgeti($0, -1001e3, HEAP32[18] | 0) | 0;
 _lua_pushstring($0, 256) | 0;
 _lua_rawget($0, -2) | 0;
 _lua_rotate($0, (_lua_gettop($0) | 0) + -1 | 0, -1);
 _lua_settop($0, -2);
 if ((_lua_type($0, -1) | 0) == 6) {
  _call_lua_function(HEAP32[16] | 0, 0, 0);
  return;
 } else {
  _lua_settop($0, -2);
  return;
 }
}

function _display_set_blend_mode($mode) {
 $mode = $mode | 0;
 _buffer_check_empty(HEAP32[4530] | 0);
 if (!$mode) {
  _glBlendFunc(770, 771);
  _glBlendEquation(32774);
  return;
 } else if (($mode | 0) == 2) {
  _glBlendFunc(774, 771);
  _glBlendEquation(32774);
  return;
 } else if (($mode | 0) == 1) {
  _glBlendFunc(770, 1);
  _glBlendEquation(32774);
  return;
 } else return;
}

function _b_lshift($L) {
 $L = $L | 0;
 var $$1$i = 0, $0 = 0, $1 = 0, $3 = 0;
 $0 = _luaL_checkinteger($L, 1) | 0;
 $1 = _luaL_checkinteger($L, 2) | 0;
 if (($1 | 0) < 0) {
  $3 = 0 - $1 | 0;
  $$1$i = ($3 | 0) > 31 ? 0 : $0 >>> $3;
  _lua_pushinteger($L, $$1$i);
  return 1;
 } else {
  $$1$i = ($1 | 0) > 31 ? 0 : $0 << $1;
  _lua_pushinteger($L, $$1$i);
  return 1;
 }
 return 0;
}

function _b_rshift($L) {
 $L = $L | 0;
 var $$1$i = 0, $0 = 0, $1 = 0, $2 = 0;
 $0 = _luaL_checkinteger($L, 1) | 0;
 $1 = _luaL_checkinteger($L, 2) | 0;
 $2 = 0 - $1 | 0;
 if (($1 | 0) > 0) {
  $$1$i = ($1 | 0) > 31 ? 0 : $0 >>> $1;
  _lua_pushinteger($L, $$1$i);
  return 1;
 } else {
  $$1$i = ($2 | 0) > 31 ? 0 : $0 << $2;
  _lua_pushinteger($L, $$1$i);
  return 1;
 }
 return 0;
}

function __Z19mlua_get_angle_bodyP9lua_State($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = __Z8pop_bodyP9lua_Statei($L, 1) | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) {
  _luaL_error($L, 5336, sp) | 0;
  $4 = HEAP32[$0 >> 2] | 0;
 } else $4 = $1;
 _lua_pushnumber($L, +HEAPF32[$4 + 56 >> 2]);
 STACKTOP = sp;
 return 1;
}

function _luaL_loadbufferx($L, $buff, $size, $name, $mode) {
 $L = $L | 0;
 $buff = $buff | 0;
 $size = $size | 0;
 $name = $name | 0;
 $mode = $mode | 0;
 var $1 = 0, $ls = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ls = sp;
 HEAP32[$ls >> 2] = $buff;
 HEAP32[$ls + 4 >> 2] = $size;
 $1 = _lua_load($L, 16, $ls, $name, $mode) | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function _luaT_init($L) {
 $L = $L | 0;
 var $0 = 0, $3 = 0, $i$01 = 0;
 $0 = $L + 12 | 0;
 $i$01 = 0;
 do {
  $3 = _luaS_new($L, HEAP32[62952 + ($i$01 << 2) >> 2] | 0) | 0;
  HEAP32[(HEAP32[$0 >> 2] | 0) + ($i$01 << 2) + 136 >> 2] = $3;
  _luaC_fix($L, HEAP32[(HEAP32[$0 >> 2] | 0) + ($i$01 << 2) + 136 >> 2] | 0);
  $i$01 = $i$01 + 1 | 0;
 } while (($i$01 | 0) != 24);
 return;
}

function _error($S, $why) {
 $S = $S | 0;
 $why = $why | 0;
 var $0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $0 = HEAP32[$S >> 2] | 0;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$S + 12 >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = $why;
 _luaO_pushfstring($0, 63320, $vararg_buffer) | 0;
 _luaD_throw(HEAP32[$S >> 2] | 0, 3);
}

function __ZNK13b2PulleyJoint16GetReactionForceEf($agg$result, $this, $inv_dt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 var $1 = 0.0, $9 = 0.0;
 $1 = +HEAPF32[$this + 116 >> 2];
 $9 = $1 * +HEAPF32[$this + 140 >> 2] * $inv_dt;
 HEAPF32[$agg$result >> 2] = $1 * +HEAPF32[$this + 136 >> 2] * $inv_dt;
 HEAPF32[$agg$result + 4 >> 2] = $9;
 return;
}

function _lua_newuserdata($L, $size) {
 $L = $L | 0;
 $size = $size | 0;
 var $5 = 0, $6 = 0, $7 = 0;
 if ((HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 12 >> 2] | 0) > 0) _luaC_step($L);
 $5 = _luaS_newudata($L, $size) | 0;
 $6 = $L + 8 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 HEAP32[$7 >> 2] = $5;
 HEAP32[$7 + 4 >> 2] = 71;
 HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 8;
 return $5 + 24 | 0;
}

function _luaB_pcall($L) {
 $L = $L | 0;
 var $$0$i = 0;
 _luaL_checkany($L, 1);
 _lua_pushboolean($L, 1);
 _lua_rotate($L, 1, 1);
 if ((_lua_pcallk($L, (_lua_gettop($L) | 0) + -2 | 0, -1, 0, 0, 21) | 0) >>> 0 > 1) {
  _lua_pushboolean($L, 0);
  _lua_pushvalue($L, -2);
  $$0$i = 2;
  return $$0$i | 0;
 } else {
  $$0$i = _lua_gettop($L) | 0;
  return $$0$i | 0;
 }
 return 0;
}

function _display_get_pixel($surface, $x, $y, $red, $green, $blue, $alpha) {
 $surface = $surface | 0;
 $x = $x | 0;
 $y = $y | 0;
 $red = $red | 0;
 $green = $green | 0;
 $blue = $blue | 0;
 $alpha = $alpha | 0;
 if (!$surface) ___assert_fail(19976, 18224, 443, 18896); else {
  _surface_get_pixel($surface, $x, $y, $red, $green, $blue, $alpha, HEAP32[4528] | 0);
  return;
 }
}

function __ZNK11b2GearJoint16GetReactionForceEf($agg$result, $this, $inv_dt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 var $1 = 0.0, $9 = 0.0;
 $1 = +HEAPF32[$this + 156 >> 2];
 $9 = $1 * +HEAPF32[$this + 244 >> 2] * $inv_dt;
 HEAPF32[$agg$result >> 2] = $1 * +HEAPF32[$this + 240 >> 2] * $inv_dt;
 HEAPF32[$agg$result + 4 >> 2] = $9;
 return;
}

function _luaopen_string($L) {
 $L = $L | 0;
 _luaL_checkversion_($L, 503.0, 68);
 _lua_createtable($L, 0, 17);
 _luaL_setfuncs($L, 60968, 0);
 _lua_createtable($L, 0, 1);
 _lua_pushlstring($L, 62584, 0) | 0;
 _lua_pushvalue($L, -2);
 _lua_setmetatable($L, -2) | 0;
 _lua_settop($L, -2);
 _lua_pushvalue($L, -2);
 _lua_setfield($L, -2, 64992);
 _lua_settop($L, -2);
 return 1;
}

function _display_use_buffer($buffer) {
 $buffer = $buffer | 0;
 var $1 = 0;
 if (!$buffer) ___assert_fail(22256, 18224, 876, 19264);
 HEAP32[4530] = $buffer;
 $1 = HEAP32[4527] | 0;
 if (!$1) ___assert_fail(23264, 19880, 113, 19312); else {
  HEAP32[$buffer + 60 >> 2] = $1;
  HEAP32[$buffer + 76 >> 2] = HEAP32[4528];
  HEAP32[$buffer + 80 >> 2] = HEAP32[4529];
  return;
 }
}

function _luaL_newmetatable($L, $tname) {
 $L = $L | 0;
 $tname = $tname | 0;
 var $$0 = 0;
 if (_lua_getfield($L, -1001e3, $tname) | 0) {
  $$0 = 0;
  return $$0 | 0;
 }
 _lua_settop($L, -2);
 _lua_createtable($L, 0, 0);
 _lua_pushstring($L, $tname) | 0;
 _lua_setfield($L, -2, 55272);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -1001e3, $tname);
 $$0 = 1;
 return $$0 | 0;
}

function _luaL_getsubtable($L, $idx, $fname) {
 $L = $L | 0;
 $idx = $idx | 0;
 $fname = $fname | 0;
 var $$0 = 0, $2 = 0;
 if ((_lua_getfield($L, $idx, $fname) | 0) == 5) {
  $$0 = 1;
  return $$0 | 0;
 }
 _lua_settop($L, -2);
 $2 = _lua_absindex($L, $idx) | 0;
 _lua_createtable($L, 0, 0);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, $2, $fname);
 $$0 = 0;
 return $$0 | 0;
}

function _rand() {
 var $0 = 0, $10 = 0, $14 = 0, $6 = 0, $8 = 0, $9 = 0;
 $0 = 107208;
 $6 = ___muldi3(HEAP32[$0 >> 2] | 0, HEAP32[$0 + 4 >> 2] | 0, 1284865837, 1481765933) | 0;
 $8 = _i64Add($6 | 0, tempRet0 | 0, 1, 0) | 0;
 $9 = tempRet0;
 $10 = 107208;
 HEAP32[$10 >> 2] = $8;
 HEAP32[$10 + 4 >> 2] = $9;
 $14 = _bitshift64Lshr($8 | 0, $9 | 0, 33) | 0;
 return $14 | 0;
}
function _png_set_expand_gray_1_2_4_to_8($png_ptr) {
 $png_ptr = $png_ptr | 0;
 var $1 = 0, $2 = 0, $6 = 0;
 if (!$png_ptr) return;
 $1 = $png_ptr + 212 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!($2 & 64)) {
  HEAP32[$1 >> 2] = $2 | 16384;
  $6 = $png_ptr + 216 | 0;
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 4096;
  return;
 } else {
  _png_app_error($png_ptr, 75296);
  return;
 }
}

function _luaL_pushresultsize($B, $sz) {
 $B = $B | 0;
 $sz = $sz | 0;
 var $0 = 0, $2 = 0, $4 = 0;
 $0 = $B + 8 | 0;
 $2 = (HEAP32[$0 >> 2] | 0) + $sz | 0;
 HEAP32[$0 >> 2] = $2;
 $4 = HEAP32[$B + 12 >> 2] | 0;
 _lua_pushlstring($4, HEAP32[$B >> 2] | 0, $2) | 0;
 if ((HEAP32[$B >> 2] | 0) == ($B + 16 | 0)) return;
 _lua_rotate($4, -2, -1);
 _lua_settop($4, -2);
 return;
}

function _luaC_newobj($L, $tt, $sz) {
 $L = $L | 0;
 $tt = $tt | 0;
 $sz = $sz | 0;
 var $1 = 0, $12 = 0, $3 = 0;
 $1 = HEAP32[$L + 12 >> 2] | 0;
 $3 = _luaM_realloc_($L, 0, $tt & 15, $sz) | 0;
 HEAP8[$3 + 5 >> 0] = (HEAPU8[$1 + 48 >> 0] | 0) & 3;
 HEAP8[$3 + 4 >> 0] = $tt;
 $12 = $1 + 52 | 0;
 HEAP32[$3 >> 2] = HEAP32[$12 >> 2];
 HEAP32[$12 >> 2] = $3;
 return $3 | 0;
}

function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret | 0;
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret + 8 | 0;
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret + 16 | 0;
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0;
}

function __ZNK15b2DistanceJoint16GetReactionForceEf($agg$result, $this, $inv_dt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 var $2 = 0.0, $8 = 0.0;
 $2 = +HEAPF32[$this + 100 >> 2] * $inv_dt;
 $8 = $2 * +HEAPF32[$this + 120 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$this + 116 >> 2] * $2;
 HEAPF32[$agg$result + 4 >> 2] = $8;
 return;
}

function _png_set_palette_to_rgb($png_ptr) {
 $png_ptr = $png_ptr | 0;
 var $1 = 0, $2 = 0, $6 = 0;
 if (!$png_ptr) return;
 $1 = $png_ptr + 212 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!($2 & 64)) {
  HEAP32[$1 >> 2] = $2 | 16384;
  $6 = $png_ptr + 216 | 0;
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 33558528;
  return;
 } else {
  _png_app_error($png_ptr, 75296);
  return;
 }
}

function _mlua_load_font($L) {
 $L = $L | 0;
 var $$0 = 0, $1 = 0, $3 = 0;
 if (!$L) ___assert_fail(23976, 5936, 54, 6056);
 $1 = _luaL_checklstring($L, 1, 0) | 0;
 $3 = _font_load($1, +_luaL_checknumber($L, 2), 32, 96) | 0;
 if (!$3) {
  $$0 = _luaL_fileresult($L, 0, $1) | 0;
  return $$0 | 0;
 } else {
  _push_font($L, $3);
  $$0 = 1;
  return $$0 | 0;
 }
 return 0;
}

function _io_tmpfile($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $2 = 0, $5 = 0;
 $0 = _lua_newuserdata($L, 8) | 0;
 $1 = $0 + 4 | 0;
 HEAP32[$1 >> 2] = 0;
 _luaL_setmetatable($L, 56736);
 HEAP32[$0 >> 2] = 0;
 HEAP32[$1 >> 2] = 349;
 $2 = _tmpfile() | 0;
 HEAP32[$0 >> 2] = $2;
 if ($2) {
  $5 = 1;
  return $5 | 0;
 }
 $5 = _luaL_fileresult($L, 0, 0) | 0;
 return $5 | 0;
}

function _png_set_tRNS_to_alpha($png_ptr) {
 $png_ptr = $png_ptr | 0;
 var $1 = 0, $2 = 0, $6 = 0;
 if (!$png_ptr) return;
 $1 = $png_ptr + 212 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!($2 & 64)) {
  HEAP32[$1 >> 2] = $2 | 16384;
  $6 = $png_ptr + 216 | 0;
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 33558528;
  return;
 } else {
  _png_app_error($png_ptr, 75296);
  return;
 }
}

function _buffer_check_not_use_texture($b) {
 $b = $b | 0;
 var $1 = 0, $4 = 0;
 if (!$b) ___assert_fail(23160, 22016, 191, 22168);
 $1 = $b + 57 | 0;
 if (!(HEAP8[$1 >> 0] | 0)) return;
 _buffer_draw($b, 0.0, 0.0);
 $4 = $b + 40 | 0;
 HEAP32[$4 + 0 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 HEAP32[$4 + 8 >> 2] = 0;
 HEAP32[$4 + 12 >> 2] = 0;
 HEAP8[$1 >> 0] = 0;
 return;
}

function _mlua_draw_font($L) {
 $L = $L | 0;
 var $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0;
 if (!$L) ___assert_fail(23976, 5936, 29, 6016); else {
  $1 = _pop_font($L, 1) | 0;
  $2 = _luaL_checklstring($L, 2, 0) | 0;
  $3 = +_luaL_checknumber($L, 3);
  $4 = +_luaL_checknumber($L, 4);
  _font_draw($1, $2, $3, $4, _luaL_optinteger($L, 5, 1) | 0);
  return 0;
 }
 return 0;
}

function _math_toint($L) {
 $L = $L | 0;
 var $0 = 0, $valid = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $valid = sp;
 $0 = _lua_tointegerx($L, 1, $valid) | 0;
 if (!(HEAP32[$valid >> 2] | 0)) {
  _luaL_checkany($L, 1);
  _lua_pushnil($L);
  STACKTOP = sp;
  return 1;
 } else {
  _lua_pushinteger($L, $0);
  STACKTOP = sp;
  return 1;
 }
 return 0;
}

function _luaF_newLclosure($L, $n) {
 $L = $L | 0;
 $n = $n | 0;
 var $$in = 0, $2 = 0, $7 = 0;
 $2 = _luaC_newobj($L, 6, ($n << 2) + 16 | 0) | 0;
 HEAP32[$2 + 12 >> 2] = 0;
 HEAP8[$2 + 6 >> 0] = $n;
 if (!$n) return $2 | 0;
 $7 = $2 + 16 | 0;
 $$in = $n;
 do {
  $$in = $$in + -1 | 0;
  HEAP32[$7 + ($$in << 2) >> 2] = 0;
 } while (($$in | 0) != 0);
 return $2 | 0;
}

function __ZNK11b2RopeJoint16GetReactionForceEf($agg$result, $this, $inv_dt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 var $2 = 0.0, $8 = 0.0;
 $2 = +HEAPF32[$this + 92 >> 2] * $inv_dt;
 $8 = $2 * +HEAPF32[$this + 108 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$this + 104 >> 2] * $2;
 HEAPF32[$agg$result + 4 >> 2] = $8;
 return;
}

function _png_chunk_error($png_ptr, $error_message) {
 $png_ptr = $png_ptr | 0;
 $error_message = $error_message | 0;
 var $msg = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $msg = sp;
 if (!$png_ptr) _png_error(0, $error_message); else {
  _png_format_buffer(HEAP32[$png_ptr + 376 >> 2] | 0, $msg, $error_message);
  _png_error($png_ptr, $msg);
 }
}

function _mlua_set_alpha($L) {
 $L = $L | 0;
 var $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!$L) ___assert_fail(23976, 19928, 64, 20232);
 $2 = ~~+_luaL_checknumber($L, 1);
 if ($2 >>> 0 < 256) {
  _display_set_alpha($2);
  STACKTOP = sp;
  return 0;
 }
 _luaL_error($L, 20248, sp) | 0;
 _display_set_alpha($2);
 STACKTOP = sp;
 return 0;
}

function _getGLError($error) {
 $error = $error | 0;
 var $$0 = 0;
 switch ($error | 0) {
 case 1281:
  {
   $$0 = 19448;
   break;
  }
 case 1285:
  {
   $$0 = 19536;
   break;
  }
 case 1282:
  {
   $$0 = 19472;
   break;
  }
 case 1280:
  {
   $$0 = 19432;
   break;
  }
 case 1286:
  {
   $$0 = 19496;
   break;
  }
 default:
  $$0 = 62584;
 }
 return $$0 | 0;
}

function _resume_error($L, $msg, $firstArg) {
 $L = $L | 0;
 $msg = $msg | 0;
 $firstArg = $firstArg | 0;
 var $0 = 0, $1 = 0;
 $0 = $L + 8 | 0;
 HEAP32[$0 >> 2] = $firstArg;
 $1 = _luaS_new($L, $msg) | 0;
 HEAP32[$firstArg >> 2] = $1;
 HEAP32[$firstArg + 4 >> 2] = HEAPU8[$1 + 4 >> 0] | 0 | 64;
 HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 8;
 _luaD_throw($L, -1);
}

function _png_gamma_8bit_correct($value, $gamma_val) {
 $value = $value | 0;
 $gamma_val = $gamma_val | 0;
 var $$0 = 0;
 if (($value | 0) != 0 & $value >>> 0 < 255) {
  $$0 = ~~+Math_floor(+(+Math_pow(+(+($value | 0) / 255.0), +(+($gamma_val | 0) * 1.0e-05)) * 255.0 + .5)) & 255;
  return $$0 | 0;
 } else {
  $$0 = $value & 255;
  return $$0 | 0;
 }
 return 0;
}

function __ZN9b2FixtureC2Ev($this) {
 $this = $this | 0;
 HEAP16[$this + 32 >> 1] = 1;
 HEAP16[$this + 34 >> 1] = -1;
 HEAP16[$this + 36 >> 1] = 0;
 HEAP32[$this + 40 >> 2] = 0;
 HEAP32[$this + 24 >> 2] = 0;
 HEAP32[$this + 28 >> 2] = 0;
 HEAP32[$this + 0 >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP32[$this + 12 >> 2] = 0;
 return;
}

function _surface_draw_from($s) {
 $s = $s | 0;
 var $3 = 0;
 if (!$s) ___assert_fail(23264, 16096, 250, 16160);
 _glBindTexture(3553, HEAP32[$s + 32 >> 2] | 0);
 $3 = $s + 25 | 0;
 if (HEAP8[$3 >> 0] | 0) return;
 if ((HEAP32[$s + 20 >> 2] | 0) >>> 0 <= 9984) return;
 if (HEAP8[$s + 26 >> 0] | 0) return;
 _glGenerateMipmap(3553);
 HEAP8[$3 >> 0] = 1;
 return;
}

function _call_lua_function($L, $num_args, $num_ret) {
 $L = $L | 0;
 $num_args = $num_args | 0;
 $num_ret = $num_ret | 0;
 if (!$L) ___assert_fail(23976, 568, 145, 728);
 if (($num_args | 0) <= -1) ___assert_fail(752, 568, 146, 728);
 if (($num_ret | 0) > -1) {
  _lua_callk($L, $num_args, $num_ret, 0, 0);
  return;
 } else ___assert_fail(768, 568, 147, 728);
}

function _png_set_strip_16($png_ptr) {
 $png_ptr = $png_ptr | 0;
 var $1 = 0, $2 = 0, $6 = 0;
 if (!$png_ptr) return;
 $1 = $png_ptr + 212 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!($2 & 64)) {
  HEAP32[$1 >> 2] = $2 | 16384;
  $6 = $png_ptr + 216 | 0;
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 1024;
  return;
 } else {
  _png_app_error($png_ptr, 75296);
  return;
 }
}

function _error_expected($ls, $token) {
 $ls = $ls | 0;
 $token = $token | 0;
 var $1 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $1 = HEAP32[$ls + 32 >> 2] | 0;
 HEAP32[$vararg_buffer >> 2] = _luaX_token2str($ls, $token) | 0;
 _luaX_syntaxerror($ls, _luaO_pushfstring($1, 60384, $vararg_buffer) | 0);
}

function _display_use_default_buffer() {
 var $0 = 0, $2 = 0;
 $0 = HEAP32[4522] | 0;
 if (!$0) ___assert_fail(22256, 18224, 876, 19264);
 HEAP32[4530] = $0;
 $2 = HEAP32[4527] | 0;
 if (!$2) ___assert_fail(23264, 19880, 113, 19312); else {
  HEAP32[$0 + 60 >> 2] = $2;
  HEAP32[$0 + 76 >> 2] = HEAP32[4528];
  HEAP32[$0 + 80 >> 2] = HEAP32[4529];
  return;
 }
}

function _png_malloc_base($png_ptr, $size) {
 $png_ptr = $png_ptr | 0;
 $size = $size | 0;
 var $$0 = 0, $3 = 0;
 if (!$size) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ($png_ptr) {
  $3 = HEAP32[$png_ptr + 720 >> 2] | 0;
  if ($3) {
   $$0 = FUNCTION_TABLE_iii[$3 & 31]($png_ptr, $size) | 0;
   return $$0 | 0;
  }
 }
 $$0 = _malloc($size) | 0;
 return $$0 | 0;
}

function _luaK_intK($fs, $n) {
 $fs = $fs | 0;
 $n = $n | 0;
 var $$c = 0, $2 = 0, $k = 0, $o = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $k = sp + 8 | 0;
 $o = sp;
 $$c = $n;
 HEAP32[$k >> 2] = $$c;
 HEAP32[$k + 4 >> 2] = 2;
 HEAP32[$o >> 2] = $$c;
 HEAP32[$o + 4 >> 2] = 19;
 $2 = _addk($fs, $k, $o) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function _dlua_get_drystal_field($name) {
 $name = $name | 0;
 var $0 = 0;
 $0 = HEAP32[16] | 0;
 if (!$name) ___assert_fail(66832, 128, 124, 160); else {
  _lua_rawgeti($0, -1001e3, HEAP32[18] | 0) | 0;
  _lua_pushstring($0, $name) | 0;
  _lua_rawget($0, -2) | 0;
  _lua_rotate($0, (_lua_gettop($0) | 0) + -1 | 0, -1);
  _lua_settop($0, -2);
  return;
 }
}

function _os_tmpname($L) {
 $L = $L | 0;
 var $$0 = 0, $buff = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $buff = sp + 4 | 0;
 if (!(_tmpnam($buff | 0) | 0)) {
  $$0 = _luaL_error($L, 59808, sp) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  _lua_pushstring($L, $buff) | 0;
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _luaT_gettm($events, $event, $ename) {
 $events = $events | 0;
 $event = $event | 0;
 $ename = $ename | 0;
 var $$0 = 0, $0 = 0, $5 = 0;
 $0 = _luaH_getstr($events, $ename) | 0;
 if (HEAP32[$0 + 4 >> 2] | 0) {
  $$0 = $0;
  return $$0 | 0;
 }
 $5 = $events + 6 | 0;
 HEAP8[$5 >> 0] = HEAPU8[$5 >> 0] | 0 | 1 << $event;
 $$0 = 0;
 return $$0 | 0;
}

function __ZN12b2BroadPhaseC2Ev($this) {
 $this = $this | 0;
 __ZN13b2DynamicTreeC2Ev($this);
 HEAP32[$this + 28 >> 2] = 0;
 HEAP32[$this + 48 >> 2] = 16;
 HEAP32[$this + 52 >> 2] = 0;
 HEAP32[$this + 44 >> 2] = __Z7b2Alloci(128) | 0;
 HEAP32[$this + 36 >> 2] = 16;
 HEAP32[$this + 40 >> 2] = 0;
 HEAP32[$this + 32 >> 2] = __Z7b2Alloci(64) | 0;
 return;
}

function _png_set_error_fn($png_ptr, $error_ptr, $error_fn, $warning_fn) {
 $png_ptr = $png_ptr | 0;
 $error_ptr = $error_ptr | 0;
 $error_fn = $error_fn | 0;
 $warning_fn = $warning_fn | 0;
 if (!$png_ptr) return;
 HEAP32[$png_ptr + 176 >> 2] = $error_ptr;
 HEAP32[$png_ptr + 168 >> 2] = $error_fn;
 HEAP32[$png_ptr + 172 >> 2] = $warning_fn;
 return;
}

function _luaL_checknumber($L, $arg) {
 $L = $L | 0;
 $arg = $arg | 0;
 var $0 = 0.0, $isnum = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $isnum = sp;
 $0 = +_lua_tonumberx($L, $arg, $isnum);
 if (HEAP32[$isnum >> 2] | 0) {
  STACKTOP = sp;
  return +$0;
 }
 _typeerror($L, $arg, _lua_typename($L, 3) | 0);
 STACKTOP = sp;
 return +$0;
}

function _luaK_codek($fs, $reg, $k) {
 $fs = $fs | 0;
 $reg = $reg | 0;
 $k = $k | 0;
 var $$0 = 0, $1 = 0, $7 = 0;
 $1 = $reg << 6;
 if (($k | 0) < 262144) {
  $$0 = _luaK_code($fs, $1 | $k << 14 | 1) | 0;
  return $$0 | 0;
 } else {
  $7 = _luaK_code($fs, $1 | 2) | 0;
  _luaK_code($fs, $k << 6 | 46) | 0;
  $$0 = $7;
  return $$0 | 0;
 }
 return 0;
}

function _ll_loadlib($L) {
 $L = $L | 0;
 var $$0 = 0, $0 = 0, $2 = 0;
 $0 = _luaL_checklstring($L, 1, 0) | 0;
 $2 = _lookforfunc($L, $0, _luaL_checklstring($L, 2, 0) | 0) | 0;
 if (!$2) {
  $$0 = 1;
  return $$0 | 0;
 }
 _lua_pushnil($L);
 _lua_rotate($L, -2, 1);
 _lua_pushstring($L, ($2 | 0) == 1 ? 59152 : 59160) | 0;
 $$0 = 3;
 return $$0 | 0;
}

function _luaL_len($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $0 = 0, $isnum = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $isnum = sp + 4 | 0;
 _lua_len($L, $idx);
 $0 = _lua_tointegerx($L, -1, $isnum) | 0;
 if (!(HEAP32[$isnum >> 2] | 0)) _luaL_error($L, 55376, sp) | 0;
 _lua_settop($L, -2);
 STACKTOP = sp;
 return $0 | 0;
}

function _buffer_new($user_buffer, $size) {
 $user_buffer = $user_buffer | 0;
 $size = $size | 0;
 var $0 = 0;
 $0 = _xcalloc(1, 84) | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = $size;
 HEAP32[$0 + 24 >> 2] = _xmalloc($size << 3) | 0;
 HEAP32[$0 + 28 >> 2] = _xmalloc($size << 2) | 0;
 HEAP8[$0 + 68 >> 0] = $user_buffer & 1;
 return $0 | 0;
}

function _luaB_assert($L) {
 $L = $L | 0;
 var $$0 = 0;
 if (!(_lua_toboolean($L, 1) | 0)) {
  _luaL_checkany($L, 1);
  _lua_rotate($L, 1, -1);
  _lua_settop($L, -2);
  _lua_pushlstring($L, 65168, 17) | 0;
  _lua_settop($L, 1);
  $$0 = _luaB_error($L) | 0;
  return $$0 | 0;
 } else {
  $$0 = _lua_gettop($L) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _sn_write($f, $s, $l) {
 $f = $f | 0;
 $s = $s | 0;
 $l = $l | 0;
 var $2 = 0, $3 = 0, $6 = 0, $l$ = 0;
 $2 = $f + 20 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $6 = (HEAP32[$f + 16 >> 2] | 0) - $3 | 0;
 $l$ = $6 >>> 0 > $l >>> 0 ? $l : $6;
 _memcpy($3 | 0, $s | 0, $l$ | 0) | 0;
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $l$;
 return $l | 0;
}

function _luaB_auxwrap($L) {
 $L = $L | 0;
 var $0 = 0, $2 = 0;
 $0 = _lua_tothread($L, -1001001) | 0;
 $2 = _auxresume($L, $0, _lua_gettop($L) | 0) | 0;
 if (($2 | 0) >= 0) return $2 | 0;
 if (!(_lua_isstring($L, -1) | 0)) _lua_error($L) | 0;
 _luaL_where($L, 1);
 _lua_rotate($L, -2, 1);
 _lua_concat($L, 2);
 _lua_error($L) | 0;
 return 0;
}

function _f_write($L) {
 $L = $L | 0;
 var $0 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = _luaL_checkudata($L, 1, 56736) | 0;
 if (!(HEAP32[$0 + 4 >> 2] | 0)) _luaL_error($L, 56960, sp) | 0;
 $4 = HEAP32[$0 >> 2] | 0;
 _lua_pushvalue($L, 1);
 $5 = _g_write($L, $4, 2) | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function _sort($L) {
 $L = $L | 0;
 var $0 = 0, $ta = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ta = sp;
 _checktab($L, $ta);
 $0 = _luaL_len($L, 1) | 0;
 _luaL_checkstack($L, 50, 62584);
 if ((_lua_type($L, 2) | 0) >= 1) _luaL_checktype($L, 2, 6);
 _lua_settop($L, 2);
 _auxsort($L, $ta, 1, $0);
 STACKTOP = sp;
 return 0;
}

function _display_draw_buffer($buffer, $dx, $dy) {
 $buffer = $buffer | 0;
 $dx = +$dx;
 $dy = +$dy;
 if (!$buffer) ___assert_fail(22256, 18224, 891, 19288); else {
  _buffer_check_empty(HEAP32[4530] | 0);
  HEAP32[$buffer + 76 >> 2] = HEAP32[4528];
  HEAP32[$buffer + 80 >> 2] = HEAP32[4529];
  _buffer_draw($buffer, $dx, $dy);
  return;
 }
}

function dynCall_iiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 return FUNCTION_TABLE_iiiiiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0) | 0;
}

function _pack($L) {
 $L = $L | 0;
 var $0 = 0, $i$01 = 0;
 $0 = _lua_gettop($L) | 0;
 _lua_createtable($L, $0, 1);
 _lua_rotate($L, 1, 1);
 if (($0 | 0) > 0) {
  $i$01 = $0;
  do {
   _lua_rawseti($L, 1, $i$01);
   $i$01 = $i$01 + -1 | 0;
  } while (($i$01 | 0) > 0);
 }
 _lua_pushinteger($L, $0);
 _lua_setfield($L, 1, 62728);
 return 1;
}

function _mlua_fetch($L) {
 $L = $L | 0;
 var $2 = 0;
 if (!$L) ___assert_fail(23976, 12952, 49, 13e3);
 $2 = _storage_fetch(_luaL_checklstring($L, 1, 0) | 0) | 0;
 if ($2) if (HEAP8[$2 >> 0] | 0) {
  _lua_pushcclosure($L, 290, 0);
  _lua_pushstring($L, $2) | 0;
  _call_lua_function($L, 1, 1);
  return 1;
 }
 _lua_pushnil($L);
 return 1;
}

function __ZN6b2Body16SetFixedRotationEb($this, $flag) {
 $this = $this | 0;
 $flag = $flag | 0;
 var $0 = 0, $2 = 0;
 $0 = $this + 4 | 0;
 $2 = HEAPU16[$0 >> 1] | 0;
 if (!(($2 & 16 | 0) != 0 ^ $flag)) return;
 HEAP16[$0 >> 1] = $flag ? $2 | 16 : $2 & 65519;
 HEAPF32[$this + 72 >> 2] = 0.0;
 __ZN6b2Body13ResetMassDataEv($this);
 return;
}

function _panic($L) {
 $L = $L | 0;
 var $0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $0 = HEAP32[_stderr >> 2] | 0;
 HEAP32[$vararg_buffer >> 2] = _lua_tolstring($L, -1, 0) | 0;
 _fprintf($0 | 0, 55632, $vararg_buffer | 0) | 0;
 _fflush($0 | 0) | 0;
 STACKTOP = sp;
 return 0;
}

function __Z16pop_joint_secureP9lua_Statei($L, $index) {
 $L = $L | 0;
 $index = $index | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = __Z9pop_jointP9lua_Statei($L, $index) | 0;
 if (HEAP32[$0 >> 2] | 0) {
  STACKTOP = sp;
  return $0 | 0;
 }
 _luaL_error($L, 4440, sp) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function _luaS_newudata($L, $s) {
 $L = $L | 0;
 $s = $s | 0;
 var $2 = 0;
 if ($s >>> 0 > 2147483627) _luaM_toobig($L); else {
  $2 = _luaC_newobj($L, 7, $s + 24 | 0) | 0;
  HEAP32[$2 + 12 >> 2] = $s;
  HEAP32[$2 + 8 >> 2] = 0;
  HEAP32[$2 + 16 >> 2] = HEAP32[14792];
  HEAP8[$2 + 6 >> 0] = HEAP32[14793];
  return $2 | 0;
 }
 return 0;
}

function _db_setupvalue($L) {
 $L = $L | 0;
 var $$0$i = 0, $0 = 0, $1 = 0;
 _luaL_checkany($L, 3);
 $0 = _luaL_checkinteger($L, 2) | 0;
 _luaL_checktype($L, 1, 6);
 $1 = _lua_setupvalue($L, 1, $0) | 0;
 if (!$1) {
  $$0$i = 0;
  return $$0$i | 0;
 }
 _lua_pushstring($L, $1) | 0;
 _lua_rotate($L, -1, 1);
 $$0$i = 1;
 return $$0$i | 0;
}

function __Z15pop_body_secureP9lua_Statei($L, $index) {
 $L = $L | 0;
 $index = $index | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = __Z8pop_bodyP9lua_Statei($L, $index) | 0;
 if (HEAP32[$0 >> 2] | 0) {
  STACKTOP = sp;
  return $0 | 0;
 }
 _luaL_error($L, 5336, sp) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function _b_rrot($L) {
 $L = $L | 0;
 var $1 = 0, $2 = 0, $3 = 0, $r$0$i = 0;
 $1 = 0 - (_luaL_checkinteger($L, 2) | 0) | 0;
 $2 = _luaL_checkinteger($L, 1) | 0;
 $3 = $1 & 31;
 if (!$3) {
  $r$0$i = $2;
  _lua_pushinteger($L, $r$0$i);
  return 1;
 }
 $r$0$i = $2 >>> (32 - $3 | 0) | $2 << $3;
 _lua_pushinteger($L, $r$0$i);
 return 1;
}

function _png_set_mem_fn($png_ptr, $mem_ptr, $malloc_fn, $free_fn) {
 $png_ptr = $png_ptr | 0;
 $mem_ptr = $mem_ptr | 0;
 $malloc_fn = $malloc_fn | 0;
 $free_fn = $free_fn | 0;
 if (!$png_ptr) return;
 HEAP32[$png_ptr + 716 >> 2] = $mem_ptr;
 HEAP32[$png_ptr + 720 >> 2] = $malloc_fn;
 HEAP32[$png_ptr + 724 >> 2] = $free_fn;
 return;
}

function _abort_message($format, $varargs) {
 $format = $format | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $list = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $list = sp;
 HEAP32[$list >> 2] = $varargs;
 $0 = HEAP32[_stderr >> 2] | 0;
 _vfprintf($0 | 0, $format | 0, $list | 0) | 0;
 _fputc(10, $0 | 0) | 0;
 _abort();
}

function __ZN15b2FrictionJoint12SetMaxTorqueEf($this, $torque) {
 $this = $this | 0;
 $torque = +$torque;
 if (((HEAPF32[tempDoublePtr >> 2] = $torque, HEAP32[tempDoublePtr >> 2] | 0) & 2139095040 | 0) != 2139095040 & $torque >= 0.0) {
  HEAPF32[$this + 100 >> 2] = $torque;
  return;
 } else ___assert_fail(83632, 83544, 228, 83672);
}

function _luaC_barrier_($L, $o, $v) {
 $L = $L | 0;
 $o = $o | 0;
 $v = $v | 0;
 var $1 = 0, $5 = 0;
 $1 = HEAP32[$L + 12 >> 2] | 0;
 if ((HEAPU8[$1 + 49 >> 0] | 0) < 2) {
  _reallymarkobject($1, $v);
  return;
 } else {
  $5 = $o + 5 | 0;
  HEAP8[$5 >> 0] = (HEAPU8[$1 + 48 >> 0] | 0) & 3 | (HEAPU8[$5 >> 0] | 0) & 248;
  return;
 }
}

function __ZN12b2MouseJoint11ShiftOriginERK6b2Vec2($this, $newOrigin) {
 $this = $this | 0;
 $newOrigin = $newOrigin | 0;
 var $1 = 0, $6 = 0;
 $1 = $this + 76 | 0;
 HEAPF32[$1 >> 2] = +HEAPF32[$1 >> 2] - +HEAPF32[$newOrigin >> 2];
 $6 = $this + 80 | 0;
 HEAPF32[$6 >> 2] = +HEAPF32[$6 >> 2] - +HEAPF32[$newOrigin + 4 >> 2];
 return;
}

function _f_flush($L) {
 $L = $L | 0;
 var $0 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = _luaL_checkudata($L, 1, 56736) | 0;
 if (!(HEAP32[$0 + 4 >> 2] | 0)) _luaL_error($L, 56960, sp) | 0;
 $8 = _luaL_fileresult($L, (_fflush(HEAP32[$0 >> 2] | 0) | 0) == 0 & 1, 0) | 0;
 STACKTOP = sp;
 return $8 | 0;
}

function _mlua_set_position_system($L) {
 $L = $L | 0;
 var $1 = 0, $2 = 0.0, $3 = 0.0;
 if (!$L) ___assert_fail(23976, 8472, 81, 8568); else {
  $1 = _pop_system($L, 1) | 0;
  $2 = +_luaL_checknumber($L, 2);
  $3 = +_luaL_checknumber($L, 3);
  HEAPF32[$1 + 412 >> 2] = $2;
  HEAPF32[$1 + 416 >> 2] = $3;
  return 0;
 }
 return 0;
}

function _system_clone($s) {
 $s = $s | 0;
 var $0 = 0, $4 = 0;
 $0 = _xmalloc(480) | 0;
 _memcpy($0 | 0, $s | 0, 476) | 0;
 $4 = _xmalloc((HEAP32[$0 + 404 >> 2] | 0) * 56 | 0) | 0;
 HEAP32[$0 >> 2] = $4;
 _memcpy($4 | 0, HEAP32[$s >> 2] | 0, (HEAP32[$s + 404 >> 2] | 0) * 56 | 0) | 0;
 HEAP32[$0 + 476 >> 2] = 0;
 return $0 | 0;
}

function _mlua_set_offset_system($L) {
 $L = $L | 0;
 var $1 = 0, $2 = 0.0, $3 = 0.0;
 if (!$L) ___assert_fail(23976, 8472, 103, 8632); else {
  $1 = _pop_system($L, 1) | 0;
  $2 = +_luaL_checknumber($L, 2);
  $3 = +_luaL_checknumber($L, 3);
  HEAPF32[$1 + 420 >> 2] = $2;
  HEAPF32[$1 + 424 >> 2] = $3;
  return 0;
 }
 return 0;
}

function _display_new_buffer($size) {
 $size = $size | 0;
 var $0 = 0, $1 = 0;
 $0 = _buffer_new(1, $size) | 0;
 _buffer_allocate($0);
 $1 = HEAP32[4532] | 0;
 if (!$0) ___assert_fail(23160, 19880, 120, 19336);
 if (!$1) ___assert_fail(23168, 19880, 121, 19336); else {
  HEAP32[$0 + 64 >> 2] = $1;
  return $0 | 0;
 }
 return 0;
}

function _math_floor($L) {
 $L = $L | 0;
 var $3 = 0.0;
 if (_lua_isinteger($L, 1) | 0) {
  _lua_settop($L, 1);
  return 1;
 }
 $3 = +Math_floor(+(+_luaL_checknumber($L, 1)));
 if ($3 >= -2147483648.0 & $3 < 2147483648.0) {
  _lua_pushinteger($L, ~~$3);
  return 1;
 } else {
  _lua_pushnumber($L, $3);
  return 1;
 }
 return 0;
}

function _display_use_shader($shader) {
 $shader = $shader | 0;
 var $2 = 0;
 if (!$shader) ___assert_fail(22712, 18224, 837, 19240);
 _buffer_check_empty(HEAP32[4530] | 0);
 HEAP32[4527] = $shader;
 $2 = HEAP32[4530] | 0;
 if (!$2) ___assert_fail(23160, 19880, 112, 19312); else {
  HEAP32[$2 + 60 >> 2] = $shader;
  return;
 }
}

function _mlua_set_texture_system($L) {
 $L = $L | 0;
 var $1 = 0, $2 = 0, $3 = 0.0;
 if (!$L) ___assert_fail(23976, 8472, 248, 9576); else {
  $1 = _pop_system($L, 1) | 0;
  $2 = _pop_surface($L, 2) | 0;
  $3 = +_luaL_checknumber($L, 3);
  _system_set_texture($1, $2, $3, +_luaL_checknumber($L, 4));
  return 0;
 }
 return 0;
}

function _mlua_draw_plain_font($L) {
 $L = $L | 0;
 var $1 = 0, $2 = 0, $3 = 0.0;
 if (!$L) ___assert_fail(23976, 5936, 42, 6032); else {
  $1 = _pop_font($L, 1) | 0;
  $2 = _luaL_checklstring($L, 2, 0) | 0;
  $3 = +_luaL_checknumber($L, 3);
  _font_draw_plain($1, $2, $3, +_luaL_checknumber($L, 4));
  return 0;
 }
 return 0;
}

function _mlua_add_size_system($L) {
 $L = $L | 0;
 var $1 = 0, $2 = 0.0, $3 = 0.0;
 if (!$L) ___assert_fail(23976, 8472, 195, 9472); else {
  $1 = _pop_system($L, 1) | 0;
  $2 = +_luaL_checknumber($L, 2);
  $3 = +_luaL_checknumber($L, 3);
  _system_add_size($1, $2, $3, +_luaL_optnumber($L, 4, $3));
  return 0;
 }
 return 0;
}

function _math_ceil($L) {
 $L = $L | 0;
 var $3 = 0.0;
 if (_lua_isinteger($L, 1) | 0) {
  _lua_settop($L, 1);
  return 1;
 }
 $3 = +Math_ceil(+(+_luaL_checknumber($L, 1)));
 if ($3 >= -2147483648.0 & $3 < 2147483648.0) {
  _lua_pushinteger($L, ~~$3);
  return 1;
 } else {
  _lua_pushnumber($L, $3);
  return 1;
 }
 return 0;
}

function __ZN15b2FrictionJoint11SetMaxForceEf($this, $force) {
 $this = $this | 0;
 $force = +$force;
 if (((HEAPF32[tempDoublePtr >> 2] = $force, HEAP32[tempDoublePtr >> 2] | 0) & 2139095040 | 0) != 2139095040 & $force >= 0.0) {
  HEAPF32[$this + 96 >> 2] = $force;
  return;
 } else ___assert_fail(83504, 83544, 217, 83616);
}

function _png_read_update_info($png_ptr, $info_ptr) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 if (!$png_ptr) return;
 if (!(HEAP32[$png_ptr + 212 >> 2] & 64)) {
  _png_read_start_row($png_ptr);
  _png_read_transform_info($png_ptr, $info_ptr);
  return;
 } else {
  _png_app_error($png_ptr, 74496);
  return;
 }
}

function _mlua_store($L) {
 $L = $L | 0;
 var $1 = 0;
 if (!$L) ___assert_fail(23976, 12952, 32, 12984); else {
  $1 = _luaL_checklstring($L, 1, 0) | 0;
  _lua_pushcclosure($L, 289, 0);
  _lua_pushvalue($L, 2);
  _call_lua_function($L, 1, 1);
  _storage_store($1, _luaL_checklstring($L, -1, 0) | 0);
  return 0;
 }
 return 0;
}

function _luaK_checkstack($fs, $n) {
 $fs = $fs | 0;
 $n = $n | 0;
 var $3 = 0, $5 = 0;
 $3 = (HEAPU8[$fs + 44 >> 0] | 0) + $n | 0;
 $5 = (HEAP32[$fs >> 2] | 0) + 8 | 0;
 if (($3 | 0) <= (HEAPU8[$5 >> 0] | 0 | 0)) return;
 if (($3 | 0) > 249) _luaX_syntaxerror(HEAP32[$fs + 8 >> 2] | 0, 65488);
 HEAP8[$5 >> 0] = $3;
 return;
}

function _dlua_init($filename) {
 $filename = $filename | 0;
 var $0 = 0;
 $0 = _luaL_newstate() | 0;
 HEAP32[16] = $0;
 HEAP32[18] = -2;
 HEAP32[22] = $filename;
 HEAP8[80] = 0;
 _luaL_openlibs($0);
 _lua_createtable($0, 0, 0);
 _lua_pushstring($0, $filename) | 0;
 _lua_rawseti($0, -2, 0);
 _lua_setglobal($0, 96);
 return;
}

function _display_set_camera_position($dx, $dy) {
 $dx = +$dx;
 $dy = +$dy;
 var $1 = 0, $3 = 0;
 _buffer_check_empty(HEAP32[4530] | 0);
 $1 = HEAP32[4532] | 0;
 HEAPF32[$1 >> 2] = $dx;
 HEAPF32[$1 + 4 >> 2] = $dy;
 $3 = HEAP32[4528] | 0;
 _camera_update_matrix($1, HEAP32[$3 + 4 >> 2] | 0, HEAP32[$3 + 8 >> 2] | 0);
 return;
}

function _b_lrot($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $2 = 0, $r$0$i = 0;
 $0 = _luaL_checkinteger($L, 2) | 0;
 $1 = _luaL_checkinteger($L, 1) | 0;
 $2 = $0 & 31;
 if (!$2) {
  $r$0$i = $1;
  _lua_pushinteger($L, $r$0$i);
  return 1;
 }
 $r$0$i = $1 >>> (32 - $2 | 0) | $1 << $2;
 _lua_pushinteger($L, $r$0$i);
 return 1;
}

function __ZNK15b2RevoluteJoint16GetReactionForceEf($agg$result, $this, $inv_dt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 var $5 = 0.0;
 $5 = +HEAPF32[$this + 88 >> 2] * $inv_dt;
 HEAPF32[$agg$result >> 2] = +HEAPF32[$this + 84 >> 2] * $inv_dt;
 HEAPF32[$agg$result + 4 >> 2] = $5;
 return;
}

function __ZNK15b2FrictionJoint16GetReactionForceEf($agg$result, $this, $inv_dt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 var $5 = 0.0;
 $5 = +HEAPF32[$this + 88 >> 2] * $inv_dt;
 HEAPF32[$agg$result >> 2] = +HEAPF32[$this + 84 >> 2] * $inv_dt;
 HEAPF32[$agg$result + 4 >> 2] = $5;
 return;
}

function __ZNK12b2MouseJoint16GetReactionForceEf($agg$result, $this, $inv_dt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 var $5 = 0.0;
 $5 = +HEAPF32[$this + 100 >> 2] * $inv_dt;
 HEAPF32[$agg$result >> 2] = +HEAPF32[$this + 96 >> 2] * $inv_dt;
 HEAPF32[$agg$result + 4 >> 2] = $5;
 return;
}

function __ZNK11b2WeldJoint16GetReactionForceEf($agg$result, $this, $inv_dt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 var $5 = 0.0;
 $5 = +HEAPF32[$this + 108 >> 2] * $inv_dt;
 HEAPF32[$agg$result >> 2] = +HEAPF32[$this + 104 >> 2] * $inv_dt;
 HEAPF32[$agg$result + 4 >> 2] = $5;
 return;
}

function _io_type($L) {
 $L = $L | 0;
 var $0 = 0;
 _luaL_checkany($L, 1);
 $0 = _luaL_testudata($L, 1, 56736) | 0;
 if (!$0) {
  _lua_pushnil($L);
  return 1;
 }
 if (!(HEAP32[$0 + 4 >> 2] | 0)) {
  _lua_pushlstring($L, 57248, 11) | 0;
  return 1;
 } else {
  _lua_pushlstring($L, 57264, 4) | 0;
  return 1;
 }
 return 0;
}

function _display_use_default_shader() {
 var $0 = 0, $3 = 0;
 $0 = HEAP32[4526] | 0;
 if (!$0) ___assert_fail(22712, 18224, 837, 19240);
 _buffer_check_empty(HEAP32[4530] | 0);
 HEAP32[4527] = $0;
 $3 = HEAP32[4530] | 0;
 if (!$3) ___assert_fail(23160, 19880, 112, 19312); else {
  HEAP32[$3 + 60 >> 2] = $0;
  return;
 }
}

function __ZNK12b2MotorJoint16GetReactionForceEf($agg$result, $this, $inv_dt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 var $5 = 0.0;
 $5 = +HEAPF32[$this + 84 >> 2] * $inv_dt;
 HEAPF32[$agg$result >> 2] = +HEAPF32[$this + 80 >> 2] * $inv_dt;
 HEAPF32[$agg$result + 4 >> 2] = $5;
 return;
}

function _display_draw_from($surface) {
 $surface = $surface | 0;
 if ((HEAP32[4529] | 0) == ($surface | 0)) return;
 _buffer_check_empty(HEAP32[4530] | 0);
 HEAP32[4529] = $surface;
 if (!$surface) _glBindTexture(3553, 0); else _surface_draw_from($surface);
 HEAP32[(HEAP32[4530] | 0) + 80 >> 2] = HEAP32[4529];
 return;
}

function _testSetjmp(id, table, size) {
 id = id | 0;
 table = table | 0;
 size = size | 0;
 var i = 0, curr = 0;
 while ((i | 0) < (size | 0)) {
  curr = HEAP32[table + (i << 3) >> 2] | 0;
  if (!curr) break;
  if ((curr | 0) == (id | 0)) return HEAP32[table + ((i << 3) + 4) >> 2] | 0;
  i = i + 1 | 0;
 }
 return 0;
}

function _buffer_check_empty($b) {
 $b = $b | 0;
 var $4 = 0;
 if (!$b) ___assert_fail(23160, 22016, 169, 22112);
 if (!(HEAP32[$b + 44 >> 2] | 0)) return;
 _buffer_draw($b, 0.0, 0.0);
 $4 = $b + 40 | 0;
 HEAP32[$4 + 0 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 HEAP32[$4 + 8 >> 2] = 0;
 HEAP32[$4 + 12 >> 2] = 0;
 return;
}

function _luaH_free($L, $t) {
 $L = $L | 0;
 $t = $t | 0;
 var $1 = 0;
 $1 = HEAP32[$t + 16 >> 2] | 0;
 if (($1 | 0) != 62336) _luaM_realloc_($L, $1, 20 << (HEAPU8[$t + 7 >> 0] | 0), 0) | 0;
 _luaM_realloc_($L, HEAP32[$t + 12 >> 2] | 0, HEAP32[$t + 8 >> 2] << 3, 0) | 0;
 _luaM_realloc_($L, $t, 32, 0) | 0;
 return;
}

function _png_set_interlace_handling($png_ptr) {
 $png_ptr = $png_ptr | 0;
 var $$0 = 0, $4 = 0;
 if (!$png_ptr) {
  $$0 = 1;
  return $$0 | 0;
 }
 if (!(HEAP8[$png_ptr + 432 >> 0] | 0)) {
  $$0 = 1;
  return $$0 | 0;
 }
 $4 = $png_ptr + 216 | 0;
 HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 $$0 = 7;
 return $$0 | 0;
}

function __ZNK12b2MotorJoint10GetAnchorBEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $3 = 0, $8 = 0, $9 = 0;
 $3 = (HEAP32[$this + 52 >> 2] | 0) + 12 | 0;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = $agg$result;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 return;
}

function __ZNK12b2MotorJoint10GetAnchorAEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $3 = 0, $8 = 0, $9 = 0;
 $3 = (HEAP32[$this + 48 >> 2] | 0) + 12 | 0;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = $agg$result;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 return;
}

function _finishpcall($L, $status, $extra) {
 $L = $L | 0;
 $status = $status | 0;
 $extra = $extra | 0;
 var $$0 = 0;
 if ($status >>> 0 > 1) {
  _lua_pushboolean($L, 0);
  _lua_pushvalue($L, -2);
  $$0 = 2;
  return $$0 | 0;
 } else {
  $$0 = (_lua_gettop($L) | 0) - $extra | 0;
  return $$0 | 0;
 }
 return 0;
}

function _db_getupvalue($L) {
 $L = $L | 0;
 var $$0$i = 0, $0 = 0, $1 = 0;
 $0 = _luaL_checkinteger($L, 2) | 0;
 _luaL_checktype($L, 1, 6);
 $1 = _lua_getupvalue($L, 1, $0) | 0;
 if (!$1) {
  $$0$i = 0;
  return $$0$i | 0;
 }
 _lua_pushstring($L, $1) | 0;
 _lua_rotate($L, -2, 1);
 $$0$i = 2;
 return $$0$i | 0;
}

function _mlua_set_line_width($L) {
 $L = $L | 0;
 var $1 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!$L) ___assert_fail(23976, 19928, 76, 20304);
 $1 = +_luaL_checknumber($L, 1);
 if (!($1 >= 0.0)) _luaL_error($L, 20328, sp) | 0;
 _display_set_line_width($1);
 STACKTOP = sp;
 return 0;
}

function __ZN25b2PolygonAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
 $contact = $contact | 0;
 $allocator = $allocator | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$contact >> 2] | 0) + 4 >> 2] & 127]($contact);
 __ZN16b2BlockAllocator4FreeEPvi($allocator, $contact, 148);
 return;
}

function _luaC_fix($L, $o) {
 $L = $L | 0;
 $o = $o | 0;
 var $1 = 0, $2 = 0, $9 = 0;
 $1 = HEAP32[$L + 12 >> 2] | 0;
 $2 = $o + 5 | 0;
 HEAP8[$2 >> 0] = (HEAPU8[$2 >> 0] | 0) & 252;
 HEAP32[$1 + 52 >> 2] = HEAP32[$o >> 2];
 $9 = $1 + 88 | 0;
 HEAP32[$o >> 2] = HEAP32[$9 >> 2];
 HEAP32[$9 >> 2] = $o;
 return;
}

function __ZN24b2ChainAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
 $contact = $contact | 0;
 $allocator = $allocator | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$contact >> 2] | 0) + 4 >> 2] & 127]($contact);
 __ZN16b2BlockAllocator4FreeEPvi($allocator, $contact, 148);
 return;
}

function _luaO_pushfstring($L, $fmt, $varargs) {
 $L = $L | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $argp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $argp = sp;
 HEAP32[$argp >> 2] = $varargs;
 $0 = _luaO_pushvfstring($L, $fmt, $argp) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function _die($fmt, $varargs) {
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $arg = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $arg = sp;
 HEAP32[$arg >> 2] = $varargs;
 $0 = HEAP32[_stderr >> 2] | 0;
 _vfprintf($0 | 0, $fmt | 0, $arg | 0) | 0;
 _fputc(10, $0 | 0) | 0;
 _exit(-1);
}

function __ZN23b2EdgeAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
 $contact = $contact | 0;
 $allocator = $allocator | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$contact >> 2] | 0) + 4 >> 2] & 127]($contact);
 __ZN16b2BlockAllocator4FreeEPvi($allocator, $contact, 148);
 return;
}

function __ZN23b2ChainAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
 $contact = $contact | 0;
 $allocator = $allocator | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$contact >> 2] | 0) + 4 >> 2] & 127]($contact);
 __ZN16b2BlockAllocator4FreeEPvi($allocator, $contact, 148);
 return;
}

function __ZN22b2EdgeAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
 $contact = $contact | 0;
 $allocator = $allocator | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$contact >> 2] | 0) + 4 >> 2] & 127]($contact);
 __ZN16b2BlockAllocator4FreeEPvi($allocator, $contact, 148);
 return;
}

function _snprintf($s, $n, $fmt, $varargs) {
 $s = $s | 0;
 $n = $n | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $ap = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $0 = _vsnprintf($s, $n, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function _mlua_draw_from_surface($L) {
 $L = $L | 0;
 var $$0 = 0, $1 = 0;
 if (!$L) ___assert_fail(23976, 19928, 234, 20952);
 $1 = _display_get_draw_from() | 0;
 _display_draw_from(_pop_surface($L, 1) | 0);
 if (!$1) {
  $$0 = 0;
  return $$0 | 0;
 }
 _push_surface($L, $1);
 $$0 = 1;
 return $$0 | 0;
}

function _luaX_init($L) {
 $L = $L | 0;
 var $3 = 0, $i$01 = 0;
 _luaC_fix($L, _luaS_new($L, 66968) | 0);
 $i$01 = 0;
 do {
  $3 = _luaS_new($L, HEAP32[66976 + ($i$01 << 2) >> 2] | 0) | 0;
  _luaC_fix($L, $3);
  $i$01 = $i$01 + 1 | 0;
  HEAP8[$3 + 6 >> 0] = $i$01;
 } while (($i$01 | 0) != 22);
 return;
}

function __ZN11b2GearJoint8SetRatioEf($this, $ratio) {
 $this = $this | 0;
 $ratio = +$ratio;
 if (((HEAPF32[tempDoublePtr >> 2] = $ratio, HEAP32[tempDoublePtr >> 2] | 0) & 2139095040 | 0) == 2139095040) ___assert_fail(84024, 83880, 394, 84048); else {
  HEAPF32[$this + 152 >> 2] = $ratio;
  return;
 }
}

function _dlua_get_function($name) {
 $name = $name | 0;
 var $$0 = 0, $0 = 0;
 $0 = HEAP32[16] | 0;
 if (!$name) ___assert_fail(66832, 128, 141, 184);
 _dlua_get_drystal_field($name);
 if ((_lua_type($0, -1) | 0) == 6) {
  $$0 = 1;
  return $$0 | 0;
 }
 _lua_settop($0, -2);
 $$0 = 0;
 return $$0 | 0;
}

function __ZN16b2PolygonContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
 $contact = $contact | 0;
 $allocator = $allocator | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$contact >> 2] | 0) + 4 >> 2] & 127]($contact);
 __ZN16b2BlockAllocator4FreeEPvi($allocator, $contact, 148);
 return;
}

function _luaC_upvalbarrier_($L, $uv) {
 $L = $L | 0;
 $uv = $uv | 0;
 var $1 = 0, $3 = 0;
 $1 = HEAP32[$L + 12 >> 2] | 0;
 $3 = HEAP32[HEAP32[$uv >> 2] >> 2] | 0;
 if ((HEAPU8[$1 + 49 >> 0] | 0) > 1 | ($3 | 0) == 0) return;
 if (!(HEAP8[$3 + 5 >> 0] & 3)) return;
 _reallymarkobject($1, $3);
 return;
}

function __ZN15b2CircleContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
 $contact = $contact | 0;
 $allocator = $allocator | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$contact >> 2] | 0) + 4 >> 2] & 127]($contact);
 __ZN16b2BlockAllocator4FreeEPvi($allocator, $contact, 148);
 return;
}

function _surface_draw_on($s) {
 $s = $s | 0;
 if (!$s) ___assert_fail(23264, 16096, 236, 16144);
 HEAP8[$s + 25 >> 0] = 0;
 HEAP8[$s + 44 >> 0] = 0;
 if (!(HEAP8[$s + 24 >> 0] | 0)) {
  _surface_create_fbo($s);
  return;
 } else {
  _glBindFramebuffer(36160, HEAP32[$s + 36 >> 2] | 0);
  return;
 }
}

function __ZNK12b2ChainShape11ComputeMassEP10b2MassDataf($this, $massData, $density) {
 $this = $this | 0;
 $massData = $massData | 0;
 $density = +$density;
 HEAP32[$massData + 0 >> 2] = 0;
 HEAP32[$massData + 4 >> 2] = 0;
 HEAP32[$massData + 8 >> 2] = 0;
 HEAP32[$massData + 12 >> 2] = 0;
 return;
}

function _f_read($L) {
 $L = $L | 0;
 var $0 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = _luaL_checkudata($L, 1, 56736) | 0;
 if (!(HEAP32[$0 + 4 >> 2] | 0)) _luaL_error($L, 56960, sp) | 0;
 $5 = _g_read($L, HEAP32[$0 >> 2] | 0, 2) | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function _mlua_draw_on_surface($L) {
 $L = $L | 0;
 var $$0 = 0, $1 = 0;
 if (!$L) ___assert_fail(23976, 19928, 219, 20928);
 $1 = _display_get_draw_on() | 0;
 _display_draw_on(_pop_surface($L, 1) | 0);
 if (!$1) {
  $$0 = 0;
  return $$0 | 0;
 }
 _push_surface($L, $1);
 $$0 = 1;
 return $$0 | 0;
}

function _os_exit($L) {
 $L = $L | 0;
 var $status$0 = 0;
 if ((_lua_type($L, 1) | 0) == 1) $status$0 = (_lua_toboolean($L, 1) | 0) == 0 & 1; else $status$0 = _luaL_optinteger($L, 1, 0) | 0;
 if (_lua_toboolean($L, 2) | 0) _lua_close($L);
 if (!$L) return 0; else _exit($status$0 | 0);
 return 0;
}

function _on_zip_fail($userdata) {
 $userdata = $userdata | 0;
 var $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = $userdata;
 _log_internal(0, 56160, 1152, $vararg_buffer);
 _engine_load();
 STACKTOP = sp;
 return;
}

function _math_type($L) {
 $L = $L | 0;
 if ((_lua_type($L, 1) | 0) != 3) {
  _luaL_checkany($L, 1);
  _lua_pushnil($L);
  return 1;
 }
 if (!(_lua_isinteger($L, 1) | 0)) {
  _lua_pushlstring($L, 57952, 5) | 0;
  return 1;
 } else {
  _lua_pushlstring($L, 57944, 7) | 0;
  return 1;
 }
 return 0;
}

function _getS($L, $ud, $size) {
 $L = $L | 0;
 $ud = $ud | 0;
 $size = $size | 0;
 var $$0 = 0, $0 = 0, $1 = 0;
 $0 = $ud + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP32[$size >> 2] = $1;
 HEAP32[$0 >> 2] = 0;
 $$0 = HEAP32[$ud >> 2] | 0;
 return $$0 | 0;
}

function _shader_free($s) {
 $s = $s | 0;
 if (!$s) return;
 _glDeleteShader(HEAP32[$s + 8 >> 2] | 0);
 _glDeleteShader(HEAP32[$s + 12 >> 2] | 0);
 _glDeleteShader(HEAP32[$s + 16 >> 2] | 0);
 _glDeleteProgram(HEAP32[$s >> 2] | 0);
 _glDeleteProgram(HEAP32[$s + 4 >> 2] | 0);
 _free($s);
 return;
}

function _luaH_new($L) {
 $L = $L | 0;
 var $0 = 0;
 $0 = _luaC_newobj($L, 5, 32) | 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP8[$0 + 6 >> 0] = -1;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 62336;
 HEAP8[$0 + 7 >> 0] = 0;
 HEAP32[$0 + 20 >> 2] = 62336;
 return $0 | 0;
}

function _lmc_free($mc) {
 $mc = $mc | 0;
 var $1 = 0, $6 = 0;
 if (!$mc) return;
 $1 = $mc + 12 | 0;
 _luaL_unref(HEAP32[$1 >> 2] | 0, -1001e3, HEAP32[$mc + 16 >> 2] | 0);
 $6 = HEAP32[$mc + 20 >> 2] | 0;
 if (($6 | 0) != -2) _luaL_unref(HEAP32[$1 >> 2] | 0, -1001e3, $6);
 _free($mc);
 return;
}

function _math_abs($L) {
 $L = $L | 0;
 var $2 = 0;
 if (!(_lua_isinteger($L, 1) | 0)) {
  _lua_pushnumber($L, +Math_abs(+(+_luaL_checknumber($L, 1))));
  return 1;
 } else {
  $2 = _lua_tointegerx($L, 1, 0) | 0;
  _lua_pushinteger($L, ($2 | 0) < 0 ? 0 - $2 | 0 : $2);
  return 1;
 }
 return 0;
}

function _png_free($png_ptr, $ptr) {
 $png_ptr = $png_ptr | 0;
 $ptr = $ptr | 0;
 var $3 = 0;
 if (($png_ptr | 0) == 0 | ($ptr | 0) == 0) return;
 $3 = HEAP32[$png_ptr + 724 >> 2] | 0;
 if (!$3) {
  _free($ptr);
  return;
 } else {
  FUNCTION_TABLE_vii[$3 & 127]($png_ptr, $ptr);
  return;
 }
}

function _display_set_camera_angle($angle) {
 $angle = +$angle;
 var $1 = 0, $3 = 0;
 _buffer_check_empty(HEAP32[4530] | 0);
 $1 = HEAP32[4532] | 0;
 HEAPF32[$1 + 12 >> 2] = $angle;
 $3 = HEAP32[4528] | 0;
 _camera_update_matrix($1, HEAP32[$3 + 4 >> 2] | 0, HEAP32[$3 + 8 >> 2] | 0);
 return;
}

function _png_default_read_data($png_ptr, $data, $length) {
 $png_ptr = $png_ptr | 0;
 $data = $data | 0;
 $length = $length | 0;
 if (!$png_ptr) return;
 if ((_fread($data | 0, 1, $length | 0, HEAP32[$png_ptr + 188 >> 2] | 0) | 0) == ($length | 0)) return; else _png_error($png_ptr, 74920);
}

function _luaS_eqlngstr($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $11 = 0;
 $1 = HEAP32[$a + 12 >> 2] | 0;
 if (($a | 0) == ($b | 0)) $11 = 1; else if (($1 | 0) == (HEAP32[$b + 12 >> 2] | 0)) $11 = (_memcmp($a + 24 | 0, $b + 24 | 0, $1) | 0) == 0; else $11 = 0;
 return $11 & 1 | 0;
}

function _png_read_data($png_ptr, $data, $length) {
 $png_ptr = $png_ptr | 0;
 $data = $data | 0;
 $length = $length | 0;
 var $1 = 0;
 $1 = HEAP32[$png_ptr + 184 >> 2] | 0;
 if (!$1) _png_error($png_ptr, 74888); else {
  FUNCTION_TABLE_viii[$1 & 15]($png_ptr, $data, $length);
  return;
 }
}

function __ZNK12b2MouseJoint10GetAnchorAEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $1 = 0, $6 = 0, $7 = 0;
 $1 = $this + 76 | 0;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$result;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 return;
}

function _onsuccess($filename) {
 $filename = $filename | 0;
 var $2 = 0;
 if (!$filename) ___assert_fail(16296, 12600, 35, 12648);
 if (!(_dlua_get_function(12664) | 0)) return;
 $2 = _dlua_get_lua_state() | 0;
 _lua_pushstring($2, $filename) | 0;
 _call_lua_function($2, 1, 0);
 return;
}

function _os_execute($L) {
 $L = $L | 0;
 var $$0 = 0, $0 = 0, $1 = 0;
 $0 = _luaL_optlstring($L, 1, 0, 0) | 0;
 $1 = _system($0 | 0) | 0;
 if (!$0) {
  _lua_pushboolean($L, $1);
  $$0 = 1;
  return $$0 | 0;
 } else {
  $$0 = _luaL_execresult($L, $1) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _mlua_log_warning($L) {
 $L = $L | 0;
 var $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = _luaL_checklstring($L, 1, 0) | 0;
 _log_internal(1, 848, 57168, $vararg_buffer);
 STACKTOP = sp;
 return 0;
}

function _luaK_stringK($fs, $s) {
 $fs = $fs | 0;
 $s = $s | 0;
 var $5 = 0, $o = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $o = sp;
 HEAP32[$o >> 2] = $s;
 HEAP32[$o + 4 >> 2] = HEAPU8[$s + 4 >> 0] | 0 | 64;
 $5 = _addk($fs, $o, $o) | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function _luaK_indexed($fs, $t, $k) {
 $fs = $fs | 0;
 $t = $t | 0;
 $k = $k | 0;
 var $0 = 0;
 $0 = $t + 4 | 0;
 HEAP8[$0 + 2 >> 0] = HEAP32[$0 >> 2];
 HEAP16[$0 >> 1] = _luaK_exp2RK($fs, $k) | 0;
 HEAP8[$0 + 3 >> 0] = (HEAP32[$t >> 2] | 0) == 9 ? 9 : 8;
 HEAP32[$t >> 2] = 10;
 return;
}

function _luaB_error($L) {
 $L = $L | 0;
 var $0 = 0;
 $0 = _luaL_optinteger($L, 2, 1) | 0;
 _lua_settop($L, 1);
 if (!((_lua_isstring($L, 1) | 0) != 0 & ($0 | 0) > 0)) _lua_error($L) | 0;
 _luaL_where($L, $0);
 _lua_pushvalue($L, 1);
 _lua_concat($L, 2);
 _lua_error($L) | 0;
 return 0;
}

function __Z21mlua_set_sensor_shapeP9lua_State($L) {
 $L = $L | 0;
 var $2 = 0;
 if (!$L) ___assert_fail(23976, 5080, 95, 5208); else {
  $2 = HEAP32[(__Z9pop_shapeP9lua_Statei($L, 1) | 0) >> 2] | 0;
  HEAP8[$2 + 20 >> 0] = (_lua_toboolean($L, 2) | 0) != 0 & 1;
  return 0;
 }
 return 0;
}

function _onerror($filename) {
 $filename = $filename | 0;
 var $2 = 0;
 if (!$filename) ___assert_fail(16296, 12600, 46, 12624);
 if (!(_dlua_get_function(12632) | 0)) return;
 $2 = _dlua_get_lua_state() | 0;
 _lua_pushstring($2, $filename) | 0;
 _call_lua_function($2, 1, 0);
 return;
}

function _mlua_log_error($L) {
 $L = $L | 0;
 var $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = _luaL_checklstring($L, 1, 0) | 0;
 _log_internal(0, 848, 57168, $vararg_buffer);
 STACKTOP = sp;
 return 0;
}

function _luaC_upvdeccount($L, $uv) {
 $L = $L | 0;
 $uv = $uv | 0;
 var $0 = 0, $2 = 0;
 $0 = $uv + 4 | 0;
 $2 = (HEAP32[$0 >> 2] | 0) + -1 | 0;
 HEAP32[$0 >> 2] = $2;
 if ($2) return;
 if ((HEAP32[$uv >> 2] | 0) != ($uv + 8 | 0)) return;
 _luaM_realloc_($L, $uv, 16, 0) | 0;
 return;
}

function _change_shadowy($str, $state) {
 $str = $str | 0;
 $state = $state | 0;
 if (!$str) ___assert_fail(8168, 6144, 149, 8176);
 if (!$state) ___assert_fail(6136, 6144, 150, 8176); else {
  HEAPF32[$state + 44 >> 2] = +(_atoi($str) | 0);
  HEAP8[$state + 25 >> 0] = 1;
  return;
 }
}

function _change_shadowx($str, $state) {
 $str = $str | 0;
 $state = $state | 0;
 if (!$str) ___assert_fail(8168, 6144, 141, 8192);
 if (!$state) ___assert_fail(6136, 6144, 142, 8192); else {
  HEAPF32[$state + 40 >> 2] = +(_atoi($str) | 0);
  HEAP8[$state + 25 >> 0] = 1;
  return;
 }
}

function _png_get_valid($png_ptr, $info_ptr, $flag) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 $flag = $flag | 0;
 var $$0 = 0;
 if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) {
  $$0 = 0;
  return $$0 | 0;
 }
 $$0 = HEAP32[$info_ptr + 8 >> 2] & $flag;
 return $$0 | 0;
}

function _mlua_log_info($L) {
 $L = $L | 0;
 var $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = _luaL_checklstring($L, 1, 0) | 0;
 _log_internal(2, 848, 57168, $vararg_buffer);
 STACKTOP = sp;
 return 0;
}

function _sprintf($s, $fmt, $varargs) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $ap = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $0 = _vsprintf($s, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function _png_longjmp($png_ptr, $val) {
 $png_ptr = $png_ptr | 0;
 $val = $val | 0;
 var $2 = 0, $5 = 0;
 if ($png_ptr) {
  $2 = HEAP32[$png_ptr + 156 >> 2] | 0;
  if ($2) {
   $5 = HEAP32[$png_ptr + 160 >> 2] | 0;
   if ($5) FUNCTION_TABLE_vii[$2 & 127]($5, $val);
  }
 }
 _abort();
}

function _png_chunk_benign_error($png_ptr, $error_message) {
 $png_ptr = $png_ptr | 0;
 $error_message = $error_message | 0;
 if (!(HEAP32[$png_ptr + 212 >> 2] & 1048576)) _png_chunk_error($png_ptr, $error_message); else {
  _png_chunk_warning($png_ptr, $error_message);
  return;
 }
}

function _lua_pushthread($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0;
 $0 = $L + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAP32[$1 >> 2] = $L;
 HEAP32[$1 + 4 >> 2] = 72;
 HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 8;
 return (HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 124 >> 2] | 0) == ($L | 0) | 0;
}

function _luaC_barrierback_($L, $t) {
 $L = $L | 0;
 $t = $t | 0;
 var $1 = 0, $2 = 0, $7 = 0;
 $1 = HEAP32[$L + 12 >> 2] | 0;
 $2 = $t + 5 | 0;
 HEAP8[$2 >> 0] = (HEAPU8[$2 >> 0] | 0) & 251;
 $7 = $1 + 68 | 0;
 HEAP32[$t + 28 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$7 >> 2] = $t;
 return;
}

function _display_draw_background() {
 var $1 = 0;
 _buffer_check_empty(HEAP32[4530] | 0);
 $1 = HEAP32[4531] | 0;
 _glClearColor(+(+($1 & 255 | 0) / 255.0), +(+($1 >>> 8 & 255 | 0) / 255.0), +(+($1 >>> 16 & 255 | 0) / 255.0), +(+($1 >>> 24 | 0) / 255.0));
 _glClear(16384);
 return;
}

function _luaL_unref($L, $t, $ref) {
 $L = $L | 0;
 $t = $t | 0;
 $ref = $ref | 0;
 var $1 = 0;
 if (($ref | 0) <= -1) return;
 $1 = _lua_absindex($L, $t) | 0;
 _lua_rawgeti($L, $1, 0) | 0;
 _lua_rawseti($L, $1, $ref);
 _lua_pushinteger($L, $ref);
 _lua_rawseti($L, $1, 0);
 return;
}

function _bitshift64Ashr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >> bits;
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 tempRet0 = (high | 0) < 0 ? -1 : 0;
 return high >> bits - 32 | 0;
}

function _mlua_set_fullscreen($L) {
 $L = $L | 0;
 if (!$L) ___assert_fail(23976, 19928, 88, 20360); else {
  _display_set_fullscreen((_lua_toboolean($L, 1) | 0) != 0);
  _push_surface($L, _display_get_screen() | 0);
  _lua_setfield($L, -1001e3, 20384);
  return 0;
 }
 return 0;
}

function ___cxa_get_globals_fast() {
 var $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!(_pthread_once(105960, 5) | 0)) {
  $3 = _pthread_getspecific(HEAP32[26488] | 0) | 0;
  STACKTOP = sp;
  return $3 | 0;
 } else _abort_message(105968, sp);
 return 0;
}

function _mlua_get_position_system($L) {
 $L = $L | 0;
 var $1 = 0;
 if (!$L) ___assert_fail(23976, 8472, 93, 8600); else {
  $1 = _pop_system($L, 1) | 0;
  _lua_pushnumber($L, +HEAPF32[$1 + 412 >> 2]);
  _lua_pushnumber($L, +HEAPF32[$1 + 416 >> 2]);
  return 2;
 }
 return 0;
}

function _l_alloc($ud, $ptr, $osize, $nsize) {
 $ud = $ud | 0;
 $ptr = $ptr | 0;
 $osize = $osize | 0;
 $nsize = $nsize | 0;
 var $$0 = 0;
 if (!$nsize) {
  _free($ptr);
  $$0 = 0;
  return $$0 | 0;
 } else {
  $$0 = _realloc($ptr, $nsize) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _mlua_get_offset_system($L) {
 $L = $L | 0;
 var $1 = 0;
 if (!$L) ___assert_fail(23976, 8472, 115, 8656); else {
  $1 = _pop_system($L, 1) | 0;
  _lua_pushnumber($L, +HEAPF32[$1 + 420 >> 2]);
  _lua_pushnumber($L, +HEAPF32[$1 + 424 >> 2]);
  return 2;
 }
 return 0;
}

function _mlua_emit_system($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $n$01 = 0;
 $0 = _pop_system($L, 1) | 0;
 $1 = _luaL_optinteger($L, 2, 1) | 0;
 if (!$1) return 0; else $n$01 = $1;
 do {
  $n$01 = $n$01 + -1 | 0;
  _system_emit($0);
 } while (($n$01 | 0) != 0);
 return 0;
}

function _mlua_camera_push($L) {
 $L = $L | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!$L) ___assert_fail(23976, 21816, 84, 21912);
 if (_camera_stack_is_full() | 0) _luaL_error($L, 21936, sp) | 0;
 _display_push_camera();
 STACKTOP = sp;
 return 0;
}

function _ll_seeall($L) {
 $L = $L | 0;
 _luaL_checktype($L, 1, 5);
 if (!(_lua_getmetatable($L, 1) | 0)) {
  _lua_createtable($L, 0, 1);
  _lua_pushvalue($L, -1);
  _lua_setmetatable($L, 1) | 0;
 }
 _lua_rawgeti($L, -1001e3, 2) | 0;
 _lua_setfield($L, -2, 64992);
 return 0;
}

function _mlua_feed_shader($L) {
 $L = $L | 0;
 var $1 = 0, $2 = 0;
 if (!$L) ___assert_fail(23976, 13016, 77, 13128); else {
  $1 = _pop_shader($L, 1) | 0;
  $2 = _luaL_checklstring($L, 2, 0) | 0;
  _shader_feed($1, $2, +_luaL_checknumber($L, 3));
  return 0;
 }
 return 0;
}

function _mlua_draw_system($L) {
 $L = $L | 0;
 var $1 = 0, $2 = 0.0;
 if (!$L) ___assert_fail(23976, 8472, 184, 9448); else {
  $1 = _pop_system($L, 1) | 0;
  $2 = +_luaL_optnumber($L, 2, 0.0);
  _system_draw($1, $2, +_luaL_optnumber($L, 3, 0.0));
  return 0;
 }
 return 0;
}

function _mlua_camera_pop($L) {
 $L = $L | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!$L) ___assert_fail(23976, 21816, 94, 21968);
 if (_camera_stack_is_empty() | 0) _luaL_error($L, 21984, sp) | 0;
 _display_pop_camera();
 STACKTOP = sp;
 return 0;
}

function _luaL_pushresult($B) {
 $B = $B | 0;
 var $1 = 0;
 $1 = HEAP32[$B + 12 >> 2] | 0;
 _lua_pushlstring($1, HEAP32[$B >> 2] | 0, HEAP32[$B + 8 >> 2] | 0) | 0;
 if ((HEAP32[$B >> 2] | 0) == ($B + 16 | 0)) return;
 _lua_rotate($1, -2, -1);
 _lua_settop($1, -2);
 return;
}

function _engine_load() {
 var $0 = 0, $2 = 0, $4 = 0;
 $0 = _dlua_load_code() | 0;
 $2 = HEAP8[12] | 0;
 if ($2 << 24 >> 24 == 0 | $0 ^ 1) $4 = $2; else {
  _dlua_call_init();
  $4 = HEAP8[12] | 0;
 }
 HEAP8[12] = $4 << 24 >> 24 == 0 ? 0 : $0 & 1;
 HEAP8[13] = 1;
 return;
}

function __ZN15b2ContactSolverD2Ev($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = $this + 32 | 0;
 __ZN16b2StackAllocator4FreeEPv(HEAP32[$0 >> 2] | 0, HEAP32[$this + 40 >> 2] | 0);
 __ZN16b2StackAllocator4FreeEPv(HEAP32[$0 >> 2] | 0, HEAP32[$this + 36 >> 2] | 0);
 return;
}

function __Z5b2LogPKcz($string, $varargs) {
 $string = $string | 0;
 $varargs = $varargs | 0;
 var $args = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $args = sp;
 HEAP32[$args >> 2] = $varargs;
 _vprintf($string | 0, $args | 0) | 0;
 STACKTOP = sp;
 return;
}

function _png_set_sig_bytes($png_ptr, $num_bytes) {
 $png_ptr = $png_ptr | 0;
 $num_bytes = $num_bytes | 0;
 if (!$png_ptr) return;
 if (($num_bytes | 0) > 8) _png_error($png_ptr, 71672);
 HEAP8[$png_ptr + 441 >> 0] = ($num_bytes | 0) < 0 ? 0 : $num_bytes & 255;
 return;
}

function _lua_absindex($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $11 = 0;
 if (($idx + 1000999 | 0) >>> 0 > 1000999) {
  $11 = $idx;
  return $11 | 0;
 }
 $11 = ((HEAP32[$L + 8 >> 2] | 0) - (HEAP32[HEAP32[$L + 16 >> 2] >> 2] | 0) >> 3) + $idx | 0;
 return $11 | 0;
}

function _luaB_dofile($L) {
 $L = $L | 0;
 var $0 = 0;
 $0 = _luaL_optlstring($L, 1, 0, 0) | 0;
 _lua_settop($L, 1);
 if (!(_luaL_loadfilex($L, $0, 0) | 0)) {
  _lua_callk($L, 0, -1, 0, 19);
  return (_lua_gettop($L) | 0) + -1 | 0;
 } else _lua_error($L) | 0;
 return 0;
}

function _change_alpha($str, $state) {
 $str = $str | 0;
 $state = $state | 0;
 if (!$str) ___assert_fail(8168, 6144, 43, 8440);
 if (!$state) ___assert_fail(6136, 6144, 44, 8440); else {
  HEAP32[$state + 20 >> 2] = ~~(+(_atoi($str) | 0) / 100.0 * 255.0);
  return;
 }
}

function __Z25mlua_set_pixels_per_meterP9lua_State($L) {
 $L = $L | 0;
 var $0 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = +_luaL_checknumber($L, 1);
 if (!($0 > 0.0)) _luaL_error($L, 2536, sp) | 0;
 HEAPF32[616] = $0;
 STACKTOP = sp;
 return 0;
}

function _point_compare($p, $q) {
 $p = $p | 0;
 $q = $q | 0;
 var $0 = 0, $1 = 0, $5 = 0;
 $0 = HEAP16[$p >> 1] | 0;
 $1 = HEAP16[$q >> 1] | 0;
 if (($0 & 65535) < ($1 & 65535)) {
  $5 = -1;
  return $5 | 0;
 }
 $5 = ($0 & 65535) > ($1 & 65535) & 1;
 return $5 | 0;
}

function _png_create_info_struct($png_ptr) {
 $png_ptr = $png_ptr | 0;
 var $$0 = 0, $1 = 0;
 if (!$png_ptr) $$0 = 0; else {
  $1 = _png_malloc_base($png_ptr, 268) | 0;
  if (!$1) $$0 = $1; else {
   _memset($1 | 0, 0, 268) | 0;
   $$0 = $1;
  }
 }
 return $$0 | 0;
}

function _luaZ_init($L, $z, $reader, $data) {
 $L = $L | 0;
 $z = $z | 0;
 $reader = $reader | 0;
 $data = $data | 0;
 HEAP32[$z + 16 >> 2] = $L;
 HEAP32[$z + 8 >> 2] = $reader;
 HEAP32[$z + 12 >> 2] = $data;
 HEAP32[$z >> 2] = 0;
 HEAP32[$z + 4 >> 2] = 0;
 return;
}

function _db_upvalueid($L) {
 $L = $L | 0;
 var $0 = 0;
 $0 = _luaL_checkinteger($L, 2) | 0;
 _luaL_checktype($L, 1, 6);
 if (!(_lua_getupvalue($L, 1, $0) | 0)) _luaL_argerror($L, 2, 66640) | 0;
 _lua_pushlightuserdata($L, _lua_upvalueid($L, 1, $0) | 0);
 return 1;
}

function _buffer_allocate($b) {
 $b = $b | 0;
 if (!$b) ___assert_fail(23160, 22016, 120, 22048); else {
  _glGenBuffers(4, $b + 8 | 0);
  _glBindBuffer(34962, 0);
  _glEnableVertexAttribArray(0);
  _glEnableVertexAttribArray(1);
  HEAP32[$b >> 2] = 0;
  return;
 }
}

function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 _free($p);
 if (!(_pthread_setspecific(HEAP32[26488] | 0, 0) | 0)) {
  STACKTOP = sp;
  return;
 } else _abort_message(106080, sp);
}

function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits;
  return low << bits;
 }
 tempRet0 = low << bits - 32;
 return 0;
}

function __ZN16b2ContactManagerC2Ev($this) {
 $this = $this | 0;
 __ZN12b2BroadPhaseC2Ev($this);
 HEAP32[$this + 60 >> 2] = 0;
 HEAP32[$this + 64 >> 2] = 0;
 HEAP32[$this + 68 >> 2] = 87976;
 HEAP32[$this + 72 >> 2] = 87984;
 HEAP32[$this + 76 >> 2] = 0;
 return;
}

function _png_set_packing($png_ptr) {
 $png_ptr = $png_ptr | 0;
 var $4 = 0;
 if (!$png_ptr) return;
 if ((HEAPU8[$png_ptr + 436 >> 0] | 0) >= 8) return;
 $4 = $png_ptr + 216 | 0;
 HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 4;
 HEAP8[$png_ptr + 437 >> 0] = 8;
 return;
}

function _png_reciprocal2($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $$0 = 0, $5 = 0.0;
 $5 = +Math_floor(+(1.0e15 / +($a | 0) / +($b | 0) + .5));
 if (!($5 <= 2147483647.0 & $5 >= -2147483648.0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $$0 = ~~$5;
 return $$0 | 0;
}

function _gctm($L) {
 $L = $L | 0;
 var $0 = 0, $n$01 = 0;
 $0 = _luaL_len($L, 1) | 0;
 if (($0 | 0) > 0) $n$01 = $0; else return 0;
 do {
  _lua_rawgeti($L, 1, $n$01) | 0;
  _lua_settop($L, -2);
  $n$01 = $n$01 + -1 | 0;
 } while (($n$01 | 0) > 0);
 return 0;
}

function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits;
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 tempRet0 = 0;
 return high >>> bits - 32 | 0;
}

function _png_get_color_type($png_ptr, $info_ptr) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 var $$0 = 0;
 if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) {
  $$0 = 0;
  return $$0 | 0;
 }
 $$0 = HEAP8[$info_ptr + 25 >> 0] | 0;
 return $$0 | 0;
}

function _png_get_bit_depth($png_ptr, $info_ptr) {
 $png_ptr = $png_ptr | 0;
 $info_ptr = $info_ptr | 0;
 var $$0 = 0;
 if (($png_ptr | 0) == 0 | ($info_ptr | 0) == 0) {
  $$0 = 0;
  return $$0 | 0;
 }
 $$0 = HEAP8[$info_ptr + 24 >> 0] | 0;
 return $$0 | 0;
}

function _display_create_surface($w, $h, $texw, $texh, $pixels) {
 $w = $w | 0;
 $h = $h | 0;
 $texw = $texw | 0;
 $texh = $texh | 0;
 $pixels = $pixels | 0;
 return _surface_new($w, $h, $texw, $texh, 6408, $pixels, HEAP32[4529] | 0, HEAP32[4528] | 0) | 0;
}

function copyTempFloat(ptr) {
 ptr = ptr | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[ptr >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[ptr + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[ptr + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[ptr + 3 >> 0];
}

function _luaE_extendCI($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0;
 $0 = _luaM_realloc_($L, 0, 0, 36) | 0;
 $1 = $L + 16 | 0;
 HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] = $0;
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 12 >> 2] = 0;
 return $0 | 0;
}

function _math_frexp($L) {
 $L = $L | 0;
 var $e = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $e = sp;
 _lua_pushnumber($L, +_frexpf(+_luaL_checknumber($L, 1), $e));
 _lua_pushinteger($L, HEAP32[$e >> 2] | 0);
 STACKTOP = sp;
 return 2;
}

function _uint32_compare($p, $q) {
 $p = $p | 0;
 $q = $q | 0;
 var $0 = 0, $1 = 0, $5 = 0;
 $0 = HEAP32[$p >> 2] | 0;
 $1 = HEAP32[$q >> 2] | 0;
 if ($0 >>> 0 < $1 >>> 0) {
  $5 = -1;
  return $5 | 0;
 }
 $5 = $0 >>> 0 > $1 >>> 0 & 1;
 return $5 | 0;
}

function _mlua_set_min_initial_acceleration_system($L) {
 $L = $L | 0;
 var $1 = 0;
 if (!$L) ___assert_fail(23976, 8472, 144, 8984); else {
  $1 = _pop_system($L, 1) | 0;
  HEAPF32[$1 + 444 >> 2] = +_luaL_checknumber($L, 2);
  return 0;
 }
 return 0;
}

function _mlua_set_max_initial_acceleration_system($L) {
 $L = $L | 0;
 var $1 = 0;
 if (!$L) ___assert_fail(23976, 8472, 145, 9080); else {
  $1 = _pop_system($L, 1) | 0;
  HEAPF32[$1 + 448 >> 2] = +_luaL_checknumber($L, 2);
  return 0;
 }
 return 0;
}

function _buffer_free($b) {
 $b = $b | 0;
 if (!$b) return;
 _glDeleteBuffers(4, $b + 8 | 0);
 _free(HEAP32[$b + 24 >> 2] | 0);
 _free(HEAP32[$b + 28 >> 2] | 0);
 _free(HEAP32[$b + 32 >> 2] | 0);
 _free(HEAP32[$b + 36 >> 2] | 0);
 _free($b);
 return;
}

function _surface_free($s) {
 $s = $s | 0;
 if (!$s) return;
 _free(HEAP32[$s >> 2] | 0);
 _free(HEAP32[$s + 40 >> 2] | 0);
 _glDeleteTextures(1, $s + 32 | 0);
 if (HEAP8[$s + 24 >> 0] | 0) _glDeleteFramebuffers(1, $s + 36 | 0);
 _free($s);
 return;
}

function _luaH_set($L, $t, $key) {
 $L = $L | 0;
 $t = $t | 0;
 $key = $key | 0;
 var $$0 = 0, $0 = 0;
 $0 = _luaH_get($t, $key) | 0;
 if (($0 | 0) != 59168) {
  $$0 = $0;
  return $$0 | 0;
 }
 $$0 = _luaH_newkey($L, $t, $key) | 0;
 return $$0 | 0;
}

function _mlua_set_min_initial_velocity_system($L) {
 $L = $L | 0;
 var $1 = 0;
 if (!$L) ___assert_fail(23976, 8472, 146, 9168); else {
  $1 = _pop_system($L, 1) | 0;
  HEAPF32[$1 + 452 >> 2] = +_luaL_checknumber($L, 2);
  return 0;
 }
 return 0;
}

function _mlua_set_max_initial_velocity_system($L) {
 $L = $L | 0;
 var $1 = 0;
 if (!$L) ___assert_fail(23976, 8472, 147, 9248); else {
  $1 = _pop_system($L, 1) | 0;
  HEAPF32[$1 + 456 >> 2] = +_luaL_checknumber($L, 2);
  return 0;
 }
 return 0;
}

function _luaH_resizearray($L, $t, $nasize) {
 $L = $L | 0;
 $t = $t | 0;
 $nasize = $nasize | 0;
 var $7 = 0;
 if ((HEAP32[$t + 16 >> 2] | 0) == 62336) $7 = 0; else $7 = 1 << (HEAPU8[$t + 7 >> 0] | 0);
 _luaH_resize($L, $t, $nasize, $7);
 return;
}

function _change_outr($str, $state) {
 $str = $str | 0;
 $state = $state | 0;
 if (!$str) ___assert_fail(8168, 6144, 120, 8240);
 if (!$state) ___assert_fail(6136, 6144, 121, 8240); else {
  HEAP32[$state + 28 >> 2] = _atoi($str) | 0;
  return;
 }
}

function _change_outg($str, $state) {
 $str = $str | 0;
 $state = $state | 0;
 if (!$str) ___assert_fail(8168, 6144, 127, 8224);
 if (!$state) ___assert_fail(6136, 6144, 128, 8224); else {
  HEAP32[$state + 32 >> 2] = _atoi($str) | 0;
  return;
 }
}

function _change_outb($str, $state) {
 $str = $str | 0;
 $state = $state | 0;
 if (!$str) ___assert_fail(8168, 6144, 134, 8208);
 if (!$state) ___assert_fail(6136, 6144, 135, 8208); else {
  HEAP32[$state + 36 >> 2] = _atoi($str) | 0;
  return;
 }
}

function _luaL_addstring($B, $s) {
 $B = $B | 0;
 $s = $s | 0;
 var $0 = 0, $2 = 0;
 $0 = _strlen($s | 0) | 0;
 _memcpy(_luaL_prepbuffsize($B, $0) | 0, $s | 0, $0 | 0) | 0;
 $2 = $B + 8 | 0;
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $0;
 return;
}

function _display_reset_camera() {
 var $3 = 0;
 _buffer_check_empty(HEAP32[4530] | 0);
 _camera_reset(HEAP32[4532] | 0);
 $3 = HEAP32[4528] | 0;
 _camera_update_matrix(HEAP32[4532] | 0, HEAP32[$3 + 4 >> 2] | 0, HEAP32[$3 + 8 >> 2] | 0);
 return;
}

function _change_green($str, $state) {
 $str = $str | 0;
 $state = $state | 0;
 if (!$str) ___assert_fail(8168, 6144, 65, 8408);
 if (!$state) ___assert_fail(6136, 6144, 66, 8408); else {
  HEAP32[$state + 12 >> 2] = _atoi($str) | 0;
  return;
 }
}

function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function _stbtt__edge_compare($p, $q) {
 $p = $p | 0;
 $q = $q | 0;
 var $$0 = 0, $1 = 0.0, $3 = 0.0;
 $1 = +HEAPF32[$p + 4 >> 2];
 $3 = +HEAPF32[$q + 4 >> 2];
 if ($1 < $3) {
  $$0 = -1;
  return $$0 | 0;
 }
 $$0 = $1 > $3 & 1;
 return $$0 | 0;
}

function _change_blue($str, $state) {
 $str = $str | 0;
 $state = $state | 0;
 if (!$str) ___assert_fail(8168, 6144, 58, 8392);
 if (!$state) ___assert_fail(6136, 6144, 59, 8392); else {
  HEAP32[$state + 16 >> 2] = _atoi($str) | 0;
  return;
 }
}

function _change_red($str, $state) {
 $str = $str | 0;
 $state = $state | 0;
 if (!$str) ___assert_fail(8168, 6144, 51, 8424);
 if (!$state) ___assert_fail(6136, 6144, 52, 8424); else {
  HEAP32[$state + 8 >> 2] = _atoi($str) | 0;
  return;
 }
}

function _lua_stringtonumber($L, $s) {
 $L = $L | 0;
 $s = $s | 0;
 var $0 = 0, $2 = 0;
 $0 = $L + 8 | 0;
 $2 = _luaO_str2num($s, HEAP32[$0 >> 2] | 0) | 0;
 if (!$2) return $2 | 0;
 HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 8;
 return $2 | 0;
}

function _display_pop_camera() {
 var $3 = 0;
 _buffer_check_empty(HEAP32[4530] | 0);
 _camera_pop(HEAP32[4532] | 0);
 $3 = HEAP32[4528] | 0;
 _camera_update_matrix(HEAP32[4532] | 0, HEAP32[$3 + 4 >> 2] | 0, HEAP32[$3 + 8 >> 2] | 0);
 return;
}

function _mlua_set_filter_surface($L) {
 $L = $L | 0;
 var $1 = 0;
 if (!$L) ___assert_fail(23976, 19928, 249, 20976); else {
  $1 = _pop_surface($L, 1) | 0;
  _display_set_filter($1, _luaL_checkinteger($L, 2) | 0);
  return 0;
 }
 return 0;
}

function _mlua_set_min_direction_system($L) {
 $L = $L | 0;
 var $1 = 0;
 if (!$L) ___assert_fail(23976, 8472, 142, 8840); else {
  $1 = _pop_system($L, 1) | 0;
  HEAPF32[$1 + 428 >> 2] = +_luaL_checknumber($L, 2);
  return 0;
 }
 return 0;
}

function _mlua_set_max_direction_system($L) {
 $L = $L | 0;
 var $1 = 0;
 if (!$L) ___assert_fail(23976, 8472, 143, 8904); else {
  $1 = _pop_system($L, 1) | 0;
  HEAPF32[$1 + 432 >> 2] = +_luaL_checknumber($L, 2);
  return 0;
 }
 return 0;
}

function _mlua_set_emission_rate_system($L) {
 $L = $L | 0;
 var $1 = 0;
 if (!$L) ___assert_fail(23976, 8472, 148, 9320); else {
  $1 = _pop_system($L, 1) | 0;
  HEAPF32[$1 + 460 >> 2] = +_luaL_checknumber($L, 2);
  return 0;
 }
 return 0;
}

function _mlua_set_min_lifetime_system($L) {
 $L = $L | 0;
 var $1 = 0;
 if (!$L) ___assert_fail(23976, 8472, 140, 8712); else {
  $1 = _pop_system($L, 1) | 0;
  HEAPF32[$1 + 436 >> 2] = +_luaL_checknumber($L, 2);
  return 0;
 }
 return 0;
}

function _mlua_set_max_lifetime_system($L) {
 $L = $L | 0;
 var $1 = 0;
 if (!$L) ___assert_fail(23976, 8472, 141, 8776); else {
  $1 = _pop_system($L, 1) | 0;
  HEAPF32[$1 + 440 >> 2] = +_luaL_checknumber($L, 2);
  return 0;
 }
 return 0;
}

function _lua_pushlightuserdata($L, $p) {
 $L = $L | 0;
 $p = $p | 0;
 var $0 = 0, $1 = 0;
 $0 = $L + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAP32[$1 >> 2] = $p;
 HEAP32[$1 + 4 >> 2] = 2;
 HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 8;
 return;
}

function _luaL_checklstring($L, $arg, $len) {
 $L = $L | 0;
 $arg = $arg | 0;
 $len = $len | 0;
 var $0 = 0;
 $0 = _lua_tolstring($L, $arg, $len) | 0;
 if ($0) return $0 | 0;
 _typeerror($L, $arg, _lua_typename($L, 4) | 0);
 return $0 | 0;
}

function _luaL_buffinitsize($L, $B, $sz) {
 $L = $L | 0;
 $B = $B | 0;
 $sz = $sz | 0;
 HEAP32[$B + 12 >> 2] = $L;
 HEAP32[$B >> 2] = $B + 16;
 HEAP32[$B + 8 >> 2] = 0;
 HEAP32[$B + 4 >> 2] = 2048;
 return _luaL_prepbuffsize($B, $sz) | 0;
}

function ___strdup($s) {
 $s = $s | 0;
 var $$0 = 0, $1 = 0, $2 = 0;
 $1 = (_strlen($s | 0) | 0) + 1 | 0;
 $2 = _malloc($1) | 0;
 if (!$2) {
  $$0 = 0;
  return $$0 | 0;
 }
 _memcpy($2 | 0, $s | 0, $1 | 0) | 0;
 $$0 = $2;
 return $$0 | 0;
}

function __ZN16b2StackAllocatorD2Ev($this) {
 $this = $this | 0;
 if (HEAP32[$this + 102400 >> 2] | 0) ___assert_fail(90960, 90976, 32, 91040);
 if (!(HEAP32[$this + 102796 >> 2] | 0)) return; else ___assert_fail(91064, 90976, 33, 91040);
}

function _display_set_filter($surface, $filter) {
 $surface = $surface | 0;
 $filter = $filter | 0;
 if (!$surface) ___assert_fail(19976, 18224, 435, 18872); else {
  _surface_set_filter($surface, $filter, HEAP32[4529] | 0);
  return;
 }
}

function _mlua_run_js($L) {
 $L = $L | 0;
 var $2 = 0;
 if (!$L) ___assert_fail(23976, 12704, 30, 12728); else {
  $2 = _run_js(_luaL_checklstring($L, 1, 0) | 0) | 0;
  _lua_pushstring($L, $2) | 0;
  _free($2);
  return 1;
 }
 return 0;
}

function _luaV_shiftl($x, $y) {
 $x = $x | 0;
 $y = $y | 0;
 var $$0 = 0;
 if (($y | 0) >= 0) return (($y | 0) > 31 ? 0 : $x << $y) | 0;
 if (($y | 0) < -31) {
  $$0 = 0;
  return $$0 | 0;
 }
 $$0 = $x >>> (0 - $y | 0);
 return $$0 | 0;
}

function _luaE_setdebt($g, $debt) {
 $g = $g | 0;
 $debt = $debt | 0;
 var $0 = 0, $2 = 0;
 $0 = $g + 12 | 0;
 $2 = $g + 8 | 0;
 HEAP32[$2 >> 2] = (HEAP32[$0 >> 2] | 0) - $debt + (HEAP32[$2 >> 2] | 0);
 HEAP32[$0 >> 2] = $debt;
 return;
}

function _register_web($L) {
 $L = $L | 0;
 _lua_pushboolean($L, 1);
 _lua_setfield($L, -2, 12680);
 _lua_pushcclosure($L, 285, 0);
 _lua_setfield($L, -2, 12688);
 _lua_pushcclosure($L, 286, 0);
 _lua_setfield($L, -2, 12696);
 return;
}

function _ipairsaux_raw($L) {
 $L = $L | 0;
 var $1 = 0, $3 = 0;
 $1 = (_luaL_checkinteger($L, 2) | 0) + 1 | 0;
 _luaL_checktype($L, 1, 5);
 _lua_pushinteger($L, $1);
 $3 = (_lua_rawgeti($L, 1, $1) | 0) == 0;
 return ($3 ? 1 : 2) | 0;
}

function _os_setlocale($L) {
 $L = $L | 0;
 var $0 = 0;
 $0 = _luaL_optlstring($L, 1, 0, 0) | 0;
 _lua_pushstring($L, _setlocale(HEAP32[59944 + ((_luaL_checkoption($L, 2, 6e4, 59968) | 0) << 2) >> 2] | 0, $0 | 0) | 0) | 0;
 return 1;
}

function _luaL_addlstring($B, $s, $l) {
 $B = $B | 0;
 $s = $s | 0;
 $l = $l | 0;
 var $1 = 0;
 _memcpy(_luaL_prepbuffsize($B, $l) | 0, $s | 0, $l | 0) | 0;
 $1 = $B + 8 | 0;
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + $l;
 return;
}

function _camera_reset($c) {
 $c = $c | 0;
 if (!$c) ___assert_fail(23168, 13848, 62, 13936); else {
  HEAPF32[$c >> 2] = 0.0;
  HEAPF32[$c + 4 >> 2] = 0.0;
  HEAPF32[$c + 12 >> 2] = 0.0;
  HEAPF32[$c + 8 >> 2] = 1.0;
  return;
 }
}

function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function _png_reciprocal($a) {
 $a = $a | 0;
 var $$0 = 0, $3 = 0.0;
 $3 = +Math_floor(+(1.0e10 / +($a | 0) + .5));
 if (!($3 <= 2147483647.0 & $3 >= -2147483648.0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $$0 = ~~$3;
 return $$0 | 0;
}

function _lua_pushboolean($L, $b) {
 $L = $L | 0;
 $b = $b | 0;
 var $0 = 0, $1 = 0;
 $0 = $L + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAP32[$1 >> 2] = ($b | 0) != 0 & 1;
 HEAP32[$1 + 4 >> 2] = 1;
 HEAP32[$0 >> 2] = $1 + 8;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!(_pthread_key_create(105952, 93) | 0)) {
  STACKTOP = sp;
  return;
 } else _abort_message(106024, sp);
}

function _mlua_wget($L) {
 $L = $L | 0;
 var $1 = 0;
 if (!$L) ___assert_fail(23976, 12704, 45, 12744); else {
  $1 = _luaL_checklstring($L, 1, 0) | 0;
  _wget($1, _luaL_checklstring($L, 2, 0) | 0);
  return 0;
 }
 return 0;
}

function _mlua_update_system($L) {
 $L = $L | 0;
 var $1 = 0;
 if (!$L) ___assert_fail(23976, 8472, 152, 9352); else {
  $1 = _pop_system($L, 1) | 0;
  _system_update($1, +_luaL_checknumber($L, 2));
  return 0;
 }
 return 0;
}

function _mlua_get_min_initial_acceleration_system($L) {
 $L = $L | 0;
 if (!$L) ___assert_fail(23976, 8472, 144, 8936); else {
  _lua_pushnumber($L, +HEAPF32[(_pop_system($L, 1) | 0) + 444 >> 2]);
  return 1;
 }
 return 0;
}

function _mlua_get_max_initial_acceleration_system($L) {
 $L = $L | 0;
 if (!$L) ___assert_fail(23976, 8472, 145, 9032); else {
  _lua_pushnumber($L, +HEAPF32[(_pop_system($L, 1) | 0) + 448 >> 2]);
  return 1;
 }
 return 0;
}

function _lua_pushvfstring($L, $fmt, $argp) {
 $L = $L | 0;
 $fmt = $fmt | 0;
 $argp = $argp | 0;
 if ((HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 12 >> 2] | 0) > 0) _luaC_step($L);
 return _luaO_pushvfstring($L, $fmt, $argp) | 0;
}

function _str_len($L) {
 $L = $L | 0;
 var $l = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $l = sp;
 _luaL_checklstring($L, 1, $l) | 0;
 _lua_pushinteger($L, HEAP32[$l >> 2] | 0);
 STACKTOP = sp;
 return 1;
}

function _db_setmetatable($L) {
 $L = $L | 0;
 var $0 = 0;
 $0 = _lua_type($L, 2) | 0;
 if (!(($0 | 0) == 0 | ($0 | 0) == 5)) _luaL_argerror($L, 2, 66504) | 0;
 _lua_settop($L, 2);
 _lua_setmetatable($L, 1) | 0;
 return 1;
}

function __ZN12b2ChainShapeD2Ev($this) {
 $this = $this | 0;
 var $0 = 0;
 HEAP32[$this >> 2] = 81304;
 $0 = $this + 12 | 0;
 __Z6b2FreePv(HEAP32[$0 >> 2] | 0);
 HEAP32[$0 >> 2] = 0;
 HEAP32[$this + 16 >> 2] = 0;
 return;
}

function dynCall_diiiid(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return +FUNCTION_TABLE_diiiid[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5);
}

function _mlua_get_min_initial_velocity_system($L) {
 $L = $L | 0;
 if (!$L) ___assert_fail(23976, 8472, 146, 9128); else {
  _lua_pushnumber($L, +HEAPF32[(_pop_system($L, 1) | 0) + 452 >> 2]);
  return 1;
 }
 return 0;
}

function _mlua_get_max_initial_velocity_system($L) {
 $L = $L | 0;
 if (!$L) ___assert_fail(23976, 8472, 147, 9208); else {
  _lua_pushnumber($L, +HEAPF32[(_pop_system($L, 1) | 0) + 456 >> 2]);
  return 1;
 }
 return 0;
}

function _luaopen_utf8($L) {
 $L = $L | 0;
 _luaL_checkversion_($L, 503.0, 68);
 _lua_createtable($L, 0, 6);
 _luaL_setfuncs($L, 63576, 0);
 _lua_pushlstring($L, 63632, 14) | 0;
 _lua_setfield($L, -2, 63648);
 return 1;
}

function _luaB_getmetatable($L) {
 $L = $L | 0;
 _luaL_checkany($L, 1);
 if (!(_lua_getmetatable($L, 1) | 0)) {
  _lua_pushnil($L);
  return 1;
 } else {
  _luaL_getmetafield($L, 1, 64736) | 0;
  return 1;
 }
 return 0;
}

function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function _def_realloc_func($opaque, $address, $items, $size) {
 $opaque = $opaque | 0;
 $address = $address | 0;
 $items = $items | 0;
 $size = $size | 0;
 return _realloc($address, Math_imul($size, $items) | 0) | 0;
}

function _lua_pushinteger($L, $n) {
 $L = $L | 0;
 $n = $n | 0;
 var $0 = 0, $1 = 0;
 $0 = $L + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAP32[$1 >> 2] = $n;
 HEAP32[$1 + 4 >> 2] = 19;
 HEAP32[$0 >> 2] = $1 + 8;
 return;
}

function _strcpy(pdest, psrc) {
 pdest = pdest | 0;
 psrc = psrc | 0;
 var i = 0;
 do {
  HEAP8[pdest + i >> 0] = HEAP8[psrc + i >> 0];
  i = i + 1 | 0;
 } while (HEAP8[psrc + (i - 1) >> 0] | 0);
 return pdest | 0;
}

function _luaopen_table($L) {
 $L = $L | 0;
 _luaL_checkversion_($L, 503.0, 68);
 _lua_createtable($L, 0, 8);
 _luaL_setfuncs($L, 62448, 0);
 _lua_getfield($L, -1, 62520) | 0;
 _lua_setglobal($L, 62520);
 return 1;
}

function _mz_zip_file_write_callback($pOpaque, $0, $1, $pBuf, $n) {
 $pOpaque = $pOpaque | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $pBuf = $pBuf | 0;
 $n = $n | 0;
 return _fwrite($pBuf | 0, 1, $n | 0, $pOpaque | 0) | 0;
}

function _mlua_get_min_direction_system($L) {
 $L = $L | 0;
 if (!$L) ___assert_fail(23976, 8472, 142, 8808); else {
  _lua_pushnumber($L, +HEAPF32[(_pop_system($L, 1) | 0) + 428 >> 2]);
  return 1;
 }
 return 0;
}

function _mlua_get_max_direction_system($L) {
 $L = $L | 0;
 if (!$L) ___assert_fail(23976, 8472, 143, 8872); else {
  _lua_pushnumber($L, +HEAPF32[(_pop_system($L, 1) | 0) + 432 >> 2]);
  return 1;
 }
 return 0;
}

function _mlua_get_emission_rate_system($L) {
 $L = $L | 0;
 if (!$L) ___assert_fail(23976, 8472, 148, 9288); else {
  _lua_pushnumber($L, +HEAPF32[(_pop_system($L, 1) | 0) + 460 >> 2]);
  return 1;
 }
 return 0;
}

function _display_set_line_width($width) {
 $width = +$width;
 if (!($width >= 0.0)) ___assert_fail(18832, 18224, 408, 18848); else {
  _buffer_check_empty(HEAP32[4530] | 0);
  _glLineWidth(+$width);
  return;
 }
}

function _mlua_get_min_lifetime_system($L) {
 $L = $L | 0;
 if (!$L) ___assert_fail(23976, 8472, 140, 8680); else {
  _lua_pushnumber($L, +HEAPF32[(_pop_system($L, 1) | 0) + 436 >> 2]);
  return 1;
 }
 return 0;
}

function _mlua_get_max_lifetime_system($L) {
 $L = $L | 0;
 if (!$L) ___assert_fail(23976, 8472, 141, 8744); else {
  _lua_pushnumber($L, +HEAPF32[(_pop_system($L, 1) | 0) + 440 >> 2]);
  return 1;
 }
 return 0;
}

function _lua_pushnumber($L, $n) {
 $L = $L | 0;
 $n = +$n;
 var $0 = 0, $1 = 0;
 $0 = $L + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAPF32[$1 >> 2] = $n;
 HEAP32[$1 + 4 >> 2] = 3;
 HEAP32[$0 >> 2] = $1 + 8;
 return;
}

function _lua_atpanic($L, $panicf) {
 $L = $L | 0;
 $panicf = $panicf | 0;
 var $2 = 0, $3 = 0;
 $2 = (HEAP32[$L + 12 >> 2] | 0) + 120 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 HEAP32[$2 >> 2] = $panicf;
 return $3 | 0;
}

function __Z26mlua_set_restitution_shapeP9lua_State($L) {
 $L = $L | 0;
 var $1 = 0;
 $1 = HEAP32[(__Z9pop_shapeP9lua_Statei($L, 1) | 0) >> 2] | 0;
 HEAPF32[$1 + 12 >> 2] = +_luaL_checknumber($L, 2);
 return 0;
}

function _luaB_next($L) {
 $L = $L | 0;
 var $$0 = 0;
 _luaL_checktype($L, 1, 5);
 _lua_settop($L, 2);
 if (_lua_next($L, 1) | 0) {
  $$0 = 2;
  return $$0 | 0;
 }
 _lua_pushnil($L);
 $$0 = 1;
 return $$0 | 0;
}

function __ZN16b2StackAllocatorC2Ev($this) {
 $this = $this | 0;
 HEAP32[$this + 102400 >> 2] = 0;
 HEAP32[$this + 102404 >> 2] = 0;
 HEAP32[$this + 102408 >> 2] = 0;
 HEAP32[$this + 102796 >> 2] = 0;
 return;
}

function _event_set_relative_mode($relative) {
 $relative = $relative | 0;
 if ($relative) {
  _emscripten_request_pointerlock(0, 1) | 0;
  return;
 } else {
  _emscripten_exit_pointerlock() | 0;
  return;
 }
}

function _luaO_hexavalue($c) {
 $c = $c | 0;
 var $$0 = 0;
 if (!(HEAP8[$c + 65881 >> 0] & 2)) {
  $$0 = ($c | 32) + -87 | 0;
  return $$0 | 0;
 } else {
  $$0 = $c + -48 | 0;
  return $$0 | 0;
 }
 return 0;
}

function _isxdigit($c) {
 $c = $c | 0;
 var $3 = 0, $4 = 0;
 if (($c + -48 | 0) >>> 0 < 10) {
  $4 = 1;
  $3 = $4 & 1;
  return $3 | 0;
 }
 $4 = (($c | 32) + -97 | 0) >>> 0 < 6;
 $3 = $4 & 1;
 return $3 | 0;
}

function __Z23mlua_set_friction_shapeP9lua_State($L) {
 $L = $L | 0;
 var $1 = 0;
 $1 = HEAP32[(__Z9pop_shapeP9lua_Statei($L, 1) | 0) >> 2] | 0;
 HEAPF32[$1 + 8 >> 2] = +_luaL_checknumber($L, 2);
 return 0;
}

function __Z22mlua_set_density_shapeP9lua_State($L) {
 $L = $L | 0;
 var $1 = 0;
 $1 = HEAP32[(__Z9pop_shapeP9lua_Statei($L, 1) | 0) >> 2] | 0;
 HEAPF32[$1 + 16 >> 2] = +_luaL_checknumber($L, 2);
 return 0;
}

function _system_set_texture($s, $tex, $x, $y) {
 $s = $s | 0;
 $tex = $tex | 0;
 $x = +$x;
 $y = +$y;
 HEAP32[$s + 396 >> 2] = $tex;
 HEAP32[$s + 468 >> 2] = ~~$x;
 HEAP32[$s + 472 >> 2] = ~~$y;
 return;
}

function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $1$0 = 0;
 $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
 return $1$0 | 0;
}

function _luaB_cowrap($L) {
 $L = $L | 0;
 var $0 = 0;
 _luaL_checktype($L, 1, 6);
 $0 = _lua_newthread($L) | 0;
 _lua_pushvalue($L, 1);
 _lua_xmove($L, $0, 1);
 _lua_pushcclosure($L, 362, 1);
 return 1;
}

function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0;
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
 return (tempRet0 = h, a - c >>> 0 | 0) | 0;
}

function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function _register_utils($L) {
 $L = $L | 0;
 _lua_cjson_init();
 _lua_pushcclosure($L, 289, 0);
 _lua_setfield($L, -2, 24040);
 _lua_pushcclosure($L, 290, 0);
 _lua_setfield($L, -2, 24048);
 return;
}

function _ipairsaux($L) {
 $L = $L | 0;
 var $1 = 0, $3 = 0;
 $1 = (_luaL_checkinteger($L, 2) | 0) + 1 | 0;
 _lua_pushinteger($L, $1);
 $3 = (_lua_geti($L, 1, $1) | 0) == 0;
 return ($3 ? 1 : 2) | 0;
}

function _mlua_set_relative_mode($L) {
 $L = $L | 0;
 if (!$L) ___assert_fail(23976, 23984, 25, 24016); else {
  _event_set_relative_mode((_lua_toboolean($L, 1) | 0) != 0);
  return 0;
 }
 return 0;
}

function b4(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 abort(4);
 return 0;
}

function _luaL_checktype($L, $arg, $t) {
 $L = $L | 0;
 $arg = $arg | 0;
 $t = $t | 0;
 if ((_lua_type($L, $arg) | 0) == ($t | 0)) return;
 _typeerror($L, $arg, _lua_typename($L, $t) | 0);
 return;
}

function _gmatch($L) {
 $L = $L | 0;
 _luaL_checklstring($L, 1, 0) | 0;
 _luaL_checklstring($L, 2, 0) | 0;
 _lua_settop($L, 2);
 _lua_pushinteger($L, 0);
 _lua_pushcclosure($L, 357, 3);
 return 1;
}

function _os_rename($L) {
 $L = $L | 0;
 var $0 = 0;
 $0 = _luaL_checklstring($L, 1, 0) | 0;
 return _luaL_fileresult($L, (_rename($0 | 0, _luaL_checklstring($L, 2, 0) | 0) | 0) == 0 & 1, 0) | 0;
}

function _mlua_clone_system($L) {
 $L = $L | 0;
 if (!$L) ___assert_fail(23976, 8472, 260, 9600); else {
  _push_system($L, _system_clone(_pop_system($L, 1) | 0) | 0);
  return 1;
 }
 return 0;
}

function _luaK_fixline($fs, $line) {
 $fs = $fs | 0;
 $line = $line | 0;
 HEAP32[(HEAP32[(HEAP32[$fs >> 2] | 0) + 56 >> 2] | 0) + ((HEAP32[$fs + 16 >> 2] | 0) + -1 << 2) >> 2] = $line;
 return;
}

function _change_tiny($str, $state) {
 $str = $str | 0;
 $state = $state | 0;
 if (!$state) ___assert_fail(6136, 6144, 72, 8376); else {
  HEAPF32[$state >> 2] = .6000000238418579;
  return;
 }
}

function _change_small($str, $state) {
 $str = $str | 0;
 $state = $state | 0;
 if (!$state) ___assert_fail(6136, 6144, 78, 8360); else {
  HEAPF32[$state >> 2] = .800000011920929;
  return;
 }
}

function _change_big($str, $state) {
 $str = $str | 0;
 $state = $state | 0;
 if (!$state) ___assert_fail(6136, 6144, 90, 8328); else {
  HEAPF32[$state >> 2] = 1.2999999523162842;
  return;
 }
}

function _change_BIG($str, $state) {
 $str = $str | 0;
 $state = $state | 0;
 if (!$state) ___assert_fail(6136, 6144, 96, 8312); else {
  HEAPF32[$state >> 2] = 1.7000000476837158;
  return;
 }
}

function _mlua_set_blend_mode($L) {
 $L = $L | 0;
 if (!$L) ___assert_fail(23976, 19928, 109, 20408); else {
  _display_set_blend_mode(_luaL_checkinteger($L, 1) | 0);
  return 0;
 }
 return 0;
}

function _isalnum($c) {
 $c = $c | 0;
 var $2 = 0, $3 = 0;
 if (_isalpha($c) | 0) {
  $3 = 1;
  $2 = $3 & 1;
  return $2 | 0;
 }
 $3 = ($c + -48 | 0) >>> 0 < 10;
 $2 = $3 & 1;
 return $2 | 0;
}

function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 31](a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function __ZN12b2BroadPhaseD2Ev($this) {
 $this = $this | 0;
 __Z6b2FreePv(HEAP32[$this + 32 >> 2] | 0);
 __Z6b2FreePv(HEAP32[$this + 44 >> 2] | 0);
 __ZN13b2DynamicTreeD2Ev($this);
 return;
}

function _mlua_show_cursor($L) {
 $L = $L | 0;
 if (!$L) ___assert_fail(23976, 19928, 118, 20432); else {
  _display_show_cursor((_lua_toboolean($L, 1) | 0) != 0);
  return 0;
 }
 return 0;
}

function _event_init() {
 _emscripten_set_resize_callback(0, 0, 1, 13) | 0;
 _emscripten_set_click_callback(0, 0, 1, 14) | 0;
 _SDL_StartTextInput();
 _initialize_keys_mapping();
 return 0;
}

function __ZN7b2World22SetDestructionListenerEP21b2DestructionListener($this, $listener) {
 $this = $this | 0;
 $listener = $listener | 0;
 HEAP32[$this + 102980 >> 2] = $listener;
 return;
}

function __ZN17b2ContactListener8PreSolveEP9b2ContactPK10b2Manifold($this, $contact, $oldManifold) {
 $this = $this | 0;
 $contact = $contact | 0;
 $oldManifold = $oldManifold | 0;
 return;
}

function _display_set_title($title) {
 $title = $title | 0;
 if (!$title) ___assert_fail(18320, 18224, 222, 18328); else {
  _SDL_SetWindowTitle(HEAP32[4523] | 0, $title | 0);
  return;
 }
}

function _change_nooutline($str, $state) {
 $str = $str | 0;
 $state = $state | 0;
 if (!$state) ___assert_fail(6136, 6144, 114, 8256); else {
  HEAP8[$state + 24 >> 0] = 0;
  return;
 }
}

function _change_italic($str, $state) {
 $str = $str | 0;
 $state = $state | 0;
 if (!$state) ___assert_fail(6136, 6144, 102, 8296); else {
  HEAPF32[$state + 4 >> 2] = 3.5;
  return;
 }
}

function _xcalloc($nmemb, $size) {
 $nmemb = $nmemb | 0;
 $size = $size | 0;
 var $0 = 0;
 $0 = _calloc($nmemb, $size) | 0;
 if (!$0) _log_oom_and_exit(); else return $0 | 0;
 return 0;
}

function _mlua_set_title($L) {
 $L = $L | 0;
 if (!$L) ___assert_fail(23976, 19928, 100, 20392); else {
  _display_set_title(_luaL_checklstring($L, 1, 0) | 0);
  return 0;
 }
 return 0;
}

function _mlua_clear_colors_system($L) {
 $L = $L | 0;
 if (!$L) ___assert_fail(23976, 8472, 239, 9544); else {
  _system_clear_colors(_pop_system($L, 1) | 0);
  return 0;
 }
 return 0;
}

function __ZNK11b2GearJoint17GetReactionTorqueEf($this, $inv_dt) {
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 return +(+HEAPF32[$this + 156 >> 2] * +HEAPF32[$this + 256 >> 2] * $inv_dt);
}

function _change_outline($str, $state) {
 $str = $str | 0;
 $state = $state | 0;
 if (!$state) ___assert_fail(6136, 6144, 108, 8280); else {
  HEAP8[$state + 24 >> 0] = 1;
  return;
 }
}

function __ZN17b2ContactListener9PostSolveEP9b2ContactPK16b2ContactImpulse($this, $contact, $impulse) {
 $this = $this | 0;
 $contact = $contact | 0;
 $impulse = $impulse | 0;
 return;
}

function _mlua_clear_sizes_system($L) {
 $L = $L | 0;
 if (!$L) ___assert_fail(23976, 8472, 230, 9520); else {
  _system_clear_sizes(_pop_system($L, 1) | 0);
  return 0;
 }
 return 0;
}

function __Z26mlua_get_restitution_shapeP9lua_State($L) {
 $L = $L | 0;
 _lua_pushnumber($L, +HEAPF32[(HEAP32[(__Z9pop_shapeP9lua_Statei($L, 1) | 0) >> 2] | 0) + 12 >> 2]);
 return 1;
}

function _luaK_codeABC($fs, $o, $a, $b, $c) {
 $fs = $fs | 0;
 $o = $o | 0;
 $a = $a | 0;
 $b = $b | 0;
 $c = $c | 0;
 return _luaK_code($fs, $a << 6 | $o | $b << 23 | $c << 14) | 0;
}

function __ZSt11__terminatePFvvE($func) {
 $func = $func | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 FUNCTION_TABLE_v[$func & 7]();
 _abort_message(106208, sp);
}

function _register_storage($L) {
 $L = $L | 0;
 _lua_pushcclosure($L, 287, 0);
 _lua_setfield($L, -2, 12936);
 _lua_pushcclosure($L, 288, 0);
 _lua_setfield($L, -2, 12944);
 return;
}

function _luaL_buffinit($L, $B) {
 $L = $L | 0;
 $B = $B | 0;
 HEAP32[$B + 12 >> 2] = $L;
 HEAP32[$B >> 2] = $B + 16;
 HEAP32[$B + 8 >> 2] = 0;
 HEAP32[$B + 4 >> 2] = 2048;
 return;
}

function _db_getuservalue($L) {
 $L = $L | 0;
 if ((_lua_type($L, 1) | 0) == 7) {
  _lua_getuservalue($L, 1) | 0;
  return 1;
 } else {
  _lua_pushnil($L);
  return 1;
 }
 return 0;
}

function _change_normal($str, $state) {
 $str = $str | 0;
 $state = $state | 0;
 if (!$state) ___assert_fail(6136, 6144, 84, 8344); else {
  HEAPF32[$state >> 2] = 1.0;
  return;
 }
}

function __ZN7b2World18SetContactListenerEP17b2ContactListener($this, $listener) {
 $this = $this | 0;
 $listener = $listener | 0;
 HEAP32[$this + 102944 >> 2] = $listener;
 return;
}

function _luaG_concaterror($L, $p1, $p2) {
 $L = $L | 0;
 $p1 = $p1 | 0;
 $p2 = $p2 | 0;
 _luaG_typeerror($L, ((HEAP32[$p1 + 4 >> 2] & 15) + -3 | 0) >>> 0 < 2 ? $p2 : $p1, 55904);
}

function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0;
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0;
}

function __Z23mlua_get_friction_shapeP9lua_State($L) {
 $L = $L | 0;
 _lua_pushnumber($L, +HEAPF32[(HEAP32[(__Z9pop_shapeP9lua_Statei($L, 1) | 0) >> 2] | 0) + 8 >> 2]);
 return 1;
}

function __Z22mlua_get_density_shapeP9lua_State($L) {
 $L = $L | 0;
 _lua_pushnumber($L, +HEAPF32[(HEAP32[(__Z9pop_shapeP9lua_Statei($L, 1) | 0) >> 2] | 0) + 16 >> 2]);
 return 1;
}

function _lua_version($L) {
 $L = $L | 0;
 var $$0 = 0;
 if (!$L) {
  $$0 = 55048;
  return $$0 | 0;
 }
 $$0 = HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 128 >> 2] | 0;
 return $$0 | 0;
}

function _luaO_fb2int($x) {
 $x = $x | 0;
 var $$0 = 0, $1 = 0;
 $1 = $x >>> 3 & 31;
 if (!$1) {
  $$0 = $x;
  return $$0 | 0;
 }
 $$0 = ($x & 7 | 8) << $1 + -1;
 return $$0 | 0;
}

function _luaB_rawlen($L) {
 $L = $L | 0;
 if (((_lua_type($L, 1) | 0) & -2 | 0) != 4) _luaL_argerror($L, 1, 64816) | 0;
 _lua_pushinteger($L, _lua_rawlen($L, 1) | 0);
 return 1;
}

function _font_free($font) {
 $font = $font | 0;
 if (!$font) return;
 _display_free_surface(HEAP32[$font >> 2] | 0);
 _free(HEAP32[$font + 20 >> 2] | 0);
 _free($font);
 return;
}

function ___cxa_is_pointer_type($type) {
 $type = $type | 0;
 var $3 = 0;
 if (!$type) $3 = 0; else $3 = (___dynamic_cast($type, 106344, 106512, 0) | 0) != 0;
 return $3 & 1 | 0;
}

function _mlua_use_shader($L) {
 $L = $L | 0;
 if (!$L) ___assert_fail(23976, 13016, 62, 13112); else {
  _display_use_shader(_pop_shader($L, -1) | 0);
  return 0;
 }
 return 0;
}

function _math_ult($L) {
 $L = $L | 0;
 var $0 = 0;
 $0 = _luaL_checkinteger($L, 1) | 0;
 _lua_pushboolean($L, $0 >>> 0 < (_luaL_checkinteger($L, 2) | 0) >>> 0 & 1);
 return 1;
}

function _os_difftime($L) {
 $L = $L | 0;
 var $0 = 0;
 $0 = _luaL_checkinteger($L, 1) | 0;
 _lua_pushnumber($L, +_difftime($0 | 0, _luaL_checkinteger($L, 2) | 0));
 return 1;
}

function _mz_zip_reader_get_num_files($pZip) {
 $pZip = $pZip | 0;
 var $3 = 0;
 if (!$pZip) {
  $3 = 0;
  return $3 | 0;
 }
 $3 = HEAP32[$pZip + 16 >> 2] | 0;
 return $3 | 0;
}

function __ZN12b2MouseJoint4DumpEv($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 __Z5b2LogPKcz(85120, sp);
 STACKTOP = sp;
 return;
}

function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 31](a1 | 0, a2 | 0, a3 | 0) | 0;
}

function _luaK_ret($fs, $first, $nret) {
 $fs = $fs | 0;
 $first = $first | 0;
 $nret = $nret | 0;
 _luaK_code($fs, $first << 6 | ($nret << 23) + 8388608 | 38) | 0;
 return;
}

function _luaB_cocreate($L) {
 $L = $L | 0;
 var $0 = 0;
 _luaL_checktype($L, 1, 6);
 $0 = _lua_newthread($L) | 0;
 _lua_pushvalue($L, 1);
 _lua_xmove($L, $0, 1);
 return 1;
}

function _display_load_surface($filename, $surface) {
 $filename = $filename | 0;
 $surface = $surface | 0;
 return _surface_load($filename, $surface, HEAP32[4529] | 0) | 0;
}

function _mlua_start_system($L) {
 $L = $L | 0;
 if (!$L) ___assert_fail(23976, 8472, 178, 9376); else {
  _system_start(_pop_system($L, 1) | 0);
  return 0;
 }
 return 0;
}

function _mlua_reset_system($L) {
 $L = $L | 0;
 if (!$L) ___assert_fail(23976, 8472, 180, 9424); else {
  _system_reset(_pop_system($L, 1) | 0);
  return 0;
 }
 return 0;
}

function _math_atan($L) {
 $L = $L | 0;
 var $0 = 0.0;
 $0 = +_luaL_checknumber($L, 1);
 _lua_pushnumber($L, +Math_atan2(+$0, +(+_luaL_optnumber($L, 2, 1.0))));
 return 1;
}

function _luaF_newCclosure($L, $n) {
 $L = $L | 0;
 $n = $n | 0;
 var $2 = 0;
 $2 = _luaC_newobj($L, 38, ($n << 3) + 16 | 0) | 0;
 HEAP8[$2 + 6 >> 0] = $n;
 return $2 | 0;
}

function _strchr($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $0 = 0;
 $0 = ___strchrnul($s, $c) | 0;
 return ((HEAP8[$0 >> 0] | 0) == ($c & 255) << 24 >> 24 ? $0 : 0) | 0;
}

function _mlua_pause_music($L) {
 $L = $L | 0;
 if (!$L) ___assert_fail(23976, 12256, 185, 12536); else {
  _music_pause(_pop_music($L, 1) | 0);
  return 0;
 }
 return 0;
}

function _luaB_rawset($L) {
 $L = $L | 0;
 _luaL_checktype($L, 1, 5);
 _luaL_checkany($L, 2);
 _luaL_checkany($L, 3);
 _lua_settop($L, 3);
 _lua_rawset($L, 1);
 return 1;
}

function _io_noclose($L) {
 $L = $L | 0;
 HEAP32[(_luaL_checkudata($L, 1, 56736) | 0) + 4 >> 2] = 348;
 _lua_pushnil($L);
 _lua_pushlstring($L, 56744, 26) | 0;
 return 2;
}

function _vmc_rewind($mc) {
 $mc = $mc | 0;
 if (!$mc) ___assert_fail(10960, 10720, 263, 10984); else {
  _stb_vorbis_seek_start(HEAP32[$mc + 12 >> 2] | 0);
  return;
 }
}

function _mlua_stop_system($L) {
 $L = $L | 0;
 if (!$L) ___assert_fail(23976, 8472, 179, 9400); else {
  _system_stop(_pop_system($L, 1) | 0);
  return 0;
 }
 return 0;
}

function _mlua_free_system($L) {
 $L = $L | 0;
 if (!$L) ___assert_fail(23976, 8472, 269, 9624); else {
  _system_free(_pop_system($L, 1) | 0);
  return 0;
 }
 return 0;
}

function _lua_pushnil($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0;
 $0 = $L + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$0 >> 2] = $1 + 8;
 return;
}

function __ZN7b2Joint4DumpEv($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 __Z5b2LogPKcz(84344, sp);
 STACKTOP = sp;
 return;
}

function _mlua_stop_music($L) {
 $L = $L | 0;
 if (!$L) ___assert_fail(23976, 12256, 176, 12520); else {
  _music_stop(_pop_music($L, 1) | 0);
  return 0;
 }
 return 0;
}

function _iter_codes($L) {
 $L = $L | 0;
 _luaL_checklstring($L, 1, 0) | 0;
 _lua_pushcclosure($L, 358, 0);
 _lua_pushvalue($L, 1);
 _lua_pushinteger($L, 0);
 return 3;
}

function _def_alloc_func($opaque, $items, $size) {
 $opaque = $opaque | 0;
 $items = $items | 0;
 $size = $size | 0;
 return _malloc(Math_imul($size, $items) | 0) | 0;
}

function _math_ldexp($L) {
 $L = $L | 0;
 var $0 = 0.0;
 $0 = +_luaL_checknumber($L, 1);
 _lua_pushnumber($L, +_ldexpf($0, _luaL_checkinteger($L, 2) | 0));
 return 1;
}

function _math_pow($L) {
 $L = $L | 0;
 var $0 = 0.0;
 $0 = +_luaL_checknumber($L, 1);
 _lua_pushnumber($L, +Math_pow(+$0, +(+_luaL_checknumber($L, 2))));
 return 1;
}

function _pop_parser() {
 var $1 = 0;
 $1 = (HEAP32[1546] | 0) + -1 | 0;
 HEAP32[1546] = $1;
 if (($1 | 0) > -2) return; else ___assert_fail(7736, 6144, 285, 7760);
}

function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 15](a1 | 0, a2 | 0, a3 | 0);
}

function _os_remove($L) {
 $L = $L | 0;
 var $0 = 0;
 $0 = _luaL_checklstring($L, 1, 0) | 0;
 return _luaL_fileresult($L, (_remove($0 | 0) | 0) == 0 & 1, $0) | 0;
}

function _mlua_free_font($L) {
 $L = $L | 0;
 if (!$L) ___assert_fail(23976, 5936, 94, 6120); else {
  _font_free(_pop_font($L, 1) | 0);
  return 0;
 }
 return 0;
}

function __ZNK16b2PrismaticJoint17GetReactionTorqueEf($this, $inv_dt) {
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 return +(+HEAPF32[$this + 108 >> 2] * $inv_dt);
}

function __ZN16b2ContactManager15FindNewContactsEv($this) {
 $this = $this | 0;
 __ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT_($this, $this);
 return;
}

function _zcalloc($opaque, $items, $size) {
 $opaque = $opaque | 0;
 $items = $items | 0;
 $size = $size | 0;
 return _malloc(Math_imul($size, $items) | 0) | 0;
}

function _luaL_checkany($L, $arg) {
 $L = $L | 0;
 $arg = $arg | 0;
 if ((_lua_type($L, $arg) | 0) != -1) return;
 _luaL_argerror($L, $arg, 58040) | 0;
 return;
}

function _em_click_callback($eventType, $keyEvent, $userData) {
 $eventType = $eventType | 0;
 $keyEvent = $keyEvent | 0;
 $userData = $userData | 0;
 return 0;
}

function _luaL_setmetatable($L, $tname) {
 $L = $L | 0;
 $tname = $tname | 0;
 _lua_getfield($L, -1001e3, $tname) | 0;
 _lua_setmetatable($L, -2) | 0;
 return;
}

function _display_show_cursor($b) {
 $b = $b | 0;
 if ($b) {
  _emscripten_run_script(18536);
  return;
 } else {
  _emscripten_run_script(18584);
  return;
 }
}

function __ZNK15b2RevoluteJoint17GetReactionTorqueEf($this, $inv_dt) {
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 return +(+HEAPF32[$this + 92 >> 2] * $inv_dt);
}

function __ZNK15b2FrictionJoint17GetReactionTorqueEf($this, $inv_dt) {
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 return +(+HEAPF32[$this + 92 >> 2] * $inv_dt);
}

function __ZN12b2ChainShapeD0Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 81304;
 __Z6b2FreePv(HEAP32[$this + 12 >> 2] | 0);
 __ZdlPv($this);
 return;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP;
 STACKTOP = STACKTOP + size | 0;
 STACKTOP = STACKTOP + 15 & -16;
 return ret | 0;
}

function _luaB_ipairs($L) {
 $L = $L | 0;
 var $1 = 0;
 $1 = (_luaL_getmetafield($L, 1, 64992) | 0) != 0;
 _pairsmeta($L, 65e3, 1, $1 ? 361 : 360);
 return 3;
}

function _strpbrk($s, $b) {
 $s = $s | 0;
 $b = $b | 0;
 var $1 = 0;
 $1 = $s + (_strcspn($s, $b) | 0) | 0;
 return ((HEAP8[$1 >> 0] | 0) != 0 ? $1 : 0) | 0;
}

function _luaK_codeABx($fs, $o, $a, $bc) {
 $fs = $fs | 0;
 $o = $o | 0;
 $a = $a | 0;
 $bc = $bc | 0;
 return _luaK_code($fs, $a << 6 | $o | $bc << 14) | 0;
}

function __ZNK12b2WheelJoint17GetReactionTorqueEf($this, $inv_dt) {
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 return +(+HEAPF32[$this + 112 >> 2] * $inv_dt);
}

function dynCall_viid(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 FUNCTION_TABLE_viid[index & 15](a1 | 0, a2 | 0, +a3);
}

function _db_setuservalue($L) {
 $L = $L | 0;
 _luaL_checktype($L, 1, 7);
 _luaL_checkany($L, 2);
 _lua_settop($L, 2);
 _lua_setuservalue($L, 1);
 return 1;
}

function __ZNK12b2MotorJoint17GetReactionTorqueEf($this, $inv_dt) {
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 return +(+HEAPF32[$this + 88 >> 2] * $inv_dt);
}

function __ZNK11b2WeldJoint17GetReactionTorqueEf($this, $inv_dt) {
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 return +(+HEAPF32[$this + 112 >> 2] * $inv_dt);
}

function _luaopen_coroutine($L) {
 $L = $L | 0;
 _luaL_checkversion_($L, 503.0, 68);
 _lua_createtable($L, 0, 7);
 _luaL_setfuncs($L, 65608, 0);
 return 1;
}

function _io_fclose($L) {
 $L = $L | 0;
 return _luaL_fileresult($L, (_fclose(HEAP32[(_luaL_checkudata($L, 1, 56736) | 0) >> 2] | 0) | 0) == 0 & 1, 0) | 0;
}

function _display_set_camera_zoom($zoom) {
 $zoom = +$zoom;
 _buffer_check_empty(HEAP32[4530] | 0);
 HEAPF32[(HEAP32[4532] | 0) + 8 >> 2] = $zoom;
 return;
}

function ___assert_fail__wrapper(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 ___assert_fail(p0 | 0, p1 | 0, p2 | 0, p3 | 0);
}

function _luaB_rawequal($L) {
 $L = $L | 0;
 _luaL_checkany($L, 1);
 _luaL_checkany($L, 2);
 _lua_pushboolean($L, _lua_rawequal($L, 1, 2) | 0);
 return 1;
}

function _display_get_alpha($a) {
 $a = $a | 0;
 if (!$a) ___assert_fail(23152, 18224, 206, 18296); else {
  HEAP32[$a >> 2] = HEAPU8[18127];
  return;
 }
}

function _luaopen_debug($L) {
 $L = $L | 0;
 _luaL_checkversion_($L, 503.0, 68);
 _lua_createtable($L, 0, 16);
 _luaL_setfuncs($L, 66144, 0);
 return 1;
}

function _luaopen_bit32($L) {
 $L = $L | 0;
 _luaL_checkversion_($L, 503.0, 68);
 _lua_createtable($L, 0, 12);
 _luaL_setfuncs($L, 65192, 0);
 return 1;
}

function ___expo2f($x) {
 $x = +$x;
 return +(+Math_exp(+($x + -162.88958740234375)) * 1661534994731144841129758.0e11 * 1661534994731144841129758.0e11);
}

function _display_set_alpha($a) {
 $a = $a | 0;
 if ($a >>> 0 < 256) {
  HEAP8[18127] = $a;
  return;
 } else ___assert_fail(18784, 18224, 401, 18808);
}

function _system_clear_colors($s) {
 $s = $s | 0;
 if (!$s) ___assert_fail(23264, 10392, 240, 10688); else {
  HEAP32[$s + 200 >> 2] = 0;
  return;
 }
}

function _luaB_rawget($L) {
 $L = $L | 0;
 _luaL_checktype($L, 1, 5);
 _luaL_checkany($L, 2);
 _lua_settop($L, 2);
 _lua_rawget($L, 1) | 0;
 return 1;
}

function _fread__wrapper(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 return _fread(p0 | 0, p1 | 0, p2 | 0, p3 | 0) | 0;
}

function _png_init_io($png_ptr, $fp) {
 $png_ptr = $png_ptr | 0;
 $fp = $fp | 0;
 if (!$png_ptr) return;
 HEAP32[$png_ptr + 188 >> 2] = $fp;
 return;
}

function _luaopen_os($L) {
 $L = $L | 0;
 _luaL_checkversion_($L, 503.0, 68);
 _lua_createtable($L, 0, 11);
 _luaL_setfuncs($L, 59616, 0);
 return 1;
}

function _xmalloc($size) {
 $size = $size | 0;
 var $0 = 0;
 $0 = _malloc($size) | 0;
 if (!$0) _log_oom_and_exit(); else return $0 | 0;
 return 0;
}

function _system_clear_sizes($s) {
 $s = $s | 0;
 if (!$s) ___assert_fail(23264, 10392, 233, 10664); else {
  HEAP32[$s + 4 >> 2] = 0;
  return;
 }
}

function _wget($url, $filename) {
 $url = $url | 0;
 $filename = $filename | 0;
 _emscripten_async_wget($url | 0, $filename | 0, 85, 86);
 return;
}

function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 31](a1 | 0, a2 | 0) | 0;
}

function _stb_vorbis_close($p) {
 $p = $p | 0;
 if (!$p) return;
 _vorbis_deinit($p);
 if (HEAP32[$p + 96 >> 2] | 0) return;
 _free($p);
 return;
}

function _writer($L, $b, $size, $B) {
 $L = $L | 0;
 $b = $b | 0;
 $size = $size | 0;
 $B = $B | 0;
 _luaL_addlstring($B, $b, $size);
 return 0;
}

function _wctomb($s, $wc) {
 $s = $s | 0;
 $wc = $wc | 0;
 var $$0 = 0;
 if (!$s) $$0 = 0; else $$0 = _wcrtomb($s, $wc, 0) | 0;
 return $$0 | 0;
}

function _db_getmetatable($L) {
 $L = $L | 0;
 _luaL_checkany($L, 1);
 if (_lua_getmetatable($L, 1) | 0) return 1;
 _lua_pushnil($L);
 return 1;
}

function _strlen(ptr) {
 ptr = ptr | 0;
 var curr = 0;
 curr = ptr;
 while (HEAP8[curr >> 0] | 0) curr = curr + 1 | 0;
 return curr - ptr | 0;
}

function __ZNK12b2ChainShape9TestPointERK11b2TransformRK6b2Vec2($this, $xf, $p) {
 $this = $this | 0;
 $xf = $xf | 0;
 $p = $p | 0;
 return 0;
}

function _system_start($s) {
 $s = $s | 0;
 if (!$s) ___assert_fail(23264, 10392, 68, 10424); else {
  HEAP8[$s + 400 >> 0] = 1;
  return;
 }
}

function _mlua_drystal_index($L) {
 $L = $L | 0;
 var $1 = 0;
 $1 = _graphics_index(HEAP32[16] | 0) | 0;
 return (($1 | 0) > 0 ? $1 : 0) | 0;
}

function _luaX_lookahead($ls) {
 $ls = $ls | 0;
 var $1 = 0;
 $1 = _llex($ls, $ls + 24 | 0) | 0;
 HEAP32[$ls + 20 >> 2] = $1;
 return $1 | 0;
}

function __ZNK11b2EdgeShape9TestPointERK11b2TransformRK6b2Vec2($this, $xf, $p) {
 $this = $this | 0;
 $xf = $xf | 0;
 $p = $p | 0;
 return 0;
}

function _system_stop($s) {
 $s = $s | 0;
 if (!$s) ___assert_fail(23264, 10392, 75, 10440); else {
  HEAP8[$s + 400 >> 0] = 0;
  return;
 }
}

function _luaL_newstate() {
 var $0 = 0;
 $0 = _lua_newstate(3, 0) | 0;
 if (!$0) return $0 | 0;
 _lua_atpanic($0, 336) | 0;
 return $0 | 0;
}

function __ZN15b2FrictionJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 return 1;
}

function _ispunct($c) {
 $c = $c | 0;
 var $5 = 0;
 if (!(_isgraph($c) | 0)) $5 = 0; else $5 = (_isalnum($c) | 0) == 0;
 return $5 & 1 | 0;
}

function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw;
  threwValue = value;
 }
}

function __ZN25CustomDestructionListener10SayGoodbyeEP9b2Fixture($this, $fixture) {
 $this = $this | 0;
 $fixture = $fixture | 0;
 return;
}

function _xstrdup($s) {
 $s = $s | 0;
 var $0 = 0;
 $0 = ___strdup($s) | 0;
 if (!$0) _log_oom_and_exit(); else return $0 | 0;
 return 0;
}

function _luaK_getlabel($fs) {
 $fs = $fs | 0;
 var $1 = 0;
 $1 = HEAP32[$fs + 16 >> 2] | 0;
 HEAP32[$fs + 20 >> 2] = $1;
 return $1 | 0;
}

function __ZN12b2MouseJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 return 1;
}

function __ZN12b2MotorJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 return 1;
}

function dynCall_did(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = +a2;
 return +FUNCTION_TABLE_did[index & 15](a1 | 0, +a2);
}

function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 127](a1 | 0, a2 | 0);
}

function b12(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 abort(12);
}

function _vsprintf($s, $fmt, $ap) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 return _vsnprintf($s, 2147483647, $fmt, $ap) | 0;
}

function _luaB_type($L) {
 $L = $L | 0;
 _luaL_checkany($L, 1);
 _lua_pushvalue($L, -1001001 - (_lua_type($L, 1) | 0) | 0);
 return 1;
}

function _isspace($c) {
 $c = $c | 0;
 var $4 = 0;
 if (($c | 0) == 32) $4 = 1; else $4 = ($c + -9 | 0) >>> 0 < 5;
 return $4 & 1 | 0;
}

function _f_call($L, $ud) {
 $L = $L | 0;
 $ud = $ud | 0;
 _luaD_call($L, HEAP32[$ud >> 2] | 0, HEAP32[$ud + 4 >> 2] | 0, 0);
 return;
}

function __ZNK12b2MouseJoint17GetReactionTorqueEf($this, $inv_dt) {
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 return +($inv_dt * 0.0);
}

function _luaM_toobig($L) {
 $L = $L | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 _luaG_runerror($L, 58096, sp);
}

function _lua_gettop($L) {
 $L = $L | 0;
 return (HEAP32[$L + 8 >> 2] | 0) - ((HEAP32[HEAP32[$L + 16 >> 2] >> 2] | 0) + 8) >> 3 | 0;
}

function __ZN17b2ContactListener12BeginContactEP9b2Contact($this, $contact) {
 $this = $this | 0;
 $contact = $contact | 0;
 return;
}

function __ZN17b2ContactListener10EndContactEP9b2Contact($this, $contact) {
 $this = $this | 0;
 $contact = $contact | 0;
 return;
}

function _vmc_free($mc) {
 $mc = $mc | 0;
 if (!$mc) return;
 _stb_vorbis_close(HEAP32[$mc + 12 >> 2] | 0);
 _free($mc);
 return;
}

function _dothecall($L, $ud) {
 $L = $L | 0;
 $ud = $ud | 0;
 _luaD_call($L, (HEAP32[$L + 8 >> 2] | 0) + -16 | 0, 0, 0);
 return;
}

function b14(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 abort(14);
 return 0;
}

function _llvm_bswap_i32(x) {
 x = x | 0;
 return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24 | 0;
}

function __ZNK16b2PrismaticJoint14IsMotorEnabledEv($this) {
 $this = $this | 0;
 return (HEAP8[$this + 137 >> 0] | 0) != 0 | 0;
}

function __ZNK16b2PrismaticJoint14IsLimitEnabledEv($this) {
 $this = $this | 0;
 return (HEAP8[$this + 136 >> 0] | 0) != 0 | 0;
}

function _srand($s) {
 $s = $s | 0;
 var $1 = 0;
 $1 = 107208;
 HEAP32[$1 >> 2] = $s + -1;
 HEAP32[$1 + 4 >> 2] = 0;
 return;
}

function _png_gamma_significant($gamma_val) {
 $gamma_val = $gamma_val | 0;
 return ($gamma_val + -95e3 | 0) >>> 0 > 1e4 | 0;
}

function b5(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = +p4;
 abort(5);
 return 0.0;
}

function _semerror($ls, $msg) {
 $ls = $ls | 0;
 $msg = $msg | 0;
 HEAP32[$ls + 12 >> 2] = 0;
 _luaX_syntaxerror($ls, $msg);
}

function __ZNK15b2DistanceJoint17GetReactionTorqueEf($this, $inv_dt) {
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 return 0.0;
}

function __ZN7b2Joint11ShiftOriginERK6b2Vec2($this, $newOrigin) {
 $this = $this | 0;
 $newOrigin = $newOrigin | 0;
 return;
}

function _os_getenv($L) {
 $L = $L | 0;
 _lua_pushstring($L, _getenv(_luaL_checklstring($L, 1, 0) | 0) | 0) | 0;
 return 1;
}

function _luaX_syntaxerror($ls, $msg) {
 $ls = $ls | 0;
 $msg = $msg | 0;
 _lexerror($ls, $msg, HEAP32[$ls + 12 >> 2] | 0);
}

function _png_reset_crc($png_ptr) {
 $png_ptr = $png_ptr | 0;
 HEAP32[$png_ptr + 412 >> 2] = _crc32(0, 0, 0) | 0;
 return;
}

function _luaS_new($L, $str) {
 $L = $L | 0;
 $str = $str | 0;
 return _luaS_newlstr($L, $str, _strlen($str | 0) | 0) | 0;
}

function _fpconv_strtod($nptr, $endptr) {
 $nptr = $nptr | 0;
 $endptr = $endptr | 0;
 return +(+_strtod($nptr, $endptr));
}

function _dofilecont($L, $d1, $d2) {
 $L = $L | 0;
 $d1 = $d1 | 0;
 $d2 = $d2 | 0;
 return (_lua_gettop($L) | 0) + -1 | 0;
}

function __ZNK13b2PulleyJoint17GetReactionTorqueEf($this, $inv_dt) {
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 return 0.0;
}

function __ZNK12b2ChainShape13GetChildCountEv($this) {
 $this = $this | 0;
 return (HEAP32[$this + 16 >> 2] | 0) + -1 | 0;
}

function _run_js($script) {
 $script = $script | 0;
 return _xstrdup(_emscripten_run_script_string($script | 0) | 0) | 0;
}

function _def_free_func($opaque, $address) {
 $opaque = $opaque | 0;
 $address = $address | 0;
 _free($address);
 return;
}

function __ZNK11b2RopeJoint17GetReactionTorqueEf($this, $inv_dt) {
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 return 0.0;
}

function _math_rad($L) {
 $L = $L | 0;
 _lua_pushnumber($L, +_luaL_checknumber($L, 1) * .01745329238474369);
 return 1;
}

function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 511](a1 | 0) | 0;
}

function _strrchr($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 return ___memrchr($s, $c, (_strlen($s | 0) | 0) + 1 | 0) | 0;
}

function _png_zfree($png_ptr, $ptr) {
 $png_ptr = $png_ptr | 0;
 $ptr = $ptr | 0;
 _png_free($png_ptr, $ptr);
 return;
}

function __Z25mlua_get_pixels_per_meterP9lua_State($L) {
 $L = $L | 0;
 _lua_pushnumber($L, +HEAPF32[616]);
 return 1;
}

function _math_deg($L) {
 $L = $L | 0;
 _lua_pushnumber($L, +_luaL_checknumber($L, 1) * 57.2957763671875);
 return 1;
}

function _display_push_camera() {
 _buffer_check_empty(HEAP32[4530] | 0);
 _camera_push(HEAP32[4532] | 0);
 return;
}

function __ZSt15get_new_handlerv() {
 var $0 = 0;
 $0 = HEAP32[26562] | 0;
 HEAP32[26562] = $0 + 0;
 return $0 | 0;
}

function __ZNK15b2FrictionJoint12GetMaxTorqueEv($this) {
 $this = $this | 0;
 return +(+HEAPF32[$this + 100 >> 2]);
}

function b2(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 abort(2);
}

function _toupper($c) {
 $c = $c | 0;
 var $1 = 0;
 $1 = (_islower($c) | 0) == 0;
 return ($1 ? $c : $c & 95) | 0;
}

function _tolower($c) {
 $c = $c | 0;
 var $1 = 0;
 $1 = (_isupper($c) | 0) == 0;
 return ($1 ? $c : $c | 32) | 0;
}

function _math_sqrt($L) {
 $L = $L | 0;
 _lua_pushnumber($L, +Math_sqrt(+(+_luaL_checknumber($L, 1))));
 return 1;
}

function _math_asin($L) {
 $L = $L | 0;
 _lua_pushnumber($L, +Math_asin(+(+_luaL_checknumber($L, 1))));
 return 1;
}

function _math_acos($L) {
 $L = $L | 0;
 _lua_pushnumber($L, +Math_acos(+(+_luaL_checknumber($L, 1))));
 return 1;
}

function _lua_close($L) {
 $L = $L | 0;
 _close_state(HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 124 >> 2] | 0);
 return;
}

function _io_pclose($L) {
 $L = $L | 0;
 _luaL_checkudata($L, 1, 56736) | 0;
 return _luaL_execresult($L, -1) | 0;
}

function _growstack($L, $ud) {
 $L = $L | 0;
 $ud = $ud | 0;
 _luaD_growstack($L, HEAP32[$ud >> 2] | 0);
 return;
}

function _emscripten_longjmp__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 _emscripten_longjmp(p0 | 0, p1 | 0);
}

function __ZNK15b2FrictionJoint11GetMaxForceEv($this) {
 $this = $this | 0;
 return +(+HEAPF32[$this + 96 >> 2]);
}

function __ZN13b2DynamicTreeD2Ev($this) {
 $this = $this | 0;
 __Z6b2FreePv(HEAP32[$this + 4 >> 2] | 0);
 return;
}

function _math_tan($L) {
 $L = $L | 0;
 _lua_pushnumber($L, +Math_tan(+(+_luaL_checknumber($L, 1))));
 return 1;
}

function _math_sin($L) {
 $L = $L | 0;
 _lua_pushnumber($L, +Math_sin(+(+_luaL_checknumber($L, 1))));
 return 1;
}

function _math_exp($L) {
 $L = $L | 0;
 _lua_pushnumber($L, +Math_exp(+(+_luaL_checknumber($L, 1))));
 return 1;
}

function _math_cos($L) {
 $L = $L | 0;
 _lua_pushnumber($L, +Math_cos(+(+_luaL_checknumber($L, 1))));
 return 1;
}

function _math_log10($L) {
 $L = $L | 0;
 _lua_pushnumber($L, +_log10f(+_luaL_checknumber($L, 1)));
 return 1;
}

function _luaB_tostring($L) {
 $L = $L | 0;
 _luaL_checkany($L, 1);
 _luaL_tolstring($L, 1, 0) | 0;
 return 1;
}

function b11(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 abort(11);
 return 0;
}

function _system_free($s) {
 $s = $s | 0;
 if (!$s) return;
 _free(HEAP32[$s >> 2] | 0);
 _free($s);
 return;
}

function _camera_new() {
 var $0 = 0;
 $0 = _xcalloc(1, 32) | 0;
 HEAPF32[$0 + 8 >> 2] = 1.0;
 return $0 | 0;
}

function _math_tanh($L) {
 $L = $L | 0;
 _lua_pushnumber($L, +_tanhf(+_luaL_checknumber($L, 1)));
 return 1;
}

function _math_sinh($L) {
 $L = $L | 0;
 _lua_pushnumber($L, +_sinhf(+_luaL_checknumber($L, 1)));
 return 1;
}

function _math_randomseed($L) {
 $L = $L | 0;
 _srand(~~+_luaL_checknumber($L, 1));
 _rand() | 0;
 return 0;
}

function _math_cosh($L) {
 $L = $L | 0;
 _lua_pushnumber($L, +_coshf(+_luaL_checknumber($L, 1)));
 return 1;
}

function _lua_typename($L, $t) {
 $L = $L | 0;
 $t = $t | 0;
 return HEAP32[62904 + ($t + 1 << 2) >> 2] | 0;
}

function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 127](a1 | 0);
}

function _mlua_load_code($L) {
 $L = $L | 0;
 _lua_pushboolean($L, (_dlua_load_code() | 0) & 1);
 return 1;
}

function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 ___cxa_begin_catch($0 | 0) | 0;
 __ZSt9terminatev();
}

function __ZNK11b2GearJoint8GetRatioEv($this) {
 $this = $this | 0;
 return +(+HEAPF32[$this + 152 >> 2]);
}

function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function _engine_stop() {
 _dlua_call_atexit();
 HEAP8[12] = 0;
 _emscripten_cancel_main_loop();
 return;
}

function _luaB_yieldable($L) {
 $L = $L | 0;
 _lua_pushboolean($L, _lua_isyieldable($L) | 0);
 return 1;
}

function _luaB_corunning($L) {
 $L = $L | 0;
 _lua_pushboolean($L, _lua_pushthread($L) | 0);
 return 2;
}

function _b_not($L) {
 $L = $L | 0;
 _lua_pushinteger($L, ~(_luaL_checkinteger($L, 1) | 0));
 return 1;
}

function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN25b2PolygonAndCircleContactD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN25CustomDestructionListenerD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function b15(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 abort(15);
}

function _zcfree($opaque, $ptr) {
 $opaque = $opaque | 0;
 $ptr = $ptr | 0;
 _free($ptr);
 return;
}

function _fopen__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 return _fopen(p0 | 0, p1 | 0) | 0;
}

function _check_opengl_oom() {
 if ((_glGetError() | 0) == 1285) _log_oom_and_exit(); else return;
}

function __ZN24b2ChainAndPolygonContactD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN23b2EdgeAndPolygonContactD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN23b2ChainAndCircleContactD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function _os_clock($L) {
 $L = $L | 0;
 _lua_pushnumber($L, +(_clock() | 0) / 1.0e6);
 return 1;
}

function _mlua_use_default_shader($L) {
 $L = $L | 0;
 _display_use_default_shader();
 return 0;
}

function _mlua_use_default_buffer($L) {
 $L = $L | 0;
 _display_use_default_buffer();
 return 0;
}

function _luaB_yield($L) {
 $L = $L | 0;
 return _lua_yieldk($L, _lua_gettop($L) | 0, 0, 0) | 0;
}

function __ZN22b2EdgeAndCircleContactD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN21CustomRayCastCallbackD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function _log_oom_and_exit() {
 _fwrite(976, 23, 1, HEAP32[_stderr >> 2] | 0) | 0;
 _exit(1);
}

function __ZN19CustomQueryCallbackD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function _lua_isyieldable($L) {
 $L = $L | 0;
 return (HEAP16[$L + 104 >> 1] | 0) == 0 | 0;
}

function __ZN17b2ContactListenerD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function _mlua_draw_background($L) {
 $L = $L | 0;
 _display_draw_background();
 return 0;
}

function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZN16b2PrismaticJointD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN16b2PolygonContactD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function b1(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(1);
 return 0;
}

function __ZN15b2RevoluteJointD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN15b2FrictionJointD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN15b2DistanceJointD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN15b2ContactFilterD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN15b2CircleContactD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function _iscntrl($c) {
 $c = $c | 0;
 return ($c >>> 0 < 32 | ($c | 0) == 127) & 1 | 0;
}

function __ZN14b2PolygonShapeD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function _loop() {
 if (!(_engine_is_loaded() | 0)) return;
 _engine_update();
 return;
}

function __ZNK14b2PolygonShape13GetChildCountEv($this) {
 $this = $this | 0;
 return 1;
}

function __ZN13b2PulleyJointD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN13b2CircleShapeD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNK13b2CircleShape13GetChildCountEv($this) {
 $this = $this | 0;
 return 1;
}

function __ZN12b2WheelJointD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12b2MouseJointD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12b2MotorJointD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function _db_getregistry($L) {
 $L = $L | 0;
 _lua_pushvalue($L, -1001e3);
 return 1;
}

function __ZN11b2WeldJointD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN11b2RopeJointD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN11b2GearJointD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN11b2EdgeShapeD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this | 0;
 return;
}

function _strcoll($l, $r) {
 $l = $l | 0;
 $r = $r | 0;
 return _strcmp($l, $r) | 0;
}

function _mlua_camera_reset($L) {
 $L = $L | 0;
 _display_reset_camera();
 return 0;
}

function _lua_gethookmask($L) {
 $L = $L | 0;
 return HEAPU8[$L + 108 >> 0] | 0 | 0;
}

function __ZNSt9bad_allocD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNK11b2EdgeShape13GetChildCountEv($this) {
 $this = $this | 0;
 return 1;
}

function _luaB_pairs($L) {
 $L = $L | 0;
 _pairsmeta($L, 64896, 0, 110);
 return 3;
}

function _isalpha($c) {
 $c = $c | 0;
 return (($c | 32) + -97 | 0) >>> 0 < 26 | 0;
}

function __ZNK7b2Timer15GetMillisecondsEv($this) {
 $this = $this | 0;
 return 0.0;
}

function _display_toggle_debug_mode() {
 HEAP8[18140] = HEAP8[18140] ^ 1;
 return;
}

function _copysignl($x, $y) {
 $x = +$x;
 $y = +$y;
 return +(+_copysign($x, $y));
}

function __ZN9b2ContactD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN25b2PolygonAndCircleContactD1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZN25CustomDestructionListenerD1Ev($this) {
 $this = $this | 0;
 return;
}

function _scalbnl($x, $n) {
 $x = +$x;
 $n = $n | 0;
 return +(+_scalbn($x, $n));
}

function _ldexpf($x, $n) {
 $x = +$x;
 $n = $n | 0;
 return +(+_scalbnf($x, $n));
}

function __ZN24b2ChainAndPolygonContactD1Ev($this) {
 $this = $this | 0;
 return;
}

function _lua_gethookcount($L) {
 $L = $L | 0;
 return HEAP32[$L + 96 >> 2] | 0;
}

function _io_output($L) {
 $L = $L | 0;
 _g_iofile($L, 56704, 57296);
 return 1;
}

function __ZN7b2JointD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN23b2EdgeAndPolygonContactD1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZN23b2ChainAndCircleContactD1Ev($this) {
 $this = $this | 0;
 return;
}

function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 7]();
}

function _ldexp($x, $n) {
 $x = +$x;
 $n = $n | 0;
 return +(+_scalbn($x, $n));
}

function _io_input($L) {
 $L = $L | 0;
 _g_iofile($L, 56680, 59072);
 return 1;
}

function _frexpl($x, $e) {
 $x = +$x;
 $e = $e | 0;
 return +(+_frexp($x, $e));
}

function __ZN22b2EdgeAndCircleContactD1Ev($this) {
 $this = $this | 0;
 return;
}

function b8(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(8);
}

function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this | 0;
 return 106160;
}

function __ZN21CustomRayCastCallbackD1Ev($this) {
 $this = $this | 0;
 return;
}

function __Z7b2Alloci($size) {
 $size = $size | 0;
 return _malloc($size) | 0;
}

function b10(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = +p2;
 abort(10);
}

function _lua_status($L) {
 $L = $L | 0;
 return HEAPU8[$L + 6 >> 0] | 0 | 0;
}

function _isupper($c) {
 $c = $c | 0;
 return ($c + -65 | 0) >>> 0 < 26 | 0;
}

function _islower($c) {
 $c = $c | 0;
 return ($c + -97 | 0) >>> 0 < 26 | 0;
}

function _isgraph($c) {
 $c = $c | 0;
 return ($c + -33 | 0) >>> 0 < 94 | 0;
}

function __ZN19CustomQueryCallbackD1Ev($this) {
 $this = $this | 0;
 return;
}

function _lua_gethook($L) {
 $L = $L | 0;
 return HEAP32[$L + 84 >> 2] | 0;
}

function _fmodl($x, $y) {
 $x = +$x;
 $y = +$y;
 return +(+_fmod($x, $y));
}

function _fclose__wrapper(p0) {
 p0 = p0 | 0;
 return _fclose(p0 | 0) | 0;
}

function __ZN17b2ContactListenerD1Ev($this) {
 $this = $this | 0;
 return;
}

function b13(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 abort(13);
 return 0;
}

function _str_match($L) {
 $L = $L | 0;
 return _str_find_aux($L, 0) | 0;
}

function __ZN16b2PrismaticJointD1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZN16b2PolygonContactD1Ev($this) {
 $this = $this | 0;
 return;
}

function _str_find($L) {
 $L = $L | 0;
 return _str_find_aux($L, 1) | 0;
}

function _camera_stack_is_full() {
 return (HEAP32[3498] | 0) == 64 | 0;
}

function _camera_stack_is_empty() {
 return (HEAP32[3498] | 0) == 0 | 0;
}

function __ZN15b2RevoluteJointD1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZN15b2FrictionJointD1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZN15b2DistanceJointD1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZN15b2ContactFilterD1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZN15b2CircleContactD1Ev($this) {
 $this = $this | 0;
 return;
}

function _lua_error($L) {
 $L = $L | 0;
 _luaG_errormsg($L);
 return 0;
}

function _engine_toggle_update() {
 HEAP8[20] = HEAP8[20] ^ 1;
 return;
}

function __Znaj($size) {
 $size = $size | 0;
 return __Znwj($size) | 0;
}

function __ZN14b2PolygonShapeD1Ev($this) {
 $this = $this | 0;
 return;
}

function b3(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 abort(3);
 return 0.0;
}

function __ZN13b2PulleyJointD1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZN13b2CircleShapeD1Ev($this) {
 $this = $this | 0;
 return;
}

function __Z6b2FreePv($mem) {
 $mem = $mem | 0;
 _free($mem);
 return;
}

function _engine_toggle_draw() {
 HEAP8[21] = HEAP8[21] ^ 1;
 return;
}

function __ZN12b2WheelJointD1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZN12b2MouseJointD1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZN12b2MotorJointD1Ev($this) {
 $this = $this | 0;
 return;
}

function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value;
}

function __ZN11b2WeldJointD1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZN11b2RopeJointD1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZN11b2GearJointD1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZN11b2EdgeShapeD1Ev($this) {
 $this = $this | 0;
 return;
}

function _mlua_stop($L) {
 $L = $L | 0;
 _engine_stop();
 return 0;
}

function _display_is_debug() {
 return (HEAP8[18140] | 0) != 0 | 0;
}

function __ZdaPv($ptr) {
 $ptr = $ptr | 0;
 __ZdlPv($ptr);
 return;
}

function __ZNSt9type_infoD2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt9exceptionD2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt9bad_allocD2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZN7b2Timer5ResetEv($this) {
 $this = $this | 0;
 return;
}

function _display_get_current_buffer() {
 return HEAP32[4530] | 0;
}

function ___cxa_pure_virtual__wrapper() {
 ___cxa_pure_virtual();
}

function __ZdlPv($ptr) {
 $ptr = $ptr | 0;
 _free($ptr);
 return;
}

function __ZN9b2ContactD1Ev($this) {
 $this = $this | 0;
 return;
}

function _engine_is_loaded() {
 return (HEAP8[13] | 0) != 0 | 0;
}

function _audio_get_sound_volume() {
 return +(+HEAPF32[2866]);
}

function _audio_get_music_volume() {
 return +(+HEAPF32[2858]);
}

function __ZN7b2TimerC2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZN7b2JointD1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZN6b2BodyD2Ev($this) {
 $this = $this | 0;
 return;
}

function stackRestore(top) {
 top = top | 0;
 STACKTOP = top;
}

function _display_get_draw_from() {
 return HEAP32[4529] | 0;
}

function b6(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 abort(6);
}

function _display_get_draw_on() {
 return HEAP32[4528] | 0;
}

function _display_get_screen() {
 return HEAP32[4525] | 0;
}

function _display_get_camera() {
 return HEAP32[4532] | 0;
}

function _dlua_get_lua_state() {
 return HEAP32[16] | 0;
}

function b7(p0) {
 p0 = p0 | 0;
 abort(7);
 return 0;
}

function _lmc_rewind($mc) {
 $mc = $mc | 0;
 return;
}

function getTempRet0() {
 return tempRet0 | 0;
}

function stackSave() {
 return STACKTOP | 0;
}

function b0(p0) {
 p0 = p0 | 0;
 abort(0);
}

function _use_colors() {
 return 0;
}

function b9() {
 abort(9);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_vi = [b0,__ZN14CustomListenerD2Ev,__ZN14CustomListenerD0Ev,__ZN19CustomQueryCallbackD1Ev,__ZN19CustomQueryCallbackD0Ev,__ZN21CustomRayCastCallbackD1Ev,__ZN21CustomRayCastCallbackD0Ev,__ZN25CustomDestructionListenerD1Ev,__ZN25CustomDestructionListenerD0Ev,__ZN12b2ChainShapeD2Ev,__ZN12b2ChainShapeD0Ev,__ZN13b2CircleShapeD1Ev,__ZN13b2CircleShapeD0Ev,__ZN11b2EdgeShapeD1Ev,__ZN11b2EdgeShapeD0Ev,__ZN14b2PolygonShapeD1Ev,__ZN14b2PolygonShapeD0Ev,__ZN15b2DistanceJoint4DumpEv,__ZN15b2DistanceJointD1Ev,__ZN15b2DistanceJointD0Ev,__ZN15b2FrictionJoint4DumpEv,__ZN15b2FrictionJointD1Ev,__ZN15b2FrictionJointD0Ev,__ZN11b2GearJoint4DumpEv,__ZN11b2GearJointD1Ev,__ZN11b2GearJointD0Ev,__ZN7b2Joint4DumpEv,__ZN7b2JointD1Ev,__ZN7b2JointD0Ev
,__ZN12b2MotorJoint4DumpEv,__ZN12b2MotorJointD1Ev,__ZN12b2MotorJointD0Ev,__ZN12b2MouseJoint4DumpEv,__ZN12b2MouseJointD1Ev,__ZN12b2MouseJointD0Ev,__ZN16b2PrismaticJoint4DumpEv,__ZN16b2PrismaticJointD1Ev,__ZN16b2PrismaticJointD0Ev,__ZN13b2PulleyJoint4DumpEv,__ZN13b2PulleyJointD1Ev,__ZN13b2PulleyJointD0Ev,__ZN15b2RevoluteJoint4DumpEv,__ZN15b2RevoluteJointD1Ev,__ZN15b2RevoluteJointD0Ev,__ZN11b2RopeJoint4DumpEv,__ZN11b2RopeJointD1Ev,__ZN11b2RopeJointD0Ev,__ZN11b2WeldJoint4DumpEv,__ZN11b2WeldJointD1Ev,__ZN11b2WeldJointD0Ev,__ZN12b2WheelJoint4DumpEv,__ZN12b2WheelJointD1Ev,__ZN12b2WheelJointD0Ev,__ZN17b2ContactListenerD1Ev,__ZN17b2ContactListenerD0Ev,__ZN15b2ContactFilterD1Ev,__ZN15b2ContactFilterD0Ev,__ZN9b2ContactD1Ev,__ZN9b2ContactD0Ev
,__ZN22b2EdgeAndCircleContactD1Ev,__ZN22b2EdgeAndCircleContactD0Ev,__ZN23b2EdgeAndPolygonContactD1Ev,__ZN23b2EdgeAndPolygonContactD0Ev,__ZN25b2PolygonAndCircleContactD1Ev,__ZN25b2PolygonAndCircleContactD0Ev,__ZN16b2PolygonContactD1Ev,__ZN16b2PolygonContactD0Ev,__ZN23b2ChainAndCircleContactD1Ev,__ZN23b2ChainAndCircleContactD0Ev,__ZN24b2ChainAndPolygonContactD1Ev,__ZN24b2ChainAndPolygonContactD0Ev,__ZN15b2CircleContactD1Ev,__ZN15b2CircleContactD0Ev,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,_on_zip_fail,_vmc_free,_vmc_rewind,_lmc_free,_lmc_rewind,_onsuccess,_onerror,_png_set_palette_to_rgb,_png_set_expand_gray_1_2_4_to_8
,_png_set_tRNS_to_alpha,_png_set_strip_16,_png_set_packing,_free,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_iiii = [b1,__ZNK12b2ChainShape9TestPointERK11b2TransformRK6b2Vec2,__ZNK13b2CircleShape9TestPointERK11b2TransformRK6b2Vec2,__ZNK11b2EdgeShape9TestPointERK11b2TransformRK6b2Vec2,__ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2,__ZN15b2ContactFilter13ShouldCollideEP9b2FixtureS1_,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,_sn_write,_vmc_feed_buffer,_lmc_feed_buffer,_png_sig_cmp,_png_set_longjmp_fn,_png_get_valid,_em_ui_callback,_em_click_callback,_getF,_getS,_lua_geti,_lua_rawgeti,_dofilecont,_generic_reader,_finishpcall,_png_zalloc,_def_alloc_func,_zcalloc,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_viiiii = [b2,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b2];
var FUNCTION_TABLE_did = [b3,__ZNK15b2DistanceJoint17GetReactionTorqueEf,__ZNK15b2FrictionJoint17GetReactionTorqueEf,__ZNK11b2GearJoint17GetReactionTorqueEf,__ZNK12b2MotorJoint17GetReactionTorqueEf,__ZNK12b2MouseJoint17GetReactionTorqueEf,__ZNK16b2PrismaticJoint17GetReactionTorqueEf,__ZNK13b2PulleyJoint17GetReactionTorqueEf,__ZNK15b2RevoluteJoint17GetReactionTorqueEf,__ZNK11b2RopeJoint17GetReactionTorqueEf,__ZNK11b2WeldJoint17GetReactionTorqueEf,__ZNK12b2WheelJoint17GetReactionTorqueEf,b3,b3,b3,b3];
var FUNCTION_TABLE_iiiiiiiiii = [b4,_png_get_IHDR];
var FUNCTION_TABLE_diiiid = [b5,__ZN21CustomRayCastCallback13ReportFixtureEP9b2FixtureRK6b2Vec2S4_f];
var FUNCTION_TABLE_vii = [b6,__ZN14CustomListener12BeginContactEP9b2Contact,__ZN14CustomListener10EndContactEP9b2Contact,__ZN25CustomDestructionListener10SayGoodbyeEP7b2Joint,__ZN25CustomDestructionListener10SayGoodbyeEP9b2Fixture,_change_alpha,_change_red,_change_green,_change_blue,_change_tiny,_change_small,_change_normal,_change_big,_change_BIG,_change_italic,_change_outline,_change_nooutline,_change_outr,_change_outg,_change_outb,_change_shadowx,_change_shadowy,__ZNK15b2DistanceJoint10GetAnchorAEv,__ZNK15b2DistanceJoint10GetAnchorBEv,__ZN7b2Joint11ShiftOriginERK6b2Vec2,__ZN15b2DistanceJoint23InitVelocityConstraintsERK12b2SolverData,__ZN15b2DistanceJoint24SolveVelocityConstraintsERK12b2SolverData,__ZNK15b2FrictionJoint10GetAnchorAEv,__ZNK15b2FrictionJoint10GetAnchorBEv
,__ZN15b2FrictionJoint23InitVelocityConstraintsERK12b2SolverData,__ZN15b2FrictionJoint24SolveVelocityConstraintsERK12b2SolverData,__ZNK11b2GearJoint10GetAnchorAEv,__ZNK11b2GearJoint10GetAnchorBEv,__ZN11b2GearJoint23InitVelocityConstraintsERK12b2SolverData,__ZN11b2GearJoint24SolveVelocityConstraintsERK12b2SolverData,__ZNK12b2MotorJoint10GetAnchorAEv,__ZNK12b2MotorJoint10GetAnchorBEv,__ZN12b2MotorJoint23InitVelocityConstraintsERK12b2SolverData,__ZN12b2MotorJoint24SolveVelocityConstraintsERK12b2SolverData,__ZNK12b2MouseJoint10GetAnchorAEv,__ZNK12b2MouseJoint10GetAnchorBEv,__ZN12b2MouseJoint11ShiftOriginERK6b2Vec2,__ZN12b2MouseJoint23InitVelocityConstraintsERK12b2SolverData,__ZN12b2MouseJoint24SolveVelocityConstraintsERK12b2SolverData,__ZNK16b2PrismaticJoint10GetAnchorAEv,__ZNK16b2PrismaticJoint10GetAnchorBEv,__ZN16b2PrismaticJoint23InitVelocityConstraintsERK12b2SolverData,__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK12b2SolverData,__ZNK13b2PulleyJoint10GetAnchorAEv,__ZNK13b2PulleyJoint10GetAnchorBEv,__ZN13b2PulleyJoint11ShiftOriginERK6b2Vec2,__ZN13b2PulleyJoint23InitVelocityConstraintsERK12b2SolverData,__ZN13b2PulleyJoint24SolveVelocityConstraintsERK12b2SolverData,__ZNK15b2RevoluteJoint10GetAnchorAEv,__ZNK15b2RevoluteJoint10GetAnchorBEv,__ZN15b2RevoluteJoint23InitVelocityConstraintsERK12b2SolverData,__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK12b2SolverData,__ZNK11b2RopeJoint10GetAnchorAEv,__ZNK11b2RopeJoint10GetAnchorBEv
,__ZN11b2RopeJoint23InitVelocityConstraintsERK12b2SolverData,__ZN11b2RopeJoint24SolveVelocityConstraintsERK12b2SolverData,__ZNK11b2WeldJoint10GetAnchorAEv,__ZNK11b2WeldJoint10GetAnchorBEv,__ZN11b2WeldJoint23InitVelocityConstraintsERK12b2SolverData,__ZN11b2WeldJoint24SolveVelocityConstraintsERK12b2SolverData,__ZNK12b2WheelJoint10GetAnchorAEv,__ZNK12b2WheelJoint10GetAnchorBEv,__ZN12b2WheelJoint23InitVelocityConstraintsERK12b2SolverData,__ZN12b2WheelJoint24SolveVelocityConstraintsERK12b2SolverData,__ZN17b2ContactListener12BeginContactEP9b2Contact,__ZN17b2ContactListener10EndContactEP9b2Contact,_emscripten_longjmp__wrapper,_png_init_io,_png_set_sig_bytes,_png_read_info,_png_read_update_info,_png_read_image,_png_read_end,_growstack,_f_call,_resume,_unroll,_f_parser,_dothecall,_f_luaopen,_hookf,_png_zfree,_png_free,__ZN15b2CircleContact7DestroyEP9b2ContactP16b2BlockAllocator
,__ZN25b2PolygonAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator,__ZN16b2PolygonContact7DestroyEP9b2ContactP16b2BlockAllocator,__ZN22b2EdgeAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator,__ZN23b2EdgeAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator,__ZN23b2ChainAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator,__ZN24b2ChainAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator,_def_free_func,_zcfree,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_ii = [b7,_mlua_stop,_mlua_log_error,_mlua_log_warning,_mlua_log_info,_mlua_log_debug,_mlua_load_code,_io_close,_io_flush,_io_input,_io_lines,_io_open,_io_output,_io_popen,_io_read,_io_tmpfile,_io_type,_io_write,_f_flush,_f_lines,_f_read,_f_seek,_f_setvbuf,_f_write,_f_gc,_f_tostring,_math_abs,_math_acos,_math_asin
,_math_atan,_math_ceil,_math_cos,_math_deg,_math_exp,_math_toint,_math_floor,_math_fmod,_math_ult,_math_log,_math_max,_math_min,_math_modf,_math_rad,_math_random,_math_randomseed,_math_sin,_math_sqrt,_math_tan,_math_type,_math_cosh,_math_sinh,_math_tanh,_math_pow,_math_frexp,_math_ldexp,_math_log10,_ll_loadlib,_ll_searchpath,_ll_seeall
,_ll_module,_ll_require,_os_clock,_os_date,_os_difftime,_os_execute,_os_exit,_os_getenv,_os_remove,_os_rename,_os_setlocale,_os_time,_os_tmpname,_str_byte,_str_char,_str_dump,_str_find,_str_format,_gmatch,_str_gsub,_str_len,_str_lower,_str_match,_str_rep,_str_reverse,_str_sub,_str_upper,_str_pack,_str_packsize,_str_unpack
,_tconcat,_maxn,_tinsert,_pack,_unpack,_tremove,_tmove,_sort,_byteoffset,_codepoint,_utfchar,_utflen,_iter_codes,_luaB_assert,_luaB_collectgarbage,_luaB_dofile,_luaB_error,_luaB_getmetatable,_luaB_ipairs,_luaB_loadfile,_luaB_load,_luaB_next,_luaB_pairs,_luaB_pcall,_luaB_print,_luaB_rawequal,_luaB_rawlen,_luaB_rawget,_luaB_rawset,_luaB_select
,_luaB_setmetatable,_luaB_tonumber,_luaB_tostring,_luaB_xpcall,_b_arshift,_b_and,_b_not,_b_or,_b_xor,_b_test,_b_extract,_b_lrot,_b_lshift,_b_replace,_b_rrot,_b_rshift,_luaB_cocreate,_luaB_coresume,_luaB_corunning,_luaB_costatus,_luaB_cowrap,_luaB_yield,_luaB_yieldable,_db_debug,_db_getuservalue,_db_gethook,_db_getinfo,_db_getlocal,_db_getregistry,_db_getmetatable
,_db_getupvalue,_db_upvaluejoin,_db_upvalueid,_db_setuservalue,_db_sethook,_db_setlocal,_db_setmetatable,_db_setupvalue,_db_traceback,__ZNK12b2ChainShape13GetChildCountEv,__ZNK13b2CircleShape13GetChildCountEv,__ZNK11b2EdgeShape13GetChildCountEv,__ZNK14b2PolygonShape13GetChildCountEv,__ZNKSt9bad_alloc4whatEv,_luaopen_drystal,_traceback,_mlua_drystal_index,__Z17mlua_init_physicsP9lua_State,__Z16mlua_set_gravityP9lua_State,__Z16mlua_get_gravityP9lua_State,__Z25mlua_set_pixels_per_meterP9lua_State,__Z25mlua_get_pixels_per_meterP9lua_State,__Z14mlua_new_shapeP9lua_State,__Z13mlua_new_bodyP9lua_State,__Z14mlua_new_jointP9lua_State,__Z19mlua_update_physicsP9lua_State,__Z17mlua_on_collisionP9lua_State,__Z12mlua_raycastP9lua_State,__Z10mlua_queryP9lua_State,__Z22mlua_get_position_bodyP9lua_State
,__Z22mlua_set_position_bodyP9lua_State,__Z29mlua_get_center_position_bodyP9lua_State,__Z19mlua_get_angle_bodyP9lua_State,__Z19mlua_set_angle_bodyP9lua_State,__Z29mlua_get_linear_velocity_bodyP9lua_State,__Z29mlua_set_linear_velocity_bodyP9lua_State,__Z30mlua_get_angular_velocity_bodyP9lua_State,__Z30mlua_set_angular_velocity_bodyP9lua_State,__Z28mlua_get_linear_damping_bodyP9lua_State,__Z28mlua_set_linear_damping_bodyP9lua_State,__Z29mlua_get_angular_damping_bodyP9lua_State,__Z29mlua_set_angular_damping_bodyP9lua_State,__Z28mlua_get_fixed_rotation_bodyP9lua_State,__Z28mlua_set_fixed_rotation_bodyP9lua_State,__Z20mlua_set_active_bodyP9lua_State,__Z20mlua_set_bullet_bodyP9lua_State,__Z18mlua_get_mass_bodyP9lua_State,__Z25mlua_set_mass_center_bodyP9lua_State,__Z21mlua_apply_force_bodyP9lua_State,__Z30mlua_apply_linear_impulse_bodyP9lua_State,__Z31mlua_apply_angular_impulse_bodyP9lua_State,__Z22mlua_apply_torque_bodyP9lua_State,__Z14mlua_dump_bodyP9lua_State,__Z17mlua_destroy_bodyP9lua_State,__Z14mlua_free_bodyP9lua_State,__Z22mlua_get_density_shapeP9lua_State,__Z22mlua_set_density_shapeP9lua_State,__Z26mlua_get_restitution_shapeP9lua_State,__Z26mlua_set_restitution_shapeP9lua_State,__Z23mlua_get_friction_shapeP9lua_State
,__Z23mlua_set_friction_shapeP9lua_State,__Z21mlua_set_sensor_shapeP9lua_State,__Z13mlua_gc_shapeP9lua_State,__Z18mlua_destroy_jointP9lua_State,__Z27mlua_set_target_mouse_jointP9lua_State,__Z15mlua_free_jointP9lua_State,__Z30mlua_set_length_distance_jointP9lua_State,__Z33mlua_set_frequency_distance_jointP9lua_State,__Z30mlua_set_max_length_rope_jointP9lua_State,__Z36mlua_set_angle_limits_revolute_jointP9lua_State,__Z35mlua_set_motor_speed_revolute_jointP9lua_State,__Z33mlua_get_max_force_friction_jointP9lua_State,__Z34mlua_get_max_torque_friction_jointP9lua_State,__Z33mlua_set_max_force_friction_jointP9lua_State,__Z34mlua_set_max_torque_friction_jointP9lua_State,__Z25mlua_get_ratio_gear_jointP9lua_State,__Z25mlua_set_ratio_gear_jointP9lua_State,__Z37mlua_set_enable_motor_prismatic_jointP9lua_State,__Z36mlua_set_motor_speed_prismatic_jointP9lua_State,__Z37mlua_set_enable_limit_prismatic_jointP9lua_State,__Z37mlua_is_motor_enabled_prismatic_jointP9lua_State,__Z37mlua_is_limit_enabled_prismatic_jointP9lua_State,_mlua_load_font,_mlua_draw_font,_mlua_draw_plain_font,_mlua_sizeof_font,_mlua_sizeof_plain_font,_mlua_free_font,_mlua_new_system,_mlua_emit_system
,_mlua_start_system,_mlua_stop_system,_mlua_reset_system,_mlua_draw_system,_mlua_update_system,_mlua_add_size_system,_mlua_add_color_system,_mlua_clear_sizes_system,_mlua_clear_colors_system,_mlua_set_texture_system,_mlua_get_position_system,_mlua_set_position_system,_mlua_get_offset_system,_mlua_set_offset_system,_mlua_get_emission_rate_system,_mlua_set_emission_rate_system,_mlua_get_min_lifetime_system,_mlua_set_min_lifetime_system,_mlua_get_max_lifetime_system,_mlua_set_max_lifetime_system,_mlua_get_min_direction_system,_mlua_set_min_direction_system,_mlua_get_max_direction_system,_mlua_set_max_direction_system,_mlua_get_min_initial_acceleration_system,_mlua_set_min_initial_acceleration_system,_mlua_get_max_initial_acceleration_system,_mlua_set_max_initial_acceleration_system,_mlua_get_min_initial_velocity_system,_mlua_set_min_initial_velocity_system
,_mlua_get_max_initial_velocity_system,_mlua_set_max_initial_velocity_system,_mlua_clone_system,_mlua_free_system,_mlua_load_music,_mlua_set_music_volume,_mlua_load_sound,_mlua_set_sound_volume,_mlua_play_sound,_mlua_free_sound,_mlua_play_music,_mlua_stop_music,_mlua_pause_music,_mlua_set_pitch_music,_mlua_set_volume_music,_mlua_free_music,_mlua_wget,_mlua_run_js,_mlua_store,_mlua_fetch,_json_encode,_json_decode,_mlua_show_cursor,_mlua_resize,_mlua_set_title,_mlua_set_fullscreen,_mlua_screen2scene,_mlua_load_surface,_mlua_new_surface,_mlua_draw_background
,_mlua_draw_point,_mlua_draw_point_tex,_mlua_draw_line,_mlua_draw_triangle,_mlua_draw_surface,_mlua_draw_quad,_mlua_set_color,_mlua_set_alpha,_mlua_set_line_width,_mlua_set_blend_mode,_mlua_set_filter_surface,_mlua_draw_on_surface,_mlua_draw_from_surface,_mlua_get_pixel_surface,_mlua_free_surface,_mlua_surface_class_index,_mlua_new_buffer,_mlua_use_default_buffer,_mlua_use_buffer,_mlua_draw_buffer,_mlua_reset_buffer,_mlua_upload_and_free_buffer,_mlua_free_buffer,_mlua_new_shader,_mlua_use_default_shader,_mlua_use_shader,_mlua_feed_shader,_mlua_free_shader,_mlua_camera__newindex,_mlua_camera__index
,_mlua_camera_reset,_mlua_camera_push,_mlua_camera_pop,_fclose__wrapper,_png_create_info_struct,_xmalloc,_mlua_set_relative_mode,_panic,_luaopen_base,_luaopen_package,_luaopen_coroutine,_luaopen_table,_luaopen_io,_luaopen_os,_luaopen_string,_luaopen_math,_luaopen_utf8,_luaopen_debug,_luaopen_bit32,_io_noclose,_io_fclose,_io_readline,_io_pclose,_gctm,_searcher_preload,_searcher_Lua,_searcher_C,_searcher_Croot,_gmatch_aux,_iter_aux
,_luaB_type,_ipairsaux_raw,_ipairsaux,_luaB_auxwrap,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7];
var FUNCTION_TABLE_viii = [b8,__ZN14CustomListener8PreSolveEP9b2ContactPK10b2Manifold,__ZN14CustomListener9PostSolveEP9b2ContactPK16b2ContactImpulse,__ZN17b2ContactListener8PreSolveEP9b2ContactPK10b2Manifold,__ZN17b2ContactListener9PostSolveEP9b2ContactPK16b2ContactImpulse,_on_zip_downloaded,_png_destroy_read_struct,_lua_seti,_lua_rawseti,_png_default_read_data,_png_read_filter_row_sub,_png_read_filter_row_up,_png_read_filter_row_avg,_png_read_filter_row_paeth_multibyte_pixel,_png_read_filter_row_paeth_1byte_pixel,b8];
var FUNCTION_TABLE_v = [b9,___cxa_pure_virtual__wrapper,__ZL25default_terminate_handlerv,_loop,_log_oom_and_exit,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b9,b9];
var FUNCTION_TABLE_viid = [b10,__ZNK12b2ChainShape11ComputeMassEP10b2MassDataf,__ZNK13b2CircleShape11ComputeMassEP10b2MassDataf,__ZNK11b2EdgeShape11ComputeMassEP10b2MassDataf,__ZNK14b2PolygonShape11ComputeMassEP10b2MassDataf,__ZNK15b2DistanceJoint16GetReactionForceEf,__ZNK15b2FrictionJoint16GetReactionForceEf,__ZNK11b2GearJoint16GetReactionForceEf,__ZNK12b2MotorJoint16GetReactionForceEf,__ZNK12b2MouseJoint16GetReactionForceEf,__ZNK16b2PrismaticJoint16GetReactionForceEf,__ZNK13b2PulleyJoint16GetReactionForceEf,__ZNK15b2RevoluteJoint16GetReactionForceEf,__ZNK11b2RopeJoint16GetReactionForceEf,__ZNK11b2WeldJoint16GetReactionForceEf,__ZNK12b2WheelJoint16GetReactionForceEf];
var FUNCTION_TABLE_iiiii = [b11,_fread__wrapper,_png_create_read_struct,_l_alloc,_writer,_def_realloc_func,b11,b11];
var FUNCTION_TABLE_viiiiii = [b12,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b12];
var FUNCTION_TABLE_iii = [b13,__ZN19CustomQueryCallback13ReportFixtureEP9b2Fixture,__ZNK12b2ChainShape5CloneEP16b2BlockAllocator,__ZNK13b2CircleShape5CloneEP16b2BlockAllocator,__ZNK11b2EdgeShape5CloneEP16b2BlockAllocator,__ZNK14b2PolygonShape5CloneEP16b2BlockAllocator,__ZN15b2DistanceJoint24SolvePositionConstraintsERK12b2SolverData,__ZN15b2FrictionJoint24SolvePositionConstraintsERK12b2SolverData,__ZN11b2GearJoint24SolvePositionConstraintsERK12b2SolverData,__ZN12b2MotorJoint24SolvePositionConstraintsERK12b2SolverData,__ZN12b2MouseJoint24SolvePositionConstraintsERK12b2SolverData,__ZN16b2PrismaticJoint24SolvePositionConstraintsERK12b2SolverData,__ZN13b2PulleyJoint24SolvePositionConstraintsERK12b2SolverData,__ZN15b2RevoluteJoint24SolvePositionConstraintsERK12b2SolverData,__ZN11b2RopeJoint24SolvePositionConstraintsERK12b2SolverData,__ZN11b2WeldJoint24SolvePositionConstraintsERK12b2SolverData,__ZN12b2WheelJoint24SolvePositionConstraintsERK12b2SolverData,_fopen__wrapper,_png_get_bit_depth,_png_get_color_type,_lua_newstate,_png_user_version_check,_png_malloc_warn,_uint32_compare,_point_compare,_stbtt__edge_compare,__Z14b2PairLessThanRK6b2PairS1_,b13,b13
,b13,b13,b13];
var FUNCTION_TABLE_iiiiii = [b14,__ZNK12b2ChainShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi,__ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi,__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi,__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi,__ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,__ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,__ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,__ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,__ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,__ZN23b2ChainAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,__ZN24b2ChainAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,_mz_zip_mem_read_func,_mz_zip_file_write_callback,b14,b14];
var FUNCTION_TABLE_viiii = [b15,__ZNK12b2ChainShape11ComputeAABBEP6b2AABBRK11b2Transformi,__ZNK13b2CircleShape11ComputeAABBEP6b2AABBRK11b2Transformi,__ZNK11b2EdgeShape11ComputeAABBEP6b2AABBRK11b2Transformi,__ZNK14b2PolygonShape11ComputeAABBEP6b2AABBRK11b2Transformi,__ZN22b2EdgeAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,__ZN23b2EdgeAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,__ZN23b2ChainAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,__ZN24b2ChainAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,__ZN15b2CircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,___assert_fail__wrapper,_png_set_mem_fn,_png_set_error_fn,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15];

  return { _testSetjmp: _testSetjmp, ___cxa_can_catch: ___cxa_can_catch, _free: _free, _main: _main, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _memset: _memset, _malloc: _malloc, _saveSetjmp: _saveSetjmp, _memcpy: _memcpy, _strlen: _strlen, _bitshift64Lshr: _bitshift64Lshr, _strcpy: _strcpy, _llvm_bswap_i32: _llvm_bswap_i32, _bitshift64Shl: _bitshift64Shl, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_vi: dynCall_vi, dynCall_iiii: dynCall_iiii, dynCall_viiiii: dynCall_viiiii, dynCall_did: dynCall_did, dynCall_iiiiiiiiii: dynCall_iiiiiiiiii, dynCall_diiiid: dynCall_diiiid, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_viid: dynCall_viid, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_did = Module["dynCall_did"] = asm["dynCall_did"];
var dynCall_iiiiiiiiii = Module["dynCall_iiiiiiiiii"] = asm["dynCall_iiiiiiiiii"];
var dynCall_diiiid = Module["dynCall_diiiid"] = asm["dynCall_diiiid"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_viid = Module["dynCall_viid"] = asm["dynCall_viid"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }
    var request = Module['memoryInitializerRequest'];
    if (request) {
      // a network request has already been created, just use that
      if (request.response) {
        setTimeout(function() {
          applyMemoryInitializer(request.response);
        }, 0); // it's already here; but, apply it asynchronously
      } else {
        request.addEventListener('load', function() { // wait for it
          if (request.status !== 200 && request.status !== 0) {
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status);
          }
          if (!request.response || typeof request.response !== 'object' || !request.response.byteLength) {
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest response (expected ArrayBuffer): ' + request.response);
          }
          applyMemoryInitializer(request.response);
        });
      }
    } else {
      // fetch it from the network ourselves
      Browser.asyncLoad(memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (Module['onExit']) Module['onExit'](status);

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  abortDecorators.forEach(function(decorator) {
    output = decorator(output, what);
  });
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}






